
FCV4.3 Pinout F437ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a134  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800a2e8  0800a2e8  0001a2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e4  0800a7e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e4  0800a7e4  0001a7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7ec  0800a7ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000830  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a0c  20000a0c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b6ee  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003764  00000000  00000000  0004b8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022e0  00000000  00000000  0004f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021c0  00000000  00000000  00051340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028347  00000000  00000000  00053500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f7ec  00000000  00000000  0007b847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7fb4  00000000  00000000  0009b033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00192fe7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aa3c  00000000  00000000  0019303c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a2cc 	.word	0x0800a2cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800a2cc 	.word	0x0800a2cc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	460b      	mov	r3, r1
 8000ece:	72fb      	strb	r3, [r7, #11]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	893b      	ldrh	r3, [r7, #8]
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	21d5      	movs	r1, #213	; 0xd5
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f003 fa04 	bl	80042f8 <HAL_I2C_Mem_Write>
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b088      	sub	sp, #32
 8000efe:	af04      	add	r7, sp, #16
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	461a      	mov	r2, r3
 8000f06:	460b      	mov	r3, r1
 8000f08:	72fb      	strb	r3, [r7, #11]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	893b      	ldrh	r3, [r7, #8]
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	21d5      	movs	r1, #213	; 0xd5
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f003 fae1 	bl	80044ec <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08b      	sub	sp, #44	; 0x2c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 8000f40:	4a53      	ldr	r2, [pc, #332]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8000f46:	4b52      	ldr	r3, [pc, #328]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2216      	movs	r2, #22
 8000f50:	4950      	ldr	r1, [pc, #320]	; (8001094 <MRT_LSM6DSR_Setup+0x160>)
 8000f52:	f005 fd4a 	bl	80069ea <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 8000f56:	4b50      	ldr	r3, [pc, #320]	; (8001098 <MRT_LSM6DSR_Setup+0x164>)
 8000f58:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 8000f5a:	4b50      	ldr	r3, [pc, #320]	; (800109c <MRT_LSM6DSR_Setup+0x168>)
 8000f5c:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f002 fb46 	bl	80035f4 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	494c      	ldr	r1, [pc, #304]	; (80010a0 <MRT_LSM6DSR_Setup+0x16c>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fa3a 	bl	80033e8 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	2215      	movs	r2, #21
 8000f7e:	4949      	ldr	r1, [pc, #292]	; (80010a4 <MRT_LSM6DSR_Setup+0x170>)
 8000f80:	f005 fd33 	bl	80069ea <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 8000f84:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <MRT_LSM6DSR_Setup+0x16c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b6a      	cmp	r3, #106	; 0x6a
 8000f8a:	d032      	beq.n	8000ff2 <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	2208      	movs	r2, #8
 8000f96:	4944      	ldr	r1, [pc, #272]	; (80010a8 <MRT_LSM6DSR_Setup+0x174>)
 8000f98:	f005 fd27 	bl	80069ea <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	4941      	ldr	r1, [pc, #260]	; (80010ac <MRT_LSM6DSR_Setup+0x178>)
 8000fa8:	f005 fd1f 	bl	80069ea <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 8000fac:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <MRT_LSM6DSR_Setup+0x16c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	493e      	ldr	r1, [pc, #248]	; (80010b0 <MRT_LSM6DSR_Setup+0x17c>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 ff5b 	bl	8007e74 <siprintf>

			__BKPT();
 8000fbe:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000fc2:	681c      	ldr	r4, [r3, #0]
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f911 	bl	80001f0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f107 0110 	add.w	r1, r7, #16
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f005 fd05 	bl	80069ea <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	2216      	movs	r2, #22
 8000fea:	4932      	ldr	r1, [pc, #200]	; (80010b4 <MRT_LSM6DSR_Setup+0x180>)
 8000fec:	f005 fcfd 	bl	80069ea <HAL_UART_Transmit>
		  while(1);
 8000ff0:	e7fe      	b.n	8000ff0 <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	492e      	ldr	r1, [pc, #184]	; (80010b8 <MRT_LSM6DSR_Setup+0x184>)
 8000ffe:	f005 fcf4 	bl	80069ea <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2101      	movs	r1, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f002 f9fe 	bl	800340a <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800100e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001012:	f002 faef 	bl	80035f4 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4928      	ldr	r1, [pc, #160]	; (80010bc <MRT_LSM6DSR_Setup+0x188>)
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fa1a 	bl	8003456 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MRT_LSM6DSR_Setup+0x188>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f5      	bne.n	8001016 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2101      	movs	r1, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f002 f8c5 	bl	80031c0 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fea1 	bl	8002d84 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	2101      	movs	r1, #1
 8001048:	4618      	mov	r0, r3
 800104a:	f001 ffbd 	bl	8002fc8 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fe6f 	bl	8002d38 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	210c      	movs	r1, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f001 ff8b 	bl	8002f7c <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MRT_LSM6DSR_Setup+0x15c>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	2219      	movs	r2, #25
 8001070:	4913      	ldr	r1, [pc, #76]	; (80010c0 <MRT_LSM6DSR_Setup+0x18c>)
 8001072:	f005 fcba 	bl	80069ea <HAL_UART_Transmit>

	  return lsm_ctx;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	461c      	mov	r4, r3
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	372c      	adds	r7, #44	; 0x2c
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	20000238 	.word	0x20000238
 8001094:	0800a2e8 	.word	0x0800a2e8
 8001098:	08000ec1 	.word	0x08000ec1
 800109c:	08000efb 	.word	0x08000efb
 80010a0:	20000206 	.word	0x20000206
 80010a4:	0800a300 	.word	0x0800a300
 80010a8:	0800a318 	.word	0x0800a318
 80010ac:	0800a324 	.word	0x0800a324
 80010b0:	0800a338 	.word	0x0800a338
 80010b4:	0800a340 	.word	0x0800a340
 80010b8:	0800a358 	.word	0x0800a358
 80010bc:	20000207 	.word	0x20000207
 80010c0:	0800a360 	.word	0x0800a360

080010c4 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	1d3c      	adds	r4, r7, #4
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d0:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 80010d2:	f107 0217 	add.w	r2, r7, #23
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 f896 	bl	800320c <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d02d      	beq.n	8001142 <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80010e6:	2206      	movs	r2, #6
 80010e8:	2100      	movs	r1, #0
 80010ea:	4818      	ldr	r0, [pc, #96]	; (800114c <MRT_LSM6DSR_getAcceleration+0x88>)
 80010ec:	f006 fa50 	bl	8007590 <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4916      	ldr	r1, [pc, #88]	; (800114c <MRT_LSM6DSR_getAcceleration+0x88>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 f906 	bl	8003306 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MRT_LSM6DSR_getAcceleration+0x88>)
 80010fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fde9 	bl	8002cd8 <lsm6dsr_from_fs2g_to_mg>
 8001106:	eef0 7a40 	vmov.f32	s15, s0
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MRT_LSM6DSR_getAcceleration+0x88>)
 8001112:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	1d1c      	adds	r4, r3, #4
 800111a:	4610      	mov	r0, r2
 800111c:	f001 fddc 	bl	8002cd8 <lsm6dsr_from_fs2g_to_mg>
 8001120:	eef0 7a40 	vmov.f32	s15, s0
 8001124:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <MRT_LSM6DSR_getAcceleration+0x88>)
 800112a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f103 0408 	add.w	r4, r3, #8
 8001134:	4610      	mov	r0, r2
 8001136:	f001 fdcf 	bl	8002cd8 <lsm6dsr_from_fs2g_to_mg>
 800113a:	eef0 7a40 	vmov.f32	s15, s0
 800113e:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	bf00      	nop
 800114c:	200001f8 	.word	0x200001f8

08001150 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	1d3c      	adds	r4, r7, #4
 8001158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800115c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 800115e:	f107 0217 	add.w	r2, r7, #23
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f002 f869 	bl	800323e <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d02d      	beq.n	80011ce <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001172:	2206      	movs	r2, #6
 8001174:	2100      	movs	r1, #0
 8001176:	4818      	ldr	r0, [pc, #96]	; (80011d8 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001178:	f006 fa0a 	bl	8007590 <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4916      	ldr	r1, [pc, #88]	; (80011d8 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001180:	4618      	mov	r0, r3
 8001182:	f002 f875 	bl	8003270 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fdbb 	bl	8002d08 <lsm6dsr_from_fs2000dps_to_mdps>
 8001192:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MRT_LSM6DSR_getAngularRate+0x88>)
 800119e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80011a6:	4610      	mov	r0, r2
 80011a8:	f001 fdae 	bl	8002d08 <lsm6dsr_from_fs2000dps_to_mdps>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 80011b0:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MRT_LSM6DSR_getAngularRate+0x88>)
 80011b6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80011c0:	4610      	mov	r0, r2
 80011c2:	f001 fda1 	bl	8002d08 <lsm6dsr_from_fs2000dps_to_mdps>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 80011ca:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 80011ce:	bf00      	nop
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000200 	.word	0x20000200

080011dc <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08d      	sub	sp, #52	; 0x34
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 80011e8:	4a4b      	ldr	r2, [pc, #300]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 80011ee:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	2216      	movs	r2, #22
 80011f8:	4948      	ldr	r1, [pc, #288]	; (800131c <MRT_LPS22HH_Setup+0x140>)
 80011fa:	f005 fbf6 	bl	80069ea <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 80011fe:	4b48      	ldr	r3, [pc, #288]	; (8001320 <MRT_LPS22HH_Setup+0x144>)
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 8001202:	4b48      	ldr	r3, [pc, #288]	; (8001324 <MRT_LPS22HH_Setup+0x148>)
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	f002 f9f2 	bl	80035f4 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 8001210:	4b45      	ldr	r3, [pc, #276]	; (8001328 <MRT_LPS22HH_Setup+0x14c>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4943      	ldr	r1, [pc, #268]	; (8001328 <MRT_LPS22HH_Setup+0x14c>)
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fcda 	bl	8002bd6 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	2216      	movs	r2, #22
 800122c:	493f      	ldr	r1, [pc, #252]	; (800132c <MRT_LPS22HH_Setup+0x150>)
 800122e:	f005 fbdc 	bl	80069ea <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <MRT_LPS22HH_Setup+0x14c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2bb3      	cmp	r3, #179	; 0xb3
 8001238:	d031      	beq.n	800129e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2208      	movs	r2, #8
 8001244:	493a      	ldr	r1, [pc, #232]	; (8001330 <MRT_LPS22HH_Setup+0x154>)
 8001246:	f005 fbd0 	bl	80069ea <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2210      	movs	r2, #16
 8001254:	4937      	ldr	r1, [pc, #220]	; (8001334 <MRT_LPS22HH_Setup+0x158>)
 8001256:	f005 fbc8 	bl	80069ea <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <MRT_LPS22HH_Setup+0x14c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4934      	ldr	r1, [pc, #208]	; (8001338 <MRT_LPS22HH_Setup+0x15c>)
 8001266:	4618      	mov	r0, r3
 8001268:	f006 fe04 	bl	8007e74 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 800126e:	681c      	ldr	r4, [r3, #0]
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4618      	mov	r0, r3
 8001276:	f7fe ffbb 	bl	80001f0 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f107 0114 	add.w	r1, r7, #20
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	4620      	mov	r0, r4
 8001288:	f005 fbaf 	bl	80069ea <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	2216      	movs	r2, #22
 8001296:	4929      	ldr	r1, [pc, #164]	; (800133c <MRT_LPS22HH_Setup+0x160>)
 8001298:	f005 fba7 	bl	80069ea <HAL_UART_Transmit>
		  while(1);
 800129c:	e7fe      	b.n	800129c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	2204      	movs	r2, #4
 80012a8:	4925      	ldr	r1, [pc, #148]	; (8001340 <MRT_LPS22HH_Setup+0x164>)
 80012aa:	f005 fb9e 	bl	80069ea <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fc9f 	bl	8002bf8 <lps22hh_reset_set>

	  HAL_Delay(1000);
 80012ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012be:	f002 f999 	bl	80035f4 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	491f      	ldr	r1, [pc, #124]	; (8001344 <MRT_LPS22HH_Setup+0x168>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fcbb 	bl	8002c44 <lps22hh_reset_get>
	  } while (lps_rst);
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MRT_LPS22HH_Setup+0x168>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f5      	bne.n	80012c2 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fbdd 	bl	8002a9c <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	2115      	movs	r1, #21
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 fbfd 	bl	8002ae8 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MRT_LPS22HH_Setup+0x13c>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	2218      	movs	r2, #24
 80012f8:	4913      	ldr	r1, [pc, #76]	; (8001348 <MRT_LPS22HH_Setup+0x16c>)
 80012fa:	f005 fb76 	bl	80069ea <HAL_UART_Transmit>

	  return lps_ctx;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	461c      	mov	r4, r3
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800130a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	3734      	adds	r7, #52	; 0x34
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	20000238 	.word	0x20000238
 800131c:	0800a378 	.word	0x0800a378
 8001320:	080013ad 	.word	0x080013ad
 8001324:	080013e7 	.word	0x080013e7
 8001328:	2000020c 	.word	0x2000020c
 800132c:	0800a300 	.word	0x0800a300
 8001330:	0800a318 	.word	0x0800a318
 8001334:	0800a324 	.word	0x0800a324
 8001338:	0800a338 	.word	0x0800a338
 800133c:	0800a340 	.word	0x0800a340
 8001340:	0800a358 	.word	0x0800a358
 8001344:	2000020d 	.word	0x2000020d
 8001348:	0800a390 	.word	0x0800a390

0800134c <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	1d3c      	adds	r4, r7, #4
 8001354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001358:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800135a:	f107 0214 	add.w	r2, r7, #20
 800135e:	1d38      	adds	r0, r7, #4
 8001360:	2301      	movs	r3, #1
 8001362:	2127      	movs	r1, #39	; 0x27
 8001364:	f001 fb51 	bl	8002a0a <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001368:	7d3b      	ldrb	r3, [r7, #20]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d015      	beq.n	80013a0 <MRT_LPS22HH_getPressure+0x54>
	//if (reg) {
	  memset(data_raw_pressure, 0x00, sizeof(uint32_t));
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MRT_LPS22HH_getPressure+0x5c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2204      	movs	r2, #4
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f006 f907 	bl	8007590 <memset>
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4908      	ldr	r1, [pc, #32]	; (80013a8 <MRT_LPS22HH_getPressure+0x5c>)
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fbfc 	bl	8002b84 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MRT_LPS22HH_getPressure+0x5c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fb6b 	bl	8002a6c <lps22hh_from_lsb_to_hpa>
 8001396:	eef0 7a40 	vmov.f32	s15, s0
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	20000208 	.word	0x20000208

080013ac <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	461a      	mov	r2, r3
 80013b8:	460b      	mov	r3, r1
 80013ba:	72fb      	strb	r3, [r7, #11]
 80013bc:	4613      	mov	r3, r2
 80013be:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	893b      	ldrh	r3, [r7, #8]
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	21b9      	movs	r1, #185	; 0xb9
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f002 ff8e 	bl	80042f8 <HAL_I2C_Mem_Write>
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b088      	sub	sp, #32
 80013ea:	af04      	add	r7, sp, #16
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	461a      	mov	r2, r3
 80013f2:	460b      	mov	r3, r1
 80013f4:	72fb      	strb	r3, [r7, #11]
 80013f6:	4613      	mov	r3, r2
 80013f8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80013fa:	7afb      	ldrb	r3, [r7, #11]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	893b      	ldrh	r3, [r7, #8]
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	21b9      	movs	r1, #185	; 0xb9
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f003 f86b 	bl	80044ec <HAL_I2C_Mem_Read>
  return 0;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b0dc      	sub	sp, #368	; 0x170
 8001426:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f002 f8a2 	bl	8003570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f93a 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f000 fc5e 	bl	8001cf0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001434:	f000 f9a4 	bl	8001780 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001438:	f000 f9f4 	bl	8001824 <MX_I2C1_Init>
  MX_I2C2_Init();
 800143c:	f000 fa32 	bl	80018a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001440:	f000 fa70 	bl	8001924 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001444:	f000 faae 	bl	80019a4 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001448:	f000 fae2 	bl	8001a10 <MX_SPI4_Init>
  MX_SPI5_Init();
 800144c:	f000 fb16 	bl	8001a7c <MX_SPI5_Init>
  MX_TIM2_Init();
 8001450:	f000 fb4a 	bl	8001ae8 <MX_TIM2_Init>
  MX_UART8_Init();
 8001454:	f000 fba0 	bl	8001b98 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001458:	f000 fbc8 	bl	8001bec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800145c:	f000 fbf0 	bl	8001c40 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001460:	f000 fc18 	bl	8001c94 <MX_USB_OTG_FS_PCD_Init>
	float GYROz;
	float PRESSURE;
	float LAT;
	float LONG;
	float MIN;
	int SEC = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int SUBSEC = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	float STATE;
	float CONT;
	stmdev_ctx_t lsm_ctx;
	stmdev_ctx_t lps_ctx;

	lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 8001470:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001474:	4a83      	ldr	r2, [pc, #524]	; (8001684 <main+0x264>)
 8001476:	4984      	ldr	r1, [pc, #528]	; (8001688 <main+0x268>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd5b 	bl	8000f34 <MRT_LSM6DSR_Setup>
	lps_ctx = MRT_LPS22HH_Setup(&hi2c3,&DEBUG_USART);
 800147e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001482:	4a80      	ldr	r2, [pc, #512]	; (8001684 <main+0x264>)
 8001484:	4980      	ldr	r1, [pc, #512]	; (8001688 <main+0x268>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fea8 	bl	80011dc <MRT_LPS22HH_Setup>

  HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001492:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001496:	f002 fdd1 	bl	800403c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2108      	movs	r1, #8
 800149e:	487b      	ldr	r0, [pc, #492]	; (800168c <main+0x26c>)
 80014a0:	f002 fdcc 	bl	800403c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f002 f8a4 	bl	80035f4 <HAL_Delay>

  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80014ac:	4b78      	ldr	r3, [pc, #480]	; (8001690 <main+0x270>)
 80014ae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80014b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b4:	f7ff fe06 	bl	80010c4 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80014b8:	4b76      	ldr	r3, [pc, #472]	; (8001694 <main+0x274>)
 80014ba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80014be:	ca07      	ldmia	r2, {r0, r1, r2}
 80014c0:	f7ff fe46 	bl	8001150 <MRT_LSM6DSR_getAngularRate>
	  //MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);

	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80014c4:	4b74      	ldr	r3, [pc, #464]	; (8001698 <main+0x278>)
 80014c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80014cc:	f7ff ff3e 	bl	800134c <MRT_LPS22HH_getPressure>
	  //MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);

  	  ACCx = acceleration_mg[0];
 80014d0:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <main+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  	  ACCy = acceleration_mg[1];
 80014d8:	4b6d      	ldr	r3, [pc, #436]	; (8001690 <main+0x270>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  	  ACCz = acceleration_mg[2];
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <main+0x270>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  	  GYROx = angular_rate_mdps[0];
 80014e8:	4b6a      	ldr	r3, [pc, #424]	; (8001694 <main+0x274>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  	  GYROy = angular_rate_mdps[1];
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <main+0x274>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  	  GYROz = angular_rate_mdps[2];
 80014f8:	4b66      	ldr	r3, [pc, #408]	; (8001694 <main+0x274>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  	  PRESSURE = pressure_hPa;
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <main+0x278>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  	  LAT = 0.0;
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  	  LONG = 0.0;
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  	  MIN = 0.0;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	  SUBSEC = SUBSEC + 1;
 8001520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001524:	3301      	adds	r3, #1
 8001526:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  if (SUBSEC==100){
 800152a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d107      	bne.n	8001542 <main+0x122>
		 SUBSEC=0;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 SEC = SEC + 1;
 8001538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800153c:	3301      	adds	r3, #1
 800153e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  }

  	  STATE = 0.0;
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  	  CONT = 0.0;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  	  memset (xtend_tx_buffer,0,128);
 8001552:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f006 f818 	bl	8007590 <memset>
  	  sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%i,%i,%i,%i,%i,E\n", ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LAT,LONG,MIN,SEC,SUBSEC,STATE,CONT);
 8001560:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001564:	f7ff f800 	bl	8000568 <__aeabi_f2d>
 8001568:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800156c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001570:	f7fe fffa 	bl	8000568 <__aeabi_f2d>
 8001574:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8001578:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800157c:	f7fe fff4 	bl	8000568 <__aeabi_f2d>
 8001580:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001584:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8001588:	f7fe ffee 	bl	8000568 <__aeabi_f2d>
 800158c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001590:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001594:	f7fe ffe8 	bl	8000568 <__aeabi_f2d>
 8001598:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800159c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80015a0:	f7fe ffe2 	bl	8000568 <__aeabi_f2d>
 80015a4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80015a8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80015ac:	f7fe ffdc 	bl	8000568 <__aeabi_f2d>
 80015b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015b4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80015b8:	f7fe ffd6 	bl	8000568 <__aeabi_f2d>
 80015bc:	e9c7 0100 	strd	r0, r1, [r7]
 80015c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80015c4:	f7fe ffd0 	bl	8000568 <__aeabi_f2d>
 80015c8:	4682      	mov	sl, r0
 80015ca:	468b      	mov	fp, r1
 80015cc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80015d0:	f7fe ffca 	bl	8000568 <__aeabi_f2d>
 80015d4:	4680      	mov	r8, r0
 80015d6:	4689      	mov	r9, r1
 80015d8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80015dc:	f7fe ffc4 	bl	8000568 <__aeabi_f2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80015e8:	f7fe ffbe 	bl	8000568 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80015f4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80015f8:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80015fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001600:	9313      	str	r3, [sp, #76]	; 0x4c
 8001602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001606:	9312      	str	r3, [sp, #72]	; 0x48
 8001608:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800160c:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001610:	ed97 7b00 	vldr	d7, [r7]
 8001614:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001618:	ed97 7b02 	vldr	d7, [r7, #8]
 800161c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001620:	ed97 7b04 	vldr	d7, [r7, #16]
 8001624:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001628:	ed97 7b06 	vldr	d7, [r7, #24]
 800162c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001630:	ed97 7b08 	vldr	d7, [r7, #32]
 8001634:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001638:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800163c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001640:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001644:	ed8d 7b00 	vstr	d7, [sp]
 8001648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800164c:	4913      	ldr	r1, [pc, #76]	; (800169c <main+0x27c>)
 800164e:	f006 fc11 	bl	8007e74 <siprintf>
  	  //sprintf(xtend_tx_buffer,"S,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,E", ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LAT,LONG,MIN,SEC,SUBSEC,STATE,CONT);

	  HAL_UART_Transmit(&huart3, xtend_tx_buffer, sizeof(char) * strlen(xtend_tx_buffer), HAL_MAX_DELAY);
 8001652:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdca 	bl	80001f0 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <main+0x280>)
 800166a:	f005 f9be 	bl	80069ea <HAL_UART_Transmit>


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2108      	movs	r1, #8
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <main+0x26c>)
 8001674:	f002 fce2 	bl	800403c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167c:	f001 ffba 	bl	80035f4 <HAL_Delay>
  {
 8001680:	e70b      	b.n	800149a <main+0x7a>
 8001682:	bf00      	nop
 8001684:	200008d4 	.word	0x200008d4
 8001688:	2000023c 	.word	0x2000023c
 800168c:	40020800 	.word	0x40020800
 8001690:	20000214 	.word	0x20000214
 8001694:	20000220 	.word	0x20000220
 8001698:	20000210 	.word	0x20000210
 800169c:	0800a3a8 	.word	0x0800a3a8
 80016a0:	20000340 	.word	0x20000340

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	; 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	2230      	movs	r2, #48	; 0x30
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f005 ff6c 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <SystemClock_Config+0xd4>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a29      	ldr	r2, [pc, #164]	; (8001778 <SystemClock_Config+0xd4>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <SystemClock_Config+0xd4>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <SystemClock_Config+0xd8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016f0:	4a22      	ldr	r2, [pc, #136]	; (800177c <SystemClock_Config+0xd8>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <SystemClock_Config+0xd8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170e:	2301      	movs	r3, #1
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001712:	2310      	movs	r3, #16
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001720:	2310      	movs	r3, #16
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001724:	23c0      	movs	r3, #192	; 0xc0
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fdf3 	bl	8005320 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001740:	f000 fc70 	bl	8002024 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f004 f856 	bl	8005810 <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800176a:	f000 fc5b 	bl	8002024 <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3750      	adds	r7, #80	; 0x50
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001786:	463b      	mov	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_ADC1_Init+0x98>)
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <MX_ADC1_Init+0x9c>)
 8001796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <MX_ADC1_Init+0x98>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_ADC1_Init+0x98>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_ADC1_Init+0x98>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_ADC1_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_ADC1_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_ADC1_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_ADC1_Init+0x98>)
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <MX_ADC1_Init+0xa0>)
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_ADC1_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_ADC1_Init+0x98>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_ADC1_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_ADC1_Init+0x98>)
 80017da:	2201      	movs	r2, #1
 80017dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <MX_ADC1_Init+0x98>)
 80017e0:	f001 ff2c 	bl	800363c <HAL_ADC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f000 fc1b 	bl	8002024 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017ee:	2306      	movs	r3, #6
 80017f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_ADC1_Init+0x98>)
 8001800:	f001 ff60 	bl	80036c4 <HAL_ADC_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800180a:	f000 fc0b 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000834 	.word	0x20000834
 800181c:	40012000 	.word	0x40012000
 8001820:	0f000001 	.word	0x0f000001

08001824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_I2C1_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <MX_I2C1_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_I2C1_Init+0x74>)
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <MX_I2C1_Init+0x7c>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_I2C1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_I2C1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_I2C1_Init+0x74>)
 8001842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_I2C1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C1_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_I2C1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_I2C1_Init+0x74>)
 8001862:	f002 fc05 	bl	8004070 <HAL_I2C_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800186c:	f000 fbda 	bl	8002024 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001870:	2100      	movs	r1, #0
 8001872:	4809      	ldr	r0, [pc, #36]	; (8001898 <MX_I2C1_Init+0x74>)
 8001874:	f003 fbbb 	bl	8004fee <HAL_I2CEx_ConfigAnalogFilter>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800187e:	f000 fbd1 	bl	8002024 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_I2C1_Init+0x74>)
 8001886:	f003 fbee 	bl	8005066 <HAL_I2CEx_ConfigDigitalFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001890:	f000 fbc8 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000384 	.word	0x20000384
 800189c:	40005400 	.word	0x40005400
 80018a0:	000186a0 	.word	0x000186a0

080018a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_I2C2_Init+0x74>)
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <MX_I2C2_Init+0x78>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_I2C2_Init+0x74>)
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <MX_I2C2_Init+0x7c>)
 80018b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <MX_I2C2_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_I2C2_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_I2C2_Init+0x74>)
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_I2C2_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_I2C2_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_I2C2_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_I2C2_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_I2C2_Init+0x74>)
 80018e2:	f002 fbc5 	bl	8004070 <HAL_I2C_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f000 fb9a 	bl	8002024 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f0:	2100      	movs	r1, #0
 80018f2:	4809      	ldr	r0, [pc, #36]	; (8001918 <MX_I2C2_Init+0x74>)
 80018f4:	f003 fb7b 	bl	8004fee <HAL_I2CEx_ConfigAnalogFilter>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80018fe:	f000 fb91 	bl	8002024 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001902:	2100      	movs	r1, #0
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_I2C2_Init+0x74>)
 8001906:	f003 fbae 	bl	8005066 <HAL_I2CEx_ConfigDigitalFilter>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001910:	f000 fb88 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200007e0 	.word	0x200007e0
 800191c:	40005800 	.word	0x40005800
 8001920:	000186a0 	.word	0x000186a0

08001924 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_I2C3_Init+0x74>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <MX_I2C3_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_I2C3_Init+0x74>)
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <MX_I2C3_Init+0x7c>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_I2C3_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_I2C3_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_I2C3_Init+0x74>)
 8001942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001946:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_I2C3_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C3_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_I2C3_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C3_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_I2C3_Init+0x74>)
 8001962:	f002 fb85 	bl	8004070 <HAL_I2C_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800196c:	f000 fb5a 	bl	8002024 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <MX_I2C3_Init+0x74>)
 8001974:	f003 fb3b 	bl	8004fee <HAL_I2CEx_ConfigAnalogFilter>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800197e:	f000 fb51 	bl	8002024 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001982:	2100      	movs	r1, #0
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C3_Init+0x74>)
 8001986:	f003 fb6e 	bl	8005066 <HAL_I2CEx_ConfigDigitalFilter>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001990:	f000 fb48 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000023c 	.word	0x2000023c
 800199c:	40005c00 	.word	0x40005c00
 80019a0:	000186a0 	.word	0x000186a0

080019a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019aa:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <MX_SPI2_Init+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019f0:	220a      	movs	r2, #10
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019f6:	f004 f937 	bl	8005c68 <HAL_SPI_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a00:	f000 fb10 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000290 	.word	0x20000290
 8001a0c:	40003800 	.word	0x40003800

08001a10 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <MX_SPI4_Init+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a20:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_SPI4_Init+0x64>)
 8001a62:	f004 f901 	bl	8005c68 <HAL_SPI_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001a6c:	f000 fada 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000087c 	.word	0x2000087c
 8001a78:	40013400 	.word	0x40013400

08001a7c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <MX_SPI5_Init+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001ac8:	220a      	movs	r2, #10
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_SPI5_Init+0x64>)
 8001ace:	f004 f8cb 	bl	8005c68 <HAL_SPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ad8:	f000 faa4 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200002e8 	.word	0x200002e8
 8001ae4:	40015000 	.word	0x40015000

08001ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aee:	f107 0320 	add.w	r3, r7, #32
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b32:	4818      	ldr	r0, [pc, #96]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b34:	f004 f9ea 	bl	8005f0c <HAL_TIM_PWM_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b3e:	f000 fa71 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4810      	ldr	r0, [pc, #64]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b52:	f004 fe6d 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b5c:	f000 fa62 	bl	8002024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b60:	2360      	movs	r3, #96	; 0x60
 8001b62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2208      	movs	r2, #8
 8001b74:	4619      	mov	r1, r3
 8001b76:	4807      	ldr	r0, [pc, #28]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b78:	f004 fb20 	bl	80061bc <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b82:	f000 fa4f 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b86:	4803      	ldr	r0, [pc, #12]	; (8001b94 <MX_TIM2_Init+0xac>)
 8001b88:	f000 fc6a 	bl	8002460 <HAL_TIM_MspPostInit>

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	2000095c 	.word	0x2000095c

08001b98 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_UART8_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_UART8_Init+0x4c>)
 8001bd0:	f004 febe 	bl	8006950 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001bda:	f000 fa23 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200008d4 	.word	0x200008d4
 8001be8:	40007c00 	.word	0x40007c00

08001bec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART3_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001bf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c24:	f004 fe94 	bl	8006950 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f000 f9f9 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000340 	.word	0x20000340
 8001c3c:	40004800 	.word	0x40004800

08001c40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_USART6_UART_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c78:	f004 fe6a 	bl	8006950 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c82:	f000 f9cf 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000918 	.word	0x20000918
 8001c90:	40011400 	.word	0x40011400

08001c94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ca8:	2202      	movs	r2, #2
 8001caa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cd8:	f003 fa04 	bl	80050e4 <HAL_PCD_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001ce2:	f000 f99f 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200003d8 	.word	0x200003d8

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	; 0x38
 8001cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
 8001d0a:	4bb5      	ldr	r3, [pc, #724]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4ab4      	ldr	r2, [pc, #720]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d10:	f043 0310 	orr.w	r3, r3, #16
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4bb2      	ldr	r3, [pc, #712]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	4bae      	ldr	r3, [pc, #696]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4aad      	ldr	r2, [pc, #692]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4bab      	ldr	r3, [pc, #684]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	4ba7      	ldr	r3, [pc, #668]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4aa6      	ldr	r2, [pc, #664]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d48:	f043 0320 	orr.w	r3, r3, #32
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4ba4      	ldr	r3, [pc, #656]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	4ba0      	ldr	r3, [pc, #640]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a9f      	ldr	r2, [pc, #636]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b9d      	ldr	r3, [pc, #628]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a98      	ldr	r2, [pc, #608]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a91      	ldr	r2, [pc, #580]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a8a      	ldr	r2, [pc, #552]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a83      	ldr	r2, [pc, #524]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <MX_GPIO_Init+0x2f0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f248 4184 	movw	r1, #33924	; 0x8484
 8001dec:	487d      	ldr	r0, [pc, #500]	; (8001fe4 <MX_GPIO_Init+0x2f4>)
 8001dee:	f002 f925 	bl	800403c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001df8:	487b      	ldr	r0, [pc, #492]	; (8001fe8 <MX_GPIO_Init+0x2f8>)
 8001dfa:	f002 f91f 	bl	800403c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001e04:	4879      	ldr	r0, [pc, #484]	; (8001fec <MX_GPIO_Init+0x2fc>)
 8001e06:	f002 f919 	bl	800403c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	4878      	ldr	r0, [pc, #480]	; (8001ff0 <MX_GPIO_Init+0x300>)
 8001e10:	f002 f914 	bl	800403c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001e14:	2200      	movs	r2, #0
 8001e16:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8001e1a:	4876      	ldr	r0, [pc, #472]	; (8001ff4 <MX_GPIO_Init+0x304>)
 8001e1c:	f002 f90e 	bl	800403c <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	4874      	ldr	r0, [pc, #464]	; (8001ff8 <MX_GPIO_Init+0x308>)
 8001e28:	f002 f908 	bl	800403c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001e32:	4872      	ldr	r0, [pc, #456]	; (8001ffc <MX_GPIO_Init+0x30c>)
 8001e34:	f002 f902 	bl	800403c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001e38:	f248 4384 	movw	r3, #33924	; 0x8484
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4864      	ldr	r0, [pc, #400]	; (8001fe4 <MX_GPIO_Init+0x2f4>)
 8001e52:	f001 ff47 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001e56:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	485e      	ldr	r0, [pc, #376]	; (8001fe8 <MX_GPIO_Init+0x2f8>)
 8001e70:	f001 ff38 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001e74:	2301      	movs	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	4858      	ldr	r0, [pc, #352]	; (8001fec <MX_GPIO_Init+0x2fc>)
 8001e8a:	f001 ff2b 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001e8e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4851      	ldr	r0, [pc, #324]	; (8001fec <MX_GPIO_Init+0x2fc>)
 8001ea8:	f001 ff1c 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001eac:	2308      	movs	r3, #8
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	484b      	ldr	r0, [pc, #300]	; (8001ff0 <MX_GPIO_Init+0x300>)
 8001ec4:	f001 ff0e 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001ec8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4843      	ldr	r0, [pc, #268]	; (8001fec <MX_GPIO_Init+0x2fc>)
 8001ede:	f001 ff01 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4840      	ldr	r0, [pc, #256]	; (8001ff8 <MX_GPIO_Init+0x308>)
 8001ef6:	f001 fef5 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4836      	ldr	r0, [pc, #216]	; (8001fe8 <MX_GPIO_Init+0x2f8>)
 8001f10:	f001 fee8 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8001f14:	f242 4301 	movw	r3, #9217	; 0x2401
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4832      	ldr	r0, [pc, #200]	; (8001ff4 <MX_GPIO_Init+0x304>)
 8001f2a:	f001 fedb 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001f2e:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	482b      	ldr	r0, [pc, #172]	; (8001ff4 <MX_GPIO_Init+0x304>)
 8001f48:	f001 fecc 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001f4c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4820      	ldr	r0, [pc, #128]	; (8001fe4 <MX_GPIO_Init+0x2f4>)
 8001f62:	f001 febf 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8001f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	481e      	ldr	r0, [pc, #120]	; (8001ff8 <MX_GPIO_Init+0x308>)
 8001f80:	f001 feb0 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001f84:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4817      	ldr	r0, [pc, #92]	; (8001ffc <MX_GPIO_Init+0x30c>)
 8001f9e:	f001 fea1 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4811      	ldr	r0, [pc, #68]	; (8001ffc <MX_GPIO_Init+0x30c>)
 8001fb8:	f001 fe94 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8001fbc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <MX_GPIO_Init+0x304>)
 8001fd4:	f001 fe86 	bl	8003ce4 <HAL_GPIO_Init>

}
 8001fd8:	bf00      	nop
 8001fda:	3738      	adds	r7, #56	; 0x38
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020c00 	.word	0x40020c00

08002000 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002012:	f001 facf 	bl	80035b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40001000 	.word	0x40001000

08002024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800202c:	e7fe      	b.n	800202c <Error_Handler+0x8>
	...

08002030 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_MspInit+0x4c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a0f      	ldr	r2, [pc, #60]	; (800207c <HAL_MspInit+0x4c>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_MspInit+0x4c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_MspInit+0x4c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_MspInit+0x4c>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_MspInit+0x4c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800

08002080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_ADC_MspInit+0x7c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d127      	bne.n	80020f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_ADC_MspInit+0x80>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_ADC_MspInit+0x80>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_ADC_MspInit+0x80>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_ADC_MspInit+0x80>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_ADC_MspInit+0x80>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_ADC_MspInit+0x80>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020de:	2303      	movs	r3, #3
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <HAL_ADC_MspInit+0x84>)
 80020ee:	f001 fdf9 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40012000 	.word	0x40012000
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	; 0x38
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a5c      	ldr	r2, [pc, #368]	; (8002298 <HAL_I2C_MspInit+0x190>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d12d      	bne.n	8002186 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	4b5b      	ldr	r3, [pc, #364]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a5a      	ldr	r2, [pc, #360]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b58      	ldr	r3, [pc, #352]	; (800229c <HAL_I2C_MspInit+0x194>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002146:	f44f 7340 	mov.w	r3, #768	; 0x300
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214c:	2312      	movs	r3, #18
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002150:	2301      	movs	r3, #1
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002158:	2304      	movs	r3, #4
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	484f      	ldr	r0, [pc, #316]	; (80022a0 <HAL_I2C_MspInit+0x198>)
 8002164:	f001 fdbe 	bl	8003ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <HAL_I2C_MspInit+0x194>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	4a4a      	ldr	r2, [pc, #296]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002172:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002176:	6413      	str	r3, [r2, #64]	; 0x40
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <HAL_I2C_MspInit+0x194>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002184:	e083      	b.n	800228e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a46      	ldr	r2, [pc, #280]	; (80022a4 <HAL_I2C_MspInit+0x19c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d12d      	bne.n	80021ec <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_I2C_MspInit+0x194>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b3e      	ldr	r3, [pc, #248]	; (800229c <HAL_I2C_MspInit+0x194>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b2:	2312      	movs	r3, #18
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021be:	2304      	movs	r3, #4
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c6:	4619      	mov	r1, r3
 80021c8:	4835      	ldr	r0, [pc, #212]	; (80022a0 <HAL_I2C_MspInit+0x198>)
 80021ca:	f001 fd8b 	bl	8003ce4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_I2C_MspInit+0x194>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_I2C_MspInit+0x194>)
 80021d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_I2C_MspInit+0x194>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
}
 80021ea:	e050      	b.n	800228e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <HAL_I2C_MspInit+0x1a0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d14b      	bne.n	800228e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_I2C_MspInit+0x194>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a27      	ldr	r2, [pc, #156]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_I2C_MspInit+0x194>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800222e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002234:	2312      	movs	r3, #18
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002238:	2301      	movs	r3, #1
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002240:	2304      	movs	r3, #4
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	4619      	mov	r1, r3
 800224a:	4818      	ldr	r0, [pc, #96]	; (80022ac <HAL_I2C_MspInit+0x1a4>)
 800224c:	f001 fd4a 	bl	8003ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002256:	2312      	movs	r3, #18
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225a:	2301      	movs	r3, #1
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002262:	2304      	movs	r3, #4
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	4619      	mov	r1, r3
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <HAL_I2C_MspInit+0x1a8>)
 800226e:	f001 fd39 	bl	8003ce4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <HAL_I2C_MspInit+0x194>)
 800227c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_I2C_MspInit+0x194>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
}
 800228e:	bf00      	nop
 8002290:	3738      	adds	r7, #56	; 0x38
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40005400 	.word	0x40005400
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020400 	.word	0x40020400
 80022a4:	40005800 	.word	0x40005800
 80022a8:	40005c00 	.word	0x40005c00
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08e      	sub	sp, #56	; 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a4c      	ldr	r2, [pc, #304]	; (8002404 <HAL_SPI_MspInit+0x150>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12d      	bne.n	8002332 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
 80022da:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b48      	ldr	r3, [pc, #288]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	623b      	str	r3, [r7, #32]
 80022f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	4b44      	ldr	r3, [pc, #272]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a43      	ldr	r2, [pc, #268]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_SPI_MspInit+0x154>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800230e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002320:	2305      	movs	r3, #5
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	4838      	ldr	r0, [pc, #224]	; (800240c <HAL_SPI_MspInit+0x158>)
 800232c:	f001 fcda 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002330:	e064      	b.n	80023fc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a36      	ldr	r2, [pc, #216]	; (8002410 <HAL_SPI_MspInit+0x15c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d12d      	bne.n	8002398 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_SPI_MspInit+0x154>)
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	4a30      	ldr	r2, [pc, #192]	; (8002408 <HAL_SPI_MspInit+0x154>)
 8002346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800234a:	6453      	str	r3, [r2, #68]	; 0x44
 800234c:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_SPI_MspInit+0x154>)
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_SPI_MspInit+0x154>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <HAL_SPI_MspInit+0x154>)
 8002362:	f043 0310 	orr.w	r3, r3, #16
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_SPI_MspInit+0x154>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002374:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002386:	2305      	movs	r3, #5
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	4619      	mov	r1, r3
 8002390:	4820      	ldr	r0, [pc, #128]	; (8002414 <HAL_SPI_MspInit+0x160>)
 8002392:	f001 fca7 	bl	8003ce4 <HAL_GPIO_Init>
}
 8002396:	e031      	b.n	80023fc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_SPI_MspInit+0x164>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12c      	bne.n	80023fc <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80023ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80023c8:	f043 0320 	orr.w	r3, r3, #32
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_SPI_MspInit+0x154>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80023da:	f44f 7360 	mov.w	r3, #896	; 0x380
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023ec:	2305      	movs	r3, #5
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	4619      	mov	r1, r3
 80023f6:	4809      	ldr	r0, [pc, #36]	; (800241c <HAL_SPI_MspInit+0x168>)
 80023f8:	f001 fc74 	bl	8003ce4 <HAL_GPIO_Init>
}
 80023fc:	bf00      	nop
 80023fe:	3738      	adds	r7, #56	; 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40003800 	.word	0x40003800
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400
 8002410:	40013400 	.word	0x40013400
 8002414:	40021000 	.word	0x40021000
 8002418:	40015000 	.word	0x40015000
 800241c:	40021400 	.word	0x40021400

08002420 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d10d      	bne.n	800244e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_TIM_PWM_MspInit+0x3c>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_TIM_PWM_MspInit+0x3c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_TIM_PWM_MspInit+0x3c>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d11d      	bne.n	80024be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_TIM_MspPostInit+0x68>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_TIM_MspPostInit+0x68>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_TIM_MspPostInit+0x68>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800249e:	2304      	movs	r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ae:	2301      	movs	r3, #1
 80024b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	4619      	mov	r1, r3
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <HAL_TIM_MspPostInit+0x6c>)
 80024ba:	f001 fc13 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020000 	.word	0x40020000

080024d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a4b      	ldr	r2, [pc, #300]	; (800261c <HAL_UART_MspInit+0x14c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d12c      	bne.n	800254c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_UART_MspInit+0x150>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a49      	ldr	r2, [pc, #292]	; (8002620 <HAL_UART_MspInit+0x150>)
 80024fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800252a:	2303      	movs	r3, #3
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800253a:	2308      	movs	r3, #8
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800253e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002542:	4619      	mov	r1, r3
 8002544:	4837      	ldr	r0, [pc, #220]	; (8002624 <HAL_UART_MspInit+0x154>)
 8002546:	f001 fbcd 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800254a:	e063      	b.n	8002614 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a35      	ldr	r2, [pc, #212]	; (8002628 <HAL_UART_MspInit+0x158>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d12d      	bne.n	80025b2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <HAL_UART_MspInit+0x150>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a30      	ldr	r2, [pc, #192]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a29      	ldr	r2, [pc, #164]	; (8002620 <HAL_UART_MspInit+0x150>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_UART_MspInit+0x150>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 800258e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a0:	2307      	movs	r3, #7
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	4820      	ldr	r0, [pc, #128]	; (800262c <HAL_UART_MspInit+0x15c>)
 80025ac:	f001 fb9a 	bl	8003ce4 <HAL_GPIO_Init>
}
 80025b0:	e030      	b.n	8002614 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_UART_MspInit+0x160>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d12b      	bne.n	8002614 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_UART_MspInit+0x150>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_UART_MspInit+0x150>)
 80025c6:	f043 0320 	orr.w	r3, r3, #32
 80025ca:	6453      	str	r3, [r2, #68]	; 0x44
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_UART_MspInit+0x150>)
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_UART_MspInit+0x150>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <HAL_UART_MspInit+0x150>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_UART_MspInit+0x150>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 80025f4:	23c0      	movs	r3, #192	; 0xc0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002604:	2308      	movs	r3, #8
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260c:	4619      	mov	r1, r3
 800260e:	4809      	ldr	r0, [pc, #36]	; (8002634 <HAL_UART_MspInit+0x164>)
 8002610:	f001 fb68 	bl	8003ce4 <HAL_GPIO_Init>
}
 8002614:	bf00      	nop
 8002616:	3738      	adds	r7, #56	; 0x38
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40007c00 	.word	0x40007c00
 8002620:	40023800 	.word	0x40023800
 8002624:	40021000 	.word	0x40021000
 8002628:	40004800 	.word	0x40004800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40011400 	.word	0x40011400
 8002634:	40020800 	.word	0x40020800

08002638 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002658:	d13f      	bne.n	80026da <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800267a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4817      	ldr	r0, [pc, #92]	; (80026e8 <HAL_PCD_MspInit+0xb0>)
 800268c:	f001 fb2a 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002690:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026a2:	230a      	movs	r3, #10
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	480e      	ldr	r0, [pc, #56]	; (80026e8 <HAL_PCD_MspInit+0xb0>)
 80026ae:	f001 fb19 	bl	8003ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 80026b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026bc:	6353      	str	r3, [r2, #52]	; 0x34
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_PCD_MspInit+0xac>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020000 	.word	0x40020000

080026ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	2036      	movs	r0, #54	; 0x36
 8002702:	f001 fac5 	bl	8003c90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002706:	2036      	movs	r0, #54	; 0x36
 8002708:	f001 fade 	bl	8003cc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_InitTick+0xa0>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_InitTick+0xa0>)
 8002716:	f043 0310 	orr.w	r3, r3, #16
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_InitTick+0xa0>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002728:	f107 0210 	add.w	r2, r7, #16
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fa66 	bl	8005c04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002738:	f003 fa3c 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 800273c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	4a13      	ldr	r2, [pc, #76]	; (8002790 <HAL_InitTick+0xa4>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9b      	lsrs	r3, r3, #18
 8002748:	3b01      	subs	r3, #1
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_InitTick+0xa8>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_InitTick+0xac>)
 8002750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_InitTick+0xa8>)
 8002754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002758:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_InitTick+0xa8>)
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_InitTick+0xa8>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_InitTick+0xa8>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800276c:	4809      	ldr	r0, [pc, #36]	; (8002794 <HAL_InitTick+0xa8>)
 800276e:	f003 fb04 	bl	8005d7a <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d104      	bne.n	8002782 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002778:	4806      	ldr	r0, [pc, #24]	; (8002794 <HAL_InitTick+0xa8>)
 800277a:	f003 fb57 	bl	8005e2c <HAL_TIM_Base_Start_IT>
 800277e:	4603      	mov	r3, r0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3730      	adds	r7, #48	; 0x30
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	431bde83 	.word	0x431bde83
 8002794:	200009b0 	.word	0x200009b0
 8002798:	40001000 	.word	0x40001000

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <NMI_Handler+0x4>

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <MemManage_Handler+0x4>

080027ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler+0x4>

080027ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <TIM6_DAC_IRQHandler+0x10>)
 80027fa:	f003 fbd6 	bl	8005faa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200009b0 	.word	0x200009b0

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_kill>:

int _kill(int pid, int sig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002822:	f004 fe8b 	bl	800753c <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	2216      	movs	r2, #22
 800282a:	601a      	str	r2, [r3, #0]
	return -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_exit>:

void _exit (int status)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800284a:	e7fe      	b.n	800284a <_exit+0x12>

0800284c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e00a      	b.n	8002874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285e:	f3af 8000 	nop.w
 8002862:	4601      	mov	r1, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	b2ca      	uxtb	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	dbf0      	blt.n	800285e <_read+0x12>
	}

return len;
 800287c:	687b      	ldr	r3, [r7, #4]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e009      	b.n	80028ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	60ba      	str	r2, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dbf1      	blt.n	8002898 <_write+0x12>
	}
	return len;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_close>:

int _close(int file)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	return -1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e6:	605a      	str	r2, [r3, #4]
	return 0;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <_isatty>:

int _isatty(int file)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	return 1;
 80028fe:	2301      	movs	r3, #1
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	return 0;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <_sbrk+0x5c>)
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <_sbrk+0x60>)
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <_sbrk+0x64>)
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <_sbrk+0x68>)
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d207      	bcs.n	8002968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002958:	f004 fdf0 	bl	800753c <__errno>
 800295c:	4603      	mov	r3, r0
 800295e:	220c      	movs	r2, #12
 8002960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	e009      	b.n	800297c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <_sbrk+0x64>)
 8002978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20030000 	.word	0x20030000
 8002988:	00000400 	.word	0x00000400
 800298c:	2000022c 	.word	0x2000022c
 8002990:	20000a10 	.word	0x20000a10

08002994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <SystemInit+0x20>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <SystemInit+0x20>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029be:	490e      	ldr	r1, [pc, #56]	; (80029f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c4:	e002      	b.n	80029cc <LoopCopyDataInit>

080029c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ca:	3304      	adds	r3, #4

080029cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d0:	d3f9      	bcc.n	80029c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d4:	4c0b      	ldr	r4, [pc, #44]	; (8002a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d8:	e001      	b.n	80029de <LoopFillZerobss>

080029da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029dc:	3204      	adds	r2, #4

080029de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e0:	d3fb      	bcc.n	80029da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029e2:	f7ff ffd7 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e6:	f004 fdaf 	bl	8007548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ea:	f7fe fd19 	bl	8001420 <main>
  bx  lr    
 80029ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80029f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80029fc:	0800a7f4 	.word	0x0800a7f4
  ldr r2, =_sbss
 8002a00:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a04:	20000a0c 	.word	0x20000a0c

08002a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a08:	e7fe      	b.n	8002a08 <ADC_IRQHandler>

08002a0a <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002a0a:	b590      	push	{r4, r7, lr}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	461a      	mov	r2, r3
 8002a16:	460b      	mov	r3, r1
 8002a18:	72fb      	strb	r3, [r7, #11]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685c      	ldr	r4, [r3, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6898      	ldr	r0, [r3, #8]
 8002a26:	893b      	ldrh	r3, [r7, #8]
 8002a28:	7af9      	ldrb	r1, [r7, #11]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	47a0      	blx	r4
 8002a2e:	6178      	str	r0, [r7, #20]

  return ret;
 8002a30:	697b      	ldr	r3, [r7, #20]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd90      	pop	{r4, r7, pc}

08002a3a <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002a3a:	b590      	push	{r4, r7, lr}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	461a      	mov	r2, r3
 8002a46:	460b      	mov	r3, r1
 8002a48:	72fb      	strb	r3, [r7, #11]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681c      	ldr	r4, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6898      	ldr	r0, [r3, #8]
 8002a56:	893b      	ldrh	r3, [r7, #8]
 8002a58:	7af9      	ldrb	r1, [r7, #11]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	47a0      	blx	r4
 8002a5e:	6178      	str	r0, [r7, #20]

  return ret;
 8002a60:	697b      	ldr	r3, [r7, #20]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd90      	pop	{r4, r7, pc}
	...

08002a6c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002a98 <lps22hh_from_lsb_to_hpa+0x2c>
 8002a82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a86:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	49800000 	.word	0x49800000

08002a9c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002aa8:	f107 0208 	add.w	r2, r7, #8
 8002aac:	2301      	movs	r3, #1
 8002aae:	2110      	movs	r1, #16
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffaa 	bl	8002a0a <lps22hh_read_reg>
 8002ab6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	7a3b      	ldrb	r3, [r7, #8]
 8002ac8:	f362 0341 	bfi	r3, r2, #1, #1
 8002acc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002ace:	f107 0208 	add.w	r2, r7, #8
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2110      	movs	r1, #16
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffaf 	bl	8002a3a <lps22hh_write_reg>
 8002adc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002af4:	f107 0210 	add.w	r2, r7, #16
 8002af8:	2301      	movs	r3, #1
 8002afa:	2110      	movs	r1, #16
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff84 	bl	8002a0a <lps22hh_read_reg>
 8002b02:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002b0a:	f107 020c 	add.w	r2, r7, #12
 8002b0e:	2301      	movs	r3, #1
 8002b10:	2111      	movs	r1, #17
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ff79 	bl	8002a0a <lps22hh_read_reg>
 8002b18:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	7c3b      	ldrb	r3, [r7, #16]
 8002b2a:	f362 1306 	bfi	r3, r2, #4, #3
 8002b2e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002b30:	f107 0210 	add.w	r2, r7, #16
 8002b34:	2301      	movs	r3, #1
 8002b36:	2110      	movs	r1, #16
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff7e 	bl	8002a3a <lps22hh_write_reg>
 8002b3e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d119      	bne.n	8002b7a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	7b3b      	ldrb	r3, [r7, #12]
 8002b52:	f362 0341 	bfi	r3, r2, #1, #1
 8002b56:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	08db      	lsrs	r3, r3, #3
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	7b3b      	ldrb	r3, [r7, #12]
 8002b64:	f362 0300 	bfi	r3, r2, #0, #1
 8002b68:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002b6a:	f107 020c 	add.w	r2, r7, #12
 8002b6e:	2301      	movs	r3, #1
 8002b70:	2111      	movs	r1, #17
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ff61 	bl	8002a3a <lps22hh_write_reg>
 8002b78:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8002b8e:	f107 0208 	add.w	r2, r7, #8
 8002b92:	2303      	movs	r3, #3
 8002b94:	2128      	movs	r1, #40	; 0x28
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff37 	bl	8002a0a <lps22hh_read_reg>
 8002b9c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8002b9e:	7abb      	ldrb	r3, [r7, #10]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	7a7a      	ldrb	r2, [r7, #9]
 8002bae:	441a      	add	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	7a3a      	ldrb	r2, [r7, #8]
 8002bbc:	441a      	add	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	021a      	lsls	r2, r3, #8
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	601a      	str	r2, [r3, #0]

  return ret;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8002be0:	2301      	movs	r3, #1
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	210f      	movs	r1, #15
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff0f 	bl	8002a0a <lps22hh_read_reg>
 8002bec:	60f8      	str	r0, [r7, #12]

  return ret;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002c04:	f107 0208 	add.w	r2, r7, #8
 8002c08:	2301      	movs	r3, #1
 8002c0a:	2111      	movs	r1, #17
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fefc 	bl	8002a0a <lps22hh_read_reg>
 8002c12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	7a3b      	ldrb	r3, [r7, #8]
 8002c24:	f362 0382 	bfi	r3, r2, #2, #1
 8002c28:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002c2a:	f107 0208 	add.w	r2, r7, #8
 8002c2e:	2301      	movs	r3, #1
 8002c30:	2111      	movs	r1, #17
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff01 	bl	8002a3a <lps22hh_write_reg>
 8002c38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002c4e:	f107 0208 	add.w	r2, r7, #8
 8002c52:	2301      	movs	r3, #1
 8002c54:	2111      	movs	r1, #17
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fed7 	bl	8002a0a <lps22hh_read_reg>
 8002c5c:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8002c5e:	7a3b      	ldrb	r3, [r7, #8]
 8002c60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	701a      	strb	r2, [r3, #0]

  return ret;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002c76:	b590      	push	{r4, r7, lr}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	461a      	mov	r2, r3
 8002c82:	460b      	mov	r3, r1
 8002c84:	72fb      	strb	r3, [r7, #11]
 8002c86:	4613      	mov	r3, r2
 8002c88:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685c      	ldr	r4, [r3, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6898      	ldr	r0, [r3, #8]
 8002c92:	893b      	ldrh	r3, [r7, #8]
 8002c94:	7af9      	ldrb	r1, [r7, #11]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	47a0      	blx	r4
 8002c9a:	6178      	str	r0, [r7, #20]

  return ret;
 8002c9c:	697b      	ldr	r3, [r7, #20]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd90      	pop	{r4, r7, pc}

08002ca6 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002ca6:	b590      	push	{r4, r7, lr}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	72fb      	strb	r3, [r7, #11]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681c      	ldr	r4, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6898      	ldr	r0, [r3, #8]
 8002cc2:	893b      	ldrh	r3, [r7, #8]
 8002cc4:	7af9      	ldrb	r1, [r7, #11]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	47a0      	blx	r4
 8002cca:	6178      	str	r0, [r7, #20]

  return ret;
 8002ccc:	697b      	ldr	r3, [r7, #20]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd90      	pop	{r4, r7, pc}
	...

08002cd8 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8002ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002d04 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8002cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	3d79db23 	.word	0x3d79db23

08002d08 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002d34 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8002d22:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d26:	eeb0 0a67 	vmov.f32	s0, s15
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	428c0000 	.word	0x428c0000

08002d38 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002d44:	f107 0208 	add.w	r2, r7, #8
 8002d48:	2301      	movs	r3, #1
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff92 	bl	8002c76 <lsm6dsr_read_reg>
 8002d52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	7a3b      	ldrb	r3, [r7, #8]
 8002d64:	f362 0383 	bfi	r3, r2, #2, #2
 8002d68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8002d6a:	f107 0208 	add.w	r2, r7, #8
 8002d6e:	2301      	movs	r3, #1
 8002d70:	2110      	movs	r1, #16
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ff97 	bl	8002ca6 <lsm6dsr_write_reg>
 8002d78:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fb74 	bl	8003488 <lsm6dsr_fsm_enable_get>
 8002da0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f040 80c4 	bne.w	8002f32 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002daa:	7b3b      	ldrb	r3, [r7, #12]
 8002dac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002db0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002db2:	7b3b      	ldrb	r3, [r7, #12]
 8002db4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002db8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002dbe:	7b3b      	ldrb	r3, [r7, #12]
 8002dc0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002dc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002dca:	7b3b      	ldrb	r3, [r7, #12]
 8002dcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002dd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002dd6:	7b3b      	ldrb	r3, [r7, #12]
 8002dd8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ddc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002de2:	7b3b      	ldrb	r3, [r7, #12]
 8002de4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002de8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002dee:	7b3b      	ldrb	r3, [r7, #12]
 8002df0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002df4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002dfa:	7b3b      	ldrb	r3, [r7, #12]
 8002dfc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002e06:	7b7b      	ldrb	r3, [r7, #13]
 8002e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002e12:	7b7b      	ldrb	r3, [r7, #13]
 8002e14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002e1e:	7b7b      	ldrb	r3, [r7, #13]
 8002e20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002e2a:	7b7b      	ldrb	r3, [r7, #13]
 8002e2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002e36:	7b7b      	ldrb	r3, [r7, #13]
 8002e38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002e42:	7b7b      	ldrb	r3, [r7, #13]
 8002e44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002e4e:	7b7b      	ldrb	r3, [r7, #13]
 8002e50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d163      	bne.n	8002f32 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8002e6a:	f107 030b 	add.w	r3, r7, #11
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fb35 	bl	80034e0 <lsm6dsr_fsm_data_rate_get>
 8002e76:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d159      	bne.n	8002f32 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d853      	bhi.n	8002f2c <lsm6dsr_xl_data_rate_set+0x1a8>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <lsm6dsr_xl_data_rate_set+0x108>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002eaf 	.word	0x08002eaf
 8002e94:	08002ecd 	.word	0x08002ecd
 8002e98:	08002ef7 	.word	0x08002ef7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002ea6:	e045      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	75fb      	strb	r3, [r7, #23]
            break;
 8002eac:	e042      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002eb8:	e03c      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8002ec4:	e036      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	75fb      	strb	r3, [r7, #23]
            break;
 8002eca:	e033      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002ed6:	e02d      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	75fb      	strb	r3, [r7, #23]
            break;
 8002ee2:	e027      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d102      	bne.n	8002ef0 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8002eea:	2303      	movs	r3, #3
 8002eec:	75fb      	strb	r3, [r7, #23]
            break;
 8002eee:	e021      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	75fb      	strb	r3, [r7, #23]
            break;
 8002ef4:	e01e      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8002efc:	2304      	movs	r3, #4
 8002efe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002f00:	e018      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	75fb      	strb	r3, [r7, #23]
            break;
 8002f0c:	e012      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d102      	bne.n	8002f1a <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8002f14:	2304      	movs	r3, #4
 8002f16:	75fb      	strb	r3, [r7, #23]
            break;
 8002f18:	e00c      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d102      	bne.n	8002f26 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8002f20:	2304      	movs	r3, #4
 8002f22:	75fb      	strb	r3, [r7, #23]
            break;
 8002f24:	e006      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	75fb      	strb	r3, [r7, #23]
            break;
 8002f2a:	e003      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8002f30:	e000      	b.n	8002f34 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8002f32:	bf00      	nop
    }
  }

  if (ret == 0)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002f3a:	f107 0208 	add.w	r2, r7, #8
 8002f3e:	2301      	movs	r3, #1
 8002f40:	2110      	movs	r1, #16
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fe97 	bl	8002c76 <lsm6dsr_read_reg>
 8002f48:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10f      	bne.n	8002f70 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	7a3b      	ldrb	r3, [r7, #8]
 8002f5a:	f362 1307 	bfi	r3, r2, #4, #4
 8002f5e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8002f60:	f107 0208 	add.w	r2, r7, #8
 8002f64:	2301      	movs	r3, #1
 8002f66:	2110      	movs	r1, #16
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff fe9c 	bl	8002ca6 <lsm6dsr_write_reg>
 8002f6e:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002f70:	693b      	ldr	r3, [r7, #16]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop

08002f7c <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002f88:	f107 0208 	add.w	r2, r7, #8
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	2111      	movs	r1, #17
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fe70 	bl	8002c76 <lsm6dsr_read_reg>
 8002f96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	7a3b      	ldrb	r3, [r7, #8]
 8002fa8:	f362 0303 	bfi	r3, r2, #0, #4
 8002fac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	2111      	movs	r1, #17
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fe75 	bl	8002ca6 <lsm6dsr_write_reg>
 8002fbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa52 	bl	8003488 <lsm6dsr_fsm_enable_get>
 8002fe4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 80c4 	bne.w	8003176 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002fee:	7b3b      	ldrb	r3, [r7, #12]
 8002ff0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ff4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002ff6:	7b3b      	ldrb	r3, [r7, #12]
 8002ff8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ffc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003002:	7b3b      	ldrb	r3, [r7, #12]
 8003004:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003008:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800300a:	4313      	orrs	r3, r2
 800300c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800300e:	7b3b      	ldrb	r3, [r7, #12]
 8003010:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003014:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003016:	4313      	orrs	r3, r2
 8003018:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800301a:	7b3b      	ldrb	r3, [r7, #12]
 800301c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003020:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003022:	4313      	orrs	r3, r2
 8003024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003026:	7b3b      	ldrb	r3, [r7, #12]
 8003028:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800302c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800302e:	4313      	orrs	r3, r2
 8003030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003032:	7b3b      	ldrb	r3, [r7, #12]
 8003034:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003038:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800303a:	4313      	orrs	r3, r2
 800303c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800303e:	7b3b      	ldrb	r3, [r7, #12]
 8003040:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003044:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003046:	4313      	orrs	r3, r2
 8003048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800304a:	7b7b      	ldrb	r3, [r7, #13]
 800304c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003052:	4313      	orrs	r3, r2
 8003054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003056:	7b7b      	ldrb	r3, [r7, #13]
 8003058:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800305c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800305e:	4313      	orrs	r3, r2
 8003060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003062:	7b7b      	ldrb	r3, [r7, #13]
 8003064:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800306a:	4313      	orrs	r3, r2
 800306c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800306e:	7b7b      	ldrb	r3, [r7, #13]
 8003070:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003076:	4313      	orrs	r3, r2
 8003078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800307a:	7b7b      	ldrb	r3, [r7, #13]
 800307c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003082:	4313      	orrs	r3, r2
 8003084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003086:	7b7b      	ldrb	r3, [r7, #13]
 8003088:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800308c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800308e:	4313      	orrs	r3, r2
 8003090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003092:	7b7b      	ldrb	r3, [r7, #13]
 8003094:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800309a:	4313      	orrs	r3, r2
 800309c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800309e:	7b7b      	ldrb	r3, [r7, #13]
 80030a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80030a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d163      	bne.n	8003176 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80030ae:	f107 030b 	add.w	r3, r7, #11
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fa13 	bl	80034e0 <lsm6dsr_fsm_data_rate_get>
 80030ba:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d159      	bne.n	8003176 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d853      	bhi.n	8003170 <lsm6dsr_gy_data_rate_set+0x1a8>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <lsm6dsr_gy_data_rate_set+0x108>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030f3 	.word	0x080030f3
 80030d8:	08003111 	.word	0x08003111
 80030dc:	0800313b 	.word	0x0800313b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80030ea:	e045      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	75fb      	strb	r3, [r7, #23]
            break;
 80030f0:	e042      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80030f8:	2302      	movs	r3, #2
 80030fa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80030fc:	e03c      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d102      	bne.n	800310a <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8003104:	2302      	movs	r3, #2
 8003106:	75fb      	strb	r3, [r7, #23]
            break;
 8003108:	e036      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	75fb      	strb	r3, [r7, #23]
            break;
 800310e:	e033      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8003116:	2303      	movs	r3, #3
 8003118:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800311a:	e02d      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d102      	bne.n	8003128 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8003122:	2303      	movs	r3, #3
 8003124:	75fb      	strb	r3, [r7, #23]
            break;
 8003126:	e027      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d102      	bne.n	8003134 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800312e:	2303      	movs	r3, #3
 8003130:	75fb      	strb	r3, [r7, #23]
            break;
 8003132:	e021      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	75fb      	strb	r3, [r7, #23]
            break;
 8003138:	e01e      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8003140:	2304      	movs	r3, #4
 8003142:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8003144:	e018      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d102      	bne.n	8003152 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800314c:	2304      	movs	r3, #4
 800314e:	75fb      	strb	r3, [r7, #23]
            break;
 8003150:	e012      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d102      	bne.n	800315e <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8003158:	2304      	movs	r3, #4
 800315a:	75fb      	strb	r3, [r7, #23]
            break;
 800315c:	e00c      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d102      	bne.n	800316a <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8003164:	2304      	movs	r3, #4
 8003166:	75fb      	strb	r3, [r7, #23]
            break;
 8003168:	e006      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	75fb      	strb	r3, [r7, #23]
            break;
 800316e:	e003      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	75fb      	strb	r3, [r7, #23]
            break;
 8003174:	e000      	b.n	8003178 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8003176:	bf00      	nop
    }
  }

  if (ret == 0)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800317e:	f107 0208 	add.w	r2, r7, #8
 8003182:	2301      	movs	r3, #1
 8003184:	2111      	movs	r1, #17
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fd75 	bl	8002c76 <lsm6dsr_read_reg>
 800318c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10f      	bne.n	80031b4 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	7a3b      	ldrb	r3, [r7, #8]
 800319e:	f362 1307 	bfi	r3, r2, #4, #4
 80031a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	2301      	movs	r3, #1
 80031aa:	2111      	movs	r1, #17
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fd7a 	bl	8002ca6 <lsm6dsr_write_reg>
 80031b2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80031b4:	693b      	ldr	r3, [r7, #16]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop

080031c0 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80031cc:	f107 0208 	add.w	r2, r7, #8
 80031d0:	2301      	movs	r3, #1
 80031d2:	2112      	movs	r1, #18
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fd4e 	bl	8002c76 <lsm6dsr_read_reg>
 80031da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	7a3b      	ldrb	r3, [r7, #8]
 80031ec:	f362 1386 	bfi	r3, r2, #6, #1
 80031f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80031f2:	f107 0208 	add.w	r2, r7, #8
 80031f6:	2301      	movs	r3, #1
 80031f8:	2112      	movs	r1, #18
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fd53 	bl	8002ca6 <lsm6dsr_write_reg>
 8003200:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8003216:	f107 0208 	add.w	r2, r7, #8
 800321a:	2301      	movs	r3, #1
 800321c:	211e      	movs	r1, #30
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fd29 	bl	8002c76 <lsm6dsr_read_reg>
 8003224:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8003226:	7a3b      	ldrb	r3, [r7, #8]
 8003228:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	701a      	strb	r2, [r3, #0]

  return ret;
 8003234:	68fb      	ldr	r3, [r7, #12]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8003248:	f107 0208 	add.w	r2, r7, #8
 800324c:	2301      	movs	r3, #1
 800324e:	211e      	movs	r1, #30
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff fd10 	bl	8002c76 <lsm6dsr_read_reg>
 8003256:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8003258:	7a3b      	ldrb	r3, [r7, #8]
 800325a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	701a      	strb	r2, [r3, #0]

  return ret;
 8003266:	68fb      	ldr	r3, [r7, #12]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800327a:	f107 020c 	add.w	r2, r7, #12
 800327e:	2306      	movs	r3, #6
 8003280:	2122      	movs	r1, #34	; 0x22
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fcf7 	bl	8002c76 <lsm6dsr_read_reg>
 8003288:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800328a:	7b7b      	ldrb	r3, [r7, #13]
 800328c:	b21a      	sxth	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003298:	b29b      	uxth	r3, r3
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	b29a      	uxth	r2, r3
 800329e:	7b3b      	ldrb	r3, [r7, #12]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	3302      	adds	r3, #2
 80032b2:	b212      	sxth	r2, r2
 80032b4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	3302      	adds	r3, #2
 80032ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3302      	adds	r3, #2
 80032d0:	b212      	sxth	r2, r2
 80032d2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80032d4:	7c7a      	ldrb	r2, [r7, #17]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	3304      	adds	r3, #4
 80032da:	b212      	sxth	r2, r2
 80032dc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	3304      	adds	r3, #4
 80032e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	7c3b      	ldrb	r3, [r7, #16]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	3304      	adds	r3, #4
 80032f8:	b212      	sxth	r2, r2
 80032fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80032fc:	697b      	ldr	r3, [r7, #20]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8003310:	f107 020c 	add.w	r2, r7, #12
 8003314:	2306      	movs	r3, #6
 8003316:	2128      	movs	r1, #40	; 0x28
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fcac 	bl	8002c76 <lsm6dsr_read_reg>
 800331e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003320:	7b7b      	ldrb	r3, [r7, #13]
 8003322:	b21a      	sxth	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800332e:	b29b      	uxth	r3, r3
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	b29a      	uxth	r2, r3
 8003334:	7b3b      	ldrb	r3, [r7, #12]
 8003336:	b29b      	uxth	r3, r3
 8003338:	4413      	add	r3, r2
 800333a:	b29b      	uxth	r3, r3
 800333c:	b21a      	sxth	r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3302      	adds	r3, #2
 8003348:	b212      	sxth	r2, r2
 800334a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	3302      	adds	r3, #2
 8003350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003354:	b29b      	uxth	r3, r3
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	b29a      	uxth	r2, r3
 800335a:	7bbb      	ldrb	r3, [r7, #14]
 800335c:	b29b      	uxth	r3, r3
 800335e:	4413      	add	r3, r2
 8003360:	b29a      	uxth	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	3302      	adds	r3, #2
 8003366:	b212      	sxth	r2, r2
 8003368:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800336a:	7c7a      	ldrb	r2, [r7, #17]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	3304      	adds	r3, #4
 8003370:	b212      	sxth	r2, r2
 8003372:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	3304      	adds	r3, #4
 8003378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337c:	b29b      	uxth	r3, r3
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	b29a      	uxth	r2, r3
 8003382:	7c3b      	ldrb	r3, [r7, #16]
 8003384:	b29b      	uxth	r3, r3
 8003386:	4413      	add	r3, r2
 8003388:	b29a      	uxth	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	b212      	sxth	r2, r2
 8003390:	801a      	strh	r2, [r3, #0]

  return ret;
 8003392:	697b      	ldr	r3, [r7, #20]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80033a8:	f107 0208 	add.w	r2, r7, #8
 80033ac:	2301      	movs	r3, #1
 80033ae:	2101      	movs	r1, #1
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fc60 	bl	8002c76 <lsm6dsr_read_reg>
 80033b6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	7a3b      	ldrb	r3, [r7, #8]
 80033c8:	f362 1387 	bfi	r3, r2, #6, #2
 80033cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80033ce:	f107 0208 	add.w	r2, r7, #8
 80033d2:	2301      	movs	r3, #1
 80033d4:	2101      	movs	r1, #1
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fc65 	bl	8002ca6 <lsm6dsr_write_reg>
 80033dc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80033f2:	2301      	movs	r3, #1
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	210f      	movs	r1, #15
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fc3c 	bl	8002c76 <lsm6dsr_read_reg>
 80033fe:	60f8      	str	r0, [r7, #12]

  return ret;
 8003400:	68fb      	ldr	r3, [r7, #12]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003416:	f107 0208 	add.w	r2, r7, #8
 800341a:	2301      	movs	r3, #1
 800341c:	2112      	movs	r1, #18
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fc29 	bl	8002c76 <lsm6dsr_read_reg>
 8003424:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	b2da      	uxtb	r2, r3
 8003434:	7a3b      	ldrb	r3, [r7, #8]
 8003436:	f362 0300 	bfi	r3, r2, #0, #1
 800343a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800343c:	f107 0208 	add.w	r2, r7, #8
 8003440:	2301      	movs	r3, #1
 8003442:	2112      	movs	r1, #18
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fc2e 	bl	8002ca6 <lsm6dsr_write_reg>
 800344a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003460:	f107 0208 	add.w	r2, r7, #8
 8003464:	2301      	movs	r3, #1
 8003466:	2112      	movs	r1, #18
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fc04 	bl	8002c76 <lsm6dsr_read_reg>
 800346e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8003470:	7a3b      	ldrb	r3, [r7, #8]
 8003472:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	701a      	strb	r2, [r3, #0]

  return ret;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8003492:	2102      	movs	r1, #2
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff81 	bl	800339c <lsm6dsr_mem_bank_set>
 800349a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80034a2:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80034a4:	2301      	movs	r3, #1
 80034a6:	2146      	movs	r1, #70	; 0x46
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fbe4 	bl	8002c76 <lsm6dsr_read_reg>
 80034ae:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80034ba:	2301      	movs	r3, #1
 80034bc:	2147      	movs	r1, #71	; 0x47
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fbd9 	bl	8002c76 <lsm6dsr_read_reg>
 80034c4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80034cc:	2100      	movs	r1, #0
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff64 	bl	800339c <lsm6dsr_mem_bank_set>
 80034d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80034ea:	2102      	movs	r1, #2
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff55 	bl	800339c <lsm6dsr_mem_bank_set>
 80034f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d107      	bne.n	800350a <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80034fa:	f107 0208 	add.w	r2, r7, #8
 80034fe:	2301      	movs	r3, #1
 8003500:	215f      	movs	r1, #95	; 0x5f
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fbb7 	bl	8002c76 <lsm6dsr_read_reg>
 8003508:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8003510:	2100      	movs	r1, #0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff42 	bl	800339c <lsm6dsr_mem_bank_set>
 8003518:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800351a:	7a3b      	ldrb	r3, [r7, #8]
 800351c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d81a      	bhi.n	800355c <lsm6dsr_fsm_data_rate_get+0x7c>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <lsm6dsr_fsm_data_rate_get+0x4c>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003545 	.word	0x08003545
 8003534:	0800354d 	.word	0x0800354d
 8003538:	08003555 	.word	0x08003555
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
      break;
 8003542:	e00f      	b.n	8003564 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
      break;
 800354a:	e00b      	b.n	8003564 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
      break;
 8003552:	e007      	b.n	8003564 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2203      	movs	r2, #3
 8003558:	701a      	strb	r2, [r3, #0]
      break;
 800355a:	e003      	b.n	8003564 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
      break;
 8003562:	bf00      	nop
  }

  return ret;
 8003564:	68fb      	ldr	r3, [r7, #12]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop

08003570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003574:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_Init+0x40>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <HAL_Init+0x40>)
 800357a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800357e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_Init+0x40>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_Init+0x40>)
 8003586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_Init+0x40>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <HAL_Init+0x40>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003598:	2003      	movs	r0, #3
 800359a:	f000 fb6e 	bl	8003c7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800359e:	200f      	movs	r0, #15
 80035a0:	f7ff f8a4 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035a4:	f7fe fd44 	bl	8002030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023c00 	.word	0x40023c00

080035b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_IncTick+0x20>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_IncTick+0x24>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_IncTick+0x24>)
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000008 	.word	0x20000008
 80035d8:	200009f8 	.word	0x200009f8

080035dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return uwTick;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_GetTick+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	200009f8 	.word	0x200009f8

080035f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff ffee 	bl	80035dc <HAL_GetTick>
 8003600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d005      	beq.n	800361a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_Delay+0x44>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800361a:	bf00      	nop
 800361c:	f7ff ffde 	bl	80035dc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	429a      	cmp	r2, r3
 800362a:	d8f7      	bhi.n	800361c <HAL_Delay+0x28>
  {
  }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000008 	.word	0x20000008

0800363c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e033      	b.n	80036ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe fd10 	bl	8002080 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003682:	f023 0302 	bic.w	r3, r3, #2
 8003686:	f043 0202 	orr.w	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f94a 	bl	8003928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
 80036aa:	e001      	b.n	80036b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x1c>
 80036dc:	2302      	movs	r3, #2
 80036de:	e113      	b.n	8003908 <HAL_ADC_ConfigChannel+0x244>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	d925      	bls.n	800373c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68d9      	ldr	r1, [r3, #12]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	3b1e      	subs	r3, #30
 8003706:	2207      	movs	r2, #7
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43da      	mvns	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	400a      	ands	r2, r1
 8003714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68d9      	ldr	r1, [r3, #12]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	4618      	mov	r0, r3
 8003728:	4603      	mov	r3, r0
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4403      	add	r3, r0
 800372e:	3b1e      	subs	r3, #30
 8003730:	409a      	lsls	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	e022      	b.n	8003782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6919      	ldr	r1, [r3, #16]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	2207      	movs	r2, #7
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43da      	mvns	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	400a      	ands	r2, r1
 800375e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6919      	ldr	r1, [r3, #16]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	4603      	mov	r3, r0
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4403      	add	r3, r0
 8003778:	409a      	lsls	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b06      	cmp	r3, #6
 8003788:	d824      	bhi.n	80037d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	3b05      	subs	r3, #5
 800379c:	221f      	movs	r2, #31
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	400a      	ands	r2, r1
 80037aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	4618      	mov	r0, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	3b05      	subs	r3, #5
 80037c6:	fa00 f203 	lsl.w	r2, r0, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
 80037d2:	e04c      	b.n	800386e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d824      	bhi.n	8003826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	3b23      	subs	r3, #35	; 0x23
 80037ee:	221f      	movs	r2, #31
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43da      	mvns	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	400a      	ands	r2, r1
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	4618      	mov	r0, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	3b23      	subs	r3, #35	; 0x23
 8003818:	fa00 f203 	lsl.w	r2, r0, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
 8003824:	e023      	b.n	800386e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	3b41      	subs	r3, #65	; 0x41
 8003838:	221f      	movs	r2, #31
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	400a      	ands	r2, r1
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	3b41      	subs	r3, #65	; 0x41
 8003862:	fa00 f203 	lsl.w	r2, r0, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800386e:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_ADC_ConfigChannel+0x250>)
 8003870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <HAL_ADC_ConfigChannel+0x254>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d10f      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1d8>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b12      	cmp	r3, #18
 8003882:	d10b      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <HAL_ADC_ConfigChannel+0x254>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d12b      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x23a>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1c      	ldr	r2, [pc, #112]	; (800391c <HAL_ADC_ConfigChannel+0x258>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <HAL_ADC_ConfigChannel+0x1f4>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b11      	cmp	r3, #17
 80038b6:	d122      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_ADC_ConfigChannel+0x258>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d111      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_ADC_ConfigChannel+0x25c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a11      	ldr	r2, [pc, #68]	; (8003924 <HAL_ADC_ConfigChannel+0x260>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	0c9a      	lsrs	r2, r3, #18
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f0:	e002      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f9      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40012300 	.word	0x40012300
 8003918:	40012000 	.word	0x40012000
 800391c:	10000012 	.word	0x10000012
 8003920:	20000000 	.word	0x20000000
 8003924:	431bde83 	.word	0x431bde83

08003928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003930:	4b79      	ldr	r3, [pc, #484]	; (8003b18 <ADC_Init+0x1f0>)
 8003932:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	431a      	orrs	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	021a      	lsls	r2, r3, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <ADC_Init+0x1f4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d022      	beq.n	8003a06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6899      	ldr	r1, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6899      	ldr	r1, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	e00f      	b.n	8003a26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0202 	bic.w	r2, r2, #2
 8003a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6899      	ldr	r1, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7e1b      	ldrb	r3, [r3, #24]
 8003a40:	005a      	lsls	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01b      	beq.n	8003a8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	035a      	lsls	r2, r3, #13
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	e007      	b.n	8003a9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	051a      	lsls	r2, r3, #20
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ade:	025a      	lsls	r2, r3, #9
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6899      	ldr	r1, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	029a      	lsls	r2, r3, #10
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40012300 	.word	0x40012300
 8003b1c:	0f000001 	.word	0x0f000001

08003b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b52:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	60d3      	str	r3, [r2, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4907      	ldr	r1, [pc, #28]	; (8003bbc <__NVIC_EnableIRQ+0x38>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	; (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	; (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	; 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
         );
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff4c 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca2:	f7ff ff61 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003ca6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	6978      	ldr	r0, [r7, #20]
 8003cae:	f7ff ffb1 	bl	8003c14 <NVIC_EncodePriority>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff ff80 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff ff54 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e177      	b.n	8003ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f040 8166 	bne.w	8003fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d005      	beq.n	8003d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d130      	bne.n	8003d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	2203      	movs	r2, #3
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 0201 	and.w	r2, r3, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d017      	beq.n	8003dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d123      	bne.n	8003e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	220f      	movs	r2, #15
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	08da      	lsrs	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3208      	adds	r2, #8
 8003e22:	69b9      	ldr	r1, [r7, #24]
 8003e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0203 	and.w	r2, r3, #3
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80c0 	beq.w	8003fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b66      	ldr	r3, [pc, #408]	; (8004008 <HAL_GPIO_Init+0x324>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4a65      	ldr	r2, [pc, #404]	; (8004008 <HAL_GPIO_Init+0x324>)
 8003e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e78:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_GPIO_Init+0x324>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e86:	4a61      	ldr	r2, [pc, #388]	; (800400c <HAL_GPIO_Init+0x328>)
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a58      	ldr	r2, [pc, #352]	; (8004010 <HAL_GPIO_Init+0x32c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d037      	beq.n	8003f22 <HAL_GPIO_Init+0x23e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a57      	ldr	r2, [pc, #348]	; (8004014 <HAL_GPIO_Init+0x330>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_GPIO_Init+0x23a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02b      	beq.n	8003f1a <HAL_GPIO_Init+0x236>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a55      	ldr	r2, [pc, #340]	; (800401c <HAL_GPIO_Init+0x338>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d025      	beq.n	8003f16 <HAL_GPIO_Init+0x232>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a54      	ldr	r2, [pc, #336]	; (8004020 <HAL_GPIO_Init+0x33c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01f      	beq.n	8003f12 <HAL_GPIO_Init+0x22e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a53      	ldr	r2, [pc, #332]	; (8004024 <HAL_GPIO_Init+0x340>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d019      	beq.n	8003f0e <HAL_GPIO_Init+0x22a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_GPIO_Init+0x344>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_GPIO_Init+0x226>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a51      	ldr	r2, [pc, #324]	; (800402c <HAL_GPIO_Init+0x348>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00d      	beq.n	8003f06 <HAL_GPIO_Init+0x222>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a50      	ldr	r2, [pc, #320]	; (8004030 <HAL_GPIO_Init+0x34c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <HAL_GPIO_Init+0x21e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a4f      	ldr	r2, [pc, #316]	; (8004034 <HAL_GPIO_Init+0x350>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <HAL_GPIO_Init+0x21a>
 8003efa:	2309      	movs	r3, #9
 8003efc:	e012      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003efe:	230a      	movs	r3, #10
 8003f00:	e010      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f02:	2308      	movs	r3, #8
 8003f04:	e00e      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f06:	2307      	movs	r3, #7
 8003f08:	e00c      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f0a:	2306      	movs	r3, #6
 8003f0c:	e00a      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e008      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e004      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f22:	2300      	movs	r3, #0
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	f002 0203 	and.w	r2, r2, #3
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4093      	lsls	r3, r2
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f34:	4935      	ldr	r1, [pc, #212]	; (800400c <HAL_GPIO_Init+0x328>)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f42:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f66:	4a34      	ldr	r2, [pc, #208]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f6c:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f90:	4a29      	ldr	r2, [pc, #164]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f96:	4b28      	ldr	r3, [pc, #160]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fba:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3301      	adds	r3, #1
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	f67f ae84 	bls.w	8003d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3724      	adds	r7, #36	; 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	40013800 	.word	0x40013800
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400
 8004018:	40020800 	.word	0x40020800
 800401c:	40020c00 	.word	0x40020c00
 8004020:	40021000 	.word	0x40021000
 8004024:	40021400 	.word	0x40021400
 8004028:	40021800 	.word	0x40021800
 800402c:	40021c00 	.word	0x40021c00
 8004030:	40022000 	.word	0x40022000
 8004034:	40022400 	.word	0x40022400
 8004038:	40013c00 	.word	0x40013c00

0800403c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
 8004048:	4613      	mov	r3, r2
 800404a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800404c:	787b      	ldrb	r3, [r7, #1]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004052:	887a      	ldrh	r2, [r7, #2]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004058:	e003      	b.n	8004062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	041a      	lsls	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	619a      	str	r2, [r3, #24]
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e12b      	b.n	80042da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe f836 	bl	8002108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040d4:	f001 fd6e 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 80040d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a81      	ldr	r2, [pc, #516]	; (80042e4 <HAL_I2C_Init+0x274>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d807      	bhi.n	80040f4 <HAL_I2C_Init+0x84>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a80      	ldr	r2, [pc, #512]	; (80042e8 <HAL_I2C_Init+0x278>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	bf94      	ite	ls
 80040ec:	2301      	movls	r3, #1
 80040ee:	2300      	movhi	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e006      	b.n	8004102 <HAL_I2C_Init+0x92>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4a7d      	ldr	r2, [pc, #500]	; (80042ec <HAL_I2C_Init+0x27c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bf94      	ite	ls
 80040fc:	2301      	movls	r3, #1
 80040fe:	2300      	movhi	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0e7      	b.n	80042da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a78      	ldr	r2, [pc, #480]	; (80042f0 <HAL_I2C_Init+0x280>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0c9b      	lsrs	r3, r3, #18
 8004114:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4a6a      	ldr	r2, [pc, #424]	; (80042e4 <HAL_I2C_Init+0x274>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d802      	bhi.n	8004144 <HAL_I2C_Init+0xd4>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3301      	adds	r3, #1
 8004142:	e009      	b.n	8004158 <HAL_I2C_Init+0xe8>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	4a69      	ldr	r2, [pc, #420]	; (80042f4 <HAL_I2C_Init+0x284>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	099b      	lsrs	r3, r3, #6
 8004156:	3301      	adds	r3, #1
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	430b      	orrs	r3, r1
 800415e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800416a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	495c      	ldr	r1, [pc, #368]	; (80042e4 <HAL_I2C_Init+0x274>)
 8004174:	428b      	cmp	r3, r1
 8004176:	d819      	bhi.n	80041ac <HAL_I2C_Init+0x13c>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e59      	subs	r1, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fbb1 f3f3 	udiv	r3, r1, r3
 8004186:	1c59      	adds	r1, r3, #1
 8004188:	f640 73fc 	movw	r3, #4092	; 0xffc
 800418c:	400b      	ands	r3, r1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_I2C_Init+0x138>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1e59      	subs	r1, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	fbb1 f3f3 	udiv	r3, r1, r3
 80041a0:	3301      	adds	r3, #1
 80041a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a6:	e051      	b.n	800424c <HAL_I2C_Init+0x1dc>
 80041a8:	2304      	movs	r3, #4
 80041aa:	e04f      	b.n	800424c <HAL_I2C_Init+0x1dc>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d111      	bne.n	80041d8 <HAL_I2C_Init+0x168>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1e58      	subs	r0, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	440b      	add	r3, r1
 80041c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c6:	3301      	adds	r3, #1
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e012      	b.n	80041fe <HAL_I2C_Init+0x18e>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1e58      	subs	r0, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	0099      	lsls	r1, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Init+0x196>
 8004202:	2301      	movs	r3, #1
 8004204:	e022      	b.n	800424c <HAL_I2C_Init+0x1dc>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10e      	bne.n	800422c <HAL_I2C_Init+0x1bc>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1e58      	subs	r0, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6859      	ldr	r1, [r3, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	440b      	add	r3, r1
 800421c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004220:	3301      	adds	r3, #1
 8004222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	e00f      	b.n	800424c <HAL_I2C_Init+0x1dc>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	0099      	lsls	r1, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004242:	3301      	adds	r3, #1
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	6809      	ldr	r1, [r1, #0]
 8004250:	4313      	orrs	r3, r2
 8004252:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800427a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6911      	ldr	r1, [r2, #16]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	4311      	orrs	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	430b      	orrs	r3, r1
 800428e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	000186a0 	.word	0x000186a0
 80042e8:	001e847f 	.word	0x001e847f
 80042ec:	003d08ff 	.word	0x003d08ff
 80042f0:	431bde83 	.word	0x431bde83
 80042f4:	10624dd3 	.word	0x10624dd3

080042f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4603      	mov	r3, r0
 8004308:	817b      	strh	r3, [r7, #10]
 800430a:	460b      	mov	r3, r1
 800430c:	813b      	strh	r3, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004312:	f7ff f963 	bl	80035dc <HAL_GetTick>
 8004316:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b20      	cmp	r3, #32
 8004322:	f040 80d9 	bne.w	80044d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	2319      	movs	r3, #25
 800432c:	2201      	movs	r2, #1
 800432e:	496d      	ldr	r1, [pc, #436]	; (80044e4 <HAL_I2C_Mem_Write+0x1ec>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fc7f 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
 800433e:	e0cc      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_I2C_Mem_Write+0x56>
 800434a:	2302      	movs	r3, #2
 800434c:	e0c5      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d007      	beq.n	8004374 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2221      	movs	r2, #33	; 0x21
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2240      	movs	r2, #64	; 0x40
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a4d      	ldr	r2, [pc, #308]	; (80044e8 <HAL_I2C_Mem_Write+0x1f0>)
 80043b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b6:	88f8      	ldrh	r0, [r7, #6]
 80043b8:	893a      	ldrh	r2, [r7, #8]
 80043ba:	8979      	ldrh	r1, [r7, #10]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	4603      	mov	r3, r0
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fab6 	bl	8004938 <I2C_RequestMemoryWrite>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d052      	beq.n	8004478 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e081      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fd00 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d107      	bne.n	80043fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e06b      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d11b      	bne.n	8004478 <HAL_I2C_Mem_Write+0x180>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1aa      	bne.n	80043d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fcec 	bl	8004e62 <I2C_WaitOnBTFFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b04      	cmp	r3, #4
 8004496:	d107      	bne.n	80044a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e016      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	00100002 	.word	0x00100002
 80044e8:	ffff0000 	.word	0xffff0000

080044ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08c      	sub	sp, #48	; 0x30
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	817b      	strh	r3, [r7, #10]
 80044fe:	460b      	mov	r3, r1
 8004500:	813b      	strh	r3, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004506:	f7ff f869 	bl	80035dc <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b20      	cmp	r3, #32
 8004516:	f040 8208 	bne.w	800492a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2319      	movs	r3, #25
 8004520:	2201      	movs	r2, #1
 8004522:	497b      	ldr	r1, [pc, #492]	; (8004710 <HAL_I2C_Mem_Read+0x224>)
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fb85 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
 8004532:	e1fb      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_I2C_Mem_Read+0x56>
 800453e:	2302      	movs	r3, #2
 8004540:	e1f4      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d007      	beq.n	8004568 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004576:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2222      	movs	r2, #34	; 0x22
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2240      	movs	r2, #64	; 0x40
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a5b      	ldr	r2, [pc, #364]	; (8004714 <HAL_I2C_Mem_Read+0x228>)
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045aa:	88f8      	ldrh	r0, [r7, #6]
 80045ac:	893a      	ldrh	r2, [r7, #8]
 80045ae:	8979      	ldrh	r1, [r7, #10]
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4603      	mov	r3, r0
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fa52 	bl	8004a64 <I2C_RequestMemoryRead>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e1b0      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d113      	bne.n	80045fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	623b      	str	r3, [r7, #32]
 80045e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e184      	b.n	8004904 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d11b      	bne.n	800463a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e164      	b.n	8004904 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b02      	cmp	r3, #2
 8004640:	d11b      	bne.n	800467a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004650:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	e144      	b.n	8004904 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004690:	e138      	b.n	8004904 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	2b03      	cmp	r3, #3
 8004698:	f200 80f1 	bhi.w	800487e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d123      	bne.n	80046ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fc1b 	bl	8004ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e139      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ea:	e10b      	b.n	8004904 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d14e      	bne.n	8004792 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	2200      	movs	r2, #0
 80046fc:	4906      	ldr	r1, [pc, #24]	; (8004718 <HAL_I2C_Mem_Read+0x22c>)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fa98 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e10e      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
 800470e:	bf00      	nop
 8004710:	00100002 	.word	0x00100002
 8004714:	ffff0000 	.word	0xffff0000
 8004718:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004790:	e0b8      	b.n	8004904 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	2200      	movs	r2, #0
 800479a:	4966      	ldr	r1, [pc, #408]	; (8004934 <HAL_I2C_Mem_Read+0x448>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fa49 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0bf      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	494f      	ldr	r1, [pc, #316]	; (8004934 <HAL_I2C_Mem_Read+0x448>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fa1b 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e091      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800487c:	e042      	b.n	8004904 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fb2e 	bl	8004ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e04c      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d118      	bne.n	8004904 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	2b00      	cmp	r3, #0
 800490a:	f47f aec2 	bne.w	8004692 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e000      	b.n	800492c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800492a:	2302      	movs	r3, #2
  }
}
 800492c:	4618      	mov	r0, r3
 800492e:	3728      	adds	r7, #40	; 0x28
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	00010004 	.word	0x00010004

08004938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	2200      	movs	r2, #0
 800496a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f960 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004988:	d103      	bne.n	8004992 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e05f      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	492d      	ldr	r1, [pc, #180]	; (8004a60 <I2C_RequestMemoryWrite+0x128>)
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f998 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e04c      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	6a39      	ldr	r1, [r7, #32]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fa02 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d107      	bne.n	80049fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e02b      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a04:	893b      	ldrh	r3, [r7, #8]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	e021      	b.n	8004a54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	6a39      	ldr	r1, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f9dc 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d107      	bne.n	8004a46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e005      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4a:	893b      	ldrh	r3, [r7, #8]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	00010002 	.word	0x00010002

08004a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	817b      	strh	r3, [r7, #10]
 8004a76:	460b      	mov	r3, r1
 8004a78:	813b      	strh	r3, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8c2 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac4:	d103      	bne.n	8004ace <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0aa      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	4952      	ldr	r1, [pc, #328]	; (8004c30 <I2C_RequestMemoryRead+0x1cc>)
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f8fa 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e097      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	6a39      	ldr	r1, [r7, #32]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f964 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d107      	bne.n	8004b36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e076      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	611a      	str	r2, [r3, #16]
 8004b4a:	e021      	b.n	8004b90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b4c:	893b      	ldrh	r3, [r7, #8]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	6a39      	ldr	r1, [r7, #32]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f93e 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d107      	bne.n	8004b82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e050      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b86:	893b      	ldrh	r3, [r7, #8]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	6a39      	ldr	r1, [r7, #32]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f923 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d107      	bne.n	8004bb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e035      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f82b 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf2:	d103      	bne.n	8004bfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e013      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c00:	897b      	ldrh	r3, [r7, #10]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	4906      	ldr	r1, [pc, #24]	; (8004c30 <I2C_RequestMemoryRead+0x1cc>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f863 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	00010002 	.word	0x00010002

08004c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	4613      	mov	r3, r2
 8004c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c44:	e025      	b.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d021      	beq.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4e:	f7fe fcc5 	bl	80035dc <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d116      	bne.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e023      	b.n	8004cda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10d      	bne.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	e00c      	b.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d0b6      	beq.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf0:	e051      	b.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d00:	d123      	bne.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e046      	b.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d021      	beq.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fe fc43 	bl	80035dc <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d116      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f043 0220 	orr.w	r2, r3, #32
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e020      	b.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10c      	bne.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	43da      	mvns	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf14      	ite	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	2300      	moveq	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e00b      	b.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	43da      	mvns	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d18d      	bne.n	8004cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dec:	e02d      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f8ce 	bl	8004f90 <I2C_IsAcknowledgeFailed>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e02d      	b.n	8004e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d021      	beq.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fe fbe9 	bl	80035dc <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d116      	bne.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e007      	b.n	8004e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e54:	2b80      	cmp	r3, #128	; 0x80
 8004e56:	d1ca      	bne.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e6e:	e02d      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f88d 	bl	8004f90 <I2C_IsAcknowledgeFailed>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e02d      	b.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d021      	beq.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e88:	f7fe fba8 	bl	80035dc <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d302      	bcc.n	8004e9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d116      	bne.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e007      	b.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d1ca      	bne.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef0:	e042      	b.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d119      	bne.n	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0210 	mvn.w	r2, #16
 8004f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e029      	b.n	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f34:	f7fe fb52 	bl	80035dc <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e007      	b.n	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d1b5      	bne.n	8004ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa6:	d11b      	bne.n	8004fe0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	f043 0204 	orr.w	r2, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b20      	cmp	r3, #32
 8005002:	d129      	bne.n	8005058 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	; 0x24
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0210 	bic.w	r2, r2, #16
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b20      	cmp	r3, #32
 800507e:	d12a      	bne.n	80050d6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	; 0x24
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80050a0:	89fb      	ldrh	r3, [r7, #14]
 80050a2:	f023 030f 	bic.w	r3, r3, #15
 80050a6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	89fa      	ldrh	r2, [r7, #14]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e000      	b.n	80050d8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80050d6:	2302      	movs	r3, #2
  }
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	b08f      	sub	sp, #60	; 0x3c
 80050e8:	af0a      	add	r7, sp, #40	; 0x28
 80050ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e10f      	b.n	8005316 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fd fa91 	bl	8002638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f001 ff82 	bl	800703e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	687e      	ldr	r6, [r7, #4]
 8005142:	466d      	mov	r5, sp
 8005144:	f106 0410 	add.w	r4, r6, #16
 8005148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800514a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800514c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800514e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005150:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005154:	e885 0003 	stmia.w	r5, {r0, r1}
 8005158:	1d33      	adds	r3, r6, #4
 800515a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800515c:	6838      	ldr	r0, [r7, #0]
 800515e:	f001 ff0d 	bl	8006f7c <USB_CoreInit>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0d0      	b.n	8005316 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f001 ff70 	bl	8007060 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	e04a      	b.n	800521c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005186:	7bfa      	ldrb	r2, [r7, #15]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	333d      	adds	r3, #61	; 0x3d
 8005196:	2201      	movs	r2, #1
 8005198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	333c      	adds	r3, #60	; 0x3c
 80051aa:	7bfa      	ldrb	r2, [r7, #15]
 80051ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	b298      	uxth	r0, r3
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	3342      	adds	r3, #66	; 0x42
 80051c2:	4602      	mov	r2, r0
 80051c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	333f      	adds	r3, #63	; 0x3f
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051da:	7bfa      	ldrb	r2, [r7, #15]
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	3344      	adds	r3, #68	; 0x44
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051ee:	7bfa      	ldrb	r2, [r7, #15]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3348      	adds	r3, #72	; 0x48
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005202:	7bfa      	ldrb	r2, [r7, #15]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	3350      	adds	r3, #80	; 0x50
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	3301      	adds	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d3af      	bcc.n	8005186 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e044      	b.n	80052b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800522c:	7bfa      	ldrb	r2, [r7, #15]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005242:	7bfa      	ldrb	r2, [r7, #15]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005254:	7bfa      	ldrb	r2, [r7, #15]
 8005256:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	3301      	adds	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d3b5      	bcc.n	800522c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	687e      	ldr	r6, [r7, #4]
 80052c8:	466d      	mov	r5, sp
 80052ca:	f106 0410 	add.w	r4, r6, #16
 80052ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052da:	e885 0003 	stmia.w	r5, {r0, r1}
 80052de:	1d33      	adds	r3, r6, #4
 80052e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052e2:	6838      	ldr	r0, [r7, #0]
 80052e4:	f001 ff08 	bl	80070f8 <USB_DevInit>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e00d      	b.n	8005316 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f002 f8b3 	bl	800747a <USB_DevDisconnect>

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e264      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d075      	beq.n	800542a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533e:	4ba3      	ldr	r3, [pc, #652]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b04      	cmp	r3, #4
 8005348:	d00c      	beq.n	8005364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534a:	4ba0      	ldr	r3, [pc, #640]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005352:	2b08      	cmp	r3, #8
 8005354:	d112      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005356:	4b9d      	ldr	r3, [pc, #628]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d10b      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	4b99      	ldr	r3, [pc, #612]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05b      	beq.n	8005428 <HAL_RCC_OscConfig+0x108>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d157      	bne.n	8005428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e23f      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d106      	bne.n	8005394 <HAL_RCC_OscConfig+0x74>
 8005386:	4b91      	ldr	r3, [pc, #580]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a90      	ldr	r2, [pc, #576]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e01d      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x98>
 800539e:	4b8b      	ldr	r3, [pc, #556]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a8a      	ldr	r2, [pc, #552]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b88      	ldr	r3, [pc, #544]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a87      	ldr	r2, [pc, #540]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 80053b8:	4b84      	ldr	r3, [pc, #528]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a83      	ldr	r2, [pc, #524]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b81      	ldr	r3, [pc, #516]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a80      	ldr	r2, [pc, #512]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d013      	beq.n	8005400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fe f900 	bl	80035dc <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fe f8fc 	bl	80035dc <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e204      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b76      	ldr	r3, [pc, #472]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0xc0>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005400:	f7fe f8ec 	bl	80035dc <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005408:	f7fe f8e8 	bl	80035dc <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e1f0      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541a:	4b6c      	ldr	r3, [pc, #432]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0xe8>
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d063      	beq.n	80054fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005436:	4b65      	ldr	r3, [pc, #404]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005442:	4b62      	ldr	r3, [pc, #392]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d11c      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b5f      	ldr	r3, [pc, #380]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d116      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545a:	4b5c      	ldr	r3, [pc, #368]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1c4      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b56      	ldr	r3, [pc, #344]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4952      	ldr	r1, [pc, #328]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	e03a      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005490:	4b4f      	ldr	r3, [pc, #316]	; (80055d0 <HAL_RCC_OscConfig+0x2b0>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fe f8a1 	bl	80035dc <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fe f89d 	bl	80035dc <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1a5      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b0:	4b46      	ldr	r3, [pc, #280]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	4b43      	ldr	r3, [pc, #268]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4940      	ldr	r1, [pc, #256]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCC_OscConfig+0x2b0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fe f880 	bl	80035dc <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e0:	f7fe f87c 	bl	80035dc <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e184      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f2:	4b36      	ldr	r3, [pc, #216]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d030      	beq.n	800556c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005512:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <HAL_RCC_OscConfig+0x2b4>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe f860 	bl	80035dc <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005520:	f7fe f85c 	bl	80035dc <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e164      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x200>
 800553e:	e015      	b.n	800556c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005540:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_RCC_OscConfig+0x2b4>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005546:	f7fe f849 	bl	80035dc <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554e:	f7fe f845 	bl	80035dc <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e14d      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005560:	4b1a      	ldr	r3, [pc, #104]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80a0 	beq.w	80056ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10f      	bne.n	80055aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 8005594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <HAL_RCC_OscConfig+0x2ac>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a6:	2301      	movs	r3, #1
 80055a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_OscConfig+0x2b8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d121      	bne.n	80055fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b6:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_RCC_OscConfig+0x2b8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <HAL_RCC_OscConfig+0x2b8>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c2:	f7fe f80b 	bl	80035dc <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c8:	e011      	b.n	80055ee <HAL_RCC_OscConfig+0x2ce>
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800
 80055d0:	42470000 	.word	0x42470000
 80055d4:	42470e80 	.word	0x42470e80
 80055d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055dc:	f7fd fffe 	bl	80035dc <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e106      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ee:	4b85      	ldr	r3, [pc, #532]	; (8005804 <HAL_RCC_OscConfig+0x4e4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d106      	bne.n	8005610 <HAL_RCC_OscConfig+0x2f0>
 8005602:	4b81      	ldr	r3, [pc, #516]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a80      	ldr	r2, [pc, #512]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
 800560e:	e01c      	b.n	800564a <HAL_RCC_OscConfig+0x32a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b05      	cmp	r3, #5
 8005616:	d10c      	bne.n	8005632 <HAL_RCC_OscConfig+0x312>
 8005618:	4b7b      	ldr	r3, [pc, #492]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 800561a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561c:	4a7a      	ldr	r2, [pc, #488]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 800561e:	f043 0304 	orr.w	r3, r3, #4
 8005622:	6713      	str	r3, [r2, #112]	; 0x70
 8005624:	4b78      	ldr	r3, [pc, #480]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	4a77      	ldr	r2, [pc, #476]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6713      	str	r3, [r2, #112]	; 0x70
 8005630:	e00b      	b.n	800564a <HAL_RCC_OscConfig+0x32a>
 8005632:	4b75      	ldr	r3, [pc, #468]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	4a74      	ldr	r2, [pc, #464]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	6713      	str	r3, [r2, #112]	; 0x70
 800563e:	4b72      	ldr	r3, [pc, #456]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a71      	ldr	r2, [pc, #452]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005644:	f023 0304 	bic.w	r3, r3, #4
 8005648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d015      	beq.n	800567e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005652:	f7fd ffc3 	bl	80035dc <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	e00a      	b.n	8005670 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fd ffbf 	bl	80035dc <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f241 3288 	movw	r2, #5000	; 0x1388
 8005668:	4293      	cmp	r3, r2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e0c5      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	4b65      	ldr	r3, [pc, #404]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ee      	beq.n	800565a <HAL_RCC_OscConfig+0x33a>
 800567c:	e014      	b.n	80056a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567e:	f7fd ffad 	bl	80035dc <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005684:	e00a      	b.n	800569c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fd ffa9 	bl	80035dc <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f241 3288 	movw	r2, #5000	; 0x1388
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e0af      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800569c:	4b5a      	ldr	r3, [pc, #360]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 800569e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1ee      	bne.n	8005686 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d105      	bne.n	80056ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ae:	4b56      	ldr	r3, [pc, #344]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	4a55      	ldr	r2, [pc, #340]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 80056b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 809b 	beq.w	80057fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056c4:	4b50      	ldr	r3, [pc, #320]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 030c 	and.w	r3, r3, #12
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d05c      	beq.n	800578a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d141      	bne.n	800575c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d8:	4b4c      	ldr	r3, [pc, #304]	; (800580c <HAL_RCC_OscConfig+0x4ec>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fd ff7d 	bl	80035dc <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e6:	f7fd ff79 	bl	80035dc <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e081      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f8:	4b43      	ldr	r3, [pc, #268]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f0      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	019b      	lsls	r3, r3, #6
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	3b01      	subs	r3, #1
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	061b      	lsls	r3, r3, #24
 8005728:	4937      	ldr	r1, [pc, #220]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 800572a:	4313      	orrs	r3, r2
 800572c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <HAL_RCC_OscConfig+0x4ec>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005734:	f7fd ff52 	bl	80035dc <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573c:	f7fd ff4e 	bl	80035dc <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e056      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574e:	4b2e      	ldr	r3, [pc, #184]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x41c>
 800575a:	e04e      	b.n	80057fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575c:	4b2b      	ldr	r3, [pc, #172]	; (800580c <HAL_RCC_OscConfig+0x4ec>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005762:	f7fd ff3b 	bl	80035dc <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576a:	f7fd ff37 	bl	80035dc <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e03f      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577c:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x44a>
 8005788:	e037      	b.n	80057fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e032      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005796:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <HAL_RCC_OscConfig+0x4e8>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d028      	beq.n	80057f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d121      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d11a      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057c6:	4013      	ands	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	3b01      	subs	r3, #1
 80057e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d107      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40007000 	.word	0x40007000
 8005808:	40023800 	.word	0x40023800
 800580c:	42470060 	.word	0x42470060

08005810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0cc      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d90c      	bls.n	800584c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0b8      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800586e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800587c:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	494d      	ldr	r1, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d044      	beq.n	8005930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d119      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d003      	beq.n	80058ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e06f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058de:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e067      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ee:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4934      	ldr	r1, [pc, #208]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005900:	f7fd fe6c 	bl	80035dc <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005906:	e00a      	b.n	800591e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005908:	f7fd fe68 	bl	80035dc <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e04f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 020c 	and.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	429a      	cmp	r2, r3
 800592e:	d1eb      	bne.n	8005908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d20c      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e032      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4916      	ldr	r1, [pc, #88]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005996:	f000 f821 	bl	80059dc <HAL_RCC_GetSysClockFreq>
 800599a:	4602      	mov	r2, r0
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	490a      	ldr	r1, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 80059a8:	5ccb      	ldrb	r3, [r1, r3]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1c8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fc fe98 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00
 80059cc:	40023800 	.word	0x40023800
 80059d0:	0800a3ec 	.word	0x0800a3ec
 80059d4:	20000000 	.word	0x20000000
 80059d8:	20000004 	.word	0x20000004

080059dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	2300      	movs	r3, #0
 80059ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f4:	4b67      	ldr	r3, [pc, #412]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 030c 	and.w	r3, r3, #12
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d00d      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x40>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	f200 80bd 	bhi.w	8005b80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x34>
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a0e:	e0b7      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a10:	4b61      	ldr	r3, [pc, #388]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a12:	60bb      	str	r3, [r7, #8]
       break;
 8005a14:	e0b7      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a16:	4b60      	ldr	r3, [pc, #384]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a18:	60bb      	str	r3, [r7, #8]
      break;
 8005a1a:	e0b4      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a1c:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a26:	4b5b      	ldr	r3, [pc, #364]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d04d      	beq.n	8005ace <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a32:	4b58      	ldr	r3, [pc, #352]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a42:	f04f 0100 	mov.w	r1, #0
 8005a46:	ea02 0800 	and.w	r8, r2, r0
 8005a4a:	ea03 0901 	and.w	r9, r3, r1
 8005a4e:	4640      	mov	r0, r8
 8005a50:	4649      	mov	r1, r9
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	014b      	lsls	r3, r1, #5
 8005a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a60:	0142      	lsls	r2, r0, #5
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	ebb0 0008 	subs.w	r0, r0, r8
 8005a6a:	eb61 0109 	sbc.w	r1, r1, r9
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	018b      	lsls	r3, r1, #6
 8005a78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a7c:	0182      	lsls	r2, r0, #6
 8005a7e:	1a12      	subs	r2, r2, r0
 8005a80:	eb63 0301 	sbc.w	r3, r3, r1
 8005a84:	f04f 0000 	mov.w	r0, #0
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	00d9      	lsls	r1, r3, #3
 8005a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a92:	00d0      	lsls	r0, r2, #3
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	eb12 0208 	adds.w	r2, r2, r8
 8005a9c:	eb43 0309 	adc.w	r3, r3, r9
 8005aa0:	f04f 0000 	mov.w	r0, #0
 8005aa4:	f04f 0100 	mov.w	r1, #0
 8005aa8:	0299      	lsls	r1, r3, #10
 8005aaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005aae:	0290      	lsls	r0, r2, #10
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	f7fb f882 	bl	8000bc8 <__aeabi_uldivmod>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4613      	mov	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e04a      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ace:	4b31      	ldr	r3, [pc, #196]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	ea02 0400 	and.w	r4, r2, r0
 8005ae6:	ea03 0501 	and.w	r5, r3, r1
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	014b      	lsls	r3, r1, #5
 8005af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005afc:	0142      	lsls	r2, r0, #5
 8005afe:	4610      	mov	r0, r2
 8005b00:	4619      	mov	r1, r3
 8005b02:	1b00      	subs	r0, r0, r4
 8005b04:	eb61 0105 	sbc.w	r1, r1, r5
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	018b      	lsls	r3, r1, #6
 8005b12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b16:	0182      	lsls	r2, r0, #6
 8005b18:	1a12      	subs	r2, r2, r0
 8005b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b1e:	f04f 0000 	mov.w	r0, #0
 8005b22:	f04f 0100 	mov.w	r1, #0
 8005b26:	00d9      	lsls	r1, r3, #3
 8005b28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b2c:	00d0      	lsls	r0, r2, #3
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	1912      	adds	r2, r2, r4
 8005b34:	eb45 0303 	adc.w	r3, r5, r3
 8005b38:	f04f 0000 	mov.w	r0, #0
 8005b3c:	f04f 0100 	mov.w	r1, #0
 8005b40:	0299      	lsls	r1, r3, #10
 8005b42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b46:	0290      	lsls	r0, r2, #10
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	f7fb f836 	bl	8000bc8 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4613      	mov	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	0c1b      	lsrs	r3, r3, #16
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	60bb      	str	r3, [r7, #8]
      break;
 8005b7e:	e002      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b82:	60bb      	str	r3, [r7, #8]
      break;
 8005b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b86:	68bb      	ldr	r3, [r7, #8]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800
 8005b98:	00f42400 	.word	0x00f42400

08005b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000000 	.word	0x20000000

08005bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bb8:	f7ff fff0 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	0a9b      	lsrs	r3, r3, #10
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	4903      	ldr	r1, [pc, #12]	; (8005bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bca:	5ccb      	ldrb	r3, [r1, r3]
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	0800a3fc 	.word	0x0800a3fc

08005bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005be0:	f7ff ffdc 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	0b5b      	lsrs	r3, r3, #13
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4903      	ldr	r1, [pc, #12]	; (8005c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bf2:	5ccb      	ldrb	r3, [r1, r3]
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	0800a3fc 	.word	0x0800a3fc

08005c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	220f      	movs	r2, #15
 8005c12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0203 	and.w	r2, r3, #3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c38:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <HAL_RCC_GetClockConfig+0x60>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40023c00 	.word	0x40023c00

08005c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e07b      	b.n	8005d72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8a:	d009      	beq.n	8005ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	61da      	str	r2, [r3, #28]
 8005c92:	e005      	b.n	8005ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fc fafa 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d24:	ea42 0103 	orr.w	r1, r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	f003 0104 	and.w	r1, r3, #4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	f003 0210 	and.w	r2, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e041      	b.n	8005e10 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f839 	bl	8005e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f000 fae9 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e04e      	b.n	8005ee2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d022      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d01d      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d111      	bne.n	8005ed0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b06      	cmp	r3, #6
 8005ebc:	d010      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	e007      	b.n	8005ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e041      	b.n	8005fa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fc fa74 	bl	8002420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f000 fa20 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d122      	bne.n	8006006 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d11b      	bne.n	8006006 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0202 	mvn.w	r2, #2
 8005fd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9b1 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 8005ff2:	e005      	b.n	8006000 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f9a3 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9b4 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b04      	cmp	r3, #4
 8006012:	d122      	bne.n	800605a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d11b      	bne.n	800605a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0204 	mvn.w	r2, #4
 800602a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f987 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 8006046:	e005      	b.n	8006054 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f979 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f98a 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b08      	cmp	r3, #8
 8006066:	d122      	bne.n	80060ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b08      	cmp	r3, #8
 8006074:	d11b      	bne.n	80060ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0208 	mvn.w	r2, #8
 800607e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2204      	movs	r2, #4
 8006084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f95d 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 800609a:	e005      	b.n	80060a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f94f 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f960 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d122      	bne.n	8006102 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b10      	cmp	r3, #16
 80060c8:	d11b      	bne.n	8006102 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0210 	mvn.w	r2, #16
 80060d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2208      	movs	r2, #8
 80060d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f933 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 80060ee:	e005      	b.n	80060fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f925 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f936 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10e      	bne.n	800612e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	d107      	bne.n	800612e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f06f 0201 	mvn.w	r2, #1
 8006126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fb ff69 	bl	8002000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006138:	2b80      	cmp	r3, #128	; 0x80
 800613a:	d10e      	bne.n	800615a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d107      	bne.n	800615a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fbf1 	bl	800693c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d10e      	bne.n	8006186 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d107      	bne.n	8006186 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8fb 	bl	800637c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b20      	cmp	r3, #32
 8006192:	d10e      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d107      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f06f 0220 	mvn.w	r2, #32
 80061aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fbbb 	bl	8006928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e0ae      	b.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	f200 809f 	bhi.w	8006328 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006225 	.word	0x08006225
 80061f4:	08006329 	.word	0x08006329
 80061f8:	08006329 	.word	0x08006329
 80061fc:	08006329 	.word	0x08006329
 8006200:	08006265 	.word	0x08006265
 8006204:	08006329 	.word	0x08006329
 8006208:	08006329 	.word	0x08006329
 800620c:	08006329 	.word	0x08006329
 8006210:	080062a7 	.word	0x080062a7
 8006214:	08006329 	.word	0x08006329
 8006218:	08006329 	.word	0x08006329
 800621c:	08006329 	.word	0x08006329
 8006220:	080062e7 	.word	0x080062e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f950 	bl	80064d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	619a      	str	r2, [r3, #24]
      break;
 8006262:	e064      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 f9a0 	bl	80065b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6999      	ldr	r1, [r3, #24]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	619a      	str	r2, [r3, #24]
      break;
 80062a4:	e043      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f9f5 	bl	800669c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0208 	orr.w	r2, r2, #8
 80062c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0204 	bic.w	r2, r2, #4
 80062d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69d9      	ldr	r1, [r3, #28]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	61da      	str	r2, [r3, #28]
      break;
 80062e4:	e023      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fa49 	bl	8006784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69d9      	ldr	r1, [r3, #28]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	021a      	lsls	r2, r3, #8
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	61da      	str	r2, [r3, #28]
      break;
 8006326:	e002      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	75fb      	strb	r3, [r7, #23]
      break;
 800632c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a40      	ldr	r2, [pc, #256]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ae:	d00f      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a3d      	ldr	r2, [pc, #244]	; (80064a8 <TIM_Base_SetConfig+0x118>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00b      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3c      	ldr	r2, [pc, #240]	; (80064ac <TIM_Base_SetConfig+0x11c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3b      	ldr	r2, [pc, #236]	; (80064b0 <TIM_Base_SetConfig+0x120>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a3a      	ldr	r2, [pc, #232]	; (80064b4 <TIM_Base_SetConfig+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2f      	ldr	r2, [pc, #188]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d02b      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f0:	d027      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2c      	ldr	r2, [pc, #176]	; (80064a8 <TIM_Base_SetConfig+0x118>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d023      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2b      	ldr	r2, [pc, #172]	; (80064ac <TIM_Base_SetConfig+0x11c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01f      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <TIM_Base_SetConfig+0x120>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01b      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a29      	ldr	r2, [pc, #164]	; (80064b4 <TIM_Base_SetConfig+0x124>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d017      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <TIM_Base_SetConfig+0x128>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d013      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a27      	ldr	r2, [pc, #156]	; (80064bc <TIM_Base_SetConfig+0x12c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00f      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <TIM_Base_SetConfig+0x130>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00b      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a25      	ldr	r2, [pc, #148]	; (80064c4 <TIM_Base_SetConfig+0x134>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d007      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a24      	ldr	r2, [pc, #144]	; (80064c8 <TIM_Base_SetConfig+0x138>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a23      	ldr	r2, [pc, #140]	; (80064cc <TIM_Base_SetConfig+0x13c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d108      	bne.n	8006454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a0a      	ldr	r2, [pc, #40]	; (80064a4 <TIM_Base_SetConfig+0x114>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <TIM_Base_SetConfig+0x124>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d103      	bne.n	8006490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	615a      	str	r2, [r3, #20]
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40010400 	.word	0x40010400
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800
 80064c4:	40001800 	.word	0x40001800
 80064c8:	40001c00 	.word	0x40001c00
 80064cc:	40002000 	.word	0x40002000

080064d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0302 	bic.w	r3, r3, #2
 8006518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <TIM_OC1_SetConfig+0xd8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC1_SetConfig+0x64>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <TIM_OC1_SetConfig+0xdc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10c      	bne.n	800654e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0308 	bic.w	r3, r3, #8
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f023 0304 	bic.w	r3, r3, #4
 800654c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <TIM_OC1_SetConfig+0xd8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC1_SetConfig+0x8e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <TIM_OC1_SetConfig+0xdc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d111      	bne.n	8006582 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400

080065b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0210 	bic.w	r2, r3, #16
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f023 0320 	bic.w	r3, r3, #32
 80065fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a22      	ldr	r2, [pc, #136]	; (8006694 <TIM_OC2_SetConfig+0xe4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC2_SetConfig+0x68>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a21      	ldr	r2, [pc, #132]	; (8006698 <TIM_OC2_SetConfig+0xe8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10d      	bne.n	8006634 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a17      	ldr	r2, [pc, #92]	; (8006694 <TIM_OC2_SetConfig+0xe4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC2_SetConfig+0x94>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a16      	ldr	r2, [pc, #88]	; (8006698 <TIM_OC2_SetConfig+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40010000 	.word	0x40010000
 8006698:	40010400 	.word	0x40010400

0800669c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a21      	ldr	r2, [pc, #132]	; (800677c <TIM_OC3_SetConfig+0xe0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_OC3_SetConfig+0x66>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a20      	ldr	r2, [pc, #128]	; (8006780 <TIM_OC3_SetConfig+0xe4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10d      	bne.n	800671e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a16      	ldr	r2, [pc, #88]	; (800677c <TIM_OC3_SetConfig+0xe0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC3_SetConfig+0x92>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <TIM_OC3_SetConfig+0xe4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d113      	bne.n	8006756 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	621a      	str	r2, [r3, #32]
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40010000 	.word	0x40010000
 8006780:	40010400 	.word	0x40010400

08006784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a12      	ldr	r2, [pc, #72]	; (8006828 <TIM_OC4_SetConfig+0xa4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC4_SetConfig+0x68>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a11      	ldr	r2, [pc, #68]	; (800682c <TIM_OC4_SetConfig+0xa8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d109      	bne.n	8006800 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	019b      	lsls	r3, r3, #6
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006844:	2302      	movs	r3, #2
 8006846:	e05a      	b.n	80068fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a21      	ldr	r2, [pc, #132]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006894:	d01d      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a17      	ldr	r2, [pc, #92]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a15      	ldr	r2, [pc, #84]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10c      	bne.n	80068ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40010000 	.word	0x40010000
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40010400 	.word	0x40010400
 8006920:	40014000 	.word	0x40014000
 8006924:	40001800 	.word	0x40001800

08006928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e03f      	b.n	80069e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb fdaa 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	; 0x24
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f929 	bl	8006bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b08a      	sub	sp, #40	; 0x28
 80069ee:	af02      	add	r7, sp, #8
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	4613      	mov	r3, r2
 80069f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d17c      	bne.n	8006b04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_UART_Transmit+0x2c>
 8006a10:	88fb      	ldrh	r3, [r7, #6]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e075      	b.n	8006b06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Transmit+0x3e>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e06e      	b.n	8006b06 <HAL_UART_Transmit+0x11c>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2221      	movs	r2, #33	; 0x21
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a3e:	f7fc fdcd 	bl	80035dc <HAL_GetTick>
 8006a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	88fa      	ldrh	r2, [r7, #6]
 8006a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a58:	d108      	bne.n	8006a6c <HAL_UART_Transmit+0x82>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	e003      	b.n	8006a74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a7c:	e02a      	b.n	8006ad4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2200      	movs	r2, #0
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f840 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e036      	b.n	8006b06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	3302      	adds	r3, #2
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e007      	b.n	8006ac6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	781a      	ldrb	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1cf      	bne.n	8006a7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2140      	movs	r1, #64	; 0x40
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f810 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e006      	b.n	8006b06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e000      	b.n	8006b06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
  }
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3720      	adds	r7, #32
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b090      	sub	sp, #64	; 0x40
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1e:	e050      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d04c      	beq.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d007      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b2e:	f7fc fd55 	bl	80035dc <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d241      	bcs.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b5e:	637a      	str	r2, [r7, #52]	; 0x34
 8006b60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	613b      	str	r3, [r7, #16]
   return(result);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b92:	623a      	str	r2, [r7, #32]
 8006b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	69f9      	ldr	r1, [r7, #28]
 8006b98:	6a3a      	ldr	r2, [r7, #32]
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e00f      	b.n	8006be2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	bf0c      	ite	eq
 8006bd2:	2301      	moveq	r3, #1
 8006bd4:	2300      	movne	r3, #0
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d09f      	beq.n	8006b20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3740      	adds	r7, #64	; 0x40
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	b09f      	sub	sp, #124	; 0x7c
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	68d9      	ldr	r1, [r3, #12]
 8006c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	ea40 0301 	orr.w	r3, r0, r1
 8006c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c30:	f021 010c 	bic.w	r1, r1, #12
 8006c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4a:	6999      	ldr	r1, [r3, #24]
 8006c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	ea40 0301 	orr.w	r3, r0, r1
 8006c54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4bc5      	ldr	r3, [pc, #788]	; (8006f70 <UART_SetConfig+0x384>)
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d004      	beq.n	8006c6a <UART_SetConfig+0x7e>
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4bc3      	ldr	r3, [pc, #780]	; (8006f74 <UART_SetConfig+0x388>)
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d103      	bne.n	8006c72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c6a:	f7fe ffb7 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 8006c6e:	6778      	str	r0, [r7, #116]	; 0x74
 8006c70:	e002      	b.n	8006c78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7fe ff9f 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8006c76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c80:	f040 80b6 	bne.w	8006df0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c86:	461c      	mov	r4, r3
 8006c88:	f04f 0500 	mov.w	r5, #0
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	462b      	mov	r3, r5
 8006c90:	1891      	adds	r1, r2, r2
 8006c92:	6439      	str	r1, [r7, #64]	; 0x40
 8006c94:	415b      	adcs	r3, r3
 8006c96:	647b      	str	r3, [r7, #68]	; 0x44
 8006c98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c9c:	1912      	adds	r2, r2, r4
 8006c9e:	eb45 0303 	adc.w	r3, r5, r3
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f04f 0100 	mov.w	r1, #0
 8006caa:	00d9      	lsls	r1, r3, #3
 8006cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cb0:	00d0      	lsls	r0, r2, #3
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	1911      	adds	r1, r2, r4
 8006cb8:	6639      	str	r1, [r7, #96]	; 0x60
 8006cba:	416b      	adcs	r3, r5
 8006cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	1891      	adds	r1, r2, r2
 8006cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ccc:	415b      	adcs	r3, r3
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006cd8:	f7f9 ff76 	bl	8000bc8 <__aeabi_uldivmod>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4ba5      	ldr	r3, [pc, #660]	; (8006f78 <UART_SetConfig+0x38c>)
 8006ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	011e      	lsls	r6, r3, #4
 8006cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cec:	461c      	mov	r4, r3
 8006cee:	f04f 0500 	mov.w	r5, #0
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	1891      	adds	r1, r2, r2
 8006cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8006cfa:	415b      	adcs	r3, r3
 8006cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d02:	1912      	adds	r2, r2, r4
 8006d04:	eb45 0303 	adc.w	r3, r5, r3
 8006d08:	f04f 0000 	mov.w	r0, #0
 8006d0c:	f04f 0100 	mov.w	r1, #0
 8006d10:	00d9      	lsls	r1, r3, #3
 8006d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d16:	00d0      	lsls	r0, r2, #3
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	1911      	adds	r1, r2, r4
 8006d1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d20:	416b      	adcs	r3, r5
 8006d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	1891      	adds	r1, r2, r2
 8006d30:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d32:	415b      	adcs	r3, r3
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d3e:	f7f9 ff43 	bl	8000bc8 <__aeabi_uldivmod>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4b8c      	ldr	r3, [pc, #560]	; (8006f78 <UART_SetConfig+0x38c>)
 8006d48:	fba3 1302 	umull	r1, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	2164      	movs	r1, #100	; 0x64
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	3332      	adds	r3, #50	; 0x32
 8006d5a:	4a87      	ldr	r2, [pc, #540]	; (8006f78 <UART_SetConfig+0x38c>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d68:	441e      	add	r6, r3
 8006d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f04f 0100 	mov.w	r1, #0
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	1894      	adds	r4, r2, r2
 8006d78:	623c      	str	r4, [r7, #32]
 8006d7a:	415b      	adcs	r3, r3
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d82:	1812      	adds	r2, r2, r0
 8006d84:	eb41 0303 	adc.w	r3, r1, r3
 8006d88:	f04f 0400 	mov.w	r4, #0
 8006d8c:	f04f 0500 	mov.w	r5, #0
 8006d90:	00dd      	lsls	r5, r3, #3
 8006d92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d96:	00d4      	lsls	r4, r2, #3
 8006d98:	4622      	mov	r2, r4
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	1814      	adds	r4, r2, r0
 8006d9e:	653c      	str	r4, [r7, #80]	; 0x50
 8006da0:	414b      	adcs	r3, r1
 8006da2:	657b      	str	r3, [r7, #84]	; 0x54
 8006da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	1891      	adds	r1, r2, r2
 8006db0:	61b9      	str	r1, [r7, #24]
 8006db2:	415b      	adcs	r3, r3
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006dbe:	f7f9 ff03 	bl	8000bc8 <__aeabi_uldivmod>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <UART_SetConfig+0x38c>)
 8006dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	2164      	movs	r1, #100	; 0x64
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	3332      	adds	r3, #50	; 0x32
 8006dda:	4a67      	ldr	r2, [pc, #412]	; (8006f78 <UART_SetConfig+0x38c>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	f003 0207 	and.w	r2, r3, #7
 8006de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4432      	add	r2, r6
 8006dec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dee:	e0b9      	b.n	8006f64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df2:	461c      	mov	r4, r3
 8006df4:	f04f 0500 	mov.w	r5, #0
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	1891      	adds	r1, r2, r2
 8006dfe:	6139      	str	r1, [r7, #16]
 8006e00:	415b      	adcs	r3, r3
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e08:	1912      	adds	r2, r2, r4
 8006e0a:	eb45 0303 	adc.w	r3, r5, r3
 8006e0e:	f04f 0000 	mov.w	r0, #0
 8006e12:	f04f 0100 	mov.w	r1, #0
 8006e16:	00d9      	lsls	r1, r3, #3
 8006e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e1c:	00d0      	lsls	r0, r2, #3
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	eb12 0804 	adds.w	r8, r2, r4
 8006e26:	eb43 0905 	adc.w	r9, r3, r5
 8006e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f04f 0100 	mov.w	r1, #0
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	008b      	lsls	r3, r1, #2
 8006e3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e42:	0082      	lsls	r2, r0, #2
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 febe 	bl	8000bc8 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4b49      	ldr	r3, [pc, #292]	; (8006f78 <UART_SetConfig+0x38c>)
 8006e52:	fba3 2302 	umull	r2, r3, r3, r2
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	011e      	lsls	r6, r3, #4
 8006e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f04f 0100 	mov.w	r1, #0
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	1894      	adds	r4, r2, r2
 8006e68:	60bc      	str	r4, [r7, #8]
 8006e6a:	415b      	adcs	r3, r3
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e72:	1812      	adds	r2, r2, r0
 8006e74:	eb41 0303 	adc.w	r3, r1, r3
 8006e78:	f04f 0400 	mov.w	r4, #0
 8006e7c:	f04f 0500 	mov.w	r5, #0
 8006e80:	00dd      	lsls	r5, r3, #3
 8006e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e86:	00d4      	lsls	r4, r2, #3
 8006e88:	4622      	mov	r2, r4
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	1814      	adds	r4, r2, r0
 8006e8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006e90:	414b      	adcs	r3, r1
 8006e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f04f 0100 	mov.w	r1, #0
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	008b      	lsls	r3, r1, #2
 8006ea8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006eac:	0082      	lsls	r2, r0, #2
 8006eae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006eb2:	f7f9 fe89 	bl	8000bc8 <__aeabi_uldivmod>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4b2f      	ldr	r3, [pc, #188]	; (8006f78 <UART_SetConfig+0x38c>)
 8006ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	2164      	movs	r1, #100	; 0x64
 8006ec4:	fb01 f303 	mul.w	r3, r1, r3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	3332      	adds	r3, #50	; 0x32
 8006ece:	4a2a      	ldr	r2, [pc, #168]	; (8006f78 <UART_SetConfig+0x38c>)
 8006ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eda:	441e      	add	r6, r3
 8006edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f04f 0100 	mov.w	r1, #0
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	1894      	adds	r4, r2, r2
 8006eea:	603c      	str	r4, [r7, #0]
 8006eec:	415b      	adcs	r3, r3
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	1812      	adds	r2, r2, r0
 8006ef6:	eb41 0303 	adc.w	r3, r1, r3
 8006efa:	f04f 0400 	mov.w	r4, #0
 8006efe:	f04f 0500 	mov.w	r5, #0
 8006f02:	00dd      	lsls	r5, r3, #3
 8006f04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f08:	00d4      	lsls	r4, r2, #3
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	eb12 0a00 	adds.w	sl, r2, r0
 8006f12:	eb43 0b01 	adc.w	fp, r3, r1
 8006f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f04f 0100 	mov.w	r1, #0
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	008b      	lsls	r3, r1, #2
 8006f2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f2e:	0082      	lsls	r2, r0, #2
 8006f30:	4650      	mov	r0, sl
 8006f32:	4659      	mov	r1, fp
 8006f34:	f7f9 fe48 	bl	8000bc8 <__aeabi_uldivmod>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <UART_SetConfig+0x38c>)
 8006f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	2164      	movs	r1, #100	; 0x64
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	3332      	adds	r3, #50	; 0x32
 8006f50:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <UART_SetConfig+0x38c>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	095b      	lsrs	r3, r3, #5
 8006f58:	f003 020f 	and.w	r2, r3, #15
 8006f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4432      	add	r2, r6
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	377c      	adds	r7, #124	; 0x7c
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	bf00      	nop
 8006f70:	40011000 	.word	0x40011000
 8006f74:	40011400 	.word	0x40011400
 8006f78:	51eb851f 	.word	0x51eb851f

08006f7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	f107 001c 	add.w	r0, r7, #28
 8006f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d122      	bne.n	8006fda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d105      	bne.n	8006fce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa82 	bl	80074d8 <USB_CoreReset>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	e01a      	b.n	8007010 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa76 	bl	80074d8 <USB_CoreReset>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
 8007002:	e005      	b.n	8007010 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	2b01      	cmp	r3, #1
 8007014:	d10b      	bne.n	800702e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f043 0206 	orr.w	r2, r3, #6
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f043 0220 	orr.w	r2, r3, #32
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800703a:	b004      	add	sp, #16
 800703c:	4770      	bx	lr

0800703e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f023 0201 	bic.w	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d115      	bne.n	80070ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800708e:	2001      	movs	r0, #1
 8007090:	f7fc fab0 	bl	80035f4 <HAL_Delay>
      ms++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa0e 	bl	80074bc <USB_GetMode>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d01e      	beq.n	80070e4 <USB_SetCurrentMode+0x84>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b31      	cmp	r3, #49	; 0x31
 80070aa:	d9f0      	bls.n	800708e <USB_SetCurrentMode+0x2e>
 80070ac:	e01a      	b.n	80070e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d115      	bne.n	80070e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070c0:	2001      	movs	r0, #1
 80070c2:	f7fc fa97 	bl	80035f4 <HAL_Delay>
      ms++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f9f5 	bl	80074bc <USB_GetMode>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <USB_SetCurrentMode+0x84>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b31      	cmp	r3, #49	; 0x31
 80070dc:	d9f0      	bls.n	80070c0 <USB_SetCurrentMode+0x60>
 80070de:	e001      	b.n	80070e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e005      	b.n	80070f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b32      	cmp	r3, #50	; 0x32
 80070e8:	d101      	bne.n	80070ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070f8:	b084      	sub	sp, #16
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	e009      	b.n	800712c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	3340      	adds	r3, #64	; 0x40
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3301      	adds	r3, #1
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b0e      	cmp	r3, #14
 8007130:	d9f2      	bls.n	8007118 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d11c      	bne.n	8007172 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007146:	f043 0302 	orr.w	r3, r3, #2
 800714a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	639a      	str	r2, [r3, #56]	; 0x38
 8007170:	e00b      	b.n	800718a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007190:	461a      	mov	r2, r3
 8007192:	2300      	movs	r3, #0
 8007194:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	4619      	mov	r1, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a4:	461a      	mov	r2, r3
 80071a6:	680b      	ldr	r3, [r1, #0]
 80071a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10c      	bne.n	80071ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071b6:	2100      	movs	r1, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f945 	bl	8007448 <USB_SetDevSpeed>
 80071be:	e008      	b.n	80071d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071c0:	2101      	movs	r1, #1
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f940 	bl	8007448 <USB_SetDevSpeed>
 80071c8:	e003      	b.n	80071d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071ca:	2103      	movs	r1, #3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f93b 	bl	8007448 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071d2:	2110      	movs	r1, #16
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f8f3 	bl	80073c0 <USB_FlushTxFifo>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f90f 	bl	8007408 <USB_FlushRxFifo>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fa:	461a      	mov	r2, r3
 80071fc:	2300      	movs	r3, #0
 80071fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007206:	461a      	mov	r2, r3
 8007208:	2300      	movs	r3, #0
 800720a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	461a      	mov	r2, r3
 8007214:	2300      	movs	r3, #0
 8007216:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	e043      	b.n	80072a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007234:	d118      	bne.n	8007268 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	461a      	mov	r2, r3
 800724a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e013      	b.n	800727a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725e:	461a      	mov	r2, r3
 8007260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e008      	b.n	800727a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	461a      	mov	r2, r3
 8007276:	2300      	movs	r3, #0
 8007278:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	461a      	mov	r2, r3
 8007288:	2300      	movs	r3, #0
 800728a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	461a      	mov	r2, r3
 800729a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800729e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	3301      	adds	r3, #1
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d3b7      	bcc.n	800721e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ae:	2300      	movs	r3, #0
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	e043      	b.n	800733c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ca:	d118      	bne.n	80072fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	461a      	mov	r2, r3
 80072e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	e013      	b.n	8007310 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	461a      	mov	r2, r3
 80072f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	e008      	b.n	8007310 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	461a      	mov	r2, r3
 800730c:	2300      	movs	r3, #0
 800730e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	461a      	mov	r2, r3
 800731e:	2300      	movs	r3, #0
 8007320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732e:	461a      	mov	r2, r3
 8007330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007334:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3301      	adds	r3, #1
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d3b7      	bcc.n	80072b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007356:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007364:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2b00      	cmp	r3, #0
 800736a:	d105      	bne.n	8007378 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f043 0210 	orr.w	r2, r3, #16
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <USB_DevInit+0x2c4>)
 800737e:	4313      	orrs	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f043 0208 	orr.w	r2, r3, #8
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d107      	bne.n	80073ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073a4:	f043 0304 	orr.w	r3, r3, #4
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b8:	b004      	add	sp, #16
 80073ba:	4770      	bx	lr
 80073bc:	803c3800 	.word	0x803c3800

080073c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	019b      	lsls	r3, r3, #6
 80073d2:	f043 0220 	orr.w	r2, r3, #32
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	4a08      	ldr	r2, [pc, #32]	; (8007404 <USB_FlushTxFifo+0x44>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e006      	b.n	80073f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d0f1      	beq.n	80073da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	00030d40 	.word	0x00030d40

08007408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2210      	movs	r2, #16
 8007418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3301      	adds	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	4a08      	ldr	r2, [pc, #32]	; (8007444 <USB_FlushRxFifo+0x3c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e006      	b.n	8007438 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0310 	and.w	r3, r3, #16
 8007432:	2b10      	cmp	r3, #16
 8007434:	d0f1      	beq.n	800741a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	00030d40 	.word	0x00030d40

08007448 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007468:	4313      	orrs	r3, r2
 800746a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007494:	f023 0303 	bic.w	r3, r3, #3
 8007498:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	f003 0301 	and.w	r3, r3, #1
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	4a13      	ldr	r2, [pc, #76]	; (8007538 <USB_CoreReset+0x60>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d901      	bls.n	80074f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e01a      	b.n	800752a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	daf3      	bge.n	80074e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f043 0201 	orr.w	r2, r3, #1
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	4a09      	ldr	r2, [pc, #36]	; (8007538 <USB_CoreReset+0x60>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d901      	bls.n	800751c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e006      	b.n	800752a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b01      	cmp	r3, #1
 8007526:	d0f1      	beq.n	800750c <USB_CoreReset+0x34>

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	00030d40 	.word	0x00030d40

0800753c <__errno>:
 800753c:	4b01      	ldr	r3, [pc, #4]	; (8007544 <__errno+0x8>)
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c

08007548 <__libc_init_array>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	4d0d      	ldr	r5, [pc, #52]	; (8007580 <__libc_init_array+0x38>)
 800754c:	4c0d      	ldr	r4, [pc, #52]	; (8007584 <__libc_init_array+0x3c>)
 800754e:	1b64      	subs	r4, r4, r5
 8007550:	10a4      	asrs	r4, r4, #2
 8007552:	2600      	movs	r6, #0
 8007554:	42a6      	cmp	r6, r4
 8007556:	d109      	bne.n	800756c <__libc_init_array+0x24>
 8007558:	4d0b      	ldr	r5, [pc, #44]	; (8007588 <__libc_init_array+0x40>)
 800755a:	4c0c      	ldr	r4, [pc, #48]	; (800758c <__libc_init_array+0x44>)
 800755c:	f002 feb6 	bl	800a2cc <_init>
 8007560:	1b64      	subs	r4, r4, r5
 8007562:	10a4      	asrs	r4, r4, #2
 8007564:	2600      	movs	r6, #0
 8007566:	42a6      	cmp	r6, r4
 8007568:	d105      	bne.n	8007576 <__libc_init_array+0x2e>
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007570:	4798      	blx	r3
 8007572:	3601      	adds	r6, #1
 8007574:	e7ee      	b.n	8007554 <__libc_init_array+0xc>
 8007576:	f855 3b04 	ldr.w	r3, [r5], #4
 800757a:	4798      	blx	r3
 800757c:	3601      	adds	r6, #1
 800757e:	e7f2      	b.n	8007566 <__libc_init_array+0x1e>
 8007580:	0800a7ec 	.word	0x0800a7ec
 8007584:	0800a7ec 	.word	0x0800a7ec
 8007588:	0800a7ec 	.word	0x0800a7ec
 800758c:	0800a7f0 	.word	0x0800a7f0

08007590 <memset>:
 8007590:	4402      	add	r2, r0
 8007592:	4603      	mov	r3, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <__cvt>:
 80075a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a4:	ec55 4b10 	vmov	r4, r5, d0
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	460e      	mov	r6, r1
 80075ac:	4619      	mov	r1, r3
 80075ae:	462b      	mov	r3, r5
 80075b0:	bfbb      	ittet	lt
 80075b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075b6:	461d      	movlt	r5, r3
 80075b8:	2300      	movge	r3, #0
 80075ba:	232d      	movlt	r3, #45	; 0x2d
 80075bc:	700b      	strb	r3, [r1, #0]
 80075be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075c4:	4691      	mov	r9, r2
 80075c6:	f023 0820 	bic.w	r8, r3, #32
 80075ca:	bfbc      	itt	lt
 80075cc:	4622      	movlt	r2, r4
 80075ce:	4614      	movlt	r4, r2
 80075d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075d4:	d005      	beq.n	80075e2 <__cvt+0x42>
 80075d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075da:	d100      	bne.n	80075de <__cvt+0x3e>
 80075dc:	3601      	adds	r6, #1
 80075de:	2102      	movs	r1, #2
 80075e0:	e000      	b.n	80075e4 <__cvt+0x44>
 80075e2:	2103      	movs	r1, #3
 80075e4:	ab03      	add	r3, sp, #12
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	ab02      	add	r3, sp, #8
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	ec45 4b10 	vmov	d0, r4, r5
 80075f0:	4653      	mov	r3, sl
 80075f2:	4632      	mov	r2, r6
 80075f4:	f000 fcec 	bl	8007fd0 <_dtoa_r>
 80075f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075fc:	4607      	mov	r7, r0
 80075fe:	d102      	bne.n	8007606 <__cvt+0x66>
 8007600:	f019 0f01 	tst.w	r9, #1
 8007604:	d022      	beq.n	800764c <__cvt+0xac>
 8007606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800760a:	eb07 0906 	add.w	r9, r7, r6
 800760e:	d110      	bne.n	8007632 <__cvt+0x92>
 8007610:	783b      	ldrb	r3, [r7, #0]
 8007612:	2b30      	cmp	r3, #48	; 0x30
 8007614:	d10a      	bne.n	800762c <__cvt+0x8c>
 8007616:	2200      	movs	r2, #0
 8007618:	2300      	movs	r3, #0
 800761a:	4620      	mov	r0, r4
 800761c:	4629      	mov	r1, r5
 800761e:	f7f9 fa63 	bl	8000ae8 <__aeabi_dcmpeq>
 8007622:	b918      	cbnz	r0, 800762c <__cvt+0x8c>
 8007624:	f1c6 0601 	rsb	r6, r6, #1
 8007628:	f8ca 6000 	str.w	r6, [sl]
 800762c:	f8da 3000 	ldr.w	r3, [sl]
 8007630:	4499      	add	r9, r3
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	f7f9 fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 800763e:	b108      	cbz	r0, 8007644 <__cvt+0xa4>
 8007640:	f8cd 900c 	str.w	r9, [sp, #12]
 8007644:	2230      	movs	r2, #48	; 0x30
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	454b      	cmp	r3, r9
 800764a:	d307      	bcc.n	800765c <__cvt+0xbc>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007650:	1bdb      	subs	r3, r3, r7
 8007652:	4638      	mov	r0, r7
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	b004      	add	sp, #16
 8007658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	9103      	str	r1, [sp, #12]
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e7f0      	b.n	8007646 <__cvt+0xa6>

08007664 <__exponent>:
 8007664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007666:	4603      	mov	r3, r0
 8007668:	2900      	cmp	r1, #0
 800766a:	bfb8      	it	lt
 800766c:	4249      	neglt	r1, r1
 800766e:	f803 2b02 	strb.w	r2, [r3], #2
 8007672:	bfb4      	ite	lt
 8007674:	222d      	movlt	r2, #45	; 0x2d
 8007676:	222b      	movge	r2, #43	; 0x2b
 8007678:	2909      	cmp	r1, #9
 800767a:	7042      	strb	r2, [r0, #1]
 800767c:	dd2a      	ble.n	80076d4 <__exponent+0x70>
 800767e:	f10d 0407 	add.w	r4, sp, #7
 8007682:	46a4      	mov	ip, r4
 8007684:	270a      	movs	r7, #10
 8007686:	46a6      	mov	lr, r4
 8007688:	460a      	mov	r2, r1
 800768a:	fb91 f6f7 	sdiv	r6, r1, r7
 800768e:	fb07 1516 	mls	r5, r7, r6, r1
 8007692:	3530      	adds	r5, #48	; 0x30
 8007694:	2a63      	cmp	r2, #99	; 0x63
 8007696:	f104 34ff 	add.w	r4, r4, #4294967295
 800769a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800769e:	4631      	mov	r1, r6
 80076a0:	dcf1      	bgt.n	8007686 <__exponent+0x22>
 80076a2:	3130      	adds	r1, #48	; 0x30
 80076a4:	f1ae 0502 	sub.w	r5, lr, #2
 80076a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076ac:	1c44      	adds	r4, r0, #1
 80076ae:	4629      	mov	r1, r5
 80076b0:	4561      	cmp	r1, ip
 80076b2:	d30a      	bcc.n	80076ca <__exponent+0x66>
 80076b4:	f10d 0209 	add.w	r2, sp, #9
 80076b8:	eba2 020e 	sub.w	r2, r2, lr
 80076bc:	4565      	cmp	r5, ip
 80076be:	bf88      	it	hi
 80076c0:	2200      	movhi	r2, #0
 80076c2:	4413      	add	r3, r2
 80076c4:	1a18      	subs	r0, r3, r0
 80076c6:	b003      	add	sp, #12
 80076c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076d2:	e7ed      	b.n	80076b0 <__exponent+0x4c>
 80076d4:	2330      	movs	r3, #48	; 0x30
 80076d6:	3130      	adds	r1, #48	; 0x30
 80076d8:	7083      	strb	r3, [r0, #2]
 80076da:	70c1      	strb	r1, [r0, #3]
 80076dc:	1d03      	adds	r3, r0, #4
 80076de:	e7f1      	b.n	80076c4 <__exponent+0x60>

080076e0 <_printf_float>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	ed2d 8b02 	vpush	{d8}
 80076e8:	b08d      	sub	sp, #52	; 0x34
 80076ea:	460c      	mov	r4, r1
 80076ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076f0:	4616      	mov	r6, r2
 80076f2:	461f      	mov	r7, r3
 80076f4:	4605      	mov	r5, r0
 80076f6:	f001 fa57 	bl	8008ba8 <_localeconv_r>
 80076fa:	f8d0 a000 	ldr.w	sl, [r0]
 80076fe:	4650      	mov	r0, sl
 8007700:	f7f8 fd76 	bl	80001f0 <strlen>
 8007704:	2300      	movs	r3, #0
 8007706:	930a      	str	r3, [sp, #40]	; 0x28
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	9305      	str	r3, [sp, #20]
 800770c:	f8d8 3000 	ldr.w	r3, [r8]
 8007710:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007714:	3307      	adds	r3, #7
 8007716:	f023 0307 	bic.w	r3, r3, #7
 800771a:	f103 0208 	add.w	r2, r3, #8
 800771e:	f8c8 2000 	str.w	r2, [r8]
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800772a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800772e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007732:	9307      	str	r3, [sp, #28]
 8007734:	f8cd 8018 	str.w	r8, [sp, #24]
 8007738:	ee08 0a10 	vmov	s16, r0
 800773c:	4b9f      	ldr	r3, [pc, #636]	; (80079bc <_printf_float+0x2dc>)
 800773e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007742:	f04f 32ff 	mov.w	r2, #4294967295
 8007746:	f7f9 fa01 	bl	8000b4c <__aeabi_dcmpun>
 800774a:	bb88      	cbnz	r0, 80077b0 <_printf_float+0xd0>
 800774c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007750:	4b9a      	ldr	r3, [pc, #616]	; (80079bc <_printf_float+0x2dc>)
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	f7f9 f9db 	bl	8000b10 <__aeabi_dcmple>
 800775a:	bb48      	cbnz	r0, 80077b0 <_printf_float+0xd0>
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	4640      	mov	r0, r8
 8007762:	4649      	mov	r1, r9
 8007764:	f7f9 f9ca 	bl	8000afc <__aeabi_dcmplt>
 8007768:	b110      	cbz	r0, 8007770 <_printf_float+0x90>
 800776a:	232d      	movs	r3, #45	; 0x2d
 800776c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007770:	4b93      	ldr	r3, [pc, #588]	; (80079c0 <_printf_float+0x2e0>)
 8007772:	4894      	ldr	r0, [pc, #592]	; (80079c4 <_printf_float+0x2e4>)
 8007774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007778:	bf94      	ite	ls
 800777a:	4698      	movls	r8, r3
 800777c:	4680      	movhi	r8, r0
 800777e:	2303      	movs	r3, #3
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	9b05      	ldr	r3, [sp, #20]
 8007784:	f023 0204 	bic.w	r2, r3, #4
 8007788:	6022      	str	r2, [r4, #0]
 800778a:	f04f 0900 	mov.w	r9, #0
 800778e:	9700      	str	r7, [sp, #0]
 8007790:	4633      	mov	r3, r6
 8007792:	aa0b      	add	r2, sp, #44	; 0x2c
 8007794:	4621      	mov	r1, r4
 8007796:	4628      	mov	r0, r5
 8007798:	f000 f9d8 	bl	8007b4c <_printf_common>
 800779c:	3001      	adds	r0, #1
 800779e:	f040 8090 	bne.w	80078c2 <_printf_float+0x1e2>
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295
 80077a6:	b00d      	add	sp, #52	; 0x34
 80077a8:	ecbd 8b02 	vpop	{d8}
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	4640      	mov	r0, r8
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f9 f9c8 	bl	8000b4c <__aeabi_dcmpun>
 80077bc:	b140      	cbz	r0, 80077d0 <_printf_float+0xf0>
 80077be:	464b      	mov	r3, r9
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bfbc      	itt	lt
 80077c4:	232d      	movlt	r3, #45	; 0x2d
 80077c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077ca:	487f      	ldr	r0, [pc, #508]	; (80079c8 <_printf_float+0x2e8>)
 80077cc:	4b7f      	ldr	r3, [pc, #508]	; (80079cc <_printf_float+0x2ec>)
 80077ce:	e7d1      	b.n	8007774 <_printf_float+0x94>
 80077d0:	6863      	ldr	r3, [r4, #4]
 80077d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077d6:	9206      	str	r2, [sp, #24]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	d13f      	bne.n	800785c <_printf_float+0x17c>
 80077dc:	2306      	movs	r3, #6
 80077de:	6063      	str	r3, [r4, #4]
 80077e0:	9b05      	ldr	r3, [sp, #20]
 80077e2:	6861      	ldr	r1, [r4, #4]
 80077e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077e8:	2300      	movs	r3, #0
 80077ea:	9303      	str	r3, [sp, #12]
 80077ec:	ab0a      	add	r3, sp, #40	; 0x28
 80077ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077f2:	ab09      	add	r3, sp, #36	; 0x24
 80077f4:	ec49 8b10 	vmov	d0, r8, r9
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	6022      	str	r2, [r4, #0]
 80077fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007800:	4628      	mov	r0, r5
 8007802:	f7ff fecd 	bl	80075a0 <__cvt>
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800780a:	2b47      	cmp	r3, #71	; 0x47
 800780c:	4680      	mov	r8, r0
 800780e:	d108      	bne.n	8007822 <_printf_float+0x142>
 8007810:	1cc8      	adds	r0, r1, #3
 8007812:	db02      	blt.n	800781a <_printf_float+0x13a>
 8007814:	6863      	ldr	r3, [r4, #4]
 8007816:	4299      	cmp	r1, r3
 8007818:	dd41      	ble.n	800789e <_printf_float+0x1be>
 800781a:	f1ab 0b02 	sub.w	fp, fp, #2
 800781e:	fa5f fb8b 	uxtb.w	fp, fp
 8007822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007826:	d820      	bhi.n	800786a <_printf_float+0x18a>
 8007828:	3901      	subs	r1, #1
 800782a:	465a      	mov	r2, fp
 800782c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007830:	9109      	str	r1, [sp, #36]	; 0x24
 8007832:	f7ff ff17 	bl	8007664 <__exponent>
 8007836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007838:	1813      	adds	r3, r2, r0
 800783a:	2a01      	cmp	r2, #1
 800783c:	4681      	mov	r9, r0
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	dc02      	bgt.n	8007848 <_printf_float+0x168>
 8007842:	6822      	ldr	r2, [r4, #0]
 8007844:	07d2      	lsls	r2, r2, #31
 8007846:	d501      	bpl.n	800784c <_printf_float+0x16c>
 8007848:	3301      	adds	r3, #1
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007850:	2b00      	cmp	r3, #0
 8007852:	d09c      	beq.n	800778e <_printf_float+0xae>
 8007854:	232d      	movs	r3, #45	; 0x2d
 8007856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800785a:	e798      	b.n	800778e <_printf_float+0xae>
 800785c:	9a06      	ldr	r2, [sp, #24]
 800785e:	2a47      	cmp	r2, #71	; 0x47
 8007860:	d1be      	bne.n	80077e0 <_printf_float+0x100>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1bc      	bne.n	80077e0 <_printf_float+0x100>
 8007866:	2301      	movs	r3, #1
 8007868:	e7b9      	b.n	80077de <_printf_float+0xfe>
 800786a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800786e:	d118      	bne.n	80078a2 <_printf_float+0x1c2>
 8007870:	2900      	cmp	r1, #0
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	dd0b      	ble.n	800788e <_printf_float+0x1ae>
 8007876:	6121      	str	r1, [r4, #16]
 8007878:	b913      	cbnz	r3, 8007880 <_printf_float+0x1a0>
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	07d0      	lsls	r0, r2, #31
 800787e:	d502      	bpl.n	8007886 <_printf_float+0x1a6>
 8007880:	3301      	adds	r3, #1
 8007882:	440b      	add	r3, r1
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	65a1      	str	r1, [r4, #88]	; 0x58
 8007888:	f04f 0900 	mov.w	r9, #0
 800788c:	e7de      	b.n	800784c <_printf_float+0x16c>
 800788e:	b913      	cbnz	r3, 8007896 <_printf_float+0x1b6>
 8007890:	6822      	ldr	r2, [r4, #0]
 8007892:	07d2      	lsls	r2, r2, #31
 8007894:	d501      	bpl.n	800789a <_printf_float+0x1ba>
 8007896:	3302      	adds	r3, #2
 8007898:	e7f4      	b.n	8007884 <_printf_float+0x1a4>
 800789a:	2301      	movs	r3, #1
 800789c:	e7f2      	b.n	8007884 <_printf_float+0x1a4>
 800789e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80078a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a4:	4299      	cmp	r1, r3
 80078a6:	db05      	blt.n	80078b4 <_printf_float+0x1d4>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	6121      	str	r1, [r4, #16]
 80078ac:	07d8      	lsls	r0, r3, #31
 80078ae:	d5ea      	bpl.n	8007886 <_printf_float+0x1a6>
 80078b0:	1c4b      	adds	r3, r1, #1
 80078b2:	e7e7      	b.n	8007884 <_printf_float+0x1a4>
 80078b4:	2900      	cmp	r1, #0
 80078b6:	bfd4      	ite	le
 80078b8:	f1c1 0202 	rsble	r2, r1, #2
 80078bc:	2201      	movgt	r2, #1
 80078be:	4413      	add	r3, r2
 80078c0:	e7e0      	b.n	8007884 <_printf_float+0x1a4>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	055a      	lsls	r2, r3, #21
 80078c6:	d407      	bmi.n	80078d8 <_printf_float+0x1f8>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	4642      	mov	r2, r8
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	d12c      	bne.n	8007930 <_printf_float+0x250>
 80078d6:	e764      	b.n	80077a2 <_printf_float+0xc2>
 80078d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078dc:	f240 80e0 	bls.w	8007aa0 <_printf_float+0x3c0>
 80078e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078e4:	2200      	movs	r2, #0
 80078e6:	2300      	movs	r3, #0
 80078e8:	f7f9 f8fe 	bl	8000ae8 <__aeabi_dcmpeq>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d034      	beq.n	800795a <_printf_float+0x27a>
 80078f0:	4a37      	ldr	r2, [pc, #220]	; (80079d0 <_printf_float+0x2f0>)
 80078f2:	2301      	movs	r3, #1
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af51 	beq.w	80077a2 <_printf_float+0xc2>
 8007900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007904:	429a      	cmp	r2, r3
 8007906:	db02      	blt.n	800790e <_printf_float+0x22e>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	07d8      	lsls	r0, r3, #31
 800790c:	d510      	bpl.n	8007930 <_printf_float+0x250>
 800790e:	ee18 3a10 	vmov	r3, s16
 8007912:	4652      	mov	r2, sl
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f af41 	beq.w	80077a2 <_printf_float+0xc2>
 8007920:	f04f 0800 	mov.w	r8, #0
 8007924:	f104 091a 	add.w	r9, r4, #26
 8007928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792a:	3b01      	subs	r3, #1
 800792c:	4543      	cmp	r3, r8
 800792e:	dc09      	bgt.n	8007944 <_printf_float+0x264>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	079b      	lsls	r3, r3, #30
 8007934:	f100 8105 	bmi.w	8007b42 <_printf_float+0x462>
 8007938:	68e0      	ldr	r0, [r4, #12]
 800793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793c:	4298      	cmp	r0, r3
 800793e:	bfb8      	it	lt
 8007940:	4618      	movlt	r0, r3
 8007942:	e730      	b.n	80077a6 <_printf_float+0xc6>
 8007944:	2301      	movs	r3, #1
 8007946:	464a      	mov	r2, r9
 8007948:	4631      	mov	r1, r6
 800794a:	4628      	mov	r0, r5
 800794c:	47b8      	blx	r7
 800794e:	3001      	adds	r0, #1
 8007950:	f43f af27 	beq.w	80077a2 <_printf_float+0xc2>
 8007954:	f108 0801 	add.w	r8, r8, #1
 8007958:	e7e6      	b.n	8007928 <_printf_float+0x248>
 800795a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	dc39      	bgt.n	80079d4 <_printf_float+0x2f4>
 8007960:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <_printf_float+0x2f0>)
 8007962:	2301      	movs	r3, #1
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f af19 	beq.w	80077a2 <_printf_float+0xc2>
 8007970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007974:	4313      	orrs	r3, r2
 8007976:	d102      	bne.n	800797e <_printf_float+0x29e>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	07d9      	lsls	r1, r3, #31
 800797c:	d5d8      	bpl.n	8007930 <_printf_float+0x250>
 800797e:	ee18 3a10 	vmov	r3, s16
 8007982:	4652      	mov	r2, sl
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	f43f af09 	beq.w	80077a2 <_printf_float+0xc2>
 8007990:	f04f 0900 	mov.w	r9, #0
 8007994:	f104 0a1a 	add.w	sl, r4, #26
 8007998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799a:	425b      	negs	r3, r3
 800799c:	454b      	cmp	r3, r9
 800799e:	dc01      	bgt.n	80079a4 <_printf_float+0x2c4>
 80079a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a2:	e792      	b.n	80078ca <_printf_float+0x1ea>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4652      	mov	r2, sl
 80079a8:	4631      	mov	r1, r6
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b8      	blx	r7
 80079ae:	3001      	adds	r0, #1
 80079b0:	f43f aef7 	beq.w	80077a2 <_printf_float+0xc2>
 80079b4:	f109 0901 	add.w	r9, r9, #1
 80079b8:	e7ee      	b.n	8007998 <_printf_float+0x2b8>
 80079ba:	bf00      	nop
 80079bc:	7fefffff 	.word	0x7fefffff
 80079c0:	0800a408 	.word	0x0800a408
 80079c4:	0800a40c 	.word	0x0800a40c
 80079c8:	0800a414 	.word	0x0800a414
 80079cc:	0800a410 	.word	0x0800a410
 80079d0:	0800a418 	.word	0x0800a418
 80079d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079d8:	429a      	cmp	r2, r3
 80079da:	bfa8      	it	ge
 80079dc:	461a      	movge	r2, r3
 80079de:	2a00      	cmp	r2, #0
 80079e0:	4691      	mov	r9, r2
 80079e2:	dc37      	bgt.n	8007a54 <_printf_float+0x374>
 80079e4:	f04f 0b00 	mov.w	fp, #0
 80079e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079ec:	f104 021a 	add.w	r2, r4, #26
 80079f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	eba3 0309 	sub.w	r3, r3, r9
 80079f8:	455b      	cmp	r3, fp
 80079fa:	dc33      	bgt.n	8007a64 <_printf_float+0x384>
 80079fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a00:	429a      	cmp	r2, r3
 8007a02:	db3b      	blt.n	8007a7c <_printf_float+0x39c>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	07da      	lsls	r2, r3, #31
 8007a08:	d438      	bmi.n	8007a7c <_printf_float+0x39c>
 8007a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	eba2 0901 	sub.w	r9, r2, r1
 8007a16:	4599      	cmp	r9, r3
 8007a18:	bfa8      	it	ge
 8007a1a:	4699      	movge	r9, r3
 8007a1c:	f1b9 0f00 	cmp.w	r9, #0
 8007a20:	dc35      	bgt.n	8007a8e <_printf_float+0x3ae>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a2a:	f104 0a1a 	add.w	sl, r4, #26
 8007a2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a32:	1a9b      	subs	r3, r3, r2
 8007a34:	eba3 0309 	sub.w	r3, r3, r9
 8007a38:	4543      	cmp	r3, r8
 8007a3a:	f77f af79 	ble.w	8007930 <_printf_float+0x250>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4652      	mov	r2, sl
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b8      	blx	r7
 8007a48:	3001      	adds	r0, #1
 8007a4a:	f43f aeaa 	beq.w	80077a2 <_printf_float+0xc2>
 8007a4e:	f108 0801 	add.w	r8, r8, #1
 8007a52:	e7ec      	b.n	8007a2e <_printf_float+0x34e>
 8007a54:	4613      	mov	r3, r2
 8007a56:	4631      	mov	r1, r6
 8007a58:	4642      	mov	r2, r8
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d1c0      	bne.n	80079e4 <_printf_float+0x304>
 8007a62:	e69e      	b.n	80077a2 <_printf_float+0xc2>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	9205      	str	r2, [sp, #20]
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f43f ae97 	beq.w	80077a2 <_printf_float+0xc2>
 8007a74:	9a05      	ldr	r2, [sp, #20]
 8007a76:	f10b 0b01 	add.w	fp, fp, #1
 8007a7a:	e7b9      	b.n	80079f0 <_printf_float+0x310>
 8007a7c:	ee18 3a10 	vmov	r3, s16
 8007a80:	4652      	mov	r2, sl
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d1be      	bne.n	8007a0a <_printf_float+0x32a>
 8007a8c:	e689      	b.n	80077a2 <_printf_float+0xc2>
 8007a8e:	9a05      	ldr	r2, [sp, #20]
 8007a90:	464b      	mov	r3, r9
 8007a92:	4442      	add	r2, r8
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d1c1      	bne.n	8007a22 <_printf_float+0x342>
 8007a9e:	e680      	b.n	80077a2 <_printf_float+0xc2>
 8007aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa2:	2a01      	cmp	r2, #1
 8007aa4:	dc01      	bgt.n	8007aaa <_printf_float+0x3ca>
 8007aa6:	07db      	lsls	r3, r3, #31
 8007aa8:	d538      	bpl.n	8007b1c <_printf_float+0x43c>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4642      	mov	r2, r8
 8007aae:	4631      	mov	r1, r6
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b8      	blx	r7
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	f43f ae74 	beq.w	80077a2 <_printf_float+0xc2>
 8007aba:	ee18 3a10 	vmov	r3, s16
 8007abe:	4652      	mov	r2, sl
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	f43f ae6b 	beq.w	80077a2 <_printf_float+0xc2>
 8007acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f7f9 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ad8:	b9d8      	cbnz	r0, 8007b12 <_printf_float+0x432>
 8007ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007adc:	f108 0201 	add.w	r2, r8, #1
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d10e      	bne.n	8007b0a <_printf_float+0x42a>
 8007aec:	e659      	b.n	80077a2 <_printf_float+0xc2>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4652      	mov	r2, sl
 8007af2:	4631      	mov	r1, r6
 8007af4:	4628      	mov	r0, r5
 8007af6:	47b8      	blx	r7
 8007af8:	3001      	adds	r0, #1
 8007afa:	f43f ae52 	beq.w	80077a2 <_printf_float+0xc2>
 8007afe:	f108 0801 	add.w	r8, r8, #1
 8007b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b04:	3b01      	subs	r3, #1
 8007b06:	4543      	cmp	r3, r8
 8007b08:	dcf1      	bgt.n	8007aee <_printf_float+0x40e>
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b10:	e6dc      	b.n	80078cc <_printf_float+0x1ec>
 8007b12:	f04f 0800 	mov.w	r8, #0
 8007b16:	f104 0a1a 	add.w	sl, r4, #26
 8007b1a:	e7f2      	b.n	8007b02 <_printf_float+0x422>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4642      	mov	r2, r8
 8007b20:	e7df      	b.n	8007ae2 <_printf_float+0x402>
 8007b22:	2301      	movs	r3, #1
 8007b24:	464a      	mov	r2, r9
 8007b26:	4631      	mov	r1, r6
 8007b28:	4628      	mov	r0, r5
 8007b2a:	47b8      	blx	r7
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	f43f ae38 	beq.w	80077a2 <_printf_float+0xc2>
 8007b32:	f108 0801 	add.w	r8, r8, #1
 8007b36:	68e3      	ldr	r3, [r4, #12]
 8007b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b3a:	1a5b      	subs	r3, r3, r1
 8007b3c:	4543      	cmp	r3, r8
 8007b3e:	dcf0      	bgt.n	8007b22 <_printf_float+0x442>
 8007b40:	e6fa      	b.n	8007938 <_printf_float+0x258>
 8007b42:	f04f 0800 	mov.w	r8, #0
 8007b46:	f104 0919 	add.w	r9, r4, #25
 8007b4a:	e7f4      	b.n	8007b36 <_printf_float+0x456>

08007b4c <_printf_common>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	4616      	mov	r6, r2
 8007b52:	4699      	mov	r9, r3
 8007b54:	688a      	ldr	r2, [r1, #8]
 8007b56:	690b      	ldr	r3, [r1, #16]
 8007b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bfb8      	it	lt
 8007b60:	4613      	movlt	r3, r2
 8007b62:	6033      	str	r3, [r6, #0]
 8007b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b68:	4607      	mov	r7, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b10a      	cbz	r2, 8007b72 <_printf_common+0x26>
 8007b6e:	3301      	adds	r3, #1
 8007b70:	6033      	str	r3, [r6, #0]
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	0699      	lsls	r1, r3, #26
 8007b76:	bf42      	ittt	mi
 8007b78:	6833      	ldrmi	r3, [r6, #0]
 8007b7a:	3302      	addmi	r3, #2
 8007b7c:	6033      	strmi	r3, [r6, #0]
 8007b7e:	6825      	ldr	r5, [r4, #0]
 8007b80:	f015 0506 	ands.w	r5, r5, #6
 8007b84:	d106      	bne.n	8007b94 <_printf_common+0x48>
 8007b86:	f104 0a19 	add.w	sl, r4, #25
 8007b8a:	68e3      	ldr	r3, [r4, #12]
 8007b8c:	6832      	ldr	r2, [r6, #0]
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	42ab      	cmp	r3, r5
 8007b92:	dc26      	bgt.n	8007be2 <_printf_common+0x96>
 8007b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b98:	1e13      	subs	r3, r2, #0
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	bf18      	it	ne
 8007b9e:	2301      	movne	r3, #1
 8007ba0:	0692      	lsls	r2, r2, #26
 8007ba2:	d42b      	bmi.n	8007bfc <_printf_common+0xb0>
 8007ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ba8:	4649      	mov	r1, r9
 8007baa:	4638      	mov	r0, r7
 8007bac:	47c0      	blx	r8
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d01e      	beq.n	8007bf0 <_printf_common+0xa4>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	68e5      	ldr	r5, [r4, #12]
 8007bb6:	6832      	ldr	r2, [r6, #0]
 8007bb8:	f003 0306 	and.w	r3, r3, #6
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	bf08      	it	eq
 8007bc0:	1aad      	subeq	r5, r5, r2
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	bf0c      	ite	eq
 8007bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bcc:	2500      	movne	r5, #0
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	bfc4      	itt	gt
 8007bd2:	1a9b      	subgt	r3, r3, r2
 8007bd4:	18ed      	addgt	r5, r5, r3
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	341a      	adds	r4, #26
 8007bda:	42b5      	cmp	r5, r6
 8007bdc:	d11a      	bne.n	8007c14 <_printf_common+0xc8>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e008      	b.n	8007bf4 <_printf_common+0xa8>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4652      	mov	r2, sl
 8007be6:	4649      	mov	r1, r9
 8007be8:	4638      	mov	r0, r7
 8007bea:	47c0      	blx	r8
 8007bec:	3001      	adds	r0, #1
 8007bee:	d103      	bne.n	8007bf8 <_printf_common+0xac>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	e7c6      	b.n	8007b8a <_printf_common+0x3e>
 8007bfc:	18e1      	adds	r1, r4, r3
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	2030      	movs	r0, #48	; 0x30
 8007c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c06:	4422      	add	r2, r4
 8007c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c10:	3302      	adds	r3, #2
 8007c12:	e7c7      	b.n	8007ba4 <_printf_common+0x58>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4622      	mov	r2, r4
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	47c0      	blx	r8
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d0e6      	beq.n	8007bf0 <_printf_common+0xa4>
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7d9      	b.n	8007bda <_printf_common+0x8e>
	...

08007c28 <_printf_i>:
 8007c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	4691      	mov	r9, r2
 8007c30:	7e27      	ldrb	r7, [r4, #24]
 8007c32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c34:	2f78      	cmp	r7, #120	; 0x78
 8007c36:	4680      	mov	r8, r0
 8007c38:	469a      	mov	sl, r3
 8007c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c3e:	d807      	bhi.n	8007c50 <_printf_i+0x28>
 8007c40:	2f62      	cmp	r7, #98	; 0x62
 8007c42:	d80a      	bhi.n	8007c5a <_printf_i+0x32>
 8007c44:	2f00      	cmp	r7, #0
 8007c46:	f000 80d8 	beq.w	8007dfa <_printf_i+0x1d2>
 8007c4a:	2f58      	cmp	r7, #88	; 0x58
 8007c4c:	f000 80a3 	beq.w	8007d96 <_printf_i+0x16e>
 8007c50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c58:	e03a      	b.n	8007cd0 <_printf_i+0xa8>
 8007c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c5e:	2b15      	cmp	r3, #21
 8007c60:	d8f6      	bhi.n	8007c50 <_printf_i+0x28>
 8007c62:	a001      	add	r0, pc, #4	; (adr r0, 8007c68 <_printf_i+0x40>)
 8007c64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c68:	08007cc1 	.word	0x08007cc1
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007c51 	.word	0x08007c51
 8007c74:	08007c51 	.word	0x08007c51
 8007c78:	08007c51 	.word	0x08007c51
 8007c7c:	08007c51 	.word	0x08007c51
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007c51 	.word	0x08007c51
 8007c88:	08007c51 	.word	0x08007c51
 8007c8c:	08007c51 	.word	0x08007c51
 8007c90:	08007c51 	.word	0x08007c51
 8007c94:	08007de1 	.word	0x08007de1
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007dc3 	.word	0x08007dc3
 8007ca0:	08007c51 	.word	0x08007c51
 8007ca4:	08007c51 	.word	0x08007c51
 8007ca8:	08007e03 	.word	0x08007e03
 8007cac:	08007c51 	.word	0x08007c51
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007c51 	.word	0x08007c51
 8007cb8:	08007c51 	.word	0x08007c51
 8007cbc:	08007dcb 	.word	0x08007dcb
 8007cc0:	680b      	ldr	r3, [r1, #0]
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	600a      	str	r2, [r1, #0]
 8007cc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0a3      	b.n	8007e1c <_printf_i+0x1f4>
 8007cd4:	6825      	ldr	r5, [r4, #0]
 8007cd6:	6808      	ldr	r0, [r1, #0]
 8007cd8:	062e      	lsls	r6, r5, #24
 8007cda:	f100 0304 	add.w	r3, r0, #4
 8007cde:	d50a      	bpl.n	8007cf6 <_printf_i+0xce>
 8007ce0:	6805      	ldr	r5, [r0, #0]
 8007ce2:	600b      	str	r3, [r1, #0]
 8007ce4:	2d00      	cmp	r5, #0
 8007ce6:	da03      	bge.n	8007cf0 <_printf_i+0xc8>
 8007ce8:	232d      	movs	r3, #45	; 0x2d
 8007cea:	426d      	negs	r5, r5
 8007cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf0:	485e      	ldr	r0, [pc, #376]	; (8007e6c <_printf_i+0x244>)
 8007cf2:	230a      	movs	r3, #10
 8007cf4:	e019      	b.n	8007d2a <_printf_i+0x102>
 8007cf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007cfa:	6805      	ldr	r5, [r0, #0]
 8007cfc:	600b      	str	r3, [r1, #0]
 8007cfe:	bf18      	it	ne
 8007d00:	b22d      	sxthne	r5, r5
 8007d02:	e7ef      	b.n	8007ce4 <_printf_i+0xbc>
 8007d04:	680b      	ldr	r3, [r1, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	1d18      	adds	r0, r3, #4
 8007d0a:	6008      	str	r0, [r1, #0]
 8007d0c:	0628      	lsls	r0, r5, #24
 8007d0e:	d501      	bpl.n	8007d14 <_printf_i+0xec>
 8007d10:	681d      	ldr	r5, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <_printf_i+0xf2>
 8007d14:	0669      	lsls	r1, r5, #25
 8007d16:	d5fb      	bpl.n	8007d10 <_printf_i+0xe8>
 8007d18:	881d      	ldrh	r5, [r3, #0]
 8007d1a:	4854      	ldr	r0, [pc, #336]	; (8007e6c <_printf_i+0x244>)
 8007d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d1e:	bf0c      	ite	eq
 8007d20:	2308      	moveq	r3, #8
 8007d22:	230a      	movne	r3, #10
 8007d24:	2100      	movs	r1, #0
 8007d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d2a:	6866      	ldr	r6, [r4, #4]
 8007d2c:	60a6      	str	r6, [r4, #8]
 8007d2e:	2e00      	cmp	r6, #0
 8007d30:	bfa2      	ittt	ge
 8007d32:	6821      	ldrge	r1, [r4, #0]
 8007d34:	f021 0104 	bicge.w	r1, r1, #4
 8007d38:	6021      	strge	r1, [r4, #0]
 8007d3a:	b90d      	cbnz	r5, 8007d40 <_printf_i+0x118>
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	d04d      	beq.n	8007ddc <_printf_i+0x1b4>
 8007d40:	4616      	mov	r6, r2
 8007d42:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d46:	fb03 5711 	mls	r7, r3, r1, r5
 8007d4a:	5dc7      	ldrb	r7, [r0, r7]
 8007d4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d50:	462f      	mov	r7, r5
 8007d52:	42bb      	cmp	r3, r7
 8007d54:	460d      	mov	r5, r1
 8007d56:	d9f4      	bls.n	8007d42 <_printf_i+0x11a>
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d10b      	bne.n	8007d74 <_printf_i+0x14c>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	07df      	lsls	r7, r3, #31
 8007d60:	d508      	bpl.n	8007d74 <_printf_i+0x14c>
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	6861      	ldr	r1, [r4, #4]
 8007d66:	4299      	cmp	r1, r3
 8007d68:	bfde      	ittt	le
 8007d6a:	2330      	movle	r3, #48	; 0x30
 8007d6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d74:	1b92      	subs	r2, r2, r6
 8007d76:	6122      	str	r2, [r4, #16]
 8007d78:	f8cd a000 	str.w	sl, [sp]
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	aa03      	add	r2, sp, #12
 8007d80:	4621      	mov	r1, r4
 8007d82:	4640      	mov	r0, r8
 8007d84:	f7ff fee2 	bl	8007b4c <_printf_common>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d14c      	bne.n	8007e26 <_printf_i+0x1fe>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	b004      	add	sp, #16
 8007d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d96:	4835      	ldr	r0, [pc, #212]	; (8007e6c <_printf_i+0x244>)
 8007d98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	680e      	ldr	r6, [r1, #0]
 8007da0:	061f      	lsls	r7, r3, #24
 8007da2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007da6:	600e      	str	r6, [r1, #0]
 8007da8:	d514      	bpl.n	8007dd4 <_printf_i+0x1ac>
 8007daa:	07d9      	lsls	r1, r3, #31
 8007dac:	bf44      	itt	mi
 8007dae:	f043 0320 	orrmi.w	r3, r3, #32
 8007db2:	6023      	strmi	r3, [r4, #0]
 8007db4:	b91d      	cbnz	r5, 8007dbe <_printf_i+0x196>
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	f023 0320 	bic.w	r3, r3, #32
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	2310      	movs	r3, #16
 8007dc0:	e7b0      	b.n	8007d24 <_printf_i+0xfc>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	f043 0320 	orr.w	r3, r3, #32
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	2378      	movs	r3, #120	; 0x78
 8007dcc:	4828      	ldr	r0, [pc, #160]	; (8007e70 <_printf_i+0x248>)
 8007dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dd2:	e7e3      	b.n	8007d9c <_printf_i+0x174>
 8007dd4:	065e      	lsls	r6, r3, #25
 8007dd6:	bf48      	it	mi
 8007dd8:	b2ad      	uxthmi	r5, r5
 8007dda:	e7e6      	b.n	8007daa <_printf_i+0x182>
 8007ddc:	4616      	mov	r6, r2
 8007dde:	e7bb      	b.n	8007d58 <_printf_i+0x130>
 8007de0:	680b      	ldr	r3, [r1, #0]
 8007de2:	6826      	ldr	r6, [r4, #0]
 8007de4:	6960      	ldr	r0, [r4, #20]
 8007de6:	1d1d      	adds	r5, r3, #4
 8007de8:	600d      	str	r5, [r1, #0]
 8007dea:	0635      	lsls	r5, r6, #24
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	d501      	bpl.n	8007df4 <_printf_i+0x1cc>
 8007df0:	6018      	str	r0, [r3, #0]
 8007df2:	e002      	b.n	8007dfa <_printf_i+0x1d2>
 8007df4:	0671      	lsls	r1, r6, #25
 8007df6:	d5fb      	bpl.n	8007df0 <_printf_i+0x1c8>
 8007df8:	8018      	strh	r0, [r3, #0]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6123      	str	r3, [r4, #16]
 8007dfe:	4616      	mov	r6, r2
 8007e00:	e7ba      	b.n	8007d78 <_printf_i+0x150>
 8007e02:	680b      	ldr	r3, [r1, #0]
 8007e04:	1d1a      	adds	r2, r3, #4
 8007e06:	600a      	str	r2, [r1, #0]
 8007e08:	681e      	ldr	r6, [r3, #0]
 8007e0a:	6862      	ldr	r2, [r4, #4]
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7f8 f9f6 	bl	8000200 <memchr>
 8007e14:	b108      	cbz	r0, 8007e1a <_printf_i+0x1f2>
 8007e16:	1b80      	subs	r0, r0, r6
 8007e18:	6060      	str	r0, [r4, #4]
 8007e1a:	6863      	ldr	r3, [r4, #4]
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e24:	e7a8      	b.n	8007d78 <_printf_i+0x150>
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	4632      	mov	r2, r6
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	47d0      	blx	sl
 8007e30:	3001      	adds	r0, #1
 8007e32:	d0ab      	beq.n	8007d8c <_printf_i+0x164>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	079b      	lsls	r3, r3, #30
 8007e38:	d413      	bmi.n	8007e62 <_printf_i+0x23a>
 8007e3a:	68e0      	ldr	r0, [r4, #12]
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	4298      	cmp	r0, r3
 8007e40:	bfb8      	it	lt
 8007e42:	4618      	movlt	r0, r3
 8007e44:	e7a4      	b.n	8007d90 <_printf_i+0x168>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	47d0      	blx	sl
 8007e50:	3001      	adds	r0, #1
 8007e52:	d09b      	beq.n	8007d8c <_printf_i+0x164>
 8007e54:	3501      	adds	r5, #1
 8007e56:	68e3      	ldr	r3, [r4, #12]
 8007e58:	9903      	ldr	r1, [sp, #12]
 8007e5a:	1a5b      	subs	r3, r3, r1
 8007e5c:	42ab      	cmp	r3, r5
 8007e5e:	dcf2      	bgt.n	8007e46 <_printf_i+0x21e>
 8007e60:	e7eb      	b.n	8007e3a <_printf_i+0x212>
 8007e62:	2500      	movs	r5, #0
 8007e64:	f104 0619 	add.w	r6, r4, #25
 8007e68:	e7f5      	b.n	8007e56 <_printf_i+0x22e>
 8007e6a:	bf00      	nop
 8007e6c:	0800a41a 	.word	0x0800a41a
 8007e70:	0800a42b 	.word	0x0800a42b

08007e74 <siprintf>:
 8007e74:	b40e      	push	{r1, r2, r3}
 8007e76:	b500      	push	{lr}
 8007e78:	b09c      	sub	sp, #112	; 0x70
 8007e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	9006      	str	r0, [sp, #24]
 8007e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e84:	4809      	ldr	r0, [pc, #36]	; (8007eac <siprintf+0x38>)
 8007e86:	9107      	str	r1, [sp, #28]
 8007e88:	9104      	str	r1, [sp, #16]
 8007e8a:	4909      	ldr	r1, [pc, #36]	; (8007eb0 <siprintf+0x3c>)
 8007e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e90:	9105      	str	r1, [sp, #20]
 8007e92:	6800      	ldr	r0, [r0, #0]
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	a902      	add	r1, sp, #8
 8007e98:	f001 fb34 	bl	8009504 <_svfiprintf_r>
 8007e9c:	9b02      	ldr	r3, [sp, #8]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	b01c      	add	sp, #112	; 0x70
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	b003      	add	sp, #12
 8007eaa:	4770      	bx	lr
 8007eac:	2000000c 	.word	0x2000000c
 8007eb0:	ffff0208 	.word	0xffff0208

08007eb4 <quorem>:
 8007eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	6903      	ldr	r3, [r0, #16]
 8007eba:	690c      	ldr	r4, [r1, #16]
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	f2c0 8081 	blt.w	8007fc6 <quorem+0x112>
 8007ec4:	3c01      	subs	r4, #1
 8007ec6:	f101 0814 	add.w	r8, r1, #20
 8007eca:	f100 0514 	add.w	r5, r0, #20
 8007ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007edc:	3301      	adds	r3, #1
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ee4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007eec:	d331      	bcc.n	8007f52 <quorem+0x9e>
 8007eee:	f04f 0e00 	mov.w	lr, #0
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	46ac      	mov	ip, r5
 8007ef6:	46f2      	mov	sl, lr
 8007ef8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007efc:	b293      	uxth	r3, r2
 8007efe:	fb06 e303 	mla	r3, r6, r3, lr
 8007f02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	ebaa 0303 	sub.w	r3, sl, r3
 8007f0c:	0c12      	lsrs	r2, r2, #16
 8007f0e:	f8dc a000 	ldr.w	sl, [ip]
 8007f12:	fb06 e202 	mla	r2, r6, r2, lr
 8007f16:	fa13 f38a 	uxtah	r3, r3, sl
 8007f1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f1e:	fa1f fa82 	uxth.w	sl, r2
 8007f22:	f8dc 2000 	ldr.w	r2, [ip]
 8007f26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007f2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f34:	4581      	cmp	r9, r0
 8007f36:	f84c 3b04 	str.w	r3, [ip], #4
 8007f3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f3e:	d2db      	bcs.n	8007ef8 <quorem+0x44>
 8007f40:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f44:	b92b      	cbnz	r3, 8007f52 <quorem+0x9e>
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	429d      	cmp	r5, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	d32e      	bcc.n	8007fae <quorem+0xfa>
 8007f50:	613c      	str	r4, [r7, #16]
 8007f52:	4638      	mov	r0, r7
 8007f54:	f001 f8c0 	bl	80090d8 <__mcmp>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	db24      	blt.n	8007fa6 <quorem+0xf2>
 8007f5c:	3601      	adds	r6, #1
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f04f 0c00 	mov.w	ip, #0
 8007f64:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f68:	f8d0 e000 	ldr.w	lr, [r0]
 8007f6c:	b293      	uxth	r3, r2
 8007f6e:	ebac 0303 	sub.w	r3, ip, r3
 8007f72:	0c12      	lsrs	r2, r2, #16
 8007f74:	fa13 f38e 	uxtah	r3, r3, lr
 8007f78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f86:	45c1      	cmp	r9, r8
 8007f88:	f840 3b04 	str.w	r3, [r0], #4
 8007f8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f90:	d2e8      	bcs.n	8007f64 <quorem+0xb0>
 8007f92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f9a:	b922      	cbnz	r2, 8007fa6 <quorem+0xf2>
 8007f9c:	3b04      	subs	r3, #4
 8007f9e:	429d      	cmp	r5, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	d30a      	bcc.n	8007fba <quorem+0x106>
 8007fa4:	613c      	str	r4, [r7, #16]
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	b003      	add	sp, #12
 8007faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	3b04      	subs	r3, #4
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	d1cc      	bne.n	8007f50 <quorem+0x9c>
 8007fb6:	3c01      	subs	r4, #1
 8007fb8:	e7c7      	b.n	8007f4a <quorem+0x96>
 8007fba:	6812      	ldr	r2, [r2, #0]
 8007fbc:	3b04      	subs	r3, #4
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	d1f0      	bne.n	8007fa4 <quorem+0xf0>
 8007fc2:	3c01      	subs	r4, #1
 8007fc4:	e7eb      	b.n	8007f9e <quorem+0xea>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e7ee      	b.n	8007fa8 <quorem+0xf4>
 8007fca:	0000      	movs	r0, r0
 8007fcc:	0000      	movs	r0, r0
	...

08007fd0 <_dtoa_r>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	ed2d 8b02 	vpush	{d8}
 8007fd8:	ec57 6b10 	vmov	r6, r7, d0
 8007fdc:	b095      	sub	sp, #84	; 0x54
 8007fde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fe4:	9105      	str	r1, [sp, #20]
 8007fe6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007fea:	4604      	mov	r4, r0
 8007fec:	9209      	str	r2, [sp, #36]	; 0x24
 8007fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ff0:	b975      	cbnz	r5, 8008010 <_dtoa_r+0x40>
 8007ff2:	2010      	movs	r0, #16
 8007ff4:	f000 fddc 	bl	8008bb0 <malloc>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8007ffc:	b920      	cbnz	r0, 8008008 <_dtoa_r+0x38>
 8007ffe:	4bb2      	ldr	r3, [pc, #712]	; (80082c8 <_dtoa_r+0x2f8>)
 8008000:	21ea      	movs	r1, #234	; 0xea
 8008002:	48b2      	ldr	r0, [pc, #712]	; (80082cc <_dtoa_r+0x2fc>)
 8008004:	f001 fb8e 	bl	8009724 <__assert_func>
 8008008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800800c:	6005      	str	r5, [r0, #0]
 800800e:	60c5      	str	r5, [r0, #12]
 8008010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	b151      	cbz	r1, 800802c <_dtoa_r+0x5c>
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	604a      	str	r2, [r1, #4]
 800801a:	2301      	movs	r3, #1
 800801c:	4093      	lsls	r3, r2
 800801e:	608b      	str	r3, [r1, #8]
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fe1b 	bl	8008c5c <_Bfree>
 8008026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	1e3b      	subs	r3, r7, #0
 800802e:	bfb9      	ittee	lt
 8008030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008034:	9303      	strlt	r3, [sp, #12]
 8008036:	2300      	movge	r3, #0
 8008038:	f8c8 3000 	strge.w	r3, [r8]
 800803c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008040:	4ba3      	ldr	r3, [pc, #652]	; (80082d0 <_dtoa_r+0x300>)
 8008042:	bfbc      	itt	lt
 8008044:	2201      	movlt	r2, #1
 8008046:	f8c8 2000 	strlt.w	r2, [r8]
 800804a:	ea33 0309 	bics.w	r3, r3, r9
 800804e:	d11b      	bne.n	8008088 <_dtoa_r+0xb8>
 8008050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008052:	f242 730f 	movw	r3, #9999	; 0x270f
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800805c:	4333      	orrs	r3, r6
 800805e:	f000 857a 	beq.w	8008b56 <_dtoa_r+0xb86>
 8008062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008064:	b963      	cbnz	r3, 8008080 <_dtoa_r+0xb0>
 8008066:	4b9b      	ldr	r3, [pc, #620]	; (80082d4 <_dtoa_r+0x304>)
 8008068:	e024      	b.n	80080b4 <_dtoa_r+0xe4>
 800806a:	4b9b      	ldr	r3, [pc, #620]	; (80082d8 <_dtoa_r+0x308>)
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	3308      	adds	r3, #8
 8008070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	9800      	ldr	r0, [sp, #0]
 8008076:	b015      	add	sp, #84	; 0x54
 8008078:	ecbd 8b02 	vpop	{d8}
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008080:	4b94      	ldr	r3, [pc, #592]	; (80082d4 <_dtoa_r+0x304>)
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	3303      	adds	r3, #3
 8008086:	e7f3      	b.n	8008070 <_dtoa_r+0xa0>
 8008088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	ec51 0b17 	vmov	r0, r1, d7
 8008092:	2300      	movs	r3, #0
 8008094:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008098:	f7f8 fd26 	bl	8000ae8 <__aeabi_dcmpeq>
 800809c:	4680      	mov	r8, r0
 800809e:	b158      	cbz	r0, 80080b8 <_dtoa_r+0xe8>
 80080a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080a2:	2301      	movs	r3, #1
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8551 	beq.w	8008b50 <_dtoa_r+0xb80>
 80080ae:	488b      	ldr	r0, [pc, #556]	; (80082dc <_dtoa_r+0x30c>)
 80080b0:	6018      	str	r0, [r3, #0]
 80080b2:	1e43      	subs	r3, r0, #1
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	e7dd      	b.n	8008074 <_dtoa_r+0xa4>
 80080b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80080bc:	aa12      	add	r2, sp, #72	; 0x48
 80080be:	a913      	add	r1, sp, #76	; 0x4c
 80080c0:	4620      	mov	r0, r4
 80080c2:	f001 f8ad 	bl	8009220 <__d2b>
 80080c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080ca:	4683      	mov	fp, r0
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	d07c      	beq.n	80081ca <_dtoa_r+0x1fa>
 80080d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80080d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80080de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080ea:	4b7d      	ldr	r3, [pc, #500]	; (80082e0 <_dtoa_r+0x310>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 f8d9 	bl	80002a8 <__aeabi_dsub>
 80080f6:	a36e      	add	r3, pc, #440	; (adr r3, 80082b0 <_dtoa_r+0x2e0>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f7f8 fa8c 	bl	8000618 <__aeabi_dmul>
 8008100:	a36d      	add	r3, pc, #436	; (adr r3, 80082b8 <_dtoa_r+0x2e8>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f8d1 	bl	80002ac <__adddf3>
 800810a:	4606      	mov	r6, r0
 800810c:	4628      	mov	r0, r5
 800810e:	460f      	mov	r7, r1
 8008110:	f7f8 fa18 	bl	8000544 <__aeabi_i2d>
 8008114:	a36a      	add	r3, pc, #424	; (adr r3, 80082c0 <_dtoa_r+0x2f0>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 fa7d 	bl	8000618 <__aeabi_dmul>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4630      	mov	r0, r6
 8008124:	4639      	mov	r1, r7
 8008126:	f7f8 f8c1 	bl	80002ac <__adddf3>
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	f7f8 fd23 	bl	8000b78 <__aeabi_d2iz>
 8008132:	2200      	movs	r2, #0
 8008134:	4682      	mov	sl, r0
 8008136:	2300      	movs	r3, #0
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fcde 	bl	8000afc <__aeabi_dcmplt>
 8008140:	b148      	cbz	r0, 8008156 <_dtoa_r+0x186>
 8008142:	4650      	mov	r0, sl
 8008144:	f7f8 f9fe 	bl	8000544 <__aeabi_i2d>
 8008148:	4632      	mov	r2, r6
 800814a:	463b      	mov	r3, r7
 800814c:	f7f8 fccc 	bl	8000ae8 <__aeabi_dcmpeq>
 8008150:	b908      	cbnz	r0, 8008156 <_dtoa_r+0x186>
 8008152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008156:	f1ba 0f16 	cmp.w	sl, #22
 800815a:	d854      	bhi.n	8008206 <_dtoa_r+0x236>
 800815c:	4b61      	ldr	r3, [pc, #388]	; (80082e4 <_dtoa_r+0x314>)
 800815e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800816a:	f7f8 fcc7 	bl	8000afc <__aeabi_dcmplt>
 800816e:	2800      	cmp	r0, #0
 8008170:	d04b      	beq.n	800820a <_dtoa_r+0x23a>
 8008172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008176:	2300      	movs	r3, #0
 8008178:	930e      	str	r3, [sp, #56]	; 0x38
 800817a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800817c:	1b5d      	subs	r5, r3, r5
 800817e:	1e6b      	subs	r3, r5, #1
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	bf43      	ittte	mi
 8008184:	2300      	movmi	r3, #0
 8008186:	f1c5 0801 	rsbmi	r8, r5, #1
 800818a:	9304      	strmi	r3, [sp, #16]
 800818c:	f04f 0800 	movpl.w	r8, #0
 8008190:	f1ba 0f00 	cmp.w	sl, #0
 8008194:	db3b      	blt.n	800820e <_dtoa_r+0x23e>
 8008196:	9b04      	ldr	r3, [sp, #16]
 8008198:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800819c:	4453      	add	r3, sl
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	2300      	movs	r3, #0
 80081a2:	9306      	str	r3, [sp, #24]
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	2b09      	cmp	r3, #9
 80081a8:	d869      	bhi.n	800827e <_dtoa_r+0x2ae>
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	bfc4      	itt	gt
 80081ae:	3b04      	subgt	r3, #4
 80081b0:	9305      	strgt	r3, [sp, #20]
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	f1a3 0302 	sub.w	r3, r3, #2
 80081b8:	bfcc      	ite	gt
 80081ba:	2500      	movgt	r5, #0
 80081bc:	2501      	movle	r5, #1
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d869      	bhi.n	8008296 <_dtoa_r+0x2c6>
 80081c2:	e8df f003 	tbb	[pc, r3]
 80081c6:	4e2c      	.short	0x4e2c
 80081c8:	5a4c      	.short	0x5a4c
 80081ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80081ce:	441d      	add	r5, r3
 80081d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	bfc1      	itttt	gt
 80081d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80081e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081e8:	bfda      	itte	le
 80081ea:	f1c3 0320 	rsble	r3, r3, #32
 80081ee:	fa06 f003 	lslle.w	r0, r6, r3
 80081f2:	4318      	orrgt	r0, r3
 80081f4:	f7f8 f996 	bl	8000524 <__aeabi_ui2d>
 80081f8:	2301      	movs	r3, #1
 80081fa:	4606      	mov	r6, r0
 80081fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008200:	3d01      	subs	r5, #1
 8008202:	9310      	str	r3, [sp, #64]	; 0x40
 8008204:	e771      	b.n	80080ea <_dtoa_r+0x11a>
 8008206:	2301      	movs	r3, #1
 8008208:	e7b6      	b.n	8008178 <_dtoa_r+0x1a8>
 800820a:	900e      	str	r0, [sp, #56]	; 0x38
 800820c:	e7b5      	b.n	800817a <_dtoa_r+0x1aa>
 800820e:	f1ca 0300 	rsb	r3, sl, #0
 8008212:	9306      	str	r3, [sp, #24]
 8008214:	2300      	movs	r3, #0
 8008216:	eba8 080a 	sub.w	r8, r8, sl
 800821a:	930d      	str	r3, [sp, #52]	; 0x34
 800821c:	e7c2      	b.n	80081a4 <_dtoa_r+0x1d4>
 800821e:	2300      	movs	r3, #0
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	dc39      	bgt.n	800829c <_dtoa_r+0x2cc>
 8008228:	f04f 0901 	mov.w	r9, #1
 800822c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008230:	464b      	mov	r3, r9
 8008232:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008236:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008238:	2200      	movs	r2, #0
 800823a:	6042      	str	r2, [r0, #4]
 800823c:	2204      	movs	r2, #4
 800823e:	f102 0614 	add.w	r6, r2, #20
 8008242:	429e      	cmp	r6, r3
 8008244:	6841      	ldr	r1, [r0, #4]
 8008246:	d92f      	bls.n	80082a8 <_dtoa_r+0x2d8>
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fcc7 	bl	8008bdc <_Balloc>
 800824e:	9000      	str	r0, [sp, #0]
 8008250:	2800      	cmp	r0, #0
 8008252:	d14b      	bne.n	80082ec <_dtoa_r+0x31c>
 8008254:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <_dtoa_r+0x318>)
 8008256:	4602      	mov	r2, r0
 8008258:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800825c:	e6d1      	b.n	8008002 <_dtoa_r+0x32>
 800825e:	2301      	movs	r3, #1
 8008260:	e7de      	b.n	8008220 <_dtoa_r+0x250>
 8008262:	2300      	movs	r3, #0
 8008264:	9308      	str	r3, [sp, #32]
 8008266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008268:	eb0a 0903 	add.w	r9, sl, r3
 800826c:	f109 0301 	add.w	r3, r9, #1
 8008270:	2b01      	cmp	r3, #1
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	bfb8      	it	lt
 8008276:	2301      	movlt	r3, #1
 8008278:	e7dd      	b.n	8008236 <_dtoa_r+0x266>
 800827a:	2301      	movs	r3, #1
 800827c:	e7f2      	b.n	8008264 <_dtoa_r+0x294>
 800827e:	2501      	movs	r5, #1
 8008280:	2300      	movs	r3, #0
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	9508      	str	r5, [sp, #32]
 8008286:	f04f 39ff 	mov.w	r9, #4294967295
 800828a:	2200      	movs	r2, #0
 800828c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008290:	2312      	movs	r3, #18
 8008292:	9209      	str	r2, [sp, #36]	; 0x24
 8008294:	e7cf      	b.n	8008236 <_dtoa_r+0x266>
 8008296:	2301      	movs	r3, #1
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	e7f4      	b.n	8008286 <_dtoa_r+0x2b6>
 800829c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80082a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80082a4:	464b      	mov	r3, r9
 80082a6:	e7c6      	b.n	8008236 <_dtoa_r+0x266>
 80082a8:	3101      	adds	r1, #1
 80082aa:	6041      	str	r1, [r0, #4]
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	e7c6      	b.n	800823e <_dtoa_r+0x26e>
 80082b0:	636f4361 	.word	0x636f4361
 80082b4:	3fd287a7 	.word	0x3fd287a7
 80082b8:	8b60c8b3 	.word	0x8b60c8b3
 80082bc:	3fc68a28 	.word	0x3fc68a28
 80082c0:	509f79fb 	.word	0x509f79fb
 80082c4:	3fd34413 	.word	0x3fd34413
 80082c8:	0800a449 	.word	0x0800a449
 80082cc:	0800a460 	.word	0x0800a460
 80082d0:	7ff00000 	.word	0x7ff00000
 80082d4:	0800a445 	.word	0x0800a445
 80082d8:	0800a43c 	.word	0x0800a43c
 80082dc:	0800a419 	.word	0x0800a419
 80082e0:	3ff80000 	.word	0x3ff80000
 80082e4:	0800a558 	.word	0x0800a558
 80082e8:	0800a4bf 	.word	0x0800a4bf
 80082ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ee:	9a00      	ldr	r2, [sp, #0]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	9b01      	ldr	r3, [sp, #4]
 80082f4:	2b0e      	cmp	r3, #14
 80082f6:	f200 80ad 	bhi.w	8008454 <_dtoa_r+0x484>
 80082fa:	2d00      	cmp	r5, #0
 80082fc:	f000 80aa 	beq.w	8008454 <_dtoa_r+0x484>
 8008300:	f1ba 0f00 	cmp.w	sl, #0
 8008304:	dd36      	ble.n	8008374 <_dtoa_r+0x3a4>
 8008306:	4ac3      	ldr	r2, [pc, #780]	; (8008614 <_dtoa_r+0x644>)
 8008308:	f00a 030f 	and.w	r3, sl, #15
 800830c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008310:	ed93 7b00 	vldr	d7, [r3]
 8008314:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008318:	ea4f 172a 	mov.w	r7, sl, asr #4
 800831c:	eeb0 8a47 	vmov.f32	s16, s14
 8008320:	eef0 8a67 	vmov.f32	s17, s15
 8008324:	d016      	beq.n	8008354 <_dtoa_r+0x384>
 8008326:	4bbc      	ldr	r3, [pc, #752]	; (8008618 <_dtoa_r+0x648>)
 8008328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800832c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008330:	f7f8 fa9c 	bl	800086c <__aeabi_ddiv>
 8008334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008338:	f007 070f 	and.w	r7, r7, #15
 800833c:	2503      	movs	r5, #3
 800833e:	4eb6      	ldr	r6, [pc, #728]	; (8008618 <_dtoa_r+0x648>)
 8008340:	b957      	cbnz	r7, 8008358 <_dtoa_r+0x388>
 8008342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008346:	ec53 2b18 	vmov	r2, r3, d8
 800834a:	f7f8 fa8f 	bl	800086c <__aeabi_ddiv>
 800834e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008352:	e029      	b.n	80083a8 <_dtoa_r+0x3d8>
 8008354:	2502      	movs	r5, #2
 8008356:	e7f2      	b.n	800833e <_dtoa_r+0x36e>
 8008358:	07f9      	lsls	r1, r7, #31
 800835a:	d508      	bpl.n	800836e <_dtoa_r+0x39e>
 800835c:	ec51 0b18 	vmov	r0, r1, d8
 8008360:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008364:	f7f8 f958 	bl	8000618 <__aeabi_dmul>
 8008368:	ec41 0b18 	vmov	d8, r0, r1
 800836c:	3501      	adds	r5, #1
 800836e:	107f      	asrs	r7, r7, #1
 8008370:	3608      	adds	r6, #8
 8008372:	e7e5      	b.n	8008340 <_dtoa_r+0x370>
 8008374:	f000 80a6 	beq.w	80084c4 <_dtoa_r+0x4f4>
 8008378:	f1ca 0600 	rsb	r6, sl, #0
 800837c:	4ba5      	ldr	r3, [pc, #660]	; (8008614 <_dtoa_r+0x644>)
 800837e:	4fa6      	ldr	r7, [pc, #664]	; (8008618 <_dtoa_r+0x648>)
 8008380:	f006 020f 	and.w	r2, r6, #15
 8008384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008390:	f7f8 f942 	bl	8000618 <__aeabi_dmul>
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	1136      	asrs	r6, r6, #4
 800839a:	2300      	movs	r3, #0
 800839c:	2502      	movs	r5, #2
 800839e:	2e00      	cmp	r6, #0
 80083a0:	f040 8085 	bne.w	80084ae <_dtoa_r+0x4de>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1d2      	bne.n	800834e <_dtoa_r+0x37e>
 80083a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 808c 	beq.w	80084c8 <_dtoa_r+0x4f8>
 80083b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083b4:	4b99      	ldr	r3, [pc, #612]	; (800861c <_dtoa_r+0x64c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 fb9e 	bl	8000afc <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f000 8081 	beq.w	80084c8 <_dtoa_r+0x4f8>
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d07d      	beq.n	80084c8 <_dtoa_r+0x4f8>
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	dd3c      	ble.n	800844c <_dtoa_r+0x47c>
 80083d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083d6:	9307      	str	r3, [sp, #28]
 80083d8:	2200      	movs	r2, #0
 80083da:	4b91      	ldr	r3, [pc, #580]	; (8008620 <_dtoa_r+0x650>)
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 f91a 	bl	8000618 <__aeabi_dmul>
 80083e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e8:	3501      	adds	r5, #1
 80083ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80083ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083f2:	4628      	mov	r0, r5
 80083f4:	f7f8 f8a6 	bl	8000544 <__aeabi_i2d>
 80083f8:	4632      	mov	r2, r6
 80083fa:	463b      	mov	r3, r7
 80083fc:	f7f8 f90c 	bl	8000618 <__aeabi_dmul>
 8008400:	4b88      	ldr	r3, [pc, #544]	; (8008624 <_dtoa_r+0x654>)
 8008402:	2200      	movs	r2, #0
 8008404:	f7f7 ff52 	bl	80002ac <__adddf3>
 8008408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800840c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008410:	9303      	str	r3, [sp, #12]
 8008412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008414:	2b00      	cmp	r3, #0
 8008416:	d15c      	bne.n	80084d2 <_dtoa_r+0x502>
 8008418:	4b83      	ldr	r3, [pc, #524]	; (8008628 <_dtoa_r+0x658>)
 800841a:	2200      	movs	r2, #0
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f7 ff42 	bl	80002a8 <__aeabi_dsub>
 8008424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008428:	4606      	mov	r6, r0
 800842a:	460f      	mov	r7, r1
 800842c:	f7f8 fb84 	bl	8000b38 <__aeabi_dcmpgt>
 8008430:	2800      	cmp	r0, #0
 8008432:	f040 8296 	bne.w	8008962 <_dtoa_r+0x992>
 8008436:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800843a:	4630      	mov	r0, r6
 800843c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008440:	4639      	mov	r1, r7
 8008442:	f7f8 fb5b 	bl	8000afc <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f040 8288 	bne.w	800895c <_dtoa_r+0x98c>
 800844c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008450:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008456:	2b00      	cmp	r3, #0
 8008458:	f2c0 8158 	blt.w	800870c <_dtoa_r+0x73c>
 800845c:	f1ba 0f0e 	cmp.w	sl, #14
 8008460:	f300 8154 	bgt.w	800870c <_dtoa_r+0x73c>
 8008464:	4b6b      	ldr	r3, [pc, #428]	; (8008614 <_dtoa_r+0x644>)
 8008466:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800846a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	f280 80e3 	bge.w	800863c <_dtoa_r+0x66c>
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f300 80df 	bgt.w	800863c <_dtoa_r+0x66c>
 800847e:	f040 826d 	bne.w	800895c <_dtoa_r+0x98c>
 8008482:	4b69      	ldr	r3, [pc, #420]	; (8008628 <_dtoa_r+0x658>)
 8008484:	2200      	movs	r2, #0
 8008486:	4640      	mov	r0, r8
 8008488:	4649      	mov	r1, r9
 800848a:	f7f8 f8c5 	bl	8000618 <__aeabi_dmul>
 800848e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008492:	f7f8 fb47 	bl	8000b24 <__aeabi_dcmpge>
 8008496:	9e01      	ldr	r6, [sp, #4]
 8008498:	4637      	mov	r7, r6
 800849a:	2800      	cmp	r0, #0
 800849c:	f040 8243 	bne.w	8008926 <_dtoa_r+0x956>
 80084a0:	9d00      	ldr	r5, [sp, #0]
 80084a2:	2331      	movs	r3, #49	; 0x31
 80084a4:	f805 3b01 	strb.w	r3, [r5], #1
 80084a8:	f10a 0a01 	add.w	sl, sl, #1
 80084ac:	e23f      	b.n	800892e <_dtoa_r+0x95e>
 80084ae:	07f2      	lsls	r2, r6, #31
 80084b0:	d505      	bpl.n	80084be <_dtoa_r+0x4ee>
 80084b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b6:	f7f8 f8af 	bl	8000618 <__aeabi_dmul>
 80084ba:	3501      	adds	r5, #1
 80084bc:	2301      	movs	r3, #1
 80084be:	1076      	asrs	r6, r6, #1
 80084c0:	3708      	adds	r7, #8
 80084c2:	e76c      	b.n	800839e <_dtoa_r+0x3ce>
 80084c4:	2502      	movs	r5, #2
 80084c6:	e76f      	b.n	80083a8 <_dtoa_r+0x3d8>
 80084c8:	9b01      	ldr	r3, [sp, #4]
 80084ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80084ce:	930c      	str	r3, [sp, #48]	; 0x30
 80084d0:	e78d      	b.n	80083ee <_dtoa_r+0x41e>
 80084d2:	9900      	ldr	r1, [sp, #0]
 80084d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084d8:	4b4e      	ldr	r3, [pc, #312]	; (8008614 <_dtoa_r+0x644>)
 80084da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084de:	4401      	add	r1, r0
 80084e0:	9102      	str	r1, [sp, #8]
 80084e2:	9908      	ldr	r1, [sp, #32]
 80084e4:	eeb0 8a47 	vmov.f32	s16, s14
 80084e8:	eef0 8a67 	vmov.f32	s17, s15
 80084ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d045      	beq.n	8008584 <_dtoa_r+0x5b4>
 80084f8:	494c      	ldr	r1, [pc, #304]	; (800862c <_dtoa_r+0x65c>)
 80084fa:	2000      	movs	r0, #0
 80084fc:	f7f8 f9b6 	bl	800086c <__aeabi_ddiv>
 8008500:	ec53 2b18 	vmov	r2, r3, d8
 8008504:	f7f7 fed0 	bl	80002a8 <__aeabi_dsub>
 8008508:	9d00      	ldr	r5, [sp, #0]
 800850a:	ec41 0b18 	vmov	d8, r0, r1
 800850e:	4639      	mov	r1, r7
 8008510:	4630      	mov	r0, r6
 8008512:	f7f8 fb31 	bl	8000b78 <__aeabi_d2iz>
 8008516:	900c      	str	r0, [sp, #48]	; 0x30
 8008518:	f7f8 f814 	bl	8000544 <__aeabi_i2d>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f7 fec0 	bl	80002a8 <__aeabi_dsub>
 8008528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800852a:	3330      	adds	r3, #48	; 0x30
 800852c:	f805 3b01 	strb.w	r3, [r5], #1
 8008530:	ec53 2b18 	vmov	r2, r3, d8
 8008534:	4606      	mov	r6, r0
 8008536:	460f      	mov	r7, r1
 8008538:	f7f8 fae0 	bl	8000afc <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	d165      	bne.n	800860c <_dtoa_r+0x63c>
 8008540:	4632      	mov	r2, r6
 8008542:	463b      	mov	r3, r7
 8008544:	4935      	ldr	r1, [pc, #212]	; (800861c <_dtoa_r+0x64c>)
 8008546:	2000      	movs	r0, #0
 8008548:	f7f7 feae 	bl	80002a8 <__aeabi_dsub>
 800854c:	ec53 2b18 	vmov	r2, r3, d8
 8008550:	f7f8 fad4 	bl	8000afc <__aeabi_dcmplt>
 8008554:	2800      	cmp	r0, #0
 8008556:	f040 80b9 	bne.w	80086cc <_dtoa_r+0x6fc>
 800855a:	9b02      	ldr	r3, [sp, #8]
 800855c:	429d      	cmp	r5, r3
 800855e:	f43f af75 	beq.w	800844c <_dtoa_r+0x47c>
 8008562:	4b2f      	ldr	r3, [pc, #188]	; (8008620 <_dtoa_r+0x650>)
 8008564:	ec51 0b18 	vmov	r0, r1, d8
 8008568:	2200      	movs	r2, #0
 800856a:	f7f8 f855 	bl	8000618 <__aeabi_dmul>
 800856e:	4b2c      	ldr	r3, [pc, #176]	; (8008620 <_dtoa_r+0x650>)
 8008570:	ec41 0b18 	vmov	d8, r0, r1
 8008574:	2200      	movs	r2, #0
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f8 f84d 	bl	8000618 <__aeabi_dmul>
 800857e:	4606      	mov	r6, r0
 8008580:	460f      	mov	r7, r1
 8008582:	e7c4      	b.n	800850e <_dtoa_r+0x53e>
 8008584:	ec51 0b17 	vmov	r0, r1, d7
 8008588:	f7f8 f846 	bl	8000618 <__aeabi_dmul>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	9d00      	ldr	r5, [sp, #0]
 8008590:	930c      	str	r3, [sp, #48]	; 0x30
 8008592:	ec41 0b18 	vmov	d8, r0, r1
 8008596:	4639      	mov	r1, r7
 8008598:	4630      	mov	r0, r6
 800859a:	f7f8 faed 	bl	8000b78 <__aeabi_d2iz>
 800859e:	9011      	str	r0, [sp, #68]	; 0x44
 80085a0:	f7f7 ffd0 	bl	8000544 <__aeabi_i2d>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f7 fe7c 	bl	80002a8 <__aeabi_dsub>
 80085b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b2:	3330      	adds	r3, #48	; 0x30
 80085b4:	f805 3b01 	strb.w	r3, [r5], #1
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	429d      	cmp	r5, r3
 80085bc:	4606      	mov	r6, r0
 80085be:	460f      	mov	r7, r1
 80085c0:	f04f 0200 	mov.w	r2, #0
 80085c4:	d134      	bne.n	8008630 <_dtoa_r+0x660>
 80085c6:	4b19      	ldr	r3, [pc, #100]	; (800862c <_dtoa_r+0x65c>)
 80085c8:	ec51 0b18 	vmov	r0, r1, d8
 80085cc:	f7f7 fe6e 	bl	80002ac <__adddf3>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f7f8 faae 	bl	8000b38 <__aeabi_dcmpgt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d175      	bne.n	80086cc <_dtoa_r+0x6fc>
 80085e0:	ec53 2b18 	vmov	r2, r3, d8
 80085e4:	4911      	ldr	r1, [pc, #68]	; (800862c <_dtoa_r+0x65c>)
 80085e6:	2000      	movs	r0, #0
 80085e8:	f7f7 fe5e 	bl	80002a8 <__aeabi_dsub>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f8 fa82 	bl	8000afc <__aeabi_dcmplt>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f43f af27 	beq.w	800844c <_dtoa_r+0x47c>
 80085fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008600:	1e6b      	subs	r3, r5, #1
 8008602:	930c      	str	r3, [sp, #48]	; 0x30
 8008604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008608:	2b30      	cmp	r3, #48	; 0x30
 800860a:	d0f8      	beq.n	80085fe <_dtoa_r+0x62e>
 800860c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008610:	e04a      	b.n	80086a8 <_dtoa_r+0x6d8>
 8008612:	bf00      	nop
 8008614:	0800a558 	.word	0x0800a558
 8008618:	0800a530 	.word	0x0800a530
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	40240000 	.word	0x40240000
 8008624:	401c0000 	.word	0x401c0000
 8008628:	40140000 	.word	0x40140000
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	4baf      	ldr	r3, [pc, #700]	; (80088f0 <_dtoa_r+0x920>)
 8008632:	f7f7 fff1 	bl	8000618 <__aeabi_dmul>
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	e7ac      	b.n	8008596 <_dtoa_r+0x5c6>
 800863c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008640:	9d00      	ldr	r5, [sp, #0]
 8008642:	4642      	mov	r2, r8
 8008644:	464b      	mov	r3, r9
 8008646:	4630      	mov	r0, r6
 8008648:	4639      	mov	r1, r7
 800864a:	f7f8 f90f 	bl	800086c <__aeabi_ddiv>
 800864e:	f7f8 fa93 	bl	8000b78 <__aeabi_d2iz>
 8008652:	9002      	str	r0, [sp, #8]
 8008654:	f7f7 ff76 	bl	8000544 <__aeabi_i2d>
 8008658:	4642      	mov	r2, r8
 800865a:	464b      	mov	r3, r9
 800865c:	f7f7 ffdc 	bl	8000618 <__aeabi_dmul>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4630      	mov	r0, r6
 8008666:	4639      	mov	r1, r7
 8008668:	f7f7 fe1e 	bl	80002a8 <__aeabi_dsub>
 800866c:	9e02      	ldr	r6, [sp, #8]
 800866e:	9f01      	ldr	r7, [sp, #4]
 8008670:	3630      	adds	r6, #48	; 0x30
 8008672:	f805 6b01 	strb.w	r6, [r5], #1
 8008676:	9e00      	ldr	r6, [sp, #0]
 8008678:	1bae      	subs	r6, r5, r6
 800867a:	42b7      	cmp	r7, r6
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	d137      	bne.n	80086f2 <_dtoa_r+0x722>
 8008682:	f7f7 fe13 	bl	80002ac <__adddf3>
 8008686:	4642      	mov	r2, r8
 8008688:	464b      	mov	r3, r9
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	f7f8 fa53 	bl	8000b38 <__aeabi_dcmpgt>
 8008692:	b9c8      	cbnz	r0, 80086c8 <_dtoa_r+0x6f8>
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	f7f8 fa24 	bl	8000ae8 <__aeabi_dcmpeq>
 80086a0:	b110      	cbz	r0, 80086a8 <_dtoa_r+0x6d8>
 80086a2:	9b02      	ldr	r3, [sp, #8]
 80086a4:	07d9      	lsls	r1, r3, #31
 80086a6:	d40f      	bmi.n	80086c8 <_dtoa_r+0x6f8>
 80086a8:	4620      	mov	r0, r4
 80086aa:	4659      	mov	r1, fp
 80086ac:	f000 fad6 	bl	8008c5c <_Bfree>
 80086b0:	2300      	movs	r3, #0
 80086b2:	702b      	strb	r3, [r5, #0]
 80086b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086b6:	f10a 0001 	add.w	r0, sl, #1
 80086ba:	6018      	str	r0, [r3, #0]
 80086bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f43f acd8 	beq.w	8008074 <_dtoa_r+0xa4>
 80086c4:	601d      	str	r5, [r3, #0]
 80086c6:	e4d5      	b.n	8008074 <_dtoa_r+0xa4>
 80086c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80086cc:	462b      	mov	r3, r5
 80086ce:	461d      	mov	r5, r3
 80086d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086d4:	2a39      	cmp	r2, #57	; 0x39
 80086d6:	d108      	bne.n	80086ea <_dtoa_r+0x71a>
 80086d8:	9a00      	ldr	r2, [sp, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d1f7      	bne.n	80086ce <_dtoa_r+0x6fe>
 80086de:	9a07      	ldr	r2, [sp, #28]
 80086e0:	9900      	ldr	r1, [sp, #0]
 80086e2:	3201      	adds	r2, #1
 80086e4:	9207      	str	r2, [sp, #28]
 80086e6:	2230      	movs	r2, #48	; 0x30
 80086e8:	700a      	strb	r2, [r1, #0]
 80086ea:	781a      	ldrb	r2, [r3, #0]
 80086ec:	3201      	adds	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e78c      	b.n	800860c <_dtoa_r+0x63c>
 80086f2:	4b7f      	ldr	r3, [pc, #508]	; (80088f0 <_dtoa_r+0x920>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	f7f7 ff8f 	bl	8000618 <__aeabi_dmul>
 80086fa:	2200      	movs	r2, #0
 80086fc:	2300      	movs	r3, #0
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	f7f8 f9f1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008706:	2800      	cmp	r0, #0
 8008708:	d09b      	beq.n	8008642 <_dtoa_r+0x672>
 800870a:	e7cd      	b.n	80086a8 <_dtoa_r+0x6d8>
 800870c:	9a08      	ldr	r2, [sp, #32]
 800870e:	2a00      	cmp	r2, #0
 8008710:	f000 80c4 	beq.w	800889c <_dtoa_r+0x8cc>
 8008714:	9a05      	ldr	r2, [sp, #20]
 8008716:	2a01      	cmp	r2, #1
 8008718:	f300 80a8 	bgt.w	800886c <_dtoa_r+0x89c>
 800871c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800871e:	2a00      	cmp	r2, #0
 8008720:	f000 80a0 	beq.w	8008864 <_dtoa_r+0x894>
 8008724:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008728:	9e06      	ldr	r6, [sp, #24]
 800872a:	4645      	mov	r5, r8
 800872c:	9a04      	ldr	r2, [sp, #16]
 800872e:	2101      	movs	r1, #1
 8008730:	441a      	add	r2, r3
 8008732:	4620      	mov	r0, r4
 8008734:	4498      	add	r8, r3
 8008736:	9204      	str	r2, [sp, #16]
 8008738:	f000 fb4c 	bl	8008dd4 <__i2b>
 800873c:	4607      	mov	r7, r0
 800873e:	2d00      	cmp	r5, #0
 8008740:	dd0b      	ble.n	800875a <_dtoa_r+0x78a>
 8008742:	9b04      	ldr	r3, [sp, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dd08      	ble.n	800875a <_dtoa_r+0x78a>
 8008748:	42ab      	cmp	r3, r5
 800874a:	9a04      	ldr	r2, [sp, #16]
 800874c:	bfa8      	it	ge
 800874e:	462b      	movge	r3, r5
 8008750:	eba8 0803 	sub.w	r8, r8, r3
 8008754:	1aed      	subs	r5, r5, r3
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	9b06      	ldr	r3, [sp, #24]
 800875c:	b1fb      	cbz	r3, 800879e <_dtoa_r+0x7ce>
 800875e:	9b08      	ldr	r3, [sp, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 809f 	beq.w	80088a4 <_dtoa_r+0x8d4>
 8008766:	2e00      	cmp	r6, #0
 8008768:	dd11      	ble.n	800878e <_dtoa_r+0x7be>
 800876a:	4639      	mov	r1, r7
 800876c:	4632      	mov	r2, r6
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fbec 	bl	8008f4c <__pow5mult>
 8008774:	465a      	mov	r2, fp
 8008776:	4601      	mov	r1, r0
 8008778:	4607      	mov	r7, r0
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fb40 	bl	8008e00 <__multiply>
 8008780:	4659      	mov	r1, fp
 8008782:	9007      	str	r0, [sp, #28]
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fa69 	bl	8008c5c <_Bfree>
 800878a:	9b07      	ldr	r3, [sp, #28]
 800878c:	469b      	mov	fp, r3
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	1b9a      	subs	r2, r3, r6
 8008792:	d004      	beq.n	800879e <_dtoa_r+0x7ce>
 8008794:	4659      	mov	r1, fp
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fbd8 	bl	8008f4c <__pow5mult>
 800879c:	4683      	mov	fp, r0
 800879e:	2101      	movs	r1, #1
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fb17 	bl	8008dd4 <__i2b>
 80087a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	4606      	mov	r6, r0
 80087ac:	dd7c      	ble.n	80088a8 <_dtoa_r+0x8d8>
 80087ae:	461a      	mov	r2, r3
 80087b0:	4601      	mov	r1, r0
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 fbca 	bl	8008f4c <__pow5mult>
 80087b8:	9b05      	ldr	r3, [sp, #20]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	4606      	mov	r6, r0
 80087be:	dd76      	ble.n	80088ae <_dtoa_r+0x8de>
 80087c0:	2300      	movs	r3, #0
 80087c2:	9306      	str	r3, [sp, #24]
 80087c4:	6933      	ldr	r3, [r6, #16]
 80087c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087ca:	6918      	ldr	r0, [r3, #16]
 80087cc:	f000 fab2 	bl	8008d34 <__hi0bits>
 80087d0:	f1c0 0020 	rsb	r0, r0, #32
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	4418      	add	r0, r3
 80087d8:	f010 001f 	ands.w	r0, r0, #31
 80087dc:	f000 8086 	beq.w	80088ec <_dtoa_r+0x91c>
 80087e0:	f1c0 0320 	rsb	r3, r0, #32
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	dd7f      	ble.n	80088e8 <_dtoa_r+0x918>
 80087e8:	f1c0 001c 	rsb	r0, r0, #28
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	4403      	add	r3, r0
 80087f0:	4480      	add	r8, r0
 80087f2:	4405      	add	r5, r0
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	f1b8 0f00 	cmp.w	r8, #0
 80087fa:	dd05      	ble.n	8008808 <_dtoa_r+0x838>
 80087fc:	4659      	mov	r1, fp
 80087fe:	4642      	mov	r2, r8
 8008800:	4620      	mov	r0, r4
 8008802:	f000 fbfd 	bl	8009000 <__lshift>
 8008806:	4683      	mov	fp, r0
 8008808:	9b04      	ldr	r3, [sp, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	dd05      	ble.n	800881a <_dtoa_r+0x84a>
 800880e:	4631      	mov	r1, r6
 8008810:	461a      	mov	r2, r3
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fbf4 	bl	8009000 <__lshift>
 8008818:	4606      	mov	r6, r0
 800881a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800881c:	2b00      	cmp	r3, #0
 800881e:	d069      	beq.n	80088f4 <_dtoa_r+0x924>
 8008820:	4631      	mov	r1, r6
 8008822:	4658      	mov	r0, fp
 8008824:	f000 fc58 	bl	80090d8 <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	da63      	bge.n	80088f4 <_dtoa_r+0x924>
 800882c:	2300      	movs	r3, #0
 800882e:	4659      	mov	r1, fp
 8008830:	220a      	movs	r2, #10
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fa34 	bl	8008ca0 <__multadd>
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800883e:	4683      	mov	fp, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 818f 	beq.w	8008b64 <_dtoa_r+0xb94>
 8008846:	4639      	mov	r1, r7
 8008848:	2300      	movs	r3, #0
 800884a:	220a      	movs	r2, #10
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fa27 	bl	8008ca0 <__multadd>
 8008852:	f1b9 0f00 	cmp.w	r9, #0
 8008856:	4607      	mov	r7, r0
 8008858:	f300 808e 	bgt.w	8008978 <_dtoa_r+0x9a8>
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	2b02      	cmp	r3, #2
 8008860:	dc50      	bgt.n	8008904 <_dtoa_r+0x934>
 8008862:	e089      	b.n	8008978 <_dtoa_r+0x9a8>
 8008864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800886a:	e75d      	b.n	8008728 <_dtoa_r+0x758>
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	1e5e      	subs	r6, r3, #1
 8008870:	9b06      	ldr	r3, [sp, #24]
 8008872:	42b3      	cmp	r3, r6
 8008874:	bfbf      	itttt	lt
 8008876:	9b06      	ldrlt	r3, [sp, #24]
 8008878:	9606      	strlt	r6, [sp, #24]
 800887a:	1af2      	sublt	r2, r6, r3
 800887c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800887e:	bfb6      	itet	lt
 8008880:	189b      	addlt	r3, r3, r2
 8008882:	1b9e      	subge	r6, r3, r6
 8008884:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	bfb8      	it	lt
 800888a:	2600      	movlt	r6, #0
 800888c:	2b00      	cmp	r3, #0
 800888e:	bfb5      	itete	lt
 8008890:	eba8 0503 	sublt.w	r5, r8, r3
 8008894:	9b01      	ldrge	r3, [sp, #4]
 8008896:	2300      	movlt	r3, #0
 8008898:	4645      	movge	r5, r8
 800889a:	e747      	b.n	800872c <_dtoa_r+0x75c>
 800889c:	9e06      	ldr	r6, [sp, #24]
 800889e:	9f08      	ldr	r7, [sp, #32]
 80088a0:	4645      	mov	r5, r8
 80088a2:	e74c      	b.n	800873e <_dtoa_r+0x76e>
 80088a4:	9a06      	ldr	r2, [sp, #24]
 80088a6:	e775      	b.n	8008794 <_dtoa_r+0x7c4>
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	dc18      	bgt.n	80088e0 <_dtoa_r+0x910>
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	b9b3      	cbnz	r3, 80088e0 <_dtoa_r+0x910>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b8:	b9a3      	cbnz	r3, 80088e4 <_dtoa_r+0x914>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088c0:	0d1b      	lsrs	r3, r3, #20
 80088c2:	051b      	lsls	r3, r3, #20
 80088c4:	b12b      	cbz	r3, 80088d2 <_dtoa_r+0x902>
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	3301      	adds	r3, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	f108 0801 	add.w	r8, r8, #1
 80088d0:	2301      	movs	r3, #1
 80088d2:	9306      	str	r3, [sp, #24]
 80088d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f47f af74 	bne.w	80087c4 <_dtoa_r+0x7f4>
 80088dc:	2001      	movs	r0, #1
 80088de:	e779      	b.n	80087d4 <_dtoa_r+0x804>
 80088e0:	2300      	movs	r3, #0
 80088e2:	e7f6      	b.n	80088d2 <_dtoa_r+0x902>
 80088e4:	9b02      	ldr	r3, [sp, #8]
 80088e6:	e7f4      	b.n	80088d2 <_dtoa_r+0x902>
 80088e8:	d085      	beq.n	80087f6 <_dtoa_r+0x826>
 80088ea:	4618      	mov	r0, r3
 80088ec:	301c      	adds	r0, #28
 80088ee:	e77d      	b.n	80087ec <_dtoa_r+0x81c>
 80088f0:	40240000 	.word	0x40240000
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dc38      	bgt.n	800896c <_dtoa_r+0x99c>
 80088fa:	9b05      	ldr	r3, [sp, #20]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	dd35      	ble.n	800896c <_dtoa_r+0x99c>
 8008900:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008904:	f1b9 0f00 	cmp.w	r9, #0
 8008908:	d10d      	bne.n	8008926 <_dtoa_r+0x956>
 800890a:	4631      	mov	r1, r6
 800890c:	464b      	mov	r3, r9
 800890e:	2205      	movs	r2, #5
 8008910:	4620      	mov	r0, r4
 8008912:	f000 f9c5 	bl	8008ca0 <__multadd>
 8008916:	4601      	mov	r1, r0
 8008918:	4606      	mov	r6, r0
 800891a:	4658      	mov	r0, fp
 800891c:	f000 fbdc 	bl	80090d8 <__mcmp>
 8008920:	2800      	cmp	r0, #0
 8008922:	f73f adbd 	bgt.w	80084a0 <_dtoa_r+0x4d0>
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	9d00      	ldr	r5, [sp, #0]
 800892a:	ea6f 0a03 	mvn.w	sl, r3
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	4631      	mov	r1, r6
 8008934:	4620      	mov	r0, r4
 8008936:	f000 f991 	bl	8008c5c <_Bfree>
 800893a:	2f00      	cmp	r7, #0
 800893c:	f43f aeb4 	beq.w	80086a8 <_dtoa_r+0x6d8>
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	d005      	beq.n	8008952 <_dtoa_r+0x982>
 8008946:	45b8      	cmp	r8, r7
 8008948:	d003      	beq.n	8008952 <_dtoa_r+0x982>
 800894a:	4641      	mov	r1, r8
 800894c:	4620      	mov	r0, r4
 800894e:	f000 f985 	bl	8008c5c <_Bfree>
 8008952:	4639      	mov	r1, r7
 8008954:	4620      	mov	r0, r4
 8008956:	f000 f981 	bl	8008c5c <_Bfree>
 800895a:	e6a5      	b.n	80086a8 <_dtoa_r+0x6d8>
 800895c:	2600      	movs	r6, #0
 800895e:	4637      	mov	r7, r6
 8008960:	e7e1      	b.n	8008926 <_dtoa_r+0x956>
 8008962:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008964:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008968:	4637      	mov	r7, r6
 800896a:	e599      	b.n	80084a0 <_dtoa_r+0x4d0>
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80fd 	beq.w	8008b72 <_dtoa_r+0xba2>
 8008978:	2d00      	cmp	r5, #0
 800897a:	dd05      	ble.n	8008988 <_dtoa_r+0x9b8>
 800897c:	4639      	mov	r1, r7
 800897e:	462a      	mov	r2, r5
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fb3d 	bl	8009000 <__lshift>
 8008986:	4607      	mov	r7, r0
 8008988:	9b06      	ldr	r3, [sp, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d05c      	beq.n	8008a48 <_dtoa_r+0xa78>
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4620      	mov	r0, r4
 8008992:	f000 f923 	bl	8008bdc <_Balloc>
 8008996:	4605      	mov	r5, r0
 8008998:	b928      	cbnz	r0, 80089a6 <_dtoa_r+0x9d6>
 800899a:	4b80      	ldr	r3, [pc, #512]	; (8008b9c <_dtoa_r+0xbcc>)
 800899c:	4602      	mov	r2, r0
 800899e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089a2:	f7ff bb2e 	b.w	8008002 <_dtoa_r+0x32>
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	3202      	adds	r2, #2
 80089aa:	0092      	lsls	r2, r2, #2
 80089ac:	f107 010c 	add.w	r1, r7, #12
 80089b0:	300c      	adds	r0, #12
 80089b2:	f000 f905 	bl	8008bc0 <memcpy>
 80089b6:	2201      	movs	r2, #1
 80089b8:	4629      	mov	r1, r5
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fb20 	bl	8009000 <__lshift>
 80089c0:	9b00      	ldr	r3, [sp, #0]
 80089c2:	3301      	adds	r3, #1
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	9b00      	ldr	r3, [sp, #0]
 80089c8:	444b      	add	r3, r9
 80089ca:	9307      	str	r3, [sp, #28]
 80089cc:	9b02      	ldr	r3, [sp, #8]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	46b8      	mov	r8, r7
 80089d4:	9306      	str	r3, [sp, #24]
 80089d6:	4607      	mov	r7, r0
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	4631      	mov	r1, r6
 80089dc:	3b01      	subs	r3, #1
 80089de:	4658      	mov	r0, fp
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	f7ff fa67 	bl	8007eb4 <quorem>
 80089e6:	4603      	mov	r3, r0
 80089e8:	3330      	adds	r3, #48	; 0x30
 80089ea:	9004      	str	r0, [sp, #16]
 80089ec:	4641      	mov	r1, r8
 80089ee:	4658      	mov	r0, fp
 80089f0:	9308      	str	r3, [sp, #32]
 80089f2:	f000 fb71 	bl	80090d8 <__mcmp>
 80089f6:	463a      	mov	r2, r7
 80089f8:	4681      	mov	r9, r0
 80089fa:	4631      	mov	r1, r6
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fb87 	bl	8009110 <__mdiff>
 8008a02:	68c2      	ldr	r2, [r0, #12]
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	4605      	mov	r5, r0
 8008a08:	bb02      	cbnz	r2, 8008a4c <_dtoa_r+0xa7c>
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fb63 	bl	80090d8 <__mcmp>
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	4602      	mov	r2, r0
 8008a16:	4629      	mov	r1, r5
 8008a18:	4620      	mov	r0, r4
 8008a1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008a1e:	f000 f91d 	bl	8008c5c <_Bfree>
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a26:	9d01      	ldr	r5, [sp, #4]
 8008a28:	ea43 0102 	orr.w	r1, r3, r2
 8008a2c:	9b06      	ldr	r3, [sp, #24]
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	d10d      	bne.n	8008a50 <_dtoa_r+0xa80>
 8008a34:	2b39      	cmp	r3, #57	; 0x39
 8008a36:	d029      	beq.n	8008a8c <_dtoa_r+0xabc>
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	dd01      	ble.n	8008a42 <_dtoa_r+0xa72>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	3331      	adds	r3, #49	; 0x31
 8008a42:	9a02      	ldr	r2, [sp, #8]
 8008a44:	7013      	strb	r3, [r2, #0]
 8008a46:	e774      	b.n	8008932 <_dtoa_r+0x962>
 8008a48:	4638      	mov	r0, r7
 8008a4a:	e7b9      	b.n	80089c0 <_dtoa_r+0x9f0>
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	e7e2      	b.n	8008a16 <_dtoa_r+0xa46>
 8008a50:	f1b9 0f00 	cmp.w	r9, #0
 8008a54:	db06      	blt.n	8008a64 <_dtoa_r+0xa94>
 8008a56:	9905      	ldr	r1, [sp, #20]
 8008a58:	ea41 0909 	orr.w	r9, r1, r9
 8008a5c:	9906      	ldr	r1, [sp, #24]
 8008a5e:	ea59 0101 	orrs.w	r1, r9, r1
 8008a62:	d120      	bne.n	8008aa6 <_dtoa_r+0xad6>
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	ddec      	ble.n	8008a42 <_dtoa_r+0xa72>
 8008a68:	4659      	mov	r1, fp
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	f000 fac6 	bl	8009000 <__lshift>
 8008a74:	4631      	mov	r1, r6
 8008a76:	4683      	mov	fp, r0
 8008a78:	f000 fb2e 	bl	80090d8 <__mcmp>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	9b01      	ldr	r3, [sp, #4]
 8008a80:	dc02      	bgt.n	8008a88 <_dtoa_r+0xab8>
 8008a82:	d1de      	bne.n	8008a42 <_dtoa_r+0xa72>
 8008a84:	07da      	lsls	r2, r3, #31
 8008a86:	d5dc      	bpl.n	8008a42 <_dtoa_r+0xa72>
 8008a88:	2b39      	cmp	r3, #57	; 0x39
 8008a8a:	d1d8      	bne.n	8008a3e <_dtoa_r+0xa6e>
 8008a8c:	9a02      	ldr	r2, [sp, #8]
 8008a8e:	2339      	movs	r3, #57	; 0x39
 8008a90:	7013      	strb	r3, [r2, #0]
 8008a92:	462b      	mov	r3, r5
 8008a94:	461d      	mov	r5, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a9c:	2a39      	cmp	r2, #57	; 0x39
 8008a9e:	d050      	beq.n	8008b42 <_dtoa_r+0xb72>
 8008aa0:	3201      	adds	r2, #1
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	e745      	b.n	8008932 <_dtoa_r+0x962>
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	dd03      	ble.n	8008ab2 <_dtoa_r+0xae2>
 8008aaa:	2b39      	cmp	r3, #57	; 0x39
 8008aac:	d0ee      	beq.n	8008a8c <_dtoa_r+0xabc>
 8008aae:	3301      	adds	r3, #1
 8008ab0:	e7c7      	b.n	8008a42 <_dtoa_r+0xa72>
 8008ab2:	9a01      	ldr	r2, [sp, #4]
 8008ab4:	9907      	ldr	r1, [sp, #28]
 8008ab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008aba:	428a      	cmp	r2, r1
 8008abc:	d02a      	beq.n	8008b14 <_dtoa_r+0xb44>
 8008abe:	4659      	mov	r1, fp
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 f8eb 	bl	8008ca0 <__multadd>
 8008aca:	45b8      	cmp	r8, r7
 8008acc:	4683      	mov	fp, r0
 8008ace:	f04f 0300 	mov.w	r3, #0
 8008ad2:	f04f 020a 	mov.w	r2, #10
 8008ad6:	4641      	mov	r1, r8
 8008ad8:	4620      	mov	r0, r4
 8008ada:	d107      	bne.n	8008aec <_dtoa_r+0xb1c>
 8008adc:	f000 f8e0 	bl	8008ca0 <__multadd>
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	e775      	b.n	80089d8 <_dtoa_r+0xa08>
 8008aec:	f000 f8d8 	bl	8008ca0 <__multadd>
 8008af0:	4639      	mov	r1, r7
 8008af2:	4680      	mov	r8, r0
 8008af4:	2300      	movs	r3, #0
 8008af6:	220a      	movs	r2, #10
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 f8d1 	bl	8008ca0 <__multadd>
 8008afe:	4607      	mov	r7, r0
 8008b00:	e7f0      	b.n	8008ae4 <_dtoa_r+0xb14>
 8008b02:	f1b9 0f00 	cmp.w	r9, #0
 8008b06:	9a00      	ldr	r2, [sp, #0]
 8008b08:	bfcc      	ite	gt
 8008b0a:	464d      	movgt	r5, r9
 8008b0c:	2501      	movle	r5, #1
 8008b0e:	4415      	add	r5, r2
 8008b10:	f04f 0800 	mov.w	r8, #0
 8008b14:	4659      	mov	r1, fp
 8008b16:	2201      	movs	r2, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	f000 fa70 	bl	8009000 <__lshift>
 8008b20:	4631      	mov	r1, r6
 8008b22:	4683      	mov	fp, r0
 8008b24:	f000 fad8 	bl	80090d8 <__mcmp>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dcb2      	bgt.n	8008a92 <_dtoa_r+0xac2>
 8008b2c:	d102      	bne.n	8008b34 <_dtoa_r+0xb64>
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d4ae      	bmi.n	8008a92 <_dtoa_r+0xac2>
 8008b34:	462b      	mov	r3, r5
 8008b36:	461d      	mov	r5, r3
 8008b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b3c:	2a30      	cmp	r2, #48	; 0x30
 8008b3e:	d0fa      	beq.n	8008b36 <_dtoa_r+0xb66>
 8008b40:	e6f7      	b.n	8008932 <_dtoa_r+0x962>
 8008b42:	9a00      	ldr	r2, [sp, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d1a5      	bne.n	8008a94 <_dtoa_r+0xac4>
 8008b48:	f10a 0a01 	add.w	sl, sl, #1
 8008b4c:	2331      	movs	r3, #49	; 0x31
 8008b4e:	e779      	b.n	8008a44 <_dtoa_r+0xa74>
 8008b50:	4b13      	ldr	r3, [pc, #76]	; (8008ba0 <_dtoa_r+0xbd0>)
 8008b52:	f7ff baaf 	b.w	80080b4 <_dtoa_r+0xe4>
 8008b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f47f aa86 	bne.w	800806a <_dtoa_r+0x9a>
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <_dtoa_r+0xbd4>)
 8008b60:	f7ff baa8 	b.w	80080b4 <_dtoa_r+0xe4>
 8008b64:	f1b9 0f00 	cmp.w	r9, #0
 8008b68:	dc03      	bgt.n	8008b72 <_dtoa_r+0xba2>
 8008b6a:	9b05      	ldr	r3, [sp, #20]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	f73f aec9 	bgt.w	8008904 <_dtoa_r+0x934>
 8008b72:	9d00      	ldr	r5, [sp, #0]
 8008b74:	4631      	mov	r1, r6
 8008b76:	4658      	mov	r0, fp
 8008b78:	f7ff f99c 	bl	8007eb4 <quorem>
 8008b7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b80:	f805 3b01 	strb.w	r3, [r5], #1
 8008b84:	9a00      	ldr	r2, [sp, #0]
 8008b86:	1aaa      	subs	r2, r5, r2
 8008b88:	4591      	cmp	r9, r2
 8008b8a:	ddba      	ble.n	8008b02 <_dtoa_r+0xb32>
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f884 	bl	8008ca0 <__multadd>
 8008b98:	4683      	mov	fp, r0
 8008b9a:	e7eb      	b.n	8008b74 <_dtoa_r+0xba4>
 8008b9c:	0800a4bf 	.word	0x0800a4bf
 8008ba0:	0800a418 	.word	0x0800a418
 8008ba4:	0800a43c 	.word	0x0800a43c

08008ba8 <_localeconv_r>:
 8008ba8:	4800      	ldr	r0, [pc, #0]	; (8008bac <_localeconv_r+0x4>)
 8008baa:	4770      	bx	lr
 8008bac:	20000160 	.word	0x20000160

08008bb0 <malloc>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <malloc+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f000 bbef 	b.w	8009398 <_malloc_r>
 8008bba:	bf00      	nop
 8008bbc:	2000000c 	.word	0x2000000c

08008bc0 <memcpy>:
 8008bc0:	440a      	add	r2, r1
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bc8:	d100      	bne.n	8008bcc <memcpy+0xc>
 8008bca:	4770      	bx	lr
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd6:	4291      	cmp	r1, r2
 8008bd8:	d1f9      	bne.n	8008bce <memcpy+0xe>
 8008bda:	bd10      	pop	{r4, pc}

08008bdc <_Balloc>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008be0:	4604      	mov	r4, r0
 8008be2:	460d      	mov	r5, r1
 8008be4:	b976      	cbnz	r6, 8008c04 <_Balloc+0x28>
 8008be6:	2010      	movs	r0, #16
 8008be8:	f7ff ffe2 	bl	8008bb0 <malloc>
 8008bec:	4602      	mov	r2, r0
 8008bee:	6260      	str	r0, [r4, #36]	; 0x24
 8008bf0:	b920      	cbnz	r0, 8008bfc <_Balloc+0x20>
 8008bf2:	4b18      	ldr	r3, [pc, #96]	; (8008c54 <_Balloc+0x78>)
 8008bf4:	4818      	ldr	r0, [pc, #96]	; (8008c58 <_Balloc+0x7c>)
 8008bf6:	2166      	movs	r1, #102	; 0x66
 8008bf8:	f000 fd94 	bl	8009724 <__assert_func>
 8008bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c00:	6006      	str	r6, [r0, #0]
 8008c02:	60c6      	str	r6, [r0, #12]
 8008c04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c06:	68f3      	ldr	r3, [r6, #12]
 8008c08:	b183      	cbz	r3, 8008c2c <_Balloc+0x50>
 8008c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c12:	b9b8      	cbnz	r0, 8008c44 <_Balloc+0x68>
 8008c14:	2101      	movs	r1, #1
 8008c16:	fa01 f605 	lsl.w	r6, r1, r5
 8008c1a:	1d72      	adds	r2, r6, #5
 8008c1c:	0092      	lsls	r2, r2, #2
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 fb5a 	bl	80092d8 <_calloc_r>
 8008c24:	b160      	cbz	r0, 8008c40 <_Balloc+0x64>
 8008c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c2a:	e00e      	b.n	8008c4a <_Balloc+0x6e>
 8008c2c:	2221      	movs	r2, #33	; 0x21
 8008c2e:	2104      	movs	r1, #4
 8008c30:	4620      	mov	r0, r4
 8008c32:	f000 fb51 	bl	80092d8 <_calloc_r>
 8008c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c38:	60f0      	str	r0, [r6, #12]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e4      	bne.n	8008c0a <_Balloc+0x2e>
 8008c40:	2000      	movs	r0, #0
 8008c42:	bd70      	pop	{r4, r5, r6, pc}
 8008c44:	6802      	ldr	r2, [r0, #0]
 8008c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c50:	e7f7      	b.n	8008c42 <_Balloc+0x66>
 8008c52:	bf00      	nop
 8008c54:	0800a449 	.word	0x0800a449
 8008c58:	0800a4d0 	.word	0x0800a4d0

08008c5c <_Bfree>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c60:	4605      	mov	r5, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	b976      	cbnz	r6, 8008c84 <_Bfree+0x28>
 8008c66:	2010      	movs	r0, #16
 8008c68:	f7ff ffa2 	bl	8008bb0 <malloc>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	6268      	str	r0, [r5, #36]	; 0x24
 8008c70:	b920      	cbnz	r0, 8008c7c <_Bfree+0x20>
 8008c72:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <_Bfree+0x3c>)
 8008c74:	4809      	ldr	r0, [pc, #36]	; (8008c9c <_Bfree+0x40>)
 8008c76:	218a      	movs	r1, #138	; 0x8a
 8008c78:	f000 fd54 	bl	8009724 <__assert_func>
 8008c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c80:	6006      	str	r6, [r0, #0]
 8008c82:	60c6      	str	r6, [r0, #12]
 8008c84:	b13c      	cbz	r4, 8008c96 <_Bfree+0x3a>
 8008c86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c88:	6862      	ldr	r2, [r4, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c90:	6021      	str	r1, [r4, #0]
 8008c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	0800a449 	.word	0x0800a449
 8008c9c:	0800a4d0 	.word	0x0800a4d0

08008ca0 <__multadd>:
 8008ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca4:	690e      	ldr	r6, [r1, #16]
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	4698      	mov	r8, r3
 8008caa:	460c      	mov	r4, r1
 8008cac:	f101 0014 	add.w	r0, r1, #20
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6805      	ldr	r5, [r0, #0]
 8008cb4:	b2a9      	uxth	r1, r5
 8008cb6:	fb02 8101 	mla	r1, r2, r1, r8
 8008cba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008cbe:	0c2d      	lsrs	r5, r5, #16
 8008cc0:	fb02 c505 	mla	r5, r2, r5, ip
 8008cc4:	b289      	uxth	r1, r1
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ccc:	429e      	cmp	r6, r3
 8008cce:	f840 1b04 	str.w	r1, [r0], #4
 8008cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008cd6:	dcec      	bgt.n	8008cb2 <__multadd+0x12>
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d022      	beq.n	8008d24 <__multadd+0x84>
 8008cde:	68a3      	ldr	r3, [r4, #8]
 8008ce0:	42b3      	cmp	r3, r6
 8008ce2:	dc19      	bgt.n	8008d18 <__multadd+0x78>
 8008ce4:	6861      	ldr	r1, [r4, #4]
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	3101      	adds	r1, #1
 8008cea:	f7ff ff77 	bl	8008bdc <_Balloc>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	b928      	cbnz	r0, 8008cfe <__multadd+0x5e>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <__multadd+0x8c>)
 8008cf6:	480e      	ldr	r0, [pc, #56]	; (8008d30 <__multadd+0x90>)
 8008cf8:	21b5      	movs	r1, #181	; 0xb5
 8008cfa:	f000 fd13 	bl	8009724 <__assert_func>
 8008cfe:	6922      	ldr	r2, [r4, #16]
 8008d00:	3202      	adds	r2, #2
 8008d02:	f104 010c 	add.w	r1, r4, #12
 8008d06:	0092      	lsls	r2, r2, #2
 8008d08:	300c      	adds	r0, #12
 8008d0a:	f7ff ff59 	bl	8008bc0 <memcpy>
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7ff ffa3 	bl	8008c5c <_Bfree>
 8008d16:	462c      	mov	r4, r5
 8008d18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008d1c:	3601      	adds	r6, #1
 8008d1e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008d22:	6126      	str	r6, [r4, #16]
 8008d24:	4620      	mov	r0, r4
 8008d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2a:	bf00      	nop
 8008d2c:	0800a4bf 	.word	0x0800a4bf
 8008d30:	0800a4d0 	.word	0x0800a4d0

08008d34 <__hi0bits>:
 8008d34:	0c03      	lsrs	r3, r0, #16
 8008d36:	041b      	lsls	r3, r3, #16
 8008d38:	b9d3      	cbnz	r3, 8008d70 <__hi0bits+0x3c>
 8008d3a:	0400      	lsls	r0, r0, #16
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d42:	bf04      	itt	eq
 8008d44:	0200      	lsleq	r0, r0, #8
 8008d46:	3308      	addeq	r3, #8
 8008d48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d4c:	bf04      	itt	eq
 8008d4e:	0100      	lsleq	r0, r0, #4
 8008d50:	3304      	addeq	r3, #4
 8008d52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d56:	bf04      	itt	eq
 8008d58:	0080      	lsleq	r0, r0, #2
 8008d5a:	3302      	addeq	r3, #2
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	db05      	blt.n	8008d6c <__hi0bits+0x38>
 8008d60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d64:	f103 0301 	add.w	r3, r3, #1
 8008d68:	bf08      	it	eq
 8008d6a:	2320      	moveq	r3, #32
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	4770      	bx	lr
 8008d70:	2300      	movs	r3, #0
 8008d72:	e7e4      	b.n	8008d3e <__hi0bits+0xa>

08008d74 <__lo0bits>:
 8008d74:	6803      	ldr	r3, [r0, #0]
 8008d76:	f013 0207 	ands.w	r2, r3, #7
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	d00b      	beq.n	8008d96 <__lo0bits+0x22>
 8008d7e:	07da      	lsls	r2, r3, #31
 8008d80:	d424      	bmi.n	8008dcc <__lo0bits+0x58>
 8008d82:	0798      	lsls	r0, r3, #30
 8008d84:	bf49      	itett	mi
 8008d86:	085b      	lsrmi	r3, r3, #1
 8008d88:	089b      	lsrpl	r3, r3, #2
 8008d8a:	2001      	movmi	r0, #1
 8008d8c:	600b      	strmi	r3, [r1, #0]
 8008d8e:	bf5c      	itt	pl
 8008d90:	600b      	strpl	r3, [r1, #0]
 8008d92:	2002      	movpl	r0, #2
 8008d94:	4770      	bx	lr
 8008d96:	b298      	uxth	r0, r3
 8008d98:	b9b0      	cbnz	r0, 8008dc8 <__lo0bits+0x54>
 8008d9a:	0c1b      	lsrs	r3, r3, #16
 8008d9c:	2010      	movs	r0, #16
 8008d9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008da2:	bf04      	itt	eq
 8008da4:	0a1b      	lsreq	r3, r3, #8
 8008da6:	3008      	addeq	r0, #8
 8008da8:	071a      	lsls	r2, r3, #28
 8008daa:	bf04      	itt	eq
 8008dac:	091b      	lsreq	r3, r3, #4
 8008dae:	3004      	addeq	r0, #4
 8008db0:	079a      	lsls	r2, r3, #30
 8008db2:	bf04      	itt	eq
 8008db4:	089b      	lsreq	r3, r3, #2
 8008db6:	3002      	addeq	r0, #2
 8008db8:	07da      	lsls	r2, r3, #31
 8008dba:	d403      	bmi.n	8008dc4 <__lo0bits+0x50>
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	f100 0001 	add.w	r0, r0, #1
 8008dc2:	d005      	beq.n	8008dd0 <__lo0bits+0x5c>
 8008dc4:	600b      	str	r3, [r1, #0]
 8008dc6:	4770      	bx	lr
 8008dc8:	4610      	mov	r0, r2
 8008dca:	e7e8      	b.n	8008d9e <__lo0bits+0x2a>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	4770      	bx	lr
 8008dd0:	2020      	movs	r0, #32
 8008dd2:	4770      	bx	lr

08008dd4 <__i2b>:
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2101      	movs	r1, #1
 8008dda:	f7ff feff 	bl	8008bdc <_Balloc>
 8008dde:	4602      	mov	r2, r0
 8008de0:	b928      	cbnz	r0, 8008dee <__i2b+0x1a>
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <__i2b+0x24>)
 8008de4:	4805      	ldr	r0, [pc, #20]	; (8008dfc <__i2b+0x28>)
 8008de6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008dea:	f000 fc9b 	bl	8009724 <__assert_func>
 8008dee:	2301      	movs	r3, #1
 8008df0:	6144      	str	r4, [r0, #20]
 8008df2:	6103      	str	r3, [r0, #16]
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	bf00      	nop
 8008df8:	0800a4bf 	.word	0x0800a4bf
 8008dfc:	0800a4d0 	.word	0x0800a4d0

08008e00 <__multiply>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	4614      	mov	r4, r2
 8008e06:	690a      	ldr	r2, [r1, #16]
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	bfb8      	it	lt
 8008e0e:	460b      	movlt	r3, r1
 8008e10:	460d      	mov	r5, r1
 8008e12:	bfbc      	itt	lt
 8008e14:	4625      	movlt	r5, r4
 8008e16:	461c      	movlt	r4, r3
 8008e18:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008e1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e20:	68ab      	ldr	r3, [r5, #8]
 8008e22:	6869      	ldr	r1, [r5, #4]
 8008e24:	eb0a 0709 	add.w	r7, sl, r9
 8008e28:	42bb      	cmp	r3, r7
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	bfb8      	it	lt
 8008e2e:	3101      	addlt	r1, #1
 8008e30:	f7ff fed4 	bl	8008bdc <_Balloc>
 8008e34:	b930      	cbnz	r0, 8008e44 <__multiply+0x44>
 8008e36:	4602      	mov	r2, r0
 8008e38:	4b42      	ldr	r3, [pc, #264]	; (8008f44 <__multiply+0x144>)
 8008e3a:	4843      	ldr	r0, [pc, #268]	; (8008f48 <__multiply+0x148>)
 8008e3c:	f240 115d 	movw	r1, #349	; 0x15d
 8008e40:	f000 fc70 	bl	8009724 <__assert_func>
 8008e44:	f100 0614 	add.w	r6, r0, #20
 8008e48:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008e4c:	4633      	mov	r3, r6
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4543      	cmp	r3, r8
 8008e52:	d31e      	bcc.n	8008e92 <__multiply+0x92>
 8008e54:	f105 0c14 	add.w	ip, r5, #20
 8008e58:	f104 0314 	add.w	r3, r4, #20
 8008e5c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e60:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e64:	9202      	str	r2, [sp, #8]
 8008e66:	ebac 0205 	sub.w	r2, ip, r5
 8008e6a:	3a15      	subs	r2, #21
 8008e6c:	f022 0203 	bic.w	r2, r2, #3
 8008e70:	3204      	adds	r2, #4
 8008e72:	f105 0115 	add.w	r1, r5, #21
 8008e76:	458c      	cmp	ip, r1
 8008e78:	bf38      	it	cc
 8008e7a:	2204      	movcc	r2, #4
 8008e7c:	9201      	str	r2, [sp, #4]
 8008e7e:	9a02      	ldr	r2, [sp, #8]
 8008e80:	9303      	str	r3, [sp, #12]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d808      	bhi.n	8008e98 <__multiply+0x98>
 8008e86:	2f00      	cmp	r7, #0
 8008e88:	dc55      	bgt.n	8008f36 <__multiply+0x136>
 8008e8a:	6107      	str	r7, [r0, #16]
 8008e8c:	b005      	add	sp, #20
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	f843 2b04 	str.w	r2, [r3], #4
 8008e96:	e7db      	b.n	8008e50 <__multiply+0x50>
 8008e98:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ea0:	d020      	beq.n	8008ee4 <__multiply+0xe4>
 8008ea2:	f105 0e14 	add.w	lr, r5, #20
 8008ea6:	46b1      	mov	r9, r6
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008eae:	f8d9 b000 	ldr.w	fp, [r9]
 8008eb2:	b2a1      	uxth	r1, r4
 8008eb4:	fa1f fb8b 	uxth.w	fp, fp
 8008eb8:	fb0a b101 	mla	r1, sl, r1, fp
 8008ebc:	4411      	add	r1, r2
 8008ebe:	f8d9 2000 	ldr.w	r2, [r9]
 8008ec2:	0c24      	lsrs	r4, r4, #16
 8008ec4:	0c12      	lsrs	r2, r2, #16
 8008ec6:	fb0a 2404 	mla	r4, sl, r4, r2
 8008eca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ece:	b289      	uxth	r1, r1
 8008ed0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ed4:	45f4      	cmp	ip, lr
 8008ed6:	f849 1b04 	str.w	r1, [r9], #4
 8008eda:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ede:	d8e4      	bhi.n	8008eaa <__multiply+0xaa>
 8008ee0:	9901      	ldr	r1, [sp, #4]
 8008ee2:	5072      	str	r2, [r6, r1]
 8008ee4:	9a03      	ldr	r2, [sp, #12]
 8008ee6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008eea:	3304      	adds	r3, #4
 8008eec:	f1b9 0f00 	cmp.w	r9, #0
 8008ef0:	d01f      	beq.n	8008f32 <__multiply+0x132>
 8008ef2:	6834      	ldr	r4, [r6, #0]
 8008ef4:	f105 0114 	add.w	r1, r5, #20
 8008ef8:	46b6      	mov	lr, r6
 8008efa:	f04f 0a00 	mov.w	sl, #0
 8008efe:	880a      	ldrh	r2, [r1, #0]
 8008f00:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f04:	fb09 b202 	mla	r2, r9, r2, fp
 8008f08:	4492      	add	sl, r2
 8008f0a:	b2a4      	uxth	r4, r4
 8008f0c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f10:	f84e 4b04 	str.w	r4, [lr], #4
 8008f14:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f18:	f8be 2000 	ldrh.w	r2, [lr]
 8008f1c:	0c24      	lsrs	r4, r4, #16
 8008f1e:	fb09 2404 	mla	r4, r9, r4, r2
 8008f22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008f26:	458c      	cmp	ip, r1
 8008f28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f2c:	d8e7      	bhi.n	8008efe <__multiply+0xfe>
 8008f2e:	9a01      	ldr	r2, [sp, #4]
 8008f30:	50b4      	str	r4, [r6, r2]
 8008f32:	3604      	adds	r6, #4
 8008f34:	e7a3      	b.n	8008e7e <__multiply+0x7e>
 8008f36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1a5      	bne.n	8008e8a <__multiply+0x8a>
 8008f3e:	3f01      	subs	r7, #1
 8008f40:	e7a1      	b.n	8008e86 <__multiply+0x86>
 8008f42:	bf00      	nop
 8008f44:	0800a4bf 	.word	0x0800a4bf
 8008f48:	0800a4d0 	.word	0x0800a4d0

08008f4c <__pow5mult>:
 8008f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	4615      	mov	r5, r2
 8008f52:	f012 0203 	ands.w	r2, r2, #3
 8008f56:	4606      	mov	r6, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	d007      	beq.n	8008f6c <__pow5mult+0x20>
 8008f5c:	4c25      	ldr	r4, [pc, #148]	; (8008ff4 <__pow5mult+0xa8>)
 8008f5e:	3a01      	subs	r2, #1
 8008f60:	2300      	movs	r3, #0
 8008f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f66:	f7ff fe9b 	bl	8008ca0 <__multadd>
 8008f6a:	4607      	mov	r7, r0
 8008f6c:	10ad      	asrs	r5, r5, #2
 8008f6e:	d03d      	beq.n	8008fec <__pow5mult+0xa0>
 8008f70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f72:	b97c      	cbnz	r4, 8008f94 <__pow5mult+0x48>
 8008f74:	2010      	movs	r0, #16
 8008f76:	f7ff fe1b 	bl	8008bb0 <malloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f7e:	b928      	cbnz	r0, 8008f8c <__pow5mult+0x40>
 8008f80:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <__pow5mult+0xac>)
 8008f82:	481e      	ldr	r0, [pc, #120]	; (8008ffc <__pow5mult+0xb0>)
 8008f84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f88:	f000 fbcc 	bl	8009724 <__assert_func>
 8008f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f90:	6004      	str	r4, [r0, #0]
 8008f92:	60c4      	str	r4, [r0, #12]
 8008f94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f9c:	b94c      	cbnz	r4, 8008fb2 <__pow5mult+0x66>
 8008f9e:	f240 2171 	movw	r1, #625	; 0x271
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ff16 	bl	8008dd4 <__i2b>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fae:	4604      	mov	r4, r0
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	f04f 0900 	mov.w	r9, #0
 8008fb6:	07eb      	lsls	r3, r5, #31
 8008fb8:	d50a      	bpl.n	8008fd0 <__pow5mult+0x84>
 8008fba:	4639      	mov	r1, r7
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ff1e 	bl	8008e00 <__multiply>
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	4680      	mov	r8, r0
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff fe47 	bl	8008c5c <_Bfree>
 8008fce:	4647      	mov	r7, r8
 8008fd0:	106d      	asrs	r5, r5, #1
 8008fd2:	d00b      	beq.n	8008fec <__pow5mult+0xa0>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	b938      	cbnz	r0, 8008fe8 <__pow5mult+0x9c>
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7ff ff0f 	bl	8008e00 <__multiply>
 8008fe2:	6020      	str	r0, [r4, #0]
 8008fe4:	f8c0 9000 	str.w	r9, [r0]
 8008fe8:	4604      	mov	r4, r0
 8008fea:	e7e4      	b.n	8008fb6 <__pow5mult+0x6a>
 8008fec:	4638      	mov	r0, r7
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	bf00      	nop
 8008ff4:	0800a620 	.word	0x0800a620
 8008ff8:	0800a449 	.word	0x0800a449
 8008ffc:	0800a4d0 	.word	0x0800a4d0

08009000 <__lshift>:
 8009000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	460c      	mov	r4, r1
 8009006:	6849      	ldr	r1, [r1, #4]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	4607      	mov	r7, r0
 8009012:	4691      	mov	r9, r2
 8009014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009018:	f108 0601 	add.w	r6, r8, #1
 800901c:	42b3      	cmp	r3, r6
 800901e:	db0b      	blt.n	8009038 <__lshift+0x38>
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff fddb 	bl	8008bdc <_Balloc>
 8009026:	4605      	mov	r5, r0
 8009028:	b948      	cbnz	r0, 800903e <__lshift+0x3e>
 800902a:	4602      	mov	r2, r0
 800902c:	4b28      	ldr	r3, [pc, #160]	; (80090d0 <__lshift+0xd0>)
 800902e:	4829      	ldr	r0, [pc, #164]	; (80090d4 <__lshift+0xd4>)
 8009030:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009034:	f000 fb76 	bl	8009724 <__assert_func>
 8009038:	3101      	adds	r1, #1
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	e7ee      	b.n	800901c <__lshift+0x1c>
 800903e:	2300      	movs	r3, #0
 8009040:	f100 0114 	add.w	r1, r0, #20
 8009044:	f100 0210 	add.w	r2, r0, #16
 8009048:	4618      	mov	r0, r3
 800904a:	4553      	cmp	r3, sl
 800904c:	db33      	blt.n	80090b6 <__lshift+0xb6>
 800904e:	6920      	ldr	r0, [r4, #16]
 8009050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009054:	f104 0314 	add.w	r3, r4, #20
 8009058:	f019 091f 	ands.w	r9, r9, #31
 800905c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009064:	d02b      	beq.n	80090be <__lshift+0xbe>
 8009066:	f1c9 0e20 	rsb	lr, r9, #32
 800906a:	468a      	mov	sl, r1
 800906c:	2200      	movs	r2, #0
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	fa00 f009 	lsl.w	r0, r0, r9
 8009074:	4302      	orrs	r2, r0
 8009076:	f84a 2b04 	str.w	r2, [sl], #4
 800907a:	f853 2b04 	ldr.w	r2, [r3], #4
 800907e:	459c      	cmp	ip, r3
 8009080:	fa22 f20e 	lsr.w	r2, r2, lr
 8009084:	d8f3      	bhi.n	800906e <__lshift+0x6e>
 8009086:	ebac 0304 	sub.w	r3, ip, r4
 800908a:	3b15      	subs	r3, #21
 800908c:	f023 0303 	bic.w	r3, r3, #3
 8009090:	3304      	adds	r3, #4
 8009092:	f104 0015 	add.w	r0, r4, #21
 8009096:	4584      	cmp	ip, r0
 8009098:	bf38      	it	cc
 800909a:	2304      	movcc	r3, #4
 800909c:	50ca      	str	r2, [r1, r3]
 800909e:	b10a      	cbz	r2, 80090a4 <__lshift+0xa4>
 80090a0:	f108 0602 	add.w	r6, r8, #2
 80090a4:	3e01      	subs	r6, #1
 80090a6:	4638      	mov	r0, r7
 80090a8:	612e      	str	r6, [r5, #16]
 80090aa:	4621      	mov	r1, r4
 80090ac:	f7ff fdd6 	bl	8008c5c <_Bfree>
 80090b0:	4628      	mov	r0, r5
 80090b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ba:	3301      	adds	r3, #1
 80090bc:	e7c5      	b.n	800904a <__lshift+0x4a>
 80090be:	3904      	subs	r1, #4
 80090c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80090c8:	459c      	cmp	ip, r3
 80090ca:	d8f9      	bhi.n	80090c0 <__lshift+0xc0>
 80090cc:	e7ea      	b.n	80090a4 <__lshift+0xa4>
 80090ce:	bf00      	nop
 80090d0:	0800a4bf 	.word	0x0800a4bf
 80090d4:	0800a4d0 	.word	0x0800a4d0

080090d8 <__mcmp>:
 80090d8:	b530      	push	{r4, r5, lr}
 80090da:	6902      	ldr	r2, [r0, #16]
 80090dc:	690c      	ldr	r4, [r1, #16]
 80090de:	1b12      	subs	r2, r2, r4
 80090e0:	d10e      	bne.n	8009100 <__mcmp+0x28>
 80090e2:	f100 0314 	add.w	r3, r0, #20
 80090e6:	3114      	adds	r1, #20
 80090e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090f8:	42a5      	cmp	r5, r4
 80090fa:	d003      	beq.n	8009104 <__mcmp+0x2c>
 80090fc:	d305      	bcc.n	800910a <__mcmp+0x32>
 80090fe:	2201      	movs	r2, #1
 8009100:	4610      	mov	r0, r2
 8009102:	bd30      	pop	{r4, r5, pc}
 8009104:	4283      	cmp	r3, r0
 8009106:	d3f3      	bcc.n	80090f0 <__mcmp+0x18>
 8009108:	e7fa      	b.n	8009100 <__mcmp+0x28>
 800910a:	f04f 32ff 	mov.w	r2, #4294967295
 800910e:	e7f7      	b.n	8009100 <__mcmp+0x28>

08009110 <__mdiff>:
 8009110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	460c      	mov	r4, r1
 8009116:	4606      	mov	r6, r0
 8009118:	4611      	mov	r1, r2
 800911a:	4620      	mov	r0, r4
 800911c:	4617      	mov	r7, r2
 800911e:	f7ff ffdb 	bl	80090d8 <__mcmp>
 8009122:	1e05      	subs	r5, r0, #0
 8009124:	d110      	bne.n	8009148 <__mdiff+0x38>
 8009126:	4629      	mov	r1, r5
 8009128:	4630      	mov	r0, r6
 800912a:	f7ff fd57 	bl	8008bdc <_Balloc>
 800912e:	b930      	cbnz	r0, 800913e <__mdiff+0x2e>
 8009130:	4b39      	ldr	r3, [pc, #228]	; (8009218 <__mdiff+0x108>)
 8009132:	4602      	mov	r2, r0
 8009134:	f240 2132 	movw	r1, #562	; 0x232
 8009138:	4838      	ldr	r0, [pc, #224]	; (800921c <__mdiff+0x10c>)
 800913a:	f000 faf3 	bl	8009724 <__assert_func>
 800913e:	2301      	movs	r3, #1
 8009140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009148:	bfa4      	itt	ge
 800914a:	463b      	movge	r3, r7
 800914c:	4627      	movge	r7, r4
 800914e:	4630      	mov	r0, r6
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	bfa6      	itte	ge
 8009154:	461c      	movge	r4, r3
 8009156:	2500      	movge	r5, #0
 8009158:	2501      	movlt	r5, #1
 800915a:	f7ff fd3f 	bl	8008bdc <_Balloc>
 800915e:	b920      	cbnz	r0, 800916a <__mdiff+0x5a>
 8009160:	4b2d      	ldr	r3, [pc, #180]	; (8009218 <__mdiff+0x108>)
 8009162:	4602      	mov	r2, r0
 8009164:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009168:	e7e6      	b.n	8009138 <__mdiff+0x28>
 800916a:	693e      	ldr	r6, [r7, #16]
 800916c:	60c5      	str	r5, [r0, #12]
 800916e:	6925      	ldr	r5, [r4, #16]
 8009170:	f107 0114 	add.w	r1, r7, #20
 8009174:	f104 0914 	add.w	r9, r4, #20
 8009178:	f100 0e14 	add.w	lr, r0, #20
 800917c:	f107 0210 	add.w	r2, r7, #16
 8009180:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009184:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009188:	46f2      	mov	sl, lr
 800918a:	2700      	movs	r7, #0
 800918c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009190:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009194:	fa1f f883 	uxth.w	r8, r3
 8009198:	fa17 f78b 	uxtah	r7, r7, fp
 800919c:	0c1b      	lsrs	r3, r3, #16
 800919e:	eba7 0808 	sub.w	r8, r7, r8
 80091a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091aa:	fa1f f888 	uxth.w	r8, r8
 80091ae:	141f      	asrs	r7, r3, #16
 80091b0:	454d      	cmp	r5, r9
 80091b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091b6:	f84a 3b04 	str.w	r3, [sl], #4
 80091ba:	d8e7      	bhi.n	800918c <__mdiff+0x7c>
 80091bc:	1b2b      	subs	r3, r5, r4
 80091be:	3b15      	subs	r3, #21
 80091c0:	f023 0303 	bic.w	r3, r3, #3
 80091c4:	3304      	adds	r3, #4
 80091c6:	3415      	adds	r4, #21
 80091c8:	42a5      	cmp	r5, r4
 80091ca:	bf38      	it	cc
 80091cc:	2304      	movcc	r3, #4
 80091ce:	4419      	add	r1, r3
 80091d0:	4473      	add	r3, lr
 80091d2:	469e      	mov	lr, r3
 80091d4:	460d      	mov	r5, r1
 80091d6:	4565      	cmp	r5, ip
 80091d8:	d30e      	bcc.n	80091f8 <__mdiff+0xe8>
 80091da:	f10c 0203 	add.w	r2, ip, #3
 80091de:	1a52      	subs	r2, r2, r1
 80091e0:	f022 0203 	bic.w	r2, r2, #3
 80091e4:	3903      	subs	r1, #3
 80091e6:	458c      	cmp	ip, r1
 80091e8:	bf38      	it	cc
 80091ea:	2200      	movcc	r2, #0
 80091ec:	441a      	add	r2, r3
 80091ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091f2:	b17b      	cbz	r3, 8009214 <__mdiff+0x104>
 80091f4:	6106      	str	r6, [r0, #16]
 80091f6:	e7a5      	b.n	8009144 <__mdiff+0x34>
 80091f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80091fc:	fa17 f488 	uxtah	r4, r7, r8
 8009200:	1422      	asrs	r2, r4, #16
 8009202:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009206:	b2a4      	uxth	r4, r4
 8009208:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800920c:	f84e 4b04 	str.w	r4, [lr], #4
 8009210:	1417      	asrs	r7, r2, #16
 8009212:	e7e0      	b.n	80091d6 <__mdiff+0xc6>
 8009214:	3e01      	subs	r6, #1
 8009216:	e7ea      	b.n	80091ee <__mdiff+0xde>
 8009218:	0800a4bf 	.word	0x0800a4bf
 800921c:	0800a4d0 	.word	0x0800a4d0

08009220 <__d2b>:
 8009220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009224:	4689      	mov	r9, r1
 8009226:	2101      	movs	r1, #1
 8009228:	ec57 6b10 	vmov	r6, r7, d0
 800922c:	4690      	mov	r8, r2
 800922e:	f7ff fcd5 	bl	8008bdc <_Balloc>
 8009232:	4604      	mov	r4, r0
 8009234:	b930      	cbnz	r0, 8009244 <__d2b+0x24>
 8009236:	4602      	mov	r2, r0
 8009238:	4b25      	ldr	r3, [pc, #148]	; (80092d0 <__d2b+0xb0>)
 800923a:	4826      	ldr	r0, [pc, #152]	; (80092d4 <__d2b+0xb4>)
 800923c:	f240 310a 	movw	r1, #778	; 0x30a
 8009240:	f000 fa70 	bl	8009724 <__assert_func>
 8009244:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800924c:	bb35      	cbnz	r5, 800929c <__d2b+0x7c>
 800924e:	2e00      	cmp	r6, #0
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	d028      	beq.n	80092a6 <__d2b+0x86>
 8009254:	4668      	mov	r0, sp
 8009256:	9600      	str	r6, [sp, #0]
 8009258:	f7ff fd8c 	bl	8008d74 <__lo0bits>
 800925c:	9900      	ldr	r1, [sp, #0]
 800925e:	b300      	cbz	r0, 80092a2 <__d2b+0x82>
 8009260:	9a01      	ldr	r2, [sp, #4]
 8009262:	f1c0 0320 	rsb	r3, r0, #32
 8009266:	fa02 f303 	lsl.w	r3, r2, r3
 800926a:	430b      	orrs	r3, r1
 800926c:	40c2      	lsrs	r2, r0
 800926e:	6163      	str	r3, [r4, #20]
 8009270:	9201      	str	r2, [sp, #4]
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	61a3      	str	r3, [r4, #24]
 8009276:	2b00      	cmp	r3, #0
 8009278:	bf14      	ite	ne
 800927a:	2202      	movne	r2, #2
 800927c:	2201      	moveq	r2, #1
 800927e:	6122      	str	r2, [r4, #16]
 8009280:	b1d5      	cbz	r5, 80092b8 <__d2b+0x98>
 8009282:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009286:	4405      	add	r5, r0
 8009288:	f8c9 5000 	str.w	r5, [r9]
 800928c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009290:	f8c8 0000 	str.w	r0, [r8]
 8009294:	4620      	mov	r0, r4
 8009296:	b003      	add	sp, #12
 8009298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800929c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092a0:	e7d5      	b.n	800924e <__d2b+0x2e>
 80092a2:	6161      	str	r1, [r4, #20]
 80092a4:	e7e5      	b.n	8009272 <__d2b+0x52>
 80092a6:	a801      	add	r0, sp, #4
 80092a8:	f7ff fd64 	bl	8008d74 <__lo0bits>
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	6163      	str	r3, [r4, #20]
 80092b0:	2201      	movs	r2, #1
 80092b2:	6122      	str	r2, [r4, #16]
 80092b4:	3020      	adds	r0, #32
 80092b6:	e7e3      	b.n	8009280 <__d2b+0x60>
 80092b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092c0:	f8c9 0000 	str.w	r0, [r9]
 80092c4:	6918      	ldr	r0, [r3, #16]
 80092c6:	f7ff fd35 	bl	8008d34 <__hi0bits>
 80092ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092ce:	e7df      	b.n	8009290 <__d2b+0x70>
 80092d0:	0800a4bf 	.word	0x0800a4bf
 80092d4:	0800a4d0 	.word	0x0800a4d0

080092d8 <_calloc_r>:
 80092d8:	b513      	push	{r0, r1, r4, lr}
 80092da:	434a      	muls	r2, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	9201      	str	r2, [sp, #4]
 80092e0:	f000 f85a 	bl	8009398 <_malloc_r>
 80092e4:	4604      	mov	r4, r0
 80092e6:	b118      	cbz	r0, 80092f0 <_calloc_r+0x18>
 80092e8:	9a01      	ldr	r2, [sp, #4]
 80092ea:	2100      	movs	r1, #0
 80092ec:	f7fe f950 	bl	8007590 <memset>
 80092f0:	4620      	mov	r0, r4
 80092f2:	b002      	add	sp, #8
 80092f4:	bd10      	pop	{r4, pc}
	...

080092f8 <_free_r>:
 80092f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d048      	beq.n	8009390 <_free_r+0x98>
 80092fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009302:	9001      	str	r0, [sp, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	f1a1 0404 	sub.w	r4, r1, #4
 800930a:	bfb8      	it	lt
 800930c:	18e4      	addlt	r4, r4, r3
 800930e:	f000 fa65 	bl	80097dc <__malloc_lock>
 8009312:	4a20      	ldr	r2, [pc, #128]	; (8009394 <_free_r+0x9c>)
 8009314:	9801      	ldr	r0, [sp, #4]
 8009316:	6813      	ldr	r3, [r2, #0]
 8009318:	4615      	mov	r5, r2
 800931a:	b933      	cbnz	r3, 800932a <_free_r+0x32>
 800931c:	6063      	str	r3, [r4, #4]
 800931e:	6014      	str	r4, [r2, #0]
 8009320:	b003      	add	sp, #12
 8009322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009326:	f000 ba5f 	b.w	80097e8 <__malloc_unlock>
 800932a:	42a3      	cmp	r3, r4
 800932c:	d90b      	bls.n	8009346 <_free_r+0x4e>
 800932e:	6821      	ldr	r1, [r4, #0]
 8009330:	1862      	adds	r2, r4, r1
 8009332:	4293      	cmp	r3, r2
 8009334:	bf04      	itt	eq
 8009336:	681a      	ldreq	r2, [r3, #0]
 8009338:	685b      	ldreq	r3, [r3, #4]
 800933a:	6063      	str	r3, [r4, #4]
 800933c:	bf04      	itt	eq
 800933e:	1852      	addeq	r2, r2, r1
 8009340:	6022      	streq	r2, [r4, #0]
 8009342:	602c      	str	r4, [r5, #0]
 8009344:	e7ec      	b.n	8009320 <_free_r+0x28>
 8009346:	461a      	mov	r2, r3
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	b10b      	cbz	r3, 8009350 <_free_r+0x58>
 800934c:	42a3      	cmp	r3, r4
 800934e:	d9fa      	bls.n	8009346 <_free_r+0x4e>
 8009350:	6811      	ldr	r1, [r2, #0]
 8009352:	1855      	adds	r5, r2, r1
 8009354:	42a5      	cmp	r5, r4
 8009356:	d10b      	bne.n	8009370 <_free_r+0x78>
 8009358:	6824      	ldr	r4, [r4, #0]
 800935a:	4421      	add	r1, r4
 800935c:	1854      	adds	r4, r2, r1
 800935e:	42a3      	cmp	r3, r4
 8009360:	6011      	str	r1, [r2, #0]
 8009362:	d1dd      	bne.n	8009320 <_free_r+0x28>
 8009364:	681c      	ldr	r4, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	6053      	str	r3, [r2, #4]
 800936a:	4421      	add	r1, r4
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	e7d7      	b.n	8009320 <_free_r+0x28>
 8009370:	d902      	bls.n	8009378 <_free_r+0x80>
 8009372:	230c      	movs	r3, #12
 8009374:	6003      	str	r3, [r0, #0]
 8009376:	e7d3      	b.n	8009320 <_free_r+0x28>
 8009378:	6825      	ldr	r5, [r4, #0]
 800937a:	1961      	adds	r1, r4, r5
 800937c:	428b      	cmp	r3, r1
 800937e:	bf04      	itt	eq
 8009380:	6819      	ldreq	r1, [r3, #0]
 8009382:	685b      	ldreq	r3, [r3, #4]
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	bf04      	itt	eq
 8009388:	1949      	addeq	r1, r1, r5
 800938a:	6021      	streq	r1, [r4, #0]
 800938c:	6054      	str	r4, [r2, #4]
 800938e:	e7c7      	b.n	8009320 <_free_r+0x28>
 8009390:	b003      	add	sp, #12
 8009392:	bd30      	pop	{r4, r5, pc}
 8009394:	20000230 	.word	0x20000230

08009398 <_malloc_r>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	1ccd      	adds	r5, r1, #3
 800939c:	f025 0503 	bic.w	r5, r5, #3
 80093a0:	3508      	adds	r5, #8
 80093a2:	2d0c      	cmp	r5, #12
 80093a4:	bf38      	it	cc
 80093a6:	250c      	movcc	r5, #12
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	4606      	mov	r6, r0
 80093ac:	db01      	blt.n	80093b2 <_malloc_r+0x1a>
 80093ae:	42a9      	cmp	r1, r5
 80093b0:	d903      	bls.n	80093ba <_malloc_r+0x22>
 80093b2:	230c      	movs	r3, #12
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	2000      	movs	r0, #0
 80093b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ba:	f000 fa0f 	bl	80097dc <__malloc_lock>
 80093be:	4921      	ldr	r1, [pc, #132]	; (8009444 <_malloc_r+0xac>)
 80093c0:	680a      	ldr	r2, [r1, #0]
 80093c2:	4614      	mov	r4, r2
 80093c4:	b99c      	cbnz	r4, 80093ee <_malloc_r+0x56>
 80093c6:	4f20      	ldr	r7, [pc, #128]	; (8009448 <_malloc_r+0xb0>)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	b923      	cbnz	r3, 80093d6 <_malloc_r+0x3e>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4630      	mov	r0, r6
 80093d0:	f000 f998 	bl	8009704 <_sbrk_r>
 80093d4:	6038      	str	r0, [r7, #0]
 80093d6:	4629      	mov	r1, r5
 80093d8:	4630      	mov	r0, r6
 80093da:	f000 f993 	bl	8009704 <_sbrk_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d123      	bne.n	800942a <_malloc_r+0x92>
 80093e2:	230c      	movs	r3, #12
 80093e4:	6033      	str	r3, [r6, #0]
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 f9fe 	bl	80097e8 <__malloc_unlock>
 80093ec:	e7e3      	b.n	80093b6 <_malloc_r+0x1e>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	1b5b      	subs	r3, r3, r5
 80093f2:	d417      	bmi.n	8009424 <_malloc_r+0x8c>
 80093f4:	2b0b      	cmp	r3, #11
 80093f6:	d903      	bls.n	8009400 <_malloc_r+0x68>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	441c      	add	r4, r3
 80093fc:	6025      	str	r5, [r4, #0]
 80093fe:	e004      	b.n	800940a <_malloc_r+0x72>
 8009400:	6863      	ldr	r3, [r4, #4]
 8009402:	42a2      	cmp	r2, r4
 8009404:	bf0c      	ite	eq
 8009406:	600b      	streq	r3, [r1, #0]
 8009408:	6053      	strne	r3, [r2, #4]
 800940a:	4630      	mov	r0, r6
 800940c:	f000 f9ec 	bl	80097e8 <__malloc_unlock>
 8009410:	f104 000b 	add.w	r0, r4, #11
 8009414:	1d23      	adds	r3, r4, #4
 8009416:	f020 0007 	bic.w	r0, r0, #7
 800941a:	1ac2      	subs	r2, r0, r3
 800941c:	d0cc      	beq.n	80093b8 <_malloc_r+0x20>
 800941e:	1a1b      	subs	r3, r3, r0
 8009420:	50a3      	str	r3, [r4, r2]
 8009422:	e7c9      	b.n	80093b8 <_malloc_r+0x20>
 8009424:	4622      	mov	r2, r4
 8009426:	6864      	ldr	r4, [r4, #4]
 8009428:	e7cc      	b.n	80093c4 <_malloc_r+0x2c>
 800942a:	1cc4      	adds	r4, r0, #3
 800942c:	f024 0403 	bic.w	r4, r4, #3
 8009430:	42a0      	cmp	r0, r4
 8009432:	d0e3      	beq.n	80093fc <_malloc_r+0x64>
 8009434:	1a21      	subs	r1, r4, r0
 8009436:	4630      	mov	r0, r6
 8009438:	f000 f964 	bl	8009704 <_sbrk_r>
 800943c:	3001      	adds	r0, #1
 800943e:	d1dd      	bne.n	80093fc <_malloc_r+0x64>
 8009440:	e7cf      	b.n	80093e2 <_malloc_r+0x4a>
 8009442:	bf00      	nop
 8009444:	20000230 	.word	0x20000230
 8009448:	20000234 	.word	0x20000234

0800944c <__ssputs_r>:
 800944c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009450:	688e      	ldr	r6, [r1, #8]
 8009452:	429e      	cmp	r6, r3
 8009454:	4682      	mov	sl, r0
 8009456:	460c      	mov	r4, r1
 8009458:	4690      	mov	r8, r2
 800945a:	461f      	mov	r7, r3
 800945c:	d838      	bhi.n	80094d0 <__ssputs_r+0x84>
 800945e:	898a      	ldrh	r2, [r1, #12]
 8009460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009464:	d032      	beq.n	80094cc <__ssputs_r+0x80>
 8009466:	6825      	ldr	r5, [r4, #0]
 8009468:	6909      	ldr	r1, [r1, #16]
 800946a:	eba5 0901 	sub.w	r9, r5, r1
 800946e:	6965      	ldr	r5, [r4, #20]
 8009470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009478:	3301      	adds	r3, #1
 800947a:	444b      	add	r3, r9
 800947c:	106d      	asrs	r5, r5, #1
 800947e:	429d      	cmp	r5, r3
 8009480:	bf38      	it	cc
 8009482:	461d      	movcc	r5, r3
 8009484:	0553      	lsls	r3, r2, #21
 8009486:	d531      	bpl.n	80094ec <__ssputs_r+0xa0>
 8009488:	4629      	mov	r1, r5
 800948a:	f7ff ff85 	bl	8009398 <_malloc_r>
 800948e:	4606      	mov	r6, r0
 8009490:	b950      	cbnz	r0, 80094a8 <__ssputs_r+0x5c>
 8009492:	230c      	movs	r3, #12
 8009494:	f8ca 3000 	str.w	r3, [sl]
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800949e:	81a3      	strh	r3, [r4, #12]
 80094a0:	f04f 30ff 	mov.w	r0, #4294967295
 80094a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a8:	6921      	ldr	r1, [r4, #16]
 80094aa:	464a      	mov	r2, r9
 80094ac:	f7ff fb88 	bl	8008bc0 <memcpy>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ba:	81a3      	strh	r3, [r4, #12]
 80094bc:	6126      	str	r6, [r4, #16]
 80094be:	6165      	str	r5, [r4, #20]
 80094c0:	444e      	add	r6, r9
 80094c2:	eba5 0509 	sub.w	r5, r5, r9
 80094c6:	6026      	str	r6, [r4, #0]
 80094c8:	60a5      	str	r5, [r4, #8]
 80094ca:	463e      	mov	r6, r7
 80094cc:	42be      	cmp	r6, r7
 80094ce:	d900      	bls.n	80094d2 <__ssputs_r+0x86>
 80094d0:	463e      	mov	r6, r7
 80094d2:	4632      	mov	r2, r6
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	4641      	mov	r1, r8
 80094d8:	f000 f966 	bl	80097a8 <memmove>
 80094dc:	68a3      	ldr	r3, [r4, #8]
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	1b9b      	subs	r3, r3, r6
 80094e2:	4432      	add	r2, r6
 80094e4:	60a3      	str	r3, [r4, #8]
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	2000      	movs	r0, #0
 80094ea:	e7db      	b.n	80094a4 <__ssputs_r+0x58>
 80094ec:	462a      	mov	r2, r5
 80094ee:	f000 f981 	bl	80097f4 <_realloc_r>
 80094f2:	4606      	mov	r6, r0
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d1e1      	bne.n	80094bc <__ssputs_r+0x70>
 80094f8:	6921      	ldr	r1, [r4, #16]
 80094fa:	4650      	mov	r0, sl
 80094fc:	f7ff fefc 	bl	80092f8 <_free_r>
 8009500:	e7c7      	b.n	8009492 <__ssputs_r+0x46>
	...

08009504 <_svfiprintf_r>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	4698      	mov	r8, r3
 800950a:	898b      	ldrh	r3, [r1, #12]
 800950c:	061b      	lsls	r3, r3, #24
 800950e:	b09d      	sub	sp, #116	; 0x74
 8009510:	4607      	mov	r7, r0
 8009512:	460d      	mov	r5, r1
 8009514:	4614      	mov	r4, r2
 8009516:	d50e      	bpl.n	8009536 <_svfiprintf_r+0x32>
 8009518:	690b      	ldr	r3, [r1, #16]
 800951a:	b963      	cbnz	r3, 8009536 <_svfiprintf_r+0x32>
 800951c:	2140      	movs	r1, #64	; 0x40
 800951e:	f7ff ff3b 	bl	8009398 <_malloc_r>
 8009522:	6028      	str	r0, [r5, #0]
 8009524:	6128      	str	r0, [r5, #16]
 8009526:	b920      	cbnz	r0, 8009532 <_svfiprintf_r+0x2e>
 8009528:	230c      	movs	r3, #12
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	e0d1      	b.n	80096d6 <_svfiprintf_r+0x1d2>
 8009532:	2340      	movs	r3, #64	; 0x40
 8009534:	616b      	str	r3, [r5, #20]
 8009536:	2300      	movs	r3, #0
 8009538:	9309      	str	r3, [sp, #36]	; 0x24
 800953a:	2320      	movs	r3, #32
 800953c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009540:	f8cd 800c 	str.w	r8, [sp, #12]
 8009544:	2330      	movs	r3, #48	; 0x30
 8009546:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096f0 <_svfiprintf_r+0x1ec>
 800954a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800954e:	f04f 0901 	mov.w	r9, #1
 8009552:	4623      	mov	r3, r4
 8009554:	469a      	mov	sl, r3
 8009556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800955a:	b10a      	cbz	r2, 8009560 <_svfiprintf_r+0x5c>
 800955c:	2a25      	cmp	r2, #37	; 0x25
 800955e:	d1f9      	bne.n	8009554 <_svfiprintf_r+0x50>
 8009560:	ebba 0b04 	subs.w	fp, sl, r4
 8009564:	d00b      	beq.n	800957e <_svfiprintf_r+0x7a>
 8009566:	465b      	mov	r3, fp
 8009568:	4622      	mov	r2, r4
 800956a:	4629      	mov	r1, r5
 800956c:	4638      	mov	r0, r7
 800956e:	f7ff ff6d 	bl	800944c <__ssputs_r>
 8009572:	3001      	adds	r0, #1
 8009574:	f000 80aa 	beq.w	80096cc <_svfiprintf_r+0x1c8>
 8009578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800957a:	445a      	add	r2, fp
 800957c:	9209      	str	r2, [sp, #36]	; 0x24
 800957e:	f89a 3000 	ldrb.w	r3, [sl]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 80a2 	beq.w	80096cc <_svfiprintf_r+0x1c8>
 8009588:	2300      	movs	r3, #0
 800958a:	f04f 32ff 	mov.w	r2, #4294967295
 800958e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009592:	f10a 0a01 	add.w	sl, sl, #1
 8009596:	9304      	str	r3, [sp, #16]
 8009598:	9307      	str	r3, [sp, #28]
 800959a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800959e:	931a      	str	r3, [sp, #104]	; 0x68
 80095a0:	4654      	mov	r4, sl
 80095a2:	2205      	movs	r2, #5
 80095a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a8:	4851      	ldr	r0, [pc, #324]	; (80096f0 <_svfiprintf_r+0x1ec>)
 80095aa:	f7f6 fe29 	bl	8000200 <memchr>
 80095ae:	9a04      	ldr	r2, [sp, #16]
 80095b0:	b9d8      	cbnz	r0, 80095ea <_svfiprintf_r+0xe6>
 80095b2:	06d0      	lsls	r0, r2, #27
 80095b4:	bf44      	itt	mi
 80095b6:	2320      	movmi	r3, #32
 80095b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095bc:	0711      	lsls	r1, r2, #28
 80095be:	bf44      	itt	mi
 80095c0:	232b      	movmi	r3, #43	; 0x2b
 80095c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c6:	f89a 3000 	ldrb.w	r3, [sl]
 80095ca:	2b2a      	cmp	r3, #42	; 0x2a
 80095cc:	d015      	beq.n	80095fa <_svfiprintf_r+0xf6>
 80095ce:	9a07      	ldr	r2, [sp, #28]
 80095d0:	4654      	mov	r4, sl
 80095d2:	2000      	movs	r0, #0
 80095d4:	f04f 0c0a 	mov.w	ip, #10
 80095d8:	4621      	mov	r1, r4
 80095da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095de:	3b30      	subs	r3, #48	; 0x30
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	d94e      	bls.n	8009682 <_svfiprintf_r+0x17e>
 80095e4:	b1b0      	cbz	r0, 8009614 <_svfiprintf_r+0x110>
 80095e6:	9207      	str	r2, [sp, #28]
 80095e8:	e014      	b.n	8009614 <_svfiprintf_r+0x110>
 80095ea:	eba0 0308 	sub.w	r3, r0, r8
 80095ee:	fa09 f303 	lsl.w	r3, r9, r3
 80095f2:	4313      	orrs	r3, r2
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	46a2      	mov	sl, r4
 80095f8:	e7d2      	b.n	80095a0 <_svfiprintf_r+0x9c>
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	1d19      	adds	r1, r3, #4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	9103      	str	r1, [sp, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	bfbb      	ittet	lt
 8009606:	425b      	neglt	r3, r3
 8009608:	f042 0202 	orrlt.w	r2, r2, #2
 800960c:	9307      	strge	r3, [sp, #28]
 800960e:	9307      	strlt	r3, [sp, #28]
 8009610:	bfb8      	it	lt
 8009612:	9204      	strlt	r2, [sp, #16]
 8009614:	7823      	ldrb	r3, [r4, #0]
 8009616:	2b2e      	cmp	r3, #46	; 0x2e
 8009618:	d10c      	bne.n	8009634 <_svfiprintf_r+0x130>
 800961a:	7863      	ldrb	r3, [r4, #1]
 800961c:	2b2a      	cmp	r3, #42	; 0x2a
 800961e:	d135      	bne.n	800968c <_svfiprintf_r+0x188>
 8009620:	9b03      	ldr	r3, [sp, #12]
 8009622:	1d1a      	adds	r2, r3, #4
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	9203      	str	r2, [sp, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	bfb8      	it	lt
 800962c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009630:	3402      	adds	r4, #2
 8009632:	9305      	str	r3, [sp, #20]
 8009634:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009700 <_svfiprintf_r+0x1fc>
 8009638:	7821      	ldrb	r1, [r4, #0]
 800963a:	2203      	movs	r2, #3
 800963c:	4650      	mov	r0, sl
 800963e:	f7f6 fddf 	bl	8000200 <memchr>
 8009642:	b140      	cbz	r0, 8009656 <_svfiprintf_r+0x152>
 8009644:	2340      	movs	r3, #64	; 0x40
 8009646:	eba0 000a 	sub.w	r0, r0, sl
 800964a:	fa03 f000 	lsl.w	r0, r3, r0
 800964e:	9b04      	ldr	r3, [sp, #16]
 8009650:	4303      	orrs	r3, r0
 8009652:	3401      	adds	r4, #1
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965a:	4826      	ldr	r0, [pc, #152]	; (80096f4 <_svfiprintf_r+0x1f0>)
 800965c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009660:	2206      	movs	r2, #6
 8009662:	f7f6 fdcd 	bl	8000200 <memchr>
 8009666:	2800      	cmp	r0, #0
 8009668:	d038      	beq.n	80096dc <_svfiprintf_r+0x1d8>
 800966a:	4b23      	ldr	r3, [pc, #140]	; (80096f8 <_svfiprintf_r+0x1f4>)
 800966c:	bb1b      	cbnz	r3, 80096b6 <_svfiprintf_r+0x1b2>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	3307      	adds	r3, #7
 8009672:	f023 0307 	bic.w	r3, r3, #7
 8009676:	3308      	adds	r3, #8
 8009678:	9303      	str	r3, [sp, #12]
 800967a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967c:	4433      	add	r3, r6
 800967e:	9309      	str	r3, [sp, #36]	; 0x24
 8009680:	e767      	b.n	8009552 <_svfiprintf_r+0x4e>
 8009682:	fb0c 3202 	mla	r2, ip, r2, r3
 8009686:	460c      	mov	r4, r1
 8009688:	2001      	movs	r0, #1
 800968a:	e7a5      	b.n	80095d8 <_svfiprintf_r+0xd4>
 800968c:	2300      	movs	r3, #0
 800968e:	3401      	adds	r4, #1
 8009690:	9305      	str	r3, [sp, #20]
 8009692:	4619      	mov	r1, r3
 8009694:	f04f 0c0a 	mov.w	ip, #10
 8009698:	4620      	mov	r0, r4
 800969a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800969e:	3a30      	subs	r2, #48	; 0x30
 80096a0:	2a09      	cmp	r2, #9
 80096a2:	d903      	bls.n	80096ac <_svfiprintf_r+0x1a8>
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0c5      	beq.n	8009634 <_svfiprintf_r+0x130>
 80096a8:	9105      	str	r1, [sp, #20]
 80096aa:	e7c3      	b.n	8009634 <_svfiprintf_r+0x130>
 80096ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80096b0:	4604      	mov	r4, r0
 80096b2:	2301      	movs	r3, #1
 80096b4:	e7f0      	b.n	8009698 <_svfiprintf_r+0x194>
 80096b6:	ab03      	add	r3, sp, #12
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	462a      	mov	r2, r5
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <_svfiprintf_r+0x1f8>)
 80096be:	a904      	add	r1, sp, #16
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7fe f80d 	bl	80076e0 <_printf_float>
 80096c6:	1c42      	adds	r2, r0, #1
 80096c8:	4606      	mov	r6, r0
 80096ca:	d1d6      	bne.n	800967a <_svfiprintf_r+0x176>
 80096cc:	89ab      	ldrh	r3, [r5, #12]
 80096ce:	065b      	lsls	r3, r3, #25
 80096d0:	f53f af2c 	bmi.w	800952c <_svfiprintf_r+0x28>
 80096d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096d6:	b01d      	add	sp, #116	; 0x74
 80096d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096dc:	ab03      	add	r3, sp, #12
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	462a      	mov	r2, r5
 80096e2:	4b06      	ldr	r3, [pc, #24]	; (80096fc <_svfiprintf_r+0x1f8>)
 80096e4:	a904      	add	r1, sp, #16
 80096e6:	4638      	mov	r0, r7
 80096e8:	f7fe fa9e 	bl	8007c28 <_printf_i>
 80096ec:	e7eb      	b.n	80096c6 <_svfiprintf_r+0x1c2>
 80096ee:	bf00      	nop
 80096f0:	0800a62c 	.word	0x0800a62c
 80096f4:	0800a636 	.word	0x0800a636
 80096f8:	080076e1 	.word	0x080076e1
 80096fc:	0800944d 	.word	0x0800944d
 8009700:	0800a632 	.word	0x0800a632

08009704 <_sbrk_r>:
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4d06      	ldr	r5, [pc, #24]	; (8009720 <_sbrk_r+0x1c>)
 8009708:	2300      	movs	r3, #0
 800970a:	4604      	mov	r4, r0
 800970c:	4608      	mov	r0, r1
 800970e:	602b      	str	r3, [r5, #0]
 8009710:	f7f9 f90a 	bl	8002928 <_sbrk>
 8009714:	1c43      	adds	r3, r0, #1
 8009716:	d102      	bne.n	800971e <_sbrk_r+0x1a>
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	b103      	cbz	r3, 800971e <_sbrk_r+0x1a>
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	bd38      	pop	{r3, r4, r5, pc}
 8009720:	200009fc 	.word	0x200009fc

08009724 <__assert_func>:
 8009724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009726:	4614      	mov	r4, r2
 8009728:	461a      	mov	r2, r3
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <__assert_func+0x2c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4605      	mov	r5, r0
 8009730:	68d8      	ldr	r0, [r3, #12]
 8009732:	b14c      	cbz	r4, 8009748 <__assert_func+0x24>
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <__assert_func+0x30>)
 8009736:	9100      	str	r1, [sp, #0]
 8009738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800973c:	4906      	ldr	r1, [pc, #24]	; (8009758 <__assert_func+0x34>)
 800973e:	462b      	mov	r3, r5
 8009740:	f000 f80e 	bl	8009760 <fiprintf>
 8009744:	f000 faa4 	bl	8009c90 <abort>
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <__assert_func+0x38>)
 800974a:	461c      	mov	r4, r3
 800974c:	e7f3      	b.n	8009736 <__assert_func+0x12>
 800974e:	bf00      	nop
 8009750:	2000000c 	.word	0x2000000c
 8009754:	0800a63d 	.word	0x0800a63d
 8009758:	0800a64a 	.word	0x0800a64a
 800975c:	0800a678 	.word	0x0800a678

08009760 <fiprintf>:
 8009760:	b40e      	push	{r1, r2, r3}
 8009762:	b503      	push	{r0, r1, lr}
 8009764:	4601      	mov	r1, r0
 8009766:	ab03      	add	r3, sp, #12
 8009768:	4805      	ldr	r0, [pc, #20]	; (8009780 <fiprintf+0x20>)
 800976a:	f853 2b04 	ldr.w	r2, [r3], #4
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f000 f88f 	bl	8009894 <_vfiprintf_r>
 8009776:	b002      	add	sp, #8
 8009778:	f85d eb04 	ldr.w	lr, [sp], #4
 800977c:	b003      	add	sp, #12
 800977e:	4770      	bx	lr
 8009780:	2000000c 	.word	0x2000000c

08009784 <__ascii_mbtowc>:
 8009784:	b082      	sub	sp, #8
 8009786:	b901      	cbnz	r1, 800978a <__ascii_mbtowc+0x6>
 8009788:	a901      	add	r1, sp, #4
 800978a:	b142      	cbz	r2, 800979e <__ascii_mbtowc+0x1a>
 800978c:	b14b      	cbz	r3, 80097a2 <__ascii_mbtowc+0x1e>
 800978e:	7813      	ldrb	r3, [r2, #0]
 8009790:	600b      	str	r3, [r1, #0]
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	1e10      	subs	r0, r2, #0
 8009796:	bf18      	it	ne
 8009798:	2001      	movne	r0, #1
 800979a:	b002      	add	sp, #8
 800979c:	4770      	bx	lr
 800979e:	4610      	mov	r0, r2
 80097a0:	e7fb      	b.n	800979a <__ascii_mbtowc+0x16>
 80097a2:	f06f 0001 	mvn.w	r0, #1
 80097a6:	e7f8      	b.n	800979a <__ascii_mbtowc+0x16>

080097a8 <memmove>:
 80097a8:	4288      	cmp	r0, r1
 80097aa:	b510      	push	{r4, lr}
 80097ac:	eb01 0402 	add.w	r4, r1, r2
 80097b0:	d902      	bls.n	80097b8 <memmove+0x10>
 80097b2:	4284      	cmp	r4, r0
 80097b4:	4623      	mov	r3, r4
 80097b6:	d807      	bhi.n	80097c8 <memmove+0x20>
 80097b8:	1e43      	subs	r3, r0, #1
 80097ba:	42a1      	cmp	r1, r4
 80097bc:	d008      	beq.n	80097d0 <memmove+0x28>
 80097be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097c6:	e7f8      	b.n	80097ba <memmove+0x12>
 80097c8:	4402      	add	r2, r0
 80097ca:	4601      	mov	r1, r0
 80097cc:	428a      	cmp	r2, r1
 80097ce:	d100      	bne.n	80097d2 <memmove+0x2a>
 80097d0:	bd10      	pop	{r4, pc}
 80097d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097da:	e7f7      	b.n	80097cc <memmove+0x24>

080097dc <__malloc_lock>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__malloc_lock+0x8>)
 80097de:	f000 bc17 	b.w	800a010 <__retarget_lock_acquire_recursive>
 80097e2:	bf00      	nop
 80097e4:	20000a04 	.word	0x20000a04

080097e8 <__malloc_unlock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_unlock+0x8>)
 80097ea:	f000 bc12 	b.w	800a012 <__retarget_lock_release_recursive>
 80097ee:	bf00      	nop
 80097f0:	20000a04 	.word	0x20000a04

080097f4 <_realloc_r>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	4607      	mov	r7, r0
 80097f8:	4614      	mov	r4, r2
 80097fa:	460e      	mov	r6, r1
 80097fc:	b921      	cbnz	r1, 8009808 <_realloc_r+0x14>
 80097fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009802:	4611      	mov	r1, r2
 8009804:	f7ff bdc8 	b.w	8009398 <_malloc_r>
 8009808:	b922      	cbnz	r2, 8009814 <_realloc_r+0x20>
 800980a:	f7ff fd75 	bl	80092f8 <_free_r>
 800980e:	4625      	mov	r5, r4
 8009810:	4628      	mov	r0, r5
 8009812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009814:	f000 fc62 	bl	800a0dc <_malloc_usable_size_r>
 8009818:	42a0      	cmp	r0, r4
 800981a:	d20f      	bcs.n	800983c <_realloc_r+0x48>
 800981c:	4621      	mov	r1, r4
 800981e:	4638      	mov	r0, r7
 8009820:	f7ff fdba 	bl	8009398 <_malloc_r>
 8009824:	4605      	mov	r5, r0
 8009826:	2800      	cmp	r0, #0
 8009828:	d0f2      	beq.n	8009810 <_realloc_r+0x1c>
 800982a:	4631      	mov	r1, r6
 800982c:	4622      	mov	r2, r4
 800982e:	f7ff f9c7 	bl	8008bc0 <memcpy>
 8009832:	4631      	mov	r1, r6
 8009834:	4638      	mov	r0, r7
 8009836:	f7ff fd5f 	bl	80092f8 <_free_r>
 800983a:	e7e9      	b.n	8009810 <_realloc_r+0x1c>
 800983c:	4635      	mov	r5, r6
 800983e:	e7e7      	b.n	8009810 <_realloc_r+0x1c>

08009840 <__sfputc_r>:
 8009840:	6893      	ldr	r3, [r2, #8]
 8009842:	3b01      	subs	r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	b410      	push	{r4}
 8009848:	6093      	str	r3, [r2, #8]
 800984a:	da08      	bge.n	800985e <__sfputc_r+0x1e>
 800984c:	6994      	ldr	r4, [r2, #24]
 800984e:	42a3      	cmp	r3, r4
 8009850:	db01      	blt.n	8009856 <__sfputc_r+0x16>
 8009852:	290a      	cmp	r1, #10
 8009854:	d103      	bne.n	800985e <__sfputc_r+0x1e>
 8009856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800985a:	f000 b94b 	b.w	8009af4 <__swbuf_r>
 800985e:	6813      	ldr	r3, [r2, #0]
 8009860:	1c58      	adds	r0, r3, #1
 8009862:	6010      	str	r0, [r2, #0]
 8009864:	7019      	strb	r1, [r3, #0]
 8009866:	4608      	mov	r0, r1
 8009868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800986c:	4770      	bx	lr

0800986e <__sfputs_r>:
 800986e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009870:	4606      	mov	r6, r0
 8009872:	460f      	mov	r7, r1
 8009874:	4614      	mov	r4, r2
 8009876:	18d5      	adds	r5, r2, r3
 8009878:	42ac      	cmp	r4, r5
 800987a:	d101      	bne.n	8009880 <__sfputs_r+0x12>
 800987c:	2000      	movs	r0, #0
 800987e:	e007      	b.n	8009890 <__sfputs_r+0x22>
 8009880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009884:	463a      	mov	r2, r7
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff ffda 	bl	8009840 <__sfputc_r>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d1f3      	bne.n	8009878 <__sfputs_r+0xa>
 8009890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009894 <_vfiprintf_r>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	460d      	mov	r5, r1
 800989a:	b09d      	sub	sp, #116	; 0x74
 800989c:	4614      	mov	r4, r2
 800989e:	4698      	mov	r8, r3
 80098a0:	4606      	mov	r6, r0
 80098a2:	b118      	cbz	r0, 80098ac <_vfiprintf_r+0x18>
 80098a4:	6983      	ldr	r3, [r0, #24]
 80098a6:	b90b      	cbnz	r3, 80098ac <_vfiprintf_r+0x18>
 80098a8:	f000 fb14 	bl	8009ed4 <__sinit>
 80098ac:	4b89      	ldr	r3, [pc, #548]	; (8009ad4 <_vfiprintf_r+0x240>)
 80098ae:	429d      	cmp	r5, r3
 80098b0:	d11b      	bne.n	80098ea <_vfiprintf_r+0x56>
 80098b2:	6875      	ldr	r5, [r6, #4]
 80098b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b6:	07d9      	lsls	r1, r3, #31
 80098b8:	d405      	bmi.n	80098c6 <_vfiprintf_r+0x32>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	059a      	lsls	r2, r3, #22
 80098be:	d402      	bmi.n	80098c6 <_vfiprintf_r+0x32>
 80098c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c2:	f000 fba5 	bl	800a010 <__retarget_lock_acquire_recursive>
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	071b      	lsls	r3, r3, #28
 80098ca:	d501      	bpl.n	80098d0 <_vfiprintf_r+0x3c>
 80098cc:	692b      	ldr	r3, [r5, #16]
 80098ce:	b9eb      	cbnz	r3, 800990c <_vfiprintf_r+0x78>
 80098d0:	4629      	mov	r1, r5
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f96e 	bl	8009bb4 <__swsetup_r>
 80098d8:	b1c0      	cbz	r0, 800990c <_vfiprintf_r+0x78>
 80098da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098dc:	07dc      	lsls	r4, r3, #31
 80098de:	d50e      	bpl.n	80098fe <_vfiprintf_r+0x6a>
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	b01d      	add	sp, #116	; 0x74
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	4b7b      	ldr	r3, [pc, #492]	; (8009ad8 <_vfiprintf_r+0x244>)
 80098ec:	429d      	cmp	r5, r3
 80098ee:	d101      	bne.n	80098f4 <_vfiprintf_r+0x60>
 80098f0:	68b5      	ldr	r5, [r6, #8]
 80098f2:	e7df      	b.n	80098b4 <_vfiprintf_r+0x20>
 80098f4:	4b79      	ldr	r3, [pc, #484]	; (8009adc <_vfiprintf_r+0x248>)
 80098f6:	429d      	cmp	r5, r3
 80098f8:	bf08      	it	eq
 80098fa:	68f5      	ldreq	r5, [r6, #12]
 80098fc:	e7da      	b.n	80098b4 <_vfiprintf_r+0x20>
 80098fe:	89ab      	ldrh	r3, [r5, #12]
 8009900:	0598      	lsls	r0, r3, #22
 8009902:	d4ed      	bmi.n	80098e0 <_vfiprintf_r+0x4c>
 8009904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009906:	f000 fb84 	bl	800a012 <__retarget_lock_release_recursive>
 800990a:	e7e9      	b.n	80098e0 <_vfiprintf_r+0x4c>
 800990c:	2300      	movs	r3, #0
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	2320      	movs	r3, #32
 8009912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009916:	f8cd 800c 	str.w	r8, [sp, #12]
 800991a:	2330      	movs	r3, #48	; 0x30
 800991c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ae0 <_vfiprintf_r+0x24c>
 8009920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009924:	f04f 0901 	mov.w	r9, #1
 8009928:	4623      	mov	r3, r4
 800992a:	469a      	mov	sl, r3
 800992c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009930:	b10a      	cbz	r2, 8009936 <_vfiprintf_r+0xa2>
 8009932:	2a25      	cmp	r2, #37	; 0x25
 8009934:	d1f9      	bne.n	800992a <_vfiprintf_r+0x96>
 8009936:	ebba 0b04 	subs.w	fp, sl, r4
 800993a:	d00b      	beq.n	8009954 <_vfiprintf_r+0xc0>
 800993c:	465b      	mov	r3, fp
 800993e:	4622      	mov	r2, r4
 8009940:	4629      	mov	r1, r5
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff ff93 	bl	800986e <__sfputs_r>
 8009948:	3001      	adds	r0, #1
 800994a:	f000 80aa 	beq.w	8009aa2 <_vfiprintf_r+0x20e>
 800994e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009950:	445a      	add	r2, fp
 8009952:	9209      	str	r2, [sp, #36]	; 0x24
 8009954:	f89a 3000 	ldrb.w	r3, [sl]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80a2 	beq.w	8009aa2 <_vfiprintf_r+0x20e>
 800995e:	2300      	movs	r3, #0
 8009960:	f04f 32ff 	mov.w	r2, #4294967295
 8009964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009968:	f10a 0a01 	add.w	sl, sl, #1
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	9307      	str	r3, [sp, #28]
 8009970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009974:	931a      	str	r3, [sp, #104]	; 0x68
 8009976:	4654      	mov	r4, sl
 8009978:	2205      	movs	r2, #5
 800997a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997e:	4858      	ldr	r0, [pc, #352]	; (8009ae0 <_vfiprintf_r+0x24c>)
 8009980:	f7f6 fc3e 	bl	8000200 <memchr>
 8009984:	9a04      	ldr	r2, [sp, #16]
 8009986:	b9d8      	cbnz	r0, 80099c0 <_vfiprintf_r+0x12c>
 8009988:	06d1      	lsls	r1, r2, #27
 800998a:	bf44      	itt	mi
 800998c:	2320      	movmi	r3, #32
 800998e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009992:	0713      	lsls	r3, r2, #28
 8009994:	bf44      	itt	mi
 8009996:	232b      	movmi	r3, #43	; 0x2b
 8009998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999c:	f89a 3000 	ldrb.w	r3, [sl]
 80099a0:	2b2a      	cmp	r3, #42	; 0x2a
 80099a2:	d015      	beq.n	80099d0 <_vfiprintf_r+0x13c>
 80099a4:	9a07      	ldr	r2, [sp, #28]
 80099a6:	4654      	mov	r4, sl
 80099a8:	2000      	movs	r0, #0
 80099aa:	f04f 0c0a 	mov.w	ip, #10
 80099ae:	4621      	mov	r1, r4
 80099b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b4:	3b30      	subs	r3, #48	; 0x30
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	d94e      	bls.n	8009a58 <_vfiprintf_r+0x1c4>
 80099ba:	b1b0      	cbz	r0, 80099ea <_vfiprintf_r+0x156>
 80099bc:	9207      	str	r2, [sp, #28]
 80099be:	e014      	b.n	80099ea <_vfiprintf_r+0x156>
 80099c0:	eba0 0308 	sub.w	r3, r0, r8
 80099c4:	fa09 f303 	lsl.w	r3, r9, r3
 80099c8:	4313      	orrs	r3, r2
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	46a2      	mov	sl, r4
 80099ce:	e7d2      	b.n	8009976 <_vfiprintf_r+0xe2>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	1d19      	adds	r1, r3, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	9103      	str	r1, [sp, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfbb      	ittet	lt
 80099dc:	425b      	neglt	r3, r3
 80099de:	f042 0202 	orrlt.w	r2, r2, #2
 80099e2:	9307      	strge	r3, [sp, #28]
 80099e4:	9307      	strlt	r3, [sp, #28]
 80099e6:	bfb8      	it	lt
 80099e8:	9204      	strlt	r2, [sp, #16]
 80099ea:	7823      	ldrb	r3, [r4, #0]
 80099ec:	2b2e      	cmp	r3, #46	; 0x2e
 80099ee:	d10c      	bne.n	8009a0a <_vfiprintf_r+0x176>
 80099f0:	7863      	ldrb	r3, [r4, #1]
 80099f2:	2b2a      	cmp	r3, #42	; 0x2a
 80099f4:	d135      	bne.n	8009a62 <_vfiprintf_r+0x1ce>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	1d1a      	adds	r2, r3, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	9203      	str	r2, [sp, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfb8      	it	lt
 8009a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a06:	3402      	adds	r4, #2
 8009a08:	9305      	str	r3, [sp, #20]
 8009a0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009af0 <_vfiprintf_r+0x25c>
 8009a0e:	7821      	ldrb	r1, [r4, #0]
 8009a10:	2203      	movs	r2, #3
 8009a12:	4650      	mov	r0, sl
 8009a14:	f7f6 fbf4 	bl	8000200 <memchr>
 8009a18:	b140      	cbz	r0, 8009a2c <_vfiprintf_r+0x198>
 8009a1a:	2340      	movs	r3, #64	; 0x40
 8009a1c:	eba0 000a 	sub.w	r0, r0, sl
 8009a20:	fa03 f000 	lsl.w	r0, r3, r0
 8009a24:	9b04      	ldr	r3, [sp, #16]
 8009a26:	4303      	orrs	r3, r0
 8009a28:	3401      	adds	r4, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a30:	482c      	ldr	r0, [pc, #176]	; (8009ae4 <_vfiprintf_r+0x250>)
 8009a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a36:	2206      	movs	r2, #6
 8009a38:	f7f6 fbe2 	bl	8000200 <memchr>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d03f      	beq.n	8009ac0 <_vfiprintf_r+0x22c>
 8009a40:	4b29      	ldr	r3, [pc, #164]	; (8009ae8 <_vfiprintf_r+0x254>)
 8009a42:	bb1b      	cbnz	r3, 8009a8c <_vfiprintf_r+0x1f8>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	3307      	adds	r3, #7
 8009a48:	f023 0307 	bic.w	r3, r3, #7
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	443b      	add	r3, r7
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	e767      	b.n	8009928 <_vfiprintf_r+0x94>
 8009a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	2001      	movs	r0, #1
 8009a60:	e7a5      	b.n	80099ae <_vfiprintf_r+0x11a>
 8009a62:	2300      	movs	r3, #0
 8009a64:	3401      	adds	r4, #1
 8009a66:	9305      	str	r3, [sp, #20]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f04f 0c0a 	mov.w	ip, #10
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a74:	3a30      	subs	r2, #48	; 0x30
 8009a76:	2a09      	cmp	r2, #9
 8009a78:	d903      	bls.n	8009a82 <_vfiprintf_r+0x1ee>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0c5      	beq.n	8009a0a <_vfiprintf_r+0x176>
 8009a7e:	9105      	str	r1, [sp, #20]
 8009a80:	e7c3      	b.n	8009a0a <_vfiprintf_r+0x176>
 8009a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a86:	4604      	mov	r4, r0
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e7f0      	b.n	8009a6e <_vfiprintf_r+0x1da>
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	462a      	mov	r2, r5
 8009a92:	4b16      	ldr	r3, [pc, #88]	; (8009aec <_vfiprintf_r+0x258>)
 8009a94:	a904      	add	r1, sp, #16
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7fd fe22 	bl	80076e0 <_printf_float>
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	1c78      	adds	r0, r7, #1
 8009aa0:	d1d6      	bne.n	8009a50 <_vfiprintf_r+0x1bc>
 8009aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa4:	07d9      	lsls	r1, r3, #31
 8009aa6:	d405      	bmi.n	8009ab4 <_vfiprintf_r+0x220>
 8009aa8:	89ab      	ldrh	r3, [r5, #12]
 8009aaa:	059a      	lsls	r2, r3, #22
 8009aac:	d402      	bmi.n	8009ab4 <_vfiprintf_r+0x220>
 8009aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ab0:	f000 faaf 	bl	800a012 <__retarget_lock_release_recursive>
 8009ab4:	89ab      	ldrh	r3, [r5, #12]
 8009ab6:	065b      	lsls	r3, r3, #25
 8009ab8:	f53f af12 	bmi.w	80098e0 <_vfiprintf_r+0x4c>
 8009abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009abe:	e711      	b.n	80098e4 <_vfiprintf_r+0x50>
 8009ac0:	ab03      	add	r3, sp, #12
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	4b09      	ldr	r3, [pc, #36]	; (8009aec <_vfiprintf_r+0x258>)
 8009ac8:	a904      	add	r1, sp, #16
 8009aca:	4630      	mov	r0, r6
 8009acc:	f7fe f8ac 	bl	8007c28 <_printf_i>
 8009ad0:	e7e4      	b.n	8009a9c <_vfiprintf_r+0x208>
 8009ad2:	bf00      	nop
 8009ad4:	0800a7a4 	.word	0x0800a7a4
 8009ad8:	0800a7c4 	.word	0x0800a7c4
 8009adc:	0800a784 	.word	0x0800a784
 8009ae0:	0800a62c 	.word	0x0800a62c
 8009ae4:	0800a636 	.word	0x0800a636
 8009ae8:	080076e1 	.word	0x080076e1
 8009aec:	0800986f 	.word	0x0800986f
 8009af0:	0800a632 	.word	0x0800a632

08009af4 <__swbuf_r>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	460e      	mov	r6, r1
 8009af8:	4614      	mov	r4, r2
 8009afa:	4605      	mov	r5, r0
 8009afc:	b118      	cbz	r0, 8009b06 <__swbuf_r+0x12>
 8009afe:	6983      	ldr	r3, [r0, #24]
 8009b00:	b90b      	cbnz	r3, 8009b06 <__swbuf_r+0x12>
 8009b02:	f000 f9e7 	bl	8009ed4 <__sinit>
 8009b06:	4b21      	ldr	r3, [pc, #132]	; (8009b8c <__swbuf_r+0x98>)
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	d12b      	bne.n	8009b64 <__swbuf_r+0x70>
 8009b0c:	686c      	ldr	r4, [r5, #4]
 8009b0e:	69a3      	ldr	r3, [r4, #24]
 8009b10:	60a3      	str	r3, [r4, #8]
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	071a      	lsls	r2, r3, #28
 8009b16:	d52f      	bpl.n	8009b78 <__swbuf_r+0x84>
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	b36b      	cbz	r3, 8009b78 <__swbuf_r+0x84>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	1ac0      	subs	r0, r0, r3
 8009b22:	6963      	ldr	r3, [r4, #20]
 8009b24:	b2f6      	uxtb	r6, r6
 8009b26:	4283      	cmp	r3, r0
 8009b28:	4637      	mov	r7, r6
 8009b2a:	dc04      	bgt.n	8009b36 <__swbuf_r+0x42>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f93c 	bl	8009dac <_fflush_r>
 8009b34:	bb30      	cbnz	r0, 8009b84 <__swbuf_r+0x90>
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	60a3      	str	r3, [r4, #8]
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	6022      	str	r2, [r4, #0]
 8009b42:	701e      	strb	r6, [r3, #0]
 8009b44:	6963      	ldr	r3, [r4, #20]
 8009b46:	3001      	adds	r0, #1
 8009b48:	4283      	cmp	r3, r0
 8009b4a:	d004      	beq.n	8009b56 <__swbuf_r+0x62>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	07db      	lsls	r3, r3, #31
 8009b50:	d506      	bpl.n	8009b60 <__swbuf_r+0x6c>
 8009b52:	2e0a      	cmp	r6, #10
 8009b54:	d104      	bne.n	8009b60 <__swbuf_r+0x6c>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 f927 	bl	8009dac <_fflush_r>
 8009b5e:	b988      	cbnz	r0, 8009b84 <__swbuf_r+0x90>
 8009b60:	4638      	mov	r0, r7
 8009b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <__swbuf_r+0x9c>)
 8009b66:	429c      	cmp	r4, r3
 8009b68:	d101      	bne.n	8009b6e <__swbuf_r+0x7a>
 8009b6a:	68ac      	ldr	r4, [r5, #8]
 8009b6c:	e7cf      	b.n	8009b0e <__swbuf_r+0x1a>
 8009b6e:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <__swbuf_r+0xa0>)
 8009b70:	429c      	cmp	r4, r3
 8009b72:	bf08      	it	eq
 8009b74:	68ec      	ldreq	r4, [r5, #12]
 8009b76:	e7ca      	b.n	8009b0e <__swbuf_r+0x1a>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f81a 	bl	8009bb4 <__swsetup_r>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d0cb      	beq.n	8009b1c <__swbuf_r+0x28>
 8009b84:	f04f 37ff 	mov.w	r7, #4294967295
 8009b88:	e7ea      	b.n	8009b60 <__swbuf_r+0x6c>
 8009b8a:	bf00      	nop
 8009b8c:	0800a7a4 	.word	0x0800a7a4
 8009b90:	0800a7c4 	.word	0x0800a7c4
 8009b94:	0800a784 	.word	0x0800a784

08009b98 <__ascii_wctomb>:
 8009b98:	b149      	cbz	r1, 8009bae <__ascii_wctomb+0x16>
 8009b9a:	2aff      	cmp	r2, #255	; 0xff
 8009b9c:	bf85      	ittet	hi
 8009b9e:	238a      	movhi	r3, #138	; 0x8a
 8009ba0:	6003      	strhi	r3, [r0, #0]
 8009ba2:	700a      	strbls	r2, [r1, #0]
 8009ba4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ba8:	bf98      	it	ls
 8009baa:	2001      	movls	r0, #1
 8009bac:	4770      	bx	lr
 8009bae:	4608      	mov	r0, r1
 8009bb0:	4770      	bx	lr
	...

08009bb4 <__swsetup_r>:
 8009bb4:	4b32      	ldr	r3, [pc, #200]	; (8009c80 <__swsetup_r+0xcc>)
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	681d      	ldr	r5, [r3, #0]
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	b125      	cbz	r5, 8009bca <__swsetup_r+0x16>
 8009bc0:	69ab      	ldr	r3, [r5, #24]
 8009bc2:	b913      	cbnz	r3, 8009bca <__swsetup_r+0x16>
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f000 f985 	bl	8009ed4 <__sinit>
 8009bca:	4b2e      	ldr	r3, [pc, #184]	; (8009c84 <__swsetup_r+0xd0>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d10f      	bne.n	8009bf0 <__swsetup_r+0x3c>
 8009bd0:	686c      	ldr	r4, [r5, #4]
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bd8:	0719      	lsls	r1, r3, #28
 8009bda:	d42c      	bmi.n	8009c36 <__swsetup_r+0x82>
 8009bdc:	06dd      	lsls	r5, r3, #27
 8009bde:	d411      	bmi.n	8009c04 <__swsetup_r+0x50>
 8009be0:	2309      	movs	r3, #9
 8009be2:	6033      	str	r3, [r6, #0]
 8009be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295
 8009bee:	e03e      	b.n	8009c6e <__swsetup_r+0xba>
 8009bf0:	4b25      	ldr	r3, [pc, #148]	; (8009c88 <__swsetup_r+0xd4>)
 8009bf2:	429c      	cmp	r4, r3
 8009bf4:	d101      	bne.n	8009bfa <__swsetup_r+0x46>
 8009bf6:	68ac      	ldr	r4, [r5, #8]
 8009bf8:	e7eb      	b.n	8009bd2 <__swsetup_r+0x1e>
 8009bfa:	4b24      	ldr	r3, [pc, #144]	; (8009c8c <__swsetup_r+0xd8>)
 8009bfc:	429c      	cmp	r4, r3
 8009bfe:	bf08      	it	eq
 8009c00:	68ec      	ldreq	r4, [r5, #12]
 8009c02:	e7e6      	b.n	8009bd2 <__swsetup_r+0x1e>
 8009c04:	0758      	lsls	r0, r3, #29
 8009c06:	d512      	bpl.n	8009c2e <__swsetup_r+0x7a>
 8009c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c0a:	b141      	cbz	r1, 8009c1e <__swsetup_r+0x6a>
 8009c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d002      	beq.n	8009c1a <__swsetup_r+0x66>
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7ff fb6f 	bl	80092f8 <_free_r>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	2300      	movs	r3, #0
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	6923      	ldr	r3, [r4, #16]
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f043 0308 	orr.w	r3, r3, #8
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	b94b      	cbnz	r3, 8009c4e <__swsetup_r+0x9a>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c44:	d003      	beq.n	8009c4e <__swsetup_r+0x9a>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f000 fa07 	bl	800a05c <__smakebuf_r>
 8009c4e:	89a0      	ldrh	r0, [r4, #12]
 8009c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c54:	f010 0301 	ands.w	r3, r0, #1
 8009c58:	d00a      	beq.n	8009c70 <__swsetup_r+0xbc>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60a3      	str	r3, [r4, #8]
 8009c5e:	6963      	ldr	r3, [r4, #20]
 8009c60:	425b      	negs	r3, r3
 8009c62:	61a3      	str	r3, [r4, #24]
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	b943      	cbnz	r3, 8009c7a <__swsetup_r+0xc6>
 8009c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c6c:	d1ba      	bne.n	8009be4 <__swsetup_r+0x30>
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	0781      	lsls	r1, r0, #30
 8009c72:	bf58      	it	pl
 8009c74:	6963      	ldrpl	r3, [r4, #20]
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	e7f4      	b.n	8009c64 <__swsetup_r+0xb0>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e7f7      	b.n	8009c6e <__swsetup_r+0xba>
 8009c7e:	bf00      	nop
 8009c80:	2000000c 	.word	0x2000000c
 8009c84:	0800a7a4 	.word	0x0800a7a4
 8009c88:	0800a7c4 	.word	0x0800a7c4
 8009c8c:	0800a784 	.word	0x0800a784

08009c90 <abort>:
 8009c90:	b508      	push	{r3, lr}
 8009c92:	2006      	movs	r0, #6
 8009c94:	f000 fa52 	bl	800a13c <raise>
 8009c98:	2001      	movs	r0, #1
 8009c9a:	f7f8 fdcd 	bl	8002838 <_exit>
	...

08009ca0 <__sflush_r>:
 8009ca0:	898a      	ldrh	r2, [r1, #12]
 8009ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	0710      	lsls	r0, r2, #28
 8009caa:	460c      	mov	r4, r1
 8009cac:	d458      	bmi.n	8009d60 <__sflush_r+0xc0>
 8009cae:	684b      	ldr	r3, [r1, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dc05      	bgt.n	8009cc0 <__sflush_r+0x20>
 8009cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dc02      	bgt.n	8009cc0 <__sflush_r+0x20>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cc2:	2e00      	cmp	r6, #0
 8009cc4:	d0f9      	beq.n	8009cba <__sflush_r+0x1a>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ccc:	682f      	ldr	r7, [r5, #0]
 8009cce:	602b      	str	r3, [r5, #0]
 8009cd0:	d032      	beq.n	8009d38 <__sflush_r+0x98>
 8009cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	075a      	lsls	r2, r3, #29
 8009cd8:	d505      	bpl.n	8009ce6 <__sflush_r+0x46>
 8009cda:	6863      	ldr	r3, [r4, #4]
 8009cdc:	1ac0      	subs	r0, r0, r3
 8009cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ce0:	b10b      	cbz	r3, 8009ce6 <__sflush_r+0x46>
 8009ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ce4:	1ac0      	subs	r0, r0, r3
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cec:	6a21      	ldr	r1, [r4, #32]
 8009cee:	4628      	mov	r0, r5
 8009cf0:	47b0      	blx	r6
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	d106      	bne.n	8009d06 <__sflush_r+0x66>
 8009cf8:	6829      	ldr	r1, [r5, #0]
 8009cfa:	291d      	cmp	r1, #29
 8009cfc:	d82c      	bhi.n	8009d58 <__sflush_r+0xb8>
 8009cfe:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <__sflush_r+0x108>)
 8009d00:	40ca      	lsrs	r2, r1
 8009d02:	07d6      	lsls	r6, r2, #31
 8009d04:	d528      	bpl.n	8009d58 <__sflush_r+0xb8>
 8009d06:	2200      	movs	r2, #0
 8009d08:	6062      	str	r2, [r4, #4]
 8009d0a:	04d9      	lsls	r1, r3, #19
 8009d0c:	6922      	ldr	r2, [r4, #16]
 8009d0e:	6022      	str	r2, [r4, #0]
 8009d10:	d504      	bpl.n	8009d1c <__sflush_r+0x7c>
 8009d12:	1c42      	adds	r2, r0, #1
 8009d14:	d101      	bne.n	8009d1a <__sflush_r+0x7a>
 8009d16:	682b      	ldr	r3, [r5, #0]
 8009d18:	b903      	cbnz	r3, 8009d1c <__sflush_r+0x7c>
 8009d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d1e:	602f      	str	r7, [r5, #0]
 8009d20:	2900      	cmp	r1, #0
 8009d22:	d0ca      	beq.n	8009cba <__sflush_r+0x1a>
 8009d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	d002      	beq.n	8009d32 <__sflush_r+0x92>
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f7ff fae3 	bl	80092f8 <_free_r>
 8009d32:	2000      	movs	r0, #0
 8009d34:	6360      	str	r0, [r4, #52]	; 0x34
 8009d36:	e7c1      	b.n	8009cbc <__sflush_r+0x1c>
 8009d38:	6a21      	ldr	r1, [r4, #32]
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b0      	blx	r6
 8009d40:	1c41      	adds	r1, r0, #1
 8009d42:	d1c7      	bne.n	8009cd4 <__sflush_r+0x34>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0c4      	beq.n	8009cd4 <__sflush_r+0x34>
 8009d4a:	2b1d      	cmp	r3, #29
 8009d4c:	d001      	beq.n	8009d52 <__sflush_r+0xb2>
 8009d4e:	2b16      	cmp	r3, #22
 8009d50:	d101      	bne.n	8009d56 <__sflush_r+0xb6>
 8009d52:	602f      	str	r7, [r5, #0]
 8009d54:	e7b1      	b.n	8009cba <__sflush_r+0x1a>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	e7ad      	b.n	8009cbc <__sflush_r+0x1c>
 8009d60:	690f      	ldr	r7, [r1, #16]
 8009d62:	2f00      	cmp	r7, #0
 8009d64:	d0a9      	beq.n	8009cba <__sflush_r+0x1a>
 8009d66:	0793      	lsls	r3, r2, #30
 8009d68:	680e      	ldr	r6, [r1, #0]
 8009d6a:	bf08      	it	eq
 8009d6c:	694b      	ldreq	r3, [r1, #20]
 8009d6e:	600f      	str	r7, [r1, #0]
 8009d70:	bf18      	it	ne
 8009d72:	2300      	movne	r3, #0
 8009d74:	eba6 0807 	sub.w	r8, r6, r7
 8009d78:	608b      	str	r3, [r1, #8]
 8009d7a:	f1b8 0f00 	cmp.w	r8, #0
 8009d7e:	dd9c      	ble.n	8009cba <__sflush_r+0x1a>
 8009d80:	6a21      	ldr	r1, [r4, #32]
 8009d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d84:	4643      	mov	r3, r8
 8009d86:	463a      	mov	r2, r7
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b0      	blx	r6
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	dc06      	bgt.n	8009d9e <__sflush_r+0xfe>
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9c:	e78e      	b.n	8009cbc <__sflush_r+0x1c>
 8009d9e:	4407      	add	r7, r0
 8009da0:	eba8 0800 	sub.w	r8, r8, r0
 8009da4:	e7e9      	b.n	8009d7a <__sflush_r+0xda>
 8009da6:	bf00      	nop
 8009da8:	20400001 	.word	0x20400001

08009dac <_fflush_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	690b      	ldr	r3, [r1, #16]
 8009db0:	4605      	mov	r5, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	b913      	cbnz	r3, 8009dbc <_fflush_r+0x10>
 8009db6:	2500      	movs	r5, #0
 8009db8:	4628      	mov	r0, r5
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	b118      	cbz	r0, 8009dc6 <_fflush_r+0x1a>
 8009dbe:	6983      	ldr	r3, [r0, #24]
 8009dc0:	b90b      	cbnz	r3, 8009dc6 <_fflush_r+0x1a>
 8009dc2:	f000 f887 	bl	8009ed4 <__sinit>
 8009dc6:	4b14      	ldr	r3, [pc, #80]	; (8009e18 <_fflush_r+0x6c>)
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	d11b      	bne.n	8009e04 <_fflush_r+0x58>
 8009dcc:	686c      	ldr	r4, [r5, #4]
 8009dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0ef      	beq.n	8009db6 <_fflush_r+0xa>
 8009dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dd8:	07d0      	lsls	r0, r2, #31
 8009dda:	d404      	bmi.n	8009de6 <_fflush_r+0x3a>
 8009ddc:	0599      	lsls	r1, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_fflush_r+0x3a>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f000 f915 	bl	800a010 <__retarget_lock_acquire_recursive>
 8009de6:	4628      	mov	r0, r5
 8009de8:	4621      	mov	r1, r4
 8009dea:	f7ff ff59 	bl	8009ca0 <__sflush_r>
 8009dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009df0:	07da      	lsls	r2, r3, #31
 8009df2:	4605      	mov	r5, r0
 8009df4:	d4e0      	bmi.n	8009db8 <_fflush_r+0xc>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	059b      	lsls	r3, r3, #22
 8009dfa:	d4dd      	bmi.n	8009db8 <_fflush_r+0xc>
 8009dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dfe:	f000 f908 	bl	800a012 <__retarget_lock_release_recursive>
 8009e02:	e7d9      	b.n	8009db8 <_fflush_r+0xc>
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <_fflush_r+0x70>)
 8009e06:	429c      	cmp	r4, r3
 8009e08:	d101      	bne.n	8009e0e <_fflush_r+0x62>
 8009e0a:	68ac      	ldr	r4, [r5, #8]
 8009e0c:	e7df      	b.n	8009dce <_fflush_r+0x22>
 8009e0e:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <_fflush_r+0x74>)
 8009e10:	429c      	cmp	r4, r3
 8009e12:	bf08      	it	eq
 8009e14:	68ec      	ldreq	r4, [r5, #12]
 8009e16:	e7da      	b.n	8009dce <_fflush_r+0x22>
 8009e18:	0800a7a4 	.word	0x0800a7a4
 8009e1c:	0800a7c4 	.word	0x0800a7c4
 8009e20:	0800a784 	.word	0x0800a784

08009e24 <std>:
 8009e24:	2300      	movs	r3, #0
 8009e26:	b510      	push	{r4, lr}
 8009e28:	4604      	mov	r4, r0
 8009e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e32:	6083      	str	r3, [r0, #8]
 8009e34:	8181      	strh	r1, [r0, #12]
 8009e36:	6643      	str	r3, [r0, #100]	; 0x64
 8009e38:	81c2      	strh	r2, [r0, #14]
 8009e3a:	6183      	str	r3, [r0, #24]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	2208      	movs	r2, #8
 8009e40:	305c      	adds	r0, #92	; 0x5c
 8009e42:	f7fd fba5 	bl	8007590 <memset>
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <std+0x38>)
 8009e48:	6263      	str	r3, [r4, #36]	; 0x24
 8009e4a:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <std+0x3c>)
 8009e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <std+0x40>)
 8009e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <std+0x44>)
 8009e54:	6224      	str	r4, [r4, #32]
 8009e56:	6323      	str	r3, [r4, #48]	; 0x30
 8009e58:	bd10      	pop	{r4, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0800a175 	.word	0x0800a175
 8009e60:	0800a197 	.word	0x0800a197
 8009e64:	0800a1cf 	.word	0x0800a1cf
 8009e68:	0800a1f3 	.word	0x0800a1f3

08009e6c <_cleanup_r>:
 8009e6c:	4901      	ldr	r1, [pc, #4]	; (8009e74 <_cleanup_r+0x8>)
 8009e6e:	f000 b8af 	b.w	8009fd0 <_fwalk_reent>
 8009e72:	bf00      	nop
 8009e74:	08009dad 	.word	0x08009dad

08009e78 <__sfmoreglue>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	1e4a      	subs	r2, r1, #1
 8009e7c:	2568      	movs	r5, #104	; 0x68
 8009e7e:	4355      	muls	r5, r2
 8009e80:	460e      	mov	r6, r1
 8009e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e86:	f7ff fa87 	bl	8009398 <_malloc_r>
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	b140      	cbz	r0, 8009ea0 <__sfmoreglue+0x28>
 8009e8e:	2100      	movs	r1, #0
 8009e90:	e9c0 1600 	strd	r1, r6, [r0]
 8009e94:	300c      	adds	r0, #12
 8009e96:	60a0      	str	r0, [r4, #8]
 8009e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e9c:	f7fd fb78 	bl	8007590 <memset>
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}

08009ea4 <__sfp_lock_acquire>:
 8009ea4:	4801      	ldr	r0, [pc, #4]	; (8009eac <__sfp_lock_acquire+0x8>)
 8009ea6:	f000 b8b3 	b.w	800a010 <__retarget_lock_acquire_recursive>
 8009eaa:	bf00      	nop
 8009eac:	20000a08 	.word	0x20000a08

08009eb0 <__sfp_lock_release>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__sfp_lock_release+0x8>)
 8009eb2:	f000 b8ae 	b.w	800a012 <__retarget_lock_release_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	20000a08 	.word	0x20000a08

08009ebc <__sinit_lock_acquire>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	; (8009ec4 <__sinit_lock_acquire+0x8>)
 8009ebe:	f000 b8a7 	b.w	800a010 <__retarget_lock_acquire_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	20000a03 	.word	0x20000a03

08009ec8 <__sinit_lock_release>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	; (8009ed0 <__sinit_lock_release+0x8>)
 8009eca:	f000 b8a2 	b.w	800a012 <__retarget_lock_release_recursive>
 8009ece:	bf00      	nop
 8009ed0:	20000a03 	.word	0x20000a03

08009ed4 <__sinit>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	f7ff fff0 	bl	8009ebc <__sinit_lock_acquire>
 8009edc:	69a3      	ldr	r3, [r4, #24]
 8009ede:	b11b      	cbz	r3, 8009ee8 <__sinit+0x14>
 8009ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee4:	f7ff bff0 	b.w	8009ec8 <__sinit_lock_release>
 8009ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009eec:	6523      	str	r3, [r4, #80]	; 0x50
 8009eee:	4b13      	ldr	r3, [pc, #76]	; (8009f3c <__sinit+0x68>)
 8009ef0:	4a13      	ldr	r2, [pc, #76]	; (8009f40 <__sinit+0x6c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ef6:	42a3      	cmp	r3, r4
 8009ef8:	bf04      	itt	eq
 8009efa:	2301      	moveq	r3, #1
 8009efc:	61a3      	streq	r3, [r4, #24]
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f820 	bl	8009f44 <__sfp>
 8009f04:	6060      	str	r0, [r4, #4]
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f81c 	bl	8009f44 <__sfp>
 8009f0c:	60a0      	str	r0, [r4, #8]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 f818 	bl	8009f44 <__sfp>
 8009f14:	2200      	movs	r2, #0
 8009f16:	60e0      	str	r0, [r4, #12]
 8009f18:	2104      	movs	r1, #4
 8009f1a:	6860      	ldr	r0, [r4, #4]
 8009f1c:	f7ff ff82 	bl	8009e24 <std>
 8009f20:	68a0      	ldr	r0, [r4, #8]
 8009f22:	2201      	movs	r2, #1
 8009f24:	2109      	movs	r1, #9
 8009f26:	f7ff ff7d 	bl	8009e24 <std>
 8009f2a:	68e0      	ldr	r0, [r4, #12]
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	2112      	movs	r1, #18
 8009f30:	f7ff ff78 	bl	8009e24 <std>
 8009f34:	2301      	movs	r3, #1
 8009f36:	61a3      	str	r3, [r4, #24]
 8009f38:	e7d2      	b.n	8009ee0 <__sinit+0xc>
 8009f3a:	bf00      	nop
 8009f3c:	0800a404 	.word	0x0800a404
 8009f40:	08009e6d 	.word	0x08009e6d

08009f44 <__sfp>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	4607      	mov	r7, r0
 8009f48:	f7ff ffac 	bl	8009ea4 <__sfp_lock_acquire>
 8009f4c:	4b1e      	ldr	r3, [pc, #120]	; (8009fc8 <__sfp+0x84>)
 8009f4e:	681e      	ldr	r6, [r3, #0]
 8009f50:	69b3      	ldr	r3, [r6, #24]
 8009f52:	b913      	cbnz	r3, 8009f5a <__sfp+0x16>
 8009f54:	4630      	mov	r0, r6
 8009f56:	f7ff ffbd 	bl	8009ed4 <__sinit>
 8009f5a:	3648      	adds	r6, #72	; 0x48
 8009f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	d503      	bpl.n	8009f6c <__sfp+0x28>
 8009f64:	6833      	ldr	r3, [r6, #0]
 8009f66:	b30b      	cbz	r3, 8009fac <__sfp+0x68>
 8009f68:	6836      	ldr	r6, [r6, #0]
 8009f6a:	e7f7      	b.n	8009f5c <__sfp+0x18>
 8009f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f70:	b9d5      	cbnz	r5, 8009fa8 <__sfp+0x64>
 8009f72:	4b16      	ldr	r3, [pc, #88]	; (8009fcc <__sfp+0x88>)
 8009f74:	60e3      	str	r3, [r4, #12]
 8009f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009f7c:	f000 f847 	bl	800a00e <__retarget_lock_init_recursive>
 8009f80:	f7ff ff96 	bl	8009eb0 <__sfp_lock_release>
 8009f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f8c:	6025      	str	r5, [r4, #0]
 8009f8e:	61a5      	str	r5, [r4, #24]
 8009f90:	2208      	movs	r2, #8
 8009f92:	4629      	mov	r1, r5
 8009f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f98:	f7fd fafa 	bl	8007590 <memset>
 8009f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa8:	3468      	adds	r4, #104	; 0x68
 8009faa:	e7d9      	b.n	8009f60 <__sfp+0x1c>
 8009fac:	2104      	movs	r1, #4
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7ff ff62 	bl	8009e78 <__sfmoreglue>
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	6030      	str	r0, [r6, #0]
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d1d5      	bne.n	8009f68 <__sfp+0x24>
 8009fbc:	f7ff ff78 	bl	8009eb0 <__sfp_lock_release>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	e7ee      	b.n	8009fa4 <__sfp+0x60>
 8009fc6:	bf00      	nop
 8009fc8:	0800a404 	.word	0x0800a404
 8009fcc:	ffff0001 	.word	0xffff0001

08009fd0 <_fwalk_reent>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	4688      	mov	r8, r1
 8009fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fdc:	2700      	movs	r7, #0
 8009fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8009fe6:	d505      	bpl.n	8009ff4 <_fwalk_reent+0x24>
 8009fe8:	6824      	ldr	r4, [r4, #0]
 8009fea:	2c00      	cmp	r4, #0
 8009fec:	d1f7      	bne.n	8009fde <_fwalk_reent+0xe>
 8009fee:	4638      	mov	r0, r7
 8009ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff4:	89ab      	ldrh	r3, [r5, #12]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d907      	bls.n	800a00a <_fwalk_reent+0x3a>
 8009ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ffe:	3301      	adds	r3, #1
 800a000:	d003      	beq.n	800a00a <_fwalk_reent+0x3a>
 800a002:	4629      	mov	r1, r5
 800a004:	4630      	mov	r0, r6
 800a006:	47c0      	blx	r8
 800a008:	4307      	orrs	r7, r0
 800a00a:	3568      	adds	r5, #104	; 0x68
 800a00c:	e7e9      	b.n	8009fe2 <_fwalk_reent+0x12>

0800a00e <__retarget_lock_init_recursive>:
 800a00e:	4770      	bx	lr

0800a010 <__retarget_lock_acquire_recursive>:
 800a010:	4770      	bx	lr

0800a012 <__retarget_lock_release_recursive>:
 800a012:	4770      	bx	lr

0800a014 <__swhatbuf_r>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	460e      	mov	r6, r1
 800a018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01c:	2900      	cmp	r1, #0
 800a01e:	b096      	sub	sp, #88	; 0x58
 800a020:	4614      	mov	r4, r2
 800a022:	461d      	mov	r5, r3
 800a024:	da07      	bge.n	800a036 <__swhatbuf_r+0x22>
 800a026:	2300      	movs	r3, #0
 800a028:	602b      	str	r3, [r5, #0]
 800a02a:	89b3      	ldrh	r3, [r6, #12]
 800a02c:	061a      	lsls	r2, r3, #24
 800a02e:	d410      	bmi.n	800a052 <__swhatbuf_r+0x3e>
 800a030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a034:	e00e      	b.n	800a054 <__swhatbuf_r+0x40>
 800a036:	466a      	mov	r2, sp
 800a038:	f000 f902 	bl	800a240 <_fstat_r>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	dbf2      	blt.n	800a026 <__swhatbuf_r+0x12>
 800a040:	9a01      	ldr	r2, [sp, #4]
 800a042:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a046:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a04a:	425a      	negs	r2, r3
 800a04c:	415a      	adcs	r2, r3
 800a04e:	602a      	str	r2, [r5, #0]
 800a050:	e7ee      	b.n	800a030 <__swhatbuf_r+0x1c>
 800a052:	2340      	movs	r3, #64	; 0x40
 800a054:	2000      	movs	r0, #0
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	b016      	add	sp, #88	; 0x58
 800a05a:	bd70      	pop	{r4, r5, r6, pc}

0800a05c <__smakebuf_r>:
 800a05c:	898b      	ldrh	r3, [r1, #12]
 800a05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a060:	079d      	lsls	r5, r3, #30
 800a062:	4606      	mov	r6, r0
 800a064:	460c      	mov	r4, r1
 800a066:	d507      	bpl.n	800a078 <__smakebuf_r+0x1c>
 800a068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	6123      	str	r3, [r4, #16]
 800a070:	2301      	movs	r3, #1
 800a072:	6163      	str	r3, [r4, #20]
 800a074:	b002      	add	sp, #8
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	ab01      	add	r3, sp, #4
 800a07a:	466a      	mov	r2, sp
 800a07c:	f7ff ffca 	bl	800a014 <__swhatbuf_r>
 800a080:	9900      	ldr	r1, [sp, #0]
 800a082:	4605      	mov	r5, r0
 800a084:	4630      	mov	r0, r6
 800a086:	f7ff f987 	bl	8009398 <_malloc_r>
 800a08a:	b948      	cbnz	r0, 800a0a0 <__smakebuf_r+0x44>
 800a08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a090:	059a      	lsls	r2, r3, #22
 800a092:	d4ef      	bmi.n	800a074 <__smakebuf_r+0x18>
 800a094:	f023 0303 	bic.w	r3, r3, #3
 800a098:	f043 0302 	orr.w	r3, r3, #2
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	e7e3      	b.n	800a068 <__smakebuf_r+0xc>
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <__smakebuf_r+0x7c>)
 800a0a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	6020      	str	r0, [r4, #0]
 800a0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	9b00      	ldr	r3, [sp, #0]
 800a0b0:	6163      	str	r3, [r4, #20]
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	6120      	str	r0, [r4, #16]
 800a0b6:	b15b      	cbz	r3, 800a0d0 <__smakebuf_r+0x74>
 800a0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 f8d1 	bl	800a264 <_isatty_r>
 800a0c2:	b128      	cbz	r0, 800a0d0 <__smakebuf_r+0x74>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	f023 0303 	bic.w	r3, r3, #3
 800a0ca:	f043 0301 	orr.w	r3, r3, #1
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	89a0      	ldrh	r0, [r4, #12]
 800a0d2:	4305      	orrs	r5, r0
 800a0d4:	81a5      	strh	r5, [r4, #12]
 800a0d6:	e7cd      	b.n	800a074 <__smakebuf_r+0x18>
 800a0d8:	08009e6d 	.word	0x08009e6d

0800a0dc <_malloc_usable_size_r>:
 800a0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e0:	1f18      	subs	r0, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfbc      	itt	lt
 800a0e6:	580b      	ldrlt	r3, [r1, r0]
 800a0e8:	18c0      	addlt	r0, r0, r3
 800a0ea:	4770      	bx	lr

0800a0ec <_raise_r>:
 800a0ec:	291f      	cmp	r1, #31
 800a0ee:	b538      	push	{r3, r4, r5, lr}
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	460d      	mov	r5, r1
 800a0f4:	d904      	bls.n	800a100 <_raise_r+0x14>
 800a0f6:	2316      	movs	r3, #22
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a102:	b112      	cbz	r2, 800a10a <_raise_r+0x1e>
 800a104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a108:	b94b      	cbnz	r3, 800a11e <_raise_r+0x32>
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 f830 	bl	800a170 <_getpid_r>
 800a110:	462a      	mov	r2, r5
 800a112:	4601      	mov	r1, r0
 800a114:	4620      	mov	r0, r4
 800a116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a11a:	f000 b817 	b.w	800a14c <_kill_r>
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d00a      	beq.n	800a138 <_raise_r+0x4c>
 800a122:	1c59      	adds	r1, r3, #1
 800a124:	d103      	bne.n	800a12e <_raise_r+0x42>
 800a126:	2316      	movs	r3, #22
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	2001      	movs	r0, #1
 800a12c:	e7e7      	b.n	800a0fe <_raise_r+0x12>
 800a12e:	2400      	movs	r4, #0
 800a130:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a134:	4628      	mov	r0, r5
 800a136:	4798      	blx	r3
 800a138:	2000      	movs	r0, #0
 800a13a:	e7e0      	b.n	800a0fe <_raise_r+0x12>

0800a13c <raise>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	; (800a148 <raise+0xc>)
 800a13e:	4601      	mov	r1, r0
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f7ff bfd3 	b.w	800a0ec <_raise_r>
 800a146:	bf00      	nop
 800a148:	2000000c 	.word	0x2000000c

0800a14c <_kill_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	; (800a16c <_kill_r+0x20>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	f7f8 fb5d 	bl	8002818 <_kill>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d102      	bne.n	800a168 <_kill_r+0x1c>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	b103      	cbz	r3, 800a168 <_kill_r+0x1c>
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	bf00      	nop
 800a16c:	200009fc 	.word	0x200009fc

0800a170 <_getpid_r>:
 800a170:	f7f8 bb4a 	b.w	8002808 <_getpid>

0800a174 <__sread>:
 800a174:	b510      	push	{r4, lr}
 800a176:	460c      	mov	r4, r1
 800a178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17c:	f000 f894 	bl	800a2a8 <_read_r>
 800a180:	2800      	cmp	r0, #0
 800a182:	bfab      	itete	ge
 800a184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a186:	89a3      	ldrhlt	r3, [r4, #12]
 800a188:	181b      	addge	r3, r3, r0
 800a18a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a18e:	bfac      	ite	ge
 800a190:	6563      	strge	r3, [r4, #84]	; 0x54
 800a192:	81a3      	strhlt	r3, [r4, #12]
 800a194:	bd10      	pop	{r4, pc}

0800a196 <__swrite>:
 800a196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	461f      	mov	r7, r3
 800a19c:	898b      	ldrh	r3, [r1, #12]
 800a19e:	05db      	lsls	r3, r3, #23
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	d505      	bpl.n	800a1b4 <__swrite+0x1e>
 800a1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f000 f868 	bl	800a284 <_lseek_r>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ca:	f000 b817 	b.w	800a1fc <_write_r>

0800a1ce <__sseek>:
 800a1ce:	b510      	push	{r4, lr}
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d6:	f000 f855 	bl	800a284 <_lseek_r>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	bf15      	itete	ne
 800a1e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1ea:	81a3      	strheq	r3, [r4, #12]
 800a1ec:	bf18      	it	ne
 800a1ee:	81a3      	strhne	r3, [r4, #12]
 800a1f0:	bd10      	pop	{r4, pc}

0800a1f2 <__sclose>:
 800a1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f6:	f000 b813 	b.w	800a220 <_close_r>
	...

0800a1fc <_write_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d07      	ldr	r5, [pc, #28]	; (800a21c <_write_r+0x20>)
 800a200:	4604      	mov	r4, r0
 800a202:	4608      	mov	r0, r1
 800a204:	4611      	mov	r1, r2
 800a206:	2200      	movs	r2, #0
 800a208:	602a      	str	r2, [r5, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f7f8 fb3b 	bl	8002886 <_write>
 800a210:	1c43      	adds	r3, r0, #1
 800a212:	d102      	bne.n	800a21a <_write_r+0x1e>
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	b103      	cbz	r3, 800a21a <_write_r+0x1e>
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	200009fc 	.word	0x200009fc

0800a220 <_close_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d06      	ldr	r5, [pc, #24]	; (800a23c <_close_r+0x1c>)
 800a224:	2300      	movs	r3, #0
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	f7f8 fb47 	bl	80028be <_close>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_close_r+0x1a>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_close_r+0x1a>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	200009fc 	.word	0x200009fc

0800a240 <_fstat_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4d07      	ldr	r5, [pc, #28]	; (800a260 <_fstat_r+0x20>)
 800a244:	2300      	movs	r3, #0
 800a246:	4604      	mov	r4, r0
 800a248:	4608      	mov	r0, r1
 800a24a:	4611      	mov	r1, r2
 800a24c:	602b      	str	r3, [r5, #0]
 800a24e:	f7f8 fb42 	bl	80028d6 <_fstat>
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	d102      	bne.n	800a25c <_fstat_r+0x1c>
 800a256:	682b      	ldr	r3, [r5, #0]
 800a258:	b103      	cbz	r3, 800a25c <_fstat_r+0x1c>
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	bd38      	pop	{r3, r4, r5, pc}
 800a25e:	bf00      	nop
 800a260:	200009fc 	.word	0x200009fc

0800a264 <_isatty_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d06      	ldr	r5, [pc, #24]	; (800a280 <_isatty_r+0x1c>)
 800a268:	2300      	movs	r3, #0
 800a26a:	4604      	mov	r4, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	f7f8 fb41 	bl	80028f6 <_isatty>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_isatty_r+0x1a>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_isatty_r+0x1a>
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	200009fc 	.word	0x200009fc

0800a284 <_lseek_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d07      	ldr	r5, [pc, #28]	; (800a2a4 <_lseek_r+0x20>)
 800a288:	4604      	mov	r4, r0
 800a28a:	4608      	mov	r0, r1
 800a28c:	4611      	mov	r1, r2
 800a28e:	2200      	movs	r2, #0
 800a290:	602a      	str	r2, [r5, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f7f8 fb3a 	bl	800290c <_lseek>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_lseek_r+0x1e>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_lseek_r+0x1e>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	200009fc 	.word	0x200009fc

0800a2a8 <_read_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	; (800a2c8 <_read_r+0x20>)
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	602a      	str	r2, [r5, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f7f8 fac8 	bl	800284c <_read>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_read_r+0x1e>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_read_r+0x1e>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	200009fc 	.word	0x200009fc

0800a2cc <_init>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr

0800a2d8 <_fini>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	bf00      	nop
 800a2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2de:	bc08      	pop	{r3}
 800a2e0:	469e      	mov	lr, r3
 800a2e2:	4770      	bx	lr
