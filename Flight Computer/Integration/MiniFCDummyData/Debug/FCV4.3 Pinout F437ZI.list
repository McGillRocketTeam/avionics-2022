
FCV4.3 Pinout F437ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009440  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080095f0  080095f0  000195f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009acc  08009acc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009acc  08009acc  00019acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad4  08009ad4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00001294  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000148c  2000148c  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002674a  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ec7  00000000  00000000  00046972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  0004a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c78  00000000  00000000  0004c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000056f8  00000000  00000000  0004e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000200f1  00000000  00000000  00053968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fddd9  00000000  00000000  00073a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00171832  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090e4  00000000  00000000  00171888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080095d8 	.word	0x080095d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	080095d8 	.word	0x080095d8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b097      	sub	sp, #92	; 0x5c
 8000ec4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f001 f9fb 	bl	80022c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f857 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 fb7b 	bl	80015c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ed2:	f000 f8c1 	bl	8001058 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ed6:	f000 f911 	bl	80010fc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000eda:	f000 f94f 	bl	800117c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000ede:	f000 f98d 	bl	80011fc <MX_I2C3_Init>
  MX_SPI2_Init();
 8000ee2:	f000 f9cb 	bl	800127c <MX_SPI2_Init>
  MX_SPI4_Init();
 8000ee6:	f000 f9ff 	bl	80012e8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000eea:	f000 fa33 	bl	8001354 <MX_SPI5_Init>
  MX_TIM2_Init();
 8000eee:	f000 fa67 	bl	80013c0 <MX_TIM2_Init>
  MX_UART8_Init();
 8000ef2:	f000 fabd 	bl	8001470 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000ef6:	f000 fae5 	bl	80014c4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000efa:	f000 fb0d 	bl	8001518 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000efe:	f000 fb35 	bl	800156c <MX_USB_OTG_FS_PCD_Init>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer[10]="abcdefghij";
 8000f02:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <main+0xac>)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f08:	c303      	stmia	r3!, {r0, r1}
 8000f0a:	801a      	strh	r2, [r3, #0]
	set_hspi(hspi2);
 8000f0c:	4c18      	ldr	r4, [pc, #96]	; (8000f70 <main+0xb0>)
 8000f0e:	4668      	mov	r0, sp
 8000f10:	f104 0310 	add.w	r3, r4, #16
 8000f14:	2248      	movs	r2, #72	; 0x48
 8000f16:	4619      	mov	r1, r3
 8000f18:	f005 ff84 	bl	8006e24 <memcpy>
 8000f1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f20:	f004 fee2 	bl	8005ce8 <set_hspi>
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 8000f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f28:	4812      	ldr	r0, [pc, #72]	; (8000f74 <main+0xb4>)
 8000f2a:	f004 fe85 	bl	8005c38 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4811      	ldr	r0, [pc, #68]	; (8000f78 <main+0xb8>)
 8000f32:	f004 fe97 	bl	8005c64 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8000f36:	2104      	movs	r1, #4
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <main+0xb8>)
 8000f3a:	f004 fea9 	bl	8005c90 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8000f3e:	2110      	movs	r1, #16
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <main+0xb8>)
 8000f42:	f004 febb 	bl	8005cbc <set_DIO1_pin>
	Tx_setup();
 8000f46:	f004 fee7 	bl	8005d18 <Tx_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TxProtocol(buffer, strlen(buffer));
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f94f 	bl	80001f0 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 fff0 	bl	8005f40 <TxProtocol>
	  HAL_Delay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f001 f9ee 	bl	8002344 <HAL_Delay>
	  TxProtocol(buffer, strlen(buffer));
 8000f68:	e7ef      	b.n	8000f4a <main+0x8a>
 8000f6a:	bf00      	nop
 8000f6c:	0800960c 	.word	0x0800960c
 8000f70:	20000784 	.word	0x20000784
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40021800 	.word	0x40021800

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 ff58 	bl	8006e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <SystemClock_Config+0xd4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a29      	ldr	r2, [pc, #164]	; (8001050 <SystemClock_Config+0xd4>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <SystemClock_Config+0xd4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <SystemClock_Config+0xd8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc8:	4a22      	ldr	r2, [pc, #136]	; (8001054 <SystemClock_Config+0xd8>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <SystemClock_Config+0xd8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fea:	2310      	movs	r3, #16
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ffc:	23c0      	movs	r3, #192	; 0xc0
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001004:	2304      	movs	r3, #4
 8001006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f9cb 	bl	80033a8 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001018:	f000 fc70 	bl	80018fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f002 fc2e 	bl	8003898 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001042:	f000 fc5b 	bl	80018fc <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	; 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_ADC1_Init+0x98>)
 800106c:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <MX_ADC1_Init+0x9c>)
 800106e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_ADC1_Init+0x98>)
 8001098:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <MX_ADC1_Init+0xa0>)
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_ADC1_Init+0x98>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_ADC1_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_ADC1_Init+0x98>)
 80010b8:	f001 f968 	bl	800238c <HAL_ADC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010c2:	f000 fc1b 	bl	80018fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010c6:	2306      	movs	r3, #6
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_ADC1_Init+0x98>)
 80010d8:	f001 f99c 	bl	8002414 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010e2:	f000 fc0b 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000f28 	.word	0x20000f28
 80010f4:	40012000 	.word	0x40012000
 80010f8:	0f000001 	.word	0x0f000001

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_I2C1_Init+0x74>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <MX_I2C1_Init+0x78>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_I2C1_Init+0x74>)
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <MX_I2C1_Init+0x7c>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_I2C1_Init+0x74>)
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_I2C1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_I2C1_Init+0x74>)
 800113a:	f001 fe59 	bl	8002df0 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 fbda 	bl	80018fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <MX_I2C1_Init+0x74>)
 800114c:	f001 ff94 	bl	8003078 <HAL_I2CEx_ConfigAnalogFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001156:	f000 fbd1 	bl	80018fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800115a:	2100      	movs	r1, #0
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_I2C1_Init+0x74>)
 800115e:	f001 ffc7 	bl	80030f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 fbc8 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000a78 	.word	0x20000a78
 8001174:	40005400 	.word	0x40005400
 8001178:	000186a0 	.word	0x000186a0

0800117c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_I2C2_Init+0x74>)
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <MX_I2C2_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_I2C2_Init+0x74>)
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <MX_I2C2_Init+0x7c>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_I2C2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_I2C2_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_I2C2_Init+0x74>)
 800119a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_I2C2_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_I2C2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_I2C2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_I2C2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_I2C2_Init+0x74>)
 80011ba:	f001 fe19 	bl	8002df0 <HAL_I2C_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 fb9a 	bl	80018fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <MX_I2C2_Init+0x74>)
 80011cc:	f001 ff54 	bl	8003078 <HAL_I2CEx_ConfigAnalogFilter>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80011d6:	f000 fb91 	bl	80018fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_I2C2_Init+0x74>)
 80011de:	f001 ff87 	bl	80030f0 <HAL_I2CEx_ConfigDigitalFilter>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011e8:	f000 fb88 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000ed4 	.word	0x20000ed4
 80011f4:	40005800 	.word	0x40005800
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_I2C3_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <MX_I2C3_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_I2C3_Init+0x74>)
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <MX_I2C3_Init+0x7c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_I2C3_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_I2C3_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_I2C3_Init+0x74>)
 800121a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_I2C3_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2C3_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_I2C3_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_I2C3_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_I2C3_Init+0x74>)
 800123a:	f001 fdd9 	bl	8002df0 <HAL_I2C_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001244:	f000 fb5a 	bl	80018fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_I2C3_Init+0x74>)
 800124c:	f001 ff14 	bl	8003078 <HAL_I2CEx_ConfigAnalogFilter>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001256:	f000 fb51 	bl	80018fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_I2C3_Init+0x74>)
 800125e:	f001 ff47 	bl	80030f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 fb48 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000730 	.word	0x20000730
 8001274:	40005c00 	.word	0x40005c00
 8001278:	000186a0 	.word	0x000186a0

0800127c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_SPI2_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_SPI2_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_SPI2_Init+0x64>)
 8001288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_SPI2_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_SPI2_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_SPI2_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012c8:	220a      	movs	r2, #10
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_SPI2_Init+0x64>)
 80012ce:	f002 fd0f 	bl	8003cf0 <HAL_SPI_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012d8:	f000 fb10 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000784 	.word	0x20000784
 80012e4:	40003800 	.word	0x40003800

080012e8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_SPI4_Init+0x64>)
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <MX_SPI4_Init+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_SPI4_Init+0x64>)
 80012f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_SPI4_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_SPI4_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_SPI4_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_SPI4_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_SPI4_Init+0x64>)
 8001314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001318:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_SPI4_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_SPI4_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_SPI4_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_SPI4_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_SPI4_Init+0x64>)
 8001334:	220a      	movs	r2, #10
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_SPI4_Init+0x64>)
 800133a:	f002 fcd9 	bl	8003cf0 <HAL_SPI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001344:	f000 fada 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000f70 	.word	0x20000f70
 8001350:	40013400 	.word	0x40013400

08001354 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_SPI5_Init+0x64>)
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <MX_SPI5_Init+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_SPI5_Init+0x64>)
 8001360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001364:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_SPI5_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_SPI5_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_SPI5_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_SPI5_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_SPI5_Init+0x64>)
 8001380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001384:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_SPI5_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_SPI5_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_SPI5_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_SPI5_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_SPI5_Init+0x64>)
 80013a0:	220a      	movs	r2, #10
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_SPI5_Init+0x64>)
 80013a6:	f002 fca3 	bl	8003cf0 <HAL_SPI_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80013b0:	f000 faa4 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200009dc 	.word	0x200009dc
 80013bc:	40015000 	.word	0x40015000

080013c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_TIM2_Init+0xac>)
 80013e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_TIM2_Init+0xac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM2_Init+0xac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM2_Init+0xac>)
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM2_Init+0xac>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM2_Init+0xac>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800140a:	4818      	ldr	r0, [pc, #96]	; (800146c <MX_TIM2_Init+0xac>)
 800140c:	f003 f96c 	bl	80046e8 <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001416:	f000 fa71 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	4619      	mov	r1, r3
 8001428:	4810      	ldr	r0, [pc, #64]	; (800146c <MX_TIM2_Init+0xac>)
 800142a:	f003 fdef 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001434:	f000 fa62 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2208      	movs	r2, #8
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM2_Init+0xac>)
 8001450:	f003 faa2 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800145a:	f000 fa4f 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM2_Init+0xac>)
 8001460:	f000 fc6e 	bl	8001d40 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20001310 	.word	0x20001310

08001470 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_UART8_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_UART8_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_UART8_Init+0x4c>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_UART8_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_UART8_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_UART8_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_UART8_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_UART8_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_UART8_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_UART8_Init+0x4c>)
 80014a8:	f003 fe40 	bl	800512c <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 fa23 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200011cc 	.word	0x200011cc
 80014c0:	40007c00 	.word	0x40007c00

080014c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART3_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART3_UART_Init+0x4c>)
 80014fc:	f003 fe16 	bl	800512c <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f9f9 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000a34 	.word	0x20000a34
 8001514:	40004800 	.word	0x40004800

08001518 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART6_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART6_UART_Init+0x4c>)
 8001550:	f003 fdec 	bl	800512c <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 f9cf 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20001210 	.word	0x20001210
 8001568:	40011400 	.word	0x40011400

0800156c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001576:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157a:	2204      	movs	r2, #4
 800157c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001580:	2202      	movs	r2, #2
 8001582:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158c:	2202      	movs	r2, #2
 800158e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b0:	f001 fddd 	bl	800316e <HAL_PCD_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015ba:	f000 f99f 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000acc 	.word	0x20000acc

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08e      	sub	sp, #56	; 0x38
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
 80015e2:	4bb5      	ldr	r3, [pc, #724]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4ab4      	ldr	r2, [pc, #720]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4bb2      	ldr	r3, [pc, #712]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	4bae      	ldr	r3, [pc, #696]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4aad      	ldr	r2, [pc, #692]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4bab      	ldr	r3, [pc, #684]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	4ba7      	ldr	r3, [pc, #668]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4aa6      	ldr	r2, [pc, #664]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4ba4      	ldr	r3, [pc, #656]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0320 	and.w	r3, r3, #32
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	4ba0      	ldr	r3, [pc, #640]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b9d      	ldr	r3, [pc, #628]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b99      	ldr	r3, [pc, #612]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a98      	ldr	r2, [pc, #608]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b96      	ldr	r3, [pc, #600]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a91      	ldr	r2, [pc, #580]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a8a      	ldr	r2, [pc, #552]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b84      	ldr	r3, [pc, #528]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a83      	ldr	r2, [pc, #524]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <MX_GPIO_Init+0x2f0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f248 4184 	movw	r1, #33924	; 0x8484
 80016c4:	487d      	ldr	r0, [pc, #500]	; (80018bc <MX_GPIO_Init+0x2f4>)
 80016c6:	f001 fb79 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80016d0:	487b      	ldr	r0, [pc, #492]	; (80018c0 <MX_GPIO_Init+0x2f8>)
 80016d2:	f001 fb73 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016dc:	4879      	ldr	r0, [pc, #484]	; (80018c4 <MX_GPIO_Init+0x2fc>)
 80016de:	f001 fb6d 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2108      	movs	r1, #8
 80016e6:	4878      	ldr	r0, [pc, #480]	; (80018c8 <MX_GPIO_Init+0x300>)
 80016e8:	f001 fb68 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80016ec:	2200      	movs	r2, #0
 80016ee:	f645 213e 	movw	r1, #23102	; 0x5a3e
 80016f2:	4876      	ldr	r0, [pc, #472]	; (80018cc <MX_GPIO_Init+0x304>)
 80016f4:	f001 fb62 	bl	8002dbc <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fe:	4874      	ldr	r0, [pc, #464]	; (80018d0 <MX_GPIO_Init+0x308>)
 8001700:	f001 fb5c 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001704:	2200      	movs	r2, #0
 8001706:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800170a:	4872      	ldr	r0, [pc, #456]	; (80018d4 <MX_GPIO_Init+0x30c>)
 800170c:	f001 fb56 	bl	8002dbc <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001710:	f248 4384 	movw	r3, #33924	; 0x8484
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	4864      	ldr	r0, [pc, #400]	; (80018bc <MX_GPIO_Init+0x2f4>)
 800172a:	f001 f983 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800172e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	485e      	ldr	r0, [pc, #376]	; (80018c0 <MX_GPIO_Init+0x2f8>)
 8001748:	f001 f974 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001750:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4858      	ldr	r0, [pc, #352]	; (80018c4 <MX_GPIO_Init+0x2fc>)
 8001762:	f001 f967 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001766:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4851      	ldr	r0, [pc, #324]	; (80018c4 <MX_GPIO_Init+0x2fc>)
 8001780:	f001 f958 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001784:	2308      	movs	r3, #8
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	484b      	ldr	r0, [pc, #300]	; (80018c8 <MX_GPIO_Init+0x300>)
 800179c:	f001 f94a 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80017a0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	4843      	ldr	r0, [pc, #268]	; (80018c4 <MX_GPIO_Init+0x2fc>)
 80017b6:	f001 f93d 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80017ba:	2302      	movs	r3, #2
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4840      	ldr	r0, [pc, #256]	; (80018d0 <MX_GPIO_Init+0x308>)
 80017ce:	f001 f931 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4836      	ldr	r0, [pc, #216]	; (80018c0 <MX_GPIO_Init+0x2f8>)
 80017e8:	f001 f924 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 80017ec:	f242 4301 	movw	r3, #9217	; 0x2401
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4832      	ldr	r0, [pc, #200]	; (80018cc <MX_GPIO_Init+0x304>)
 8001802:	f001 f917 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001806:	f645 233e 	movw	r3, #23102	; 0x5a3e
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	482b      	ldr	r0, [pc, #172]	; (80018cc <MX_GPIO_Init+0x304>)
 8001820:	f001 f908 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001824:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4820      	ldr	r0, [pc, #128]	; (80018bc <MX_GPIO_Init+0x2f4>)
 800183a:	f001 f8fb 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	481e      	ldr	r0, [pc, #120]	; (80018d0 <MX_GPIO_Init+0x308>)
 8001858:	f001 f8ec 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800185c:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	4817      	ldr	r0, [pc, #92]	; (80018d4 <MX_GPIO_Init+0x30c>)
 8001876:	f001 f8dd 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800187a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	4811      	ldr	r0, [pc, #68]	; (80018d4 <MX_GPIO_Init+0x30c>)
 8001890:	f001 f8d0 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8001894:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <MX_GPIO_Init+0x304>)
 80018ac:	f001 f8c2 	bl	8002a34 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3738      	adds	r7, #56	; 0x38
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40021800 	.word	0x40021800
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020c00 	.word	0x40020c00

080018d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ea:	f000 fd0b 	bl	8002304 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40001000 	.word	0x40001000

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_MspInit+0x54>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_MspInit+0x54>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_MspInit+0x54>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_MspInit+0x54>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <HAL_MspInit+0x54>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_MspInit+0x54>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	210f      	movs	r1, #15
 800194a:	f06f 0001 	mvn.w	r0, #1
 800194e:	f001 f847 	bl	80029e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_ADC_MspInit+0x7c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d127      	bne.n	80019d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80019ba:	2340      	movs	r3, #64	; 0x40
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_ADC_MspInit+0x84>)
 80019ce:	f001 f831 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5c      	ldr	r2, [pc, #368]	; (8001b78 <HAL_I2C_MspInit+0x190>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12d      	bne.n	8001a66 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	484f      	ldr	r0, [pc, #316]	; (8001b80 <HAL_I2C_MspInit+0x198>)
 8001a44:	f000 fff6 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
 8001a58:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a64:	e083      	b.n	8001b6e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_I2C_MspInit+0x19c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d12d      	bne.n	8001acc <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a40      	ldr	r2, [pc, #256]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a92:	2312      	movs	r3, #18
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4835      	ldr	r0, [pc, #212]	; (8001b80 <HAL_I2C_MspInit+0x198>)
 8001aaa:	f000 ffc3 	bl	8002a34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
}
 8001aca:	e050      	b.n	8001b6e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <HAL_I2C_MspInit+0x1a0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d14b      	bne.n	8001b6e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b14:	2312      	movs	r3, #18
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b20:	2304      	movs	r3, #4
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4818      	ldr	r0, [pc, #96]	; (8001b8c <HAL_I2C_MspInit+0x1a4>)
 8001b2c:	f000 ff82 	bl	8002a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b36:	2312      	movs	r3, #18
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b42:	2304      	movs	r3, #4
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4810      	ldr	r0, [pc, #64]	; (8001b90 <HAL_I2C_MspInit+0x1a8>)
 8001b4e:	f000 ff71 	bl	8002a34 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_I2C_MspInit+0x194>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	3738      	adds	r7, #56	; 0x38
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40005800 	.word	0x40005800
 8001b88:	40005c00 	.word	0x40005c00
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020000 	.word	0x40020000

08001b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	; (8001ce4 <HAL_SPI_MspInit+0x150>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12d      	bne.n	8001c12 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a43      	ldr	r2, [pc, #268]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c00:	2305      	movs	r3, #5
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4838      	ldr	r0, [pc, #224]	; (8001cec <HAL_SPI_MspInit+0x158>)
 8001c0c:	f000 ff12 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001c10:	e064      	b.n	8001cdc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a36      	ldr	r2, [pc, #216]	; (8001cf0 <HAL_SPI_MspInit+0x15c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d12d      	bne.n	8001c78 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	4a30      	ldr	r2, [pc, #192]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001c54:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c66:	2305      	movs	r3, #5
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <HAL_SPI_MspInit+0x160>)
 8001c72:	f000 fedf 	bl	8002a34 <HAL_GPIO_Init>
}
 8001c76:	e031      	b.n	8001cdc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_SPI_MspInit+0x164>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12c      	bne.n	8001cdc <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_SPI_MspInit+0x154>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cba:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ccc:	2305      	movs	r3, #5
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <HAL_SPI_MspInit+0x168>)
 8001cd8:	f000 feac 	bl	8002a34 <HAL_GPIO_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	3738      	adds	r7, #56	; 0x38
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40003800 	.word	0x40003800
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40013400 	.word	0x40013400
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40015000 	.word	0x40015000
 8001cfc:	40021400 	.word	0x40021400

08001d00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d10d      	bne.n	8001d2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d60:	d11d      	bne.n	8001d9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_TIM_MspPostInit+0x68>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_TIM_MspPostInit+0x68>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_TIM_MspPostInit+0x68>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <HAL_TIM_MspPostInit+0x6c>)
 8001d9a:	f000 fe4b 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	; 0x38
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4b      	ldr	r2, [pc, #300]	; (8001efc <HAL_UART_MspInit+0x14c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12c      	bne.n	8001e2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a49      	ldr	r2, [pc, #292]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001ddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a42      	ldr	r2, [pc, #264]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	4837      	ldr	r0, [pc, #220]	; (8001f04 <HAL_UART_MspInit+0x154>)
 8001e26:	f000 fe05 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e2a:	e063      	b.n	8001ef4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a35      	ldr	r2, [pc, #212]	; (8001f08 <HAL_UART_MspInit+0x158>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12d      	bne.n	8001e92 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a30      	ldr	r2, [pc, #192]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8001e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e80:	2307      	movs	r3, #7
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4820      	ldr	r0, [pc, #128]	; (8001f0c <HAL_UART_MspInit+0x15c>)
 8001e8c:	f000 fdd2 	bl	8002a34 <HAL_GPIO_Init>
}
 8001e90:	e030      	b.n	8001ef4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_UART_MspInit+0x160>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d12b      	bne.n	8001ef4 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001ea6:	f043 0320 	orr.w	r3, r3, #32
 8001eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_UART_MspInit+0x150>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eec:	4619      	mov	r1, r3
 8001eee:	4809      	ldr	r0, [pc, #36]	; (8001f14 <HAL_UART_MspInit+0x164>)
 8001ef0:	f000 fda0 	bl	8002a34 <HAL_GPIO_Init>
}
 8001ef4:	bf00      	nop
 8001ef6:	3738      	adds	r7, #56	; 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40007c00 	.word	0x40007c00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40004800 	.word	0x40004800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40011400 	.word	0x40011400
 8001f14:	40020800 	.word	0x40020800

08001f18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f38:	d13f      	bne.n	8001fba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4817      	ldr	r0, [pc, #92]	; (8001fc8 <HAL_PCD_MspInit+0xb0>)
 8001f6c:	f000 fd62 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f82:	230a      	movs	r3, #10
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_PCD_MspInit+0xb0>)
 8001f8e:	f000 fd51 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	6353      	str	r3, [r2, #52]	; 0x34
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_PCD_MspInit+0xac>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	2036      	movs	r0, #54	; 0x36
 8001fe2:	f000 fcfd 	bl	80029e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fe6:	2036      	movs	r0, #54	; 0x36
 8001fe8:	f000 fd16 	bl	8002a18 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_InitTick+0xa0>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_InitTick+0xa0>)
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_InitTick+0xa0>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002008:	f107 0210 	add.w	r2, r7, #16
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fe3a 	bl	8003c8c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002018:	f001 fe10 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 800201c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_InitTick+0xa4>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9b      	lsrs	r3, r3, #18
 8002028:	3b01      	subs	r3, #1
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_InitTick+0xa8>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_InitTick+0xac>)
 8002030:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_InitTick+0xa8>)
 8002034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002038:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_InitTick+0xa8>)
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_InitTick+0xa8>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_InitTick+0xa8>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800204c:	4809      	ldr	r0, [pc, #36]	; (8002074 <HAL_InitTick+0xa8>)
 800204e:	f002 fa81 	bl	8004554 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d104      	bne.n	8002062 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <HAL_InitTick+0xa8>)
 800205a:	f002 fad5 	bl	8004608 <HAL_TIM_Base_Start_IT>
 800205e:	4603      	mov	r3, r0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	431bde83 	.word	0x431bde83
 8002074:	20001430 	.word	0x20001430
 8002078:	40001000 	.word	0x40001000

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <NMI_Handler+0x4>

08002082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <MemManage_Handler+0x4>

0800208e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <UsageFault_Handler+0x4>

0800209a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <TIM6_DAC_IRQHandler+0x10>)
 80020ae:	f002 fb6a 	bl	8004786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20001430 	.word	0x20001430

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020d6:	f004 fd71 	bl	8006bbc <__errno>
 80020da:	4603      	mov	r3, r0
 80020dc:	2216      	movs	r2, #22
 80020de:	601a      	str	r2, [r3, #0]
	return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_exit>:

void _exit (int status)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ffe7 	bl	80020cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80020fe:	e7fe      	b.n	80020fe <_exit+0x12>

08002100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e00a      	b.n	8002128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002112:	f3af 8000 	nop.w
 8002116:	4601      	mov	r1, r0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf0      	blt.n	8002112 <_read+0x12>
	}

return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e009      	b.n	8002160 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf1      	blt.n	800214c <_write+0x12>
	}
	return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_close>:

int _close(int file)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	return -1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219a:	605a      	str	r2, [r3, #4]
	return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_isatty>:

int _isatty(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	return 1;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
	return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <_sbrk+0x5c>)
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <_sbrk+0x60>)
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <_sbrk+0x64>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <_sbrk+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d207      	bcs.n	800221c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800220c:	f004 fcd6 	bl	8006bbc <__errno>
 8002210:	4603      	mov	r3, r0
 8002212:	220c      	movs	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e009      	b.n	8002230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <_sbrk+0x64>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20030000 	.word	0x20030000
 800223c:	00000400 	.word	0x00000400
 8002240:	20000214 	.word	0x20000214
 8002244:	20001490 	.word	0x20001490

08002248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <SystemInit+0x20>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <SystemInit+0x20>)
 8002254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002272:	490e      	ldr	r1, [pc, #56]	; (80022ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002288:	4c0b      	ldr	r4, [pc, #44]	; (80022b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002296:	f7ff ffd7 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f004 fd8b 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229e:	f7fe fe0f 	bl	8000ec0 <main>
  bx  lr    
 80022a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80022b0:	08009adc 	.word	0x08009adc
  ldr r2, =_sbss
 80022b4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80022b8:	2000148c 	.word	0x2000148c

080022bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_Init+0x40>)
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_Init+0x40>)
 80022d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_Init+0x40>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f000 fb6e 	bl	80029ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ee:	200f      	movs	r0, #15
 80022f0:	f7ff fe6c 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f4:	f7ff fb08 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00

08002304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x20>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_IncTick+0x24>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008
 8002328:	20001478 	.word	0x20001478

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20001478 	.word	0x20001478

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_Delay+0x44>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236a:	bf00      	nop
 800236c:	f7ff ffde 	bl	800232c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008

0800238c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e033      	b.n	800240a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fad8 	bl	8001960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023d2:	f023 0302 	bic.w	r3, r3, #2
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f94a 	bl	8002678 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
 80023fa:	e001      	b.n	8002400 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1c>
 800242c:	2302      	movs	r3, #2
 800242e:	e113      	b.n	8002658 <HAL_ADC_ConfigChannel+0x244>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d925      	bls.n	800248c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43da      	mvns	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	400a      	ands	r2, r1
 8002464:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68d9      	ldr	r1, [r3, #12]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	4603      	mov	r3, r0
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4403      	add	r3, r0
 800247e:	3b1e      	subs	r3, #30
 8002480:	409a      	lsls	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	e022      	b.n	80024d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	2207      	movs	r2, #7
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	400a      	ands	r2, r1
 80024ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4403      	add	r3, r0
 80024c8:	409a      	lsls	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d824      	bhi.n	8002524 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	3b05      	subs	r3, #5
 80024ec:	221f      	movs	r2, #31
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	400a      	ands	r2, r1
 80024fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b05      	subs	r3, #5
 8002516:	fa00 f203 	lsl.w	r2, r0, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	635a      	str	r2, [r3, #52]	; 0x34
 8002522:	e04c      	b.n	80025be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d824      	bhi.n	8002576 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b23      	subs	r3, #35	; 0x23
 800253e:	221f      	movs	r2, #31
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	3b23      	subs	r3, #35	; 0x23
 8002568:	fa00 f203 	lsl.w	r2, r0, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
 8002574:	e023      	b.n	80025be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b41      	subs	r3, #65	; 0x41
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	3b41      	subs	r3, #65	; 0x41
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025be:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_ADC_ConfigChannel+0x250>)
 80025c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_ADC_ConfigChannel+0x254>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d10f      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1d8>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d10b      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <HAL_ADC_ConfigChannel+0x254>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_ADC_ConfigChannel+0x23a>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <HAL_ADC_ConfigChannel+0x258>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x1f4>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b11      	cmp	r3, #17
 8002606:	d122      	bne.n	800264e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <HAL_ADC_ConfigChannel+0x258>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_ADC_ConfigChannel+0x25c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_ADC_ConfigChannel+0x260>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	0c9a      	lsrs	r2, r3, #18
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002640:	e002      	b.n	8002648 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3b01      	subs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40012300 	.word	0x40012300
 8002668:	40012000 	.word	0x40012000
 800266c:	10000012 	.word	0x10000012
 8002670:	20000000 	.word	0x20000000
 8002674:	431bde83 	.word	0x431bde83

08002678 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002680:	4b79      	ldr	r3, [pc, #484]	; (8002868 <ADC_Init+0x1f0>)
 8002682:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	4a58      	ldr	r2, [pc, #352]	; (800286c <ADC_Init+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d022      	beq.n	8002756 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800271e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6899      	ldr	r1, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	e00f      	b.n	8002776 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002774:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0202 	bic.w	r2, r2, #2
 8002784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6899      	ldr	r1, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7e1b      	ldrb	r3, [r3, #24]
 8002790:	005a      	lsls	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	3b01      	subs	r3, #1
 80027d0:	035a      	lsls	r2, r3, #13
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	e007      	b.n	80027ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	3b01      	subs	r3, #1
 8002808:	051a      	lsls	r2, r3, #20
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800282e:	025a      	lsls	r2, r3, #9
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6899      	ldr	r1, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	029a      	lsls	r2, r3, #10
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40012300 	.word	0x40012300
 800286c:	0f000001 	.word	0x0f000001

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff4c 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f2:	f7ff ff61 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 80029f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	6978      	ldr	r0, [r7, #20]
 80029fe:	f7ff ffb1 	bl	8002964 <NVIC_EncodePriority>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff80 	bl	8002910 <__NVIC_SetPriority>
}
 8002a10:	bf00      	nop
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff54 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e177      	b.n	8002d40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8166 	bne.w	8002d3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80c0 	beq.w	8002d3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4a65      	ldr	r2, [pc, #404]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a61      	ldr	r2, [pc, #388]	; (8002d5c <HAL_GPIO_Init+0x328>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_GPIO_Init+0x32c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d037      	beq.n	8002c72 <HAL_GPIO_Init+0x23e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a57      	ldr	r2, [pc, #348]	; (8002d64 <HAL_GPIO_Init+0x330>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_GPIO_Init+0x23a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a56      	ldr	r2, [pc, #344]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02b      	beq.n	8002c6a <HAL_GPIO_Init+0x236>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a55      	ldr	r2, [pc, #340]	; (8002d6c <HAL_GPIO_Init+0x338>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d025      	beq.n	8002c66 <HAL_GPIO_Init+0x232>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a54      	ldr	r2, [pc, #336]	; (8002d70 <HAL_GPIO_Init+0x33c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x22e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a53      	ldr	r2, [pc, #332]	; (8002d74 <HAL_GPIO_Init+0x340>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x22a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_GPIO_Init+0x344>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a51      	ldr	r2, [pc, #324]	; (8002d7c <HAL_GPIO_Init+0x348>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x222>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a50      	ldr	r2, [pc, #320]	; (8002d80 <HAL_GPIO_Init+0x34c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x21e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4f      	ldr	r2, [pc, #316]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x21a>
 8002c4a:	2309      	movs	r3, #9
 8002c4c:	e012      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c4e:	230a      	movs	r3, #10
 8002c50:	e010      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c52:	2308      	movs	r3, #8
 8002c54:	e00e      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c56:	2307      	movs	r3, #7
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x328>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c92:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce0:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f ae84 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40021400 	.word	0x40021400
 8002d78:	40021800 	.word	0x40021800
 8002d7c:	40021c00 	.word	0x40021c00
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022400 	.word	0x40022400
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e001      	b.n	8002dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e12b      	b.n	800305a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fe fde6 	bl	80019e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e54:	f000 fef2 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8002e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a81      	ldr	r2, [pc, #516]	; (8003064 <HAL_I2C_Init+0x274>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d807      	bhi.n	8002e74 <HAL_I2C_Init+0x84>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a80      	ldr	r2, [pc, #512]	; (8003068 <HAL_I2C_Init+0x278>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	bf94      	ite	ls
 8002e6c:	2301      	movls	r3, #1
 8002e6e:	2300      	movhi	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e006      	b.n	8002e82 <HAL_I2C_Init+0x92>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a7d      	ldr	r2, [pc, #500]	; (800306c <HAL_I2C_Init+0x27c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	bf94      	ite	ls
 8002e7c:	2301      	movls	r3, #1
 8002e7e:	2300      	movhi	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0e7      	b.n	800305a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a78      	ldr	r2, [pc, #480]	; (8003070 <HAL_I2C_Init+0x280>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0c9b      	lsrs	r3, r3, #18
 8002e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a6a      	ldr	r2, [pc, #424]	; (8003064 <HAL_I2C_Init+0x274>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d802      	bhi.n	8002ec4 <HAL_I2C_Init+0xd4>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	e009      	b.n	8002ed8 <HAL_I2C_Init+0xe8>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4a69      	ldr	r2, [pc, #420]	; (8003074 <HAL_I2C_Init+0x284>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	495c      	ldr	r1, [pc, #368]	; (8003064 <HAL_I2C_Init+0x274>)
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	d819      	bhi.n	8002f2c <HAL_I2C_Init+0x13c>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e59      	subs	r1, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f06:	1c59      	adds	r1, r3, #1
 8002f08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_I2C_Init+0x138>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e59      	subs	r1, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f26:	e051      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	e04f      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d111      	bne.n	8002f58 <HAL_I2C_Init+0x168>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e012      	b.n	8002f7e <HAL_I2C_Init+0x18e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	0099      	lsls	r1, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Init+0x196>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e022      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10e      	bne.n	8002fac <HAL_I2C_Init+0x1bc>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e58      	subs	r0, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	440b      	add	r3, r1
 8002f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	6809      	ldr	r1, [r1, #0]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6911      	ldr	r1, [r2, #16]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68d2      	ldr	r2, [r2, #12]
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	430b      	orrs	r3, r1
 800300e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	000186a0 	.word	0x000186a0
 8003068:	001e847f 	.word	0x001e847f
 800306c:	003d08ff 	.word	0x003d08ff
 8003070:	431bde83 	.word	0x431bde83
 8003074:	10624dd3 	.word	0x10624dd3

08003078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b20      	cmp	r3, #32
 800308c:	d129      	bne.n	80030e2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2224      	movs	r2, #36	; 0x24
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0210 	bic.w	r2, r2, #16
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	d12a      	bne.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2224      	movs	r2, #36	; 0x24
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	f023 030f 	bic.w	r3, r3, #15
 8003130:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b29a      	uxth	r2, r3
 8003136:	89fb      	ldrh	r3, [r7, #14]
 8003138:	4313      	orrs	r3, r2
 800313a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	89fa      	ldrh	r2, [r7, #14]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800316e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003170:	b08f      	sub	sp, #60	; 0x3c
 8003172:	af0a      	add	r7, sp, #40	; 0x28
 8003174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e10f      	b.n	80033a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe febc 	bl	8001f18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fa2b 	bl	800561a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	687e      	ldr	r6, [r7, #4]
 80031cc:	466d      	mov	r5, sp
 80031ce:	f106 0410 	add.w	r4, r6, #16
 80031d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031de:	e885 0003 	stmia.w	r5, {r0, r1}
 80031e2:	1d33      	adds	r3, r6, #4
 80031e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	f002 f9b6 	bl	8005558 <USB_CoreInit>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0d0      	b.n	80033a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f002 fa19 	bl	800563c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e04a      	b.n	80032a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333d      	adds	r3, #61	; 0x3d
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	b298      	uxth	r0, r3
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3342      	adds	r3, #66	; 0x42
 800324c:	4602      	mov	r2, r0
 800324e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	333f      	adds	r3, #63	; 0x3f
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3344      	adds	r3, #68	; 0x44
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3348      	adds	r3, #72	; 0x48
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3350      	adds	r3, #80	; 0x50
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3af      	bcc.n	8003210 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	e044      	b.n	8003340 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3b5      	bcc.n	80032b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	687e      	ldr	r6, [r7, #4]
 8003352:	466d      	mov	r5, sp
 8003354:	f106 0410 	add.w	r4, r6, #16
 8003358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003364:	e885 0003 	stmia.w	r5, {r0, r1}
 8003368:	1d33      	adds	r3, r6, #4
 800336a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f002 f9b1 	bl	80056d4 <USB_DevInit>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e00d      	b.n	80033a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f002 fb5c 	bl	8005a56 <USB_DevDisconnect>

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e264      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	4ba3      	ldr	r3, [pc, #652]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4ba0      	ldr	r3, [pc, #640]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b9d      	ldr	r3, [pc, #628]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b99      	ldr	r3, [pc, #612]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e23f      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b91      	ldr	r3, [pc, #580]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a90      	ldr	r2, [pc, #576]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b8b      	ldr	r3, [pc, #556]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a8a      	ldr	r2, [pc, #552]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b88      	ldr	r3, [pc, #544]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a87      	ldr	r2, [pc, #540]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b84      	ldr	r3, [pc, #528]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a83      	ldr	r2, [pc, #524]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b81      	ldr	r3, [pc, #516]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a80      	ldr	r2, [pc, #512]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe ff64 	bl	800232c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe ff60 	bl	800232c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e204      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe ff50 	bl	800232c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe ff4c 	bl	800232c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1f0      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b62      	ldr	r3, [pc, #392]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1c4      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b56      	ldr	r3, [pc, #344]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4952      	ldr	r1, [pc, #328]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <HAL_RCC_OscConfig+0x2b0>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe ff05 	bl	800232c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7fe ff01 	bl	800232c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1a5      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b46      	ldr	r3, [pc, #280]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b43      	ldr	r3, [pc, #268]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4940      	ldr	r1, [pc, #256]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_OscConfig+0x2b0>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fee4 	bl	800232c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe fee0 	bl	800232c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e184      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d030      	beq.n	80035f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_RCC_OscConfig+0x2b4>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fec4 	bl	800232c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fec0 	bl	800232c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e164      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e015      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_OscConfig+0x2b4>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fe fead 	bl	800232c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe fea9 	bl	800232c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e14d      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80035ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a0 	beq.w	8003742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x2b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d121      	bne.n	8003682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_RCC_OscConfig+0x2b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <HAL_RCC_OscConfig+0x2b8>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364a:	f7fe fe6f 	bl	800232c <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	e011      	b.n	8003676 <HAL_RCC_OscConfig+0x2ce>
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	42470000 	.word	0x42470000
 800365c:	42470e80 	.word	0x42470e80
 8003660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003664:	f7fe fe62 	bl	800232c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e106      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x4e4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x2f0>
 800368a:	4b81      	ldr	r3, [pc, #516]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	e01c      	b.n	80036d2 <HAL_RCC_OscConfig+0x32a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d10c      	bne.n	80036ba <HAL_RCC_OscConfig+0x312>
 80036a0:	4b7b      	ldr	r3, [pc, #492]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a7a      	ldr	r2, [pc, #488]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	4b78      	ldr	r3, [pc, #480]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a77      	ldr	r2, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	e00b      	b.n	80036d2 <HAL_RCC_OscConfig+0x32a>
 80036ba:	4b75      	ldr	r3, [pc, #468]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a74      	ldr	r2, [pc, #464]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	4b72      	ldr	r3, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a71      	ldr	r2, [pc, #452]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d015      	beq.n	8003706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fe fe27 	bl	800232c <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe fe23 	bl	800232c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0c5      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ee      	beq.n	80036e2 <HAL_RCC_OscConfig+0x33a>
 8003704:	e014      	b.n	8003730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fe fe11 	bl	800232c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fe fe0d 	bl	800232c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e0af      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	4b5a      	ldr	r3, [pc, #360]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ee      	bne.n	800370e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4a55      	ldr	r2, [pc, #340]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 809b 	beq.w	8003882 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800374c:	4b50      	ldr	r3, [pc, #320]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d05c      	beq.n	8003812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d141      	bne.n	80037e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe fde1 	bl	800232c <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe fddd 	bl	800232c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e081      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	019b      	lsls	r3, r3, #6
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	4937      	ldr	r1, [pc, #220]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fdb6 	bl	800232c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe fdb2 	bl	800232c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e056      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x41c>
 80037e2:	e04e      	b.n	8003882 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7fe fd9f 	bl	800232c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fe fd9b 	bl	800232c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e03f      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x44a>
 8003810:	e037      	b.n	8003882 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e032      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d028      	beq.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d121      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d11a      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003854:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003856:	4293      	cmp	r3, r2
 8003858:	d111      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d107      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40007000 	.word	0x40007000
 8003890:	40023800 	.word	0x40023800
 8003894:	42470060 	.word	0x42470060

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0cc      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d90c      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d003      	beq.n	8003956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e067      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4934      	ldr	r1, [pc, #208]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003988:	f7fe fcd0 	bl	800232c <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fe fccc 	bl	800232c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e04f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d20c      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	490a      	ldr	r1, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fac4 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	080096d0 	.word	0x080096d0
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	2300      	movs	r3, #0
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7c:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	f200 80bd 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x34>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a96:	e0b7      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a9a:	60bb      	str	r3, [r7, #8]
       break;
 8003a9c:	e0b7      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9e:	4b60      	ldr	r3, [pc, #384]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aa0:	60bb      	str	r3, [r7, #8]
      break;
 8003aa2:	e0b4      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa4:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aae:	4b5b      	ldr	r3, [pc, #364]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d04d      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b58      	ldr	r3, [pc, #352]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	ea02 0800 	and.w	r8, r2, r0
 8003ad2:	ea03 0901 	and.w	r9, r3, r1
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	4649      	mov	r1, r9
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	014b      	lsls	r3, r1, #5
 8003ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ae8:	0142      	lsls	r2, r0, #5
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	ebb0 0008 	subs.w	r0, r0, r8
 8003af2:	eb61 0109 	sbc.w	r1, r1, r9
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	018b      	lsls	r3, r1, #6
 8003b00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b04:	0182      	lsls	r2, r0, #6
 8003b06:	1a12      	subs	r2, r2, r0
 8003b08:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0c:	f04f 0000 	mov.w	r0, #0
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	00d9      	lsls	r1, r3, #3
 8003b16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b1a:	00d0      	lsls	r0, r2, #3
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	eb12 0208 	adds.w	r2, r2, r8
 8003b24:	eb43 0309 	adc.w	r3, r3, r9
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	0299      	lsls	r1, r3, #10
 8003b32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b36:	0290      	lsls	r0, r2, #10
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f7fd f83e 	bl	8000bc8 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e04a      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	ea02 0400 	and.w	r4, r2, r0
 8003b6e:	ea03 0501 	and.w	r5, r3, r1
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	014b      	lsls	r3, r1, #5
 8003b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b84:	0142      	lsls	r2, r0, #5
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	1b00      	subs	r0, r0, r4
 8003b8c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	018b      	lsls	r3, r1, #6
 8003b9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b9e:	0182      	lsls	r2, r0, #6
 8003ba0:	1a12      	subs	r2, r2, r0
 8003ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	00d9      	lsls	r1, r3, #3
 8003bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb4:	00d0      	lsls	r0, r2, #3
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	1912      	adds	r2, r2, r4
 8003bbc:	eb45 0303 	adc.w	r3, r5, r3
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0299      	lsls	r1, r3, #10
 8003bca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bce:	0290      	lsls	r0, r2, #10
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f7fc fff2 	bl	8000bc8 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c0a:	60bb      	str	r3, [r7, #8]
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000000 	.word	0x20000000

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c40:	f7ff fff0 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	080096e0 	.word	0x080096e0

08003c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c68:	f7ff ffdc 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0b5b      	lsrs	r3, r3, #13
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	080096e0 	.word	0x080096e0

08003c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	220f      	movs	r2, #15
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c9c:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0203 	and.w	r2, r3, #3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	08db      	lsrs	r3, r3, #3
 8003cc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <HAL_RCC_GetClockConfig+0x60>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 020f 	and.w	r2, r3, #15
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40023c00 	.word	0x40023c00

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07b      	b.n	8003dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd ff26 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	ea42 0103 	orr.w	r1, r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0104 	and.w	r1, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0210 	and.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b088      	sub	sp, #32
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_SPI_Transmit+0x22>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e126      	b.n	8004072 <HAL_SPI_Transmit+0x270>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2c:	f7fe fa7e 	bl	800232c <HAL_GetTick>
 8003e30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
 8003e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e46:	e10b      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Transmit+0x52>
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e58:	e102      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d007      	beq.n	8003ee0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d14b      	bne.n	8003f82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_Transmit+0xf6>
 8003ef2:	8afb      	ldrh	r3, [r7, #22]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d13e      	bne.n	8003f76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f1c:	e02b      	b.n	8003f76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d112      	bne.n	8003f52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	881a      	ldrh	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	1c9a      	adds	r2, r3, #2
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f50:	e011      	b.n	8003f76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f52:	f7fe f9eb 	bl	800232c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d803      	bhi.n	8003f6a <HAL_SPI_Transmit+0x168>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d102      	bne.n	8003f70 <HAL_SPI_Transmit+0x16e>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f74:	e074      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ce      	bne.n	8003f1e <HAL_SPI_Transmit+0x11c>
 8003f80:	e04c      	b.n	800401c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Transmit+0x18e>
 8003f8a:	8afb      	ldrh	r3, [r7, #22]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d140      	bne.n	8004012 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fb6:	e02c      	b.n	8004012 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d113      	bne.n	8003fee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fec:	e011      	b.n	8004012 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fee:	f7fe f99d 	bl	800232c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d803      	bhi.n	8004006 <HAL_SPI_Transmit+0x204>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d102      	bne.n	800400c <HAL_SPI_Transmit+0x20a>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004010:	e026      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1cd      	bne.n	8003fb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fa55 	bl	80044d0 <SPI_EndRxTxTransaction>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e000      	b.n	8004060 <HAL_SPI_Transmit+0x25e>
  }

error:
 800405e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004070:	7ffb      	ldrb	r3, [r7, #31]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b08c      	sub	sp, #48	; 0x30
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004088:	2301      	movs	r3, #1
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x26>
 800409c:	2302      	movs	r3, #2
 800409e:	e18a      	b.n	80043b6 <HAL_SPI_TransmitReceive+0x33c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a8:	f7fe f940 	bl	800232c <HAL_GetTick>
 80040ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d00f      	beq.n	80040ea <HAL_SPI_TransmitReceive+0x70>
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d0:	d107      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x68>
 80040da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d003      	beq.n	80040ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
 80040e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040e8:	e15b      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x82>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x82>
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004102:	e14e      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b04      	cmp	r3, #4
 800410e:	d003      	beq.n	8004118 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2205      	movs	r2, #5
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	887a      	ldrh	r2, [r7, #2]
 800412e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	887a      	ldrh	r2, [r7, #2]
 800413a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d007      	beq.n	800416c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800416a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004174:	d178      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x10a>
 800417e:	8b7b      	ldrh	r3, [r7, #26]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d166      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	1c9a      	adds	r2, r3, #2
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041a8:	e053      	b.n	8004252 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d11b      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x176>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x176>
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d113      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d119      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x1b8>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d014      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	b292      	uxth	r2, r2
 8004214:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800422e:	2301      	movs	r3, #1
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004232:	f7fe f87b 	bl	800232c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800423e:	429a      	cmp	r2, r3
 8004240:	d807      	bhi.n	8004252 <HAL_SPI_TransmitReceive+0x1d8>
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d003      	beq.n	8004252 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004250:	e0a7      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1a6      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x130>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1a1      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x130>
 8004266:	e07c      	b.n	8004362 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x1fc>
 8004270:	8b7b      	ldrh	r3, [r7, #26]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d16b      	bne.n	800434e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429c:	e057      	b.n	800434e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d11c      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x26c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d017      	beq.n	80042e6 <HAL_SPI_TransmitReceive+0x26c>
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d114      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d119      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x2ae>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d014      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004324:	2301      	movs	r3, #1
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004328:	f7fe f800 	bl	800232c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004334:	429a      	cmp	r2, r3
 8004336:	d803      	bhi.n	8004340 <HAL_SPI_TransmitReceive+0x2c6>
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d102      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x2cc>
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800434c:	e029      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1a2      	bne.n	800429e <HAL_SPI_TransmitReceive+0x224>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d19d      	bne.n	800429e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f8b2 	bl	80044d0 <SPI_EndRxTxTransaction>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800437e:	e010      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	e000      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3730      	adds	r7, #48	; 0x30
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043d0:	f7fd ffac 	bl	800232c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	4413      	add	r3, r2
 80043de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043e0:	f7fd ffa4 	bl	800232c <HAL_GetTick>
 80043e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043e6:	4b39      	ldr	r3, [pc, #228]	; (80044cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	015b      	lsls	r3, r3, #5
 80043ec:	0d1b      	lsrs	r3, r3, #20
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043f6:	e054      	b.n	80044a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d050      	beq.n	80044a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004400:	f7fd ff94 	bl	800232c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	429a      	cmp	r2, r3
 800440e:	d902      	bls.n	8004416 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d13d      	bne.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442e:	d111      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004438:	d004      	beq.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004442:	d107      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445c:	d10f      	bne.n	800447e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800447c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e017      	b.n	80044c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3b01      	subs	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d19b      	bne.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000000 	.word	0x20000000

080044d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <SPI_EndRxTxTransaction+0x7c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <SPI_EndRxTxTransaction+0x80>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0d5b      	lsrs	r3, r3, #21
 80044e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fa:	d112      	bne.n	8004522 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2200      	movs	r2, #0
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff5a 	bl	80043c0 <SPI_WaitFlagStateUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e00f      	b.n	8004542 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3b01      	subs	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d0f2      	beq.n	8004522 <SPI_EndRxTxTransaction+0x52>
 800453c:	e000      	b.n	8004540 <SPI_EndRxTxTransaction+0x70>
        break;
 800453e:	bf00      	nop
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000000 	.word	0x20000000
 8004550:	165e9f81 	.word	0x165e9f81

08004554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e041      	b.n	80045ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f839 	bl	80045f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f000 faea 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e04e      	b.n	80046be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a23      	ldr	r2, [pc, #140]	; (80046cc <HAL_TIM_Base_Start_IT+0xc4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d01d      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1e      	ldr	r2, [pc, #120]	; (80046d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d010      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e007      	b.n	80046bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40001800 	.word	0x40001800

080046e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e041      	b.n	800477e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fd faf6 	bl	8001d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 fa20 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d122      	bne.n	80047e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d11b      	bne.n	80047e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f06f 0202 	mvn.w	r2, #2
 80047b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f9b1 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 80047ce:	e005      	b.n	80047dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9a3 	bl	8004b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9b4 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d122      	bne.n	8004836 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d11b      	bne.n	8004836 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f06f 0204 	mvn.w	r2, #4
 8004806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f987 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 8004822:	e005      	b.n	8004830 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f979 	bl	8004b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f98a 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d122      	bne.n	800488a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b08      	cmp	r3, #8
 8004850:	d11b      	bne.n	800488a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f06f 0208 	mvn.w	r2, #8
 800485a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2204      	movs	r2, #4
 8004860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f95d 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 8004876:	e005      	b.n	8004884 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f94f 	bl	8004b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f960 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d122      	bne.n	80048de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d11b      	bne.n	80048de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0210 	mvn.w	r2, #16
 80048ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2208      	movs	r2, #8
 80048b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f933 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 80048ca:	e005      	b.n	80048d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f925 	bl	8004b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f936 	bl	8004b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10e      	bne.n	800490a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0201 	mvn.w	r2, #1
 8004902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fc ffe7 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d10e      	bne.n	8004936 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d107      	bne.n	8004936 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fbf1 	bl	8005118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f8fb 	bl	8004b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b20      	cmp	r3, #32
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0220 	mvn.w	r2, #32
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fbbb 	bl	8005104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e0ae      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	f200 809f 	bhi.w	8004b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004b05 	.word	0x08004b05
 80049d4:	08004b05 	.word	0x08004b05
 80049d8:	08004b05 	.word	0x08004b05
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004b05 	.word	0x08004b05
 80049e4:	08004b05 	.word	0x08004b05
 80049e8:	08004b05 	.word	0x08004b05
 80049ec:	08004a83 	.word	0x08004a83
 80049f0:	08004b05 	.word	0x08004b05
 80049f4:	08004b05 	.word	0x08004b05
 80049f8:	08004b05 	.word	0x08004b05
 80049fc:	08004ac3 	.word	0x08004ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f950 	bl	8004cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6999      	ldr	r1, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	619a      	str	r2, [r3, #24]
      break;
 8004a3e:	e064      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f9a0 	bl	8004d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	021a      	lsls	r2, r3, #8
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	619a      	str	r2, [r3, #24]
      break;
 8004a80:	e043      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f9f5 	bl	8004e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0208 	orr.w	r2, r2, #8
 8004a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0204 	bic.w	r2, r2, #4
 8004aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	61da      	str	r2, [r3, #28]
      break;
 8004ac0:	e023      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa49 	bl	8004f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69d9      	ldr	r1, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	021a      	lsls	r2, r3, #8
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	61da      	str	r2, [r3, #28]
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
      break;
 8004b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a40      	ldr	r2, [pc, #256]	; (8004c80 <TIM_Base_SetConfig+0x114>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3d      	ldr	r2, [pc, #244]	; (8004c84 <TIM_Base_SetConfig+0x118>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3c      	ldr	r2, [pc, #240]	; (8004c88 <TIM_Base_SetConfig+0x11c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <TIM_Base_SetConfig+0x120>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3a      	ldr	r2, [pc, #232]	; (8004c90 <TIM_Base_SetConfig+0x124>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2f      	ldr	r2, [pc, #188]	; (8004c80 <TIM_Base_SetConfig+0x114>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d02b      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d027      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <TIM_Base_SetConfig+0x118>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d023      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <TIM_Base_SetConfig+0x11c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01f      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <TIM_Base_SetConfig+0x120>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01b      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a29      	ldr	r2, [pc, #164]	; (8004c90 <TIM_Base_SetConfig+0x124>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d017      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <TIM_Base_SetConfig+0x128>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <TIM_Base_SetConfig+0x12c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00f      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a26      	ldr	r2, [pc, #152]	; (8004c9c <TIM_Base_SetConfig+0x130>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <TIM_Base_SetConfig+0x134>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d007      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <TIM_Base_SetConfig+0x138>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <TIM_Base_SetConfig+0x13c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <TIM_Base_SetConfig+0x114>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <TIM_Base_SetConfig+0x124>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d103      	bne.n	8004c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	615a      	str	r2, [r3, #20]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40010400 	.word	0x40010400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800
 8004ca0:	40001800 	.word	0x40001800
 8004ca4:	40001c00 	.word	0x40001c00
 8004ca8:	40002000 	.word	0x40002000

08004cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 0302 	bic.w	r3, r3, #2
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <TIM_OC1_SetConfig+0xd8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC1_SetConfig+0x64>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <TIM_OC1_SetConfig+0xdc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10c      	bne.n	8004d2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0308 	bic.w	r3, r3, #8
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <TIM_OC1_SetConfig+0xd8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_OC1_SetConfig+0x8e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <TIM_OC1_SetConfig+0xdc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d111      	bne.n	8004d5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	621a      	str	r2, [r3, #32]
}
 8004d78:	bf00      	nop
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010400 	.word	0x40010400

08004d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f023 0210 	bic.w	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0320 	bic.w	r3, r3, #32
 8004dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <TIM_OC2_SetConfig+0xe4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_OC2_SetConfig+0x68>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <TIM_OC2_SetConfig+0xe8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d10d      	bne.n	8004e10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <TIM_OC2_SetConfig+0xe4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_OC2_SetConfig+0x94>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <TIM_OC2_SetConfig+0xe8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d113      	bne.n	8004e48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40010000 	.word	0x40010000
 8004e74:	40010400 	.word	0x40010400

08004e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a21      	ldr	r2, [pc, #132]	; (8004f58 <TIM_OC3_SetConfig+0xe0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_OC3_SetConfig+0x66>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	; (8004f5c <TIM_OC3_SetConfig+0xe4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10d      	bne.n	8004efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <TIM_OC3_SetConfig+0xe0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC3_SetConfig+0x92>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <TIM_OC3_SetConfig+0xe4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d113      	bne.n	8004f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400

08004f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <TIM_OC4_SetConfig+0xa4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_OC4_SetConfig+0x68>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a11      	ldr	r2, [pc, #68]	; (8005008 <TIM_OC4_SetConfig+0xa8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d109      	bne.n	8004fdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40010400 	.word	0x40010400

0800500c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e05a      	b.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d022      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d01d      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a15      	ldr	r2, [pc, #84]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10c      	bne.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40010400 	.word	0x40010400
 80050fc:	40014000 	.word	0x40014000
 8005100:	40001800 	.word	0x40001800

08005104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e03f      	b.n	80051be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fc fe2c 	bl	8001db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	; 0x24
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800516e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f829 	bl	80051c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	b09f      	sub	sp, #124	; 0x7c
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	68d9      	ldr	r1, [r3, #12]
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	ea40 0301 	orr.w	r3, r0, r1
 80051e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4313      	orrs	r3, r2
 8005200:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800520c:	f021 010c 	bic.w	r1, r1, #12
 8005210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005216:	430b      	orrs	r3, r1
 8005218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005226:	6999      	ldr	r1, [r3, #24]
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	ea40 0301 	orr.w	r3, r0, r1
 8005230:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4bc5      	ldr	r3, [pc, #788]	; (800554c <UART_SetConfig+0x384>)
 8005238:	429a      	cmp	r2, r3
 800523a:	d004      	beq.n	8005246 <UART_SetConfig+0x7e>
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4bc3      	ldr	r3, [pc, #780]	; (8005550 <UART_SetConfig+0x388>)
 8005242:	429a      	cmp	r2, r3
 8005244:	d103      	bne.n	800524e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005246:	f7fe fd0d 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 800524a:	6778      	str	r0, [r7, #116]	; 0x74
 800524c:	e002      	b.n	8005254 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800524e:	f7fe fcf5 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8005252:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800525c:	f040 80b6 	bne.w	80053cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005262:	461c      	mov	r4, r3
 8005264:	f04f 0500 	mov.w	r5, #0
 8005268:	4622      	mov	r2, r4
 800526a:	462b      	mov	r3, r5
 800526c:	1891      	adds	r1, r2, r2
 800526e:	6439      	str	r1, [r7, #64]	; 0x40
 8005270:	415b      	adcs	r3, r3
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
 8005274:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005278:	1912      	adds	r2, r2, r4
 800527a:	eb45 0303 	adc.w	r3, r5, r3
 800527e:	f04f 0000 	mov.w	r0, #0
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	00d9      	lsls	r1, r3, #3
 8005288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800528c:	00d0      	lsls	r0, r2, #3
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	1911      	adds	r1, r2, r4
 8005294:	6639      	str	r1, [r7, #96]	; 0x60
 8005296:	416b      	adcs	r3, r5
 8005298:	667b      	str	r3, [r7, #100]	; 0x64
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80052a8:	415b      	adcs	r3, r3
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052b4:	f7fb fc88 	bl	8000bc8 <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4ba5      	ldr	r3, [pc, #660]	; (8005554 <UART_SetConfig+0x38c>)
 80052be:	fba3 2302 	umull	r2, r3, r3, r2
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	011e      	lsls	r6, r3, #4
 80052c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c8:	461c      	mov	r4, r3
 80052ca:	f04f 0500 	mov.w	r5, #0
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	6339      	str	r1, [r7, #48]	; 0x30
 80052d6:	415b      	adcs	r3, r3
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
 80052da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052de:	1912      	adds	r2, r2, r4
 80052e0:	eb45 0303 	adc.w	r3, r5, r3
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	00d9      	lsls	r1, r3, #3
 80052ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f2:	00d0      	lsls	r0, r2, #3
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	1911      	adds	r1, r2, r4
 80052fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80052fc:	416b      	adcs	r3, r5
 80052fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	461a      	mov	r2, r3
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	1891      	adds	r1, r2, r2
 800530c:	62b9      	str	r1, [r7, #40]	; 0x28
 800530e:	415b      	adcs	r3, r3
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005316:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800531a:	f7fb fc55 	bl	8000bc8 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4b8c      	ldr	r3, [pc, #560]	; (8005554 <UART_SetConfig+0x38c>)
 8005324:	fba3 1302 	umull	r1, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2164      	movs	r1, #100	; 0x64
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	3332      	adds	r3, #50	; 0x32
 8005336:	4a87      	ldr	r2, [pc, #540]	; (8005554 <UART_SetConfig+0x38c>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005344:	441e      	add	r6, r3
 8005346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005348:	4618      	mov	r0, r3
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	1894      	adds	r4, r2, r2
 8005354:	623c      	str	r4, [r7, #32]
 8005356:	415b      	adcs	r3, r3
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800535e:	1812      	adds	r2, r2, r0
 8005360:	eb41 0303 	adc.w	r3, r1, r3
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	f04f 0500 	mov.w	r5, #0
 800536c:	00dd      	lsls	r5, r3, #3
 800536e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005372:	00d4      	lsls	r4, r2, #3
 8005374:	4622      	mov	r2, r4
 8005376:	462b      	mov	r3, r5
 8005378:	1814      	adds	r4, r2, r0
 800537a:	653c      	str	r4, [r7, #80]	; 0x50
 800537c:	414b      	adcs	r3, r1
 800537e:	657b      	str	r3, [r7, #84]	; 0x54
 8005380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	461a      	mov	r2, r3
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	1891      	adds	r1, r2, r2
 800538c:	61b9      	str	r1, [r7, #24]
 800538e:	415b      	adcs	r3, r3
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005396:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800539a:	f7fb fc15 	bl	8000bc8 <__aeabi_uldivmod>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4b6c      	ldr	r3, [pc, #432]	; (8005554 <UART_SetConfig+0x38c>)
 80053a4:	fba3 1302 	umull	r1, r3, r3, r2
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	2164      	movs	r1, #100	; 0x64
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	3332      	adds	r3, #50	; 0x32
 80053b6:	4a67      	ldr	r2, [pc, #412]	; (8005554 <UART_SetConfig+0x38c>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	f003 0207 	and.w	r2, r3, #7
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4432      	add	r2, r6
 80053c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053ca:	e0b9      	b.n	8005540 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ce:	461c      	mov	r4, r3
 80053d0:	f04f 0500 	mov.w	r5, #0
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	1891      	adds	r1, r2, r2
 80053da:	6139      	str	r1, [r7, #16]
 80053dc:	415b      	adcs	r3, r3
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053e4:	1912      	adds	r2, r2, r4
 80053e6:	eb45 0303 	adc.w	r3, r5, r3
 80053ea:	f04f 0000 	mov.w	r0, #0
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	00d9      	lsls	r1, r3, #3
 80053f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053f8:	00d0      	lsls	r0, r2, #3
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	eb12 0804 	adds.w	r8, r2, r4
 8005402:	eb43 0905 	adc.w	r9, r3, r5
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4618      	mov	r0, r3
 800540c:	f04f 0100 	mov.w	r1, #0
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	008b      	lsls	r3, r1, #2
 800541a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800541e:	0082      	lsls	r2, r0, #2
 8005420:	4640      	mov	r0, r8
 8005422:	4649      	mov	r1, r9
 8005424:	f7fb fbd0 	bl	8000bc8 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4b49      	ldr	r3, [pc, #292]	; (8005554 <UART_SetConfig+0x38c>)
 800542e:	fba3 2302 	umull	r2, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	011e      	lsls	r6, r3, #4
 8005436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005438:	4618      	mov	r0, r3
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	1894      	adds	r4, r2, r2
 8005444:	60bc      	str	r4, [r7, #8]
 8005446:	415b      	adcs	r3, r3
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800544e:	1812      	adds	r2, r2, r0
 8005450:	eb41 0303 	adc.w	r3, r1, r3
 8005454:	f04f 0400 	mov.w	r4, #0
 8005458:	f04f 0500 	mov.w	r5, #0
 800545c:	00dd      	lsls	r5, r3, #3
 800545e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005462:	00d4      	lsls	r4, r2, #3
 8005464:	4622      	mov	r2, r4
 8005466:	462b      	mov	r3, r5
 8005468:	1814      	adds	r4, r2, r0
 800546a:	64bc      	str	r4, [r7, #72]	; 0x48
 800546c:	414b      	adcs	r3, r1
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	008b      	lsls	r3, r1, #2
 8005484:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005488:	0082      	lsls	r2, r0, #2
 800548a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800548e:	f7fb fb9b 	bl	8000bc8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <UART_SetConfig+0x38c>)
 8005498:	fba3 1302 	umull	r1, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	2164      	movs	r1, #100	; 0x64
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	3332      	adds	r3, #50	; 0x32
 80054aa:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <UART_SetConfig+0x38c>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b6:	441e      	add	r6, r3
 80054b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ba:	4618      	mov	r0, r3
 80054bc:	f04f 0100 	mov.w	r1, #0
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	1894      	adds	r4, r2, r2
 80054c6:	603c      	str	r4, [r7, #0]
 80054c8:	415b      	adcs	r3, r3
 80054ca:	607b      	str	r3, [r7, #4]
 80054cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d0:	1812      	adds	r2, r2, r0
 80054d2:	eb41 0303 	adc.w	r3, r1, r3
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	f04f 0500 	mov.w	r5, #0
 80054de:	00dd      	lsls	r5, r3, #3
 80054e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054e4:	00d4      	lsls	r4, r2, #3
 80054e6:	4622      	mov	r2, r4
 80054e8:	462b      	mov	r3, r5
 80054ea:	eb12 0a00 	adds.w	sl, r2, r0
 80054ee:	eb43 0b01 	adc.w	fp, r3, r1
 80054f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	008b      	lsls	r3, r1, #2
 8005506:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800550a:	0082      	lsls	r2, r0, #2
 800550c:	4650      	mov	r0, sl
 800550e:	4659      	mov	r1, fp
 8005510:	f7fb fb5a 	bl	8000bc8 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <UART_SetConfig+0x38c>)
 800551a:	fba3 1302 	umull	r1, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	2164      	movs	r1, #100	; 0x64
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	3332      	adds	r3, #50	; 0x32
 800552c:	4a09      	ldr	r2, [pc, #36]	; (8005554 <UART_SetConfig+0x38c>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4432      	add	r2, r6
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	377c      	adds	r7, #124	; 0x7c
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	bf00      	nop
 800554c:	40011000 	.word	0x40011000
 8005550:	40011400 	.word	0x40011400
 8005554:	51eb851f 	.word	0x51eb851f

08005558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005558:	b084      	sub	sp, #16
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	f107 001c 	add.w	r0, r7, #28
 8005566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b01      	cmp	r3, #1
 800556e:	d122      	bne.n	80055b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d105      	bne.n	80055aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa82 	bl	8005ab4 <USB_CoreReset>
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]
 80055b4:	e01a      	b.n	80055ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa76 	bl	8005ab4 <USB_CoreReset>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
 80055de:	e005      	b.n	80055ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10b      	bne.n	800560a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f043 0206 	orr.w	r2, r3, #6
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005616:	b004      	add	sp, #16
 8005618:	4770      	bx	lr

0800561a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d115      	bne.n	800568a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800566a:	2001      	movs	r0, #1
 800566c:	f7fc fe6a 	bl	8002344 <HAL_Delay>
      ms++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa0e 	bl	8005a98 <USB_GetMode>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	d01e      	beq.n	80056c0 <USB_SetCurrentMode+0x84>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b31      	cmp	r3, #49	; 0x31
 8005686:	d9f0      	bls.n	800566a <USB_SetCurrentMode+0x2e>
 8005688:	e01a      	b.n	80056c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d115      	bne.n	80056bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800569c:	2001      	movs	r0, #1
 800569e:	f7fc fe51 	bl	8002344 <HAL_Delay>
      ms++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f9f5 	bl	8005a98 <USB_GetMode>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <USB_SetCurrentMode+0x84>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b31      	cmp	r3, #49	; 0x31
 80056b8:	d9f0      	bls.n	800569c <USB_SetCurrentMode+0x60>
 80056ba:	e001      	b.n	80056c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e005      	b.n	80056cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b32      	cmp	r3, #50	; 0x32
 80056c4:	d101      	bne.n	80056ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056d4:	b084      	sub	sp, #16
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	e009      	b.n	8005708 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3340      	adds	r3, #64	; 0x40
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	2200      	movs	r2, #0
 8005700:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3301      	adds	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b0e      	cmp	r3, #14
 800570c:	d9f2      	bls.n	80056f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11c      	bne.n	800574e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
 800574c:	e00b      	b.n	8005766 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800576c:	461a      	mov	r2, r3
 800576e:	2300      	movs	r3, #0
 8005770:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005778:	4619      	mov	r1, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005780:	461a      	mov	r2, r3
 8005782:	680b      	ldr	r3, [r1, #0]
 8005784:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	2b01      	cmp	r3, #1
 800578a:	d10c      	bne.n	80057a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d104      	bne.n	800579c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005792:	2100      	movs	r1, #0
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f945 	bl	8005a24 <USB_SetDevSpeed>
 800579a:	e008      	b.n	80057ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800579c:	2101      	movs	r1, #1
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f940 	bl	8005a24 <USB_SetDevSpeed>
 80057a4:	e003      	b.n	80057ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057a6:	2103      	movs	r1, #3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f93b 	bl	8005a24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057ae:	2110      	movs	r1, #16
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8f3 	bl	800599c <USB_FlushTxFifo>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f90f 	bl	80059e4 <USB_FlushRxFifo>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d6:	461a      	mov	r2, r3
 80057d8:	2300      	movs	r3, #0
 80057da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	e043      	b.n	8005882 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005810:	d118      	bne.n	8005844 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	461a      	mov	r2, r3
 8005826:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e013      	b.n	8005856 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	461a      	mov	r2, r3
 800583c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e008      	b.n	8005856 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	461a      	mov	r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	461a      	mov	r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	461a      	mov	r2, r3
 8005876:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800587a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3301      	adds	r3, #1
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	429a      	cmp	r2, r3
 8005888:	d3b7      	bcc.n	80057fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	e043      	b.n	8005918 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a6:	d118      	bne.n	80058da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	461a      	mov	r2, r3
 80058bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e013      	b.n	80058ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	e008      	b.n	80058ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	461a      	mov	r2, r3
 80058e8:	2300      	movs	r3, #0
 80058ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	461a      	mov	r2, r3
 80058fa:	2300      	movs	r3, #0
 80058fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005910:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3301      	adds	r3, #1
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3b7      	bcc.n	8005890 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005932:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005940:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f043 0210 	orr.w	r2, r3, #16
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <USB_DevInit+0x2c4>)
 800595a:	4313      	orrs	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f043 0208 	orr.w	r2, r3, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d107      	bne.n	8005988 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005980:	f043 0304 	orr.w	r3, r3, #4
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005994:	b004      	add	sp, #16
 8005996:	4770      	bx	lr
 8005998:	803c3800 	.word	0x803c3800

0800599c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	019b      	lsls	r3, r3, #6
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <USB_FlushTxFifo+0x44>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e006      	b.n	80059d4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d0f1      	beq.n	80059b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	00030d40 	.word	0x00030d40

080059e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2210      	movs	r2, #16
 80059f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <USB_FlushRxFifo+0x3c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e006      	b.n	8005a14 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d0f1      	beq.n	80059f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	00030d40 	.word	0x00030d40

08005a24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4313      	orrs	r3, r2
 8005a46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a70:	f023 0303 	bic.w	r3, r3, #3
 8005a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a84:	f043 0302 	orr.w	r3, r3, #2
 8005a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <USB_CoreReset+0x60>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e01a      	b.n	8005b06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	daf3      	bge.n	8005ac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <USB_CoreReset+0x60>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e006      	b.n	8005b06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d0f1      	beq.n	8005ae8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	00030d40 	.word	0x00030d40

08005b18 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8005b28:	bf00      	nop
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <sx126x_hal_write+0x74>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <sx126x_hal_write+0x78>)
 8005b30:	8812      	ldrh	r2, [r2, #0]
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fd f929 	bl	8002d8c <HAL_GPIO_ReadPin>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d0f4      	beq.n	8005b2a <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8005b40:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <sx126x_hal_write+0x7c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <sx126x_hal_write+0x80>)
 8005b46:	8811      	ldrh	r1, [r2, #0]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fd f936 	bl	8002dbc <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	2364      	movs	r3, #100	; 0x64
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7fe f953 	bl	8003e02 <HAL_SPI_Transmit>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8005b60:	8c3a      	ldrh	r2, [r7, #32]
 8005b62:	2364      	movs	r3, #100	; 0x64
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7fe f94b 	bl	8003e02 <HAL_SPI_Transmit>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <sx126x_hal_write+0x7c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <sx126x_hal_write+0x80>)
 8005b76:	8811      	ldrh	r1, [r2, #0]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd f91e 	bl	8002dbc <HAL_GPIO_WritePin>
    return status;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	2000022c 	.word	0x2000022c
 8005b90:	20000228 	.word	0x20000228
 8005b94:	2000021c 	.word	0x2000021c
 8005b98:	20000218 	.word	0x20000218

08005b9c <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8005bac:	bf00      	nop
 8005bae:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <sx126x_hal_read+0x8c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <sx126x_hal_read+0x90>)
 8005bb4:	8812      	ldrh	r2, [r2, #0]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd f8e7 	bl	8002d8c <HAL_GPIO_ReadPin>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d0f4      	beq.n	8005bae <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <sx126x_hal_read+0x94>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <sx126x_hal_read+0x98>)
 8005bca:	8811      	ldrh	r1, [r2, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fd f8f4 	bl	8002dbc <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8005bd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	2364      	movs	r3, #100	; 0x64
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7fe f90f 	bl	8003e02 <HAL_SPI_Transmit>
 8005be4:	4603      	mov	r3, r0
 8005be6:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8005be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	18d1      	adds	r1, r2, r3
 8005bf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	88fa      	ldrh	r2, [r7, #6]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2264      	movs	r2, #100	; 0x64
 8005bfe:	9200      	str	r2, [sp, #0]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7fe fa39 	bl	800407a <HAL_SPI_TransmitReceive>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8005c0c:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <sx126x_hal_read+0x94>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <sx126x_hal_read+0x98>)
 8005c12:	8811      	ldrh	r1, [r2, #0]
 8005c14:	2201      	movs	r2, #1
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fd f8d0 	bl	8002dbc <HAL_GPIO_WritePin>
    return status;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	2000022c 	.word	0x2000022c
 8005c2c:	20000228 	.word	0x20000228
 8005c30:	2000021c 	.word	0x2000021c
 8005c34:	20000218 	.word	0x20000218

08005c38 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8005c44:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <set_NSS_pin+0x24>)
 8005c46:	887b      	ldrh	r3, [r7, #2]
 8005c48:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8005c4a:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <set_NSS_pin+0x28>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20000218 	.word	0x20000218
 8005c60:	2000021c 	.word	0x2000021c

08005c64 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8005c70:	4a05      	ldr	r2, [pc, #20]	; (8005c88 <set_BUSY_pin+0x24>)
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8005c76:	4a05      	ldr	r2, [pc, #20]	; (8005c8c <set_BUSY_pin+0x28>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6013      	str	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20000228 	.word	0x20000228
 8005c8c:	2000022c 	.word	0x2000022c

08005c90 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8005c9c:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <set_NRESET_pin+0x24>)
 8005c9e:	887b      	ldrh	r3, [r7, #2]
 8005ca0:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8005ca2:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <set_NRESET_pin+0x28>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6013      	str	r3, [r2, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000220 	.word	0x20000220
 8005cb8:	20000224 	.word	0x20000224

08005cbc <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8005cc8:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <set_DIO1_pin+0x24>)
 8005cca:	887b      	ldrh	r3, [r7, #2]
 8005ccc:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8005cce:	4a05      	ldr	r2, [pc, #20]	; (8005ce4 <set_DIO1_pin+0x28>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000230 	.word	0x20000230
 8005ce4:	20000234 	.word	0x20000234

08005ce8 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8005ce8:	b084      	sub	sp, #16
 8005cea:	b580      	push	{r7, lr}
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	f107 0c08 	add.w	ip, r7, #8
 8005cf2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8005cf6:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <set_hspi+0x2c>)
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	2258      	movs	r2, #88	; 0x58
 8005d00:	4619      	mov	r1, r3
 8005d02:	f001 f88f 	bl	8006e24 <memcpy>
}
 8005d06:	bf00      	nop
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d0e:	b004      	add	sp, #16
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000238 	.word	0x20000238

08005d18 <Tx_setup>:

void Tx_setup(){
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8005d1e:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <Tx_setup+0x1a0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a66      	ldr	r2, [pc, #408]	; (8005ebc <Tx_setup+0x1a4>)
 8005d24:	8811      	ldrh	r1, [r2, #0]
 8005d26:	2201      	movs	r2, #1
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd f847 	bl	8002dbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8005d2e:	4b64      	ldr	r3, [pc, #400]	; (8005ec0 <Tx_setup+0x1a8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a64      	ldr	r2, [pc, #400]	; (8005ec4 <Tx_setup+0x1ac>)
 8005d34:	8811      	ldrh	r1, [r2, #0]
 8005d36:	2200      	movs	r2, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fd f83f 	bl	8002dbc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8005d3e:	2032      	movs	r0, #50	; 0x32
 8005d40:	f7fc fb00 	bl	8002344 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 8005d44:	4b5e      	ldr	r3, [pc, #376]	; (8005ec0 <Tx_setup+0x1a8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a5e      	ldr	r2, [pc, #376]	; (8005ec4 <Tx_setup+0x1ac>)
 8005d4a:	8811      	ldrh	r1, [r2, #0]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fd f834 	bl	8002dbc <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 8005d54:	2100      	movs	r1, #0
 8005d56:	485c      	ldr	r0, [pc, #368]	; (8005ec8 <Tx_setup+0x1b0>)
 8005d58:	f000 f92c 	bl	8005fb4 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8005d5c:	4b5b      	ldr	r3, [pc, #364]	; (8005ecc <Tx_setup+0x1b4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4619      	mov	r1, r3
 8005d62:	4859      	ldr	r0, [pc, #356]	; (8005ec8 <Tx_setup+0x1b0>)
 8005d64:	f000 fb94 	bl	8006490 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8005d68:	4b59      	ldr	r3, [pc, #356]	; (8005ed0 <Tx_setup+0x1b8>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4856      	ldr	r0, [pc, #344]	; (8005ec8 <Tx_setup+0x1b0>)
 8005d70:	f000 fbc8 	bl	8006504 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8005d74:	4b57      	ldr	r3, [pc, #348]	; (8005ed4 <Tx_setup+0x1bc>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4853      	ldr	r0, [pc, #332]	; (8005ec8 <Tx_setup+0x1b0>)
 8005d7c:	f000 fa1d 	bl	80061ba <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8005d80:	2101      	movs	r1, #1
 8005d82:	4851      	ldr	r0, [pc, #324]	; (8005ec8 <Tx_setup+0x1b0>)
 8005d84:	f000 fb42 	bl	800640c <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8005d88:	4b53      	ldr	r3, [pc, #332]	; (8005ed8 <Tx_setup+0x1c0>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2264      	movs	r2, #100	; 0x64
 8005d8e:	4619      	mov	r1, r3
 8005d90:	484d      	ldr	r0, [pc, #308]	; (8005ec8 <Tx_setup+0x1b0>)
 8005d92:	f000 fb55 	bl	8006440 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8005d96:	4b51      	ldr	r3, [pc, #324]	; (8005edc <Tx_setup+0x1c4>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	484a      	ldr	r0, [pc, #296]	; (8005ec8 <Tx_setup+0x1b0>)
 8005d9e:	f000 f9a9 	bl	80060f4 <sx126x_cal>
    HAL_Delay(50);
 8005da2:	2032      	movs	r0, #50	; 0x32
 8005da4:	f7fc face 	bl	8002344 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8005da8:	4b4d      	ldr	r3, [pc, #308]	; (8005ee0 <Tx_setup+0x1c8>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	4846      	ldr	r0, [pc, #280]	; (8005ec8 <Tx_setup+0x1b0>)
 8005db0:	f000 f986 	bl	80060c0 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8005db4:	4b4b      	ldr	r3, [pc, #300]	; (8005ee4 <Tx_setup+0x1cc>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4a4b      	ldr	r2, [pc, #300]	; (8005ee8 <Tx_setup+0x1d0>)
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4842      	ldr	r0, [pc, #264]	; (8005ec8 <Tx_setup+0x1b0>)
 8005dc0:	f000 f9b2 	bl	8006128 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8005dc4:	2004      	movs	r0, #4
 8005dc6:	f001 f81d 	bl	8006e04 <malloc>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8005dce:	4b47      	ldr	r3, [pc, #284]	; (8005eec <Tx_setup+0x1d4>)
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8005dd6:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <Tx_setup+0x1d8>)
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8005dde:	4b45      	ldr	r3, [pc, #276]	; (8005ef4 <Tx_setup+0x1dc>)
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8005de6:	4b44      	ldr	r3, [pc, #272]	; (8005ef8 <Tx_setup+0x1e0>)
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	4835      	ldr	r0, [pc, #212]	; (8005ec8 <Tx_setup+0x1b0>)
 8005df2:	f000 f9bd 	bl	8006170 <sx126x_set_pa_cfg>
    free(params);
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f001 f80c 	bl	8006e14 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8005dfc:	4b3f      	ldr	r3, [pc, #252]	; (8005efc <Tx_setup+0x1e4>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b25b      	sxtb	r3, r3
 8005e02:	4a3f      	ldr	r2, [pc, #252]	; (8005f00 <Tx_setup+0x1e8>)
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	4619      	mov	r1, r3
 8005e08:	482f      	ldr	r0, [pc, #188]	; (8005ec8 <Tx_setup+0x1b0>)
 8005e0a:	f000 fb95 	bl	8006538 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <Tx_setup+0x1ec>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	4a3d      	ldr	r2, [pc, #244]	; (8005f08 <Tx_setup+0x1f0>)
 8005e14:	7812      	ldrb	r2, [r2, #0]
 8005e16:	4619      	mov	r1, r3
 8005e18:	482b      	ldr	r0, [pc, #172]	; (8005ec8 <Tx_setup+0x1b0>)
 8005e1a:	f000 fc4b 	bl	80066b4 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8005e1e:	2004      	movs	r0, #4
 8005e20:	f000 fff0 	bl	8006e04 <malloc>
 8005e24:	4603      	mov	r3, r0
 8005e26:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 8005e28:	4b38      	ldr	r3, [pc, #224]	; (8005f0c <Tx_setup+0x1f4>)
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 8005e30:	4b37      	ldr	r3, [pc, #220]	; (8005f10 <Tx_setup+0x1f8>)
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 8005e38:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <Tx_setup+0x1fc>)
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 8005e40:	4b35      	ldr	r3, [pc, #212]	; (8005f18 <Tx_setup+0x200>)
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	481f      	ldr	r0, [pc, #124]	; (8005ec8 <Tx_setup+0x1b0>)
 8005e4c:	f000 fb98 	bl	8006580 <sx126x_set_lora_mod_params>
    free(mod_params);
 8005e50:	68b8      	ldr	r0, [r7, #8]
 8005e52:	f000 ffdf 	bl	8006e14 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8005e56:	2006      	movs	r0, #6
 8005e58:	f000 ffd4 	bl	8006e04 <malloc>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8005e60:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <Tx_setup+0x204>)
 8005e62:	881a      	ldrh	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8005e68:	4b2d      	ldr	r3, [pc, #180]	; (8005f20 <Tx_setup+0x208>)
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8005e70:	4b2c      	ldr	r3, [pc, #176]	; (8005f24 <Tx_setup+0x20c>)
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8005e78:	4b2b      	ldr	r3, [pc, #172]	; (8005f28 <Tx_setup+0x210>)
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8005e80:	4b2a      	ldr	r3, [pc, #168]	; (8005f2c <Tx_setup+0x214>)
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	480f      	ldr	r0, [pc, #60]	; (8005ec8 <Tx_setup+0x1b0>)
 8005e8c:	f000 fba4 	bl	80065d8 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 ffbf 	bl	8006e14 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8005e96:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <Tx_setup+0x218>)
 8005e98:	8819      	ldrh	r1, [r3, #0]
 8005e9a:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <Tx_setup+0x21c>)
 8005e9c:	881a      	ldrh	r2, [r3, #0]
 8005e9e:	4b26      	ldr	r3, [pc, #152]	; (8005f38 <Tx_setup+0x220>)
 8005ea0:	8818      	ldrh	r0, [r3, #0]
 8005ea2:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <Tx_setup+0x224>)
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	4807      	ldr	r0, [pc, #28]	; (8005ec8 <Tx_setup+0x1b0>)
 8005eac:	f000 fa11 	bl	80062d2 <sx126x_set_dio_irq_params>

}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000224 	.word	0x20000224
 8005ebc:	20000220 	.word	0x20000220
 8005ec0:	2000021c 	.word	0x2000021c
 8005ec4:	20000218 	.word	0x20000218
 8005ec8:	20000238 	.word	0x20000238
 8005ecc:	2000000c 	.word	0x2000000c
 8005ed0:	20000010 	.word	0x20000010
 8005ed4:	20000011 	.word	0x20000011
 8005ed8:	20000012 	.word	0x20000012
 8005edc:	20000014 	.word	0x20000014
 8005ee0:	20000013 	.word	0x20000013
 8005ee4:	20000015 	.word	0x20000015
 8005ee8:	20000016 	.word	0x20000016
 8005eec:	20000017 	.word	0x20000017
 8005ef0:	20000018 	.word	0x20000018
 8005ef4:	20000290 	.word	0x20000290
 8005ef8:	20000019 	.word	0x20000019
 8005efc:	2000001a 	.word	0x2000001a
 8005f00:	2000001b 	.word	0x2000001b
 8005f04:	20000291 	.word	0x20000291
 8005f08:	20000292 	.word	0x20000292
 8005f0c:	2000001c 	.word	0x2000001c
 8005f10:	2000001d 	.word	0x2000001d
 8005f14:	2000001e 	.word	0x2000001e
 8005f18:	20000293 	.word	0x20000293
 8005f1c:	20000020 	.word	0x20000020
 8005f20:	20000294 	.word	0x20000294
 8005f24:	20000022 	.word	0x20000022
 8005f28:	20000023 	.word	0x20000023
 8005f2c:	20000295 	.word	0x20000295
 8005f30:	20000024 	.word	0x20000024
 8005f34:	20000026 	.word	0x20000026
 8005f38:	20000296 	.word	0x20000296
 8005f3c:	20000298 	.word	0x20000298

08005f40 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <TxProtocol+0x68>)
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	4619      	mov	r1, r3
 8005f52:	4816      	ldr	r0, [pc, #88]	; (8005fac <TxProtocol+0x6c>)
 8005f54:	f000 fa34 	bl	80063c0 <sx126x_clear_irq_status>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, "abcdefg", 7); // 0 is the offset
 8005f5c:	2307      	movs	r3, #7
 8005f5e:	4a14      	ldr	r2, [pc, #80]	; (8005fb0 <TxProtocol+0x70>)
 8005f60:	2100      	movs	r1, #0
 8005f62:	4812      	ldr	r0, [pc, #72]	; (8005fac <TxProtocol+0x6c>)
 8005f64:	f000 f996 	bl	8006294 <sx126x_write_buffer>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, 7);
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	f241 7170 	movw	r1, #6000	; 0x1770
 8005f72:	480e      	ldr	r0, [pc, #56]	; (8005fac <TxProtocol+0x6c>)
 8005f74:	f000 f838 	bl	8005fe8 <sx126x_set_tx>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	4619      	mov	r1, r3
 8005f82:	480a      	ldr	r0, [pc, #40]	; (8005fac <TxProtocol+0x6c>)
 8005f84:	f000 f9ea 	bl	800635c <sx126x_get_irq_status>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 8005f8c:	89bb      	ldrh	r3, [r7, #12]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <TxProtocol+0x60>
 8005f96:	89bb      	ldrh	r3, [r7, #12]
 8005f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ed      	beq.n	8005f7c <TxProtocol+0x3c>
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000026 	.word	0x20000026
 8005fac:	20000238 	.word	0x20000238
 8005fb0:	08009648 	.word	0x08009648

08005fb4 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8005fcc:	f107 010c 	add.w	r1, r7, #12
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff fd9d 	bl	8005b18 <sx126x_hal_write>
 8005fde:	4603      	mov	r3, r0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <sx126x_set_tx+0x7c>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d11e      	bne.n	800603c <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8005ffe:	2006      	movs	r0, #6
 8006000:	f000 ff00 	bl	8006e04 <malloc>
 8006004:	4603      	mov	r3, r0
 8006006:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 8006008:	4b17      	ldr	r3, [pc, #92]	; (8006068 <sx126x_set_tx+0x80>)
 800600a:	881a      	ldrh	r2, [r3, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 8006010:	4b16      	ldr	r3, [pc, #88]	; (800606c <sx126x_set_tx+0x84>)
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	79fa      	ldrb	r2, [r7, #7]
 800601c:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <sx126x_set_tx+0x88>)
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <sx126x_set_tx+0x8c>)
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	4811      	ldr	r0, [pc, #68]	; (8006078 <sx126x_set_tx+0x90>)
 8006032:	f000 fad1 	bl	80065d8 <sx126x_set_lora_pkt_params>
        free(lora_params);
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	f000 feec 	bl	8006e14 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006042:	d301      	bcc.n	8006048 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8006044:	2302      	movs	r3, #2
 8006046:	e008      	b.n	800605a <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8006048:	68b8      	ldr	r0, [r7, #8]
 800604a:	f000 fb7d 	bl	8006748 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800604e:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8006050:	6939      	ldr	r1, [r7, #16]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f812 	bl	800607c <sx126x_set_tx_with_timeout_in_rtc_step>
 8006058:	4603      	mov	r3, r0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000010 	.word	0x20000010
 8006068:	20000020 	.word	0x20000020
 800606c:	20000294 	.word	0x20000294
 8006070:	20000023 	.word	0x20000023
 8006074:	20000295 	.word	0x20000295
 8006078:	20000238 	.word	0x20000238

0800607c <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af02      	add	r7, sp, #8
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 800608a:	2383      	movs	r3, #131	; 0x83
 800608c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	0c1b      	lsrs	r3, r3, #16
 8006092:	b2db      	uxtb	r3, r3
 8006094:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	b2db      	uxtb	r3, r3
 800609c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 80060a4:	f107 010c 	add.w	r1, r7, #12
 80060a8:	2300      	movs	r3, #0
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2300      	movs	r3, #0
 80060ae:	2204      	movs	r2, #4
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fd31 	bl	8005b18 <sx126x_hal_write>
 80060b6:	4603      	mov	r3, r0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 80060cc:	2300      	movs	r3, #0
 80060ce:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 80060d0:	2396      	movs	r3, #150	; 0x96
 80060d2:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 80060d8:	f107 010c 	add.w	r1, r7, #12
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	2202      	movs	r2, #2
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fd17 	bl	8005b18 <sx126x_hal_write>
 80060ea:	4603      	mov	r3, r0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8006100:	2300      	movs	r3, #0
 8006102:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8006104:	2389      	movs	r3, #137	; 0x89
 8006106:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800610c:	f107 010c 	add.w	r1, r7, #12
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	2202      	movs	r2, #2
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fcfd 	bl	8005b18 <sx126x_hal_write>
 800611e:	4603      	mov	r3, r0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af02      	add	r7, sp, #8
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
 8006134:	4613      	mov	r3, r2
 8006136:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <sx126x_cal_img_hex+0x44>)
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	81bb      	strh	r3, [r7, #12]
 800613e:	2300      	movs	r3, #0
 8006140:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 8006142:	2398      	movs	r3, #152	; 0x98
 8006144:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800614a:	78bb      	ldrb	r3, [r7, #2]
 800614c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800614e:	f107 010c 	add.w	r1, r7, #12
 8006152:	2300      	movs	r3, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	2203      	movs	r2, #3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fcdc 	bl	8005b18 <sx126x_hal_write>
 8006160:	4603      	mov	r3, r0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	080096cc 	.word	0x080096cc

08006170 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	2300      	movs	r3, #0
 8006180:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 8006182:	2395      	movs	r3, #149	; 0x95
 8006184:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	789b      	ldrb	r3, [r3, #2]
 8006196:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	78db      	ldrb	r3, [r3, #3]
 800619c:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800619e:	f107 0108 	add.w	r1, r7, #8
 80061a2:	2300      	movs	r3, #0
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	2205      	movs	r2, #5
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fcb4 	bl	8005b18 <sx126x_hal_write>
 80061b0:	4603      	mov	r3, r0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af02      	add	r7, sp, #8
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 80061c6:	2300      	movs	r3, #0
 80061c8:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 80061ca:	2393      	movs	r3, #147	; 0x93
 80061cc:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 80061d2:	f107 010c 	add.w	r1, r7, #12
 80061d6:	2300      	movs	r3, #0
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	2202      	movs	r2, #2
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff fc9a 	bl	8005b18 <sx126x_hal_write>
 80061e4:	4603      	mov	r3, r0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	461a      	mov	r2, r3
 80061fc:	460b      	mov	r3, r1
 80061fe:	817b      	strh	r3, [r7, #10]
 8006200:	4613      	mov	r3, r2
 8006202:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8006204:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <sx126x_write_register+0x50>)
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	82bb      	strh	r3, [r7, #20]
 800620a:	2300      	movs	r3, #0
 800620c:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800620e:	230d      	movs	r3, #13
 8006210:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8006212:	897b      	ldrh	r3, [r7, #10]
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	b29b      	uxth	r3, r3
 8006218:	b2db      	uxtb	r3, r3
 800621a:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800621c:	897b      	ldrh	r3, [r7, #10]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8006222:	7a7b      	ldrb	r3, [r7, #9]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f107 0114 	add.w	r1, r7, #20
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2203      	movs	r2, #3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff fc71 	bl	8005b18 <sx126x_hal_write>
 8006236:	4603      	mov	r3, r0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	080096cc 	.word	0x080096cc

08006244 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	607a      	str	r2, [r7, #4]
 800624e:	461a      	mov	r2, r3
 8006250:	460b      	mov	r3, r1
 8006252:	817b      	strh	r3, [r7, #10]
 8006254:	4613      	mov	r3, r2
 8006256:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800625c:	2303      	movs	r3, #3
 800625e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 8006260:	231d      	movs	r3, #29
 8006262:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 8006264:	897b      	ldrh	r3, [r7, #10]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	b29b      	uxth	r3, r3
 800626a:	b2db      	uxtb	r3, r3
 800626c:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800626e:	897b      	ldrh	r3, [r7, #10]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8006274:	f107 0110 	add.w	r1, r7, #16
 8006278:	7a7b      	ldrb	r3, [r7, #9]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2204      	movs	r2, #4
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff fc8b 	bl	8005b9c <sx126x_hal_read>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]

    return status;
 800628a:	7dfb      	ldrb	r3, [r7, #23]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	461a      	mov	r2, r3
 80062a0:	460b      	mov	r3, r1
 80062a2:	72fb      	strb	r3, [r7, #11]
 80062a4:	4613      	mov	r3, r2
 80062a6:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 80062a8:	2300      	movs	r3, #0
 80062aa:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 80062ac:	230e      	movs	r3, #14
 80062ae:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 80062b0:	7afb      	ldrb	r3, [r7, #11]
 80062b2:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 80062b4:	7abb      	ldrb	r3, [r7, #10]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f107 0114 	add.w	r1, r7, #20
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7ff fc28 	bl	8005b18 <sx126x_hal_write>
 80062c8:	4603      	mov	r3, r0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af02      	add	r7, sp, #8
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	461a      	mov	r2, r3
 80062e0:	4603      	mov	r3, r0
 80062e2:	817b      	strh	r3, [r7, #10]
 80062e4:	460b      	mov	r3, r1
 80062e6:	813b      	strh	r3, [r7, #8]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	f107 0318 	add.w	r3, r7, #24
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 80062fa:	2308      	movs	r3, #8
 80062fc:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 80062fe:	897b      	ldrh	r3, [r7, #10]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	b29b      	uxth	r3, r3
 8006304:	b2db      	uxtb	r3, r3
 8006306:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8006308:	897b      	ldrh	r3, [r7, #10]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800630e:	893b      	ldrh	r3, [r7, #8]
 8006310:	0a1b      	lsrs	r3, r3, #8
 8006312:	b29b      	uxth	r3, r3
 8006314:	b2db      	uxtb	r3, r3
 8006316:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 8006318:	893b      	ldrh	r3, [r7, #8]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	b29b      	uxth	r3, r3
 8006324:	b2db      	uxtb	r3, r3
 8006326:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800632e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006330:	0a1b      	lsrs	r3, r3, #8
 8006332:	b29b      	uxth	r3, r3
 8006334:	b2db      	uxtb	r3, r3
 8006336:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 8006338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800633a:	b2db      	uxtb	r3, r3
 800633c:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800633e:	f107 0114 	add.w	r1, r7, #20
 8006342:	2300      	movs	r3, #0
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	2300      	movs	r3, #0
 8006348:	2209      	movs	r2, #9
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff fbe4 	bl	8005b18 <sx126x_hal_write>
 8006350:	4603      	mov	r3, r0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 800636a:	4b14      	ldr	r3, [pc, #80]	; (80063bc <sx126x_get_irq_status+0x60>)
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	81bb      	strh	r3, [r7, #12]
 8006370:	2300      	movs	r3, #0
 8006372:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8006374:	2303      	movs	r3, #3
 8006376:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 8006378:	2312      	movs	r3, #18
 800637a:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	f107 0110 	add.w	r1, r7, #16
 8006384:	2201      	movs	r2, #1
 8006386:	9200      	str	r2, [sp, #0]
 8006388:	2204      	movs	r2, #4
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff fc06 	bl	8005b9c <sx126x_hal_read>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 800639a:	7b7b      	ldrb	r3, [r7, #13]
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	b21a      	sxth	r2, r3
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	4313      	orrs	r3, r2
 80063a6:	b21b      	sxth	r3, r3
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 80063ae:	7b3b      	ldrb	r3, [r7, #12]
 80063b0:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	080096cc 	.word	0x080096cc

080063c0 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <sx126x_clear_irq_status+0x48>)
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	81bb      	strh	r3, [r7, #12]
 80063d2:	2300      	movs	r3, #0
 80063d4:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 80063d6:	2302      	movs	r3, #2
 80063d8:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	b29b      	uxth	r3, r3
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 80063ea:	f107 010c 	add.w	r1, r7, #12
 80063ee:	2300      	movs	r3, #0
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2300      	movs	r3, #0
 80063f4:	2203      	movs	r2, #3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fb8e 	bl	8005b18 <sx126x_hal_write>
 80063fc:	4603      	mov	r3, r0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	080096cc 	.word	0x080096cc

0800640c <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af02      	add	r7, sp, #8
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 8006418:	2300      	movs	r3, #0
 800641a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800641c:	239d      	movs	r3, #157	; 0x9d
 800641e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8006424:	f107 010c 	add.w	r1, r7, #12
 8006428:	2300      	movs	r3, #0
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2300      	movs	r3, #0
 800642e:	2202      	movs	r2, #2
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fb71 	bl	8005b18 <sx126x_hal_write>
 8006436:	4603      	mov	r3, r0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	460b      	mov	r3, r1
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	2300      	movs	r3, #0
 8006454:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 8006456:	2397      	movs	r3, #151	; 0x97
 8006458:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800645a:	7afb      	ldrb	r3, [r7, #11]
 800645c:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	b2db      	uxtb	r3, r3
 8006464:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	b2db      	uxtb	r3, r3
 800646c:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8006474:	f107 0110 	add.w	r1, r7, #16
 8006478:	2300      	movs	r3, #0
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	2205      	movs	r2, #5
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff fb49 	bl	8005b18 <sx126x_hal_write>
 8006486:	4603      	mov	r3, r0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800649a:	6838      	ldr	r0, [r7, #0]
 800649c:	f000 f92e 	bl	80066fc <sx126x_convert_freq_in_hz_to_pll_step>
 80064a0:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f805 	bl	80064b4 <sx126x_set_rf_freq_in_pll_steps>
 80064aa:	4603      	mov	r3, r0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	2300      	movs	r3, #0
 80064c4:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 80064c6:	2386      	movs	r3, #134	; 0x86
 80064c8:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	0e1b      	lsrs	r3, r3, #24
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	0a1b      	lsrs	r3, r3, #8
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 80064e8:	f107 0108 	add.w	r1, r7, #8
 80064ec:	2300      	movs	r3, #0
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	2205      	movs	r2, #5
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fb0f 	bl	8005b18 <sx126x_hal_write>
 80064fa:	4603      	mov	r3, r0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8006510:	2300      	movs	r3, #0
 8006512:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8006514:	238a      	movs	r3, #138	; 0x8a
 8006516:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800651c:	f107 010c 	add.w	r1, r7, #12
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	2202      	movs	r2, #2
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff faf5 	bl	8005b18 <sx126x_hal_write>
 800652e:	4603      	mov	r3, r0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
 8006544:	4613      	mov	r3, r2
 8006546:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <sx126x_set_tx_params+0x44>)
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	81bb      	strh	r3, [r7, #12]
 800654e:	2300      	movs	r3, #0
 8006550:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 8006552:	238e      	movs	r3, #142	; 0x8e
 8006554:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800655a:	78bb      	ldrb	r3, [r7, #2]
 800655c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800655e:	f107 010c 	add.w	r1, r7, #12
 8006562:	2300      	movs	r3, #0
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	2300      	movs	r3, #0
 8006568:	2203      	movs	r2, #3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff fad4 	bl	8005b18 <sx126x_hal_write>
 8006570:	4603      	mov	r3, r0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	080096cc 	.word	0x080096cc

08006580 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af02      	add	r7, sp, #8
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800658a:	2303      	movs	r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800658e:	2300      	movs	r3, #0
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	2300      	movs	r3, #0
 8006594:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 8006596:	238b      	movs	r3, #139	; 0x8b
 8006598:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	789b      	ldrb	r3, [r3, #2]
 80065aa:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	78db      	ldrb	r3, [r3, #3]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 80065b8:	f107 0108 	add.w	r1, r7, #8
 80065bc:	2300      	movs	r3, #0
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2300      	movs	r3, #0
 80065c2:	2205      	movs	r2, #5
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff faa7 	bl	8005b18 <sx126x_hal_write>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 80065e2:	2303      	movs	r3, #3
 80065e4:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	f107 0314 	add.w	r3, r7, #20
 80065ee:	2100      	movs	r1, #0
 80065f0:	460a      	mov	r2, r1
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	460a      	mov	r2, r1
 80065f6:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 80065f8:	238c      	movs	r3, #140	; 0x8c
 80065fa:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	b29b      	uxth	r3, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	789b      	ldrb	r3, [r3, #2]
 8006614:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	78db      	ldrb	r3, [r3, #3]
 800661a:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	791b      	ldrb	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <sx126x_set_lora_pkt_params+0x50>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <sx126x_set_lora_pkt_params+0x52>
 8006628:	2300      	movs	r3, #0
 800662a:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	795b      	ldrb	r3, [r3, #5]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <sx126x_set_lora_pkt_params+0x60>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <sx126x_set_lora_pkt_params+0x62>
 8006638:	2300      	movs	r3, #0
 800663a:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800663c:	f107 0110 	add.w	r1, r7, #16
 8006640:	2300      	movs	r3, #0
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	2207      	movs	r2, #7
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fa65 	bl	8005b18 <sx126x_hal_write>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d127      	bne.n	80066a8 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800665c:	f107 020f 	add.w	r2, r7, #15
 8006660:	2301      	movs	r3, #1
 8006662:	f240 7136 	movw	r1, #1846	; 0x736
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff fdec 	bl	8006244 <sx126x_read_register>
 800666c:	4603      	mov	r3, r0
 800666e:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d118      	bne.n	80066a8 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	795b      	ldrb	r3, [r3, #5]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	f023 0304 	bic.w	r3, r3, #4
 8006684:	b2db      	uxtb	r3, r3
 8006686:	73fb      	strb	r3, [r7, #15]
 8006688:	e004      	b.n	8006694 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	f043 0304 	orr.w	r3, r3, #4
 8006690:	b2db      	uxtb	r3, r3
 8006692:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8006694:	f107 020f 	add.w	r2, r7, #15
 8006698:	2301      	movs	r3, #1
 800669a:	f240 7136 	movw	r1, #1846	; 0x736
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fda6 	bl	80061f0 <sx126x_write_register>
 80066a4:	4603      	mov	r3, r0
 80066a6:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
 80066c0:	4613      	mov	r3, r2
 80066c2:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <sx126x_set_buffer_base_address+0x44>)
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	81bb      	strh	r3, [r7, #12]
 80066ca:	2300      	movs	r3, #0
 80066cc:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 80066ce:	238f      	movs	r3, #143	; 0x8f
 80066d0:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 80066d6:	78bb      	ldrb	r3, [r7, #2]
 80066d8:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 80066da:	f107 010c 	add.w	r1, r7, #12
 80066de:	2300      	movs	r3, #0
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	2203      	movs	r2, #3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fa16 	bl	8005b18 <sx126x_hal_write>
 80066ec:	4603      	mov	r3, r0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	080096cc 	.word	0x080096cc

080066fc <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a0f      	ldr	r2, [pc, #60]	; (8006744 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	0b1b      	lsrs	r3, r3, #12
 800670e:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f643 5209 	movw	r2, #15625	; 0x3d09
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	039b      	lsls	r3, r3, #14
 8006728:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800672c:	3304      	adds	r3, #4
 800672e:	4905      	ldr	r1, [pc, #20]	; (8006744 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8006730:	fba1 1303 	umull	r1, r3, r1, r3
 8006734:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8006736:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	431bde83 	.word	0x431bde83

08006748 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	019b      	lsls	r3, r3, #6
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <SysTick_Handler+0x1c>)
 8006766:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006768:	f000 f996 	bl	8006a98 <xTaskGetSchedulerState>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d001      	beq.n	8006776 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006772:	f000 fa01 	bl	8006b78 <xPortSysTickHandler>
  }
}
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	e000e010 	.word	0xe000e010

08006780 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	601a      	str	r2, [r3, #0]
}
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6892      	ldr	r2, [r2, #8]
 80067de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6852      	ldr	r2, [r2, #4]
 80067e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d103      	bne.n	80067fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	1e5a      	subs	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006826:	4b4f      	ldr	r3, [pc, #316]	; (8006964 <xTaskIncrementTick+0x148>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 808f 	bne.w	800694e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006830:	4b4d      	ldr	r3, [pc, #308]	; (8006968 <xTaskIncrementTick+0x14c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006838:	4a4b      	ldr	r2, [pc, #300]	; (8006968 <xTaskIncrementTick+0x14c>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d120      	bne.n	8006886 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006844:	4b49      	ldr	r3, [pc, #292]	; (800696c <xTaskIncrementTick+0x150>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <xTaskIncrementTick+0x46>
 8006864:	4b41      	ldr	r3, [pc, #260]	; (800696c <xTaskIncrementTick+0x150>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	4b41      	ldr	r3, [pc, #260]	; (8006970 <xTaskIncrementTick+0x154>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a3f      	ldr	r2, [pc, #252]	; (800696c <xTaskIncrementTick+0x150>)
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4a3f      	ldr	r2, [pc, #252]	; (8006970 <xTaskIncrementTick+0x154>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <xTaskIncrementTick+0x158>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	4a3d      	ldr	r2, [pc, #244]	; (8006974 <xTaskIncrementTick+0x158>)
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	f000 f8e9 	bl	8006a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006886:	4b3c      	ldr	r3, [pc, #240]	; (8006978 <xTaskIncrementTick+0x15c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	429a      	cmp	r2, r3
 800688e:	d349      	bcc.n	8006924 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006890:	4b36      	ldr	r3, [pc, #216]	; (800696c <xTaskIncrementTick+0x150>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689a:	4b37      	ldr	r3, [pc, #220]	; (8006978 <xTaskIncrementTick+0x15c>)
 800689c:	f04f 32ff 	mov.w	r2, #4294967295
 80068a0:	601a      	str	r2, [r3, #0]
					break;
 80068a2:	e03f      	b.n	8006924 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a4:	4b31      	ldr	r3, [pc, #196]	; (800696c <xTaskIncrementTick+0x150>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d203      	bcs.n	80068c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068bc:	4a2e      	ldr	r2, [pc, #184]	; (8006978 <xTaskIncrementTick+0x15c>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068c2:	e02f      	b.n	8006924 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ff7d 	bl	80067c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3318      	adds	r3, #24
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff ff74 	bl	80067c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e4:	4b25      	ldr	r3, [pc, #148]	; (800697c <xTaskIncrementTick+0x160>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d903      	bls.n	80068f4 <xTaskIncrementTick+0xd8>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	4a22      	ldr	r2, [pc, #136]	; (800697c <xTaskIncrementTick+0x160>)
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <xTaskIncrementTick+0x164>)
 8006902:	441a      	add	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	3304      	adds	r3, #4
 8006908:	4619      	mov	r1, r3
 800690a:	4610      	mov	r0, r2
 800690c:	f7ff ff38 	bl	8006780 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	4b1b      	ldr	r3, [pc, #108]	; (8006984 <xTaskIncrementTick+0x168>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	429a      	cmp	r2, r3
 800691c:	d3b8      	bcc.n	8006890 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006922:	e7b5      	b.n	8006890 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <xTaskIncrementTick+0x168>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692a:	4915      	ldr	r1, [pc, #84]	; (8006980 <xTaskIncrementTick+0x164>)
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d901      	bls.n	8006940 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <xTaskIncrementTick+0x16c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e004      	b.n	8006958 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <xTaskIncrementTick+0x170>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a0d      	ldr	r2, [pc, #52]	; (800698c <xTaskIncrementTick+0x170>)
 8006956:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006958:	697b      	ldr	r3, [r7, #20]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000724 	.word	0x20000724
 8006968:	20000708 	.word	0x20000708
 800696c:	20000700 	.word	0x20000700
 8006970:	20000704 	.word	0x20000704
 8006974:	2000071c 	.word	0x2000071c
 8006978:	20000720 	.word	0x20000720
 800697c:	2000070c 	.word	0x2000070c
 8006980:	200002a0 	.word	0x200002a0
 8006984:	2000029c 	.word	0x2000029c
 8006988:	20000718 	.word	0x20000718
 800698c:	20000714 	.word	0x20000714

08006990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006996:	4b2a      	ldr	r3, [pc, #168]	; (8006a40 <vTaskSwitchContext+0xb0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800699e:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <vTaskSwitchContext+0xb4>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069a4:	e046      	b.n	8006a34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80069a6:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <vTaskSwitchContext+0xb4>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ac:	4b26      	ldr	r3, [pc, #152]	; (8006a48 <vTaskSwitchContext+0xb8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e010      	b.n	80069d6 <vTaskSwitchContext+0x46>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	607b      	str	r3, [r7, #4]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <vTaskSwitchContext+0x3e>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	491d      	ldr	r1, [pc, #116]	; (8006a4c <vTaskSwitchContext+0xbc>)
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0e4      	beq.n	80069b4 <vTaskSwitchContext+0x24>
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <vTaskSwitchContext+0xbc>)
 80069f6:	4413      	add	r3, r2
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	605a      	str	r2, [r3, #4]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d104      	bne.n	8006a1a <vTaskSwitchContext+0x8a>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	605a      	str	r2, [r3, #4]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4a0b      	ldr	r2, [pc, #44]	; (8006a50 <vTaskSwitchContext+0xc0>)
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <vTaskSwitchContext+0xb8>)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <vTaskSwitchContext+0xc0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3354      	adds	r3, #84	; 0x54
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <vTaskSwitchContext+0xc4>)
 8006a32:	6013      	str	r3, [r2, #0]
}
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	20000724 	.word	0x20000724
 8006a44:	20000718 	.word	0x20000718
 8006a48:	2000070c 	.word	0x2000070c
 8006a4c:	200002a0 	.word	0x200002a0
 8006a50:	2000029c 	.word	0x2000029c
 8006a54:	20000028 	.word	0x20000028

08006a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a70:	e008      	b.n	8006a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a82:	6013      	str	r3, [r2, #0]
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20000700 	.word	0x20000700
 8006a94:	20000720 	.word	0x20000720

08006a98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <xTaskGetSchedulerState+0x34>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d102      	bne.n	8006aac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	e008      	b.n	8006abe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <xTaskGetSchedulerState+0x38>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	e001      	b.n	8006abe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006abe:	687b      	ldr	r3, [r7, #4]
	}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	20000710 	.word	0x20000710
 8006ad0:	20000724 	.word	0x20000724
	...

08006ae0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <pxCurrentTCBConst2>)
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6808      	ldr	r0, [r1, #0]
 8006ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	f380 8809 	msr	PSP, r0
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8811 	msr	BASEPRI, r0
 8006afa:	4770      	bx	lr
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst2>:
 8006b00:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
	...

08006b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b10:	f3ef 8009 	mrs	r0, PSP
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <pxCurrentTCBConst>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	f01e 0f10 	tst.w	lr, #16
 8006b20:	bf08      	it	eq
 8006b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	6010      	str	r0, [r2, #0]
 8006b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b34:	f380 8811 	msr	BASEPRI, r0
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f7ff ff26 	bl	8006990 <vTaskSwitchContext>
 8006b44:	f04f 0000 	mov.w	r0, #0
 8006b48:	f380 8811 	msr	BASEPRI, r0
 8006b4c:	bc09      	pop	{r0, r3}
 8006b4e:	6819      	ldr	r1, [r3, #0]
 8006b50:	6808      	ldr	r0, [r1, #0]
 8006b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b56:	f01e 0f10 	tst.w	lr, #16
 8006b5a:	bf08      	it	eq
 8006b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b60:	f380 8809 	msr	PSP, r0
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w

08006b70 <pxCurrentTCBConst>:
 8006b70:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop

08006b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b92:	f7ff fe43 	bl	800681c <xTaskIncrementTick>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <xPortSysTickHandler+0x40>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <__errno>:
 8006bbc:	4b01      	ldr	r3, [pc, #4]	; (8006bc4 <__errno+0x8>)
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000028 	.word	0x20000028

08006bc8 <std>:
 8006bc8:	2300      	movs	r3, #0
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	4604      	mov	r4, r0
 8006bce:	e9c0 3300 	strd	r3, r3, [r0]
 8006bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bd6:	6083      	str	r3, [r0, #8]
 8006bd8:	8181      	strh	r1, [r0, #12]
 8006bda:	6643      	str	r3, [r0, #100]	; 0x64
 8006bdc:	81c2      	strh	r2, [r0, #14]
 8006bde:	6183      	str	r3, [r0, #24]
 8006be0:	4619      	mov	r1, r3
 8006be2:	2208      	movs	r2, #8
 8006be4:	305c      	adds	r0, #92	; 0x5c
 8006be6:	f000 f92b 	bl	8006e40 <memset>
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <std+0x38>)
 8006bec:	6263      	str	r3, [r4, #36]	; 0x24
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <std+0x3c>)
 8006bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <std+0x40>)
 8006bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bf6:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <std+0x44>)
 8006bf8:	6224      	str	r4, [r4, #32]
 8006bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	bf00      	nop
 8006c00:	08007899 	.word	0x08007899
 8006c04:	080078bb 	.word	0x080078bb
 8006c08:	080078f3 	.word	0x080078f3
 8006c0c:	08007917 	.word	0x08007917

08006c10 <_cleanup_r>:
 8006c10:	4901      	ldr	r1, [pc, #4]	; (8006c18 <_cleanup_r+0x8>)
 8006c12:	f000 b8af 	b.w	8006d74 <_fwalk_reent>
 8006c16:	bf00      	nop
 8006c18:	08008765 	.word	0x08008765

08006c1c <__sfmoreglue>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	1e4a      	subs	r2, r1, #1
 8006c20:	2568      	movs	r5, #104	; 0x68
 8006c22:	4355      	muls	r5, r2
 8006c24:	460e      	mov	r6, r1
 8006c26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c2a:	f000 f961 	bl	8006ef0 <_malloc_r>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	b140      	cbz	r0, 8006c44 <__sfmoreglue+0x28>
 8006c32:	2100      	movs	r1, #0
 8006c34:	e9c0 1600 	strd	r1, r6, [r0]
 8006c38:	300c      	adds	r0, #12
 8006c3a:	60a0      	str	r0, [r4, #8]
 8006c3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c40:	f000 f8fe 	bl	8006e40 <memset>
 8006c44:	4620      	mov	r0, r4
 8006c46:	bd70      	pop	{r4, r5, r6, pc}

08006c48 <__sfp_lock_acquire>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__sfp_lock_acquire+0x8>)
 8006c4a:	f000 b8d8 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8006c4e:	bf00      	nop
 8006c50:	20001484 	.word	0x20001484

08006c54 <__sfp_lock_release>:
 8006c54:	4801      	ldr	r0, [pc, #4]	; (8006c5c <__sfp_lock_release+0x8>)
 8006c56:	f000 b8d3 	b.w	8006e00 <__retarget_lock_release_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	20001484 	.word	0x20001484

08006c60 <__sinit_lock_acquire>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__sinit_lock_acquire+0x8>)
 8006c62:	f000 b8cc 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8006c66:	bf00      	nop
 8006c68:	2000147f 	.word	0x2000147f

08006c6c <__sinit_lock_release>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__sinit_lock_release+0x8>)
 8006c6e:	f000 b8c7 	b.w	8006e00 <__retarget_lock_release_recursive>
 8006c72:	bf00      	nop
 8006c74:	2000147f 	.word	0x2000147f

08006c78 <__sinit>:
 8006c78:	b510      	push	{r4, lr}
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	f7ff fff0 	bl	8006c60 <__sinit_lock_acquire>
 8006c80:	69a3      	ldr	r3, [r4, #24]
 8006c82:	b11b      	cbz	r3, 8006c8c <__sinit+0x14>
 8006c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c88:	f7ff bff0 	b.w	8006c6c <__sinit_lock_release>
 8006c8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c90:	6523      	str	r3, [r4, #80]	; 0x50
 8006c92:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <__sinit+0x68>)
 8006c94:	4a13      	ldr	r2, [pc, #76]	; (8006ce4 <__sinit+0x6c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	bf04      	itt	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	61a3      	streq	r3, [r4, #24]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f820 	bl	8006ce8 <__sfp>
 8006ca8:	6060      	str	r0, [r4, #4]
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 f81c 	bl	8006ce8 <__sfp>
 8006cb0:	60a0      	str	r0, [r4, #8]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 f818 	bl	8006ce8 <__sfp>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	60e0      	str	r0, [r4, #12]
 8006cbc:	2104      	movs	r1, #4
 8006cbe:	6860      	ldr	r0, [r4, #4]
 8006cc0:	f7ff ff82 	bl	8006bc8 <std>
 8006cc4:	68a0      	ldr	r0, [r4, #8]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	2109      	movs	r1, #9
 8006cca:	f7ff ff7d 	bl	8006bc8 <std>
 8006cce:	68e0      	ldr	r0, [r4, #12]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	2112      	movs	r1, #18
 8006cd4:	f7ff ff78 	bl	8006bc8 <std>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	61a3      	str	r3, [r4, #24]
 8006cdc:	e7d2      	b.n	8006c84 <__sinit+0xc>
 8006cde:	bf00      	nop
 8006ce0:	08009748 	.word	0x08009748
 8006ce4:	08006c11 	.word	0x08006c11

08006ce8 <__sfp>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	4607      	mov	r7, r0
 8006cec:	f7ff ffac 	bl	8006c48 <__sfp_lock_acquire>
 8006cf0:	4b1e      	ldr	r3, [pc, #120]	; (8006d6c <__sfp+0x84>)
 8006cf2:	681e      	ldr	r6, [r3, #0]
 8006cf4:	69b3      	ldr	r3, [r6, #24]
 8006cf6:	b913      	cbnz	r3, 8006cfe <__sfp+0x16>
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7ff ffbd 	bl	8006c78 <__sinit>
 8006cfe:	3648      	adds	r6, #72	; 0x48
 8006d00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	d503      	bpl.n	8006d10 <__sfp+0x28>
 8006d08:	6833      	ldr	r3, [r6, #0]
 8006d0a:	b30b      	cbz	r3, 8006d50 <__sfp+0x68>
 8006d0c:	6836      	ldr	r6, [r6, #0]
 8006d0e:	e7f7      	b.n	8006d00 <__sfp+0x18>
 8006d10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d14:	b9d5      	cbnz	r5, 8006d4c <__sfp+0x64>
 8006d16:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <__sfp+0x88>)
 8006d18:	60e3      	str	r3, [r4, #12]
 8006d1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d1e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d20:	f000 f86c 	bl	8006dfc <__retarget_lock_init_recursive>
 8006d24:	f7ff ff96 	bl	8006c54 <__sfp_lock_release>
 8006d28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d30:	6025      	str	r5, [r4, #0]
 8006d32:	61a5      	str	r5, [r4, #24]
 8006d34:	2208      	movs	r2, #8
 8006d36:	4629      	mov	r1, r5
 8006d38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d3c:	f000 f880 	bl	8006e40 <memset>
 8006d40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d48:	4620      	mov	r0, r4
 8006d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4c:	3468      	adds	r4, #104	; 0x68
 8006d4e:	e7d9      	b.n	8006d04 <__sfp+0x1c>
 8006d50:	2104      	movs	r1, #4
 8006d52:	4638      	mov	r0, r7
 8006d54:	f7ff ff62 	bl	8006c1c <__sfmoreglue>
 8006d58:	4604      	mov	r4, r0
 8006d5a:	6030      	str	r0, [r6, #0]
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d1d5      	bne.n	8006d0c <__sfp+0x24>
 8006d60:	f7ff ff78 	bl	8006c54 <__sfp_lock_release>
 8006d64:	230c      	movs	r3, #12
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	e7ee      	b.n	8006d48 <__sfp+0x60>
 8006d6a:	bf00      	nop
 8006d6c:	08009748 	.word	0x08009748
 8006d70:	ffff0001 	.word	0xffff0001

08006d74 <_fwalk_reent>:
 8006d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d78:	4606      	mov	r6, r0
 8006d7a:	4688      	mov	r8, r1
 8006d7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d80:	2700      	movs	r7, #0
 8006d82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d86:	f1b9 0901 	subs.w	r9, r9, #1
 8006d8a:	d505      	bpl.n	8006d98 <_fwalk_reent+0x24>
 8006d8c:	6824      	ldr	r4, [r4, #0]
 8006d8e:	2c00      	cmp	r4, #0
 8006d90:	d1f7      	bne.n	8006d82 <_fwalk_reent+0xe>
 8006d92:	4638      	mov	r0, r7
 8006d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d98:	89ab      	ldrh	r3, [r5, #12]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d907      	bls.n	8006dae <_fwalk_reent+0x3a>
 8006d9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006da2:	3301      	adds	r3, #1
 8006da4:	d003      	beq.n	8006dae <_fwalk_reent+0x3a>
 8006da6:	4629      	mov	r1, r5
 8006da8:	4630      	mov	r0, r6
 8006daa:	47c0      	blx	r8
 8006dac:	4307      	orrs	r7, r0
 8006dae:	3568      	adds	r5, #104	; 0x68
 8006db0:	e7e9      	b.n	8006d86 <_fwalk_reent+0x12>
	...

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4d0d      	ldr	r5, [pc, #52]	; (8006dec <__libc_init_array+0x38>)
 8006db8:	4c0d      	ldr	r4, [pc, #52]	; (8006df0 <__libc_init_array+0x3c>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	4d0b      	ldr	r5, [pc, #44]	; (8006df4 <__libc_init_array+0x40>)
 8006dc6:	4c0c      	ldr	r4, [pc, #48]	; (8006df8 <__libc_init_array+0x44>)
 8006dc8:	f002 fc06 	bl	80095d8 <_init>
 8006dcc:	1b64      	subs	r4, r4, r5
 8006dce:	10a4      	asrs	r4, r4, #2
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	08009ad4 	.word	0x08009ad4
 8006df0:	08009ad4 	.word	0x08009ad4
 8006df4:	08009ad4 	.word	0x08009ad4
 8006df8:	08009ad8 	.word	0x08009ad8

08006dfc <__retarget_lock_init_recursive>:
 8006dfc:	4770      	bx	lr

08006dfe <__retarget_lock_acquire_recursive>:
 8006dfe:	4770      	bx	lr

08006e00 <__retarget_lock_release_recursive>:
 8006e00:	4770      	bx	lr
	...

08006e04 <malloc>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <malloc+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f000 b871 	b.w	8006ef0 <_malloc_r>
 8006e0e:	bf00      	nop
 8006e10:	20000028 	.word	0x20000028

08006e14 <free>:
 8006e14:	4b02      	ldr	r3, [pc, #8]	; (8006e20 <free+0xc>)
 8006e16:	4601      	mov	r1, r0
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	f000 b819 	b.w	8006e50 <_free_r>
 8006e1e:	bf00      	nop
 8006e20:	20000028 	.word	0x20000028

08006e24 <memcpy>:
 8006e24:	440a      	add	r2, r1
 8006e26:	4291      	cmp	r1, r2
 8006e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e2c:	d100      	bne.n	8006e30 <memcpy+0xc>
 8006e2e:	4770      	bx	lr
 8006e30:	b510      	push	{r4, lr}
 8006e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	d1f9      	bne.n	8006e32 <memcpy+0xe>
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <memset>:
 8006e40:	4402      	add	r2, r0
 8006e42:	4603      	mov	r3, r0
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d100      	bne.n	8006e4a <memset+0xa>
 8006e48:	4770      	bx	lr
 8006e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4e:	e7f9      	b.n	8006e44 <memset+0x4>

08006e50 <_free_r>:
 8006e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d048      	beq.n	8006ee8 <_free_r+0x98>
 8006e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5a:	9001      	str	r0, [sp, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e62:	bfb8      	it	lt
 8006e64:	18e4      	addlt	r4, r4, r3
 8006e66:	f001 fccf 	bl	8008808 <__malloc_lock>
 8006e6a:	4a20      	ldr	r2, [pc, #128]	; (8006eec <_free_r+0x9c>)
 8006e6c:	9801      	ldr	r0, [sp, #4]
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	4615      	mov	r5, r2
 8006e72:	b933      	cbnz	r3, 8006e82 <_free_r+0x32>
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	6014      	str	r4, [r2, #0]
 8006e78:	b003      	add	sp, #12
 8006e7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e7e:	f001 bcc9 	b.w	8008814 <__malloc_unlock>
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	d90b      	bls.n	8006e9e <_free_r+0x4e>
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	1862      	adds	r2, r4, r1
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	bf04      	itt	eq
 8006e8e:	681a      	ldreq	r2, [r3, #0]
 8006e90:	685b      	ldreq	r3, [r3, #4]
 8006e92:	6063      	str	r3, [r4, #4]
 8006e94:	bf04      	itt	eq
 8006e96:	1852      	addeq	r2, r2, r1
 8006e98:	6022      	streq	r2, [r4, #0]
 8006e9a:	602c      	str	r4, [r5, #0]
 8006e9c:	e7ec      	b.n	8006e78 <_free_r+0x28>
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	b10b      	cbz	r3, 8006ea8 <_free_r+0x58>
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d9fa      	bls.n	8006e9e <_free_r+0x4e>
 8006ea8:	6811      	ldr	r1, [r2, #0]
 8006eaa:	1855      	adds	r5, r2, r1
 8006eac:	42a5      	cmp	r5, r4
 8006eae:	d10b      	bne.n	8006ec8 <_free_r+0x78>
 8006eb0:	6824      	ldr	r4, [r4, #0]
 8006eb2:	4421      	add	r1, r4
 8006eb4:	1854      	adds	r4, r2, r1
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	6011      	str	r1, [r2, #0]
 8006eba:	d1dd      	bne.n	8006e78 <_free_r+0x28>
 8006ebc:	681c      	ldr	r4, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	6053      	str	r3, [r2, #4]
 8006ec2:	4421      	add	r1, r4
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	e7d7      	b.n	8006e78 <_free_r+0x28>
 8006ec8:	d902      	bls.n	8006ed0 <_free_r+0x80>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	e7d3      	b.n	8006e78 <_free_r+0x28>
 8006ed0:	6825      	ldr	r5, [r4, #0]
 8006ed2:	1961      	adds	r1, r4, r5
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	bf04      	itt	eq
 8006ed8:	6819      	ldreq	r1, [r3, #0]
 8006eda:	685b      	ldreq	r3, [r3, #4]
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	bf04      	itt	eq
 8006ee0:	1949      	addeq	r1, r1, r5
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	6054      	str	r4, [r2, #4]
 8006ee6:	e7c7      	b.n	8006e78 <_free_r+0x28>
 8006ee8:	b003      	add	sp, #12
 8006eea:	bd30      	pop	{r4, r5, pc}
 8006eec:	20000728 	.word	0x20000728

08006ef0 <_malloc_r>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	1ccd      	adds	r5, r1, #3
 8006ef4:	f025 0503 	bic.w	r5, r5, #3
 8006ef8:	3508      	adds	r5, #8
 8006efa:	2d0c      	cmp	r5, #12
 8006efc:	bf38      	it	cc
 8006efe:	250c      	movcc	r5, #12
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	4606      	mov	r6, r0
 8006f04:	db01      	blt.n	8006f0a <_malloc_r+0x1a>
 8006f06:	42a9      	cmp	r1, r5
 8006f08:	d903      	bls.n	8006f12 <_malloc_r+0x22>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	6033      	str	r3, [r6, #0]
 8006f0e:	2000      	movs	r0, #0
 8006f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f12:	f001 fc79 	bl	8008808 <__malloc_lock>
 8006f16:	4921      	ldr	r1, [pc, #132]	; (8006f9c <_malloc_r+0xac>)
 8006f18:	680a      	ldr	r2, [r1, #0]
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	b99c      	cbnz	r4, 8006f46 <_malloc_r+0x56>
 8006f1e:	4f20      	ldr	r7, [pc, #128]	; (8006fa0 <_malloc_r+0xb0>)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	b923      	cbnz	r3, 8006f2e <_malloc_r+0x3e>
 8006f24:	4621      	mov	r1, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 fca6 	bl	8007878 <_sbrk_r>
 8006f2c:	6038      	str	r0, [r7, #0]
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 fca1 	bl	8007878 <_sbrk_r>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d123      	bne.n	8006f82 <_malloc_r+0x92>
 8006f3a:	230c      	movs	r3, #12
 8006f3c:	6033      	str	r3, [r6, #0]
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f001 fc68 	bl	8008814 <__malloc_unlock>
 8006f44:	e7e3      	b.n	8006f0e <_malloc_r+0x1e>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	1b5b      	subs	r3, r3, r5
 8006f4a:	d417      	bmi.n	8006f7c <_malloc_r+0x8c>
 8006f4c:	2b0b      	cmp	r3, #11
 8006f4e:	d903      	bls.n	8006f58 <_malloc_r+0x68>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	441c      	add	r4, r3
 8006f54:	6025      	str	r5, [r4, #0]
 8006f56:	e004      	b.n	8006f62 <_malloc_r+0x72>
 8006f58:	6863      	ldr	r3, [r4, #4]
 8006f5a:	42a2      	cmp	r2, r4
 8006f5c:	bf0c      	ite	eq
 8006f5e:	600b      	streq	r3, [r1, #0]
 8006f60:	6053      	strne	r3, [r2, #4]
 8006f62:	4630      	mov	r0, r6
 8006f64:	f001 fc56 	bl	8008814 <__malloc_unlock>
 8006f68:	f104 000b 	add.w	r0, r4, #11
 8006f6c:	1d23      	adds	r3, r4, #4
 8006f6e:	f020 0007 	bic.w	r0, r0, #7
 8006f72:	1ac2      	subs	r2, r0, r3
 8006f74:	d0cc      	beq.n	8006f10 <_malloc_r+0x20>
 8006f76:	1a1b      	subs	r3, r3, r0
 8006f78:	50a3      	str	r3, [r4, r2]
 8006f7a:	e7c9      	b.n	8006f10 <_malloc_r+0x20>
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	6864      	ldr	r4, [r4, #4]
 8006f80:	e7cc      	b.n	8006f1c <_malloc_r+0x2c>
 8006f82:	1cc4      	adds	r4, r0, #3
 8006f84:	f024 0403 	bic.w	r4, r4, #3
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d0e3      	beq.n	8006f54 <_malloc_r+0x64>
 8006f8c:	1a21      	subs	r1, r4, r0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f000 fc72 	bl	8007878 <_sbrk_r>
 8006f94:	3001      	adds	r0, #1
 8006f96:	d1dd      	bne.n	8006f54 <_malloc_r+0x64>
 8006f98:	e7cf      	b.n	8006f3a <_malloc_r+0x4a>
 8006f9a:	bf00      	nop
 8006f9c:	20000728 	.word	0x20000728
 8006fa0:	2000072c 	.word	0x2000072c

08006fa4 <__cvt>:
 8006fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	ec55 4b10 	vmov	r4, r5, d0
 8006fac:	2d00      	cmp	r5, #0
 8006fae:	460e      	mov	r6, r1
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	bfbb      	ittet	lt
 8006fb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fba:	461d      	movlt	r5, r3
 8006fbc:	2300      	movge	r3, #0
 8006fbe:	232d      	movlt	r3, #45	; 0x2d
 8006fc0:	700b      	strb	r3, [r1, #0]
 8006fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fc8:	4691      	mov	r9, r2
 8006fca:	f023 0820 	bic.w	r8, r3, #32
 8006fce:	bfbc      	itt	lt
 8006fd0:	4622      	movlt	r2, r4
 8006fd2:	4614      	movlt	r4, r2
 8006fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fd8:	d005      	beq.n	8006fe6 <__cvt+0x42>
 8006fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fde:	d100      	bne.n	8006fe2 <__cvt+0x3e>
 8006fe0:	3601      	adds	r6, #1
 8006fe2:	2102      	movs	r1, #2
 8006fe4:	e000      	b.n	8006fe8 <__cvt+0x44>
 8006fe6:	2103      	movs	r1, #3
 8006fe8:	ab03      	add	r3, sp, #12
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	ab02      	add	r3, sp, #8
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	ec45 4b10 	vmov	d0, r4, r5
 8006ff4:	4653      	mov	r3, sl
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	f000 fd42 	bl	8007a80 <_dtoa_r>
 8006ffc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007000:	4607      	mov	r7, r0
 8007002:	d102      	bne.n	800700a <__cvt+0x66>
 8007004:	f019 0f01 	tst.w	r9, #1
 8007008:	d022      	beq.n	8007050 <__cvt+0xac>
 800700a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800700e:	eb07 0906 	add.w	r9, r7, r6
 8007012:	d110      	bne.n	8007036 <__cvt+0x92>
 8007014:	783b      	ldrb	r3, [r7, #0]
 8007016:	2b30      	cmp	r3, #48	; 0x30
 8007018:	d10a      	bne.n	8007030 <__cvt+0x8c>
 800701a:	2200      	movs	r2, #0
 800701c:	2300      	movs	r3, #0
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 8007026:	b918      	cbnz	r0, 8007030 <__cvt+0x8c>
 8007028:	f1c6 0601 	rsb	r6, r6, #1
 800702c:	f8ca 6000 	str.w	r6, [sl]
 8007030:	f8da 3000 	ldr.w	r3, [sl]
 8007034:	4499      	add	r9, r3
 8007036:	2200      	movs	r2, #0
 8007038:	2300      	movs	r3, #0
 800703a:	4620      	mov	r0, r4
 800703c:	4629      	mov	r1, r5
 800703e:	f7f9 fd53 	bl	8000ae8 <__aeabi_dcmpeq>
 8007042:	b108      	cbz	r0, 8007048 <__cvt+0xa4>
 8007044:	f8cd 900c 	str.w	r9, [sp, #12]
 8007048:	2230      	movs	r2, #48	; 0x30
 800704a:	9b03      	ldr	r3, [sp, #12]
 800704c:	454b      	cmp	r3, r9
 800704e:	d307      	bcc.n	8007060 <__cvt+0xbc>
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007054:	1bdb      	subs	r3, r3, r7
 8007056:	4638      	mov	r0, r7
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	b004      	add	sp, #16
 800705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007060:	1c59      	adds	r1, r3, #1
 8007062:	9103      	str	r1, [sp, #12]
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e7f0      	b.n	800704a <__cvt+0xa6>

08007068 <__exponent>:
 8007068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800706a:	4603      	mov	r3, r0
 800706c:	2900      	cmp	r1, #0
 800706e:	bfb8      	it	lt
 8007070:	4249      	neglt	r1, r1
 8007072:	f803 2b02 	strb.w	r2, [r3], #2
 8007076:	bfb4      	ite	lt
 8007078:	222d      	movlt	r2, #45	; 0x2d
 800707a:	222b      	movge	r2, #43	; 0x2b
 800707c:	2909      	cmp	r1, #9
 800707e:	7042      	strb	r2, [r0, #1]
 8007080:	dd2a      	ble.n	80070d8 <__exponent+0x70>
 8007082:	f10d 0407 	add.w	r4, sp, #7
 8007086:	46a4      	mov	ip, r4
 8007088:	270a      	movs	r7, #10
 800708a:	46a6      	mov	lr, r4
 800708c:	460a      	mov	r2, r1
 800708e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007092:	fb07 1516 	mls	r5, r7, r6, r1
 8007096:	3530      	adds	r5, #48	; 0x30
 8007098:	2a63      	cmp	r2, #99	; 0x63
 800709a:	f104 34ff 	add.w	r4, r4, #4294967295
 800709e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070a2:	4631      	mov	r1, r6
 80070a4:	dcf1      	bgt.n	800708a <__exponent+0x22>
 80070a6:	3130      	adds	r1, #48	; 0x30
 80070a8:	f1ae 0502 	sub.w	r5, lr, #2
 80070ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070b0:	1c44      	adds	r4, r0, #1
 80070b2:	4629      	mov	r1, r5
 80070b4:	4561      	cmp	r1, ip
 80070b6:	d30a      	bcc.n	80070ce <__exponent+0x66>
 80070b8:	f10d 0209 	add.w	r2, sp, #9
 80070bc:	eba2 020e 	sub.w	r2, r2, lr
 80070c0:	4565      	cmp	r5, ip
 80070c2:	bf88      	it	hi
 80070c4:	2200      	movhi	r2, #0
 80070c6:	4413      	add	r3, r2
 80070c8:	1a18      	subs	r0, r3, r0
 80070ca:	b003      	add	sp, #12
 80070cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070d6:	e7ed      	b.n	80070b4 <__exponent+0x4c>
 80070d8:	2330      	movs	r3, #48	; 0x30
 80070da:	3130      	adds	r1, #48	; 0x30
 80070dc:	7083      	strb	r3, [r0, #2]
 80070de:	70c1      	strb	r1, [r0, #3]
 80070e0:	1d03      	adds	r3, r0, #4
 80070e2:	e7f1      	b.n	80070c8 <__exponent+0x60>

080070e4 <_printf_float>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	ed2d 8b02 	vpush	{d8}
 80070ec:	b08d      	sub	sp, #52	; 0x34
 80070ee:	460c      	mov	r4, r1
 80070f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070f4:	4616      	mov	r6, r2
 80070f6:	461f      	mov	r7, r3
 80070f8:	4605      	mov	r5, r0
 80070fa:	f001 fb6f 	bl	80087dc <_localeconv_r>
 80070fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007102:	4650      	mov	r0, sl
 8007104:	f7f9 f874 	bl	80001f0 <strlen>
 8007108:	2300      	movs	r3, #0
 800710a:	930a      	str	r3, [sp, #40]	; 0x28
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	9305      	str	r3, [sp, #20]
 8007110:	f8d8 3000 	ldr.w	r3, [r8]
 8007114:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007118:	3307      	adds	r3, #7
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	f103 0208 	add.w	r2, r3, #8
 8007122:	f8c8 2000 	str.w	r2, [r8]
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800712e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007136:	9307      	str	r3, [sp, #28]
 8007138:	f8cd 8018 	str.w	r8, [sp, #24]
 800713c:	ee08 0a10 	vmov	s16, r0
 8007140:	4b9f      	ldr	r3, [pc, #636]	; (80073c0 <_printf_float+0x2dc>)
 8007142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007146:	f04f 32ff 	mov.w	r2, #4294967295
 800714a:	f7f9 fcff 	bl	8000b4c <__aeabi_dcmpun>
 800714e:	bb88      	cbnz	r0, 80071b4 <_printf_float+0xd0>
 8007150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007154:	4b9a      	ldr	r3, [pc, #616]	; (80073c0 <_printf_float+0x2dc>)
 8007156:	f04f 32ff 	mov.w	r2, #4294967295
 800715a:	f7f9 fcd9 	bl	8000b10 <__aeabi_dcmple>
 800715e:	bb48      	cbnz	r0, 80071b4 <_printf_float+0xd0>
 8007160:	2200      	movs	r2, #0
 8007162:	2300      	movs	r3, #0
 8007164:	4640      	mov	r0, r8
 8007166:	4649      	mov	r1, r9
 8007168:	f7f9 fcc8 	bl	8000afc <__aeabi_dcmplt>
 800716c:	b110      	cbz	r0, 8007174 <_printf_float+0x90>
 800716e:	232d      	movs	r3, #45	; 0x2d
 8007170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007174:	4b93      	ldr	r3, [pc, #588]	; (80073c4 <_printf_float+0x2e0>)
 8007176:	4894      	ldr	r0, [pc, #592]	; (80073c8 <_printf_float+0x2e4>)
 8007178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800717c:	bf94      	ite	ls
 800717e:	4698      	movls	r8, r3
 8007180:	4680      	movhi	r8, r0
 8007182:	2303      	movs	r3, #3
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	9b05      	ldr	r3, [sp, #20]
 8007188:	f023 0204 	bic.w	r2, r3, #4
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	f04f 0900 	mov.w	r9, #0
 8007192:	9700      	str	r7, [sp, #0]
 8007194:	4633      	mov	r3, r6
 8007196:	aa0b      	add	r2, sp, #44	; 0x2c
 8007198:	4621      	mov	r1, r4
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f9d8 	bl	8007550 <_printf_common>
 80071a0:	3001      	adds	r0, #1
 80071a2:	f040 8090 	bne.w	80072c6 <_printf_float+0x1e2>
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	b00d      	add	sp, #52	; 0x34
 80071ac:	ecbd 8b02 	vpop	{d8}
 80071b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b4:	4642      	mov	r2, r8
 80071b6:	464b      	mov	r3, r9
 80071b8:	4640      	mov	r0, r8
 80071ba:	4649      	mov	r1, r9
 80071bc:	f7f9 fcc6 	bl	8000b4c <__aeabi_dcmpun>
 80071c0:	b140      	cbz	r0, 80071d4 <_printf_float+0xf0>
 80071c2:	464b      	mov	r3, r9
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bfbc      	itt	lt
 80071c8:	232d      	movlt	r3, #45	; 0x2d
 80071ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071ce:	487f      	ldr	r0, [pc, #508]	; (80073cc <_printf_float+0x2e8>)
 80071d0:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <_printf_float+0x2ec>)
 80071d2:	e7d1      	b.n	8007178 <_printf_float+0x94>
 80071d4:	6863      	ldr	r3, [r4, #4]
 80071d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071da:	9206      	str	r2, [sp, #24]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	d13f      	bne.n	8007260 <_printf_float+0x17c>
 80071e0:	2306      	movs	r3, #6
 80071e2:	6063      	str	r3, [r4, #4]
 80071e4:	9b05      	ldr	r3, [sp, #20]
 80071e6:	6861      	ldr	r1, [r4, #4]
 80071e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071ec:	2300      	movs	r3, #0
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	ab0a      	add	r3, sp, #40	; 0x28
 80071f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071f6:	ab09      	add	r3, sp, #36	; 0x24
 80071f8:	ec49 8b10 	vmov	d0, r8, r9
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	6022      	str	r2, [r4, #0]
 8007200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007204:	4628      	mov	r0, r5
 8007206:	f7ff fecd 	bl	8006fa4 <__cvt>
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800720e:	2b47      	cmp	r3, #71	; 0x47
 8007210:	4680      	mov	r8, r0
 8007212:	d108      	bne.n	8007226 <_printf_float+0x142>
 8007214:	1cc8      	adds	r0, r1, #3
 8007216:	db02      	blt.n	800721e <_printf_float+0x13a>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	4299      	cmp	r1, r3
 800721c:	dd41      	ble.n	80072a2 <_printf_float+0x1be>
 800721e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007222:	fa5f fb8b 	uxtb.w	fp, fp
 8007226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800722a:	d820      	bhi.n	800726e <_printf_float+0x18a>
 800722c:	3901      	subs	r1, #1
 800722e:	465a      	mov	r2, fp
 8007230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007234:	9109      	str	r1, [sp, #36]	; 0x24
 8007236:	f7ff ff17 	bl	8007068 <__exponent>
 800723a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800723c:	1813      	adds	r3, r2, r0
 800723e:	2a01      	cmp	r2, #1
 8007240:	4681      	mov	r9, r0
 8007242:	6123      	str	r3, [r4, #16]
 8007244:	dc02      	bgt.n	800724c <_printf_float+0x168>
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	07d2      	lsls	r2, r2, #31
 800724a:	d501      	bpl.n	8007250 <_printf_float+0x16c>
 800724c:	3301      	adds	r3, #1
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007254:	2b00      	cmp	r3, #0
 8007256:	d09c      	beq.n	8007192 <_printf_float+0xae>
 8007258:	232d      	movs	r3, #45	; 0x2d
 800725a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725e:	e798      	b.n	8007192 <_printf_float+0xae>
 8007260:	9a06      	ldr	r2, [sp, #24]
 8007262:	2a47      	cmp	r2, #71	; 0x47
 8007264:	d1be      	bne.n	80071e4 <_printf_float+0x100>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1bc      	bne.n	80071e4 <_printf_float+0x100>
 800726a:	2301      	movs	r3, #1
 800726c:	e7b9      	b.n	80071e2 <_printf_float+0xfe>
 800726e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007272:	d118      	bne.n	80072a6 <_printf_float+0x1c2>
 8007274:	2900      	cmp	r1, #0
 8007276:	6863      	ldr	r3, [r4, #4]
 8007278:	dd0b      	ble.n	8007292 <_printf_float+0x1ae>
 800727a:	6121      	str	r1, [r4, #16]
 800727c:	b913      	cbnz	r3, 8007284 <_printf_float+0x1a0>
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	07d0      	lsls	r0, r2, #31
 8007282:	d502      	bpl.n	800728a <_printf_float+0x1a6>
 8007284:	3301      	adds	r3, #1
 8007286:	440b      	add	r3, r1
 8007288:	6123      	str	r3, [r4, #16]
 800728a:	65a1      	str	r1, [r4, #88]	; 0x58
 800728c:	f04f 0900 	mov.w	r9, #0
 8007290:	e7de      	b.n	8007250 <_printf_float+0x16c>
 8007292:	b913      	cbnz	r3, 800729a <_printf_float+0x1b6>
 8007294:	6822      	ldr	r2, [r4, #0]
 8007296:	07d2      	lsls	r2, r2, #31
 8007298:	d501      	bpl.n	800729e <_printf_float+0x1ba>
 800729a:	3302      	adds	r3, #2
 800729c:	e7f4      	b.n	8007288 <_printf_float+0x1a4>
 800729e:	2301      	movs	r3, #1
 80072a0:	e7f2      	b.n	8007288 <_printf_float+0x1a4>
 80072a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a8:	4299      	cmp	r1, r3
 80072aa:	db05      	blt.n	80072b8 <_printf_float+0x1d4>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	6121      	str	r1, [r4, #16]
 80072b0:	07d8      	lsls	r0, r3, #31
 80072b2:	d5ea      	bpl.n	800728a <_printf_float+0x1a6>
 80072b4:	1c4b      	adds	r3, r1, #1
 80072b6:	e7e7      	b.n	8007288 <_printf_float+0x1a4>
 80072b8:	2900      	cmp	r1, #0
 80072ba:	bfd4      	ite	le
 80072bc:	f1c1 0202 	rsble	r2, r1, #2
 80072c0:	2201      	movgt	r2, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	e7e0      	b.n	8007288 <_printf_float+0x1a4>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	055a      	lsls	r2, r3, #21
 80072ca:	d407      	bmi.n	80072dc <_printf_float+0x1f8>
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	4642      	mov	r2, r8
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	d12c      	bne.n	8007334 <_printf_float+0x250>
 80072da:	e764      	b.n	80071a6 <_printf_float+0xc2>
 80072dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072e0:	f240 80e0 	bls.w	80074a4 <_printf_float+0x3c0>
 80072e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072e8:	2200      	movs	r2, #0
 80072ea:	2300      	movs	r3, #0
 80072ec:	f7f9 fbfc 	bl	8000ae8 <__aeabi_dcmpeq>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d034      	beq.n	800735e <_printf_float+0x27a>
 80072f4:	4a37      	ldr	r2, [pc, #220]	; (80073d4 <_printf_float+0x2f0>)
 80072f6:	2301      	movs	r3, #1
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	f43f af51 	beq.w	80071a6 <_printf_float+0xc2>
 8007304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007308:	429a      	cmp	r2, r3
 800730a:	db02      	blt.n	8007312 <_printf_float+0x22e>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	07d8      	lsls	r0, r3, #31
 8007310:	d510      	bpl.n	8007334 <_printf_float+0x250>
 8007312:	ee18 3a10 	vmov	r3, s16
 8007316:	4652      	mov	r2, sl
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f af41 	beq.w	80071a6 <_printf_float+0xc2>
 8007324:	f04f 0800 	mov.w	r8, #0
 8007328:	f104 091a 	add.w	r9, r4, #26
 800732c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732e:	3b01      	subs	r3, #1
 8007330:	4543      	cmp	r3, r8
 8007332:	dc09      	bgt.n	8007348 <_printf_float+0x264>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	079b      	lsls	r3, r3, #30
 8007338:	f100 8105 	bmi.w	8007546 <_printf_float+0x462>
 800733c:	68e0      	ldr	r0, [r4, #12]
 800733e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007340:	4298      	cmp	r0, r3
 8007342:	bfb8      	it	lt
 8007344:	4618      	movlt	r0, r3
 8007346:	e730      	b.n	80071aa <_printf_float+0xc6>
 8007348:	2301      	movs	r3, #1
 800734a:	464a      	mov	r2, r9
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f af27 	beq.w	80071a6 <_printf_float+0xc2>
 8007358:	f108 0801 	add.w	r8, r8, #1
 800735c:	e7e6      	b.n	800732c <_printf_float+0x248>
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc39      	bgt.n	80073d8 <_printf_float+0x2f4>
 8007364:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <_printf_float+0x2f0>)
 8007366:	2301      	movs	r3, #1
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	47b8      	blx	r7
 800736e:	3001      	adds	r0, #1
 8007370:	f43f af19 	beq.w	80071a6 <_printf_float+0xc2>
 8007374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007378:	4313      	orrs	r3, r2
 800737a:	d102      	bne.n	8007382 <_printf_float+0x29e>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	07d9      	lsls	r1, r3, #31
 8007380:	d5d8      	bpl.n	8007334 <_printf_float+0x250>
 8007382:	ee18 3a10 	vmov	r3, s16
 8007386:	4652      	mov	r2, sl
 8007388:	4631      	mov	r1, r6
 800738a:	4628      	mov	r0, r5
 800738c:	47b8      	blx	r7
 800738e:	3001      	adds	r0, #1
 8007390:	f43f af09 	beq.w	80071a6 <_printf_float+0xc2>
 8007394:	f04f 0900 	mov.w	r9, #0
 8007398:	f104 0a1a 	add.w	sl, r4, #26
 800739c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739e:	425b      	negs	r3, r3
 80073a0:	454b      	cmp	r3, r9
 80073a2:	dc01      	bgt.n	80073a8 <_printf_float+0x2c4>
 80073a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a6:	e792      	b.n	80072ce <_printf_float+0x1ea>
 80073a8:	2301      	movs	r3, #1
 80073aa:	4652      	mov	r2, sl
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f aef7 	beq.w	80071a6 <_printf_float+0xc2>
 80073b8:	f109 0901 	add.w	r9, r9, #1
 80073bc:	e7ee      	b.n	800739c <_printf_float+0x2b8>
 80073be:	bf00      	nop
 80073c0:	7fefffff 	.word	0x7fefffff
 80073c4:	0800974c 	.word	0x0800974c
 80073c8:	08009750 	.word	0x08009750
 80073cc:	08009758 	.word	0x08009758
 80073d0:	08009754 	.word	0x08009754
 80073d4:	0800975c 	.word	0x0800975c
 80073d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073dc:	429a      	cmp	r2, r3
 80073de:	bfa8      	it	ge
 80073e0:	461a      	movge	r2, r3
 80073e2:	2a00      	cmp	r2, #0
 80073e4:	4691      	mov	r9, r2
 80073e6:	dc37      	bgt.n	8007458 <_printf_float+0x374>
 80073e8:	f04f 0b00 	mov.w	fp, #0
 80073ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073f0:	f104 021a 	add.w	r2, r4, #26
 80073f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	eba3 0309 	sub.w	r3, r3, r9
 80073fc:	455b      	cmp	r3, fp
 80073fe:	dc33      	bgt.n	8007468 <_printf_float+0x384>
 8007400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007404:	429a      	cmp	r2, r3
 8007406:	db3b      	blt.n	8007480 <_printf_float+0x39c>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	07da      	lsls	r2, r3, #31
 800740c:	d438      	bmi.n	8007480 <_printf_float+0x39c>
 800740e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007410:	9b05      	ldr	r3, [sp, #20]
 8007412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	eba2 0901 	sub.w	r9, r2, r1
 800741a:	4599      	cmp	r9, r3
 800741c:	bfa8      	it	ge
 800741e:	4699      	movge	r9, r3
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	dc35      	bgt.n	8007492 <_printf_float+0x3ae>
 8007426:	f04f 0800 	mov.w	r8, #0
 800742a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800742e:	f104 0a1a 	add.w	sl, r4, #26
 8007432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	eba3 0309 	sub.w	r3, r3, r9
 800743c:	4543      	cmp	r3, r8
 800743e:	f77f af79 	ble.w	8007334 <_printf_float+0x250>
 8007442:	2301      	movs	r3, #1
 8007444:	4652      	mov	r2, sl
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	f43f aeaa 	beq.w	80071a6 <_printf_float+0xc2>
 8007452:	f108 0801 	add.w	r8, r8, #1
 8007456:	e7ec      	b.n	8007432 <_printf_float+0x34e>
 8007458:	4613      	mov	r3, r2
 800745a:	4631      	mov	r1, r6
 800745c:	4642      	mov	r2, r8
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	d1c0      	bne.n	80073e8 <_printf_float+0x304>
 8007466:	e69e      	b.n	80071a6 <_printf_float+0xc2>
 8007468:	2301      	movs	r3, #1
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	9205      	str	r2, [sp, #20]
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f ae97 	beq.w	80071a6 <_printf_float+0xc2>
 8007478:	9a05      	ldr	r2, [sp, #20]
 800747a:	f10b 0b01 	add.w	fp, fp, #1
 800747e:	e7b9      	b.n	80073f4 <_printf_float+0x310>
 8007480:	ee18 3a10 	vmov	r3, s16
 8007484:	4652      	mov	r2, sl
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	d1be      	bne.n	800740e <_printf_float+0x32a>
 8007490:	e689      	b.n	80071a6 <_printf_float+0xc2>
 8007492:	9a05      	ldr	r2, [sp, #20]
 8007494:	464b      	mov	r3, r9
 8007496:	4442      	add	r2, r8
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	47b8      	blx	r7
 800749e:	3001      	adds	r0, #1
 80074a0:	d1c1      	bne.n	8007426 <_printf_float+0x342>
 80074a2:	e680      	b.n	80071a6 <_printf_float+0xc2>
 80074a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074a6:	2a01      	cmp	r2, #1
 80074a8:	dc01      	bgt.n	80074ae <_printf_float+0x3ca>
 80074aa:	07db      	lsls	r3, r3, #31
 80074ac:	d538      	bpl.n	8007520 <_printf_float+0x43c>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4642      	mov	r2, r8
 80074b2:	4631      	mov	r1, r6
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b8      	blx	r7
 80074b8:	3001      	adds	r0, #1
 80074ba:	f43f ae74 	beq.w	80071a6 <_printf_float+0xc2>
 80074be:	ee18 3a10 	vmov	r3, s16
 80074c2:	4652      	mov	r2, sl
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	f43f ae6b 	beq.w	80071a6 <_printf_float+0xc2>
 80074d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	f7f9 fb06 	bl	8000ae8 <__aeabi_dcmpeq>
 80074dc:	b9d8      	cbnz	r0, 8007516 <_printf_float+0x432>
 80074de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e0:	f108 0201 	add.w	r2, r8, #1
 80074e4:	3b01      	subs	r3, #1
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b8      	blx	r7
 80074ec:	3001      	adds	r0, #1
 80074ee:	d10e      	bne.n	800750e <_printf_float+0x42a>
 80074f0:	e659      	b.n	80071a6 <_printf_float+0xc2>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4652      	mov	r2, sl
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f ae52 	beq.w	80071a6 <_printf_float+0xc2>
 8007502:	f108 0801 	add.w	r8, r8, #1
 8007506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007508:	3b01      	subs	r3, #1
 800750a:	4543      	cmp	r3, r8
 800750c:	dcf1      	bgt.n	80074f2 <_printf_float+0x40e>
 800750e:	464b      	mov	r3, r9
 8007510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007514:	e6dc      	b.n	80072d0 <_printf_float+0x1ec>
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	f104 0a1a 	add.w	sl, r4, #26
 800751e:	e7f2      	b.n	8007506 <_printf_float+0x422>
 8007520:	2301      	movs	r3, #1
 8007522:	4642      	mov	r2, r8
 8007524:	e7df      	b.n	80074e6 <_printf_float+0x402>
 8007526:	2301      	movs	r3, #1
 8007528:	464a      	mov	r2, r9
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	f43f ae38 	beq.w	80071a6 <_printf_float+0xc2>
 8007536:	f108 0801 	add.w	r8, r8, #1
 800753a:	68e3      	ldr	r3, [r4, #12]
 800753c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800753e:	1a5b      	subs	r3, r3, r1
 8007540:	4543      	cmp	r3, r8
 8007542:	dcf0      	bgt.n	8007526 <_printf_float+0x442>
 8007544:	e6fa      	b.n	800733c <_printf_float+0x258>
 8007546:	f04f 0800 	mov.w	r8, #0
 800754a:	f104 0919 	add.w	r9, r4, #25
 800754e:	e7f4      	b.n	800753a <_printf_float+0x456>

08007550 <_printf_common>:
 8007550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	4616      	mov	r6, r2
 8007556:	4699      	mov	r9, r3
 8007558:	688a      	ldr	r2, [r1, #8]
 800755a:	690b      	ldr	r3, [r1, #16]
 800755c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007560:	4293      	cmp	r3, r2
 8007562:	bfb8      	it	lt
 8007564:	4613      	movlt	r3, r2
 8007566:	6033      	str	r3, [r6, #0]
 8007568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800756c:	4607      	mov	r7, r0
 800756e:	460c      	mov	r4, r1
 8007570:	b10a      	cbz	r2, 8007576 <_printf_common+0x26>
 8007572:	3301      	adds	r3, #1
 8007574:	6033      	str	r3, [r6, #0]
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	0699      	lsls	r1, r3, #26
 800757a:	bf42      	ittt	mi
 800757c:	6833      	ldrmi	r3, [r6, #0]
 800757e:	3302      	addmi	r3, #2
 8007580:	6033      	strmi	r3, [r6, #0]
 8007582:	6825      	ldr	r5, [r4, #0]
 8007584:	f015 0506 	ands.w	r5, r5, #6
 8007588:	d106      	bne.n	8007598 <_printf_common+0x48>
 800758a:	f104 0a19 	add.w	sl, r4, #25
 800758e:	68e3      	ldr	r3, [r4, #12]
 8007590:	6832      	ldr	r2, [r6, #0]
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	42ab      	cmp	r3, r5
 8007596:	dc26      	bgt.n	80075e6 <_printf_common+0x96>
 8007598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800759c:	1e13      	subs	r3, r2, #0
 800759e:	6822      	ldr	r2, [r4, #0]
 80075a0:	bf18      	it	ne
 80075a2:	2301      	movne	r3, #1
 80075a4:	0692      	lsls	r2, r2, #26
 80075a6:	d42b      	bmi.n	8007600 <_printf_common+0xb0>
 80075a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075ac:	4649      	mov	r1, r9
 80075ae:	4638      	mov	r0, r7
 80075b0:	47c0      	blx	r8
 80075b2:	3001      	adds	r0, #1
 80075b4:	d01e      	beq.n	80075f4 <_printf_common+0xa4>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	68e5      	ldr	r5, [r4, #12]
 80075ba:	6832      	ldr	r2, [r6, #0]
 80075bc:	f003 0306 	and.w	r3, r3, #6
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	bf08      	it	eq
 80075c4:	1aad      	subeq	r5, r5, r2
 80075c6:	68a3      	ldr	r3, [r4, #8]
 80075c8:	6922      	ldr	r2, [r4, #16]
 80075ca:	bf0c      	ite	eq
 80075cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075d0:	2500      	movne	r5, #0
 80075d2:	4293      	cmp	r3, r2
 80075d4:	bfc4      	itt	gt
 80075d6:	1a9b      	subgt	r3, r3, r2
 80075d8:	18ed      	addgt	r5, r5, r3
 80075da:	2600      	movs	r6, #0
 80075dc:	341a      	adds	r4, #26
 80075de:	42b5      	cmp	r5, r6
 80075e0:	d11a      	bne.n	8007618 <_printf_common+0xc8>
 80075e2:	2000      	movs	r0, #0
 80075e4:	e008      	b.n	80075f8 <_printf_common+0xa8>
 80075e6:	2301      	movs	r3, #1
 80075e8:	4652      	mov	r2, sl
 80075ea:	4649      	mov	r1, r9
 80075ec:	4638      	mov	r0, r7
 80075ee:	47c0      	blx	r8
 80075f0:	3001      	adds	r0, #1
 80075f2:	d103      	bne.n	80075fc <_printf_common+0xac>
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
 80075f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fc:	3501      	adds	r5, #1
 80075fe:	e7c6      	b.n	800758e <_printf_common+0x3e>
 8007600:	18e1      	adds	r1, r4, r3
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	2030      	movs	r0, #48	; 0x30
 8007606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800760a:	4422      	add	r2, r4
 800760c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007614:	3302      	adds	r3, #2
 8007616:	e7c7      	b.n	80075a8 <_printf_common+0x58>
 8007618:	2301      	movs	r3, #1
 800761a:	4622      	mov	r2, r4
 800761c:	4649      	mov	r1, r9
 800761e:	4638      	mov	r0, r7
 8007620:	47c0      	blx	r8
 8007622:	3001      	adds	r0, #1
 8007624:	d0e6      	beq.n	80075f4 <_printf_common+0xa4>
 8007626:	3601      	adds	r6, #1
 8007628:	e7d9      	b.n	80075de <_printf_common+0x8e>
	...

0800762c <_printf_i>:
 800762c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	460c      	mov	r4, r1
 8007632:	4691      	mov	r9, r2
 8007634:	7e27      	ldrb	r7, [r4, #24]
 8007636:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007638:	2f78      	cmp	r7, #120	; 0x78
 800763a:	4680      	mov	r8, r0
 800763c:	469a      	mov	sl, r3
 800763e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007642:	d807      	bhi.n	8007654 <_printf_i+0x28>
 8007644:	2f62      	cmp	r7, #98	; 0x62
 8007646:	d80a      	bhi.n	800765e <_printf_i+0x32>
 8007648:	2f00      	cmp	r7, #0
 800764a:	f000 80d8 	beq.w	80077fe <_printf_i+0x1d2>
 800764e:	2f58      	cmp	r7, #88	; 0x58
 8007650:	f000 80a3 	beq.w	800779a <_printf_i+0x16e>
 8007654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800765c:	e03a      	b.n	80076d4 <_printf_i+0xa8>
 800765e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007662:	2b15      	cmp	r3, #21
 8007664:	d8f6      	bhi.n	8007654 <_printf_i+0x28>
 8007666:	a001      	add	r0, pc, #4	; (adr r0, 800766c <_printf_i+0x40>)
 8007668:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800766c:	080076c5 	.word	0x080076c5
 8007670:	080076d9 	.word	0x080076d9
 8007674:	08007655 	.word	0x08007655
 8007678:	08007655 	.word	0x08007655
 800767c:	08007655 	.word	0x08007655
 8007680:	08007655 	.word	0x08007655
 8007684:	080076d9 	.word	0x080076d9
 8007688:	08007655 	.word	0x08007655
 800768c:	08007655 	.word	0x08007655
 8007690:	08007655 	.word	0x08007655
 8007694:	08007655 	.word	0x08007655
 8007698:	080077e5 	.word	0x080077e5
 800769c:	08007709 	.word	0x08007709
 80076a0:	080077c7 	.word	0x080077c7
 80076a4:	08007655 	.word	0x08007655
 80076a8:	08007655 	.word	0x08007655
 80076ac:	08007807 	.word	0x08007807
 80076b0:	08007655 	.word	0x08007655
 80076b4:	08007709 	.word	0x08007709
 80076b8:	08007655 	.word	0x08007655
 80076bc:	08007655 	.word	0x08007655
 80076c0:	080077cf 	.word	0x080077cf
 80076c4:	680b      	ldr	r3, [r1, #0]
 80076c6:	1d1a      	adds	r2, r3, #4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	600a      	str	r2, [r1, #0]
 80076cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0a3      	b.n	8007820 <_printf_i+0x1f4>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	6808      	ldr	r0, [r1, #0]
 80076dc:	062e      	lsls	r6, r5, #24
 80076de:	f100 0304 	add.w	r3, r0, #4
 80076e2:	d50a      	bpl.n	80076fa <_printf_i+0xce>
 80076e4:	6805      	ldr	r5, [r0, #0]
 80076e6:	600b      	str	r3, [r1, #0]
 80076e8:	2d00      	cmp	r5, #0
 80076ea:	da03      	bge.n	80076f4 <_printf_i+0xc8>
 80076ec:	232d      	movs	r3, #45	; 0x2d
 80076ee:	426d      	negs	r5, r5
 80076f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f4:	485e      	ldr	r0, [pc, #376]	; (8007870 <_printf_i+0x244>)
 80076f6:	230a      	movs	r3, #10
 80076f8:	e019      	b.n	800772e <_printf_i+0x102>
 80076fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076fe:	6805      	ldr	r5, [r0, #0]
 8007700:	600b      	str	r3, [r1, #0]
 8007702:	bf18      	it	ne
 8007704:	b22d      	sxthne	r5, r5
 8007706:	e7ef      	b.n	80076e8 <_printf_i+0xbc>
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	1d18      	adds	r0, r3, #4
 800770e:	6008      	str	r0, [r1, #0]
 8007710:	0628      	lsls	r0, r5, #24
 8007712:	d501      	bpl.n	8007718 <_printf_i+0xec>
 8007714:	681d      	ldr	r5, [r3, #0]
 8007716:	e002      	b.n	800771e <_printf_i+0xf2>
 8007718:	0669      	lsls	r1, r5, #25
 800771a:	d5fb      	bpl.n	8007714 <_printf_i+0xe8>
 800771c:	881d      	ldrh	r5, [r3, #0]
 800771e:	4854      	ldr	r0, [pc, #336]	; (8007870 <_printf_i+0x244>)
 8007720:	2f6f      	cmp	r7, #111	; 0x6f
 8007722:	bf0c      	ite	eq
 8007724:	2308      	moveq	r3, #8
 8007726:	230a      	movne	r3, #10
 8007728:	2100      	movs	r1, #0
 800772a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800772e:	6866      	ldr	r6, [r4, #4]
 8007730:	60a6      	str	r6, [r4, #8]
 8007732:	2e00      	cmp	r6, #0
 8007734:	bfa2      	ittt	ge
 8007736:	6821      	ldrge	r1, [r4, #0]
 8007738:	f021 0104 	bicge.w	r1, r1, #4
 800773c:	6021      	strge	r1, [r4, #0]
 800773e:	b90d      	cbnz	r5, 8007744 <_printf_i+0x118>
 8007740:	2e00      	cmp	r6, #0
 8007742:	d04d      	beq.n	80077e0 <_printf_i+0x1b4>
 8007744:	4616      	mov	r6, r2
 8007746:	fbb5 f1f3 	udiv	r1, r5, r3
 800774a:	fb03 5711 	mls	r7, r3, r1, r5
 800774e:	5dc7      	ldrb	r7, [r0, r7]
 8007750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007754:	462f      	mov	r7, r5
 8007756:	42bb      	cmp	r3, r7
 8007758:	460d      	mov	r5, r1
 800775a:	d9f4      	bls.n	8007746 <_printf_i+0x11a>
 800775c:	2b08      	cmp	r3, #8
 800775e:	d10b      	bne.n	8007778 <_printf_i+0x14c>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	07df      	lsls	r7, r3, #31
 8007764:	d508      	bpl.n	8007778 <_printf_i+0x14c>
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	6861      	ldr	r1, [r4, #4]
 800776a:	4299      	cmp	r1, r3
 800776c:	bfde      	ittt	le
 800776e:	2330      	movle	r3, #48	; 0x30
 8007770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007778:	1b92      	subs	r2, r2, r6
 800777a:	6122      	str	r2, [r4, #16]
 800777c:	f8cd a000 	str.w	sl, [sp]
 8007780:	464b      	mov	r3, r9
 8007782:	aa03      	add	r2, sp, #12
 8007784:	4621      	mov	r1, r4
 8007786:	4640      	mov	r0, r8
 8007788:	f7ff fee2 	bl	8007550 <_printf_common>
 800778c:	3001      	adds	r0, #1
 800778e:	d14c      	bne.n	800782a <_printf_i+0x1fe>
 8007790:	f04f 30ff 	mov.w	r0, #4294967295
 8007794:	b004      	add	sp, #16
 8007796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779a:	4835      	ldr	r0, [pc, #212]	; (8007870 <_printf_i+0x244>)
 800779c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	680e      	ldr	r6, [r1, #0]
 80077a4:	061f      	lsls	r7, r3, #24
 80077a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80077aa:	600e      	str	r6, [r1, #0]
 80077ac:	d514      	bpl.n	80077d8 <_printf_i+0x1ac>
 80077ae:	07d9      	lsls	r1, r3, #31
 80077b0:	bf44      	itt	mi
 80077b2:	f043 0320 	orrmi.w	r3, r3, #32
 80077b6:	6023      	strmi	r3, [r4, #0]
 80077b8:	b91d      	cbnz	r5, 80077c2 <_printf_i+0x196>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	f023 0320 	bic.w	r3, r3, #32
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	2310      	movs	r3, #16
 80077c4:	e7b0      	b.n	8007728 <_printf_i+0xfc>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	f043 0320 	orr.w	r3, r3, #32
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	2378      	movs	r3, #120	; 0x78
 80077d0:	4828      	ldr	r0, [pc, #160]	; (8007874 <_printf_i+0x248>)
 80077d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077d6:	e7e3      	b.n	80077a0 <_printf_i+0x174>
 80077d8:	065e      	lsls	r6, r3, #25
 80077da:	bf48      	it	mi
 80077dc:	b2ad      	uxthmi	r5, r5
 80077de:	e7e6      	b.n	80077ae <_printf_i+0x182>
 80077e0:	4616      	mov	r6, r2
 80077e2:	e7bb      	b.n	800775c <_printf_i+0x130>
 80077e4:	680b      	ldr	r3, [r1, #0]
 80077e6:	6826      	ldr	r6, [r4, #0]
 80077e8:	6960      	ldr	r0, [r4, #20]
 80077ea:	1d1d      	adds	r5, r3, #4
 80077ec:	600d      	str	r5, [r1, #0]
 80077ee:	0635      	lsls	r5, r6, #24
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	d501      	bpl.n	80077f8 <_printf_i+0x1cc>
 80077f4:	6018      	str	r0, [r3, #0]
 80077f6:	e002      	b.n	80077fe <_printf_i+0x1d2>
 80077f8:	0671      	lsls	r1, r6, #25
 80077fa:	d5fb      	bpl.n	80077f4 <_printf_i+0x1c8>
 80077fc:	8018      	strh	r0, [r3, #0]
 80077fe:	2300      	movs	r3, #0
 8007800:	6123      	str	r3, [r4, #16]
 8007802:	4616      	mov	r6, r2
 8007804:	e7ba      	b.n	800777c <_printf_i+0x150>
 8007806:	680b      	ldr	r3, [r1, #0]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	600a      	str	r2, [r1, #0]
 800780c:	681e      	ldr	r6, [r3, #0]
 800780e:	6862      	ldr	r2, [r4, #4]
 8007810:	2100      	movs	r1, #0
 8007812:	4630      	mov	r0, r6
 8007814:	f7f8 fcf4 	bl	8000200 <memchr>
 8007818:	b108      	cbz	r0, 800781e <_printf_i+0x1f2>
 800781a:	1b80      	subs	r0, r0, r6
 800781c:	6060      	str	r0, [r4, #4]
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	2300      	movs	r3, #0
 8007824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007828:	e7a8      	b.n	800777c <_printf_i+0x150>
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	4632      	mov	r2, r6
 800782e:	4649      	mov	r1, r9
 8007830:	4640      	mov	r0, r8
 8007832:	47d0      	blx	sl
 8007834:	3001      	adds	r0, #1
 8007836:	d0ab      	beq.n	8007790 <_printf_i+0x164>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	079b      	lsls	r3, r3, #30
 800783c:	d413      	bmi.n	8007866 <_printf_i+0x23a>
 800783e:	68e0      	ldr	r0, [r4, #12]
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	4298      	cmp	r0, r3
 8007844:	bfb8      	it	lt
 8007846:	4618      	movlt	r0, r3
 8007848:	e7a4      	b.n	8007794 <_printf_i+0x168>
 800784a:	2301      	movs	r3, #1
 800784c:	4632      	mov	r2, r6
 800784e:	4649      	mov	r1, r9
 8007850:	4640      	mov	r0, r8
 8007852:	47d0      	blx	sl
 8007854:	3001      	adds	r0, #1
 8007856:	d09b      	beq.n	8007790 <_printf_i+0x164>
 8007858:	3501      	adds	r5, #1
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	9903      	ldr	r1, [sp, #12]
 800785e:	1a5b      	subs	r3, r3, r1
 8007860:	42ab      	cmp	r3, r5
 8007862:	dcf2      	bgt.n	800784a <_printf_i+0x21e>
 8007864:	e7eb      	b.n	800783e <_printf_i+0x212>
 8007866:	2500      	movs	r5, #0
 8007868:	f104 0619 	add.w	r6, r4, #25
 800786c:	e7f5      	b.n	800785a <_printf_i+0x22e>
 800786e:	bf00      	nop
 8007870:	0800975e 	.word	0x0800975e
 8007874:	0800976f 	.word	0x0800976f

08007878 <_sbrk_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d06      	ldr	r5, [pc, #24]	; (8007894 <_sbrk_r+0x1c>)
 800787c:	2300      	movs	r3, #0
 800787e:	4604      	mov	r4, r0
 8007880:	4608      	mov	r0, r1
 8007882:	602b      	str	r3, [r5, #0]
 8007884:	f7fa fcaa 	bl	80021dc <_sbrk>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_sbrk_r+0x1a>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_sbrk_r+0x1a>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	20001488 	.word	0x20001488

08007898 <__sread>:
 8007898:	b510      	push	{r4, lr}
 800789a:	460c      	mov	r4, r1
 800789c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a0:	f001 fb4c 	bl	8008f3c <_read_r>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	bfab      	itete	ge
 80078a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078aa:	89a3      	ldrhlt	r3, [r4, #12]
 80078ac:	181b      	addge	r3, r3, r0
 80078ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078b2:	bfac      	ite	ge
 80078b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078b6:	81a3      	strhlt	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__swrite>:
 80078ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	461f      	mov	r7, r3
 80078c0:	898b      	ldrh	r3, [r1, #12]
 80078c2:	05db      	lsls	r3, r3, #23
 80078c4:	4605      	mov	r5, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	4616      	mov	r6, r2
 80078ca:	d505      	bpl.n	80078d8 <__swrite+0x1e>
 80078cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d0:	2302      	movs	r3, #2
 80078d2:	2200      	movs	r2, #0
 80078d4:	f000 ff86 	bl	80087e4 <_lseek_r>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	4632      	mov	r2, r6
 80078e6:	463b      	mov	r3, r7
 80078e8:	4628      	mov	r0, r5
 80078ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ee:	f000 b817 	b.w	8007920 <_write_r>

080078f2 <__sseek>:
 80078f2:	b510      	push	{r4, lr}
 80078f4:	460c      	mov	r4, r1
 80078f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fa:	f000 ff73 	bl	80087e4 <_lseek_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	bf15      	itete	ne
 8007904:	6560      	strne	r0, [r4, #84]	; 0x54
 8007906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800790a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800790e:	81a3      	strheq	r3, [r4, #12]
 8007910:	bf18      	it	ne
 8007912:	81a3      	strhne	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__sclose>:
 8007916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791a:	f000 b813 	b.w	8007944 <_close_r>
	...

08007920 <_write_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	; (8007940 <_write_r+0x20>)
 8007924:	4604      	mov	r4, r0
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	2200      	movs	r2, #0
 800792c:	602a      	str	r2, [r5, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f7fa fc03 	bl	800213a <_write>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_write_r+0x1e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_write_r+0x1e>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	20001488 	.word	0x20001488

08007944 <_close_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d06      	ldr	r5, [pc, #24]	; (8007960 <_close_r+0x1c>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	f7fa fc0f 	bl	8002172 <_close>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_close_r+0x1a>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_close_r+0x1a>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20001488 	.word	0x20001488

08007964 <quorem>:
 8007964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	6903      	ldr	r3, [r0, #16]
 800796a:	690c      	ldr	r4, [r1, #16]
 800796c:	42a3      	cmp	r3, r4
 800796e:	4607      	mov	r7, r0
 8007970:	f2c0 8081 	blt.w	8007a76 <quorem+0x112>
 8007974:	3c01      	subs	r4, #1
 8007976:	f101 0814 	add.w	r8, r1, #20
 800797a:	f100 0514 	add.w	r5, r0, #20
 800797e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800798c:	3301      	adds	r3, #1
 800798e:	429a      	cmp	r2, r3
 8007990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007998:	fbb2 f6f3 	udiv	r6, r2, r3
 800799c:	d331      	bcc.n	8007a02 <quorem+0x9e>
 800799e:	f04f 0e00 	mov.w	lr, #0
 80079a2:	4640      	mov	r0, r8
 80079a4:	46ac      	mov	ip, r5
 80079a6:	46f2      	mov	sl, lr
 80079a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80079ac:	b293      	uxth	r3, r2
 80079ae:	fb06 e303 	mla	r3, r6, r3, lr
 80079b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ebaa 0303 	sub.w	r3, sl, r3
 80079bc:	0c12      	lsrs	r2, r2, #16
 80079be:	f8dc a000 	ldr.w	sl, [ip]
 80079c2:	fb06 e202 	mla	r2, r6, r2, lr
 80079c6:	fa13 f38a 	uxtah	r3, r3, sl
 80079ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ce:	fa1f fa82 	uxth.w	sl, r2
 80079d2:	f8dc 2000 	ldr.w	r2, [ip]
 80079d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80079da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079de:	b29b      	uxth	r3, r3
 80079e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079e4:	4581      	cmp	r9, r0
 80079e6:	f84c 3b04 	str.w	r3, [ip], #4
 80079ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079ee:	d2db      	bcs.n	80079a8 <quorem+0x44>
 80079f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80079f4:	b92b      	cbnz	r3, 8007a02 <quorem+0x9e>
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	429d      	cmp	r5, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	d32e      	bcc.n	8007a5e <quorem+0xfa>
 8007a00:	613c      	str	r4, [r7, #16]
 8007a02:	4638      	mov	r0, r7
 8007a04:	f001 f98a 	bl	8008d1c <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	db24      	blt.n	8007a56 <quorem+0xf2>
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f04f 0c00 	mov.w	ip, #0
 8007a14:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a18:	f8d0 e000 	ldr.w	lr, [r0]
 8007a1c:	b293      	uxth	r3, r2
 8007a1e:	ebac 0303 	sub.w	r3, ip, r3
 8007a22:	0c12      	lsrs	r2, r2, #16
 8007a24:	fa13 f38e 	uxtah	r3, r3, lr
 8007a28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a36:	45c1      	cmp	r9, r8
 8007a38:	f840 3b04 	str.w	r3, [r0], #4
 8007a3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a40:	d2e8      	bcs.n	8007a14 <quorem+0xb0>
 8007a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4a:	b922      	cbnz	r2, 8007a56 <quorem+0xf2>
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	d30a      	bcc.n	8007a6a <quorem+0x106>
 8007a54:	613c      	str	r4, [r7, #16]
 8007a56:	4630      	mov	r0, r6
 8007a58:	b003      	add	sp, #12
 8007a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	3b04      	subs	r3, #4
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d1cc      	bne.n	8007a00 <quorem+0x9c>
 8007a66:	3c01      	subs	r4, #1
 8007a68:	e7c7      	b.n	80079fa <quorem+0x96>
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d1f0      	bne.n	8007a54 <quorem+0xf0>
 8007a72:	3c01      	subs	r4, #1
 8007a74:	e7eb      	b.n	8007a4e <quorem+0xea>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e7ee      	b.n	8007a58 <quorem+0xf4>
 8007a7a:	0000      	movs	r0, r0
 8007a7c:	0000      	movs	r0, r0
	...

08007a80 <_dtoa_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	ed2d 8b02 	vpush	{d8}
 8007a88:	ec57 6b10 	vmov	r6, r7, d0
 8007a8c:	b095      	sub	sp, #84	; 0x54
 8007a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a94:	9105      	str	r1, [sp, #20]
 8007a96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aa0:	b975      	cbnz	r5, 8007ac0 <_dtoa_r+0x40>
 8007aa2:	2010      	movs	r0, #16
 8007aa4:	f7ff f9ae 	bl	8006e04 <malloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6260      	str	r0, [r4, #36]	; 0x24
 8007aac:	b920      	cbnz	r0, 8007ab8 <_dtoa_r+0x38>
 8007aae:	4bb2      	ldr	r3, [pc, #712]	; (8007d78 <_dtoa_r+0x2f8>)
 8007ab0:	21ea      	movs	r1, #234	; 0xea
 8007ab2:	48b2      	ldr	r0, [pc, #712]	; (8007d7c <_dtoa_r+0x2fc>)
 8007ab4:	f001 fa54 	bl	8008f60 <__assert_func>
 8007ab8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007abc:	6005      	str	r5, [r0, #0]
 8007abe:	60c5      	str	r5, [r0, #12]
 8007ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac2:	6819      	ldr	r1, [r3, #0]
 8007ac4:	b151      	cbz	r1, 8007adc <_dtoa_r+0x5c>
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	604a      	str	r2, [r1, #4]
 8007aca:	2301      	movs	r3, #1
 8007acc:	4093      	lsls	r3, r2
 8007ace:	608b      	str	r3, [r1, #8]
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 fee5 	bl	80088a0 <_Bfree>
 8007ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	1e3b      	subs	r3, r7, #0
 8007ade:	bfb9      	ittee	lt
 8007ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ae4:	9303      	strlt	r3, [sp, #12]
 8007ae6:	2300      	movge	r3, #0
 8007ae8:	f8c8 3000 	strge.w	r3, [r8]
 8007aec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007af0:	4ba3      	ldr	r3, [pc, #652]	; (8007d80 <_dtoa_r+0x300>)
 8007af2:	bfbc      	itt	lt
 8007af4:	2201      	movlt	r2, #1
 8007af6:	f8c8 2000 	strlt.w	r2, [r8]
 8007afa:	ea33 0309 	bics.w	r3, r3, r9
 8007afe:	d11b      	bne.n	8007b38 <_dtoa_r+0xb8>
 8007b00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b02:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b0c:	4333      	orrs	r3, r6
 8007b0e:	f000 857a 	beq.w	8008606 <_dtoa_r+0xb86>
 8007b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b14:	b963      	cbnz	r3, 8007b30 <_dtoa_r+0xb0>
 8007b16:	4b9b      	ldr	r3, [pc, #620]	; (8007d84 <_dtoa_r+0x304>)
 8007b18:	e024      	b.n	8007b64 <_dtoa_r+0xe4>
 8007b1a:	4b9b      	ldr	r3, [pc, #620]	; (8007d88 <_dtoa_r+0x308>)
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	9800      	ldr	r0, [sp, #0]
 8007b26:	b015      	add	sp, #84	; 0x54
 8007b28:	ecbd 8b02 	vpop	{d8}
 8007b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b30:	4b94      	ldr	r3, [pc, #592]	; (8007d84 <_dtoa_r+0x304>)
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	3303      	adds	r3, #3
 8007b36:	e7f3      	b.n	8007b20 <_dtoa_r+0xa0>
 8007b38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	ec51 0b17 	vmov	r0, r1, d7
 8007b42:	2300      	movs	r3, #0
 8007b44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b48:	f7f8 ffce 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	b158      	cbz	r0, 8007b68 <_dtoa_r+0xe8>
 8007b50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b52:	2301      	movs	r3, #1
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8551 	beq.w	8008600 <_dtoa_r+0xb80>
 8007b5e:	488b      	ldr	r0, [pc, #556]	; (8007d8c <_dtoa_r+0x30c>)
 8007b60:	6018      	str	r0, [r3, #0]
 8007b62:	1e43      	subs	r3, r0, #1
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	e7dd      	b.n	8007b24 <_dtoa_r+0xa4>
 8007b68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007b6c:	aa12      	add	r2, sp, #72	; 0x48
 8007b6e:	a913      	add	r1, sp, #76	; 0x4c
 8007b70:	4620      	mov	r0, r4
 8007b72:	f001 f977 	bl	8008e64 <__d2b>
 8007b76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b7a:	4683      	mov	fp, r0
 8007b7c:	2d00      	cmp	r5, #0
 8007b7e:	d07c      	beq.n	8007c7a <_dtoa_r+0x1fa>
 8007b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007b8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b9a:	4b7d      	ldr	r3, [pc, #500]	; (8007d90 <_dtoa_r+0x310>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7f8 fb81 	bl	80002a8 <__aeabi_dsub>
 8007ba6:	a36e      	add	r3, pc, #440	; (adr r3, 8007d60 <_dtoa_r+0x2e0>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f7f8 fd34 	bl	8000618 <__aeabi_dmul>
 8007bb0:	a36d      	add	r3, pc, #436	; (adr r3, 8007d68 <_dtoa_r+0x2e8>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 fb79 	bl	80002ac <__adddf3>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	f7f8 fcc0 	bl	8000544 <__aeabi_i2d>
 8007bc4:	a36a      	add	r3, pc, #424	; (adr r3, 8007d70 <_dtoa_r+0x2f0>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f7f8 fd25 	bl	8000618 <__aeabi_dmul>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 fb69 	bl	80002ac <__adddf3>
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460f      	mov	r7, r1
 8007bde:	f7f8 ffcb 	bl	8000b78 <__aeabi_d2iz>
 8007be2:	2200      	movs	r2, #0
 8007be4:	4682      	mov	sl, r0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 ff86 	bl	8000afc <__aeabi_dcmplt>
 8007bf0:	b148      	cbz	r0, 8007c06 <_dtoa_r+0x186>
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f7f8 fca6 	bl	8000544 <__aeabi_i2d>
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	f7f8 ff74 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c00:	b908      	cbnz	r0, 8007c06 <_dtoa_r+0x186>
 8007c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c06:	f1ba 0f16 	cmp.w	sl, #22
 8007c0a:	d854      	bhi.n	8007cb6 <_dtoa_r+0x236>
 8007c0c:	4b61      	ldr	r3, [pc, #388]	; (8007d94 <_dtoa_r+0x314>)
 8007c0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c1a:	f7f8 ff6f 	bl	8000afc <__aeabi_dcmplt>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d04b      	beq.n	8007cba <_dtoa_r+0x23a>
 8007c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c26:	2300      	movs	r3, #0
 8007c28:	930e      	str	r3, [sp, #56]	; 0x38
 8007c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c2c:	1b5d      	subs	r5, r3, r5
 8007c2e:	1e6b      	subs	r3, r5, #1
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	bf43      	ittte	mi
 8007c34:	2300      	movmi	r3, #0
 8007c36:	f1c5 0801 	rsbmi	r8, r5, #1
 8007c3a:	9304      	strmi	r3, [sp, #16]
 8007c3c:	f04f 0800 	movpl.w	r8, #0
 8007c40:	f1ba 0f00 	cmp.w	sl, #0
 8007c44:	db3b      	blt.n	8007cbe <_dtoa_r+0x23e>
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007c4c:	4453      	add	r3, sl
 8007c4e:	9304      	str	r3, [sp, #16]
 8007c50:	2300      	movs	r3, #0
 8007c52:	9306      	str	r3, [sp, #24]
 8007c54:	9b05      	ldr	r3, [sp, #20]
 8007c56:	2b09      	cmp	r3, #9
 8007c58:	d869      	bhi.n	8007d2e <_dtoa_r+0x2ae>
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	bfc4      	itt	gt
 8007c5e:	3b04      	subgt	r3, #4
 8007c60:	9305      	strgt	r3, [sp, #20]
 8007c62:	9b05      	ldr	r3, [sp, #20]
 8007c64:	f1a3 0302 	sub.w	r3, r3, #2
 8007c68:	bfcc      	ite	gt
 8007c6a:	2500      	movgt	r5, #0
 8007c6c:	2501      	movle	r5, #1
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d869      	bhi.n	8007d46 <_dtoa_r+0x2c6>
 8007c72:	e8df f003 	tbb	[pc, r3]
 8007c76:	4e2c      	.short	0x4e2c
 8007c78:	5a4c      	.short	0x5a4c
 8007c7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007c7e:	441d      	add	r5, r3
 8007c80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	bfc1      	itttt	gt
 8007c88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c90:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c98:	bfda      	itte	le
 8007c9a:	f1c3 0320 	rsble	r3, r3, #32
 8007c9e:	fa06 f003 	lslle.w	r0, r6, r3
 8007ca2:	4318      	orrgt	r0, r3
 8007ca4:	f7f8 fc3e 	bl	8000524 <__aeabi_ui2d>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4606      	mov	r6, r0
 8007cac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cb0:	3d01      	subs	r5, #1
 8007cb2:	9310      	str	r3, [sp, #64]	; 0x40
 8007cb4:	e771      	b.n	8007b9a <_dtoa_r+0x11a>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e7b6      	b.n	8007c28 <_dtoa_r+0x1a8>
 8007cba:	900e      	str	r0, [sp, #56]	; 0x38
 8007cbc:	e7b5      	b.n	8007c2a <_dtoa_r+0x1aa>
 8007cbe:	f1ca 0300 	rsb	r3, sl, #0
 8007cc2:	9306      	str	r3, [sp, #24]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	eba8 080a 	sub.w	r8, r8, sl
 8007cca:	930d      	str	r3, [sp, #52]	; 0x34
 8007ccc:	e7c2      	b.n	8007c54 <_dtoa_r+0x1d4>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9308      	str	r3, [sp, #32]
 8007cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dc39      	bgt.n	8007d4c <_dtoa_r+0x2cc>
 8007cd8:	f04f 0901 	mov.w	r9, #1
 8007cdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ce6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ce8:	2200      	movs	r2, #0
 8007cea:	6042      	str	r2, [r0, #4]
 8007cec:	2204      	movs	r2, #4
 8007cee:	f102 0614 	add.w	r6, r2, #20
 8007cf2:	429e      	cmp	r6, r3
 8007cf4:	6841      	ldr	r1, [r0, #4]
 8007cf6:	d92f      	bls.n	8007d58 <_dtoa_r+0x2d8>
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fd91 	bl	8008820 <_Balloc>
 8007cfe:	9000      	str	r0, [sp, #0]
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d14b      	bne.n	8007d9c <_dtoa_r+0x31c>
 8007d04:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <_dtoa_r+0x318>)
 8007d06:	4602      	mov	r2, r0
 8007d08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d0c:	e6d1      	b.n	8007ab2 <_dtoa_r+0x32>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e7de      	b.n	8007cd0 <_dtoa_r+0x250>
 8007d12:	2300      	movs	r3, #0
 8007d14:	9308      	str	r3, [sp, #32]
 8007d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d18:	eb0a 0903 	add.w	r9, sl, r3
 8007d1c:	f109 0301 	add.w	r3, r9, #1
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	bfb8      	it	lt
 8007d26:	2301      	movlt	r3, #1
 8007d28:	e7dd      	b.n	8007ce6 <_dtoa_r+0x266>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e7f2      	b.n	8007d14 <_dtoa_r+0x294>
 8007d2e:	2501      	movs	r5, #1
 8007d30:	2300      	movs	r3, #0
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	9508      	str	r5, [sp, #32]
 8007d36:	f04f 39ff 	mov.w	r9, #4294967295
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d40:	2312      	movs	r3, #18
 8007d42:	9209      	str	r2, [sp, #36]	; 0x24
 8007d44:	e7cf      	b.n	8007ce6 <_dtoa_r+0x266>
 8007d46:	2301      	movs	r3, #1
 8007d48:	9308      	str	r3, [sp, #32]
 8007d4a:	e7f4      	b.n	8007d36 <_dtoa_r+0x2b6>
 8007d4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007d50:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d54:	464b      	mov	r3, r9
 8007d56:	e7c6      	b.n	8007ce6 <_dtoa_r+0x266>
 8007d58:	3101      	adds	r1, #1
 8007d5a:	6041      	str	r1, [r0, #4]
 8007d5c:	0052      	lsls	r2, r2, #1
 8007d5e:	e7c6      	b.n	8007cee <_dtoa_r+0x26e>
 8007d60:	636f4361 	.word	0x636f4361
 8007d64:	3fd287a7 	.word	0x3fd287a7
 8007d68:	8b60c8b3 	.word	0x8b60c8b3
 8007d6c:	3fc68a28 	.word	0x3fc68a28
 8007d70:	509f79fb 	.word	0x509f79fb
 8007d74:	3fd34413 	.word	0x3fd34413
 8007d78:	0800978d 	.word	0x0800978d
 8007d7c:	080097a4 	.word	0x080097a4
 8007d80:	7ff00000 	.word	0x7ff00000
 8007d84:	08009789 	.word	0x08009789
 8007d88:	08009780 	.word	0x08009780
 8007d8c:	0800975d 	.word	0x0800975d
 8007d90:	3ff80000 	.word	0x3ff80000
 8007d94:	080098a0 	.word	0x080098a0
 8007d98:	08009803 	.word	0x08009803
 8007d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d9e:	9a00      	ldr	r2, [sp, #0]
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	9b01      	ldr	r3, [sp, #4]
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	f200 80ad 	bhi.w	8007f04 <_dtoa_r+0x484>
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	f000 80aa 	beq.w	8007f04 <_dtoa_r+0x484>
 8007db0:	f1ba 0f00 	cmp.w	sl, #0
 8007db4:	dd36      	ble.n	8007e24 <_dtoa_r+0x3a4>
 8007db6:	4ac3      	ldr	r2, [pc, #780]	; (80080c4 <_dtoa_r+0x644>)
 8007db8:	f00a 030f 	and.w	r3, sl, #15
 8007dbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dc0:	ed93 7b00 	vldr	d7, [r3]
 8007dc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007dc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007dcc:	eeb0 8a47 	vmov.f32	s16, s14
 8007dd0:	eef0 8a67 	vmov.f32	s17, s15
 8007dd4:	d016      	beq.n	8007e04 <_dtoa_r+0x384>
 8007dd6:	4bbc      	ldr	r3, [pc, #752]	; (80080c8 <_dtoa_r+0x648>)
 8007dd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007de0:	f7f8 fd44 	bl	800086c <__aeabi_ddiv>
 8007de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de8:	f007 070f 	and.w	r7, r7, #15
 8007dec:	2503      	movs	r5, #3
 8007dee:	4eb6      	ldr	r6, [pc, #728]	; (80080c8 <_dtoa_r+0x648>)
 8007df0:	b957      	cbnz	r7, 8007e08 <_dtoa_r+0x388>
 8007df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df6:	ec53 2b18 	vmov	r2, r3, d8
 8007dfa:	f7f8 fd37 	bl	800086c <__aeabi_ddiv>
 8007dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e02:	e029      	b.n	8007e58 <_dtoa_r+0x3d8>
 8007e04:	2502      	movs	r5, #2
 8007e06:	e7f2      	b.n	8007dee <_dtoa_r+0x36e>
 8007e08:	07f9      	lsls	r1, r7, #31
 8007e0a:	d508      	bpl.n	8007e1e <_dtoa_r+0x39e>
 8007e0c:	ec51 0b18 	vmov	r0, r1, d8
 8007e10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e14:	f7f8 fc00 	bl	8000618 <__aeabi_dmul>
 8007e18:	ec41 0b18 	vmov	d8, r0, r1
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	107f      	asrs	r7, r7, #1
 8007e20:	3608      	adds	r6, #8
 8007e22:	e7e5      	b.n	8007df0 <_dtoa_r+0x370>
 8007e24:	f000 80a6 	beq.w	8007f74 <_dtoa_r+0x4f4>
 8007e28:	f1ca 0600 	rsb	r6, sl, #0
 8007e2c:	4ba5      	ldr	r3, [pc, #660]	; (80080c4 <_dtoa_r+0x644>)
 8007e2e:	4fa6      	ldr	r7, [pc, #664]	; (80080c8 <_dtoa_r+0x648>)
 8007e30:	f006 020f 	and.w	r2, r6, #15
 8007e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e40:	f7f8 fbea 	bl	8000618 <__aeabi_dmul>
 8007e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e48:	1136      	asrs	r6, r6, #4
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2502      	movs	r5, #2
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	f040 8085 	bne.w	8007f5e <_dtoa_r+0x4de>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1d2      	bne.n	8007dfe <_dtoa_r+0x37e>
 8007e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 808c 	beq.w	8007f78 <_dtoa_r+0x4f8>
 8007e60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e64:	4b99      	ldr	r3, [pc, #612]	; (80080cc <_dtoa_r+0x64c>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fe46 	bl	8000afc <__aeabi_dcmplt>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f000 8081 	beq.w	8007f78 <_dtoa_r+0x4f8>
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d07d      	beq.n	8007f78 <_dtoa_r+0x4f8>
 8007e7c:	f1b9 0f00 	cmp.w	r9, #0
 8007e80:	dd3c      	ble.n	8007efc <_dtoa_r+0x47c>
 8007e82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4b91      	ldr	r3, [pc, #580]	; (80080d0 <_dtoa_r+0x650>)
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fbc2 	bl	8000618 <__aeabi_dmul>
 8007e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e98:	3501      	adds	r5, #1
 8007e9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007e9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f7f8 fb4e 	bl	8000544 <__aeabi_i2d>
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	463b      	mov	r3, r7
 8007eac:	f7f8 fbb4 	bl	8000618 <__aeabi_dmul>
 8007eb0:	4b88      	ldr	r3, [pc, #544]	; (80080d4 <_dtoa_r+0x654>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f7f8 f9fa 	bl	80002ac <__adddf3>
 8007eb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec0:	9303      	str	r3, [sp, #12]
 8007ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d15c      	bne.n	8007f82 <_dtoa_r+0x502>
 8007ec8:	4b83      	ldr	r3, [pc, #524]	; (80080d8 <_dtoa_r+0x658>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4630      	mov	r0, r6
 8007ece:	4639      	mov	r1, r7
 8007ed0:	f7f8 f9ea 	bl	80002a8 <__aeabi_dsub>
 8007ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ed8:	4606      	mov	r6, r0
 8007eda:	460f      	mov	r7, r1
 8007edc:	f7f8 fe2c 	bl	8000b38 <__aeabi_dcmpgt>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f040 8296 	bne.w	8008412 <_dtoa_r+0x992>
 8007ee6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007eea:	4630      	mov	r0, r6
 8007eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fe03 	bl	8000afc <__aeabi_dcmplt>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f040 8288 	bne.w	800840c <_dtoa_r+0x98c>
 8007efc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f2c0 8158 	blt.w	80081bc <_dtoa_r+0x73c>
 8007f0c:	f1ba 0f0e 	cmp.w	sl, #14
 8007f10:	f300 8154 	bgt.w	80081bc <_dtoa_r+0x73c>
 8007f14:	4b6b      	ldr	r3, [pc, #428]	; (80080c4 <_dtoa_r+0x644>)
 8007f16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f280 80e3 	bge.w	80080ec <_dtoa_r+0x66c>
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f300 80df 	bgt.w	80080ec <_dtoa_r+0x66c>
 8007f2e:	f040 826d 	bne.w	800840c <_dtoa_r+0x98c>
 8007f32:	4b69      	ldr	r3, [pc, #420]	; (80080d8 <_dtoa_r+0x658>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	4640      	mov	r0, r8
 8007f38:	4649      	mov	r1, r9
 8007f3a:	f7f8 fb6d 	bl	8000618 <__aeabi_dmul>
 8007f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f42:	f7f8 fdef 	bl	8000b24 <__aeabi_dcmpge>
 8007f46:	9e01      	ldr	r6, [sp, #4]
 8007f48:	4637      	mov	r7, r6
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f040 8243 	bne.w	80083d6 <_dtoa_r+0x956>
 8007f50:	9d00      	ldr	r5, [sp, #0]
 8007f52:	2331      	movs	r3, #49	; 0x31
 8007f54:	f805 3b01 	strb.w	r3, [r5], #1
 8007f58:	f10a 0a01 	add.w	sl, sl, #1
 8007f5c:	e23f      	b.n	80083de <_dtoa_r+0x95e>
 8007f5e:	07f2      	lsls	r2, r6, #31
 8007f60:	d505      	bpl.n	8007f6e <_dtoa_r+0x4ee>
 8007f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f66:	f7f8 fb57 	bl	8000618 <__aeabi_dmul>
 8007f6a:	3501      	adds	r5, #1
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	1076      	asrs	r6, r6, #1
 8007f70:	3708      	adds	r7, #8
 8007f72:	e76c      	b.n	8007e4e <_dtoa_r+0x3ce>
 8007f74:	2502      	movs	r5, #2
 8007f76:	e76f      	b.n	8007e58 <_dtoa_r+0x3d8>
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f80:	e78d      	b.n	8007e9e <_dtoa_r+0x41e>
 8007f82:	9900      	ldr	r1, [sp, #0]
 8007f84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f88:	4b4e      	ldr	r3, [pc, #312]	; (80080c4 <_dtoa_r+0x644>)
 8007f8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f8e:	4401      	add	r1, r0
 8007f90:	9102      	str	r1, [sp, #8]
 8007f92:	9908      	ldr	r1, [sp, #32]
 8007f94:	eeb0 8a47 	vmov.f32	s16, s14
 8007f98:	eef0 8a67 	vmov.f32	s17, s15
 8007f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d045      	beq.n	8008034 <_dtoa_r+0x5b4>
 8007fa8:	494c      	ldr	r1, [pc, #304]	; (80080dc <_dtoa_r+0x65c>)
 8007faa:	2000      	movs	r0, #0
 8007fac:	f7f8 fc5e 	bl	800086c <__aeabi_ddiv>
 8007fb0:	ec53 2b18 	vmov	r2, r3, d8
 8007fb4:	f7f8 f978 	bl	80002a8 <__aeabi_dsub>
 8007fb8:	9d00      	ldr	r5, [sp, #0]
 8007fba:	ec41 0b18 	vmov	d8, r0, r1
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7f8 fdd9 	bl	8000b78 <__aeabi_d2iz>
 8007fc6:	900c      	str	r0, [sp, #48]	; 0x30
 8007fc8:	f7f8 fabc 	bl	8000544 <__aeabi_i2d>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 f968 	bl	80002a8 <__aeabi_dsub>
 8007fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fda:	3330      	adds	r3, #48	; 0x30
 8007fdc:	f805 3b01 	strb.w	r3, [r5], #1
 8007fe0:	ec53 2b18 	vmov	r2, r3, d8
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	460f      	mov	r7, r1
 8007fe8:	f7f8 fd88 	bl	8000afc <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d165      	bne.n	80080bc <_dtoa_r+0x63c>
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	4935      	ldr	r1, [pc, #212]	; (80080cc <_dtoa_r+0x64c>)
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f7f8 f956 	bl	80002a8 <__aeabi_dsub>
 8007ffc:	ec53 2b18 	vmov	r2, r3, d8
 8008000:	f7f8 fd7c 	bl	8000afc <__aeabi_dcmplt>
 8008004:	2800      	cmp	r0, #0
 8008006:	f040 80b9 	bne.w	800817c <_dtoa_r+0x6fc>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	429d      	cmp	r5, r3
 800800e:	f43f af75 	beq.w	8007efc <_dtoa_r+0x47c>
 8008012:	4b2f      	ldr	r3, [pc, #188]	; (80080d0 <_dtoa_r+0x650>)
 8008014:	ec51 0b18 	vmov	r0, r1, d8
 8008018:	2200      	movs	r2, #0
 800801a:	f7f8 fafd 	bl	8000618 <__aeabi_dmul>
 800801e:	4b2c      	ldr	r3, [pc, #176]	; (80080d0 <_dtoa_r+0x650>)
 8008020:	ec41 0b18 	vmov	d8, r0, r1
 8008024:	2200      	movs	r2, #0
 8008026:	4630      	mov	r0, r6
 8008028:	4639      	mov	r1, r7
 800802a:	f7f8 faf5 	bl	8000618 <__aeabi_dmul>
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	e7c4      	b.n	8007fbe <_dtoa_r+0x53e>
 8008034:	ec51 0b17 	vmov	r0, r1, d7
 8008038:	f7f8 faee 	bl	8000618 <__aeabi_dmul>
 800803c:	9b02      	ldr	r3, [sp, #8]
 800803e:	9d00      	ldr	r5, [sp, #0]
 8008040:	930c      	str	r3, [sp, #48]	; 0x30
 8008042:	ec41 0b18 	vmov	d8, r0, r1
 8008046:	4639      	mov	r1, r7
 8008048:	4630      	mov	r0, r6
 800804a:	f7f8 fd95 	bl	8000b78 <__aeabi_d2iz>
 800804e:	9011      	str	r0, [sp, #68]	; 0x44
 8008050:	f7f8 fa78 	bl	8000544 <__aeabi_i2d>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 f924 	bl	80002a8 <__aeabi_dsub>
 8008060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008062:	3330      	adds	r3, #48	; 0x30
 8008064:	f805 3b01 	strb.w	r3, [r5], #1
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	429d      	cmp	r5, r3
 800806c:	4606      	mov	r6, r0
 800806e:	460f      	mov	r7, r1
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	d134      	bne.n	80080e0 <_dtoa_r+0x660>
 8008076:	4b19      	ldr	r3, [pc, #100]	; (80080dc <_dtoa_r+0x65c>)
 8008078:	ec51 0b18 	vmov	r0, r1, d8
 800807c:	f7f8 f916 	bl	80002ac <__adddf3>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 fd56 	bl	8000b38 <__aeabi_dcmpgt>
 800808c:	2800      	cmp	r0, #0
 800808e:	d175      	bne.n	800817c <_dtoa_r+0x6fc>
 8008090:	ec53 2b18 	vmov	r2, r3, d8
 8008094:	4911      	ldr	r1, [pc, #68]	; (80080dc <_dtoa_r+0x65c>)
 8008096:	2000      	movs	r0, #0
 8008098:	f7f8 f906 	bl	80002a8 <__aeabi_dsub>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4630      	mov	r0, r6
 80080a2:	4639      	mov	r1, r7
 80080a4:	f7f8 fd2a 	bl	8000afc <__aeabi_dcmplt>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f43f af27 	beq.w	8007efc <_dtoa_r+0x47c>
 80080ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080b0:	1e6b      	subs	r3, r5, #1
 80080b2:	930c      	str	r3, [sp, #48]	; 0x30
 80080b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080b8:	2b30      	cmp	r3, #48	; 0x30
 80080ba:	d0f8      	beq.n	80080ae <_dtoa_r+0x62e>
 80080bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080c0:	e04a      	b.n	8008158 <_dtoa_r+0x6d8>
 80080c2:	bf00      	nop
 80080c4:	080098a0 	.word	0x080098a0
 80080c8:	08009878 	.word	0x08009878
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	40240000 	.word	0x40240000
 80080d4:	401c0000 	.word	0x401c0000
 80080d8:	40140000 	.word	0x40140000
 80080dc:	3fe00000 	.word	0x3fe00000
 80080e0:	4baf      	ldr	r3, [pc, #700]	; (80083a0 <_dtoa_r+0x920>)
 80080e2:	f7f8 fa99 	bl	8000618 <__aeabi_dmul>
 80080e6:	4606      	mov	r6, r0
 80080e8:	460f      	mov	r7, r1
 80080ea:	e7ac      	b.n	8008046 <_dtoa_r+0x5c6>
 80080ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080f0:	9d00      	ldr	r5, [sp, #0]
 80080f2:	4642      	mov	r2, r8
 80080f4:	464b      	mov	r3, r9
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 fbb7 	bl	800086c <__aeabi_ddiv>
 80080fe:	f7f8 fd3b 	bl	8000b78 <__aeabi_d2iz>
 8008102:	9002      	str	r0, [sp, #8]
 8008104:	f7f8 fa1e 	bl	8000544 <__aeabi_i2d>
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	f7f8 fa84 	bl	8000618 <__aeabi_dmul>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 f8c6 	bl	80002a8 <__aeabi_dsub>
 800811c:	9e02      	ldr	r6, [sp, #8]
 800811e:	9f01      	ldr	r7, [sp, #4]
 8008120:	3630      	adds	r6, #48	; 0x30
 8008122:	f805 6b01 	strb.w	r6, [r5], #1
 8008126:	9e00      	ldr	r6, [sp, #0]
 8008128:	1bae      	subs	r6, r5, r6
 800812a:	42b7      	cmp	r7, r6
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	d137      	bne.n	80081a2 <_dtoa_r+0x722>
 8008132:	f7f8 f8bb 	bl	80002ac <__adddf3>
 8008136:	4642      	mov	r2, r8
 8008138:	464b      	mov	r3, r9
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	f7f8 fcfb 	bl	8000b38 <__aeabi_dcmpgt>
 8008142:	b9c8      	cbnz	r0, 8008178 <_dtoa_r+0x6f8>
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fccc 	bl	8000ae8 <__aeabi_dcmpeq>
 8008150:	b110      	cbz	r0, 8008158 <_dtoa_r+0x6d8>
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	07d9      	lsls	r1, r3, #31
 8008156:	d40f      	bmi.n	8008178 <_dtoa_r+0x6f8>
 8008158:	4620      	mov	r0, r4
 800815a:	4659      	mov	r1, fp
 800815c:	f000 fba0 	bl	80088a0 <_Bfree>
 8008160:	2300      	movs	r3, #0
 8008162:	702b      	strb	r3, [r5, #0]
 8008164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008166:	f10a 0001 	add.w	r0, sl, #1
 800816a:	6018      	str	r0, [r3, #0]
 800816c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816e:	2b00      	cmp	r3, #0
 8008170:	f43f acd8 	beq.w	8007b24 <_dtoa_r+0xa4>
 8008174:	601d      	str	r5, [r3, #0]
 8008176:	e4d5      	b.n	8007b24 <_dtoa_r+0xa4>
 8008178:	f8cd a01c 	str.w	sl, [sp, #28]
 800817c:	462b      	mov	r3, r5
 800817e:	461d      	mov	r5, r3
 8008180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008184:	2a39      	cmp	r2, #57	; 0x39
 8008186:	d108      	bne.n	800819a <_dtoa_r+0x71a>
 8008188:	9a00      	ldr	r2, [sp, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d1f7      	bne.n	800817e <_dtoa_r+0x6fe>
 800818e:	9a07      	ldr	r2, [sp, #28]
 8008190:	9900      	ldr	r1, [sp, #0]
 8008192:	3201      	adds	r2, #1
 8008194:	9207      	str	r2, [sp, #28]
 8008196:	2230      	movs	r2, #48	; 0x30
 8008198:	700a      	strb	r2, [r1, #0]
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	3201      	adds	r2, #1
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	e78c      	b.n	80080bc <_dtoa_r+0x63c>
 80081a2:	4b7f      	ldr	r3, [pc, #508]	; (80083a0 <_dtoa_r+0x920>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	f7f8 fa37 	bl	8000618 <__aeabi_dmul>
 80081aa:	2200      	movs	r2, #0
 80081ac:	2300      	movs	r3, #0
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	f7f8 fc99 	bl	8000ae8 <__aeabi_dcmpeq>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d09b      	beq.n	80080f2 <_dtoa_r+0x672>
 80081ba:	e7cd      	b.n	8008158 <_dtoa_r+0x6d8>
 80081bc:	9a08      	ldr	r2, [sp, #32]
 80081be:	2a00      	cmp	r2, #0
 80081c0:	f000 80c4 	beq.w	800834c <_dtoa_r+0x8cc>
 80081c4:	9a05      	ldr	r2, [sp, #20]
 80081c6:	2a01      	cmp	r2, #1
 80081c8:	f300 80a8 	bgt.w	800831c <_dtoa_r+0x89c>
 80081cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	f000 80a0 	beq.w	8008314 <_dtoa_r+0x894>
 80081d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081d8:	9e06      	ldr	r6, [sp, #24]
 80081da:	4645      	mov	r5, r8
 80081dc:	9a04      	ldr	r2, [sp, #16]
 80081de:	2101      	movs	r1, #1
 80081e0:	441a      	add	r2, r3
 80081e2:	4620      	mov	r0, r4
 80081e4:	4498      	add	r8, r3
 80081e6:	9204      	str	r2, [sp, #16]
 80081e8:	f000 fc16 	bl	8008a18 <__i2b>
 80081ec:	4607      	mov	r7, r0
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	dd0b      	ble.n	800820a <_dtoa_r+0x78a>
 80081f2:	9b04      	ldr	r3, [sp, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dd08      	ble.n	800820a <_dtoa_r+0x78a>
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	bfa8      	it	ge
 80081fe:	462b      	movge	r3, r5
 8008200:	eba8 0803 	sub.w	r8, r8, r3
 8008204:	1aed      	subs	r5, r5, r3
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	b1fb      	cbz	r3, 800824e <_dtoa_r+0x7ce>
 800820e:	9b08      	ldr	r3, [sp, #32]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 809f 	beq.w	8008354 <_dtoa_r+0x8d4>
 8008216:	2e00      	cmp	r6, #0
 8008218:	dd11      	ble.n	800823e <_dtoa_r+0x7be>
 800821a:	4639      	mov	r1, r7
 800821c:	4632      	mov	r2, r6
 800821e:	4620      	mov	r0, r4
 8008220:	f000 fcb6 	bl	8008b90 <__pow5mult>
 8008224:	465a      	mov	r2, fp
 8008226:	4601      	mov	r1, r0
 8008228:	4607      	mov	r7, r0
 800822a:	4620      	mov	r0, r4
 800822c:	f000 fc0a 	bl	8008a44 <__multiply>
 8008230:	4659      	mov	r1, fp
 8008232:	9007      	str	r0, [sp, #28]
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fb33 	bl	80088a0 <_Bfree>
 800823a:	9b07      	ldr	r3, [sp, #28]
 800823c:	469b      	mov	fp, r3
 800823e:	9b06      	ldr	r3, [sp, #24]
 8008240:	1b9a      	subs	r2, r3, r6
 8008242:	d004      	beq.n	800824e <_dtoa_r+0x7ce>
 8008244:	4659      	mov	r1, fp
 8008246:	4620      	mov	r0, r4
 8008248:	f000 fca2 	bl	8008b90 <__pow5mult>
 800824c:	4683      	mov	fp, r0
 800824e:	2101      	movs	r1, #1
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fbe1 	bl	8008a18 <__i2b>
 8008256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008258:	2b00      	cmp	r3, #0
 800825a:	4606      	mov	r6, r0
 800825c:	dd7c      	ble.n	8008358 <_dtoa_r+0x8d8>
 800825e:	461a      	mov	r2, r3
 8008260:	4601      	mov	r1, r0
 8008262:	4620      	mov	r0, r4
 8008264:	f000 fc94 	bl	8008b90 <__pow5mult>
 8008268:	9b05      	ldr	r3, [sp, #20]
 800826a:	2b01      	cmp	r3, #1
 800826c:	4606      	mov	r6, r0
 800826e:	dd76      	ble.n	800835e <_dtoa_r+0x8de>
 8008270:	2300      	movs	r3, #0
 8008272:	9306      	str	r3, [sp, #24]
 8008274:	6933      	ldr	r3, [r6, #16]
 8008276:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800827a:	6918      	ldr	r0, [r3, #16]
 800827c:	f000 fb7c 	bl	8008978 <__hi0bits>
 8008280:	f1c0 0020 	rsb	r0, r0, #32
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	4418      	add	r0, r3
 8008288:	f010 001f 	ands.w	r0, r0, #31
 800828c:	f000 8086 	beq.w	800839c <_dtoa_r+0x91c>
 8008290:	f1c0 0320 	rsb	r3, r0, #32
 8008294:	2b04      	cmp	r3, #4
 8008296:	dd7f      	ble.n	8008398 <_dtoa_r+0x918>
 8008298:	f1c0 001c 	rsb	r0, r0, #28
 800829c:	9b04      	ldr	r3, [sp, #16]
 800829e:	4403      	add	r3, r0
 80082a0:	4480      	add	r8, r0
 80082a2:	4405      	add	r5, r0
 80082a4:	9304      	str	r3, [sp, #16]
 80082a6:	f1b8 0f00 	cmp.w	r8, #0
 80082aa:	dd05      	ble.n	80082b8 <_dtoa_r+0x838>
 80082ac:	4659      	mov	r1, fp
 80082ae:	4642      	mov	r2, r8
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 fcc7 	bl	8008c44 <__lshift>
 80082b6:	4683      	mov	fp, r0
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd05      	ble.n	80082ca <_dtoa_r+0x84a>
 80082be:	4631      	mov	r1, r6
 80082c0:	461a      	mov	r2, r3
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fcbe 	bl	8008c44 <__lshift>
 80082c8:	4606      	mov	r6, r0
 80082ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d069      	beq.n	80083a4 <_dtoa_r+0x924>
 80082d0:	4631      	mov	r1, r6
 80082d2:	4658      	mov	r0, fp
 80082d4:	f000 fd22 	bl	8008d1c <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	da63      	bge.n	80083a4 <_dtoa_r+0x924>
 80082dc:	2300      	movs	r3, #0
 80082de:	4659      	mov	r1, fp
 80082e0:	220a      	movs	r2, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fafe 	bl	80088e4 <__multadd>
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ee:	4683      	mov	fp, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 818f 	beq.w	8008614 <_dtoa_r+0xb94>
 80082f6:	4639      	mov	r1, r7
 80082f8:	2300      	movs	r3, #0
 80082fa:	220a      	movs	r2, #10
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 faf1 	bl	80088e4 <__multadd>
 8008302:	f1b9 0f00 	cmp.w	r9, #0
 8008306:	4607      	mov	r7, r0
 8008308:	f300 808e 	bgt.w	8008428 <_dtoa_r+0x9a8>
 800830c:	9b05      	ldr	r3, [sp, #20]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dc50      	bgt.n	80083b4 <_dtoa_r+0x934>
 8008312:	e089      	b.n	8008428 <_dtoa_r+0x9a8>
 8008314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800831a:	e75d      	b.n	80081d8 <_dtoa_r+0x758>
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	1e5e      	subs	r6, r3, #1
 8008320:	9b06      	ldr	r3, [sp, #24]
 8008322:	42b3      	cmp	r3, r6
 8008324:	bfbf      	itttt	lt
 8008326:	9b06      	ldrlt	r3, [sp, #24]
 8008328:	9606      	strlt	r6, [sp, #24]
 800832a:	1af2      	sublt	r2, r6, r3
 800832c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800832e:	bfb6      	itet	lt
 8008330:	189b      	addlt	r3, r3, r2
 8008332:	1b9e      	subge	r6, r3, r6
 8008334:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	bfb8      	it	lt
 800833a:	2600      	movlt	r6, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfb5      	itete	lt
 8008340:	eba8 0503 	sublt.w	r5, r8, r3
 8008344:	9b01      	ldrge	r3, [sp, #4]
 8008346:	2300      	movlt	r3, #0
 8008348:	4645      	movge	r5, r8
 800834a:	e747      	b.n	80081dc <_dtoa_r+0x75c>
 800834c:	9e06      	ldr	r6, [sp, #24]
 800834e:	9f08      	ldr	r7, [sp, #32]
 8008350:	4645      	mov	r5, r8
 8008352:	e74c      	b.n	80081ee <_dtoa_r+0x76e>
 8008354:	9a06      	ldr	r2, [sp, #24]
 8008356:	e775      	b.n	8008244 <_dtoa_r+0x7c4>
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	2b01      	cmp	r3, #1
 800835c:	dc18      	bgt.n	8008390 <_dtoa_r+0x910>
 800835e:	9b02      	ldr	r3, [sp, #8]
 8008360:	b9b3      	cbnz	r3, 8008390 <_dtoa_r+0x910>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008368:	b9a3      	cbnz	r3, 8008394 <_dtoa_r+0x914>
 800836a:	9b03      	ldr	r3, [sp, #12]
 800836c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008370:	0d1b      	lsrs	r3, r3, #20
 8008372:	051b      	lsls	r3, r3, #20
 8008374:	b12b      	cbz	r3, 8008382 <_dtoa_r+0x902>
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	3301      	adds	r3, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	f108 0801 	add.w	r8, r8, #1
 8008380:	2301      	movs	r3, #1
 8008382:	9306      	str	r3, [sp, #24]
 8008384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008386:	2b00      	cmp	r3, #0
 8008388:	f47f af74 	bne.w	8008274 <_dtoa_r+0x7f4>
 800838c:	2001      	movs	r0, #1
 800838e:	e779      	b.n	8008284 <_dtoa_r+0x804>
 8008390:	2300      	movs	r3, #0
 8008392:	e7f6      	b.n	8008382 <_dtoa_r+0x902>
 8008394:	9b02      	ldr	r3, [sp, #8]
 8008396:	e7f4      	b.n	8008382 <_dtoa_r+0x902>
 8008398:	d085      	beq.n	80082a6 <_dtoa_r+0x826>
 800839a:	4618      	mov	r0, r3
 800839c:	301c      	adds	r0, #28
 800839e:	e77d      	b.n	800829c <_dtoa_r+0x81c>
 80083a0:	40240000 	.word	0x40240000
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dc38      	bgt.n	800841c <_dtoa_r+0x99c>
 80083aa:	9b05      	ldr	r3, [sp, #20]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	dd35      	ble.n	800841c <_dtoa_r+0x99c>
 80083b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80083b4:	f1b9 0f00 	cmp.w	r9, #0
 80083b8:	d10d      	bne.n	80083d6 <_dtoa_r+0x956>
 80083ba:	4631      	mov	r1, r6
 80083bc:	464b      	mov	r3, r9
 80083be:	2205      	movs	r2, #5
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fa8f 	bl	80088e4 <__multadd>
 80083c6:	4601      	mov	r1, r0
 80083c8:	4606      	mov	r6, r0
 80083ca:	4658      	mov	r0, fp
 80083cc:	f000 fca6 	bl	8008d1c <__mcmp>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f73f adbd 	bgt.w	8007f50 <_dtoa_r+0x4d0>
 80083d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d8:	9d00      	ldr	r5, [sp, #0]
 80083da:	ea6f 0a03 	mvn.w	sl, r3
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	4631      	mov	r1, r6
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fa5b 	bl	80088a0 <_Bfree>
 80083ea:	2f00      	cmp	r7, #0
 80083ec:	f43f aeb4 	beq.w	8008158 <_dtoa_r+0x6d8>
 80083f0:	f1b8 0f00 	cmp.w	r8, #0
 80083f4:	d005      	beq.n	8008402 <_dtoa_r+0x982>
 80083f6:	45b8      	cmp	r8, r7
 80083f8:	d003      	beq.n	8008402 <_dtoa_r+0x982>
 80083fa:	4641      	mov	r1, r8
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fa4f 	bl	80088a0 <_Bfree>
 8008402:	4639      	mov	r1, r7
 8008404:	4620      	mov	r0, r4
 8008406:	f000 fa4b 	bl	80088a0 <_Bfree>
 800840a:	e6a5      	b.n	8008158 <_dtoa_r+0x6d8>
 800840c:	2600      	movs	r6, #0
 800840e:	4637      	mov	r7, r6
 8008410:	e7e1      	b.n	80083d6 <_dtoa_r+0x956>
 8008412:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008414:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008418:	4637      	mov	r7, r6
 800841a:	e599      	b.n	8007f50 <_dtoa_r+0x4d0>
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80fd 	beq.w	8008622 <_dtoa_r+0xba2>
 8008428:	2d00      	cmp	r5, #0
 800842a:	dd05      	ble.n	8008438 <_dtoa_r+0x9b8>
 800842c:	4639      	mov	r1, r7
 800842e:	462a      	mov	r2, r5
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fc07 	bl	8008c44 <__lshift>
 8008436:	4607      	mov	r7, r0
 8008438:	9b06      	ldr	r3, [sp, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d05c      	beq.n	80084f8 <_dtoa_r+0xa78>
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4620      	mov	r0, r4
 8008442:	f000 f9ed 	bl	8008820 <_Balloc>
 8008446:	4605      	mov	r5, r0
 8008448:	b928      	cbnz	r0, 8008456 <_dtoa_r+0x9d6>
 800844a:	4b80      	ldr	r3, [pc, #512]	; (800864c <_dtoa_r+0xbcc>)
 800844c:	4602      	mov	r2, r0
 800844e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008452:	f7ff bb2e 	b.w	8007ab2 <_dtoa_r+0x32>
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	3202      	adds	r2, #2
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	f107 010c 	add.w	r1, r7, #12
 8008460:	300c      	adds	r0, #12
 8008462:	f7fe fcdf 	bl	8006e24 <memcpy>
 8008466:	2201      	movs	r2, #1
 8008468:	4629      	mov	r1, r5
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fbea 	bl	8008c44 <__lshift>
 8008470:	9b00      	ldr	r3, [sp, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	9b00      	ldr	r3, [sp, #0]
 8008478:	444b      	add	r3, r9
 800847a:	9307      	str	r3, [sp, #28]
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	46b8      	mov	r8, r7
 8008484:	9306      	str	r3, [sp, #24]
 8008486:	4607      	mov	r7, r0
 8008488:	9b01      	ldr	r3, [sp, #4]
 800848a:	4631      	mov	r1, r6
 800848c:	3b01      	subs	r3, #1
 800848e:	4658      	mov	r0, fp
 8008490:	9302      	str	r3, [sp, #8]
 8008492:	f7ff fa67 	bl	8007964 <quorem>
 8008496:	4603      	mov	r3, r0
 8008498:	3330      	adds	r3, #48	; 0x30
 800849a:	9004      	str	r0, [sp, #16]
 800849c:	4641      	mov	r1, r8
 800849e:	4658      	mov	r0, fp
 80084a0:	9308      	str	r3, [sp, #32]
 80084a2:	f000 fc3b 	bl	8008d1c <__mcmp>
 80084a6:	463a      	mov	r2, r7
 80084a8:	4681      	mov	r9, r0
 80084aa:	4631      	mov	r1, r6
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 fc51 	bl	8008d54 <__mdiff>
 80084b2:	68c2      	ldr	r2, [r0, #12]
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	4605      	mov	r5, r0
 80084b8:	bb02      	cbnz	r2, 80084fc <_dtoa_r+0xa7c>
 80084ba:	4601      	mov	r1, r0
 80084bc:	4658      	mov	r0, fp
 80084be:	f000 fc2d 	bl	8008d1c <__mcmp>
 80084c2:	9b08      	ldr	r3, [sp, #32]
 80084c4:	4602      	mov	r2, r0
 80084c6:	4629      	mov	r1, r5
 80084c8:	4620      	mov	r0, r4
 80084ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80084ce:	f000 f9e7 	bl	80088a0 <_Bfree>
 80084d2:	9b05      	ldr	r3, [sp, #20]
 80084d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d6:	9d01      	ldr	r5, [sp, #4]
 80084d8:	ea43 0102 	orr.w	r1, r3, r2
 80084dc:	9b06      	ldr	r3, [sp, #24]
 80084de:	430b      	orrs	r3, r1
 80084e0:	9b08      	ldr	r3, [sp, #32]
 80084e2:	d10d      	bne.n	8008500 <_dtoa_r+0xa80>
 80084e4:	2b39      	cmp	r3, #57	; 0x39
 80084e6:	d029      	beq.n	800853c <_dtoa_r+0xabc>
 80084e8:	f1b9 0f00 	cmp.w	r9, #0
 80084ec:	dd01      	ble.n	80084f2 <_dtoa_r+0xa72>
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	3331      	adds	r3, #49	; 0x31
 80084f2:	9a02      	ldr	r2, [sp, #8]
 80084f4:	7013      	strb	r3, [r2, #0]
 80084f6:	e774      	b.n	80083e2 <_dtoa_r+0x962>
 80084f8:	4638      	mov	r0, r7
 80084fa:	e7b9      	b.n	8008470 <_dtoa_r+0x9f0>
 80084fc:	2201      	movs	r2, #1
 80084fe:	e7e2      	b.n	80084c6 <_dtoa_r+0xa46>
 8008500:	f1b9 0f00 	cmp.w	r9, #0
 8008504:	db06      	blt.n	8008514 <_dtoa_r+0xa94>
 8008506:	9905      	ldr	r1, [sp, #20]
 8008508:	ea41 0909 	orr.w	r9, r1, r9
 800850c:	9906      	ldr	r1, [sp, #24]
 800850e:	ea59 0101 	orrs.w	r1, r9, r1
 8008512:	d120      	bne.n	8008556 <_dtoa_r+0xad6>
 8008514:	2a00      	cmp	r2, #0
 8008516:	ddec      	ble.n	80084f2 <_dtoa_r+0xa72>
 8008518:	4659      	mov	r1, fp
 800851a:	2201      	movs	r2, #1
 800851c:	4620      	mov	r0, r4
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	f000 fb90 	bl	8008c44 <__lshift>
 8008524:	4631      	mov	r1, r6
 8008526:	4683      	mov	fp, r0
 8008528:	f000 fbf8 	bl	8008d1c <__mcmp>
 800852c:	2800      	cmp	r0, #0
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	dc02      	bgt.n	8008538 <_dtoa_r+0xab8>
 8008532:	d1de      	bne.n	80084f2 <_dtoa_r+0xa72>
 8008534:	07da      	lsls	r2, r3, #31
 8008536:	d5dc      	bpl.n	80084f2 <_dtoa_r+0xa72>
 8008538:	2b39      	cmp	r3, #57	; 0x39
 800853a:	d1d8      	bne.n	80084ee <_dtoa_r+0xa6e>
 800853c:	9a02      	ldr	r2, [sp, #8]
 800853e:	2339      	movs	r3, #57	; 0x39
 8008540:	7013      	strb	r3, [r2, #0]
 8008542:	462b      	mov	r3, r5
 8008544:	461d      	mov	r5, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800854c:	2a39      	cmp	r2, #57	; 0x39
 800854e:	d050      	beq.n	80085f2 <_dtoa_r+0xb72>
 8008550:	3201      	adds	r2, #1
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e745      	b.n	80083e2 <_dtoa_r+0x962>
 8008556:	2a00      	cmp	r2, #0
 8008558:	dd03      	ble.n	8008562 <_dtoa_r+0xae2>
 800855a:	2b39      	cmp	r3, #57	; 0x39
 800855c:	d0ee      	beq.n	800853c <_dtoa_r+0xabc>
 800855e:	3301      	adds	r3, #1
 8008560:	e7c7      	b.n	80084f2 <_dtoa_r+0xa72>
 8008562:	9a01      	ldr	r2, [sp, #4]
 8008564:	9907      	ldr	r1, [sp, #28]
 8008566:	f802 3c01 	strb.w	r3, [r2, #-1]
 800856a:	428a      	cmp	r2, r1
 800856c:	d02a      	beq.n	80085c4 <_dtoa_r+0xb44>
 800856e:	4659      	mov	r1, fp
 8008570:	2300      	movs	r3, #0
 8008572:	220a      	movs	r2, #10
 8008574:	4620      	mov	r0, r4
 8008576:	f000 f9b5 	bl	80088e4 <__multadd>
 800857a:	45b8      	cmp	r8, r7
 800857c:	4683      	mov	fp, r0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	f04f 020a 	mov.w	r2, #10
 8008586:	4641      	mov	r1, r8
 8008588:	4620      	mov	r0, r4
 800858a:	d107      	bne.n	800859c <_dtoa_r+0xb1c>
 800858c:	f000 f9aa 	bl	80088e4 <__multadd>
 8008590:	4680      	mov	r8, r0
 8008592:	4607      	mov	r7, r0
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	3301      	adds	r3, #1
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	e775      	b.n	8008488 <_dtoa_r+0xa08>
 800859c:	f000 f9a2 	bl	80088e4 <__multadd>
 80085a0:	4639      	mov	r1, r7
 80085a2:	4680      	mov	r8, r0
 80085a4:	2300      	movs	r3, #0
 80085a6:	220a      	movs	r2, #10
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 f99b 	bl	80088e4 <__multadd>
 80085ae:	4607      	mov	r7, r0
 80085b0:	e7f0      	b.n	8008594 <_dtoa_r+0xb14>
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	9a00      	ldr	r2, [sp, #0]
 80085b8:	bfcc      	ite	gt
 80085ba:	464d      	movgt	r5, r9
 80085bc:	2501      	movle	r5, #1
 80085be:	4415      	add	r5, r2
 80085c0:	f04f 0800 	mov.w	r8, #0
 80085c4:	4659      	mov	r1, fp
 80085c6:	2201      	movs	r2, #1
 80085c8:	4620      	mov	r0, r4
 80085ca:	9301      	str	r3, [sp, #4]
 80085cc:	f000 fb3a 	bl	8008c44 <__lshift>
 80085d0:	4631      	mov	r1, r6
 80085d2:	4683      	mov	fp, r0
 80085d4:	f000 fba2 	bl	8008d1c <__mcmp>
 80085d8:	2800      	cmp	r0, #0
 80085da:	dcb2      	bgt.n	8008542 <_dtoa_r+0xac2>
 80085dc:	d102      	bne.n	80085e4 <_dtoa_r+0xb64>
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	07db      	lsls	r3, r3, #31
 80085e2:	d4ae      	bmi.n	8008542 <_dtoa_r+0xac2>
 80085e4:	462b      	mov	r3, r5
 80085e6:	461d      	mov	r5, r3
 80085e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ec:	2a30      	cmp	r2, #48	; 0x30
 80085ee:	d0fa      	beq.n	80085e6 <_dtoa_r+0xb66>
 80085f0:	e6f7      	b.n	80083e2 <_dtoa_r+0x962>
 80085f2:	9a00      	ldr	r2, [sp, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d1a5      	bne.n	8008544 <_dtoa_r+0xac4>
 80085f8:	f10a 0a01 	add.w	sl, sl, #1
 80085fc:	2331      	movs	r3, #49	; 0x31
 80085fe:	e779      	b.n	80084f4 <_dtoa_r+0xa74>
 8008600:	4b13      	ldr	r3, [pc, #76]	; (8008650 <_dtoa_r+0xbd0>)
 8008602:	f7ff baaf 	b.w	8007b64 <_dtoa_r+0xe4>
 8008606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008608:	2b00      	cmp	r3, #0
 800860a:	f47f aa86 	bne.w	8007b1a <_dtoa_r+0x9a>
 800860e:	4b11      	ldr	r3, [pc, #68]	; (8008654 <_dtoa_r+0xbd4>)
 8008610:	f7ff baa8 	b.w	8007b64 <_dtoa_r+0xe4>
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	dc03      	bgt.n	8008622 <_dtoa_r+0xba2>
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	2b02      	cmp	r3, #2
 800861e:	f73f aec9 	bgt.w	80083b4 <_dtoa_r+0x934>
 8008622:	9d00      	ldr	r5, [sp, #0]
 8008624:	4631      	mov	r1, r6
 8008626:	4658      	mov	r0, fp
 8008628:	f7ff f99c 	bl	8007964 <quorem>
 800862c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008630:	f805 3b01 	strb.w	r3, [r5], #1
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	1aaa      	subs	r2, r5, r2
 8008638:	4591      	cmp	r9, r2
 800863a:	ddba      	ble.n	80085b2 <_dtoa_r+0xb32>
 800863c:	4659      	mov	r1, fp
 800863e:	2300      	movs	r3, #0
 8008640:	220a      	movs	r2, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f000 f94e 	bl	80088e4 <__multadd>
 8008648:	4683      	mov	fp, r0
 800864a:	e7eb      	b.n	8008624 <_dtoa_r+0xba4>
 800864c:	08009803 	.word	0x08009803
 8008650:	0800975c 	.word	0x0800975c
 8008654:	08009780 	.word	0x08009780

08008658 <__sflush_r>:
 8008658:	898a      	ldrh	r2, [r1, #12]
 800865a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865e:	4605      	mov	r5, r0
 8008660:	0710      	lsls	r0, r2, #28
 8008662:	460c      	mov	r4, r1
 8008664:	d458      	bmi.n	8008718 <__sflush_r+0xc0>
 8008666:	684b      	ldr	r3, [r1, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dc05      	bgt.n	8008678 <__sflush_r+0x20>
 800866c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	dc02      	bgt.n	8008678 <__sflush_r+0x20>
 8008672:	2000      	movs	r0, #0
 8008674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800867a:	2e00      	cmp	r6, #0
 800867c:	d0f9      	beq.n	8008672 <__sflush_r+0x1a>
 800867e:	2300      	movs	r3, #0
 8008680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008684:	682f      	ldr	r7, [r5, #0]
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	d032      	beq.n	80086f0 <__sflush_r+0x98>
 800868a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	075a      	lsls	r2, r3, #29
 8008690:	d505      	bpl.n	800869e <__sflush_r+0x46>
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	1ac0      	subs	r0, r0, r3
 8008696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008698:	b10b      	cbz	r3, 800869e <__sflush_r+0x46>
 800869a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800869c:	1ac0      	subs	r0, r0, r3
 800869e:	2300      	movs	r3, #0
 80086a0:	4602      	mov	r2, r0
 80086a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086a4:	6a21      	ldr	r1, [r4, #32]
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b0      	blx	r6
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	d106      	bne.n	80086be <__sflush_r+0x66>
 80086b0:	6829      	ldr	r1, [r5, #0]
 80086b2:	291d      	cmp	r1, #29
 80086b4:	d82c      	bhi.n	8008710 <__sflush_r+0xb8>
 80086b6:	4a2a      	ldr	r2, [pc, #168]	; (8008760 <__sflush_r+0x108>)
 80086b8:	40ca      	lsrs	r2, r1
 80086ba:	07d6      	lsls	r6, r2, #31
 80086bc:	d528      	bpl.n	8008710 <__sflush_r+0xb8>
 80086be:	2200      	movs	r2, #0
 80086c0:	6062      	str	r2, [r4, #4]
 80086c2:	04d9      	lsls	r1, r3, #19
 80086c4:	6922      	ldr	r2, [r4, #16]
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	d504      	bpl.n	80086d4 <__sflush_r+0x7c>
 80086ca:	1c42      	adds	r2, r0, #1
 80086cc:	d101      	bne.n	80086d2 <__sflush_r+0x7a>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b903      	cbnz	r3, 80086d4 <__sflush_r+0x7c>
 80086d2:	6560      	str	r0, [r4, #84]	; 0x54
 80086d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086d6:	602f      	str	r7, [r5, #0]
 80086d8:	2900      	cmp	r1, #0
 80086da:	d0ca      	beq.n	8008672 <__sflush_r+0x1a>
 80086dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086e0:	4299      	cmp	r1, r3
 80086e2:	d002      	beq.n	80086ea <__sflush_r+0x92>
 80086e4:	4628      	mov	r0, r5
 80086e6:	f7fe fbb3 	bl	8006e50 <_free_r>
 80086ea:	2000      	movs	r0, #0
 80086ec:	6360      	str	r0, [r4, #52]	; 0x34
 80086ee:	e7c1      	b.n	8008674 <__sflush_r+0x1c>
 80086f0:	6a21      	ldr	r1, [r4, #32]
 80086f2:	2301      	movs	r3, #1
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b0      	blx	r6
 80086f8:	1c41      	adds	r1, r0, #1
 80086fa:	d1c7      	bne.n	800868c <__sflush_r+0x34>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0c4      	beq.n	800868c <__sflush_r+0x34>
 8008702:	2b1d      	cmp	r3, #29
 8008704:	d001      	beq.n	800870a <__sflush_r+0xb2>
 8008706:	2b16      	cmp	r3, #22
 8008708:	d101      	bne.n	800870e <__sflush_r+0xb6>
 800870a:	602f      	str	r7, [r5, #0]
 800870c:	e7b1      	b.n	8008672 <__sflush_r+0x1a>
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008714:	81a3      	strh	r3, [r4, #12]
 8008716:	e7ad      	b.n	8008674 <__sflush_r+0x1c>
 8008718:	690f      	ldr	r7, [r1, #16]
 800871a:	2f00      	cmp	r7, #0
 800871c:	d0a9      	beq.n	8008672 <__sflush_r+0x1a>
 800871e:	0793      	lsls	r3, r2, #30
 8008720:	680e      	ldr	r6, [r1, #0]
 8008722:	bf08      	it	eq
 8008724:	694b      	ldreq	r3, [r1, #20]
 8008726:	600f      	str	r7, [r1, #0]
 8008728:	bf18      	it	ne
 800872a:	2300      	movne	r3, #0
 800872c:	eba6 0807 	sub.w	r8, r6, r7
 8008730:	608b      	str	r3, [r1, #8]
 8008732:	f1b8 0f00 	cmp.w	r8, #0
 8008736:	dd9c      	ble.n	8008672 <__sflush_r+0x1a>
 8008738:	6a21      	ldr	r1, [r4, #32]
 800873a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800873c:	4643      	mov	r3, r8
 800873e:	463a      	mov	r2, r7
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	2800      	cmp	r0, #0
 8008746:	dc06      	bgt.n	8008756 <__sflush_r+0xfe>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e78e      	b.n	8008674 <__sflush_r+0x1c>
 8008756:	4407      	add	r7, r0
 8008758:	eba8 0800 	sub.w	r8, r8, r0
 800875c:	e7e9      	b.n	8008732 <__sflush_r+0xda>
 800875e:	bf00      	nop
 8008760:	20400001 	.word	0x20400001

08008764 <_fflush_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	690b      	ldr	r3, [r1, #16]
 8008768:	4605      	mov	r5, r0
 800876a:	460c      	mov	r4, r1
 800876c:	b913      	cbnz	r3, 8008774 <_fflush_r+0x10>
 800876e:	2500      	movs	r5, #0
 8008770:	4628      	mov	r0, r5
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	b118      	cbz	r0, 800877e <_fflush_r+0x1a>
 8008776:	6983      	ldr	r3, [r0, #24]
 8008778:	b90b      	cbnz	r3, 800877e <_fflush_r+0x1a>
 800877a:	f7fe fa7d 	bl	8006c78 <__sinit>
 800877e:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <_fflush_r+0x6c>)
 8008780:	429c      	cmp	r4, r3
 8008782:	d11b      	bne.n	80087bc <_fflush_r+0x58>
 8008784:	686c      	ldr	r4, [r5, #4]
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0ef      	beq.n	800876e <_fflush_r+0xa>
 800878e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008790:	07d0      	lsls	r0, r2, #31
 8008792:	d404      	bmi.n	800879e <_fflush_r+0x3a>
 8008794:	0599      	lsls	r1, r3, #22
 8008796:	d402      	bmi.n	800879e <_fflush_r+0x3a>
 8008798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800879a:	f7fe fb30 	bl	8006dfe <__retarget_lock_acquire_recursive>
 800879e:	4628      	mov	r0, r5
 80087a0:	4621      	mov	r1, r4
 80087a2:	f7ff ff59 	bl	8008658 <__sflush_r>
 80087a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a8:	07da      	lsls	r2, r3, #31
 80087aa:	4605      	mov	r5, r0
 80087ac:	d4e0      	bmi.n	8008770 <_fflush_r+0xc>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	059b      	lsls	r3, r3, #22
 80087b2:	d4dd      	bmi.n	8008770 <_fflush_r+0xc>
 80087b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b6:	f7fe fb23 	bl	8006e00 <__retarget_lock_release_recursive>
 80087ba:	e7d9      	b.n	8008770 <_fflush_r+0xc>
 80087bc:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <_fflush_r+0x70>)
 80087be:	429c      	cmp	r4, r3
 80087c0:	d101      	bne.n	80087c6 <_fflush_r+0x62>
 80087c2:	68ac      	ldr	r4, [r5, #8]
 80087c4:	e7df      	b.n	8008786 <_fflush_r+0x22>
 80087c6:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <_fflush_r+0x74>)
 80087c8:	429c      	cmp	r4, r3
 80087ca:	bf08      	it	eq
 80087cc:	68ec      	ldreq	r4, [r5, #12]
 80087ce:	e7da      	b.n	8008786 <_fflush_r+0x22>
 80087d0:	08009708 	.word	0x08009708
 80087d4:	08009728 	.word	0x08009728
 80087d8:	080096e8 	.word	0x080096e8

080087dc <_localeconv_r>:
 80087dc:	4800      	ldr	r0, [pc, #0]	; (80087e0 <_localeconv_r+0x4>)
 80087de:	4770      	bx	lr
 80087e0:	2000017c 	.word	0x2000017c

080087e4 <_lseek_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d07      	ldr	r5, [pc, #28]	; (8008804 <_lseek_r+0x20>)
 80087e8:	4604      	mov	r4, r0
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	2200      	movs	r2, #0
 80087f0:	602a      	str	r2, [r5, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f7f9 fce4 	bl	80021c0 <_lseek>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_lseek_r+0x1e>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_lseek_r+0x1e>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20001488 	.word	0x20001488

08008808 <__malloc_lock>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__malloc_lock+0x8>)
 800880a:	f7fe baf8 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	20001480 	.word	0x20001480

08008814 <__malloc_unlock>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__malloc_unlock+0x8>)
 8008816:	f7fe baf3 	b.w	8006e00 <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	20001480 	.word	0x20001480

08008820 <_Balloc>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008824:	4604      	mov	r4, r0
 8008826:	460d      	mov	r5, r1
 8008828:	b976      	cbnz	r6, 8008848 <_Balloc+0x28>
 800882a:	2010      	movs	r0, #16
 800882c:	f7fe faea 	bl	8006e04 <malloc>
 8008830:	4602      	mov	r2, r0
 8008832:	6260      	str	r0, [r4, #36]	; 0x24
 8008834:	b920      	cbnz	r0, 8008840 <_Balloc+0x20>
 8008836:	4b18      	ldr	r3, [pc, #96]	; (8008898 <_Balloc+0x78>)
 8008838:	4818      	ldr	r0, [pc, #96]	; (800889c <_Balloc+0x7c>)
 800883a:	2166      	movs	r1, #102	; 0x66
 800883c:	f000 fb90 	bl	8008f60 <__assert_func>
 8008840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008844:	6006      	str	r6, [r0, #0]
 8008846:	60c6      	str	r6, [r0, #12]
 8008848:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800884a:	68f3      	ldr	r3, [r6, #12]
 800884c:	b183      	cbz	r3, 8008870 <_Balloc+0x50>
 800884e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008856:	b9b8      	cbnz	r0, 8008888 <_Balloc+0x68>
 8008858:	2101      	movs	r1, #1
 800885a:	fa01 f605 	lsl.w	r6, r1, r5
 800885e:	1d72      	adds	r2, r6, #5
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fb5a 	bl	8008f1c <_calloc_r>
 8008868:	b160      	cbz	r0, 8008884 <_Balloc+0x64>
 800886a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800886e:	e00e      	b.n	800888e <_Balloc+0x6e>
 8008870:	2221      	movs	r2, #33	; 0x21
 8008872:	2104      	movs	r1, #4
 8008874:	4620      	mov	r0, r4
 8008876:	f000 fb51 	bl	8008f1c <_calloc_r>
 800887a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887c:	60f0      	str	r0, [r6, #12]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e4      	bne.n	800884e <_Balloc+0x2e>
 8008884:	2000      	movs	r0, #0
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	6802      	ldr	r2, [r0, #0]
 800888a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800888e:	2300      	movs	r3, #0
 8008890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008894:	e7f7      	b.n	8008886 <_Balloc+0x66>
 8008896:	bf00      	nop
 8008898:	0800978d 	.word	0x0800978d
 800889c:	08009814 	.word	0x08009814

080088a0 <_Bfree>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b976      	cbnz	r6, 80088c8 <_Bfree+0x28>
 80088aa:	2010      	movs	r0, #16
 80088ac:	f7fe faaa 	bl	8006e04 <malloc>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6268      	str	r0, [r5, #36]	; 0x24
 80088b4:	b920      	cbnz	r0, 80088c0 <_Bfree+0x20>
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <_Bfree+0x3c>)
 80088b8:	4809      	ldr	r0, [pc, #36]	; (80088e0 <_Bfree+0x40>)
 80088ba:	218a      	movs	r1, #138	; 0x8a
 80088bc:	f000 fb50 	bl	8008f60 <__assert_func>
 80088c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c4:	6006      	str	r6, [r0, #0]
 80088c6:	60c6      	str	r6, [r0, #12]
 80088c8:	b13c      	cbz	r4, 80088da <_Bfree+0x3a>
 80088ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088cc:	6862      	ldr	r2, [r4, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088d4:	6021      	str	r1, [r4, #0]
 80088d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	0800978d 	.word	0x0800978d
 80088e0:	08009814 	.word	0x08009814

080088e4 <__multadd>:
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	690e      	ldr	r6, [r1, #16]
 80088ea:	4607      	mov	r7, r0
 80088ec:	4698      	mov	r8, r3
 80088ee:	460c      	mov	r4, r1
 80088f0:	f101 0014 	add.w	r0, r1, #20
 80088f4:	2300      	movs	r3, #0
 80088f6:	6805      	ldr	r5, [r0, #0]
 80088f8:	b2a9      	uxth	r1, r5
 80088fa:	fb02 8101 	mla	r1, r2, r1, r8
 80088fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008902:	0c2d      	lsrs	r5, r5, #16
 8008904:	fb02 c505 	mla	r5, r2, r5, ip
 8008908:	b289      	uxth	r1, r1
 800890a:	3301      	adds	r3, #1
 800890c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008910:	429e      	cmp	r6, r3
 8008912:	f840 1b04 	str.w	r1, [r0], #4
 8008916:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800891a:	dcec      	bgt.n	80088f6 <__multadd+0x12>
 800891c:	f1b8 0f00 	cmp.w	r8, #0
 8008920:	d022      	beq.n	8008968 <__multadd+0x84>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	42b3      	cmp	r3, r6
 8008926:	dc19      	bgt.n	800895c <__multadd+0x78>
 8008928:	6861      	ldr	r1, [r4, #4]
 800892a:	4638      	mov	r0, r7
 800892c:	3101      	adds	r1, #1
 800892e:	f7ff ff77 	bl	8008820 <_Balloc>
 8008932:	4605      	mov	r5, r0
 8008934:	b928      	cbnz	r0, 8008942 <__multadd+0x5e>
 8008936:	4602      	mov	r2, r0
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <__multadd+0x8c>)
 800893a:	480e      	ldr	r0, [pc, #56]	; (8008974 <__multadd+0x90>)
 800893c:	21b5      	movs	r1, #181	; 0xb5
 800893e:	f000 fb0f 	bl	8008f60 <__assert_func>
 8008942:	6922      	ldr	r2, [r4, #16]
 8008944:	3202      	adds	r2, #2
 8008946:	f104 010c 	add.w	r1, r4, #12
 800894a:	0092      	lsls	r2, r2, #2
 800894c:	300c      	adds	r0, #12
 800894e:	f7fe fa69 	bl	8006e24 <memcpy>
 8008952:	4621      	mov	r1, r4
 8008954:	4638      	mov	r0, r7
 8008956:	f7ff ffa3 	bl	80088a0 <_Bfree>
 800895a:	462c      	mov	r4, r5
 800895c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008960:	3601      	adds	r6, #1
 8008962:	f8c3 8014 	str.w	r8, [r3, #20]
 8008966:	6126      	str	r6, [r4, #16]
 8008968:	4620      	mov	r0, r4
 800896a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896e:	bf00      	nop
 8008970:	08009803 	.word	0x08009803
 8008974:	08009814 	.word	0x08009814

08008978 <__hi0bits>:
 8008978:	0c03      	lsrs	r3, r0, #16
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	b9d3      	cbnz	r3, 80089b4 <__hi0bits+0x3c>
 800897e:	0400      	lsls	r0, r0, #16
 8008980:	2310      	movs	r3, #16
 8008982:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008986:	bf04      	itt	eq
 8008988:	0200      	lsleq	r0, r0, #8
 800898a:	3308      	addeq	r3, #8
 800898c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008990:	bf04      	itt	eq
 8008992:	0100      	lsleq	r0, r0, #4
 8008994:	3304      	addeq	r3, #4
 8008996:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800899a:	bf04      	itt	eq
 800899c:	0080      	lsleq	r0, r0, #2
 800899e:	3302      	addeq	r3, #2
 80089a0:	2800      	cmp	r0, #0
 80089a2:	db05      	blt.n	80089b0 <__hi0bits+0x38>
 80089a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089a8:	f103 0301 	add.w	r3, r3, #1
 80089ac:	bf08      	it	eq
 80089ae:	2320      	moveq	r3, #32
 80089b0:	4618      	mov	r0, r3
 80089b2:	4770      	bx	lr
 80089b4:	2300      	movs	r3, #0
 80089b6:	e7e4      	b.n	8008982 <__hi0bits+0xa>

080089b8 <__lo0bits>:
 80089b8:	6803      	ldr	r3, [r0, #0]
 80089ba:	f013 0207 	ands.w	r2, r3, #7
 80089be:	4601      	mov	r1, r0
 80089c0:	d00b      	beq.n	80089da <__lo0bits+0x22>
 80089c2:	07da      	lsls	r2, r3, #31
 80089c4:	d424      	bmi.n	8008a10 <__lo0bits+0x58>
 80089c6:	0798      	lsls	r0, r3, #30
 80089c8:	bf49      	itett	mi
 80089ca:	085b      	lsrmi	r3, r3, #1
 80089cc:	089b      	lsrpl	r3, r3, #2
 80089ce:	2001      	movmi	r0, #1
 80089d0:	600b      	strmi	r3, [r1, #0]
 80089d2:	bf5c      	itt	pl
 80089d4:	600b      	strpl	r3, [r1, #0]
 80089d6:	2002      	movpl	r0, #2
 80089d8:	4770      	bx	lr
 80089da:	b298      	uxth	r0, r3
 80089dc:	b9b0      	cbnz	r0, 8008a0c <__lo0bits+0x54>
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	2010      	movs	r0, #16
 80089e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80089e6:	bf04      	itt	eq
 80089e8:	0a1b      	lsreq	r3, r3, #8
 80089ea:	3008      	addeq	r0, #8
 80089ec:	071a      	lsls	r2, r3, #28
 80089ee:	bf04      	itt	eq
 80089f0:	091b      	lsreq	r3, r3, #4
 80089f2:	3004      	addeq	r0, #4
 80089f4:	079a      	lsls	r2, r3, #30
 80089f6:	bf04      	itt	eq
 80089f8:	089b      	lsreq	r3, r3, #2
 80089fa:	3002      	addeq	r0, #2
 80089fc:	07da      	lsls	r2, r3, #31
 80089fe:	d403      	bmi.n	8008a08 <__lo0bits+0x50>
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	f100 0001 	add.w	r0, r0, #1
 8008a06:	d005      	beq.n	8008a14 <__lo0bits+0x5c>
 8008a08:	600b      	str	r3, [r1, #0]
 8008a0a:	4770      	bx	lr
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	e7e8      	b.n	80089e2 <__lo0bits+0x2a>
 8008a10:	2000      	movs	r0, #0
 8008a12:	4770      	bx	lr
 8008a14:	2020      	movs	r0, #32
 8008a16:	4770      	bx	lr

08008a18 <__i2b>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	f7ff feff 	bl	8008820 <_Balloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	b928      	cbnz	r0, 8008a32 <__i2b+0x1a>
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <__i2b+0x24>)
 8008a28:	4805      	ldr	r0, [pc, #20]	; (8008a40 <__i2b+0x28>)
 8008a2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a2e:	f000 fa97 	bl	8008f60 <__assert_func>
 8008a32:	2301      	movs	r3, #1
 8008a34:	6144      	str	r4, [r0, #20]
 8008a36:	6103      	str	r3, [r0, #16]
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	bf00      	nop
 8008a3c:	08009803 	.word	0x08009803
 8008a40:	08009814 	.word	0x08009814

08008a44 <__multiply>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4614      	mov	r4, r2
 8008a4a:	690a      	ldr	r2, [r1, #16]
 8008a4c:	6923      	ldr	r3, [r4, #16]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	bfb8      	it	lt
 8008a52:	460b      	movlt	r3, r1
 8008a54:	460d      	mov	r5, r1
 8008a56:	bfbc      	itt	lt
 8008a58:	4625      	movlt	r5, r4
 8008a5a:	461c      	movlt	r4, r3
 8008a5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008a60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a64:	68ab      	ldr	r3, [r5, #8]
 8008a66:	6869      	ldr	r1, [r5, #4]
 8008a68:	eb0a 0709 	add.w	r7, sl, r9
 8008a6c:	42bb      	cmp	r3, r7
 8008a6e:	b085      	sub	sp, #20
 8008a70:	bfb8      	it	lt
 8008a72:	3101      	addlt	r1, #1
 8008a74:	f7ff fed4 	bl	8008820 <_Balloc>
 8008a78:	b930      	cbnz	r0, 8008a88 <__multiply+0x44>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4b42      	ldr	r3, [pc, #264]	; (8008b88 <__multiply+0x144>)
 8008a7e:	4843      	ldr	r0, [pc, #268]	; (8008b8c <__multiply+0x148>)
 8008a80:	f240 115d 	movw	r1, #349	; 0x15d
 8008a84:	f000 fa6c 	bl	8008f60 <__assert_func>
 8008a88:	f100 0614 	add.w	r6, r0, #20
 8008a8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008a90:	4633      	mov	r3, r6
 8008a92:	2200      	movs	r2, #0
 8008a94:	4543      	cmp	r3, r8
 8008a96:	d31e      	bcc.n	8008ad6 <__multiply+0x92>
 8008a98:	f105 0c14 	add.w	ip, r5, #20
 8008a9c:	f104 0314 	add.w	r3, r4, #20
 8008aa0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008aa4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008aa8:	9202      	str	r2, [sp, #8]
 8008aaa:	ebac 0205 	sub.w	r2, ip, r5
 8008aae:	3a15      	subs	r2, #21
 8008ab0:	f022 0203 	bic.w	r2, r2, #3
 8008ab4:	3204      	adds	r2, #4
 8008ab6:	f105 0115 	add.w	r1, r5, #21
 8008aba:	458c      	cmp	ip, r1
 8008abc:	bf38      	it	cc
 8008abe:	2204      	movcc	r2, #4
 8008ac0:	9201      	str	r2, [sp, #4]
 8008ac2:	9a02      	ldr	r2, [sp, #8]
 8008ac4:	9303      	str	r3, [sp, #12]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d808      	bhi.n	8008adc <__multiply+0x98>
 8008aca:	2f00      	cmp	r7, #0
 8008acc:	dc55      	bgt.n	8008b7a <__multiply+0x136>
 8008ace:	6107      	str	r7, [r0, #16]
 8008ad0:	b005      	add	sp, #20
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad6:	f843 2b04 	str.w	r2, [r3], #4
 8008ada:	e7db      	b.n	8008a94 <__multiply+0x50>
 8008adc:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ae0:	f1ba 0f00 	cmp.w	sl, #0
 8008ae4:	d020      	beq.n	8008b28 <__multiply+0xe4>
 8008ae6:	f105 0e14 	add.w	lr, r5, #20
 8008aea:	46b1      	mov	r9, r6
 8008aec:	2200      	movs	r2, #0
 8008aee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008af2:	f8d9 b000 	ldr.w	fp, [r9]
 8008af6:	b2a1      	uxth	r1, r4
 8008af8:	fa1f fb8b 	uxth.w	fp, fp
 8008afc:	fb0a b101 	mla	r1, sl, r1, fp
 8008b00:	4411      	add	r1, r2
 8008b02:	f8d9 2000 	ldr.w	r2, [r9]
 8008b06:	0c24      	lsrs	r4, r4, #16
 8008b08:	0c12      	lsrs	r2, r2, #16
 8008b0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b12:	b289      	uxth	r1, r1
 8008b14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b18:	45f4      	cmp	ip, lr
 8008b1a:	f849 1b04 	str.w	r1, [r9], #4
 8008b1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b22:	d8e4      	bhi.n	8008aee <__multiply+0xaa>
 8008b24:	9901      	ldr	r1, [sp, #4]
 8008b26:	5072      	str	r2, [r6, r1]
 8008b28:	9a03      	ldr	r2, [sp, #12]
 8008b2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	f1b9 0f00 	cmp.w	r9, #0
 8008b34:	d01f      	beq.n	8008b76 <__multiply+0x132>
 8008b36:	6834      	ldr	r4, [r6, #0]
 8008b38:	f105 0114 	add.w	r1, r5, #20
 8008b3c:	46b6      	mov	lr, r6
 8008b3e:	f04f 0a00 	mov.w	sl, #0
 8008b42:	880a      	ldrh	r2, [r1, #0]
 8008b44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b48:	fb09 b202 	mla	r2, r9, r2, fp
 8008b4c:	4492      	add	sl, r2
 8008b4e:	b2a4      	uxth	r4, r4
 8008b50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008b54:	f84e 4b04 	str.w	r4, [lr], #4
 8008b58:	f851 4b04 	ldr.w	r4, [r1], #4
 8008b5c:	f8be 2000 	ldrh.w	r2, [lr]
 8008b60:	0c24      	lsrs	r4, r4, #16
 8008b62:	fb09 2404 	mla	r4, r9, r4, r2
 8008b66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008b6a:	458c      	cmp	ip, r1
 8008b6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b70:	d8e7      	bhi.n	8008b42 <__multiply+0xfe>
 8008b72:	9a01      	ldr	r2, [sp, #4]
 8008b74:	50b4      	str	r4, [r6, r2]
 8008b76:	3604      	adds	r6, #4
 8008b78:	e7a3      	b.n	8008ac2 <__multiply+0x7e>
 8008b7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1a5      	bne.n	8008ace <__multiply+0x8a>
 8008b82:	3f01      	subs	r7, #1
 8008b84:	e7a1      	b.n	8008aca <__multiply+0x86>
 8008b86:	bf00      	nop
 8008b88:	08009803 	.word	0x08009803
 8008b8c:	08009814 	.word	0x08009814

08008b90 <__pow5mult>:
 8008b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	4615      	mov	r5, r2
 8008b96:	f012 0203 	ands.w	r2, r2, #3
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	d007      	beq.n	8008bb0 <__pow5mult+0x20>
 8008ba0:	4c25      	ldr	r4, [pc, #148]	; (8008c38 <__pow5mult+0xa8>)
 8008ba2:	3a01      	subs	r2, #1
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008baa:	f7ff fe9b 	bl	80088e4 <__multadd>
 8008bae:	4607      	mov	r7, r0
 8008bb0:	10ad      	asrs	r5, r5, #2
 8008bb2:	d03d      	beq.n	8008c30 <__pow5mult+0xa0>
 8008bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bb6:	b97c      	cbnz	r4, 8008bd8 <__pow5mult+0x48>
 8008bb8:	2010      	movs	r0, #16
 8008bba:	f7fe f923 	bl	8006e04 <malloc>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	6270      	str	r0, [r6, #36]	; 0x24
 8008bc2:	b928      	cbnz	r0, 8008bd0 <__pow5mult+0x40>
 8008bc4:	4b1d      	ldr	r3, [pc, #116]	; (8008c3c <__pow5mult+0xac>)
 8008bc6:	481e      	ldr	r0, [pc, #120]	; (8008c40 <__pow5mult+0xb0>)
 8008bc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bcc:	f000 f9c8 	bl	8008f60 <__assert_func>
 8008bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd4:	6004      	str	r4, [r0, #0]
 8008bd6:	60c4      	str	r4, [r0, #12]
 8008bd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be0:	b94c      	cbnz	r4, 8008bf6 <__pow5mult+0x66>
 8008be2:	f240 2171 	movw	r1, #625	; 0x271
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff ff16 	bl	8008a18 <__i2b>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	f04f 0900 	mov.w	r9, #0
 8008bfa:	07eb      	lsls	r3, r5, #31
 8008bfc:	d50a      	bpl.n	8008c14 <__pow5mult+0x84>
 8008bfe:	4639      	mov	r1, r7
 8008c00:	4622      	mov	r2, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ff1e 	bl	8008a44 <__multiply>
 8008c08:	4639      	mov	r1, r7
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff fe47 	bl	80088a0 <_Bfree>
 8008c12:	4647      	mov	r7, r8
 8008c14:	106d      	asrs	r5, r5, #1
 8008c16:	d00b      	beq.n	8008c30 <__pow5mult+0xa0>
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	b938      	cbnz	r0, 8008c2c <__pow5mult+0x9c>
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff ff0f 	bl	8008a44 <__multiply>
 8008c26:	6020      	str	r0, [r4, #0]
 8008c28:	f8c0 9000 	str.w	r9, [r0]
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	e7e4      	b.n	8008bfa <__pow5mult+0x6a>
 8008c30:	4638      	mov	r0, r7
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c36:	bf00      	nop
 8008c38:	08009968 	.word	0x08009968
 8008c3c:	0800978d 	.word	0x0800978d
 8008c40:	08009814 	.word	0x08009814

08008c44 <__lshift>:
 8008c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	460c      	mov	r4, r1
 8008c4a:	6849      	ldr	r1, [r1, #4]
 8008c4c:	6923      	ldr	r3, [r4, #16]
 8008c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	4607      	mov	r7, r0
 8008c56:	4691      	mov	r9, r2
 8008c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c5c:	f108 0601 	add.w	r6, r8, #1
 8008c60:	42b3      	cmp	r3, r6
 8008c62:	db0b      	blt.n	8008c7c <__lshift+0x38>
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff fddb 	bl	8008820 <_Balloc>
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	b948      	cbnz	r0, 8008c82 <__lshift+0x3e>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b28      	ldr	r3, [pc, #160]	; (8008d14 <__lshift+0xd0>)
 8008c72:	4829      	ldr	r0, [pc, #164]	; (8008d18 <__lshift+0xd4>)
 8008c74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c78:	f000 f972 	bl	8008f60 <__assert_func>
 8008c7c:	3101      	adds	r1, #1
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	e7ee      	b.n	8008c60 <__lshift+0x1c>
 8008c82:	2300      	movs	r3, #0
 8008c84:	f100 0114 	add.w	r1, r0, #20
 8008c88:	f100 0210 	add.w	r2, r0, #16
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	4553      	cmp	r3, sl
 8008c90:	db33      	blt.n	8008cfa <__lshift+0xb6>
 8008c92:	6920      	ldr	r0, [r4, #16]
 8008c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c98:	f104 0314 	add.w	r3, r4, #20
 8008c9c:	f019 091f 	ands.w	r9, r9, #31
 8008ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ca4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ca8:	d02b      	beq.n	8008d02 <__lshift+0xbe>
 8008caa:	f1c9 0e20 	rsb	lr, r9, #32
 8008cae:	468a      	mov	sl, r1
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	6818      	ldr	r0, [r3, #0]
 8008cb4:	fa00 f009 	lsl.w	r0, r0, r9
 8008cb8:	4302      	orrs	r2, r0
 8008cba:	f84a 2b04 	str.w	r2, [sl], #4
 8008cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc2:	459c      	cmp	ip, r3
 8008cc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cc8:	d8f3      	bhi.n	8008cb2 <__lshift+0x6e>
 8008cca:	ebac 0304 	sub.w	r3, ip, r4
 8008cce:	3b15      	subs	r3, #21
 8008cd0:	f023 0303 	bic.w	r3, r3, #3
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	f104 0015 	add.w	r0, r4, #21
 8008cda:	4584      	cmp	ip, r0
 8008cdc:	bf38      	it	cc
 8008cde:	2304      	movcc	r3, #4
 8008ce0:	50ca      	str	r2, [r1, r3]
 8008ce2:	b10a      	cbz	r2, 8008ce8 <__lshift+0xa4>
 8008ce4:	f108 0602 	add.w	r6, r8, #2
 8008ce8:	3e01      	subs	r6, #1
 8008cea:	4638      	mov	r0, r7
 8008cec:	612e      	str	r6, [r5, #16]
 8008cee:	4621      	mov	r1, r4
 8008cf0:	f7ff fdd6 	bl	80088a0 <_Bfree>
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cfe:	3301      	adds	r3, #1
 8008d00:	e7c5      	b.n	8008c8e <__lshift+0x4a>
 8008d02:	3904      	subs	r1, #4
 8008d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d0c:	459c      	cmp	ip, r3
 8008d0e:	d8f9      	bhi.n	8008d04 <__lshift+0xc0>
 8008d10:	e7ea      	b.n	8008ce8 <__lshift+0xa4>
 8008d12:	bf00      	nop
 8008d14:	08009803 	.word	0x08009803
 8008d18:	08009814 	.word	0x08009814

08008d1c <__mcmp>:
 8008d1c:	b530      	push	{r4, r5, lr}
 8008d1e:	6902      	ldr	r2, [r0, #16]
 8008d20:	690c      	ldr	r4, [r1, #16]
 8008d22:	1b12      	subs	r2, r2, r4
 8008d24:	d10e      	bne.n	8008d44 <__mcmp+0x28>
 8008d26:	f100 0314 	add.w	r3, r0, #20
 8008d2a:	3114      	adds	r1, #20
 8008d2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d3c:	42a5      	cmp	r5, r4
 8008d3e:	d003      	beq.n	8008d48 <__mcmp+0x2c>
 8008d40:	d305      	bcc.n	8008d4e <__mcmp+0x32>
 8008d42:	2201      	movs	r2, #1
 8008d44:	4610      	mov	r0, r2
 8008d46:	bd30      	pop	{r4, r5, pc}
 8008d48:	4283      	cmp	r3, r0
 8008d4a:	d3f3      	bcc.n	8008d34 <__mcmp+0x18>
 8008d4c:	e7fa      	b.n	8008d44 <__mcmp+0x28>
 8008d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d52:	e7f7      	b.n	8008d44 <__mcmp+0x28>

08008d54 <__mdiff>:
 8008d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	460c      	mov	r4, r1
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4617      	mov	r7, r2
 8008d62:	f7ff ffdb 	bl	8008d1c <__mcmp>
 8008d66:	1e05      	subs	r5, r0, #0
 8008d68:	d110      	bne.n	8008d8c <__mdiff+0x38>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff fd57 	bl	8008820 <_Balloc>
 8008d72:	b930      	cbnz	r0, 8008d82 <__mdiff+0x2e>
 8008d74:	4b39      	ldr	r3, [pc, #228]	; (8008e5c <__mdiff+0x108>)
 8008d76:	4602      	mov	r2, r0
 8008d78:	f240 2132 	movw	r1, #562	; 0x232
 8008d7c:	4838      	ldr	r0, [pc, #224]	; (8008e60 <__mdiff+0x10c>)
 8008d7e:	f000 f8ef 	bl	8008f60 <__assert_func>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	bfa4      	itt	ge
 8008d8e:	463b      	movge	r3, r7
 8008d90:	4627      	movge	r7, r4
 8008d92:	4630      	mov	r0, r6
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	bfa6      	itte	ge
 8008d98:	461c      	movge	r4, r3
 8008d9a:	2500      	movge	r5, #0
 8008d9c:	2501      	movlt	r5, #1
 8008d9e:	f7ff fd3f 	bl	8008820 <_Balloc>
 8008da2:	b920      	cbnz	r0, 8008dae <__mdiff+0x5a>
 8008da4:	4b2d      	ldr	r3, [pc, #180]	; (8008e5c <__mdiff+0x108>)
 8008da6:	4602      	mov	r2, r0
 8008da8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dac:	e7e6      	b.n	8008d7c <__mdiff+0x28>
 8008dae:	693e      	ldr	r6, [r7, #16]
 8008db0:	60c5      	str	r5, [r0, #12]
 8008db2:	6925      	ldr	r5, [r4, #16]
 8008db4:	f107 0114 	add.w	r1, r7, #20
 8008db8:	f104 0914 	add.w	r9, r4, #20
 8008dbc:	f100 0e14 	add.w	lr, r0, #20
 8008dc0:	f107 0210 	add.w	r2, r7, #16
 8008dc4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008dc8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008dcc:	46f2      	mov	sl, lr
 8008dce:	2700      	movs	r7, #0
 8008dd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dd8:	fa1f f883 	uxth.w	r8, r3
 8008ddc:	fa17 f78b 	uxtah	r7, r7, fp
 8008de0:	0c1b      	lsrs	r3, r3, #16
 8008de2:	eba7 0808 	sub.w	r8, r7, r8
 8008de6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008dee:	fa1f f888 	uxth.w	r8, r8
 8008df2:	141f      	asrs	r7, r3, #16
 8008df4:	454d      	cmp	r5, r9
 8008df6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008dfa:	f84a 3b04 	str.w	r3, [sl], #4
 8008dfe:	d8e7      	bhi.n	8008dd0 <__mdiff+0x7c>
 8008e00:	1b2b      	subs	r3, r5, r4
 8008e02:	3b15      	subs	r3, #21
 8008e04:	f023 0303 	bic.w	r3, r3, #3
 8008e08:	3304      	adds	r3, #4
 8008e0a:	3415      	adds	r4, #21
 8008e0c:	42a5      	cmp	r5, r4
 8008e0e:	bf38      	it	cc
 8008e10:	2304      	movcc	r3, #4
 8008e12:	4419      	add	r1, r3
 8008e14:	4473      	add	r3, lr
 8008e16:	469e      	mov	lr, r3
 8008e18:	460d      	mov	r5, r1
 8008e1a:	4565      	cmp	r5, ip
 8008e1c:	d30e      	bcc.n	8008e3c <__mdiff+0xe8>
 8008e1e:	f10c 0203 	add.w	r2, ip, #3
 8008e22:	1a52      	subs	r2, r2, r1
 8008e24:	f022 0203 	bic.w	r2, r2, #3
 8008e28:	3903      	subs	r1, #3
 8008e2a:	458c      	cmp	ip, r1
 8008e2c:	bf38      	it	cc
 8008e2e:	2200      	movcc	r2, #0
 8008e30:	441a      	add	r2, r3
 8008e32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e36:	b17b      	cbz	r3, 8008e58 <__mdiff+0x104>
 8008e38:	6106      	str	r6, [r0, #16]
 8008e3a:	e7a5      	b.n	8008d88 <__mdiff+0x34>
 8008e3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e40:	fa17 f488 	uxtah	r4, r7, r8
 8008e44:	1422      	asrs	r2, r4, #16
 8008e46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008e4a:	b2a4      	uxth	r4, r4
 8008e4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008e50:	f84e 4b04 	str.w	r4, [lr], #4
 8008e54:	1417      	asrs	r7, r2, #16
 8008e56:	e7e0      	b.n	8008e1a <__mdiff+0xc6>
 8008e58:	3e01      	subs	r6, #1
 8008e5a:	e7ea      	b.n	8008e32 <__mdiff+0xde>
 8008e5c:	08009803 	.word	0x08009803
 8008e60:	08009814 	.word	0x08009814

08008e64 <__d2b>:
 8008e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	4689      	mov	r9, r1
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	ec57 6b10 	vmov	r6, r7, d0
 8008e70:	4690      	mov	r8, r2
 8008e72:	f7ff fcd5 	bl	8008820 <_Balloc>
 8008e76:	4604      	mov	r4, r0
 8008e78:	b930      	cbnz	r0, 8008e88 <__d2b+0x24>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	4b25      	ldr	r3, [pc, #148]	; (8008f14 <__d2b+0xb0>)
 8008e7e:	4826      	ldr	r0, [pc, #152]	; (8008f18 <__d2b+0xb4>)
 8008e80:	f240 310a 	movw	r1, #778	; 0x30a
 8008e84:	f000 f86c 	bl	8008f60 <__assert_func>
 8008e88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e90:	bb35      	cbnz	r5, 8008ee0 <__d2b+0x7c>
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	d028      	beq.n	8008eea <__d2b+0x86>
 8008e98:	4668      	mov	r0, sp
 8008e9a:	9600      	str	r6, [sp, #0]
 8008e9c:	f7ff fd8c 	bl	80089b8 <__lo0bits>
 8008ea0:	9900      	ldr	r1, [sp, #0]
 8008ea2:	b300      	cbz	r0, 8008ee6 <__d2b+0x82>
 8008ea4:	9a01      	ldr	r2, [sp, #4]
 8008ea6:	f1c0 0320 	rsb	r3, r0, #32
 8008eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008eae:	430b      	orrs	r3, r1
 8008eb0:	40c2      	lsrs	r2, r0
 8008eb2:	6163      	str	r3, [r4, #20]
 8008eb4:	9201      	str	r2, [sp, #4]
 8008eb6:	9b01      	ldr	r3, [sp, #4]
 8008eb8:	61a3      	str	r3, [r4, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	bf14      	ite	ne
 8008ebe:	2202      	movne	r2, #2
 8008ec0:	2201      	moveq	r2, #1
 8008ec2:	6122      	str	r2, [r4, #16]
 8008ec4:	b1d5      	cbz	r5, 8008efc <__d2b+0x98>
 8008ec6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eca:	4405      	add	r5, r0
 8008ecc:	f8c9 5000 	str.w	r5, [r9]
 8008ed0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ed4:	f8c8 0000 	str.w	r0, [r8]
 8008ed8:	4620      	mov	r0, r4
 8008eda:	b003      	add	sp, #12
 8008edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ee4:	e7d5      	b.n	8008e92 <__d2b+0x2e>
 8008ee6:	6161      	str	r1, [r4, #20]
 8008ee8:	e7e5      	b.n	8008eb6 <__d2b+0x52>
 8008eea:	a801      	add	r0, sp, #4
 8008eec:	f7ff fd64 	bl	80089b8 <__lo0bits>
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	6163      	str	r3, [r4, #20]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	6122      	str	r2, [r4, #16]
 8008ef8:	3020      	adds	r0, #32
 8008efa:	e7e3      	b.n	8008ec4 <__d2b+0x60>
 8008efc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f04:	f8c9 0000 	str.w	r0, [r9]
 8008f08:	6918      	ldr	r0, [r3, #16]
 8008f0a:	f7ff fd35 	bl	8008978 <__hi0bits>
 8008f0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f12:	e7df      	b.n	8008ed4 <__d2b+0x70>
 8008f14:	08009803 	.word	0x08009803
 8008f18:	08009814 	.word	0x08009814

08008f1c <_calloc_r>:
 8008f1c:	b513      	push	{r0, r1, r4, lr}
 8008f1e:	434a      	muls	r2, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	9201      	str	r2, [sp, #4]
 8008f24:	f7fd ffe4 	bl	8006ef0 <_malloc_r>
 8008f28:	4604      	mov	r4, r0
 8008f2a:	b118      	cbz	r0, 8008f34 <_calloc_r+0x18>
 8008f2c:	9a01      	ldr	r2, [sp, #4]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	f7fd ff86 	bl	8006e40 <memset>
 8008f34:	4620      	mov	r0, r4
 8008f36:	b002      	add	sp, #8
 8008f38:	bd10      	pop	{r4, pc}
	...

08008f3c <_read_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d07      	ldr	r5, [pc, #28]	; (8008f5c <_read_r+0x20>)
 8008f40:	4604      	mov	r4, r0
 8008f42:	4608      	mov	r0, r1
 8008f44:	4611      	mov	r1, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	602a      	str	r2, [r5, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f7f9 f8d8 	bl	8002100 <_read>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_read_r+0x1e>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_read_r+0x1e>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	20001488 	.word	0x20001488

08008f60 <__assert_func>:
 8008f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f62:	4614      	mov	r4, r2
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <__assert_func+0x2c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	68d8      	ldr	r0, [r3, #12]
 8008f6e:	b14c      	cbz	r4, 8008f84 <__assert_func+0x24>
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <__assert_func+0x30>)
 8008f72:	9100      	str	r1, [sp, #0]
 8008f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f78:	4906      	ldr	r1, [pc, #24]	; (8008f94 <__assert_func+0x34>)
 8008f7a:	462b      	mov	r3, r5
 8008f7c:	f000 f80e 	bl	8008f9c <fiprintf>
 8008f80:	f000 fa58 	bl	8009434 <abort>
 8008f84:	4b04      	ldr	r3, [pc, #16]	; (8008f98 <__assert_func+0x38>)
 8008f86:	461c      	mov	r4, r3
 8008f88:	e7f3      	b.n	8008f72 <__assert_func+0x12>
 8008f8a:	bf00      	nop
 8008f8c:	20000028 	.word	0x20000028
 8008f90:	08009974 	.word	0x08009974
 8008f94:	08009981 	.word	0x08009981
 8008f98:	080099af 	.word	0x080099af

08008f9c <fiprintf>:
 8008f9c:	b40e      	push	{r1, r2, r3}
 8008f9e:	b503      	push	{r0, r1, lr}
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	4805      	ldr	r0, [pc, #20]	; (8008fbc <fiprintf+0x20>)
 8008fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	f000 f843 	bl	8009038 <_vfiprintf_r>
 8008fb2:	b002      	add	sp, #8
 8008fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb8:	b003      	add	sp, #12
 8008fba:	4770      	bx	lr
 8008fbc:	20000028 	.word	0x20000028

08008fc0 <__ascii_mbtowc>:
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	b901      	cbnz	r1, 8008fc6 <__ascii_mbtowc+0x6>
 8008fc4:	a901      	add	r1, sp, #4
 8008fc6:	b142      	cbz	r2, 8008fda <__ascii_mbtowc+0x1a>
 8008fc8:	b14b      	cbz	r3, 8008fde <__ascii_mbtowc+0x1e>
 8008fca:	7813      	ldrb	r3, [r2, #0]
 8008fcc:	600b      	str	r3, [r1, #0]
 8008fce:	7812      	ldrb	r2, [r2, #0]
 8008fd0:	1e10      	subs	r0, r2, #0
 8008fd2:	bf18      	it	ne
 8008fd4:	2001      	movne	r0, #1
 8008fd6:	b002      	add	sp, #8
 8008fd8:	4770      	bx	lr
 8008fda:	4610      	mov	r0, r2
 8008fdc:	e7fb      	b.n	8008fd6 <__ascii_mbtowc+0x16>
 8008fde:	f06f 0001 	mvn.w	r0, #1
 8008fe2:	e7f8      	b.n	8008fd6 <__ascii_mbtowc+0x16>

08008fe4 <__sfputc_r>:
 8008fe4:	6893      	ldr	r3, [r2, #8]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	b410      	push	{r4}
 8008fec:	6093      	str	r3, [r2, #8]
 8008fee:	da08      	bge.n	8009002 <__sfputc_r+0x1e>
 8008ff0:	6994      	ldr	r4, [r2, #24]
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	db01      	blt.n	8008ffa <__sfputc_r+0x16>
 8008ff6:	290a      	cmp	r1, #10
 8008ff8:	d103      	bne.n	8009002 <__sfputc_r+0x1e>
 8008ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ffe:	f000 b94b 	b.w	8009298 <__swbuf_r>
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	1c58      	adds	r0, r3, #1
 8009006:	6010      	str	r0, [r2, #0]
 8009008:	7019      	strb	r1, [r3, #0]
 800900a:	4608      	mov	r0, r1
 800900c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009010:	4770      	bx	lr

08009012 <__sfputs_r>:
 8009012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009014:	4606      	mov	r6, r0
 8009016:	460f      	mov	r7, r1
 8009018:	4614      	mov	r4, r2
 800901a:	18d5      	adds	r5, r2, r3
 800901c:	42ac      	cmp	r4, r5
 800901e:	d101      	bne.n	8009024 <__sfputs_r+0x12>
 8009020:	2000      	movs	r0, #0
 8009022:	e007      	b.n	8009034 <__sfputs_r+0x22>
 8009024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009028:	463a      	mov	r2, r7
 800902a:	4630      	mov	r0, r6
 800902c:	f7ff ffda 	bl	8008fe4 <__sfputc_r>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d1f3      	bne.n	800901c <__sfputs_r+0xa>
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009038 <_vfiprintf_r>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	460d      	mov	r5, r1
 800903e:	b09d      	sub	sp, #116	; 0x74
 8009040:	4614      	mov	r4, r2
 8009042:	4698      	mov	r8, r3
 8009044:	4606      	mov	r6, r0
 8009046:	b118      	cbz	r0, 8009050 <_vfiprintf_r+0x18>
 8009048:	6983      	ldr	r3, [r0, #24]
 800904a:	b90b      	cbnz	r3, 8009050 <_vfiprintf_r+0x18>
 800904c:	f7fd fe14 	bl	8006c78 <__sinit>
 8009050:	4b89      	ldr	r3, [pc, #548]	; (8009278 <_vfiprintf_r+0x240>)
 8009052:	429d      	cmp	r5, r3
 8009054:	d11b      	bne.n	800908e <_vfiprintf_r+0x56>
 8009056:	6875      	ldr	r5, [r6, #4]
 8009058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d405      	bmi.n	800906a <_vfiprintf_r+0x32>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	059a      	lsls	r2, r3, #22
 8009062:	d402      	bmi.n	800906a <_vfiprintf_r+0x32>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f7fd feca 	bl	8006dfe <__retarget_lock_acquire_recursive>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	071b      	lsls	r3, r3, #28
 800906e:	d501      	bpl.n	8009074 <_vfiprintf_r+0x3c>
 8009070:	692b      	ldr	r3, [r5, #16]
 8009072:	b9eb      	cbnz	r3, 80090b0 <_vfiprintf_r+0x78>
 8009074:	4629      	mov	r1, r5
 8009076:	4630      	mov	r0, r6
 8009078:	f000 f96e 	bl	8009358 <__swsetup_r>
 800907c:	b1c0      	cbz	r0, 80090b0 <_vfiprintf_r+0x78>
 800907e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009080:	07dc      	lsls	r4, r3, #31
 8009082:	d50e      	bpl.n	80090a2 <_vfiprintf_r+0x6a>
 8009084:	f04f 30ff 	mov.w	r0, #4294967295
 8009088:	b01d      	add	sp, #116	; 0x74
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	4b7b      	ldr	r3, [pc, #492]	; (800927c <_vfiprintf_r+0x244>)
 8009090:	429d      	cmp	r5, r3
 8009092:	d101      	bne.n	8009098 <_vfiprintf_r+0x60>
 8009094:	68b5      	ldr	r5, [r6, #8]
 8009096:	e7df      	b.n	8009058 <_vfiprintf_r+0x20>
 8009098:	4b79      	ldr	r3, [pc, #484]	; (8009280 <_vfiprintf_r+0x248>)
 800909a:	429d      	cmp	r5, r3
 800909c:	bf08      	it	eq
 800909e:	68f5      	ldreq	r5, [r6, #12]
 80090a0:	e7da      	b.n	8009058 <_vfiprintf_r+0x20>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	0598      	lsls	r0, r3, #22
 80090a6:	d4ed      	bmi.n	8009084 <_vfiprintf_r+0x4c>
 80090a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090aa:	f7fd fea9 	bl	8006e00 <__retarget_lock_release_recursive>
 80090ae:	e7e9      	b.n	8009084 <_vfiprintf_r+0x4c>
 80090b0:	2300      	movs	r3, #0
 80090b2:	9309      	str	r3, [sp, #36]	; 0x24
 80090b4:	2320      	movs	r3, #32
 80090b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80090be:	2330      	movs	r3, #48	; 0x30
 80090c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009284 <_vfiprintf_r+0x24c>
 80090c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c8:	f04f 0901 	mov.w	r9, #1
 80090cc:	4623      	mov	r3, r4
 80090ce:	469a      	mov	sl, r3
 80090d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d4:	b10a      	cbz	r2, 80090da <_vfiprintf_r+0xa2>
 80090d6:	2a25      	cmp	r2, #37	; 0x25
 80090d8:	d1f9      	bne.n	80090ce <_vfiprintf_r+0x96>
 80090da:	ebba 0b04 	subs.w	fp, sl, r4
 80090de:	d00b      	beq.n	80090f8 <_vfiprintf_r+0xc0>
 80090e0:	465b      	mov	r3, fp
 80090e2:	4622      	mov	r2, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff93 	bl	8009012 <__sfputs_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	f000 80aa 	beq.w	8009246 <_vfiprintf_r+0x20e>
 80090f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f4:	445a      	add	r2, fp
 80090f6:	9209      	str	r2, [sp, #36]	; 0x24
 80090f8:	f89a 3000 	ldrb.w	r3, [sl]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80a2 	beq.w	8009246 <_vfiprintf_r+0x20e>
 8009102:	2300      	movs	r3, #0
 8009104:	f04f 32ff 	mov.w	r2, #4294967295
 8009108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800910c:	f10a 0a01 	add.w	sl, sl, #1
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009118:	931a      	str	r3, [sp, #104]	; 0x68
 800911a:	4654      	mov	r4, sl
 800911c:	2205      	movs	r2, #5
 800911e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009122:	4858      	ldr	r0, [pc, #352]	; (8009284 <_vfiprintf_r+0x24c>)
 8009124:	f7f7 f86c 	bl	8000200 <memchr>
 8009128:	9a04      	ldr	r2, [sp, #16]
 800912a:	b9d8      	cbnz	r0, 8009164 <_vfiprintf_r+0x12c>
 800912c:	06d1      	lsls	r1, r2, #27
 800912e:	bf44      	itt	mi
 8009130:	2320      	movmi	r3, #32
 8009132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009136:	0713      	lsls	r3, r2, #28
 8009138:	bf44      	itt	mi
 800913a:	232b      	movmi	r3, #43	; 0x2b
 800913c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009140:	f89a 3000 	ldrb.w	r3, [sl]
 8009144:	2b2a      	cmp	r3, #42	; 0x2a
 8009146:	d015      	beq.n	8009174 <_vfiprintf_r+0x13c>
 8009148:	9a07      	ldr	r2, [sp, #28]
 800914a:	4654      	mov	r4, sl
 800914c:	2000      	movs	r0, #0
 800914e:	f04f 0c0a 	mov.w	ip, #10
 8009152:	4621      	mov	r1, r4
 8009154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009158:	3b30      	subs	r3, #48	; 0x30
 800915a:	2b09      	cmp	r3, #9
 800915c:	d94e      	bls.n	80091fc <_vfiprintf_r+0x1c4>
 800915e:	b1b0      	cbz	r0, 800918e <_vfiprintf_r+0x156>
 8009160:	9207      	str	r2, [sp, #28]
 8009162:	e014      	b.n	800918e <_vfiprintf_r+0x156>
 8009164:	eba0 0308 	sub.w	r3, r0, r8
 8009168:	fa09 f303 	lsl.w	r3, r9, r3
 800916c:	4313      	orrs	r3, r2
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	46a2      	mov	sl, r4
 8009172:	e7d2      	b.n	800911a <_vfiprintf_r+0xe2>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d19      	adds	r1, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9103      	str	r1, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfbb      	ittet	lt
 8009180:	425b      	neglt	r3, r3
 8009182:	f042 0202 	orrlt.w	r2, r2, #2
 8009186:	9307      	strge	r3, [sp, #28]
 8009188:	9307      	strlt	r3, [sp, #28]
 800918a:	bfb8      	it	lt
 800918c:	9204      	strlt	r2, [sp, #16]
 800918e:	7823      	ldrb	r3, [r4, #0]
 8009190:	2b2e      	cmp	r3, #46	; 0x2e
 8009192:	d10c      	bne.n	80091ae <_vfiprintf_r+0x176>
 8009194:	7863      	ldrb	r3, [r4, #1]
 8009196:	2b2a      	cmp	r3, #42	; 0x2a
 8009198:	d135      	bne.n	8009206 <_vfiprintf_r+0x1ce>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	9203      	str	r2, [sp, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfb8      	it	lt
 80091a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80091aa:	3402      	adds	r4, #2
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009294 <_vfiprintf_r+0x25c>
 80091b2:	7821      	ldrb	r1, [r4, #0]
 80091b4:	2203      	movs	r2, #3
 80091b6:	4650      	mov	r0, sl
 80091b8:	f7f7 f822 	bl	8000200 <memchr>
 80091bc:	b140      	cbz	r0, 80091d0 <_vfiprintf_r+0x198>
 80091be:	2340      	movs	r3, #64	; 0x40
 80091c0:	eba0 000a 	sub.w	r0, r0, sl
 80091c4:	fa03 f000 	lsl.w	r0, r3, r0
 80091c8:	9b04      	ldr	r3, [sp, #16]
 80091ca:	4303      	orrs	r3, r0
 80091cc:	3401      	adds	r4, #1
 80091ce:	9304      	str	r3, [sp, #16]
 80091d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d4:	482c      	ldr	r0, [pc, #176]	; (8009288 <_vfiprintf_r+0x250>)
 80091d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091da:	2206      	movs	r2, #6
 80091dc:	f7f7 f810 	bl	8000200 <memchr>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d03f      	beq.n	8009264 <_vfiprintf_r+0x22c>
 80091e4:	4b29      	ldr	r3, [pc, #164]	; (800928c <_vfiprintf_r+0x254>)
 80091e6:	bb1b      	cbnz	r3, 8009230 <_vfiprintf_r+0x1f8>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	3307      	adds	r3, #7
 80091ec:	f023 0307 	bic.w	r3, r3, #7
 80091f0:	3308      	adds	r3, #8
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f6:	443b      	add	r3, r7
 80091f8:	9309      	str	r3, [sp, #36]	; 0x24
 80091fa:	e767      	b.n	80090cc <_vfiprintf_r+0x94>
 80091fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009200:	460c      	mov	r4, r1
 8009202:	2001      	movs	r0, #1
 8009204:	e7a5      	b.n	8009152 <_vfiprintf_r+0x11a>
 8009206:	2300      	movs	r3, #0
 8009208:	3401      	adds	r4, #1
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	4619      	mov	r1, r3
 800920e:	f04f 0c0a 	mov.w	ip, #10
 8009212:	4620      	mov	r0, r4
 8009214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009218:	3a30      	subs	r2, #48	; 0x30
 800921a:	2a09      	cmp	r2, #9
 800921c:	d903      	bls.n	8009226 <_vfiprintf_r+0x1ee>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0c5      	beq.n	80091ae <_vfiprintf_r+0x176>
 8009222:	9105      	str	r1, [sp, #20]
 8009224:	e7c3      	b.n	80091ae <_vfiprintf_r+0x176>
 8009226:	fb0c 2101 	mla	r1, ip, r1, r2
 800922a:	4604      	mov	r4, r0
 800922c:	2301      	movs	r3, #1
 800922e:	e7f0      	b.n	8009212 <_vfiprintf_r+0x1da>
 8009230:	ab03      	add	r3, sp, #12
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	462a      	mov	r2, r5
 8009236:	4b16      	ldr	r3, [pc, #88]	; (8009290 <_vfiprintf_r+0x258>)
 8009238:	a904      	add	r1, sp, #16
 800923a:	4630      	mov	r0, r6
 800923c:	f7fd ff52 	bl	80070e4 <_printf_float>
 8009240:	4607      	mov	r7, r0
 8009242:	1c78      	adds	r0, r7, #1
 8009244:	d1d6      	bne.n	80091f4 <_vfiprintf_r+0x1bc>
 8009246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009248:	07d9      	lsls	r1, r3, #31
 800924a:	d405      	bmi.n	8009258 <_vfiprintf_r+0x220>
 800924c:	89ab      	ldrh	r3, [r5, #12]
 800924e:	059a      	lsls	r2, r3, #22
 8009250:	d402      	bmi.n	8009258 <_vfiprintf_r+0x220>
 8009252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009254:	f7fd fdd4 	bl	8006e00 <__retarget_lock_release_recursive>
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	065b      	lsls	r3, r3, #25
 800925c:	f53f af12 	bmi.w	8009084 <_vfiprintf_r+0x4c>
 8009260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009262:	e711      	b.n	8009088 <_vfiprintf_r+0x50>
 8009264:	ab03      	add	r3, sp, #12
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	462a      	mov	r2, r5
 800926a:	4b09      	ldr	r3, [pc, #36]	; (8009290 <_vfiprintf_r+0x258>)
 800926c:	a904      	add	r1, sp, #16
 800926e:	4630      	mov	r0, r6
 8009270:	f7fe f9dc 	bl	800762c <_printf_i>
 8009274:	e7e4      	b.n	8009240 <_vfiprintf_r+0x208>
 8009276:	bf00      	nop
 8009278:	08009708 	.word	0x08009708
 800927c:	08009728 	.word	0x08009728
 8009280:	080096e8 	.word	0x080096e8
 8009284:	080099ba 	.word	0x080099ba
 8009288:	080099c4 	.word	0x080099c4
 800928c:	080070e5 	.word	0x080070e5
 8009290:	08009013 	.word	0x08009013
 8009294:	080099c0 	.word	0x080099c0

08009298 <__swbuf_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	460e      	mov	r6, r1
 800929c:	4614      	mov	r4, r2
 800929e:	4605      	mov	r5, r0
 80092a0:	b118      	cbz	r0, 80092aa <__swbuf_r+0x12>
 80092a2:	6983      	ldr	r3, [r0, #24]
 80092a4:	b90b      	cbnz	r3, 80092aa <__swbuf_r+0x12>
 80092a6:	f7fd fce7 	bl	8006c78 <__sinit>
 80092aa:	4b21      	ldr	r3, [pc, #132]	; (8009330 <__swbuf_r+0x98>)
 80092ac:	429c      	cmp	r4, r3
 80092ae:	d12b      	bne.n	8009308 <__swbuf_r+0x70>
 80092b0:	686c      	ldr	r4, [r5, #4]
 80092b2:	69a3      	ldr	r3, [r4, #24]
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	071a      	lsls	r2, r3, #28
 80092ba:	d52f      	bpl.n	800931c <__swbuf_r+0x84>
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	b36b      	cbz	r3, 800931c <__swbuf_r+0x84>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	6820      	ldr	r0, [r4, #0]
 80092c4:	1ac0      	subs	r0, r0, r3
 80092c6:	6963      	ldr	r3, [r4, #20]
 80092c8:	b2f6      	uxtb	r6, r6
 80092ca:	4283      	cmp	r3, r0
 80092cc:	4637      	mov	r7, r6
 80092ce:	dc04      	bgt.n	80092da <__swbuf_r+0x42>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f7ff fa46 	bl	8008764 <_fflush_r>
 80092d8:	bb30      	cbnz	r0, 8009328 <__swbuf_r+0x90>
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	3b01      	subs	r3, #1
 80092de:	60a3      	str	r3, [r4, #8]
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	6022      	str	r2, [r4, #0]
 80092e6:	701e      	strb	r6, [r3, #0]
 80092e8:	6963      	ldr	r3, [r4, #20]
 80092ea:	3001      	adds	r0, #1
 80092ec:	4283      	cmp	r3, r0
 80092ee:	d004      	beq.n	80092fa <__swbuf_r+0x62>
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	07db      	lsls	r3, r3, #31
 80092f4:	d506      	bpl.n	8009304 <__swbuf_r+0x6c>
 80092f6:	2e0a      	cmp	r6, #10
 80092f8:	d104      	bne.n	8009304 <__swbuf_r+0x6c>
 80092fa:	4621      	mov	r1, r4
 80092fc:	4628      	mov	r0, r5
 80092fe:	f7ff fa31 	bl	8008764 <_fflush_r>
 8009302:	b988      	cbnz	r0, 8009328 <__swbuf_r+0x90>
 8009304:	4638      	mov	r0, r7
 8009306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <__swbuf_r+0x9c>)
 800930a:	429c      	cmp	r4, r3
 800930c:	d101      	bne.n	8009312 <__swbuf_r+0x7a>
 800930e:	68ac      	ldr	r4, [r5, #8]
 8009310:	e7cf      	b.n	80092b2 <__swbuf_r+0x1a>
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <__swbuf_r+0xa0>)
 8009314:	429c      	cmp	r4, r3
 8009316:	bf08      	it	eq
 8009318:	68ec      	ldreq	r4, [r5, #12]
 800931a:	e7ca      	b.n	80092b2 <__swbuf_r+0x1a>
 800931c:	4621      	mov	r1, r4
 800931e:	4628      	mov	r0, r5
 8009320:	f000 f81a 	bl	8009358 <__swsetup_r>
 8009324:	2800      	cmp	r0, #0
 8009326:	d0cb      	beq.n	80092c0 <__swbuf_r+0x28>
 8009328:	f04f 37ff 	mov.w	r7, #4294967295
 800932c:	e7ea      	b.n	8009304 <__swbuf_r+0x6c>
 800932e:	bf00      	nop
 8009330:	08009708 	.word	0x08009708
 8009334:	08009728 	.word	0x08009728
 8009338:	080096e8 	.word	0x080096e8

0800933c <__ascii_wctomb>:
 800933c:	b149      	cbz	r1, 8009352 <__ascii_wctomb+0x16>
 800933e:	2aff      	cmp	r2, #255	; 0xff
 8009340:	bf85      	ittet	hi
 8009342:	238a      	movhi	r3, #138	; 0x8a
 8009344:	6003      	strhi	r3, [r0, #0]
 8009346:	700a      	strbls	r2, [r1, #0]
 8009348:	f04f 30ff 	movhi.w	r0, #4294967295
 800934c:	bf98      	it	ls
 800934e:	2001      	movls	r0, #1
 8009350:	4770      	bx	lr
 8009352:	4608      	mov	r0, r1
 8009354:	4770      	bx	lr
	...

08009358 <__swsetup_r>:
 8009358:	4b32      	ldr	r3, [pc, #200]	; (8009424 <__swsetup_r+0xcc>)
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	b125      	cbz	r5, 800936e <__swsetup_r+0x16>
 8009364:	69ab      	ldr	r3, [r5, #24]
 8009366:	b913      	cbnz	r3, 800936e <__swsetup_r+0x16>
 8009368:	4628      	mov	r0, r5
 800936a:	f7fd fc85 	bl	8006c78 <__sinit>
 800936e:	4b2e      	ldr	r3, [pc, #184]	; (8009428 <__swsetup_r+0xd0>)
 8009370:	429c      	cmp	r4, r3
 8009372:	d10f      	bne.n	8009394 <__swsetup_r+0x3c>
 8009374:	686c      	ldr	r4, [r5, #4]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800937c:	0719      	lsls	r1, r3, #28
 800937e:	d42c      	bmi.n	80093da <__swsetup_r+0x82>
 8009380:	06dd      	lsls	r5, r3, #27
 8009382:	d411      	bmi.n	80093a8 <__swsetup_r+0x50>
 8009384:	2309      	movs	r3, #9
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	f04f 30ff 	mov.w	r0, #4294967295
 8009392:	e03e      	b.n	8009412 <__swsetup_r+0xba>
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <__swsetup_r+0xd4>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <__swsetup_r+0x46>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7eb      	b.n	8009376 <__swsetup_r+0x1e>
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <__swsetup_r+0xd8>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7e6      	b.n	8009376 <__swsetup_r+0x1e>
 80093a8:	0758      	lsls	r0, r3, #29
 80093aa:	d512      	bpl.n	80093d2 <__swsetup_r+0x7a>
 80093ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ae:	b141      	cbz	r1, 80093c2 <__swsetup_r+0x6a>
 80093b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b4:	4299      	cmp	r1, r3
 80093b6:	d002      	beq.n	80093be <__swsetup_r+0x66>
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7fd fd49 	bl	8006e50 <_free_r>
 80093be:	2300      	movs	r3, #0
 80093c0:	6363      	str	r3, [r4, #52]	; 0x34
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	2300      	movs	r3, #0
 80093cc:	6063      	str	r3, [r4, #4]
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	f043 0308 	orr.w	r3, r3, #8
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	b94b      	cbnz	r3, 80093f2 <__swsetup_r+0x9a>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e8:	d003      	beq.n	80093f2 <__swsetup_r+0x9a>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4630      	mov	r0, r6
 80093ee:	f000 f84d 	bl	800948c <__smakebuf_r>
 80093f2:	89a0      	ldrh	r0, [r4, #12]
 80093f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f8:	f010 0301 	ands.w	r3, r0, #1
 80093fc:	d00a      	beq.n	8009414 <__swsetup_r+0xbc>
 80093fe:	2300      	movs	r3, #0
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	6963      	ldr	r3, [r4, #20]
 8009404:	425b      	negs	r3, r3
 8009406:	61a3      	str	r3, [r4, #24]
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b943      	cbnz	r3, 800941e <__swsetup_r+0xc6>
 800940c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009410:	d1ba      	bne.n	8009388 <__swsetup_r+0x30>
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	0781      	lsls	r1, r0, #30
 8009416:	bf58      	it	pl
 8009418:	6963      	ldrpl	r3, [r4, #20]
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	e7f4      	b.n	8009408 <__swsetup_r+0xb0>
 800941e:	2000      	movs	r0, #0
 8009420:	e7f7      	b.n	8009412 <__swsetup_r+0xba>
 8009422:	bf00      	nop
 8009424:	20000028 	.word	0x20000028
 8009428:	08009708 	.word	0x08009708
 800942c:	08009728 	.word	0x08009728
 8009430:	080096e8 	.word	0x080096e8

08009434 <abort>:
 8009434:	b508      	push	{r3, lr}
 8009436:	2006      	movs	r0, #6
 8009438:	f000 f890 	bl	800955c <raise>
 800943c:	2001      	movs	r0, #1
 800943e:	f7f8 fe55 	bl	80020ec <_exit>

08009442 <__swhatbuf_r>:
 8009442:	b570      	push	{r4, r5, r6, lr}
 8009444:	460e      	mov	r6, r1
 8009446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944a:	2900      	cmp	r1, #0
 800944c:	b096      	sub	sp, #88	; 0x58
 800944e:	4614      	mov	r4, r2
 8009450:	461d      	mov	r5, r3
 8009452:	da07      	bge.n	8009464 <__swhatbuf_r+0x22>
 8009454:	2300      	movs	r3, #0
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	89b3      	ldrh	r3, [r6, #12]
 800945a:	061a      	lsls	r2, r3, #24
 800945c:	d410      	bmi.n	8009480 <__swhatbuf_r+0x3e>
 800945e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009462:	e00e      	b.n	8009482 <__swhatbuf_r+0x40>
 8009464:	466a      	mov	r2, sp
 8009466:	f000 f895 	bl	8009594 <_fstat_r>
 800946a:	2800      	cmp	r0, #0
 800946c:	dbf2      	blt.n	8009454 <__swhatbuf_r+0x12>
 800946e:	9a01      	ldr	r2, [sp, #4]
 8009470:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009474:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009478:	425a      	negs	r2, r3
 800947a:	415a      	adcs	r2, r3
 800947c:	602a      	str	r2, [r5, #0]
 800947e:	e7ee      	b.n	800945e <__swhatbuf_r+0x1c>
 8009480:	2340      	movs	r3, #64	; 0x40
 8009482:	2000      	movs	r0, #0
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	b016      	add	sp, #88	; 0x58
 8009488:	bd70      	pop	{r4, r5, r6, pc}
	...

0800948c <__smakebuf_r>:
 800948c:	898b      	ldrh	r3, [r1, #12]
 800948e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009490:	079d      	lsls	r5, r3, #30
 8009492:	4606      	mov	r6, r0
 8009494:	460c      	mov	r4, r1
 8009496:	d507      	bpl.n	80094a8 <__smakebuf_r+0x1c>
 8009498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	6123      	str	r3, [r4, #16]
 80094a0:	2301      	movs	r3, #1
 80094a2:	6163      	str	r3, [r4, #20]
 80094a4:	b002      	add	sp, #8
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	ab01      	add	r3, sp, #4
 80094aa:	466a      	mov	r2, sp
 80094ac:	f7ff ffc9 	bl	8009442 <__swhatbuf_r>
 80094b0:	9900      	ldr	r1, [sp, #0]
 80094b2:	4605      	mov	r5, r0
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7fd fd1b 	bl	8006ef0 <_malloc_r>
 80094ba:	b948      	cbnz	r0, 80094d0 <__smakebuf_r+0x44>
 80094bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c0:	059a      	lsls	r2, r3, #22
 80094c2:	d4ef      	bmi.n	80094a4 <__smakebuf_r+0x18>
 80094c4:	f023 0303 	bic.w	r3, r3, #3
 80094c8:	f043 0302 	orr.w	r3, r3, #2
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	e7e3      	b.n	8009498 <__smakebuf_r+0xc>
 80094d0:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <__smakebuf_r+0x7c>)
 80094d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	6020      	str	r0, [r4, #0]
 80094d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094dc:	81a3      	strh	r3, [r4, #12]
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	6163      	str	r3, [r4, #20]
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	6120      	str	r0, [r4, #16]
 80094e6:	b15b      	cbz	r3, 8009500 <__smakebuf_r+0x74>
 80094e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 f863 	bl	80095b8 <_isatty_r>
 80094f2:	b128      	cbz	r0, 8009500 <__smakebuf_r+0x74>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f023 0303 	bic.w	r3, r3, #3
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	89a0      	ldrh	r0, [r4, #12]
 8009502:	4305      	orrs	r5, r0
 8009504:	81a5      	strh	r5, [r4, #12]
 8009506:	e7cd      	b.n	80094a4 <__smakebuf_r+0x18>
 8009508:	08006c11 	.word	0x08006c11

0800950c <_raise_r>:
 800950c:	291f      	cmp	r1, #31
 800950e:	b538      	push	{r3, r4, r5, lr}
 8009510:	4604      	mov	r4, r0
 8009512:	460d      	mov	r5, r1
 8009514:	d904      	bls.n	8009520 <_raise_r+0x14>
 8009516:	2316      	movs	r3, #22
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	f04f 30ff 	mov.w	r0, #4294967295
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009522:	b112      	cbz	r2, 800952a <_raise_r+0x1e>
 8009524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009528:	b94b      	cbnz	r3, 800953e <_raise_r+0x32>
 800952a:	4620      	mov	r0, r4
 800952c:	f000 f830 	bl	8009590 <_getpid_r>
 8009530:	462a      	mov	r2, r5
 8009532:	4601      	mov	r1, r0
 8009534:	4620      	mov	r0, r4
 8009536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953a:	f000 b817 	b.w	800956c <_kill_r>
 800953e:	2b01      	cmp	r3, #1
 8009540:	d00a      	beq.n	8009558 <_raise_r+0x4c>
 8009542:	1c59      	adds	r1, r3, #1
 8009544:	d103      	bne.n	800954e <_raise_r+0x42>
 8009546:	2316      	movs	r3, #22
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	2001      	movs	r0, #1
 800954c:	e7e7      	b.n	800951e <_raise_r+0x12>
 800954e:	2400      	movs	r4, #0
 8009550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009554:	4628      	mov	r0, r5
 8009556:	4798      	blx	r3
 8009558:	2000      	movs	r0, #0
 800955a:	e7e0      	b.n	800951e <_raise_r+0x12>

0800955c <raise>:
 800955c:	4b02      	ldr	r3, [pc, #8]	; (8009568 <raise+0xc>)
 800955e:	4601      	mov	r1, r0
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	f7ff bfd3 	b.w	800950c <_raise_r>
 8009566:	bf00      	nop
 8009568:	20000028 	.word	0x20000028

0800956c <_kill_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	; (800958c <_kill_r+0x20>)
 8009570:	2300      	movs	r3, #0
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	f7f8 fda7 	bl	80020cc <_kill>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	d102      	bne.n	8009588 <_kill_r+0x1c>
 8009582:	682b      	ldr	r3, [r5, #0]
 8009584:	b103      	cbz	r3, 8009588 <_kill_r+0x1c>
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	bd38      	pop	{r3, r4, r5, pc}
 800958a:	bf00      	nop
 800958c:	20001488 	.word	0x20001488

08009590 <_getpid_r>:
 8009590:	f7f8 bd94 	b.w	80020bc <_getpid>

08009594 <_fstat_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d07      	ldr	r5, [pc, #28]	; (80095b4 <_fstat_r+0x20>)
 8009598:	2300      	movs	r3, #0
 800959a:	4604      	mov	r4, r0
 800959c:	4608      	mov	r0, r1
 800959e:	4611      	mov	r1, r2
 80095a0:	602b      	str	r3, [r5, #0]
 80095a2:	f7f8 fdf2 	bl	800218a <_fstat>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	d102      	bne.n	80095b0 <_fstat_r+0x1c>
 80095aa:	682b      	ldr	r3, [r5, #0]
 80095ac:	b103      	cbz	r3, 80095b0 <_fstat_r+0x1c>
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	bd38      	pop	{r3, r4, r5, pc}
 80095b2:	bf00      	nop
 80095b4:	20001488 	.word	0x20001488

080095b8 <_isatty_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d06      	ldr	r5, [pc, #24]	; (80095d4 <_isatty_r+0x1c>)
 80095bc:	2300      	movs	r3, #0
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	602b      	str	r3, [r5, #0]
 80095c4:	f7f8 fdf1 	bl	80021aa <_isatty>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_isatty_r+0x1a>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_isatty_r+0x1a>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20001488 	.word	0x20001488

080095d8 <_init>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	bf00      	nop
 80095dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095de:	bc08      	pop	{r3}
 80095e0:	469e      	mov	lr, r3
 80095e2:	4770      	bx	lr

080095e4 <_fini>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr
