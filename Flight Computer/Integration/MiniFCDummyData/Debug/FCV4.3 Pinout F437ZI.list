
FCV4.3 Pinout F437ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800c2a8  0800c2a8  0001c2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7e4  0800c7e4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7e4  0800c7e4  0001c7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7ec  0800c7ec  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7ec  0800c7ec  0001c7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7f0  0800c7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800c7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00005804  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005a00  20005a00  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b2a8  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000481f  00000000  00000000  0004b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002058  00000000  00000000  0004fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ee8  00000000  00000000  00051d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000617a  00000000  00000000  00053c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d1f  00000000  00000000  00059db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcea9  00000000  00000000  0007cad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017997a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009d74  00000000  00000000  001799d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c28c 	.word	0x0800c28c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	0800c28c 	.word	0x0800c28c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f001 fa9a 	bl	80023fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f83c 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 fb60 	bl	8001590 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ed0:	f000 f8a6 	bl	8001020 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ed4:	f000 f8f6 	bl	80010c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ed8:	f000 f934 	bl	8001144 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000edc:	f000 f972 	bl	80011c4 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000ee0:	f000 f9b0 	bl	8001244 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000ee4:	f000 f9e4 	bl	80012b0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000ee8:	f000 fa18 	bl	800131c <MX_SPI5_Init>
  MX_TIM2_Init();
 8000eec:	f000 fa4c 	bl	8001388 <MX_TIM2_Init>
  MX_UART8_Init();
 8000ef0:	f000 faa2 	bl	8001438 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000ef4:	f000 faca 	bl	800148c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000ef8:	f000 faf2 	bl	80014e0 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000efc:	f000 fb1a 	bl	8001534 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f00:	f005 fd14 	bl	800692c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of radioShenanigan */
  radioShenaniganHandle = osThreadNew(StartDefaultTask, NULL, &radioShenanigan_attributes);
 8000f04:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <main+0x6c>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <main+0x70>)
 8000f0a:	f005 fd59 	bl	80069c0 <osThreadNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <main+0x74>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* creation of fakeSensors */
  fakeSensorsHandle = osThreadNew(StartFakeSensors, NULL, &fakeSensors_attributes);
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <main+0x78>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <main+0x7c>)
 8000f1a:	f005 fd51 	bl	80069c0 <osThreadNew>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <main+0x80>)
 8000f22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f24:	f005 fd26 	bl	8006974 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0x68>
 8000f2a:	bf00      	nop
 8000f2c:	0800c3a4 	.word	0x0800c3a4
 8000f30:	080018a1 	.word	0x080018a1
 8000f34:	20005714 	.word	0x20005714
 8000f38:	0800c3c8 	.word	0x0800c3c8
 8000f3c:	08001905 	.word	0x08001905
 8000f40:	200058a4 	.word	0x200058a4

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f008 fba4 	bl	80096a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <SystemClock_Config+0xd4>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a29      	ldr	r2, [pc, #164]	; (8001018 <SystemClock_Config+0xd4>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <SystemClock_Config+0xd4>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <SystemClock_Config+0xd8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <SystemClock_Config+0xd8>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <SystemClock_Config+0xd8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb2:	2310      	movs	r3, #16
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fc4:	23c0      	movs	r3, #192	; 0xc0
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fa85 	bl	80034e4 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000fe0:	f000 fd2a 	bl	8001a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fce8 	bl	80039d4 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800100a:	f000 fd15 	bl	8001a38 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <MX_ADC1_Init+0x9c>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_ADC1_Init+0xa0>)
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_ADC1_Init+0x98>)
 800106c:	2201      	movs	r2, #1
 800106e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_ADC1_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001080:	f001 fa22 	bl	80024c8 <HAL_ADC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 fcd5 	bl	8001a38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800108e:	2306      	movs	r3, #6
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_ADC1_Init+0x98>)
 80010a0:	f001 fa56 	bl	8002550 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010aa:	f000 fcc5 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20005474 	.word	0x20005474
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_I2C1_Init+0x74>)
 8001102:	f001 ff13 	bl	8002f2c <HAL_I2C_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800110c:	f000 fc94 	bl	8001a38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_I2C1_Init+0x74>)
 8001114:	f002 f84e 	bl	80031b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800111e:	f000 fc8b 	bl	8001a38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_I2C1_Init+0x74>)
 8001126:	f002 f881 	bl	800322c <HAL_I2CEx_ConfigDigitalFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001130:	f000 fc82 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20004fc4 	.word	0x20004fc4
 800113c:	40005400 	.word	0x40005400
 8001140:	000186a0 	.word	0x000186a0

08001144 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_I2C2_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <MX_I2C2_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <MX_I2C2_Init+0x7c>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_I2C2_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_I2C2_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C2_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001182:	f001 fed3 	bl	8002f2c <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 fc54 	bl	8001a38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4809      	ldr	r0, [pc, #36]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001194:	f002 f80e 	bl	80031b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800119e:	f000 fc4b 	bl	8001a38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_I2C2_Init+0x74>)
 80011a6:	f002 f841 	bl	800322c <HAL_I2CEx_ConfigDigitalFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 fc42 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20005420 	.word	0x20005420
 80011bc:	40005800 	.word	0x40005800
 80011c0:	000186a0 	.word	0x000186a0

080011c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_I2C3_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_I2C3_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_I2C3_Init+0x74>)
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <MX_I2C3_Init+0x7c>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_I2C3_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_I2C3_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_I2C3_Init+0x74>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_I2C3_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C3_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_I2C3_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C3_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_I2C3_Init+0x74>)
 8001202:	f001 fe93 	bl	8002f2c <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 fc14 	bl	8001a38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_I2C3_Init+0x74>)
 8001214:	f001 ffce 	bl	80031b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800121e:	f000 fc0b 	bl	8001a38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_I2C3_Init+0x74>)
 8001226:	f002 f801 	bl	800322c <HAL_I2CEx_ConfigDigitalFilter>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001230:	f000 fc02 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20004c7c 	.word	0x20004c7c
 800123c:	40005c00 	.word	0x40005c00
 8001240:	000186a0 	.word	0x000186a0

08001244 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_SPI2_Init+0x64>)
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <MX_SPI2_Init+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_SPI2_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_SPI2_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001274:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_SPI2_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_SPI2_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001290:	220a      	movs	r2, #10
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_SPI2_Init+0x64>)
 8001296:	f002 fdc9 	bl	8003e2c <HAL_SPI_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012a0:	f000 fbca 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20004cd0 	.word	0x20004cd0
 80012ac:	40003800 	.word	0x40003800

080012b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_SPI4_Init+0x64>)
 80012b6:	4a18      	ldr	r2, [pc, #96]	; (8001318 <MX_SPI4_Init+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_SPI4_Init+0x64>)
 80012bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_SPI4_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_SPI4_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_SPI4_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_SPI4_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_SPI4_Init+0x64>)
 80012dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_SPI4_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_SPI4_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_SPI4_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_SPI4_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_SPI4_Init+0x64>)
 80012fc:	220a      	movs	r2, #10
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_SPI4_Init+0x64>)
 8001302:	f002 fd93 	bl	8003e2c <HAL_SPI_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800130c:	f000 fb94 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200054bc 	.word	0x200054bc
 8001318:	40013400 	.word	0x40013400

0800131c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_SPI5_Init+0x64>)
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_SPI5_Init+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_SPI5_Init+0x64>)
 8001328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_SPI5_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_SPI5_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_SPI5_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_SPI5_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_SPI5_Init+0x64>)
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_SPI5_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_SPI5_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_SPI5_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <MX_SPI5_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_SPI5_Init+0x64>)
 8001368:	220a      	movs	r2, #10
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_SPI5_Init+0x64>)
 800136e:	f002 fd5d 	bl	8003e2c <HAL_SPI_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001378:	f000 fb5e 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20004f28 	.word	0x20004f28
 8001384:	40015000 	.word	0x40015000

08001388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_TIM2_Init+0xac>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <MX_TIM2_Init+0xac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_TIM2_Init+0xac>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_TIM2_Init+0xac>)
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_TIM2_Init+0xac>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_TIM2_Init+0xac>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <MX_TIM2_Init+0xac>)
 80013d4:	f003 fa26 	bl	8004824 <HAL_TIM_PWM_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013de:	f000 fb2b 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ea:	f107 0320 	add.w	r3, r7, #32
 80013ee:	4619      	mov	r1, r3
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <MX_TIM2_Init+0xac>)
 80013f2:	f003 fea9 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013fc:	f000 fb1c 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001400:	2360      	movs	r3, #96	; 0x60
 8001402:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2208      	movs	r2, #8
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM2_Init+0xac>)
 8001418:	f003 fb5c 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001422:	f000 fb09 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM2_Init+0xac>)
 8001428:	f000 fd28 	bl	8001e7c <HAL_TIM_MspPostInit>

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000585c 	.word	0x2000585c

08001438 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_UART8_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_UART8_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_UART8_Init+0x4c>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_UART8_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_UART8_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_UART8_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_UART8_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_UART8_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_UART8_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_UART8_Init+0x4c>)
 8001470:	f003 fefa 	bl	8005268 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 fadd 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20005718 	.word	0x20005718
 8001488:	40007c00 	.word	0x40007c00

0800148c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART3_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014c4:	f003 fed0 	bl	8005268 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 fab3 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20004f80 	.word	0x20004f80
 80014dc:	40004800 	.word	0x40004800

080014e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART6_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_USART6_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_USART6_UART_Init+0x4c>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART6_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART6_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART6_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART6_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART6_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART6_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART6_UART_Init+0x4c>)
 8001518:	f003 fea6 	bl	8005268 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001522:	f000 fa89 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000575c 	.word	0x2000575c
 8001530:	40011400 	.word	0x40011400

08001534 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800153e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2204      	movs	r2, #4
 8001544:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2202      	movs	r2, #2
 800154a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	2202      	movs	r2, #2
 8001556:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156c:	2201      	movs	r2, #1
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001578:	f001 fe97 	bl	80032aa <HAL_PCD_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 fa59 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20005018 	.word	0x20005018

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	4bb5      	ldr	r3, [pc, #724]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4ab4      	ldr	r2, [pc, #720]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4bb2      	ldr	r3, [pc, #712]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	623b      	str	r3, [r7, #32]
 80015c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	4bae      	ldr	r3, [pc, #696]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4aad      	ldr	r2, [pc, #692]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4bab      	ldr	r3, [pc, #684]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4ba7      	ldr	r3, [pc, #668]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4aa6      	ldr	r2, [pc, #664]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4ba4      	ldr	r3, [pc, #656]	; (8001880 <MX_GPIO_Init+0x2f0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4ba0      	ldr	r3, [pc, #640]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a9f      	ldr	r2, [pc, #636]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b9d      	ldr	r3, [pc, #628]	; (8001880 <MX_GPIO_Init+0x2f0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b99      	ldr	r3, [pc, #612]	; (8001880 <MX_GPIO_Init+0x2f0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a98      	ldr	r2, [pc, #608]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b96      	ldr	r3, [pc, #600]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b92      	ldr	r3, [pc, #584]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a91      	ldr	r2, [pc, #580]	; (8001880 <MX_GPIO_Init+0x2f0>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b8f      	ldr	r3, [pc, #572]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b8b      	ldr	r3, [pc, #556]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a8a      	ldr	r2, [pc, #552]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b88      	ldr	r3, [pc, #544]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b84      	ldr	r3, [pc, #528]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a83      	ldr	r2, [pc, #524]	; (8001880 <MX_GPIO_Init+0x2f0>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b81      	ldr	r3, [pc, #516]	; (8001880 <MX_GPIO_Init+0x2f0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f248 4184 	movw	r1, #33924	; 0x8484
 800168c:	487d      	ldr	r0, [pc, #500]	; (8001884 <MX_GPIO_Init+0x2f4>)
 800168e:	f001 fc33 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001698:	487b      	ldr	r0, [pc, #492]	; (8001888 <MX_GPIO_Init+0x2f8>)
 800169a:	f001 fc2d 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016a4:	4879      	ldr	r0, [pc, #484]	; (800188c <MX_GPIO_Init+0x2fc>)
 80016a6:	f001 fc27 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2108      	movs	r1, #8
 80016ae:	4878      	ldr	r0, [pc, #480]	; (8001890 <MX_GPIO_Init+0x300>)
 80016b0:	f001 fc22 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80016b4:	2200      	movs	r2, #0
 80016b6:	f645 213e 	movw	r1, #23102	; 0x5a3e
 80016ba:	4876      	ldr	r0, [pc, #472]	; (8001894 <MX_GPIO_Init+0x304>)
 80016bc:	f001 fc1c 	bl	8002ef8 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c6:	4874      	ldr	r0, [pc, #464]	; (8001898 <MX_GPIO_Init+0x308>)
 80016c8:	f001 fc16 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80016cc:	2200      	movs	r2, #0
 80016ce:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80016d2:	4872      	ldr	r0, [pc, #456]	; (800189c <MX_GPIO_Init+0x30c>)
 80016d4:	f001 fc10 	bl	8002ef8 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80016d8:	f248 4384 	movw	r3, #33924	; 0x8484
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4864      	ldr	r0, [pc, #400]	; (8001884 <MX_GPIO_Init+0x2f4>)
 80016f2:	f001 fa3d 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80016f6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	485e      	ldr	r0, [pc, #376]	; (8001888 <MX_GPIO_Init+0x2f8>)
 8001710:	f001 fa2e 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001714:	2301      	movs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001718:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	4858      	ldr	r0, [pc, #352]	; (800188c <MX_GPIO_Init+0x2fc>)
 800172a:	f001 fa21 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800172e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4851      	ldr	r0, [pc, #324]	; (800188c <MX_GPIO_Init+0x2fc>)
 8001748:	f001 fa12 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 800174c:	2308      	movs	r3, #8
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	484b      	ldr	r0, [pc, #300]	; (8001890 <MX_GPIO_Init+0x300>)
 8001764:	f001 fa04 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001768:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	4843      	ldr	r0, [pc, #268]	; (800188c <MX_GPIO_Init+0x2fc>)
 800177e:	f001 f9f7 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001782:	2302      	movs	r3, #2
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4840      	ldr	r0, [pc, #256]	; (8001898 <MX_GPIO_Init+0x308>)
 8001796:	f001 f9eb 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800179a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4836      	ldr	r0, [pc, #216]	; (8001888 <MX_GPIO_Init+0x2f8>)
 80017b0:	f001 f9de 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 80017b4:	f242 4301 	movw	r3, #9217	; 0x2401
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4832      	ldr	r0, [pc, #200]	; (8001894 <MX_GPIO_Init+0x304>)
 80017ca:	f001 f9d1 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80017ce:	f645 233e 	movw	r3, #23102	; 0x5a3e
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	482b      	ldr	r0, [pc, #172]	; (8001894 <MX_GPIO_Init+0x304>)
 80017e8:	f001 f9c2 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80017ec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4820      	ldr	r0, [pc, #128]	; (8001884 <MX_GPIO_Init+0x2f4>)
 8001802:	f001 f9b5 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	481e      	ldr	r0, [pc, #120]	; (8001898 <MX_GPIO_Init+0x308>)
 8001820:	f001 f9a6 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001824:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4817      	ldr	r0, [pc, #92]	; (800189c <MX_GPIO_Init+0x30c>)
 800183e:	f001 f997 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <MX_GPIO_Init+0x30c>)
 8001858:	f001 f98a 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 800185c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001862:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <MX_GPIO_Init+0x304>)
 8001874:	f001 f97c 	bl	8002b70 <HAL_GPIO_Init>

}
 8001878:	bf00      	nop
 800187a:	3738      	adds	r7, #56	; 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40021000 	.word	0x40021000
 8001888:	40021400 	.word	0x40021400
 800188c:	40020800 	.word	0x40020800
 8001890:	40020000 	.word	0x40020000
 8001894:	40021800 	.word	0x40021800
 8001898:	40020400 	.word	0x40020400
 800189c:	40020c00 	.word	0x40020c00

080018a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint16_t friends[] = { 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2 };
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <StartDefaultTask+0x58>)
 80018aa:	f107 040c 	add.w	r4, r7, #12
 80018ae:	461d      	mov	r5, r3
 80018b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018b8:	e884 0003 	stmia.w	r4, {r0, r1}
	int i = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {
	  nbOfFriends = friends[i%12];
 80018c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <StartDefaultTask+0x5c>)
 80018c4:	fb83 2301 	smull	r2, r3, r3, r1
 80018c8:	105a      	asrs	r2, r3, #1
 80018ca:	17cb      	asrs	r3, r1, #31
 80018cc:	1ad2      	subs	r2, r2, r3
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	1aca      	subs	r2, r1, r3
 80018d8:	0053      	lsls	r3, r2, #1
 80018da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018de:	4413      	add	r3, r2
 80018e0:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <StartDefaultTask+0x60>)
 80018e6:	801a      	strh	r2, [r3, #0]
	  i++;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    osDelay(150);
 80018ee:	2096      	movs	r0, #150	; 0x96
 80018f0:	f005 f8f8 	bl	8006ae4 <osDelay>
	  nbOfFriends = friends[i%12];
 80018f4:	e7e4      	b.n	80018c0 <StartDefaultTask+0x20>
 80018f6:	bf00      	nop
 80018f8:	0800c2c4 	.word	0x0800c2c4
 80018fc:	2aaaaaab 	.word	0x2aaaaaab
 8001900:	20000218 	.word	0x20000218

08001904 <StartFakeSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeSensors */
void StartFakeSensors(void *argument)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	b0b5      	sub	sp, #212	; 0xd4
 8001908:	af12      	add	r7, sp, #72	; 0x48
 800190a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartFakeSensors */
  /* Infinite loop */
	char buffer[100];
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001912:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001916:	f001 faef 	bl	8002ef8 <HAL_GPIO_WritePin>
	set_hspi(hspi2);
 800191a:	4c39      	ldr	r4, [pc, #228]	; (8001a00 <StartFakeSensors+0xfc>)
 800191c:	4668      	mov	r0, sp
 800191e:	f104 0310 	add.w	r3, r4, #16
 8001922:	2248      	movs	r2, #72	; 0x48
 8001924:	4619      	mov	r1, r3
 8001926:	f007 fead 	bl	8009684 <memcpy>
 800192a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800192e:	f004 fa79 	bl	8005e24 <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 8001932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001936:	4833      	ldr	r0, [pc, #204]	; (8001a04 <StartFakeSensors+0x100>)
 8001938:	f004 fa1c 	bl	8005d74 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 800193c:	2108      	movs	r1, #8
 800193e:	4832      	ldr	r0, [pc, #200]	; (8001a08 <StartFakeSensors+0x104>)
 8001940:	f004 fa2e 	bl	8005da0 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8001944:	2104      	movs	r1, #4
 8001946:	4830      	ldr	r0, [pc, #192]	; (8001a08 <StartFakeSensors+0x104>)
 8001948:	f004 fa40 	bl	8005dcc <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 800194c:	2110      	movs	r1, #16
 800194e:	482e      	ldr	r0, [pc, #184]	; (8001a08 <StartFakeSensors+0x104>)
 8001950:	f004 fa52 	bl	8005df8 <set_DIO1_pin>
	Tx_setup();
 8001954:	f004 fa7e 	bl	8005e54 <Tx_setup>
  for(;;)
  {
	  // S,ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LAT,LONG,MIN,SEC,SUBSEC,STATE,CONT,E
	  sprintf(buffer, "S,%f,%f,%f,%f,%f,%f,%f,%f,%f,%i,%i,%i,%i,%i,E", nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends,nbOfFriends);
 8001958:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <StartFakeSensors+0x108>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	469c      	mov	ip, r3
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <StartFakeSensors+0x108>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	469e      	mov	lr, r3
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <StartFakeSensors+0x108>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <StartFakeSensors+0x108>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <StartFakeSensors+0x108>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	461c      	mov	r4, r3
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <StartFakeSensors+0x108>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	461d      	mov	r5, r3
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <StartFakeSensors+0x108>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	461e      	mov	r6, r3
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <StartFakeSensors+0x108>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <StartFakeSensors+0x108>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <StartFakeSensors+0x108>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <StartFakeSensors+0x108>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <StartFakeSensors+0x108>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <StartFakeSensors+0x108>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <StartFakeSensors+0x108>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80019ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	930a      	str	r3, [sp, #40]	; 0x28
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	9309      	str	r3, [sp, #36]	; 0x24
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	9308      	str	r3, [sp, #32]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	9307      	str	r3, [sp, #28]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	9306      	str	r3, [sp, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	9305      	str	r3, [sp, #20]
 80019c8:	9604      	str	r6, [sp, #16]
 80019ca:	9503      	str	r5, [sp, #12]
 80019cc:	9402      	str	r4, [sp, #8]
 80019ce:	9101      	str	r1, [sp, #4]
 80019d0:	9200      	str	r2, [sp, #0]
 80019d2:	4673      	mov	r3, lr
 80019d4:	4662      	mov	r2, ip
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <StartFakeSensors+0x10c>)
 80019d8:	f008 fbf8 	bl	800a1cc <siprintf>
	  // HAL_UART_Transmit(&huart3, buffer, sizeof(char) * strlen(buffer), HAL_MAX_DELAY);
	  TxProtocol(buffer, strlen(buffer));
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fc05 	bl	80001f0 <strlen>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fb43 	bl	800607c <TxProtocol>

    osDelay(100);
 80019f6:	2064      	movs	r0, #100	; 0x64
 80019f8:	f005 f874 	bl	8006ae4 <osDelay>
  {
 80019fc:	e7ac      	b.n	8001958 <StartFakeSensors+0x54>
 80019fe:	bf00      	nop
 8001a00:	20004cd0 	.word	0x20004cd0
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	20000218 	.word	0x20000218
 8001a10:	0800c2dc 	.word	0x0800c2dc

08001a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a26:	f000 fd0b 	bl	8002440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40001000 	.word	0x40001000

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_MspInit+0x54>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_MspInit+0x54>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_MspInit+0x54>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_MspInit+0x54>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_MspInit+0x54>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_MspInit+0x54>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	210f      	movs	r1, #15
 8001a86:	f06f 0001 	mvn.w	r0, #1
 8001a8a:	f001 f847 	bl	8002b1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_ADC_MspInit+0x7c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d127      	bne.n	8001b0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_ADC_MspInit+0x80>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_ADC_MspInit+0x80>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_ADC_MspInit+0x80>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_ADC_MspInit+0x80>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_ADC_MspInit+0x80>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_ADC_MspInit+0x80>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001af6:	2340      	movs	r3, #64	; 0x40
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afa:	2303      	movs	r3, #3
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_ADC_MspInit+0x84>)
 8001b0a:	f001 f831 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40012000 	.word	0x40012000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_I2C_MspInit+0x190>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12d      	bne.n	8001ba2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b74:	2304      	movs	r3, #4
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	484f      	ldr	r0, [pc, #316]	; (8001cbc <HAL_I2C_MspInit+0x198>)
 8001b80:	f000 fff6 	bl	8002b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a4a      	ldr	r2, [pc, #296]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ba0:	e083      	b.n	8001caa <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <HAL_I2C_MspInit+0x19c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d12d      	bne.n	8001c08 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a40      	ldr	r2, [pc, #256]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	2312      	movs	r3, #18
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4835      	ldr	r0, [pc, #212]	; (8001cbc <HAL_I2C_MspInit+0x198>)
 8001be6:	f000 ffc3 	bl	8002b70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
}
 8001c06:	e050      	b.n	8001caa <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_I2C_MspInit+0x1a0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d14b      	bne.n	8001caa <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c50:	2312      	movs	r3, #18
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <HAL_I2C_MspInit+0x1a4>)
 8001c68:	f000 ff82 	bl	8002b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c72:	2312      	movs	r3, #18
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4810      	ldr	r0, [pc, #64]	; (8001ccc <HAL_I2C_MspInit+0x1a8>)
 8001c8a:	f000 ff71 	bl	8002b70 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_I2C_MspInit+0x194>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
}
 8001caa:	bf00      	nop
 8001cac:	3738      	adds	r7, #56	; 0x38
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40005400 	.word	0x40005400
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40005800 	.word	0x40005800
 8001cc4:	40005c00 	.word	0x40005c00
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_SPI_MspInit+0x150>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12d      	bne.n	8001d4e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a43      	ldr	r2, [pc, #268]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4838      	ldr	r0, [pc, #224]	; (8001e28 <HAL_SPI_MspInit+0x158>)
 8001d48:	f000 ff12 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001d4c:	e064      	b.n	8001e18 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a36      	ldr	r2, [pc, #216]	; (8001e2c <HAL_SPI_MspInit+0x15c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d12d      	bne.n	8001db4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d66:	6453      	str	r3, [r2, #68]	; 0x44
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6313      	str	r3, [r2, #48]	; 0x30
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001d90:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001da2:	2305      	movs	r3, #5
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	4820      	ldr	r0, [pc, #128]	; (8001e30 <HAL_SPI_MspInit+0x160>)
 8001dae:	f000 fedf 	bl	8002b70 <HAL_GPIO_Init>
}
 8001db2:	e031      	b.n	8001e18 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_SPI_MspInit+0x164>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12c      	bne.n	8001e18 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_SPI_MspInit+0x154>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001df6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <HAL_SPI_MspInit+0x168>)
 8001e14:	f000 feac 	bl	8002b70 <HAL_GPIO_Init>
}
 8001e18:	bf00      	nop
 8001e1a:	3738      	adds	r7, #56	; 0x38
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40003800 	.word	0x40003800
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40013400 	.word	0x40013400
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40015000 	.word	0x40015000
 8001e38:	40021400 	.word	0x40021400

08001e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d10d      	bne.n	8001e6a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d11d      	bne.n	8001eda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_TIM_MspPostInit+0x68>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_TIM_MspPostInit+0x68>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_TIM_MspPostInit+0x68>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <HAL_TIM_MspPostInit+0x6c>)
 8001ed6:	f000 fe4b 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08e      	sub	sp, #56	; 0x38
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4b      	ldr	r2, [pc, #300]	; (8002038 <HAL_UART_MspInit+0x14c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12c      	bne.n	8001f68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	4b43      	ldr	r3, [pc, #268]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a42      	ldr	r2, [pc, #264]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f34:	f043 0310 	orr.w	r3, r3, #16
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8001f46:	2303      	movs	r3, #3
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f56:	2308      	movs	r3, #8
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4837      	ldr	r0, [pc, #220]	; (8002040 <HAL_UART_MspInit+0x154>)
 8001f62:	f000 fe05 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f66:	e063      	b.n	8002030 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a35      	ldr	r2, [pc, #212]	; (8002044 <HAL_UART_MspInit+0x158>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12d      	bne.n	8001fce <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a30      	ldr	r2, [pc, #192]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a29      	ldr	r2, [pc, #164]	; (800203c <HAL_UART_MspInit+0x150>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_UART_MspInit+0x150>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8001faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4820      	ldr	r0, [pc, #128]	; (8002048 <HAL_UART_MspInit+0x15c>)
 8001fc8:	f000 fdd2 	bl	8002b70 <HAL_GPIO_Init>
}
 8001fcc:	e030      	b.n	8002030 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_UART_MspInit+0x160>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d12b      	bne.n	8002030 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_UART_MspInit+0x150>)
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_UART_MspInit+0x150>)
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_UART_MspInit+0x150>)
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_UART_MspInit+0x150>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_UART_MspInit+0x150>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6313      	str	r3, [r2, #48]	; 0x30
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_UART_MspInit+0x150>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002010:	23c0      	movs	r3, #192	; 0xc0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002020:	2308      	movs	r3, #8
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	4619      	mov	r1, r3
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <HAL_UART_MspInit+0x164>)
 800202c:	f000 fda0 	bl	8002b70 <HAL_GPIO_Init>
}
 8002030:	bf00      	nop
 8002032:	3738      	adds	r7, #56	; 0x38
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40007c00 	.word	0x40007c00
 800203c:	40023800 	.word	0x40023800
 8002040:	40021000 	.word	0x40021000
 8002044:	40004800 	.word	0x40004800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40011400 	.word	0x40011400
 8002050:	40020800 	.word	0x40020800

08002054 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002074:	d13f      	bne.n	80020f6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_PCD_MspInit+0xac>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <HAL_PCD_MspInit+0xac>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_PCD_MspInit+0xac>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4817      	ldr	r0, [pc, #92]	; (8002104 <HAL_PCD_MspInit+0xb0>)
 80020a8:	f000 fd62 	bl	8002b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020be:	230a      	movs	r3, #10
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	480e      	ldr	r0, [pc, #56]	; (8002104 <HAL_PCD_MspInit+0xb0>)
 80020ca:	f000 fd51 	bl	8002b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_PCD_MspInit+0xac>)
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <HAL_PCD_MspInit+0xac>)
 80020d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d8:	6353      	str	r3, [r2, #52]	; 0x34
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_PCD_MspInit+0xac>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_PCD_MspInit+0xac>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_PCD_MspInit+0xac>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	2036      	movs	r0, #54	; 0x36
 800211e:	f000 fcfd 	bl	8002b1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002122:	2036      	movs	r0, #54	; 0x36
 8002124:	f000 fd16 	bl	8002b54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_InitTick+0xa0>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_InitTick+0xa0>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_InitTick+0xa0>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002144:	f107 0210 	add.w	r2, r7, #16
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fe3a 	bl	8003dc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002154:	f001 fe10 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8002158:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	4a13      	ldr	r2, [pc, #76]	; (80021ac <HAL_InitTick+0xa4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	3b01      	subs	r3, #1
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_InitTick+0xa8>)
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <HAL_InitTick+0xac>)
 800216c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_InitTick+0xa8>)
 8002170:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002174:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002176:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_InitTick+0xa8>)
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_InitTick+0xa8>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_InitTick+0xa8>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <HAL_InitTick+0xa8>)
 800218a:	f002 fa81 	bl	8004690 <HAL_TIM_Base_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002194:	4806      	ldr	r0, [pc, #24]	; (80021b0 <HAL_InitTick+0xa8>)
 8002196:	f002 fad5 	bl	8004744 <HAL_TIM_Base_Start_IT>
 800219a:	4603      	mov	r3, r0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3730      	adds	r7, #48	; 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40023800 	.word	0x40023800
 80021ac:	431bde83 	.word	0x431bde83
 80021b0:	20005964 	.word	0x20005964
 80021b4:	40001000 	.word	0x40001000

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM6_DAC_IRQHandler+0x10>)
 80021ea:	f002 fb6a 	bl	80048c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20005964 	.word	0x20005964

080021f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_kill>:

int _kill(int pid, int sig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002212:	f007 f903 	bl	800941c <__errno>
 8002216:	4603      	mov	r3, r0
 8002218:	2216      	movs	r2, #22
 800221a:	601a      	str	r2, [r3, #0]
	return -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_exit>:

void _exit (int status)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ffe7 	bl	8002208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800223a:	e7fe      	b.n	800223a <_exit+0x12>

0800223c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e00a      	b.n	8002264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800224e:	f3af 8000 	nop.w
 8002252:	4601      	mov	r1, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	b2ca      	uxtb	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	dbf0      	blt.n	800224e <_read+0x12>
	}

return len;
 800226c:	687b      	ldr	r3, [r7, #4]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e009      	b.n	800229c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf1      	blt.n	8002288 <_write+0x12>
	}
	return len;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_close>:

int _close(int file)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d6:	605a      	str	r2, [r3, #4]
	return 0;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_isatty>:

int _isatty(int file)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
	return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <_sbrk+0x5c>)
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <_sbrk+0x60>)
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <_sbrk+0x64>)
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <_sbrk+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	d207      	bcs.n	8002358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002348:	f007 f868 	bl	800941c <__errno>
 800234c:	4603      	mov	r3, r0
 800234e:	220c      	movs	r2, #12
 8002350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	e009      	b.n	800236c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <_sbrk+0x64>)
 8002368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20030000 	.word	0x20030000
 8002378:	00000400 	.word	0x00000400
 800237c:	2000021c 	.word	0x2000021c
 8002380:	20005a00 	.word	0x20005a00

08002384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <SystemInit+0x20>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <SystemInit+0x20>)
 8002390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023ac:	480d      	ldr	r0, [pc, #52]	; (80023e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ae:	490e      	ldr	r1, [pc, #56]	; (80023e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b4:	e002      	b.n	80023bc <LoopCopyDataInit>

080023b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ba:	3304      	adds	r3, #4

080023bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c0:	d3f9      	bcc.n	80023b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023c4:	4c0b      	ldr	r4, [pc, #44]	; (80023f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c8:	e001      	b.n	80023ce <LoopFillZerobss>

080023ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023cc:	3204      	adds	r2, #4

080023ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d0:	d3fb      	bcc.n	80023ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023d2:	f7ff ffd7 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d6:	f007 f91d 	bl	8009614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023da:	f7fe fd71 	bl	8000ec0 <main>
  bx  lr    
 80023de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80023ec:	0800c7f4 	.word	0x0800c7f4
  ldr r2, =_sbss
 80023f0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80023f4:	20005a00 	.word	0x20005a00

080023f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f8:	e7fe      	b.n	80023f8 <ADC_IRQHandler>
	...

080023fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_Init+0x40>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_Init+0x40>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_Init+0x40>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 fb6e 	bl	8002b06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242a:	200f      	movs	r0, #15
 800242c:	f7ff fe6c 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fb08 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	200059ac 	.word	0x200059ac

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200059ac 	.word	0x200059ac

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000008 	.word	0x20000008

080024c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e033      	b.n	8002546 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fad8 	bl	8001a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800250e:	f023 0302 	bic.w	r3, r3, #2
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f94a 	bl	80027b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
 8002536:	e001      	b.n	800253c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_ADC_ConfigChannel+0x1c>
 8002568:	2302      	movs	r3, #2
 800256a:	e113      	b.n	8002794 <HAL_ADC_ConfigChannel+0x244>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b09      	cmp	r3, #9
 800257a:	d925      	bls.n	80025c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68d9      	ldr	r1, [r3, #12]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	3b1e      	subs	r3, #30
 8002592:	2207      	movs	r2, #7
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43da      	mvns	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	400a      	ands	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68d9      	ldr	r1, [r3, #12]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	4603      	mov	r3, r0
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4403      	add	r3, r0
 80025ba:	3b1e      	subs	r3, #30
 80025bc:	409a      	lsls	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	e022      	b.n	800260e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6919      	ldr	r1, [r3, #16]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	2207      	movs	r2, #7
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	400a      	ands	r2, r1
 80025ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4403      	add	r3, r0
 8002604:	409a      	lsls	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d824      	bhi.n	8002660 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b05      	subs	r3, #5
 8002628:	221f      	movs	r2, #31
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	400a      	ands	r2, r1
 8002636:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	4618      	mov	r0, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	3b05      	subs	r3, #5
 8002652:	fa00 f203 	lsl.w	r2, r0, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
 800265e:	e04c      	b.n	80026fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d824      	bhi.n	80026b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3b23      	subs	r3, #35	; 0x23
 800267a:	221f      	movs	r2, #31
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43da      	mvns	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	400a      	ands	r2, r1
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	4618      	mov	r0, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b23      	subs	r3, #35	; 0x23
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
 80026b0:	e023      	b.n	80026fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b41      	subs	r3, #65	; 0x41
 80026c4:	221f      	movs	r2, #31
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	400a      	ands	r2, r1
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	3b41      	subs	r3, #65	; 0x41
 80026ee:	fa00 f203 	lsl.w	r2, r0, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_ADC_ConfigChannel+0x250>)
 80026fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <HAL_ADC_ConfigChannel+0x254>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d10f      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x1d8>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b12      	cmp	r3, #18
 800270e:	d10b      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_ADC_ConfigChannel+0x254>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d12b      	bne.n	800278a <HAL_ADC_ConfigChannel+0x23a>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_ADC_ConfigChannel+0x258>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d003      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x1f4>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b11      	cmp	r3, #17
 8002742:	d122      	bne.n	800278a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_ADC_ConfigChannel+0x258>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d111      	bne.n	800278a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_ADC_ConfigChannel+0x25c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_ADC_ConfigChannel+0x260>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	0c9a      	lsrs	r2, r3, #18
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800277c:	e002      	b.n	8002784 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3b01      	subs	r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f9      	bne.n	800277e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40012300 	.word	0x40012300
 80027a4:	40012000 	.word	0x40012000
 80027a8:	10000012 	.word	0x10000012
 80027ac:	20000000 	.word	0x20000000
 80027b0:	431bde83 	.word	0x431bde83

080027b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027bc:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <ADC_Init+0x1f0>)
 80027be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	021a      	lsls	r2, r3, #8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800280c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <ADC_Init+0x1f4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800285a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800287c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6899      	ldr	r1, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	e00f      	b.n	80028b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0202 	bic.w	r2, r2, #2
 80028c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7e1b      	ldrb	r3, [r3, #24]
 80028cc:	005a      	lsls	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01b      	beq.n	8002918 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	3b01      	subs	r3, #1
 800290c:	035a      	lsls	r2, r3, #13
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	e007      	b.n	8002928 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002926:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	3b01      	subs	r3, #1
 8002944:	051a      	lsls	r2, r3, #20
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800295c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800296a:	025a      	lsls	r2, r3, #9
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	029a      	lsls	r2, r3, #10
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40012300 	.word	0x40012300
 80029a8:	0f000001 	.word	0x0f000001

080029ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029de:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	60d3      	str	r3, [r2, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <__NVIC_GetPriorityGrouping+0x18>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	f003 0307 	and.w	r3, r3, #7
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	db0b      	blt.n	8002a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	f003 021f 	and.w	r2, r3, #31
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <__NVIC_EnableIRQ+0x38>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2001      	movs	r0, #1
 8002a32:	fa00 f202 	lsl.w	r2, r0, r2
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
         );
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff4c 	bl	80029ac <__NVIC_SetPriorityGrouping>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2e:	f7ff ff61 	bl	80029f4 <__NVIC_GetPriorityGrouping>
 8002b32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	6978      	ldr	r0, [r7, #20]
 8002b3a:	f7ff ffb1 	bl	8002aa0 <NVIC_EncodePriority>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff80 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff54 	bl	8002a10 <__NVIC_EnableIRQ>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e177      	b.n	8002e7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8166 	bne.w	8002e76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d005      	beq.n	8002bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d130      	bne.n	8002c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 0201 	and.w	r2, r3, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d017      	beq.n	8002c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d123      	bne.n	8002cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80c0 	beq.w	8002e76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b66      	ldr	r3, [pc, #408]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	6453      	str	r3, [r2, #68]	; 0x44
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a61      	ldr	r2, [pc, #388]	; (8002e98 <HAL_GPIO_Init+0x328>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_GPIO_Init+0x32c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d037      	beq.n	8002dae <HAL_GPIO_Init+0x23e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a57      	ldr	r2, [pc, #348]	; (8002ea0 <HAL_GPIO_Init+0x330>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d031      	beq.n	8002daa <HAL_GPIO_Init+0x23a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a56      	ldr	r2, [pc, #344]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02b      	beq.n	8002da6 <HAL_GPIO_Init+0x236>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a55      	ldr	r2, [pc, #340]	; (8002ea8 <HAL_GPIO_Init+0x338>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d025      	beq.n	8002da2 <HAL_GPIO_Init+0x232>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a54      	ldr	r2, [pc, #336]	; (8002eac <HAL_GPIO_Init+0x33c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01f      	beq.n	8002d9e <HAL_GPIO_Init+0x22e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a53      	ldr	r2, [pc, #332]	; (8002eb0 <HAL_GPIO_Init+0x340>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d019      	beq.n	8002d9a <HAL_GPIO_Init+0x22a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x344>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x226>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <HAL_GPIO_Init+0x348>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00d      	beq.n	8002d92 <HAL_GPIO_Init+0x222>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a50      	ldr	r2, [pc, #320]	; (8002ebc <HAL_GPIO_Init+0x34c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <HAL_GPIO_Init+0x21e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4f      	ldr	r2, [pc, #316]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_GPIO_Init+0x21a>
 8002d86:	2309      	movs	r3, #9
 8002d88:	e012      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002d8a:	230a      	movs	r3, #10
 8002d8c:	e010      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	e00e      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002d92:	2307      	movs	r3, #7
 8002d94:	e00c      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e00a      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	e008      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002da2:	2303      	movs	r3, #3
 8002da4:	e004      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e002      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_GPIO_Init+0x240>
 8002dae:	2300      	movs	r3, #0
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f002 0203 	and.w	r2, r2, #3
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	4093      	lsls	r3, r2
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc0:	4935      	ldr	r1, [pc, #212]	; (8002e98 <HAL_GPIO_Init+0x328>)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df2:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002df8:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1c:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e46:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_GPIO_Init+0x354>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	f67f ae84 	bls.w	8002b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40021400 	.word	0x40021400
 8002eb4:	40021800 	.word	0x40021800
 8002eb8:	40021c00 	.word	0x40021c00
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40022400 	.word	0x40022400
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e001      	b.n	8002eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e12b      	b.n	8003196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe fde6 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f90:	f000 fef2 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8002f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a81      	ldr	r2, [pc, #516]	; (80031a0 <HAL_I2C_Init+0x274>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d807      	bhi.n	8002fb0 <HAL_I2C_Init+0x84>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a80      	ldr	r2, [pc, #512]	; (80031a4 <HAL_I2C_Init+0x278>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e006      	b.n	8002fbe <HAL_I2C_Init+0x92>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a7d      	ldr	r2, [pc, #500]	; (80031a8 <HAL_I2C_Init+0x27c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0e7      	b.n	8003196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a78      	ldr	r2, [pc, #480]	; (80031ac <HAL_I2C_Init+0x280>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9b      	lsrs	r3, r3, #18
 8002fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a6a      	ldr	r2, [pc, #424]	; (80031a0 <HAL_I2C_Init+0x274>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d802      	bhi.n	8003000 <HAL_I2C_Init+0xd4>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	e009      	b.n	8003014 <HAL_I2C_Init+0xe8>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_I2C_Init+0x284>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	3301      	adds	r3, #1
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003026:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	495c      	ldr	r1, [pc, #368]	; (80031a0 <HAL_I2C_Init+0x274>)
 8003030:	428b      	cmp	r3, r1
 8003032:	d819      	bhi.n	8003068 <HAL_I2C_Init+0x13c>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e59      	subs	r1, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003042:	1c59      	adds	r1, r3, #1
 8003044:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003048:	400b      	ands	r3, r1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_I2C_Init+0x138>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e59      	subs	r1, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fbb1 f3f3 	udiv	r3, r1, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	e051      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 8003064:	2304      	movs	r3, #4
 8003066:	e04f      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d111      	bne.n	8003094 <HAL_I2C_Init+0x168>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e012      	b.n	80030ba <HAL_I2C_Init+0x18e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Init+0x196>
 80030be:	2301      	movs	r3, #1
 80030c0:	e022      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10e      	bne.n	80030e8 <HAL_I2C_Init+0x1bc>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e58      	subs	r0, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	440b      	add	r3, r1
 80030d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e6:	e00f      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e58      	subs	r0, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	0099      	lsls	r1, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	6809      	ldr	r1, [r1, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6911      	ldr	r1, [r2, #16]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68d2      	ldr	r2, [r2, #12]
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	430b      	orrs	r3, r1
 800314a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	000186a0 	.word	0x000186a0
 80031a4:	001e847f 	.word	0x001e847f
 80031a8:	003d08ff 	.word	0x003d08ff
 80031ac:	431bde83 	.word	0x431bde83
 80031b0:	10624dd3 	.word	0x10624dd3

080031b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d129      	bne.n	800321e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2224      	movs	r2, #36	; 0x24
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0210 	bic.w	r2, r2, #16
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d12a      	bne.n	800329c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2224      	movs	r2, #36	; 0x24
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	f023 030f 	bic.w	r3, r3, #15
 800326c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b29a      	uxth	r2, r3
 8003272:	89fb      	ldrh	r3, [r7, #14]
 8003274:	4313      	orrs	r3, r2
 8003276:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	89fa      	ldrh	r2, [r7, #14]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ac:	b08f      	sub	sp, #60	; 0x3c
 80032ae:	af0a      	add	r7, sp, #40	; 0x28
 80032b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e10f      	b.n	80034dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe febc 	bl	8002054 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2203      	movs	r2, #3
 80032e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fa2b 	bl	8005756 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	687e      	ldr	r6, [r7, #4]
 8003308:	466d      	mov	r5, sp
 800330a:	f106 0410 	add.w	r4, r6, #16
 800330e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003316:	e894 0003 	ldmia.w	r4, {r0, r1}
 800331a:	e885 0003 	stmia.w	r5, {r0, r1}
 800331e:	1d33      	adds	r3, r6, #4
 8003320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	f002 f9b6 	bl	8005694 <USB_CoreInit>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0d0      	b.n	80034dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fa19 	bl	8005778 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	e04a      	b.n	80033e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	333d      	adds	r3, #61	; 0x3d
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	333c      	adds	r3, #60	; 0x3c
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	b298      	uxth	r0, r3
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3342      	adds	r3, #66	; 0x42
 8003388:	4602      	mov	r2, r0
 800338a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	333f      	adds	r3, #63	; 0x3f
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	; 0x44
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3348      	adds	r3, #72	; 0x48
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3350      	adds	r3, #80	; 0x50
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	3301      	adds	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d3af      	bcc.n	800334c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e044      	b.n	800347c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3301      	adds	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d3b5      	bcc.n	80033f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	687e      	ldr	r6, [r7, #4]
 800348e:	466d      	mov	r5, sp
 8003490:	f106 0410 	add.w	r4, r6, #16
 8003494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800349a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800349c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034a4:	1d33      	adds	r3, r6, #4
 80034a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f002 f9b1 	bl	8005810 <USB_DevInit>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e00d      	b.n	80034dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fb5c 	bl	8005b92 <USB_DevDisconnect>

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e264      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003502:	4ba3      	ldr	r3, [pc, #652]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4ba0      	ldr	r3, [pc, #640]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b9d      	ldr	r3, [pc, #628]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b99      	ldr	r3, [pc, #612]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e23f      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b91      	ldr	r3, [pc, #580]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a90      	ldr	r2, [pc, #576]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b8b      	ldr	r3, [pc, #556]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a8a      	ldr	r2, [pc, #552]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b88      	ldr	r3, [pc, #544]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a87      	ldr	r2, [pc, #540]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b84      	ldr	r3, [pc, #528]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a83      	ldr	r2, [pc, #524]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b81      	ldr	r3, [pc, #516]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a80      	ldr	r2, [pc, #512]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe ff64 	bl	8002468 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe ff60 	bl	8002468 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e204      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe ff50 	bl	8002468 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe ff4c 	bl	8002468 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1f0      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d063      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1c4      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4952      	ldr	r1, [pc, #328]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_OscConfig+0x2b0>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe ff05 	bl	8002468 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe ff01 	bl	8002468 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1a5      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4940      	ldr	r1, [pc, #256]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <HAL_RCC_OscConfig+0x2b0>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fee4 	bl	8002468 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe fee0 	bl	8002468 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e184      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d030      	beq.n	8003730 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCC_OscConfig+0x2b4>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fe fec4 	bl	8002468 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e4:	f7fe fec0 	bl	8002468 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e164      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
 8003702:	e015      	b.n	8003730 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x2b4>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7fe fead 	bl	8002468 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe fea9 	bl	8002468 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e14d      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a0 	beq.w	800387e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe fe6f 	bl	8002468 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e011      	b.n	80037b2 <HAL_RCC_OscConfig+0x2ce>
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	42470000 	.word	0x42470000
 8003798:	42470e80 	.word	0x42470e80
 800379c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fe62 	bl	8002468 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e106      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCC_OscConfig+0x4e4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	e01c      	b.n	800380e <HAL_RCC_OscConfig+0x32a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x312>
 80037dc:	4b7b      	ldr	r3, [pc, #492]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a7a      	ldr	r2, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	4b78      	ldr	r3, [pc, #480]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a77      	ldr	r2, [pc, #476]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0x32a>
 80037f6:	4b75      	ldr	r3, [pc, #468]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a74      	ldr	r2, [pc, #464]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	4b72      	ldr	r3, [pc, #456]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a71      	ldr	r2, [pc, #452]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d015      	beq.n	8003842 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fe27 	bl	8002468 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fe23 	bl	8002468 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0c5      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ee      	beq.n	800381e <HAL_RCC_OscConfig+0x33a>
 8003840:	e014      	b.n	800386c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fe fe11 	bl	8002468 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fe fe0d 	bl	8002468 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0af      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	4b5a      	ldr	r3, [pc, #360]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ee      	bne.n	800384a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a55      	ldr	r2, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 809b 	beq.w	80039be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d05c      	beq.n	800394e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d141      	bne.n	8003920 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe fde1 	bl	8002468 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fe fddd 	bl	8002468 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e081      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	3b01      	subs	r3, #1
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fdb6 	bl	8002468 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fdb2 	bl	8002468 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e056      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x41c>
 800391e:	e04e      	b.n	80039be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fd9f 	bl	8002468 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fd9b 	bl	8002468 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e03f      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x44a>
 800394c:	e037      	b.n	80039be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e032      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d028      	beq.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d121      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d11a      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003990:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40007000 	.word	0x40007000
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470060 	.word	0x42470060

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0cc      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b68      	ldr	r3, [pc, #416]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d90c      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d044      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d119      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e067      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe fcd0 	bl	8002468 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe fccc 	bl	8002468 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e04f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d20c      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fac4 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	0800c3ec 	.word	0x0800c3ec
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	20000004 	.word	0x20000004

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb8:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	f200 80bd 	bhi.w	8003d44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	e0b7      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b61      	ldr	r3, [pc, #388]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bd6:	60bb      	str	r3, [r7, #8]
       break;
 8003bd8:	e0b7      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b60      	ldr	r3, [pc, #384]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bdc:	60bb      	str	r3, [r7, #8]
      break;
 8003bde:	e0b4      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b5d      	ldr	r3, [pc, #372]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bea:	4b5b      	ldr	r3, [pc, #364]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d04d      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b58      	ldr	r3, [pc, #352]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	ea02 0800 	and.w	r8, r2, r0
 8003c0e:	ea03 0901 	and.w	r9, r3, r1
 8003c12:	4640      	mov	r0, r8
 8003c14:	4649      	mov	r1, r9
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	014b      	lsls	r3, r1, #5
 8003c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c24:	0142      	lsls	r2, r0, #5
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	ebb0 0008 	subs.w	r0, r0, r8
 8003c2e:	eb61 0109 	sbc.w	r1, r1, r9
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	018b      	lsls	r3, r1, #6
 8003c3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c40:	0182      	lsls	r2, r0, #6
 8003c42:	1a12      	subs	r2, r2, r0
 8003c44:	eb63 0301 	sbc.w	r3, r3, r1
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	00d9      	lsls	r1, r3, #3
 8003c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c56:	00d0      	lsls	r0, r2, #3
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	eb12 0208 	adds.w	r2, r2, r8
 8003c60:	eb43 0309 	adc.w	r3, r3, r9
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	0299      	lsls	r1, r3, #10
 8003c6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c72:	0290      	lsls	r0, r2, #10
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	f7fc ffa0 	bl	8000bc8 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e04a      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	ea02 0400 	and.w	r4, r2, r0
 8003caa:	ea03 0501 	and.w	r5, r3, r1
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	014b      	lsls	r3, r1, #5
 8003cbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cc0:	0142      	lsls	r2, r0, #5
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	1b00      	subs	r0, r0, r4
 8003cc8:	eb61 0105 	sbc.w	r1, r1, r5
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	018b      	lsls	r3, r1, #6
 8003cd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cda:	0182      	lsls	r2, r0, #6
 8003cdc:	1a12      	subs	r2, r2, r0
 8003cde:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	00d9      	lsls	r1, r3, #3
 8003cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cf0:	00d0      	lsls	r0, r2, #3
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	1912      	adds	r2, r2, r4
 8003cf8:	eb45 0303 	adc.w	r3, r5, r3
 8003cfc:	f04f 0000 	mov.w	r0, #0
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	0299      	lsls	r1, r3, #10
 8003d06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d0a:	0290      	lsls	r0, r2, #10
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	f7fc ff54 	bl	8000bc8 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	60bb      	str	r3, [r7, #8]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d46:	60bb      	str	r3, [r7, #8]
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000000 	.word	0x20000000

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	0800c3fc 	.word	0x0800c3fc

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da4:	f7ff ffdc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	0800c3fc 	.word	0x0800c3fc

08003dc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_RCC_GetClockConfig+0x60>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	601a      	str	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40023c00 	.word	0x40023c00

08003e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e07b      	b.n	8003f36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d108      	bne.n	8003e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4e:	d009      	beq.n	8003e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	61da      	str	r2, [r3, #28]
 8003e56:	e005      	b.n	8003e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fd ff26 	bl	8001cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	ea42 0103 	orr.w	r1, r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	f003 0104 	and.w	r1, r3, #4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f003 0210 	and.w	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b088      	sub	sp, #32
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_SPI_Transmit+0x22>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e126      	b.n	80041ae <HAL_SPI_Transmit+0x270>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f68:	f7fe fa7e 	bl	8002468 <HAL_GetTick>
 8003f6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f82:	e10b      	b.n	800419c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Transmit+0x52>
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f94:	e102      	b.n	800419c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fdc:	d10f      	bne.n	8003ffe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d007      	beq.n	800401c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004024:	d14b      	bne.n	80040be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_Transmit+0xf6>
 800402e:	8afb      	ldrh	r3, [r7, #22]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d13e      	bne.n	80040b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	1c9a      	adds	r2, r3, #2
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004058:	e02b      	b.n	80040b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d112      	bne.n	800408e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	86da      	strh	r2, [r3, #54]	; 0x36
 800408c:	e011      	b.n	80040b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800408e:	f7fe f9eb 	bl	8002468 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d803      	bhi.n	80040a6 <HAL_SPI_Transmit+0x168>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d102      	bne.n	80040ac <HAL_SPI_Transmit+0x16e>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040b0:	e074      	b.n	800419c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ce      	bne.n	800405a <HAL_SPI_Transmit+0x11c>
 80040bc:	e04c      	b.n	8004158 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_Transmit+0x18e>
 80040c6:	8afb      	ldrh	r3, [r7, #22]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d140      	bne.n	800414e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	7812      	ldrb	r2, [r2, #0]
 80040d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040f2:	e02c      	b.n	800414e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d113      	bne.n	800412a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	86da      	strh	r2, [r3, #54]	; 0x36
 8004128:	e011      	b.n	800414e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800412a:	f7fe f99d 	bl	8002468 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d803      	bhi.n	8004142 <HAL_SPI_Transmit+0x204>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d102      	bne.n	8004148 <HAL_SPI_Transmit+0x20a>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800414c:	e026      	b.n	800419c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1cd      	bne.n	80040f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fa55 	bl	800460c <SPI_EndRxTxTransaction>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e000      	b.n	800419c <HAL_SPI_Transmit+0x25e>
  }

error:
 800419a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b08c      	sub	sp, #48	; 0x30
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041c4:	2301      	movs	r3, #1
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x26>
 80041d8:	2302      	movs	r3, #2
 80041da:	e18a      	b.n	80044f2 <HAL_SPI_TransmitReceive+0x33c>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e4:	f7fe f940 	bl	8002468 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004202:	2b01      	cmp	r3, #1
 8004204:	d00f      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x70>
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420c:	d107      	bne.n	800421e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <HAL_SPI_TransmitReceive+0x68>
 8004216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800421a:	2b04      	cmp	r3, #4
 800421c:	d003      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004224:	e15b      	b.n	80044de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x82>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x82>
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800423e:	e14e      	b.n	80044de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b04      	cmp	r3, #4
 800424a:	d003      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2205      	movs	r2, #5
 8004250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	887a      	ldrh	r2, [r7, #2]
 8004276:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d007      	beq.n	80042a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b0:	d178      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x10a>
 80042ba:	8b7b      	ldrh	r3, [r7, #26]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d166      	bne.n	800438e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	881a      	ldrh	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e4:	e053      	b.n	800438e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d11b      	bne.n	800432c <HAL_SPI_TransmitReceive+0x176>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <HAL_SPI_TransmitReceive+0x176>
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d113      	bne.n	800432c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	881a      	ldrh	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	1c9a      	adds	r2, r3, #2
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d119      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1b8>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d014      	beq.n	800436e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	b292      	uxth	r2, r2
 8004350:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800436a:	2301      	movs	r3, #1
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800436e:	f7fe f87b 	bl	8002468 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437a:	429a      	cmp	r2, r3
 800437c:	d807      	bhi.n	800438e <HAL_SPI_TransmitReceive+0x1d8>
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d003      	beq.n	800438e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800438c:	e0a7      	b.n	80044de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1a6      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x130>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1a1      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x130>
 80043a2:	e07c      	b.n	800449e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0x1fc>
 80043ac:	8b7b      	ldrh	r3, [r7, #26]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d16b      	bne.n	800448a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d8:	e057      	b.n	800448a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d11c      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x26c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d017      	beq.n	8004422 <HAL_SPI_TransmitReceive+0x26c>
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d114      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	7812      	ldrb	r2, [r2, #0]
 8004404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d119      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x2ae>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d014      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004460:	2301      	movs	r3, #1
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004464:	f7fe f800 	bl	8002468 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004470:	429a      	cmp	r2, r3
 8004472:	d803      	bhi.n	800447c <HAL_SPI_TransmitReceive+0x2c6>
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d102      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x2cc>
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004488:	e029      	b.n	80044de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1a2      	bne.n	80043da <HAL_SPI_TransmitReceive+0x224>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d19d      	bne.n	80043da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f8b2 	bl	800460c <SPI_EndRxTxTransaction>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80044ba:	e010      	b.n	80044de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	e000      	b.n	80044de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3730      	adds	r7, #48	; 0x30
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800450c:	f7fd ffac 	bl	8002468 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800451c:	f7fd ffa4 	bl	8002468 <HAL_GetTick>
 8004520:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004522:	4b39      	ldr	r3, [pc, #228]	; (8004608 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	015b      	lsls	r3, r3, #5
 8004528:	0d1b      	lsrs	r3, r3, #20
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004532:	e054      	b.n	80045de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d050      	beq.n	80045de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800453c:	f7fd ff94 	bl	8002468 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	429a      	cmp	r2, r3
 800454a:	d902      	bls.n	8004552 <SPI_WaitFlagStateUntilTimeout+0x56>
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d13d      	bne.n	80045ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004560:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800456a:	d111      	bne.n	8004590 <SPI_WaitFlagStateUntilTimeout+0x94>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004574:	d004      	beq.n	8004580 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457e:	d107      	bne.n	8004590 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004598:	d10f      	bne.n	80045ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e017      	b.n	80045fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3b01      	subs	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d19b      	bne.n	8004534 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000000 	.word	0x20000000

0800460c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004618:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <SPI_EndRxTxTransaction+0x7c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1b      	ldr	r2, [pc, #108]	; (800468c <SPI_EndRxTxTransaction+0x80>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	0d5b      	lsrs	r3, r3, #21
 8004624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004636:	d112      	bne.n	800465e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff ff5a 	bl	80044fc <SPI_WaitFlagStateUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00f      	b.n	800467e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3b01      	subs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d0f2      	beq.n	800465e <SPI_EndRxTxTransaction+0x52>
 8004678:	e000      	b.n	800467c <SPI_EndRxTxTransaction+0x70>
        break;
 800467a:	bf00      	nop
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000000 	.word	0x20000000
 800468c:	165e9f81 	.word	0x165e9f81

08004690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e041      	b.n	8004726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f839 	bl	800472e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 faea 	bl	8004ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d001      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e04e      	b.n	80047fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a23      	ldr	r2, [pc, #140]	; (8004808 <HAL_TIM_Base_Start_IT+0xc4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x80>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d01d      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <HAL_TIM_Base_Start_IT+0xc8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <HAL_TIM_Base_Start_IT+0xcc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_TIM_Base_Start_IT+0xd0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x80>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_TIM_Base_Start_IT+0xd4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x80>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_TIM_Base_Start_IT+0xd8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x80>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_TIM_Base_Start_IT+0xdc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d111      	bne.n	80047e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d010      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e007      	b.n	80047f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40010400 	.word	0x40010400
 800481c:	40014000 	.word	0x40014000
 8004820:	40001800 	.word	0x40001800

08004824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e041      	b.n	80048ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd faf6 	bl	8001e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f000 fa20 	bl	8004ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d122      	bne.n	800491e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d11b      	bne.n	800491e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0202 	mvn.w	r2, #2
 80048ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9b1 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 800490a:	e005      	b.n	8004918 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9a3 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9b4 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b04      	cmp	r3, #4
 800492a:	d122      	bne.n	8004972 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d11b      	bne.n	8004972 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0204 	mvn.w	r2, #4
 8004942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f987 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 800495e:	e005      	b.n	800496c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f979 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f98a 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b08      	cmp	r3, #8
 800497e:	d122      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b08      	cmp	r3, #8
 800498c:	d11b      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f06f 0208 	mvn.w	r2, #8
 8004996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2204      	movs	r2, #4
 800499c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f95d 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 80049b2:	e005      	b.n	80049c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f94f 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f960 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d122      	bne.n	8004a1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d11b      	bne.n	8004a1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0210 	mvn.w	r2, #16
 80049ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2208      	movs	r2, #8
 80049f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f933 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004a06:	e005      	b.n	8004a14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f925 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f936 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d10e      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f06f 0201 	mvn.w	r2, #1
 8004a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fc ffe7 	bl	8001a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d10e      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b80      	cmp	r3, #128	; 0x80
 8004a60:	d107      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fbf1 	bl	8005254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d10e      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8fb 	bl	8004c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d10e      	bne.n	8004aca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0220 	mvn.w	r2, #32
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fbbb 	bl	8005240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0ae      	b.n	8004c50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	f200 809f 	bhi.w	8004c40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b3d 	.word	0x08004b3d
 8004b0c:	08004c41 	.word	0x08004c41
 8004b10:	08004c41 	.word	0x08004c41
 8004b14:	08004c41 	.word	0x08004c41
 8004b18:	08004b7d 	.word	0x08004b7d
 8004b1c:	08004c41 	.word	0x08004c41
 8004b20:	08004c41 	.word	0x08004c41
 8004b24:	08004c41 	.word	0x08004c41
 8004b28:	08004bbf 	.word	0x08004bbf
 8004b2c:	08004c41 	.word	0x08004c41
 8004b30:	08004c41 	.word	0x08004c41
 8004b34:	08004c41 	.word	0x08004c41
 8004b38:	08004bff 	.word	0x08004bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f950 	bl	8004de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0208 	orr.w	r2, r2, #8
 8004b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0204 	bic.w	r2, r2, #4
 8004b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6999      	ldr	r1, [r3, #24]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	619a      	str	r2, [r3, #24]
      break;
 8004b7a:	e064      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f9a0 	bl	8004ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	619a      	str	r2, [r3, #24]
      break;
 8004bbc:	e043      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f9f5 	bl	8004fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0208 	orr.w	r2, r2, #8
 8004bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0204 	bic.w	r2, r2, #4
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69d9      	ldr	r1, [r3, #28]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	61da      	str	r2, [r3, #28]
      break;
 8004bfc:	e023      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fa49 	bl	800509c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69d9      	ldr	r1, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	021a      	lsls	r2, r3, #8
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	61da      	str	r2, [r3, #28]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
      break;
 8004c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a40      	ldr	r2, [pc, #256]	; (8004dbc <TIM_Base_SetConfig+0x114>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d00f      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a3d      	ldr	r2, [pc, #244]	; (8004dc0 <TIM_Base_SetConfig+0x118>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a3c      	ldr	r2, [pc, #240]	; (8004dc4 <TIM_Base_SetConfig+0x11c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a3b      	ldr	r2, [pc, #236]	; (8004dc8 <TIM_Base_SetConfig+0x120>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a3a      	ldr	r2, [pc, #232]	; (8004dcc <TIM_Base_SetConfig+0x124>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d108      	bne.n	8004cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2f      	ldr	r2, [pc, #188]	; (8004dbc <TIM_Base_SetConfig+0x114>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02b      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d027      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a2c      	ldr	r2, [pc, #176]	; (8004dc0 <TIM_Base_SetConfig+0x118>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d023      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <TIM_Base_SetConfig+0x11c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01f      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <TIM_Base_SetConfig+0x120>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01b      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <TIM_Base_SetConfig+0x124>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d017      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <TIM_Base_SetConfig+0x128>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a27      	ldr	r2, [pc, #156]	; (8004dd4 <TIM_Base_SetConfig+0x12c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00f      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a26      	ldr	r2, [pc, #152]	; (8004dd8 <TIM_Base_SetConfig+0x130>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a25      	ldr	r2, [pc, #148]	; (8004ddc <TIM_Base_SetConfig+0x134>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a24      	ldr	r2, [pc, #144]	; (8004de0 <TIM_Base_SetConfig+0x138>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a23      	ldr	r2, [pc, #140]	; (8004de4 <TIM_Base_SetConfig+0x13c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <TIM_Base_SetConfig+0x114>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0xf8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <TIM_Base_SetConfig+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d103      	bne.n	8004da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	615a      	str	r2, [r3, #20]
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40010400 	.word	0x40010400
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800
 8004ddc:	40001800 	.word	0x40001800
 8004de0:	40001c00 	.word	0x40001c00
 8004de4:	40002000 	.word	0x40002000

08004de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f023 0201 	bic.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0303 	bic.w	r3, r3, #3
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 0302 	bic.w	r3, r3, #2
 8004e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <TIM_OC1_SetConfig+0xd8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_OC1_SetConfig+0x64>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <TIM_OC1_SetConfig+0xdc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0308 	bic.w	r3, r3, #8
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <TIM_OC1_SetConfig+0xd8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC1_SetConfig+0x8e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <TIM_OC1_SetConfig+0xdc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d111      	bne.n	8004e9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40010400 	.word	0x40010400

08004ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0210 	bic.w	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0320 	bic.w	r3, r3, #32
 8004f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a22      	ldr	r2, [pc, #136]	; (8004fac <TIM_OC2_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_OC2_SetConfig+0x68>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <TIM_OC2_SetConfig+0xe8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10d      	bne.n	8004f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	; (8004fac <TIM_OC2_SetConfig+0xe4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC2_SetConfig+0x94>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <TIM_OC2_SetConfig+0xe8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d113      	bne.n	8004f84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a21      	ldr	r2, [pc, #132]	; (8005094 <TIM_OC3_SetConfig+0xe0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0x66>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a20      	ldr	r2, [pc, #128]	; (8005098 <TIM_OC3_SetConfig+0xe4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10d      	bne.n	8005036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a16      	ldr	r2, [pc, #88]	; (8005094 <TIM_OC3_SetConfig+0xe0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC3_SetConfig+0x92>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <TIM_OC3_SetConfig+0xe4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d113      	bne.n	800506e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800504c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	621a      	str	r2, [r3, #32]
}
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40010000 	.word	0x40010000
 8005098:	40010400 	.word	0x40010400

0800509c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <TIM_OC4_SetConfig+0xa4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC4_SetConfig+0x68>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a11      	ldr	r2, [pc, #68]	; (8005144 <TIM_OC4_SetConfig+0xa8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d109      	bne.n	8005118 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	019b      	lsls	r3, r3, #6
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40010000 	.word	0x40010000
 8005144:	40010400 	.word	0x40010400

08005148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e05a      	b.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a21      	ldr	r2, [pc, #132]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ac:	d01d      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1b      	ldr	r2, [pc, #108]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1a      	ldr	r2, [pc, #104]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10c      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e03f      	b.n	80052fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc fe2c 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2224      	movs	r2, #36	; 0x24
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f829 	bl	8005304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	b09f      	sub	sp, #124	; 0x7c
 800530a:	af00      	add	r7, sp, #0
 800530c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800530e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	68d9      	ldr	r1, [r3, #12]
 800531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	ea40 0301 	orr.w	r3, r0, r1
 8005324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	431a      	orrs	r2, r3
 8005330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	431a      	orrs	r2, r3
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	4313      	orrs	r3, r2
 800533c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005348:	f021 010c 	bic.w	r1, r1, #12
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005352:	430b      	orrs	r3, r1
 8005354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	6999      	ldr	r1, [r3, #24]
 8005364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	ea40 0301 	orr.w	r3, r0, r1
 800536c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800536e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4bc5      	ldr	r3, [pc, #788]	; (8005688 <UART_SetConfig+0x384>)
 8005374:	429a      	cmp	r2, r3
 8005376:	d004      	beq.n	8005382 <UART_SetConfig+0x7e>
 8005378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4bc3      	ldr	r3, [pc, #780]	; (800568c <UART_SetConfig+0x388>)
 800537e:	429a      	cmp	r2, r3
 8005380:	d103      	bne.n	800538a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005382:	f7fe fd0d 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8005386:	6778      	str	r0, [r7, #116]	; 0x74
 8005388:	e002      	b.n	8005390 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800538a:	f7fe fcf5 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 800538e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005398:	f040 80b6 	bne.w	8005508 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800539c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800539e:	461c      	mov	r4, r3
 80053a0:	f04f 0500 	mov.w	r5, #0
 80053a4:	4622      	mov	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	6439      	str	r1, [r7, #64]	; 0x40
 80053ac:	415b      	adcs	r3, r3
 80053ae:	647b      	str	r3, [r7, #68]	; 0x44
 80053b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053b4:	1912      	adds	r2, r2, r4
 80053b6:	eb45 0303 	adc.w	r3, r5, r3
 80053ba:	f04f 0000 	mov.w	r0, #0
 80053be:	f04f 0100 	mov.w	r1, #0
 80053c2:	00d9      	lsls	r1, r3, #3
 80053c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053c8:	00d0      	lsls	r0, r2, #3
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	1911      	adds	r1, r2, r4
 80053d0:	6639      	str	r1, [r7, #96]	; 0x60
 80053d2:	416b      	adcs	r3, r5
 80053d4:	667b      	str	r3, [r7, #100]	; 0x64
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	461a      	mov	r2, r3
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	1891      	adds	r1, r2, r2
 80053e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80053e4:	415b      	adcs	r3, r3
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053f0:	f7fb fbea 	bl	8000bc8 <__aeabi_uldivmod>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4ba5      	ldr	r3, [pc, #660]	; (8005690 <UART_SetConfig+0x38c>)
 80053fa:	fba3 2302 	umull	r2, r3, r3, r2
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	011e      	lsls	r6, r3, #4
 8005402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005404:	461c      	mov	r4, r3
 8005406:	f04f 0500 	mov.w	r5, #0
 800540a:	4622      	mov	r2, r4
 800540c:	462b      	mov	r3, r5
 800540e:	1891      	adds	r1, r2, r2
 8005410:	6339      	str	r1, [r7, #48]	; 0x30
 8005412:	415b      	adcs	r3, r3
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
 8005416:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800541a:	1912      	adds	r2, r2, r4
 800541c:	eb45 0303 	adc.w	r3, r5, r3
 8005420:	f04f 0000 	mov.w	r0, #0
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	00d9      	lsls	r1, r3, #3
 800542a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800542e:	00d0      	lsls	r0, r2, #3
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	1911      	adds	r1, r2, r4
 8005436:	65b9      	str	r1, [r7, #88]	; 0x58
 8005438:	416b      	adcs	r3, r5
 800543a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800543c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	461a      	mov	r2, r3
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	1891      	adds	r1, r2, r2
 8005448:	62b9      	str	r1, [r7, #40]	; 0x28
 800544a:	415b      	adcs	r3, r3
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005452:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005456:	f7fb fbb7 	bl	8000bc8 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4b8c      	ldr	r3, [pc, #560]	; (8005690 <UART_SetConfig+0x38c>)
 8005460:	fba3 1302 	umull	r1, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	2164      	movs	r1, #100	; 0x64
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	3332      	adds	r3, #50	; 0x32
 8005472:	4a87      	ldr	r2, [pc, #540]	; (8005690 <UART_SetConfig+0x38c>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005480:	441e      	add	r6, r3
 8005482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005484:	4618      	mov	r0, r3
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	1894      	adds	r4, r2, r2
 8005490:	623c      	str	r4, [r7, #32]
 8005492:	415b      	adcs	r3, r3
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
 8005496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800549a:	1812      	adds	r2, r2, r0
 800549c:	eb41 0303 	adc.w	r3, r1, r3
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	f04f 0500 	mov.w	r5, #0
 80054a8:	00dd      	lsls	r5, r3, #3
 80054aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054ae:	00d4      	lsls	r4, r2, #3
 80054b0:	4622      	mov	r2, r4
 80054b2:	462b      	mov	r3, r5
 80054b4:	1814      	adds	r4, r2, r0
 80054b6:	653c      	str	r4, [r7, #80]	; 0x50
 80054b8:	414b      	adcs	r3, r1
 80054ba:	657b      	str	r3, [r7, #84]	; 0x54
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	461a      	mov	r2, r3
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	1891      	adds	r1, r2, r2
 80054c8:	61b9      	str	r1, [r7, #24]
 80054ca:	415b      	adcs	r3, r3
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054d6:	f7fb fb77 	bl	8000bc8 <__aeabi_uldivmod>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4b6c      	ldr	r3, [pc, #432]	; (8005690 <UART_SetConfig+0x38c>)
 80054e0:	fba3 1302 	umull	r1, r3, r3, r2
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	2164      	movs	r1, #100	; 0x64
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	3332      	adds	r3, #50	; 0x32
 80054f2:	4a67      	ldr	r2, [pc, #412]	; (8005690 <UART_SetConfig+0x38c>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	f003 0207 	and.w	r2, r3, #7
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4432      	add	r2, r6
 8005504:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005506:	e0b9      	b.n	800567c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550a:	461c      	mov	r4, r3
 800550c:	f04f 0500 	mov.w	r5, #0
 8005510:	4622      	mov	r2, r4
 8005512:	462b      	mov	r3, r5
 8005514:	1891      	adds	r1, r2, r2
 8005516:	6139      	str	r1, [r7, #16]
 8005518:	415b      	adcs	r3, r3
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005520:	1912      	adds	r2, r2, r4
 8005522:	eb45 0303 	adc.w	r3, r5, r3
 8005526:	f04f 0000 	mov.w	r0, #0
 800552a:	f04f 0100 	mov.w	r1, #0
 800552e:	00d9      	lsls	r1, r3, #3
 8005530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005534:	00d0      	lsls	r0, r2, #3
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	eb12 0804 	adds.w	r8, r2, r4
 800553e:	eb43 0905 	adc.w	r9, r3, r5
 8005542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	008b      	lsls	r3, r1, #2
 8005556:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800555a:	0082      	lsls	r2, r0, #2
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	f7fb fb32 	bl	8000bc8 <__aeabi_uldivmod>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4b49      	ldr	r3, [pc, #292]	; (8005690 <UART_SetConfig+0x38c>)
 800556a:	fba3 2302 	umull	r2, r3, r3, r2
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	011e      	lsls	r6, r3, #4
 8005572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005574:	4618      	mov	r0, r3
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	1894      	adds	r4, r2, r2
 8005580:	60bc      	str	r4, [r7, #8]
 8005582:	415b      	adcs	r3, r3
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800558a:	1812      	adds	r2, r2, r0
 800558c:	eb41 0303 	adc.w	r3, r1, r3
 8005590:	f04f 0400 	mov.w	r4, #0
 8005594:	f04f 0500 	mov.w	r5, #0
 8005598:	00dd      	lsls	r5, r3, #3
 800559a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800559e:	00d4      	lsls	r4, r2, #3
 80055a0:	4622      	mov	r2, r4
 80055a2:	462b      	mov	r3, r5
 80055a4:	1814      	adds	r4, r2, r0
 80055a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80055a8:	414b      	adcs	r3, r1
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	008b      	lsls	r3, r1, #2
 80055c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055c4:	0082      	lsls	r2, r0, #2
 80055c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055ca:	f7fb fafd 	bl	8000bc8 <__aeabi_uldivmod>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4b2f      	ldr	r3, [pc, #188]	; (8005690 <UART_SetConfig+0x38c>)
 80055d4:	fba3 1302 	umull	r1, r3, r3, r2
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	2164      	movs	r1, #100	; 0x64
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	3332      	adds	r3, #50	; 0x32
 80055e6:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <UART_SetConfig+0x38c>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f2:	441e      	add	r6, r3
 80055f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f6:	4618      	mov	r0, r3
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	1894      	adds	r4, r2, r2
 8005602:	603c      	str	r4, [r7, #0]
 8005604:	415b      	adcs	r3, r3
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560c:	1812      	adds	r2, r2, r0
 800560e:	eb41 0303 	adc.w	r3, r1, r3
 8005612:	f04f 0400 	mov.w	r4, #0
 8005616:	f04f 0500 	mov.w	r5, #0
 800561a:	00dd      	lsls	r5, r3, #3
 800561c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005620:	00d4      	lsls	r4, r2, #3
 8005622:	4622      	mov	r2, r4
 8005624:	462b      	mov	r3, r5
 8005626:	eb12 0a00 	adds.w	sl, r2, r0
 800562a:	eb43 0b01 	adc.w	fp, r3, r1
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	4618      	mov	r0, r3
 8005634:	f04f 0100 	mov.w	r1, #0
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	008b      	lsls	r3, r1, #2
 8005642:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005646:	0082      	lsls	r2, r0, #2
 8005648:	4650      	mov	r0, sl
 800564a:	4659      	mov	r1, fp
 800564c:	f7fb fabc 	bl	8000bc8 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <UART_SetConfig+0x38c>)
 8005656:	fba3 1302 	umull	r1, r3, r3, r2
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2164      	movs	r1, #100	; 0x64
 800565e:	fb01 f303 	mul.w	r3, r1, r3
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	3332      	adds	r3, #50	; 0x32
 8005668:	4a09      	ldr	r2, [pc, #36]	; (8005690 <UART_SetConfig+0x38c>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4432      	add	r2, r6
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	377c      	adds	r7, #124	; 0x7c
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005686:	bf00      	nop
 8005688:	40011000 	.word	0x40011000
 800568c:	40011400 	.word	0x40011400
 8005690:	51eb851f 	.word	0x51eb851f

08005694 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005694:	b084      	sub	sp, #16
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	f107 001c 	add.w	r0, r7, #28
 80056a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d122      	bne.n	80056f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d105      	bne.n	80056e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa82 	bl	8005bf0 <USB_CoreReset>
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
 80056f0:	e01a      	b.n	8005728 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa76 	bl	8005bf0 <USB_CoreReset>
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
 800571a:	e005      	b.n	8005728 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10b      	bne.n	8005746 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f043 0206 	orr.w	r2, r3, #6
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005752:	b004      	add	sp, #16
 8005754:	4770      	bx	lr

08005756 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d115      	bne.n	80057c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057a6:	2001      	movs	r0, #1
 80057a8:	f7fc fe6a 	bl	8002480 <HAL_Delay>
      ms++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa0e 	bl	8005bd4 <USB_GetMode>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d01e      	beq.n	80057fc <USB_SetCurrentMode+0x84>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b31      	cmp	r3, #49	; 0x31
 80057c2:	d9f0      	bls.n	80057a6 <USB_SetCurrentMode+0x2e>
 80057c4:	e01a      	b.n	80057fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d115      	bne.n	80057f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057d8:	2001      	movs	r0, #1
 80057da:	f7fc fe51 	bl	8002480 <HAL_Delay>
      ms++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f9f5 	bl	8005bd4 <USB_GetMode>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <USB_SetCurrentMode+0x84>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b31      	cmp	r3, #49	; 0x31
 80057f4:	d9f0      	bls.n	80057d8 <USB_SetCurrentMode+0x60>
 80057f6:	e001      	b.n	80057fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e005      	b.n	8005808 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b32      	cmp	r3, #50	; 0x32
 8005800:	d101      	bne.n	8005806 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005810:	b084      	sub	sp, #16
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800581e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e009      	b.n	8005844 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3340      	adds	r3, #64	; 0x40
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	3301      	adds	r3, #1
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b0e      	cmp	r3, #14
 8005848:	d9f2      	bls.n	8005830 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800584a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11c      	bne.n	800588a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
 8005888:	e00b      	b.n	80058a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058a8:	461a      	mov	r2, r3
 80058aa:	2300      	movs	r3, #0
 80058ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b4:	4619      	mov	r1, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058bc:	461a      	mov	r2, r3
 80058be:	680b      	ldr	r3, [r1, #0]
 80058c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10c      	bne.n	80058e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058ce:	2100      	movs	r1, #0
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f945 	bl	8005b60 <USB_SetDevSpeed>
 80058d6:	e008      	b.n	80058ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058d8:	2101      	movs	r1, #1
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f940 	bl	8005b60 <USB_SetDevSpeed>
 80058e0:	e003      	b.n	80058ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058e2:	2103      	movs	r1, #3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f93b 	bl	8005b60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058ea:	2110      	movs	r1, #16
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8f3 	bl	8005ad8 <USB_FlushTxFifo>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f90f 	bl	8005b20 <USB_FlushRxFifo>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005912:	461a      	mov	r2, r3
 8005914:	2300      	movs	r3, #0
 8005916:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	461a      	mov	r2, r3
 8005920:	2300      	movs	r3, #0
 8005922:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	461a      	mov	r2, r3
 800592c:	2300      	movs	r3, #0
 800592e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e043      	b.n	80059be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800594c:	d118      	bne.n	8005980 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	461a      	mov	r2, r3
 8005962:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e013      	b.n	8005992 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	461a      	mov	r2, r3
 8005978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e008      	b.n	8005992 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	461a      	mov	r2, r3
 800598e:	2300      	movs	r3, #0
 8005990:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	461a      	mov	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	461a      	mov	r2, r3
 80059b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	3301      	adds	r3, #1
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d3b7      	bcc.n	8005936 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	e043      	b.n	8005a54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e2:	d118      	bne.n	8005a16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	461a      	mov	r2, r3
 80059f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e013      	b.n	8005a28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	e008      	b.n	8005a28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	461a      	mov	r2, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	461a      	mov	r2, r3
 8005a36:	2300      	movs	r3, #0
 8005a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	461a      	mov	r2, r3
 8005a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d3b7      	bcc.n	80059cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d105      	bne.n	8005a90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f043 0210 	orr.w	r2, r3, #16
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699a      	ldr	r2, [r3, #24]
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <USB_DevInit+0x2c4>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f043 0208 	orr.w	r2, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d107      	bne.n	8005ac4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005abc:	f043 0304 	orr.w	r3, r3, #4
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad0:	b004      	add	sp, #16
 8005ad2:	4770      	bx	lr
 8005ad4:	803c3800 	.word	0x803c3800

08005ad8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	019b      	lsls	r3, r3, #6
 8005aea:	f043 0220 	orr.w	r2, r3, #32
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <USB_FlushTxFifo+0x44>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e006      	b.n	8005b10 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d0f1      	beq.n	8005af2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	00030d40 	.word	0x00030d40

08005b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2210      	movs	r2, #16
 8005b30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <USB_FlushRxFifo+0x3c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e006      	b.n	8005b50 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d0f1      	beq.n	8005b32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	00030d40 	.word	0x00030d40

08005b60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bac:	f023 0303 	bic.w	r3, r3, #3
 8005bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc0:	f043 0302 	orr.w	r3, r3, #2
 8005bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0301 	and.w	r3, r3, #1
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <USB_CoreReset+0x60>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d901      	bls.n	8005c0c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e01a      	b.n	8005c42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	daf3      	bge.n	8005bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f043 0201 	orr.w	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <USB_CoreReset+0x60>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d901      	bls.n	8005c34 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e006      	b.n	8005c42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d0f1      	beq.n	8005c24 <USB_CoreReset+0x34>

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	00030d40 	.word	0x00030d40

08005c54 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8005c64:	bf00      	nop
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <sx126x_hal_write+0x74>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <sx126x_hal_write+0x78>)
 8005c6c:	8812      	ldrh	r2, [r2, #0]
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fd f929 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d0f4      	beq.n	8005c66 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8005c7c:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <sx126x_hal_write+0x7c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <sx126x_hal_write+0x80>)
 8005c82:	8811      	ldrh	r1, [r2, #0]
 8005c84:	2200      	movs	r2, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fd f936 	bl	8002ef8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	2364      	movs	r3, #100	; 0x64
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7fe f953 	bl	8003f3e <HAL_SPI_Transmit>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8005c9c:	8c3a      	ldrh	r2, [r7, #32]
 8005c9e:	2364      	movs	r3, #100	; 0x64
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7fe f94b 	bl	8003f3e <HAL_SPI_Transmit>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8005cac:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <sx126x_hal_write+0x7c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <sx126x_hal_write+0x80>)
 8005cb2:	8811      	ldrh	r1, [r2, #0]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fd f91e 	bl	8002ef8 <HAL_GPIO_WritePin>
    return status;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000234 	.word	0x20000234
 8005ccc:	20000230 	.word	0x20000230
 8005cd0:	20000224 	.word	0x20000224
 8005cd4:	20000220 	.word	0x20000220

08005cd8 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8005ce8:	bf00      	nop
 8005cea:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <sx126x_hal_read+0x8c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <sx126x_hal_read+0x90>)
 8005cf0:	8812      	ldrh	r2, [r2, #0]
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fd f8e7 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d0f4      	beq.n	8005cea <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8005d00:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <sx126x_hal_read+0x94>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <sx126x_hal_read+0x98>)
 8005d06:	8811      	ldrh	r1, [r2, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fd f8f4 	bl	8002ef8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8005d10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	2364      	movs	r3, #100	; 0x64
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7fe f90f 	bl	8003f3e <HAL_SPI_Transmit>
 8005d20:	4603      	mov	r3, r0
 8005d22:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8005d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	18d1      	adds	r1, r2, r3
 8005d2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2264      	movs	r2, #100	; 0x64
 8005d3a:	9200      	str	r2, [sp, #0]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7fe fa39 	bl	80041b6 <HAL_SPI_TransmitReceive>
 8005d44:	4603      	mov	r3, r0
 8005d46:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8005d48:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <sx126x_hal_read+0x94>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <sx126x_hal_read+0x98>)
 8005d4e:	8811      	ldrh	r1, [r2, #0]
 8005d50:	2201      	movs	r2, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fd f8d0 	bl	8002ef8 <HAL_GPIO_WritePin>
    return status;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000234 	.word	0x20000234
 8005d68:	20000230 	.word	0x20000230
 8005d6c:	20000224 	.word	0x20000224
 8005d70:	20000220 	.word	0x20000220

08005d74 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8005d80:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <set_NSS_pin+0x24>)
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8005d86:	4a05      	ldr	r2, [pc, #20]	; (8005d9c <set_NSS_pin+0x28>)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6013      	str	r3, [r2, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	20000220 	.word	0x20000220
 8005d9c:	20000224 	.word	0x20000224

08005da0 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8005dac:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <set_BUSY_pin+0x24>)
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8005db2:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <set_BUSY_pin+0x28>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6013      	str	r3, [r2, #0]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	20000230 	.word	0x20000230
 8005dc8:	20000234 	.word	0x20000234

08005dcc <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8005dd8:	4a05      	ldr	r2, [pc, #20]	; (8005df0 <set_NRESET_pin+0x24>)
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8005dde:	4a05      	ldr	r2, [pc, #20]	; (8005df4 <set_NRESET_pin+0x28>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6013      	str	r3, [r2, #0]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	20000228 	.word	0x20000228
 8005df4:	2000022c 	.word	0x2000022c

08005df8 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8005e04:	4a05      	ldr	r2, [pc, #20]	; (8005e1c <set_DIO1_pin+0x24>)
 8005e06:	887b      	ldrh	r3, [r7, #2]
 8005e08:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8005e0a:	4a05      	ldr	r2, [pc, #20]	; (8005e20 <set_DIO1_pin+0x28>)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	20000238 	.word	0x20000238
 8005e20:	2000023c 	.word	0x2000023c

08005e24 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8005e24:	b084      	sub	sp, #16
 8005e26:	b580      	push	{r7, lr}
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	f107 0c08 	add.w	ip, r7, #8
 8005e2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <set_hspi+0x2c>)
 8005e34:	4618      	mov	r0, r3
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	2258      	movs	r2, #88	; 0x58
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f003 fc21 	bl	8009684 <memcpy>
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e4a:	b004      	add	sp, #16
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20000240 	.word	0x20000240

08005e54 <Tx_setup>:

void Tx_setup(){
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8005e5a:	4b66      	ldr	r3, [pc, #408]	; (8005ff4 <Tx_setup+0x1a0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a66      	ldr	r2, [pc, #408]	; (8005ff8 <Tx_setup+0x1a4>)
 8005e60:	8811      	ldrh	r1, [r2, #0]
 8005e62:	2201      	movs	r2, #1
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fd f847 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8005e6a:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <Tx_setup+0x1a8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a64      	ldr	r2, [pc, #400]	; (8006000 <Tx_setup+0x1ac>)
 8005e70:	8811      	ldrh	r1, [r2, #0]
 8005e72:	2200      	movs	r2, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fd f83f 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8005e7a:	2032      	movs	r0, #50	; 0x32
 8005e7c:	f7fc fb00 	bl	8002480 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 8005e80:	4b5e      	ldr	r3, [pc, #376]	; (8005ffc <Tx_setup+0x1a8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a5e      	ldr	r2, [pc, #376]	; (8006000 <Tx_setup+0x1ac>)
 8005e86:	8811      	ldrh	r1, [r2, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fd f834 	bl	8002ef8 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 8005e90:	2100      	movs	r1, #0
 8005e92:	485c      	ldr	r0, [pc, #368]	; (8006004 <Tx_setup+0x1b0>)
 8005e94:	f000 f930 	bl	80060f8 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8005e98:	4b5b      	ldr	r3, [pc, #364]	; (8006008 <Tx_setup+0x1b4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4859      	ldr	r0, [pc, #356]	; (8006004 <Tx_setup+0x1b0>)
 8005ea0:	f000 fb98 	bl	80065d4 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8005ea4:	4b59      	ldr	r3, [pc, #356]	; (800600c <Tx_setup+0x1b8>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4856      	ldr	r0, [pc, #344]	; (8006004 <Tx_setup+0x1b0>)
 8005eac:	f000 fbcc 	bl	8006648 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8005eb0:	4b57      	ldr	r3, [pc, #348]	; (8006010 <Tx_setup+0x1bc>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4853      	ldr	r0, [pc, #332]	; (8006004 <Tx_setup+0x1b0>)
 8005eb8:	f000 fa21 	bl	80062fe <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4851      	ldr	r0, [pc, #324]	; (8006004 <Tx_setup+0x1b0>)
 8005ec0:	f000 fb46 	bl	8006550 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8005ec4:	4b53      	ldr	r3, [pc, #332]	; (8006014 <Tx_setup+0x1c0>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2264      	movs	r2, #100	; 0x64
 8005eca:	4619      	mov	r1, r3
 8005ecc:	484d      	ldr	r0, [pc, #308]	; (8006004 <Tx_setup+0x1b0>)
 8005ece:	f000 fb59 	bl	8006584 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8005ed2:	4b51      	ldr	r3, [pc, #324]	; (8006018 <Tx_setup+0x1c4>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	484a      	ldr	r0, [pc, #296]	; (8006004 <Tx_setup+0x1b0>)
 8005eda:	f000 f9ad 	bl	8006238 <sx126x_cal>
    HAL_Delay(50);
 8005ede:	2032      	movs	r0, #50	; 0x32
 8005ee0:	f7fc face 	bl	8002480 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8005ee4:	4b4d      	ldr	r3, [pc, #308]	; (800601c <Tx_setup+0x1c8>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4846      	ldr	r0, [pc, #280]	; (8006004 <Tx_setup+0x1b0>)
 8005eec:	f000 f98a 	bl	8006204 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8005ef0:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <Tx_setup+0x1cc>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4a4b      	ldr	r2, [pc, #300]	; (8006024 <Tx_setup+0x1d0>)
 8005ef6:	7812      	ldrb	r2, [r2, #0]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4842      	ldr	r0, [pc, #264]	; (8006004 <Tx_setup+0x1b0>)
 8005efc:	f000 f9b6 	bl	800626c <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8005f00:	2004      	movs	r0, #4
 8005f02:	f003 fbaf 	bl	8009664 <malloc>
 8005f06:	4603      	mov	r3, r0
 8005f08:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8005f0a:	4b47      	ldr	r3, [pc, #284]	; (8006028 <Tx_setup+0x1d4>)
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8005f12:	4b46      	ldr	r3, [pc, #280]	; (800602c <Tx_setup+0x1d8>)
 8005f14:	781a      	ldrb	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8005f1a:	4b45      	ldr	r3, [pc, #276]	; (8006030 <Tx_setup+0x1dc>)
 8005f1c:	781a      	ldrb	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8005f22:	4b44      	ldr	r3, [pc, #272]	; (8006034 <Tx_setup+0x1e0>)
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	4835      	ldr	r0, [pc, #212]	; (8006004 <Tx_setup+0x1b0>)
 8005f2e:	f000 f9c1 	bl	80062b4 <sx126x_set_pa_cfg>
    free(params);
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f003 fb9e 	bl	8009674 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8005f38:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <Tx_setup+0x1e4>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	4a3f      	ldr	r2, [pc, #252]	; (800603c <Tx_setup+0x1e8>)
 8005f40:	7812      	ldrb	r2, [r2, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	482f      	ldr	r0, [pc, #188]	; (8006004 <Tx_setup+0x1b0>)
 8005f46:	f000 fb99 	bl	800667c <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 8005f4a:	4b3d      	ldr	r3, [pc, #244]	; (8006040 <Tx_setup+0x1ec>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4a3d      	ldr	r2, [pc, #244]	; (8006044 <Tx_setup+0x1f0>)
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	482b      	ldr	r0, [pc, #172]	; (8006004 <Tx_setup+0x1b0>)
 8005f56:	f000 fc4f 	bl	80067f8 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8005f5a:	2004      	movs	r0, #4
 8005f5c:	f003 fb82 	bl	8009664 <malloc>
 8005f60:	4603      	mov	r3, r0
 8005f62:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 8005f64:	4b38      	ldr	r3, [pc, #224]	; (8006048 <Tx_setup+0x1f4>)
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 8005f6c:	4b37      	ldr	r3, [pc, #220]	; (800604c <Tx_setup+0x1f8>)
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 8005f74:	4b36      	ldr	r3, [pc, #216]	; (8006050 <Tx_setup+0x1fc>)
 8005f76:	781a      	ldrb	r2, [r3, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 8005f7c:	4b35      	ldr	r3, [pc, #212]	; (8006054 <Tx_setup+0x200>)
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	481f      	ldr	r0, [pc, #124]	; (8006004 <Tx_setup+0x1b0>)
 8005f88:	f000 fb9c 	bl	80066c4 <sx126x_set_lora_mod_params>
    free(mod_params);
 8005f8c:	68b8      	ldr	r0, [r7, #8]
 8005f8e:	f003 fb71 	bl	8009674 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8005f92:	2006      	movs	r0, #6
 8005f94:	f003 fb66 	bl	8009664 <malloc>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8005f9c:	4b2e      	ldr	r3, [pc, #184]	; (8006058 <Tx_setup+0x204>)
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8005fa4:	4b2d      	ldr	r3, [pc, #180]	; (800605c <Tx_setup+0x208>)
 8005fa6:	781a      	ldrb	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8005fac:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <Tx_setup+0x20c>)
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <Tx_setup+0x210>)
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8005fbc:	4b2a      	ldr	r3, [pc, #168]	; (8006068 <Tx_setup+0x214>)
 8005fbe:	781a      	ldrb	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	480f      	ldr	r0, [pc, #60]	; (8006004 <Tx_setup+0x1b0>)
 8005fc8:	f000 fba8 	bl	800671c <sx126x_set_lora_pkt_params>
    free(lora_params);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f003 fb51 	bl	8009674 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8005fd2:	4b26      	ldr	r3, [pc, #152]	; (800606c <Tx_setup+0x218>)
 8005fd4:	8819      	ldrh	r1, [r3, #0]
 8005fd6:	4b26      	ldr	r3, [pc, #152]	; (8006070 <Tx_setup+0x21c>)
 8005fd8:	881a      	ldrh	r2, [r3, #0]
 8005fda:	4b26      	ldr	r3, [pc, #152]	; (8006074 <Tx_setup+0x220>)
 8005fdc:	8818      	ldrh	r0, [r3, #0]
 8005fde:	4b26      	ldr	r3, [pc, #152]	; (8006078 <Tx_setup+0x224>)
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4807      	ldr	r0, [pc, #28]	; (8006004 <Tx_setup+0x1b0>)
 8005fe8:	f000 fa15 	bl	8006416 <sx126x_set_dio_irq_params>

}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	2000022c 	.word	0x2000022c
 8005ff8:	20000228 	.word	0x20000228
 8005ffc:	20000224 	.word	0x20000224
 8006000:	20000220 	.word	0x20000220
 8006004:	20000240 	.word	0x20000240
 8006008:	2000000c 	.word	0x2000000c
 800600c:	20000010 	.word	0x20000010
 8006010:	20000011 	.word	0x20000011
 8006014:	20000012 	.word	0x20000012
 8006018:	20000014 	.word	0x20000014
 800601c:	20000013 	.word	0x20000013
 8006020:	20000015 	.word	0x20000015
 8006024:	20000016 	.word	0x20000016
 8006028:	20000017 	.word	0x20000017
 800602c:	20000018 	.word	0x20000018
 8006030:	20000298 	.word	0x20000298
 8006034:	20000019 	.word	0x20000019
 8006038:	2000001a 	.word	0x2000001a
 800603c:	2000001b 	.word	0x2000001b
 8006040:	20000299 	.word	0x20000299
 8006044:	2000029a 	.word	0x2000029a
 8006048:	2000001c 	.word	0x2000001c
 800604c:	2000001d 	.word	0x2000001d
 8006050:	2000001e 	.word	0x2000001e
 8006054:	2000029b 	.word	0x2000029b
 8006058:	20000020 	.word	0x20000020
 800605c:	2000029c 	.word	0x2000029c
 8006060:	20000022 	.word	0x20000022
 8006064:	20000023 	.word	0x20000023
 8006068:	2000029d 	.word	0x2000029d
 800606c:	20000024 	.word	0x20000024
 8006070:	20000026 	.word	0x20000026
 8006074:	2000029e 	.word	0x2000029e
 8006078:	200002a0 	.word	0x200002a0

0800607c <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 8006088:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <TxProtocol+0x74>)
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	4619      	mov	r1, r3
 800608e:	4819      	ldr	r0, [pc, #100]	; (80060f4 <TxProtocol+0x78>)
 8006090:	f000 fa38 	bl	8006504 <sx126x_clear_irq_status>
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	2100      	movs	r1, #0
 800609e:	4815      	ldr	r0, [pc, #84]	; (80060f4 <TxProtocol+0x78>)
 80060a0:	f000 f99a 	bl	80063d8 <sx126x_write_buffer>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f241 7170 	movw	r1, #6000	; 0x1770
 80060b0:	4810      	ldr	r0, [pc, #64]	; (80060f4 <TxProtocol+0x78>)
 80060b2:	f000 f83b 	bl	800612c <sx126x_set_tx>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1400);
 80060ba:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80060be:	f7fc f9df 	bl	8002480 <HAL_Delay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 80060c2:	f107 030c 	add.w	r3, r7, #12
 80060c6:	4619      	mov	r1, r3
 80060c8:	480a      	ldr	r0, [pc, #40]	; (80060f4 <TxProtocol+0x78>)
 80060ca:	f000 f9e9 	bl	80064a0 <sx126x_get_irq_status>
 80060ce:	4603      	mov	r3, r0
 80060d0:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 80060d2:	89bb      	ldrh	r3, [r7, #12]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <TxProtocol+0x6a>
 80060dc:	89bb      	ldrh	r3, [r7, #12]
 80060de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0ed      	beq.n	80060c2 <TxProtocol+0x46>
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000026 	.word	0x20000026
 80060f4:	20000240 	.word	0x20000240

080060f8 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8006104:	2300      	movs	r3, #0
 8006106:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8006108:	2380      	movs	r3, #128	; 0x80
 800610a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8006110:	f107 010c 	add.w	r1, r7, #12
 8006114:	2300      	movs	r3, #0
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	2202      	movs	r2, #2
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff fd99 	bl	8005c54 <sx126x_hal_write>
 8006122:	4603      	mov	r3, r0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4613      	mov	r3, r2
 8006138:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <sx126x_set_tx+0x7c>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d11e      	bne.n	8006180 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8006142:	2006      	movs	r0, #6
 8006144:	f003 fa8e 	bl	8009664 <malloc>
 8006148:	4603      	mov	r3, r0
 800614a:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <sx126x_set_tx+0x80>)
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 8006154:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <sx126x_set_tx+0x84>)
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	79fa      	ldrb	r2, [r7, #7]
 8006160:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <sx126x_set_tx+0x88>)
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <sx126x_set_tx+0x8c>)
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	4811      	ldr	r0, [pc, #68]	; (80061bc <sx126x_set_tx+0x90>)
 8006176:	f000 fad1 	bl	800671c <sx126x_set_lora_pkt_params>
        free(lora_params);
 800617a:	6978      	ldr	r0, [r7, #20]
 800617c:	f003 fa7a 	bl	8009674 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006186:	d301      	bcc.n	800618c <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8006188:	2302      	movs	r3, #2
 800618a:	e008      	b.n	800619e <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800618c:	68b8      	ldr	r0, [r7, #8]
 800618e:	f000 fb7d 	bl	800688c <sx126x_convert_timeout_in_ms_to_rtc_step>
 8006192:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8006194:	6939      	ldr	r1, [r7, #16]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f812 	bl	80061c0 <sx126x_set_tx_with_timeout_in_rtc_step>
 800619c:	4603      	mov	r3, r0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000010 	.word	0x20000010
 80061ac:	20000020 	.word	0x20000020
 80061b0:	2000029c 	.word	0x2000029c
 80061b4:	20000023 	.word	0x20000023
 80061b8:	2000029d 	.word	0x2000029d
 80061bc:	20000240 	.word	0x20000240

080061c0 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 80061ce:	2383      	movs	r3, #131	; 0x83
 80061d0:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	0a1b      	lsrs	r3, r3, #8
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 80061e8:	f107 010c 	add.w	r1, r7, #12
 80061ec:	2300      	movs	r3, #0
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2300      	movs	r3, #0
 80061f2:	2204      	movs	r2, #4
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fd2d 	bl	8005c54 <sx126x_hal_write>
 80061fa:	4603      	mov	r3, r0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af02      	add	r7, sp, #8
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8006210:	2300      	movs	r3, #0
 8006212:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8006214:	2396      	movs	r3, #150	; 0x96
 8006216:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800621c:	f107 010c 	add.w	r1, r7, #12
 8006220:	2300      	movs	r3, #0
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	2202      	movs	r2, #2
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fd13 	bl	8005c54 <sx126x_hal_write>
 800622e:	4603      	mov	r3, r0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8006244:	2300      	movs	r3, #0
 8006246:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8006248:	2389      	movs	r3, #137	; 0x89
 800624a:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8006250:	f107 010c 	add.w	r1, r7, #12
 8006254:	2300      	movs	r3, #0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	2202      	movs	r2, #2
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fcf9 	bl	8005c54 <sx126x_hal_write>
 8006262:	4603      	mov	r3, r0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
 8006278:	4613      	mov	r3, r2
 800627a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <sx126x_cal_img_hex+0x44>)
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	81bb      	strh	r3, [r7, #12]
 8006282:	2300      	movs	r3, #0
 8006284:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 8006286:	2398      	movs	r3, #152	; 0x98
 8006288:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800628e:	78bb      	ldrb	r3, [r7, #2]
 8006290:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 8006292:	f107 010c 	add.w	r1, r7, #12
 8006296:	2300      	movs	r3, #0
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	2203      	movs	r2, #3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fcd8 	bl	8005c54 <sx126x_hal_write>
 80062a4:	4603      	mov	r3, r0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	0800c388 	.word	0x0800c388

080062b4 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	2300      	movs	r3, #0
 80062c4:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 80062c6:	2395      	movs	r3, #149	; 0x95
 80062c8:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	789b      	ldrb	r3, [r3, #2]
 80062da:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	78db      	ldrb	r3, [r3, #3]
 80062e0:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 80062e2:	f107 0108 	add.w	r1, r7, #8
 80062e6:	2300      	movs	r3, #0
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	2300      	movs	r3, #0
 80062ec:	2205      	movs	r2, #5
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff fcb0 	bl	8005c54 <sx126x_hal_write>
 80062f4:	4603      	mov	r3, r0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af02      	add	r7, sp, #8
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800630a:	2300      	movs	r3, #0
 800630c:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800630e:	2393      	movs	r3, #147	; 0x93
 8006310:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8006316:	f107 010c 	add.w	r1, r7, #12
 800631a:	2300      	movs	r3, #0
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	2300      	movs	r3, #0
 8006320:	2202      	movs	r2, #2
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fc96 	bl	8005c54 <sx126x_hal_write>
 8006328:	4603      	mov	r3, r0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	461a      	mov	r2, r3
 8006340:	460b      	mov	r3, r1
 8006342:	817b      	strh	r3, [r7, #10]
 8006344:	4613      	mov	r3, r2
 8006346:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8006348:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <sx126x_write_register+0x50>)
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	82bb      	strh	r3, [r7, #20]
 800634e:	2300      	movs	r3, #0
 8006350:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8006352:	230d      	movs	r3, #13
 8006354:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	b29b      	uxth	r3, r3
 800635c:	b2db      	uxtb	r3, r3
 800635e:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 8006360:	897b      	ldrh	r3, [r7, #10]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8006366:	7a7b      	ldrb	r3, [r7, #9]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f107 0114 	add.w	r1, r7, #20
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2203      	movs	r2, #3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff fc6d 	bl	8005c54 <sx126x_hal_write>
 800637a:	4603      	mov	r3, r0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	0800c388 	.word	0x0800c388

08006388 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	461a      	mov	r2, r3
 8006394:	460b      	mov	r3, r1
 8006396:	817b      	strh	r3, [r7, #10]
 8006398:	4613      	mov	r3, r2
 800639a:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800639c:	2300      	movs	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 80063a0:	2303      	movs	r3, #3
 80063a2:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 80063a4:	231d      	movs	r3, #29
 80063a6:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 80063a8:	897b      	ldrh	r3, [r7, #10]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 80063b2:	897b      	ldrh	r3, [r7, #10]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 80063b8:	f107 0110 	add.w	r1, r7, #16
 80063bc:	7a7b      	ldrb	r3, [r7, #9]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2204      	movs	r2, #4
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff fc87 	bl	8005cd8 <sx126x_hal_read>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]

    return status;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	461a      	mov	r2, r3
 80063e4:	460b      	mov	r3, r1
 80063e6:	72fb      	strb	r3, [r7, #11]
 80063e8:	4613      	mov	r3, r2
 80063ea:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 80063ec:	2300      	movs	r3, #0
 80063ee:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 80063f0:	230e      	movs	r3, #14
 80063f2:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 80063f8:	7abb      	ldrb	r3, [r7, #10]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f107 0114 	add.w	r1, r7, #20
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff fc24 	bl	8005c54 <sx126x_hal_write>
 800640c:	4603      	mov	r3, r0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b08a      	sub	sp, #40	; 0x28
 800641a:	af02      	add	r7, sp, #8
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	4608      	mov	r0, r1
 8006420:	4611      	mov	r1, r2
 8006422:	461a      	mov	r2, r3
 8006424:	4603      	mov	r3, r0
 8006426:	817b      	strh	r3, [r7, #10]
 8006428:	460b      	mov	r3, r1
 800642a:	813b      	strh	r3, [r7, #8]
 800642c:	4613      	mov	r3, r2
 800642e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	f107 0318 	add.w	r3, r7, #24
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800643e:	2308      	movs	r3, #8
 8006440:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8006442:	897b      	ldrh	r3, [r7, #10]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	b29b      	uxth	r3, r3
 8006448:	b2db      	uxtb	r3, r3
 800644a:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800644c:	897b      	ldrh	r3, [r7, #10]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 8006452:	893b      	ldrh	r3, [r7, #8]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	b29b      	uxth	r3, r3
 8006458:	b2db      	uxtb	r3, r3
 800645a:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800645c:	893b      	ldrh	r3, [r7, #8]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	b29b      	uxth	r3, r3
 8006468:	b2db      	uxtb	r3, r3
 800646a:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 8006472:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	b29b      	uxth	r3, r3
 8006478:	b2db      	uxtb	r3, r3
 800647a:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800647c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800647e:	b2db      	uxtb	r3, r3
 8006480:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8006482:	f107 0114 	add.w	r1, r7, #20
 8006486:	2300      	movs	r3, #0
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2300      	movs	r3, #0
 800648c:	2209      	movs	r2, #9
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fbe0 	bl	8005c54 <sx126x_hal_write>
 8006494:	4603      	mov	r3, r0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af02      	add	r7, sp, #8
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 80064ae:	4b14      	ldr	r3, [pc, #80]	; (8006500 <sx126x_get_irq_status+0x60>)
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	81bb      	strh	r3, [r7, #12]
 80064b4:	2300      	movs	r3, #0
 80064b6:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 80064b8:	2303      	movs	r3, #3
 80064ba:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 80064bc:	2312      	movs	r3, #18
 80064be:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	f107 0110 	add.w	r1, r7, #16
 80064c8:	2201      	movs	r2, #1
 80064ca:	9200      	str	r2, [sp, #0]
 80064cc:	2204      	movs	r2, #4
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fc02 	bl	8005cd8 <sx126x_hal_read>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 80064de:	7b7b      	ldrb	r3, [r7, #13]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b21a      	sxth	r2, r3
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	b21b      	sxth	r3, r3
 80064e8:	4313      	orrs	r3, r2
 80064ea:	b21b      	sxth	r3, r3
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 80064f2:	7b3b      	ldrb	r3, [r7, #12]
 80064f4:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	0800c388 	.word	0x0800c388

08006504 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 8006510:	4b0e      	ldr	r3, [pc, #56]	; (800654c <sx126x_clear_irq_status+0x48>)
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	81bb      	strh	r3, [r7, #12]
 8006516:	2300      	movs	r3, #0
 8006518:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 800651a:	2302      	movs	r3, #2
 800651c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800651e:	887b      	ldrh	r3, [r7, #2]
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	b29b      	uxth	r3, r3
 8006524:	b2db      	uxtb	r3, r3
 8006526:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8006528:	887b      	ldrh	r3, [r7, #2]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800652e:	f107 010c 	add.w	r1, r7, #12
 8006532:	2300      	movs	r3, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	2300      	movs	r3, #0
 8006538:	2203      	movs	r2, #3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fb8a 	bl	8005c54 <sx126x_hal_write>
 8006540:	4603      	mov	r3, r0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	0800c388 	.word	0x0800c388

08006550 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af02      	add	r7, sp, #8
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800655c:	2300      	movs	r3, #0
 800655e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 8006560:	239d      	movs	r3, #157	; 0x9d
 8006562:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8006568:	f107 010c 	add.w	r1, r7, #12
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	2202      	movs	r2, #2
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff fb6d 	bl	8005c54 <sx126x_hal_write>
 800657a:	4603      	mov	r3, r0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	460b      	mov	r3, r1
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 8006592:	2300      	movs	r3, #0
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	2300      	movs	r3, #0
 8006598:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800659a:	2397      	movs	r3, #151	; 0x97
 800659c:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0a1b      	lsrs	r3, r3, #8
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 80065b8:	f107 0110 	add.w	r1, r7, #16
 80065bc:	2300      	movs	r3, #0
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2300      	movs	r3, #0
 80065c2:	2205      	movs	r2, #5
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f7ff fb45 	bl	8005c54 <sx126x_hal_write>
 80065ca:	4603      	mov	r3, r0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 80065de:	6838      	ldr	r0, [r7, #0]
 80065e0:	f000 f92e 	bl	8006840 <sx126x_convert_freq_in_hz_to_pll_step>
 80065e4:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f805 	bl	80065f8 <sx126x_set_rf_freq_in_pll_steps>
 80065ee:	4603      	mov	r3, r0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	2300      	movs	r3, #0
 8006608:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800660a:	2386      	movs	r3, #134	; 0x86
 800660c:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	0e1b      	lsrs	r3, r3, #24
 8006612:	b2db      	uxtb	r3, r3
 8006614:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	b2db      	uxtb	r3, r3
 800661c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	b2db      	uxtb	r3, r3
 8006624:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800662c:	f107 0108 	add.w	r1, r7, #8
 8006630:	2300      	movs	r3, #0
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	2205      	movs	r2, #5
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff fb0b 	bl	8005c54 <sx126x_hal_write>
 800663e:	4603      	mov	r3, r0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8006654:	2300      	movs	r3, #0
 8006656:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8006658:	238a      	movs	r3, #138	; 0x8a
 800665a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8006660:	f107 010c 	add.w	r1, r7, #12
 8006664:	2300      	movs	r3, #0
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2300      	movs	r3, #0
 800666a:	2202      	movs	r2, #2
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff faf1 	bl	8005c54 <sx126x_hal_write>
 8006672:	4603      	mov	r3, r0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af02      	add	r7, sp, #8
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
 8006688:	4613      	mov	r3, r2
 800668a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <sx126x_set_tx_params+0x44>)
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	81bb      	strh	r3, [r7, #12]
 8006692:	2300      	movs	r3, #0
 8006694:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 8006696:	238e      	movs	r3, #142	; 0x8e
 8006698:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800669e:	78bb      	ldrb	r3, [r7, #2]
 80066a0:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 80066a2:	f107 010c 	add.w	r1, r7, #12
 80066a6:	2300      	movs	r3, #0
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	2300      	movs	r3, #0
 80066ac:	2203      	movs	r2, #3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fad0 	bl	8005c54 <sx126x_hal_write>
 80066b4:	4603      	mov	r3, r0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	0800c388 	.word	0x0800c388

080066c4 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 80066ce:	2303      	movs	r3, #3
 80066d0:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]
 80066d6:	2300      	movs	r3, #0
 80066d8:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 80066da:	238b      	movs	r3, #139	; 0x8b
 80066dc:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	789b      	ldrb	r3, [r3, #2]
 80066ee:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	78db      	ldrb	r3, [r3, #3]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	2300      	movs	r3, #0
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	2205      	movs	r2, #5
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff faa3 	bl	8005c54 <sx126x_hal_write>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8006726:	2303      	movs	r3, #3
 8006728:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800672a:	2300      	movs	r3, #0
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	f107 0314 	add.w	r3, r7, #20
 8006732:	2100      	movs	r1, #0
 8006734:	460a      	mov	r2, r1
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	460a      	mov	r2, r1
 800673a:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800673c:	238c      	movs	r3, #140	; 0x8c
 800673e:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	b29b      	uxth	r3, r3
 8006748:	b2db      	uxtb	r3, r3
 800674a:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	789b      	ldrb	r3, [r3, #2]
 8006758:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	78db      	ldrb	r3, [r3, #3]
 800675e:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	791b      	ldrb	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <sx126x_set_lora_pkt_params+0x50>
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <sx126x_set_lora_pkt_params+0x52>
 800676c:	2300      	movs	r3, #0
 800676e:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	795b      	ldrb	r3, [r3, #5]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <sx126x_set_lora_pkt_params+0x60>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <sx126x_set_lora_pkt_params+0x62>
 800677c:	2300      	movs	r3, #0
 800677e:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 8006780:	f107 0110 	add.w	r1, r7, #16
 8006784:	2300      	movs	r3, #0
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	2300      	movs	r3, #0
 800678a:	2207      	movs	r2, #7
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff fa61 	bl	8005c54 <sx126x_hal_write>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d127      	bne.n	80067ec <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 80067a0:	f107 020f 	add.w	r2, r7, #15
 80067a4:	2301      	movs	r3, #1
 80067a6:	f240 7136 	movw	r1, #1846	; 0x736
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff fdec 	bl	8006388 <sx126x_read_register>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d118      	bne.n	80067ec <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	795b      	ldrb	r3, [r3, #5]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	f023 0304 	bic.w	r3, r3, #4
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	73fb      	strb	r3, [r7, #15]
 80067cc:	e004      	b.n	80067d8 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 80067d8:	f107 020f 	add.w	r2, r7, #15
 80067dc:	2301      	movs	r3, #1
 80067de:	f240 7136 	movw	r1, #1846	; 0x736
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff fda6 	bl	8006334 <sx126x_write_register>
 80067e8:	4603      	mov	r3, r0
 80067ea:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
 8006804:	4613      	mov	r3, r2
 8006806:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <sx126x_set_buffer_base_address+0x44>)
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	81bb      	strh	r3, [r7, #12]
 800680e:	2300      	movs	r3, #0
 8006810:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 8006812:	238f      	movs	r3, #143	; 0x8f
 8006814:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800681a:	78bb      	ldrb	r3, [r7, #2]
 800681c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800681e:	f107 010c 	add.w	r1, r7, #12
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	2203      	movs	r2, #3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fa12 	bl	8005c54 <sx126x_hal_write>
 8006830:	4603      	mov	r3, r0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	0800c388 	.word	0x0800c388

08006840 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a0f      	ldr	r2, [pc, #60]	; (8006888 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	0b1b      	lsrs	r3, r3, #12
 8006852:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f643 5209 	movw	r2, #15625	; 0x3d09
 800685a:	fb02 f303 	mul.w	r3, r2, r3
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	039b      	lsls	r3, r3, #14
 800686c:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8006870:	3304      	adds	r3, #4
 8006872:	4905      	ldr	r1, [pc, #20]	; (8006888 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8006874:	fba1 1303 	umull	r1, r3, r1, r3
 8006878:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800687a:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	431bde83 	.word	0x431bde83

0800688c <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	019b      	lsls	r3, r3, #6
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <__NVIC_SetPriority>:
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	4603      	mov	r3, r0
 80068ac:	6039      	str	r1, [r7, #0]
 80068ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	db0a      	blt.n	80068ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	490c      	ldr	r1, [pc, #48]	; (80068f0 <__NVIC_SetPriority+0x4c>)
 80068be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c2:	0112      	lsls	r2, r2, #4
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	440b      	add	r3, r1
 80068c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068cc:	e00a      	b.n	80068e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	4908      	ldr	r1, [pc, #32]	; (80068f4 <__NVIC_SetPriority+0x50>)
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	3b04      	subs	r3, #4
 80068dc:	0112      	lsls	r2, r2, #4
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	440b      	add	r3, r1
 80068e2:	761a      	strb	r2, [r3, #24]
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	e000e100 	.word	0xe000e100
 80068f4:	e000ed00 	.word	0xe000ed00

080068f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <SysTick_Handler+0x1c>)
 80068fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006900:	f001 fd28 	bl	8008354 <xTaskGetSchedulerState>
 8006904:	4603      	mov	r3, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	d001      	beq.n	800690e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800690a:	f002 fb0d 	bl	8008f28 <xPortSysTickHandler>
  }
}
 800690e:	bf00      	nop
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	e000e010 	.word	0xe000e010

08006918 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800691c:	2100      	movs	r1, #0
 800691e:	f06f 0004 	mvn.w	r0, #4
 8006922:	f7ff ffbf 	bl	80068a4 <__NVIC_SetPriority>
#endif
}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006932:	f3ef 8305 	mrs	r3, IPSR
 8006936:	603b      	str	r3, [r7, #0]
  return(result);
 8006938:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800693e:	f06f 0305 	mvn.w	r3, #5
 8006942:	607b      	str	r3, [r7, #4]
 8006944:	e00c      	b.n	8006960 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <osKernelInitialize+0x44>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800694e:	4b08      	ldr	r3, [pc, #32]	; (8006970 <osKernelInitialize+0x44>)
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006954:	2300      	movs	r3, #0
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	e002      	b.n	8006960 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800695a:	f04f 33ff 	mov.w	r3, #4294967295
 800695e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006960:	687b      	ldr	r3, [r7, #4]
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	200002a4 	.word	0x200002a4

08006974 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800697a:	f3ef 8305 	mrs	r3, IPSR
 800697e:	603b      	str	r3, [r7, #0]
  return(result);
 8006980:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006986:	f06f 0305 	mvn.w	r3, #5
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	e010      	b.n	80069b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800698e:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <osKernelStart+0x48>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d109      	bne.n	80069aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006996:	f7ff ffbf 	bl	8006918 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800699a:	4b08      	ldr	r3, [pc, #32]	; (80069bc <osKernelStart+0x48>)
 800699c:	2202      	movs	r2, #2
 800699e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069a0:	f001 f87c 	bl	8007a9c <vTaskStartScheduler>
      stat = osOK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	e002      	b.n	80069b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295
 80069ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069b0:	687b      	ldr	r3, [r7, #4]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200002a4 	.word	0x200002a4

080069c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08e      	sub	sp, #56	; 0x38
 80069c4:	af04      	add	r7, sp, #16
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069d0:	f3ef 8305 	mrs	r3, IPSR
 80069d4:	617b      	str	r3, [r7, #20]
  return(result);
 80069d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d17e      	bne.n	8006ada <osThreadNew+0x11a>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d07b      	beq.n	8006ada <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80069e2:	2380      	movs	r3, #128	; 0x80
 80069e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80069e6:	2318      	movs	r3, #24
 80069e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295
 80069f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d045      	beq.n	8006a86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <osThreadNew+0x48>
        name = attr->name;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <osThreadNew+0x6e>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b38      	cmp	r3, #56	; 0x38
 8006a20:	d805      	bhi.n	8006a2e <osThreadNew+0x6e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <osThreadNew+0x72>
        return (NULL);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e054      	b.n	8006adc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	089b      	lsrs	r3, r3, #2
 8006a40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <osThreadNew+0xa8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2bbb      	cmp	r3, #187	; 0xbb
 8006a50:	d90a      	bls.n	8006a68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <osThreadNew+0xa8>
        mem = 1;
 8006a62:	2301      	movs	r3, #1
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	e010      	b.n	8006a8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10c      	bne.n	8006a8a <osThreadNew+0xca>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d108      	bne.n	8006a8a <osThreadNew+0xca>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <osThreadNew+0xca>
          mem = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	e001      	b.n	8006a8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d110      	bne.n	8006ab2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a98:	9202      	str	r2, [sp, #8]
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	6a3a      	ldr	r2, [r7, #32]
 8006aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fe0c 	bl	80076c4 <xTaskCreateStatic>
 8006aac:	4603      	mov	r3, r0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e013      	b.n	8006ada <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d110      	bne.n	8006ada <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	f107 0310 	add.w	r3, r7, #16
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fe57 	bl	800777e <xTaskCreate>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <osThreadNew+0x11a>
            hTask = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ada:	693b      	ldr	r3, [r7, #16]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aec:	f3ef 8305 	mrs	r3, IPSR
 8006af0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006af2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <osDelay+0x1c>
    stat = osErrorISR;
 8006af8:	f06f 0305 	mvn.w	r3, #5
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	e007      	b.n	8006b10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 ff92 	bl	8007a34 <vTaskDelay>
    }
  }

  return (stat);
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a07      	ldr	r2, [pc, #28]	; (8006b48 <vApplicationGetIdleTaskMemory+0x2c>)
 8006b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a06      	ldr	r2, [pc, #24]	; (8006b4c <vApplicationGetIdleTaskMemory+0x30>)
 8006b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	601a      	str	r2, [r3, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	200002a8 	.word	0x200002a8
 8006b4c:	20000364 	.word	0x20000364

08006b50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4a07      	ldr	r2, [pc, #28]	; (8006b7c <vApplicationGetTimerTaskMemory+0x2c>)
 8006b60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4a06      	ldr	r2, [pc, #24]	; (8006b80 <vApplicationGetTimerTaskMemory+0x30>)
 8006b66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b6e:	601a      	str	r2, [r3, #0]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	20000564 	.word	0x20000564
 8006b80:	20000620 	.word	0x20000620

08006b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f103 0208 	add.w	r2, r3, #8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f103 0208 	add.w	r2, r3, #8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f103 0208 	add.w	r2, r3, #8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3c:	d103      	bne.n	8006c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e00c      	b.n	8006c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e002      	b.n	8006c54 <vListInsert+0x2e>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d2f6      	bcs.n	8006c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	601a      	str	r2, [r3, #0]
}
 8006c8c:	bf00      	nop
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6892      	ldr	r2, [r2, #8]
 8006cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6852      	ldr	r2, [r2, #4]
 8006cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d103      	bne.n	8006ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	1e5a      	subs	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d16:	f002 f875 	bl	8008e04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
 8006d2a:	441a      	add	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	3b01      	subs	r3, #1
 8006d48:	68f9      	ldr	r1, [r7, #12]
 8006d4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	441a      	add	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	22ff      	movs	r2, #255	; 0xff
 8006d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d114      	bne.n	8006d96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01a      	beq.n	8006daa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3310      	adds	r3, #16
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 f929 	bl	8007fd0 <xTaskRemoveFromEventList>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d012      	beq.n	8006daa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <xQueueGenericReset+0xcc>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	e009      	b.n	8006daa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3310      	adds	r3, #16
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fef2 	bl	8006b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff feed 	bl	8006b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006daa:	f002 f85b 	bl	8008e64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006dae:	2301      	movs	r3, #1
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08e      	sub	sp, #56	; 0x38
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <xQueueGenericCreateStatic+0x52>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <xQueueGenericCreateStatic+0x56>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <xQueueGenericCreateStatic+0x58>
 8006e12:	2300      	movs	r3, #0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	623b      	str	r3, [r7, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <xQueueGenericCreateStatic+0x7e>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <xQueueGenericCreateStatic+0x82>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <xQueueGenericCreateStatic+0x84>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	61fb      	str	r3, [r7, #28]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e5a:	2350      	movs	r3, #80	; 0x50
 8006e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b50      	cmp	r3, #80	; 0x50
 8006e62:	d00a      	beq.n	8006e7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	61bb      	str	r3, [r7, #24]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00d      	beq.n	8006ea2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4613      	mov	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f805 	bl	8006eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3730      	adds	r7, #48	; 0x30
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e002      	b.n	8006ece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006eda:	2101      	movs	r1, #1
 8006edc:	69b8      	ldr	r0, [r7, #24]
 8006ede:	f7ff ff05 	bl	8006cec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	78fa      	ldrb	r2, [r7, #3]
 8006ee6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08e      	sub	sp, #56	; 0x38
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f02:	2300      	movs	r3, #0
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <xQueueGenericSend+0x32>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <xQueueGenericSend+0x40>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <xQueueGenericSend+0x44>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <xQueueGenericSend+0x46>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <xQueueGenericSend+0x60>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d103      	bne.n	8006f62 <xQueueGenericSend+0x6e>
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <xQueueGenericSend+0x72>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <xQueueGenericSend+0x74>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueGenericSend+0x8e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	623b      	str	r3, [r7, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f82:	f001 f9e7 	bl	8008354 <xTaskGetSchedulerState>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <xQueueGenericSend+0x9e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <xQueueGenericSend+0xa2>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <xQueueGenericSend+0xa4>
 8006f96:	2300      	movs	r3, #0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	61fb      	str	r3, [r7, #28]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fb2:	f001 ff27 	bl	8008e04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <xQueueGenericSend+0xd4>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d129      	bne.n	800701c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fce:	f000 fa0b 	bl	80073e8 <prvCopyDataToQueue>
 8006fd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d010      	beq.n	8006ffe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fff5 	bl	8007fd0 <xTaskRemoveFromEventList>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d013      	beq.n	8007014 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fec:	4b3f      	ldr	r3, [pc, #252]	; (80070ec <xQueueGenericSend+0x1f8>)
 8006fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	e00a      	b.n	8007014 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007004:	4b39      	ldr	r3, [pc, #228]	; (80070ec <xQueueGenericSend+0x1f8>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007014:	f001 ff26 	bl	8008e64 <vPortExitCritical>
				return pdPASS;
 8007018:	2301      	movs	r3, #1
 800701a:	e063      	b.n	80070e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007022:	f001 ff1f 	bl	8008e64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007026:	2300      	movs	r3, #0
 8007028:	e05c      	b.n	80070e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007030:	f107 0314 	add.w	r3, r7, #20
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f82f 	bl	8008098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800703e:	f001 ff11 	bl	8008e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007042:	f000 fd9b 	bl	8007b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007046:	f001 fedd 	bl	8008e04 <vPortEnterCritical>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007050:	b25b      	sxtb	r3, r3
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d103      	bne.n	8007060 <xQueueGenericSend+0x16c>
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007066:	b25b      	sxtb	r3, r3
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d103      	bne.n	8007076 <xQueueGenericSend+0x182>
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007076:	f001 fef5 	bl	8008e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800707a:	1d3a      	adds	r2, r7, #4
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	4611      	mov	r1, r2
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f81e 	bl	80080c4 <xTaskCheckForTimeOut>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d124      	bne.n	80070d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800708e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007090:	f000 faa2 	bl	80075d8 <prvIsQueueFull>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d018      	beq.n	80070cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	3310      	adds	r3, #16
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 ff44 	bl	8007f30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070aa:	f000 fa2d 	bl	8007508 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070ae:	f000 fd73 	bl	8007b98 <xTaskResumeAll>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f47f af7c 	bne.w	8006fb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <xQueueGenericSend+0x1f8>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	e772      	b.n	8006fb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ce:	f000 fa1b 	bl	8007508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070d2:	f000 fd61 	bl	8007b98 <xTaskResumeAll>
 80070d6:	e76c      	b.n	8006fb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070da:	f000 fa15 	bl	8007508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070de:	f000 fd5b 	bl	8007b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3738      	adds	r7, #56	; 0x38
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b090      	sub	sp, #64	; 0x40
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d103      	bne.n	800712c <xQueueGenericSendFromISR+0x3c>
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <xQueueGenericSendFromISR+0x40>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <xQueueGenericSendFromISR+0x42>
 8007130:	2300      	movs	r3, #0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d103      	bne.n	800715a <xQueueGenericSendFromISR+0x6a>
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <xQueueGenericSendFromISR+0x6e>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <xQueueGenericSendFromISR+0x70>
 800715e:	2300      	movs	r3, #0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	623b      	str	r3, [r7, #32]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800717a:	f001 ff25 	bl	8008fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800717e:	f3ef 8211 	mrs	r2, BASEPRI
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	61fa      	str	r2, [r7, #28]
 8007194:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007196:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <xQueueGenericSendFromISR+0xbc>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d12f      	bne.n	800720c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071c2:	f000 f911 	bl	80073e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d112      	bne.n	80071f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d016      	beq.n	8007206 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	3324      	adds	r3, #36	; 0x24
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fef7 	bl	8007fd0 <xTaskRemoveFromEventList>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00e      	beq.n	8007206 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e007      	b.n	8007206 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071fa:	3301      	adds	r3, #1
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	b25a      	sxtb	r2, r3
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007206:	2301      	movs	r3, #1
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800720a:	e001      	b.n	8007210 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800720c:	2300      	movs	r3, #0
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007212:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800721a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800721e:	4618      	mov	r0, r3
 8007220:	3740      	adds	r7, #64	; 0x40
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08c      	sub	sp, #48	; 0x30
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007234:	2300      	movs	r3, #0
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <xQueueReceive+0x30>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	623b      	str	r3, [r7, #32]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <xQueueReceive+0x3e>
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <xQueueReceive+0x42>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <xQueueReceive+0x44>
 800726a:	2300      	movs	r3, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xQueueReceive+0x5e>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	61fb      	str	r3, [r7, #28]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007286:	f001 f865 	bl	8008354 <xTaskGetSchedulerState>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d102      	bne.n	8007296 <xQueueReceive+0x6e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <xQueueReceive+0x72>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <xQueueReceive+0x74>
 800729a:	2300      	movs	r3, #0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <xQueueReceive+0x8e>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	61bb      	str	r3, [r7, #24]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072b6:	f001 fda5 	bl	8008e04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01f      	beq.n	8007306 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072ca:	f000 f8f7 	bl	80074bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	1e5a      	subs	r2, r3, #1
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00f      	beq.n	80072fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	3310      	adds	r3, #16
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fe74 	bl	8007fd0 <xTaskRemoveFromEventList>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072ee:	4b3d      	ldr	r3, [pc, #244]	; (80073e4 <xQueueReceive+0x1bc>)
 80072f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072fe:	f001 fdb1 	bl	8008e64 <vPortExitCritical>
				return pdPASS;
 8007302:	2301      	movs	r3, #1
 8007304:	e069      	b.n	80073da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800730c:	f001 fdaa 	bl	8008e64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007310:	2300      	movs	r3, #0
 8007312:	e062      	b.n	80073da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	4618      	mov	r0, r3
 8007320:	f000 feba 	bl	8008098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007328:	f001 fd9c 	bl	8008e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800732c:	f000 fc26 	bl	8007b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007330:	f001 fd68 	bl	8008e04 <vPortEnterCritical>
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800733a:	b25b      	sxtb	r3, r3
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d103      	bne.n	800734a <xQueueReceive+0x122>
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007350:	b25b      	sxtb	r3, r3
 8007352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007356:	d103      	bne.n	8007360 <xQueueReceive+0x138>
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007360:	f001 fd80 	bl	8008e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007364:	1d3a      	adds	r2, r7, #4
 8007366:	f107 0310 	add.w	r3, r7, #16
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fea9 	bl	80080c4 <xTaskCheckForTimeOut>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d123      	bne.n	80073c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800737a:	f000 f917 	bl	80075ac <prvIsQueueEmpty>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d017      	beq.n	80073b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	3324      	adds	r3, #36	; 0x24
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4611      	mov	r1, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fdcf 	bl	8007f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007394:	f000 f8b8 	bl	8007508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007398:	f000 fbfe 	bl	8007b98 <xTaskResumeAll>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d189      	bne.n	80072b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80073a2:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <xQueueReceive+0x1bc>)
 80073a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	e780      	b.n	80072b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073b6:	f000 f8a7 	bl	8007508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073ba:	f000 fbed 	bl	8007b98 <xTaskResumeAll>
 80073be:	e77a      	b.n	80072b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c2:	f000 f8a1 	bl	8007508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073c6:	f000 fbe7 	bl	8007b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073cc:	f000 f8ee 	bl	80075ac <prvIsQueueEmpty>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f43f af6f 	beq.w	80072b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3730      	adds	r7, #48	; 0x30
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	e000ed04 	.word	0xe000ed04

080073e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d14d      	bne.n	80074aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 ffbc 	bl	8008390 <xTaskPriorityDisinherit>
 8007418:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	609a      	str	r2, [r3, #8]
 8007420:	e043      	b.n	80074aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d119      	bne.n	800745c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6858      	ldr	r0, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	461a      	mov	r2, r3
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	f002 f926 	bl	8009684 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	441a      	add	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	d32b      	bcc.n	80074aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	e026      	b.n	80074aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68d8      	ldr	r0, [r3, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	461a      	mov	r2, r3
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	f002 f90c 	bl	8009684 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	425b      	negs	r3, r3
 8007476:	441a      	add	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d207      	bcs.n	8007498 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	425b      	negs	r3, r3
 8007492:	441a      	add	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d105      	bne.n	80074aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80074b2:	697b      	ldr	r3, [r7, #20]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d018      	beq.n	8007500 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	441a      	add	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d303      	bcc.n	80074f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68d9      	ldr	r1, [r3, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	461a      	mov	r2, r3
 80074fa:	6838      	ldr	r0, [r7, #0]
 80074fc:	f002 f8c2 	bl	8009684 <memcpy>
	}
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007510:	f001 fc78 	bl	8008e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800751a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800751c:	e011      	b.n	8007542 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d012      	beq.n	800754c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3324      	adds	r3, #36	; 0x24
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fd50 	bl	8007fd0 <xTaskRemoveFromEventList>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007536:	f000 fe27 	bl	8008188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	3b01      	subs	r3, #1
 800753e:	b2db      	uxtb	r3, r3
 8007540:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007546:	2b00      	cmp	r3, #0
 8007548:	dce9      	bgt.n	800751e <prvUnlockQueue+0x16>
 800754a:	e000      	b.n	800754e <prvUnlockQueue+0x46>
					break;
 800754c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	22ff      	movs	r2, #255	; 0xff
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007556:	f001 fc85 	bl	8008e64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800755a:	f001 fc53 	bl	8008e04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007564:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007566:	e011      	b.n	800758c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d012      	beq.n	8007596 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3310      	adds	r3, #16
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fd2b 	bl	8007fd0 <xTaskRemoveFromEventList>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007580:	f000 fe02 	bl	8008188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	3b01      	subs	r3, #1
 8007588:	b2db      	uxtb	r3, r3
 800758a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800758c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007590:	2b00      	cmp	r3, #0
 8007592:	dce9      	bgt.n	8007568 <prvUnlockQueue+0x60>
 8007594:	e000      	b.n	8007598 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007596:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	22ff      	movs	r2, #255	; 0xff
 800759c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80075a0:	f001 fc60 	bl	8008e64 <vPortExitCritical>
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075b4:	f001 fc26 	bl	8008e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d102      	bne.n	80075c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e001      	b.n	80075ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075ca:	f001 fc4b 	bl	8008e64 <vPortExitCritical>

	return xReturn;
 80075ce:	68fb      	ldr	r3, [r7, #12]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075e0:	f001 fc10 	bl	8008e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d102      	bne.n	80075f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075f0:	2301      	movs	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e001      	b.n	80075fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075fa:	f001 fc33 	bl	8008e64 <vPortExitCritical>

	return xReturn;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	e014      	b.n	8007642 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007618:	4a0f      	ldr	r2, [pc, #60]	; (8007658 <vQueueAddToRegistry+0x50>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10b      	bne.n	800763c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007624:	490c      	ldr	r1, [pc, #48]	; (8007658 <vQueueAddToRegistry+0x50>)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800762e:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <vQueueAddToRegistry+0x50>)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	4413      	add	r3, r2
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800763a:	e006      	b.n	800764a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b07      	cmp	r3, #7
 8007646:	d9e7      	bls.n	8007618 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	200059b0 	.word	0x200059b0

0800765c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800766c:	f001 fbca 	bl	8008e04 <vPortEnterCritical>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007676:	b25b      	sxtb	r3, r3
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d103      	bne.n	8007686 <vQueueWaitForMessageRestricted+0x2a>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800768c:	b25b      	sxtb	r3, r3
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d103      	bne.n	800769c <vQueueWaitForMessageRestricted+0x40>
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800769c:	f001 fbe2 	bl	8008e64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d106      	bne.n	80076b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3324      	adds	r3, #36	; 0x24
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fc61 	bl	8007f78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076b6:	6978      	ldr	r0, [r7, #20]
 80076b8:	f7ff ff26 	bl	8007508 <prvUnlockQueue>
	}
 80076bc:	bf00      	nop
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08e      	sub	sp, #56	; 0x38
 80076c8:	af04      	add	r7, sp, #16
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	623b      	str	r3, [r7, #32]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xTaskCreateStatic+0x46>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	61fb      	str	r3, [r7, #28]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800770a:	23bc      	movs	r3, #188	; 0xbc
 800770c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2bbc      	cmp	r3, #188	; 0xbc
 8007712:	d00a      	beq.n	800772a <xTaskCreateStatic+0x66>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	61bb      	str	r3, [r7, #24]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800772a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01e      	beq.n	8007770 <xTaskCreateStatic+0xac>
 8007732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007734:	2b00      	cmp	r3, #0
 8007736:	d01b      	beq.n	8007770 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007740:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	2202      	movs	r2, #2
 8007746:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800774a:	2300      	movs	r3, #0
 800774c:	9303      	str	r3, [sp, #12]
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	9302      	str	r3, [sp, #8]
 8007752:	f107 0314 	add.w	r3, r7, #20
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f850 	bl	8007808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800776a:	f000 f8f3 	bl	8007954 <prvAddNewTaskToReadyList>
 800776e:	e001      	b.n	8007774 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007774:	697b      	ldr	r3, [r7, #20]
	}
 8007776:	4618      	mov	r0, r3
 8007778:	3728      	adds	r7, #40	; 0x28
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800777e:	b580      	push	{r7, lr}
 8007780:	b08c      	sub	sp, #48	; 0x30
 8007782:	af04      	add	r7, sp, #16
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	603b      	str	r3, [r7, #0]
 800778a:	4613      	mov	r3, r2
 800778c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fc58 	bl	8009048 <pvPortMalloc>
 8007798:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00e      	beq.n	80077be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077a0:	20bc      	movs	r0, #188	; 0xbc
 80077a2:	f001 fc51 	bl	8009048 <pvPortMalloc>
 80077a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30
 80077b4:	e005      	b.n	80077c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f001 fd12 	bl	80091e0 <vPortFree>
 80077bc:	e001      	b.n	80077c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d017      	beq.n	80077f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	2300      	movs	r3, #0
 80077d4:	9303      	str	r3, [sp, #12]
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	9302      	str	r3, [sp, #8]
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 f80e 	bl	8007808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077ec:	69f8      	ldr	r0, [r7, #28]
 80077ee:	f000 f8b1 	bl	8007954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077f2:	2301      	movs	r3, #1
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	e002      	b.n	80077fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077f8:	f04f 33ff 	mov.w	r3, #4294967295
 80077fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	461a      	mov	r2, r3
 8007820:	21a5      	movs	r1, #165	; 0xa5
 8007822:	f001 ff3d 	bl	80096a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007830:	3b01      	subs	r3, #1
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f003 0307 	and.w	r3, r3, #7
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <prvInitialiseNewTask+0x58>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	617b      	str	r3, [r7, #20]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01f      	beq.n	80078a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e012      	b.n	8007892 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	7819      	ldrb	r1, [r3, #0]
 8007874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	4413      	add	r3, r2
 800787a:	3334      	adds	r3, #52	; 0x34
 800787c:	460a      	mov	r2, r1
 800787e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d006      	beq.n	800789a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	3301      	adds	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	2b0f      	cmp	r3, #15
 8007896:	d9e9      	bls.n	800786c <prvInitialiseNewTask+0x64>
 8007898:	e000      	b.n	800789c <prvInitialiseNewTask+0x94>
			{
				break;
 800789a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a4:	e003      	b.n	80078ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	2b37      	cmp	r3, #55	; 0x37
 80078b2:	d901      	bls.n	80078b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078b4:	2337      	movs	r3, #55	; 0x37
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	2200      	movs	r2, #0
 80078c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	3304      	adds	r3, #4
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff f978 	bl	8006bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	3318      	adds	r3, #24
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff f973 	bl	8006bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	3354      	adds	r3, #84	; 0x54
 8007908:	2260      	movs	r2, #96	; 0x60
 800790a:	2100      	movs	r1, #0
 800790c:	4618      	mov	r0, r3
 800790e:	f001 fec7 	bl	80096a0 <memset>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	4a0c      	ldr	r2, [pc, #48]	; (8007948 <prvInitialiseNewTask+0x140>)
 8007916:	659a      	str	r2, [r3, #88]	; 0x58
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	4a0c      	ldr	r2, [pc, #48]	; (800794c <prvInitialiseNewTask+0x144>)
 800791c:	65da      	str	r2, [r3, #92]	; 0x5c
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	4a0b      	ldr	r2, [pc, #44]	; (8007950 <prvInitialiseNewTask+0x148>)
 8007922:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	69b8      	ldr	r0, [r7, #24]
 800792a:	f001 f941 	bl	8008bb0 <pxPortInitialiseStack>
 800792e:	4602      	mov	r2, r0
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800793e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007940:	bf00      	nop
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	0800c424 	.word	0x0800c424
 800794c:	0800c444 	.word	0x0800c444
 8007950:	0800c404 	.word	0x0800c404

08007954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800795c:	f001 fa52 	bl	8008e04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007960:	4b2d      	ldr	r3, [pc, #180]	; (8007a18 <prvAddNewTaskToReadyList+0xc4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	4a2c      	ldr	r2, [pc, #176]	; (8007a18 <prvAddNewTaskToReadyList+0xc4>)
 8007968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800796a:	4b2c      	ldr	r3, [pc, #176]	; (8007a1c <prvAddNewTaskToReadyList+0xc8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007972:	4a2a      	ldr	r2, [pc, #168]	; (8007a1c <prvAddNewTaskToReadyList+0xc8>)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007978:	4b27      	ldr	r3, [pc, #156]	; (8007a18 <prvAddNewTaskToReadyList+0xc4>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d110      	bne.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007980:	f000 fc26 	bl	80081d0 <prvInitialiseTaskLists>
 8007984:	e00d      	b.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <prvAddNewTaskToReadyList+0xcc>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800798e:	4b23      	ldr	r3, [pc, #140]	; (8007a1c <prvAddNewTaskToReadyList+0xc8>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	429a      	cmp	r2, r3
 800799a:	d802      	bhi.n	80079a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800799c:	4a1f      	ldr	r2, [pc, #124]	; (8007a1c <prvAddNewTaskToReadyList+0xc8>)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <prvAddNewTaskToReadyList+0xd0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3301      	adds	r3, #1
 80079a8:	4a1e      	ldr	r2, [pc, #120]	; (8007a24 <prvAddNewTaskToReadyList+0xd0>)
 80079aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079ac:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <prvAddNewTaskToReadyList+0xd0>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <prvAddNewTaskToReadyList+0xd4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d903      	bls.n	80079c8 <prvAddNewTaskToReadyList+0x74>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <prvAddNewTaskToReadyList+0xd4>)
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <prvAddNewTaskToReadyList+0xd8>)
 80079d6:	441a      	add	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f7ff f8fd 	bl	8006bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079e4:	f001 fa3e 	bl	8008e64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <prvAddNewTaskToReadyList+0xcc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00e      	beq.n	8007a0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <prvAddNewTaskToReadyList+0xc8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d207      	bcs.n	8007a0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <prvAddNewTaskToReadyList+0xdc>)
 8007a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000ef4 	.word	0x20000ef4
 8007a1c:	20000a20 	.word	0x20000a20
 8007a20:	20000f00 	.word	0x20000f00
 8007a24:	20000f10 	.word	0x20000f10
 8007a28:	20000efc 	.word	0x20000efc
 8007a2c:	20000a24 	.word	0x20000a24
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d017      	beq.n	8007a76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a46:	4b13      	ldr	r3, [pc, #76]	; (8007a94 <vTaskDelay+0x60>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <vTaskDelay+0x30>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60bb      	str	r3, [r7, #8]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a64:	f000 f88a 	bl	8007b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a68:	2100      	movs	r1, #0
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fcfe 	bl	800846c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a70:	f000 f892 	bl	8007b98 <xTaskResumeAll>
 8007a74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d107      	bne.n	8007a8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <vTaskDelay+0x64>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000f1c 	.word	0x20000f1c
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08a      	sub	sp, #40	; 0x28
 8007aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007aaa:	463a      	mov	r2, r7
 8007aac:	1d39      	adds	r1, r7, #4
 8007aae:	f107 0308 	add.w	r3, r7, #8
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff f832 	bl	8006b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	9202      	str	r2, [sp, #8]
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	460a      	mov	r2, r1
 8007aca:	4924      	ldr	r1, [pc, #144]	; (8007b5c <vTaskStartScheduler+0xc0>)
 8007acc:	4824      	ldr	r0, [pc, #144]	; (8007b60 <vTaskStartScheduler+0xc4>)
 8007ace:	f7ff fdf9 	bl	80076c4 <xTaskCreateStatic>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4a23      	ldr	r2, [pc, #140]	; (8007b64 <vTaskStartScheduler+0xc8>)
 8007ad6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ad8:	4b22      	ldr	r3, [pc, #136]	; (8007b64 <vTaskStartScheduler+0xc8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	e001      	b.n	8007aea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d102      	bne.n	8007af6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007af0:	f000 fd10 	bl	8008514 <xTimerCreateTimerTask>
 8007af4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d11b      	bne.n	8007b34 <vTaskStartScheduler+0x98>
	__asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	613b      	str	r3, [r7, #16]
}
 8007b0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b10:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <vTaskStartScheduler+0xcc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3354      	adds	r3, #84	; 0x54
 8007b16:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <vTaskStartScheduler+0xd0>)
 8007b18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b1a:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <vTaskStartScheduler+0xd4>)
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b22:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <vTaskStartScheduler+0xd8>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b28:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <vTaskStartScheduler+0xdc>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b2e:	f001 f8c7 	bl	8008cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b32:	e00e      	b.n	8007b52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d10a      	bne.n	8007b52 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	60fb      	str	r3, [r7, #12]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <vTaskStartScheduler+0xb4>
}
 8007b52:	bf00      	nop
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0800c38c 	.word	0x0800c38c
 8007b60:	080081a1 	.word	0x080081a1
 8007b64:	20000f18 	.word	0x20000f18
 8007b68:	20000a20 	.word	0x20000a20
 8007b6c:	2000002c 	.word	0x2000002c
 8007b70:	20000f14 	.word	0x20000f14
 8007b74:	20000f00 	.word	0x20000f00
 8007b78:	20000ef8 	.word	0x20000ef8

08007b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <vTaskSuspendAll+0x18>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3301      	adds	r3, #1
 8007b86:	4a03      	ldr	r2, [pc, #12]	; (8007b94 <vTaskSuspendAll+0x18>)
 8007b88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b8a:	bf00      	nop
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	20000f1c 	.word	0x20000f1c

08007b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ba6:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <xTaskResumeAll+0x118>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	603b      	str	r3, [r7, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bc4:	f001 f91e 	bl	8008e04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bc8:	4b39      	ldr	r3, [pc, #228]	; (8007cb0 <xTaskResumeAll+0x118>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	4a38      	ldr	r2, [pc, #224]	; (8007cb0 <xTaskResumeAll+0x118>)
 8007bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd2:	4b37      	ldr	r3, [pc, #220]	; (8007cb0 <xTaskResumeAll+0x118>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d162      	bne.n	8007ca0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bda:	4b36      	ldr	r3, [pc, #216]	; (8007cb4 <xTaskResumeAll+0x11c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d05e      	beq.n	8007ca0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007be2:	e02f      	b.n	8007c44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be4:	4b34      	ldr	r3, [pc, #208]	; (8007cb8 <xTaskResumeAll+0x120>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3318      	adds	r3, #24
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff f851 	bl	8006c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff f84c 	bl	8006c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4b2d      	ldr	r3, [pc, #180]	; (8007cbc <xTaskResumeAll+0x124>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d903      	bls.n	8007c14 <xTaskResumeAll+0x7c>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	4a2a      	ldr	r2, [pc, #168]	; (8007cbc <xTaskResumeAll+0x124>)
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4a27      	ldr	r2, [pc, #156]	; (8007cc0 <xTaskResumeAll+0x128>)
 8007c22:	441a      	add	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fe ffd7 	bl	8006bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	4b23      	ldr	r3, [pc, #140]	; (8007cc4 <xTaskResumeAll+0x12c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c3e:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <xTaskResumeAll+0x130>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c44:	4b1c      	ldr	r3, [pc, #112]	; (8007cb8 <xTaskResumeAll+0x120>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1cb      	bne.n	8007be4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c52:	f000 fb5f 	bl	8008314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c56:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <xTaskResumeAll+0x134>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d010      	beq.n	8007c84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c62:	f000 f847 	bl	8007cf4 <xTaskIncrementTick>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c6c:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <xTaskResumeAll+0x130>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1f1      	bne.n	8007c62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <xTaskResumeAll+0x134>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c84:	4b10      	ldr	r3, [pc, #64]	; (8007cc8 <xTaskResumeAll+0x130>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d009      	beq.n	8007ca0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <xTaskResumeAll+0x138>)
 8007c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ca0:	f001 f8e0 	bl	8008e64 <vPortExitCritical>

	return xAlreadyYielded;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20000f1c 	.word	0x20000f1c
 8007cb4:	20000ef4 	.word	0x20000ef4
 8007cb8:	20000eb4 	.word	0x20000eb4
 8007cbc:	20000efc 	.word	0x20000efc
 8007cc0:	20000a24 	.word	0x20000a24
 8007cc4:	20000a20 	.word	0x20000a20
 8007cc8:	20000f08 	.word	0x20000f08
 8007ccc:	20000f04 	.word	0x20000f04
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <xTaskGetTickCount+0x1c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ce0:	687b      	ldr	r3, [r7, #4]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20000ef8 	.word	0x20000ef8

08007cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cfe:	4b4f      	ldr	r3, [pc, #316]	; (8007e3c <xTaskIncrementTick+0x148>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f040 808f 	bne.w	8007e26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d08:	4b4d      	ldr	r3, [pc, #308]	; (8007e40 <xTaskIncrementTick+0x14c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d10:	4a4b      	ldr	r2, [pc, #300]	; (8007e40 <xTaskIncrementTick+0x14c>)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d120      	bne.n	8007d5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d1c:	4b49      	ldr	r3, [pc, #292]	; (8007e44 <xTaskIncrementTick+0x150>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <xTaskIncrementTick+0x48>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	603b      	str	r3, [r7, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <xTaskIncrementTick+0x46>
 8007d3c:	4b41      	ldr	r3, [pc, #260]	; (8007e44 <xTaskIncrementTick+0x150>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	4b41      	ldr	r3, [pc, #260]	; (8007e48 <xTaskIncrementTick+0x154>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a3f      	ldr	r2, [pc, #252]	; (8007e44 <xTaskIncrementTick+0x150>)
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	4a3f      	ldr	r2, [pc, #252]	; (8007e48 <xTaskIncrementTick+0x154>)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	4b3e      	ldr	r3, [pc, #248]	; (8007e4c <xTaskIncrementTick+0x158>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	4a3d      	ldr	r2, [pc, #244]	; (8007e4c <xTaskIncrementTick+0x158>)
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	f000 fadb 	bl	8008314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d5e:	4b3c      	ldr	r3, [pc, #240]	; (8007e50 <xTaskIncrementTick+0x15c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d349      	bcc.n	8007dfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d68:	4b36      	ldr	r3, [pc, #216]	; (8007e44 <xTaskIncrementTick+0x150>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d104      	bne.n	8007d7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d72:	4b37      	ldr	r3, [pc, #220]	; (8007e50 <xTaskIncrementTick+0x15c>)
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	601a      	str	r2, [r3, #0]
					break;
 8007d7a:	e03f      	b.n	8007dfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d7c:	4b31      	ldr	r3, [pc, #196]	; (8007e44 <xTaskIncrementTick+0x150>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d203      	bcs.n	8007d9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d94:	4a2e      	ldr	r2, [pc, #184]	; (8007e50 <xTaskIncrementTick+0x15c>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d9a:	e02f      	b.n	8007dfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe ff79 	bl	8006c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d004      	beq.n	8007db8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	3318      	adds	r3, #24
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe ff70 	bl	8006c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbc:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <xTaskIncrementTick+0x160>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d903      	bls.n	8007dcc <xTaskIncrementTick+0xd8>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	4a22      	ldr	r2, [pc, #136]	; (8007e54 <xTaskIncrementTick+0x160>)
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <xTaskIncrementTick+0x164>)
 8007dda:	441a      	add	r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f7fe fefb 	bl	8006bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <xTaskIncrementTick+0x168>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d3b8      	bcc.n	8007d68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007df6:	2301      	movs	r3, #1
 8007df8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dfa:	e7b5      	b.n	8007d68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007dfc:	4b17      	ldr	r3, [pc, #92]	; (8007e5c <xTaskIncrementTick+0x168>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e02:	4915      	ldr	r1, [pc, #84]	; (8007e58 <xTaskIncrementTick+0x164>)
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d901      	bls.n	8007e18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e14:	2301      	movs	r3, #1
 8007e16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e18:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <xTaskIncrementTick+0x16c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	e004      	b.n	8007e30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e26:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <xTaskIncrementTick+0x170>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	4a0d      	ldr	r2, [pc, #52]	; (8007e64 <xTaskIncrementTick+0x170>)
 8007e2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e30:	697b      	ldr	r3, [r7, #20]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000f1c 	.word	0x20000f1c
 8007e40:	20000ef8 	.word	0x20000ef8
 8007e44:	20000eac 	.word	0x20000eac
 8007e48:	20000eb0 	.word	0x20000eb0
 8007e4c:	20000f0c 	.word	0x20000f0c
 8007e50:	20000f14 	.word	0x20000f14
 8007e54:	20000efc 	.word	0x20000efc
 8007e58:	20000a24 	.word	0x20000a24
 8007e5c:	20000a20 	.word	0x20000a20
 8007e60:	20000f08 	.word	0x20000f08
 8007e64:	20000f04 	.word	0x20000f04

08007e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e6e:	4b2a      	ldr	r3, [pc, #168]	; (8007f18 <vTaskSwitchContext+0xb0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e76:	4b29      	ldr	r3, [pc, #164]	; (8007f1c <vTaskSwitchContext+0xb4>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e7c:	e046      	b.n	8007f0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007e7e:	4b27      	ldr	r3, [pc, #156]	; (8007f1c <vTaskSwitchContext+0xb4>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e84:	4b26      	ldr	r3, [pc, #152]	; (8007f20 <vTaskSwitchContext+0xb8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e010      	b.n	8007eae <vTaskSwitchContext+0x46>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	607b      	str	r3, [r7, #4]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <vTaskSwitchContext+0x3e>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	491d      	ldr	r1, [pc, #116]	; (8007f24 <vTaskSwitchContext+0xbc>)
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0e4      	beq.n	8007e8c <vTaskSwitchContext+0x24>
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4a15      	ldr	r2, [pc, #84]	; (8007f24 <vTaskSwitchContext+0xbc>)
 8007ece:	4413      	add	r3, r2
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	605a      	str	r2, [r3, #4]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d104      	bne.n	8007ef2 <vTaskSwitchContext+0x8a>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4a0b      	ldr	r2, [pc, #44]	; (8007f28 <vTaskSwitchContext+0xc0>)
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <vTaskSwitchContext+0xb8>)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <vTaskSwitchContext+0xc0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3354      	adds	r3, #84	; 0x54
 8007f08:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <vTaskSwitchContext+0xc4>)
 8007f0a:	6013      	str	r3, [r2, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	20000f1c 	.word	0x20000f1c
 8007f1c:	20000f08 	.word	0x20000f08
 8007f20:	20000efc 	.word	0x20000efc
 8007f24:	20000a24 	.word	0x20000a24
 8007f28:	20000a20 	.word	0x20000a20
 8007f2c:	2000002c 	.word	0x2000002c

08007f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60fb      	str	r3, [r7, #12]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f56:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <vTaskPlaceOnEventList+0x44>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fe fe61 	bl	8006c26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f64:	2101      	movs	r1, #1
 8007f66:	6838      	ldr	r0, [r7, #0]
 8007f68:	f000 fa80 	bl	800846c <prvAddCurrentTaskToDelayedList>
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000a20 	.word	0x20000a20

08007f78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10a      	bne.n	8007fa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	617b      	str	r3, [r7, #20]
}
 8007f9c:	bf00      	nop
 8007f9e:	e7fe      	b.n	8007f9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <vTaskPlaceOnEventListRestricted+0x54>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3318      	adds	r3, #24
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7fe fe18 	bl	8006bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68b8      	ldr	r0, [r7, #8]
 8007fbe:	f000 fa55 	bl	800846c <prvAddCurrentTaskToDelayedList>
	}
 8007fc2:	bf00      	nop
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000a20 	.word	0x20000a20

08007fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	60fb      	str	r3, [r7, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	3318      	adds	r3, #24
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fe49 	bl	8006c98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008006:	4b1e      	ldr	r3, [pc, #120]	; (8008080 <xTaskRemoveFromEventList+0xb0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d11d      	bne.n	800804a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fe40 	bl	8006c98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	4b19      	ldr	r3, [pc, #100]	; (8008084 <xTaskRemoveFromEventList+0xb4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d903      	bls.n	800802c <xTaskRemoveFromEventList+0x5c>
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4a16      	ldr	r2, [pc, #88]	; (8008084 <xTaskRemoveFromEventList+0xb4>)
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4a13      	ldr	r2, [pc, #76]	; (8008088 <xTaskRemoveFromEventList+0xb8>)
 800803a:	441a      	add	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	3304      	adds	r3, #4
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f7fe fdcb 	bl	8006bde <vListInsertEnd>
 8008048:	e005      	b.n	8008056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	3318      	adds	r3, #24
 800804e:	4619      	mov	r1, r3
 8008050:	480e      	ldr	r0, [pc, #56]	; (800808c <xTaskRemoveFromEventList+0xbc>)
 8008052:	f7fe fdc4 	bl	8006bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805a:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <xTaskRemoveFromEventList+0xc0>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	429a      	cmp	r2, r3
 8008062:	d905      	bls.n	8008070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <xTaskRemoveFromEventList+0xc4>)
 800806a:	2201      	movs	r2, #1
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e001      	b.n	8008074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008074:	697b      	ldr	r3, [r7, #20]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20000f1c 	.word	0x20000f1c
 8008084:	20000efc 	.word	0x20000efc
 8008088:	20000a24 	.word	0x20000a24
 800808c:	20000eb4 	.word	0x20000eb4
 8008090:	20000a20 	.word	0x20000a20
 8008094:	20000f08 	.word	0x20000f08

08008098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <vTaskInternalSetTimeOutState+0x24>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080a8:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <vTaskInternalSetTimeOutState+0x28>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	605a      	str	r2, [r3, #4]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20000f0c 	.word	0x20000f0c
 80080c0:	20000ef8 	.word	0x20000ef8

080080c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	613b      	str	r3, [r7, #16]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60fb      	str	r3, [r7, #12]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008106:	f000 fe7d 	bl	8008e04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800810a:	4b1d      	ldr	r3, [pc, #116]	; (8008180 <xTaskCheckForTimeOut+0xbc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008122:	d102      	bne.n	800812a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	e023      	b.n	8008172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b15      	ldr	r3, [pc, #84]	; (8008184 <xTaskCheckForTimeOut+0xc0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d007      	beq.n	8008146 <xTaskCheckForTimeOut+0x82>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	429a      	cmp	r2, r3
 800813e:	d302      	bcc.n	8008146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008140:	2301      	movs	r3, #1
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e015      	b.n	8008172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	429a      	cmp	r2, r3
 800814e:	d20b      	bcs.n	8008168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff ff9b 	bl	8008098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	e004      	b.n	8008172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800816e:	2301      	movs	r3, #1
 8008170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008172:	f000 fe77 	bl	8008e64 <vPortExitCritical>

	return xReturn;
 8008176:	69fb      	ldr	r3, [r7, #28]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000ef8 	.word	0x20000ef8
 8008184:	20000f0c 	.word	0x20000f0c

08008188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800818c:	4b03      	ldr	r3, [pc, #12]	; (800819c <vTaskMissedYield+0x14>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
}
 8008192:	bf00      	nop
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	20000f08 	.word	0x20000f08

080081a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081a8:	f000 f852 	bl	8008250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <prvIdleTask+0x28>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d9f9      	bls.n	80081a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <prvIdleTask+0x2c>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081c4:	e7f0      	b.n	80081a8 <prvIdleTask+0x8>
 80081c6:	bf00      	nop
 80081c8:	20000a24 	.word	0x20000a24
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081d6:	2300      	movs	r3, #0
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	e00c      	b.n	80081f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a12      	ldr	r2, [pc, #72]	; (8008230 <prvInitialiseTaskLists+0x60>)
 80081e8:	4413      	add	r3, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe fcca 	bl	8006b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3301      	adds	r3, #1
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b37      	cmp	r3, #55	; 0x37
 80081fa:	d9ef      	bls.n	80081dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081fc:	480d      	ldr	r0, [pc, #52]	; (8008234 <prvInitialiseTaskLists+0x64>)
 80081fe:	f7fe fcc1 	bl	8006b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008202:	480d      	ldr	r0, [pc, #52]	; (8008238 <prvInitialiseTaskLists+0x68>)
 8008204:	f7fe fcbe 	bl	8006b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008208:	480c      	ldr	r0, [pc, #48]	; (800823c <prvInitialiseTaskLists+0x6c>)
 800820a:	f7fe fcbb 	bl	8006b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800820e:	480c      	ldr	r0, [pc, #48]	; (8008240 <prvInitialiseTaskLists+0x70>)
 8008210:	f7fe fcb8 	bl	8006b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008214:	480b      	ldr	r0, [pc, #44]	; (8008244 <prvInitialiseTaskLists+0x74>)
 8008216:	f7fe fcb5 	bl	8006b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800821a:	4b0b      	ldr	r3, [pc, #44]	; (8008248 <prvInitialiseTaskLists+0x78>)
 800821c:	4a05      	ldr	r2, [pc, #20]	; (8008234 <prvInitialiseTaskLists+0x64>)
 800821e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008220:	4b0a      	ldr	r3, [pc, #40]	; (800824c <prvInitialiseTaskLists+0x7c>)
 8008222:	4a05      	ldr	r2, [pc, #20]	; (8008238 <prvInitialiseTaskLists+0x68>)
 8008224:	601a      	str	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000a24 	.word	0x20000a24
 8008234:	20000e84 	.word	0x20000e84
 8008238:	20000e98 	.word	0x20000e98
 800823c:	20000eb4 	.word	0x20000eb4
 8008240:	20000ec8 	.word	0x20000ec8
 8008244:	20000ee0 	.word	0x20000ee0
 8008248:	20000eac 	.word	0x20000eac
 800824c:	20000eb0 	.word	0x20000eb0

08008250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008256:	e019      	b.n	800828c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008258:	f000 fdd4 	bl	8008e04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825c:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <prvCheckTasksWaitingTermination+0x50>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fd15 	bl	8006c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800826e:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3b01      	subs	r3, #1
 8008274:	4a0b      	ldr	r2, [pc, #44]	; (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3b01      	subs	r3, #1
 800827e:	4a0a      	ldr	r2, [pc, #40]	; (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 8008280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008282:	f000 fdef 	bl	8008e64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f810 	bl	80082ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e1      	bne.n	8008258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000ec8 	.word	0x20000ec8
 80082a4:	20000ef4 	.word	0x20000ef4
 80082a8:	20000edc 	.word	0x20000edc

080082ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3354      	adds	r3, #84	; 0x54
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 ff1b 	bl	800a0f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d108      	bne.n	80082da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 ff87 	bl	80091e0 <vPortFree>
				vPortFree( pxTCB );
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 ff84 	bl	80091e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082d8:	e018      	b.n	800830c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d103      	bne.n	80082ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 ff7b 	bl	80091e0 <vPortFree>
	}
 80082ea:	e00f      	b.n	800830c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d00a      	beq.n	800830c <prvDeleteTCB+0x60>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	60fb      	str	r3, [r7, #12]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <prvDeleteTCB+0x5e>
	}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800831a:	4b0c      	ldr	r3, [pc, #48]	; (800834c <prvResetNextTaskUnblockTime+0x38>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008324:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <prvResetNextTaskUnblockTime+0x3c>)
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800832c:	e008      	b.n	8008340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832e:	4b07      	ldr	r3, [pc, #28]	; (800834c <prvResetNextTaskUnblockTime+0x38>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	4a04      	ldr	r2, [pc, #16]	; (8008350 <prvResetNextTaskUnblockTime+0x3c>)
 800833e:	6013      	str	r3, [r2, #0]
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	20000eac 	.word	0x20000eac
 8008350:	20000f14 	.word	0x20000f14

08008354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800835a:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <xTaskGetSchedulerState+0x34>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008362:	2301      	movs	r3, #1
 8008364:	607b      	str	r3, [r7, #4]
 8008366:	e008      	b.n	800837a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008368:	4b08      	ldr	r3, [pc, #32]	; (800838c <xTaskGetSchedulerState+0x38>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008370:	2302      	movs	r3, #2
 8008372:	607b      	str	r3, [r7, #4]
 8008374:	e001      	b.n	800837a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800837a:	687b      	ldr	r3, [r7, #4]
	}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	20000f00 	.word	0x20000f00
 800838c:	20000f1c 	.word	0x20000f1c

08008390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d056      	beq.n	8008454 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083a6:	4b2e      	ldr	r3, [pc, #184]	; (8008460 <xTaskPriorityDisinherit+0xd0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d00a      	beq.n	80083c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	60fb      	str	r3, [r7, #12]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60bb      	str	r3, [r7, #8]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e8:	1e5a      	subs	r2, r3, #1
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d02c      	beq.n	8008454 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d128      	bne.n	8008454 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fc46 	bl	8006c98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008424:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <xTaskPriorityDisinherit+0xd4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d903      	bls.n	8008434 <xTaskPriorityDisinherit+0xa4>
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	4a0c      	ldr	r2, [pc, #48]	; (8008464 <xTaskPriorityDisinherit+0xd4>)
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4a09      	ldr	r2, [pc, #36]	; (8008468 <xTaskPriorityDisinherit+0xd8>)
 8008442:	441a      	add	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	3304      	adds	r3, #4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fe fbc7 	bl	8006bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008450:	2301      	movs	r3, #1
 8008452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008454:	697b      	ldr	r3, [r7, #20]
	}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000a20 	.word	0x20000a20
 8008464:	20000efc 	.word	0x20000efc
 8008468:	20000a24 	.word	0x20000a24

0800846c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008476:	4b21      	ldr	r3, [pc, #132]	; (80084fc <prvAddCurrentTaskToDelayedList+0x90>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800847c:	4b20      	ldr	r3, [pc, #128]	; (8008500 <prvAddCurrentTaskToDelayedList+0x94>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fc08 	bl	8006c98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848e:	d10a      	bne.n	80084a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008496:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <prvAddCurrentTaskToDelayedList+0x94>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3304      	adds	r3, #4
 800849c:	4619      	mov	r1, r3
 800849e:	4819      	ldr	r0, [pc, #100]	; (8008504 <prvAddCurrentTaskToDelayedList+0x98>)
 80084a0:	f7fe fb9d 	bl	8006bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a4:	e026      	b.n	80084f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4413      	add	r3, r2
 80084ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084ae:	4b14      	ldr	r3, [pc, #80]	; (8008500 <prvAddCurrentTaskToDelayedList+0x94>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d209      	bcs.n	80084d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084be:	4b12      	ldr	r3, [pc, #72]	; (8008508 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <prvAddCurrentTaskToDelayedList+0x94>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3304      	adds	r3, #4
 80084c8:	4619      	mov	r1, r3
 80084ca:	4610      	mov	r0, r2
 80084cc:	f7fe fbab 	bl	8006c26 <vListInsert>
}
 80084d0:	e010      	b.n	80084f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d2:	4b0e      	ldr	r3, [pc, #56]	; (800850c <prvAddCurrentTaskToDelayedList+0xa0>)
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <prvAddCurrentTaskToDelayedList+0x94>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7fe fba1 	bl	8006c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e4:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d202      	bcs.n	80084f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084ee:	4a08      	ldr	r2, [pc, #32]	; (8008510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6013      	str	r3, [r2, #0]
}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000ef8 	.word	0x20000ef8
 8008500:	20000a20 	.word	0x20000a20
 8008504:	20000ee0 	.word	0x20000ee0
 8008508:	20000eb0 	.word	0x20000eb0
 800850c:	20000eac 	.word	0x20000eac
 8008510:	20000f14 	.word	0x20000f14

08008514 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08a      	sub	sp, #40	; 0x28
 8008518:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800851e:	f000 fb07 	bl	8008b30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <xTimerCreateTimerTask+0x80>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d021      	beq.n	800856e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008532:	1d3a      	adds	r2, r7, #4
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe fb07 	bl	8006b50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	9202      	str	r2, [sp, #8]
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	2302      	movs	r3, #2
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	2300      	movs	r3, #0
 8008552:	460a      	mov	r2, r1
 8008554:	4910      	ldr	r1, [pc, #64]	; (8008598 <xTimerCreateTimerTask+0x84>)
 8008556:	4811      	ldr	r0, [pc, #68]	; (800859c <xTimerCreateTimerTask+0x88>)
 8008558:	f7ff f8b4 	bl	80076c4 <xTaskCreateStatic>
 800855c:	4603      	mov	r3, r0
 800855e:	4a10      	ldr	r2, [pc, #64]	; (80085a0 <xTimerCreateTimerTask+0x8c>)
 8008560:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008562:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <xTimerCreateTimerTask+0x8c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800856a:	2301      	movs	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	613b      	str	r3, [r7, #16]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800858a:	697b      	ldr	r3, [r7, #20]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20000f50 	.word	0x20000f50
 8008598:	0800c394 	.word	0x0800c394
 800859c:	080086d9 	.word	0x080086d9
 80085a0:	20000f54 	.word	0x20000f54

080085a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08a      	sub	sp, #40	; 0x28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	623b      	str	r3, [r7, #32]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085d2:	4b1a      	ldr	r3, [pc, #104]	; (800863c <xTimerGenericCommand+0x98>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d02a      	beq.n	8008630 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b05      	cmp	r3, #5
 80085ea:	dc18      	bgt.n	800861e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085ec:	f7ff feb2 	bl	8008354 <xTaskGetSchedulerState>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d109      	bne.n	800860a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085f6:	4b11      	ldr	r3, [pc, #68]	; (800863c <xTimerGenericCommand+0x98>)
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	f107 0110 	add.w	r1, r7, #16
 80085fe:	2300      	movs	r3, #0
 8008600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008602:	f7fe fc77 	bl	8006ef4 <xQueueGenericSend>
 8008606:	6278      	str	r0, [r7, #36]	; 0x24
 8008608:	e012      	b.n	8008630 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800860a:	4b0c      	ldr	r3, [pc, #48]	; (800863c <xTimerGenericCommand+0x98>)
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	f107 0110 	add.w	r1, r7, #16
 8008612:	2300      	movs	r3, #0
 8008614:	2200      	movs	r2, #0
 8008616:	f7fe fc6d 	bl	8006ef4 <xQueueGenericSend>
 800861a:	6278      	str	r0, [r7, #36]	; 0x24
 800861c:	e008      	b.n	8008630 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800861e:	4b07      	ldr	r3, [pc, #28]	; (800863c <xTimerGenericCommand+0x98>)
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	f107 0110 	add.w	r1, r7, #16
 8008626:	2300      	movs	r3, #0
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	f7fe fd61 	bl	80070f0 <xQueueGenericSendFromISR>
 800862e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008632:	4618      	mov	r0, r3
 8008634:	3728      	adds	r7, #40	; 0x28
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000f50 	.word	0x20000f50

08008640 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af02      	add	r7, sp, #8
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800864a:	4b22      	ldr	r3, [pc, #136]	; (80086d4 <prvProcessExpiredTimer+0x94>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3304      	adds	r3, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fb1d 	bl	8006c98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d022      	beq.n	80086b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	18d1      	adds	r1, r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	6978      	ldr	r0, [r7, #20]
 800867a:	f000 f8d1 	bl	8008820 <prvInsertTimerInActiveList>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01f      	beq.n	80086c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008684:	2300      	movs	r3, #0
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	2300      	movs	r3, #0
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	2100      	movs	r1, #0
 800868e:	6978      	ldr	r0, [r7, #20]
 8008690:	f7ff ff88 	bl	80085a4 <xTimerGenericCommand>
 8008694:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d113      	bne.n	80086c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	60fb      	str	r3, [r7, #12]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b8:	f023 0301 	bic.w	r3, r3, #1
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	6978      	ldr	r0, [r7, #20]
 80086ca:	4798      	blx	r3
}
 80086cc:	bf00      	nop
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000f48 	.word	0x20000f48

080086d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086e0:	f107 0308 	add.w	r3, r7, #8
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f857 	bl	8008798 <prvGetNextExpireTime>
 80086ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	4619      	mov	r1, r3
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f803 	bl	80086fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086f6:	f000 f8d5 	bl	80088a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086fa:	e7f1      	b.n	80086e0 <prvTimerTask+0x8>

080086fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008706:	f7ff fa39 	bl	8007b7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800870a:	f107 0308 	add.w	r3, r7, #8
 800870e:	4618      	mov	r0, r3
 8008710:	f000 f866 	bl	80087e0 <prvSampleTimeNow>
 8008714:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d130      	bne.n	800877e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <prvProcessTimerOrBlockTask+0x3c>
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	429a      	cmp	r2, r3
 8008728:	d806      	bhi.n	8008738 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800872a:	f7ff fa35 	bl	8007b98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ff85 	bl	8008640 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008736:	e024      	b.n	8008782 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d008      	beq.n	8008750 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800873e:	4b13      	ldr	r3, [pc, #76]	; (800878c <prvProcessTimerOrBlockTask+0x90>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <prvProcessTimerOrBlockTask+0x50>
 8008748:	2301      	movs	r3, #1
 800874a:	e000      	b.n	800874e <prvProcessTimerOrBlockTask+0x52>
 800874c:	2300      	movs	r3, #0
 800874e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008750:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <prvProcessTimerOrBlockTask+0x94>)
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4619      	mov	r1, r3
 800875e:	f7fe ff7d 	bl	800765c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008762:	f7ff fa19 	bl	8007b98 <xTaskResumeAll>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800876c:	4b09      	ldr	r3, [pc, #36]	; (8008794 <prvProcessTimerOrBlockTask+0x98>)
 800876e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	f3bf 8f6f 	isb	sy
}
 800877c:	e001      	b.n	8008782 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800877e:	f7ff fa0b 	bl	8007b98 <xTaskResumeAll>
}
 8008782:	bf00      	nop
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000f4c 	.word	0x20000f4c
 8008790:	20000f50 	.word	0x20000f50
 8008794:	e000ed04 	.word	0xe000ed04

08008798 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087a0:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <prvGetNextExpireTime+0x44>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <prvGetNextExpireTime+0x16>
 80087aa:	2201      	movs	r2, #1
 80087ac:	e000      	b.n	80087b0 <prvGetNextExpireTime+0x18>
 80087ae:	2200      	movs	r2, #0
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d105      	bne.n	80087c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <prvGetNextExpireTime+0x44>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	e001      	b.n	80087cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000f48 	.word	0x20000f48

080087e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087e8:	f7ff fa74 	bl	8007cd4 <xTaskGetTickCount>
 80087ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <prvSampleTimeNow+0x3c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d205      	bcs.n	8008804 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087f8:	f000 f936 	bl	8008a68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e002      	b.n	800880a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800880a:	4a04      	ldr	r2, [pc, #16]	; (800881c <prvSampleTimeNow+0x3c>)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008810:	68fb      	ldr	r3, [r7, #12]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000f58 	.word	0x20000f58

08008820 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d812      	bhi.n	800886c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	429a      	cmp	r2, r3
 8008852:	d302      	bcc.n	800885a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008854:	2301      	movs	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e01b      	b.n	8008892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800885a:	4b10      	ldr	r3, [pc, #64]	; (800889c <prvInsertTimerInActiveList+0x7c>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3304      	adds	r3, #4
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f7fe f9de 	bl	8006c26 <vListInsert>
 800886a:	e012      	b.n	8008892 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	429a      	cmp	r2, r3
 8008872:	d206      	bcs.n	8008882 <prvInsertTimerInActiveList+0x62>
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d302      	bcc.n	8008882 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800887c:	2301      	movs	r3, #1
 800887e:	617b      	str	r3, [r7, #20]
 8008880:	e007      	b.n	8008892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <prvInsertTimerInActiveList+0x80>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3304      	adds	r3, #4
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f7fe f9ca 	bl	8006c26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008892:	697b      	ldr	r3, [r7, #20]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20000f4c 	.word	0x20000f4c
 80088a0:	20000f48 	.word	0x20000f48

080088a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b08e      	sub	sp, #56	; 0x38
 80088a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088aa:	e0ca      	b.n	8008a42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	da18      	bge.n	80088e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088b2:	1d3b      	adds	r3, r7, #4
 80088b4:	3304      	adds	r3, #4
 80088b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	61fb      	str	r3, [r7, #28]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088da:	6850      	ldr	r0, [r2, #4]
 80088dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088de:	6892      	ldr	r2, [r2, #8]
 80088e0:	4611      	mov	r1, r2
 80088e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f2c0 80aa 	blt.w	8008a40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	3304      	adds	r3, #4
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe f9cb 	bl	8006c98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008902:	463b      	mov	r3, r7
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff ff6b 	bl	80087e0 <prvSampleTimeNow>
 800890a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b09      	cmp	r3, #9
 8008910:	f200 8097 	bhi.w	8008a42 <prvProcessReceivedCommands+0x19e>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <prvProcessReceivedCommands+0x78>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008945 	.word	0x08008945
 8008920:	08008945 	.word	0x08008945
 8008924:	08008945 	.word	0x08008945
 8008928:	080089b9 	.word	0x080089b9
 800892c:	080089cd 	.word	0x080089cd
 8008930:	08008a17 	.word	0x08008a17
 8008934:	08008945 	.word	0x08008945
 8008938:	08008945 	.word	0x08008945
 800893c:	080089b9 	.word	0x080089b9
 8008940:	080089cd 	.word	0x080089cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800894a:	f043 0301 	orr.w	r3, r3, #1
 800894e:	b2da      	uxtb	r2, r3
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	18d1      	adds	r1, r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008964:	f7ff ff5c 	bl	8008820 <prvInsertTimerInActiveList>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d069      	beq.n	8008a42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008974:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800897c:	f003 0304 	and.w	r3, r3, #4
 8008980:	2b00      	cmp	r3, #0
 8008982:	d05e      	beq.n	8008a42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	441a      	add	r2, r3
 800898c:	2300      	movs	r3, #0
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	2300      	movs	r3, #0
 8008992:	2100      	movs	r1, #0
 8008994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008996:	f7ff fe05 	bl	80085a4 <xTimerGenericCommand>
 800899a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d14f      	bne.n	8008a42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	61bb      	str	r3, [r7, #24]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089be:	f023 0301 	bic.w	r3, r3, #1
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80089ca:	e03a      	b.n	8008a42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089d2:	f043 0301 	orr.w	r3, r3, #1
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	617b      	str	r3, [r7, #20]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	18d1      	adds	r1, r2, r3
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a10:	f7ff ff06 	bl	8008820 <prvInsertTimerInActiveList>
					break;
 8008a14:	e015      	b.n	8008a42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d103      	bne.n	8008a2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a26:	f000 fbdb 	bl	80091e0 <vPortFree>
 8008a2a:	e00a      	b.n	8008a42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a3e:	e000      	b.n	8008a42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <prvProcessReceivedCommands+0x1c0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	1d39      	adds	r1, r7, #4
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fbec 	bl	8007228 <xQueueReceive>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f47f af2a 	bne.w	80088ac <prvProcessReceivedCommands+0x8>
	}
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	3730      	adds	r7, #48	; 0x30
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000f50 	.word	0x20000f50

08008a68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a6e:	e048      	b.n	8008b02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a70:	4b2d      	ldr	r3, [pc, #180]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe f905 	bl	8006c98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d02e      	beq.n	8008b02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d90e      	bls.n	8008ad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ac2:	4b19      	ldr	r3, [pc, #100]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f7fe f8aa 	bl	8006c26 <vListInsert>
 8008ad2:	e016      	b.n	8008b02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	2100      	movs	r1, #0
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7ff fd60 	bl	80085a4 <xTimerGenericCommand>
 8008ae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	603b      	str	r3, [r7, #0]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b02:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1b1      	bne.n	8008a70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b12:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <prvSwitchTimerLists+0xc4>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a04      	ldr	r2, [pc, #16]	; (8008b28 <prvSwitchTimerLists+0xc0>)
 8008b18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b1a:	4a04      	ldr	r2, [pc, #16]	; (8008b2c <prvSwitchTimerLists+0xc4>)
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	6013      	str	r3, [r2, #0]
}
 8008b20:	bf00      	nop
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000f48 	.word	0x20000f48
 8008b2c:	20000f4c 	.word	0x20000f4c

08008b30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b36:	f000 f965 	bl	8008e04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d120      	bne.n	8008b84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b42:	4814      	ldr	r0, [pc, #80]	; (8008b94 <prvCheckForValidListAndQueue+0x64>)
 8008b44:	f7fe f81e 	bl	8006b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b48:	4813      	ldr	r0, [pc, #76]	; (8008b98 <prvCheckForValidListAndQueue+0x68>)
 8008b4a:	f7fe f81b 	bl	8006b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <prvCheckForValidListAndQueue+0x6c>)
 8008b50:	4a10      	ldr	r2, [pc, #64]	; (8008b94 <prvCheckForValidListAndQueue+0x64>)
 8008b52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b54:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <prvCheckForValidListAndQueue+0x70>)
 8008b56:	4a10      	ldr	r2, [pc, #64]	; (8008b98 <prvCheckForValidListAndQueue+0x68>)
 8008b58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <prvCheckForValidListAndQueue+0x74>)
 8008b60:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <prvCheckForValidListAndQueue+0x78>)
 8008b62:	2110      	movs	r1, #16
 8008b64:	200a      	movs	r0, #10
 8008b66:	f7fe f929 	bl	8006dbc <xQueueGenericCreateStatic>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	4a08      	ldr	r2, [pc, #32]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <prvCheckForValidListAndQueue+0x60>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	490b      	ldr	r1, [pc, #44]	; (8008bac <prvCheckForValidListAndQueue+0x7c>)
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fd42 	bl	8007608 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b84:	f000 f96e 	bl	8008e64 <vPortExitCritical>
}
 8008b88:	bf00      	nop
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000f50 	.word	0x20000f50
 8008b94:	20000f20 	.word	0x20000f20
 8008b98:	20000f34 	.word	0x20000f34
 8008b9c:	20000f48 	.word	0x20000f48
 8008ba0:	20000f4c 	.word	0x20000f4c
 8008ba4:	20000ffc 	.word	0x20000ffc
 8008ba8:	20000f5c 	.word	0x20000f5c
 8008bac:	0800c39c 	.word	0x0800c39c

08008bb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3b04      	subs	r3, #4
 8008bc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f023 0201 	bic.w	r2, r3, #1
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3b04      	subs	r3, #4
 8008bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008be0:	4a0c      	ldr	r2, [pc, #48]	; (8008c14 <pxPortInitialiseStack+0x64>)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3b14      	subs	r3, #20
 8008bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f06f 0202 	mvn.w	r2, #2
 8008bfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3b20      	subs	r3, #32
 8008c04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c06:	68fb      	ldr	r3, [r7, #12]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	08008c19 	.word	0x08008c19

08008c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c22:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <prvTaskExitError+0x54>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d00a      	beq.n	8008c42 <prvTaskExitError+0x2a>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	60fb      	str	r3, [r7, #12]
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <prvTaskExitError+0x28>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60bb      	str	r3, [r7, #8]
}
 8008c54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c56:	bf00      	nop
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0fc      	beq.n	8008c58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c5e:	bf00      	nop
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000028 	.word	0x20000028

08008c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <pxCurrentTCBConst2>)
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	6808      	ldr	r0, [r1, #0]
 8008c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	f380 8809 	msr	PSP, r0
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	4770      	bx	lr
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst2>:
 8008c90:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c98:	4808      	ldr	r0, [pc, #32]	; (8008cbc <prvPortStartFirstTask+0x24>)
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f380 8808 	msr	MSP, r0
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8814 	msr	CONTROL, r0
 8008caa:	b662      	cpsie	i
 8008cac:	b661      	cpsie	f
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	df00      	svc	0
 8008cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cba:	bf00      	nop
 8008cbc:	e000ed08 	.word	0xe000ed08

08008cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cc6:	4b46      	ldr	r3, [pc, #280]	; (8008de0 <xPortStartScheduler+0x120>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a46      	ldr	r2, [pc, #280]	; (8008de4 <xPortStartScheduler+0x124>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10a      	bne.n	8008ce6 <xPortStartScheduler+0x26>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	613b      	str	r3, [r7, #16]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ce6:	4b3e      	ldr	r3, [pc, #248]	; (8008de0 <xPortStartScheduler+0x120>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a3f      	ldr	r2, [pc, #252]	; (8008de8 <xPortStartScheduler+0x128>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10a      	bne.n	8008d06 <xPortStartScheduler+0x46>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60fb      	str	r3, [r7, #12]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d06:	4b39      	ldr	r3, [pc, #228]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	22ff      	movs	r2, #255	; 0xff
 8008d16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	4b31      	ldr	r3, [pc, #196]	; (8008df0 <xPortStartScheduler+0x130>)
 8008d2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d2e:	4b31      	ldr	r3, [pc, #196]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d34:	e009      	b.n	8008d4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d36:	4b2f      	ldr	r3, [pc, #188]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	4a2d      	ldr	r2, [pc, #180]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b80      	cmp	r3, #128	; 0x80
 8008d54:	d0ef      	beq.n	8008d36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d56:	4b27      	ldr	r3, [pc, #156]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f1c3 0307 	rsb	r3, r3, #7
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d00a      	beq.n	8008d78 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	60bb      	str	r3, [r7, #8]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d78:	4b1e      	ldr	r3, [pc, #120]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d8a:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d96:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <xPortStartScheduler+0x138>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <xPortStartScheduler+0x138>)
 8008d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008da0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008da2:	4b15      	ldr	r3, [pc, #84]	; (8008df8 <xPortStartScheduler+0x138>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a14      	ldr	r2, [pc, #80]	; (8008df8 <xPortStartScheduler+0x138>)
 8008da8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dae:	f000 f8dd 	bl	8008f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008db2:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <xPortStartScheduler+0x13c>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008db8:	f000 f8fc 	bl	8008fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dbc:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <xPortStartScheduler+0x140>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0f      	ldr	r2, [pc, #60]	; (8008e00 <xPortStartScheduler+0x140>)
 8008dc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008dc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dc8:	f7ff ff66 	bl	8008c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dcc:	f7ff f84c 	bl	8007e68 <vTaskSwitchContext>
	prvTaskExitError();
 8008dd0:	f7ff ff22 	bl	8008c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	e000ed00 	.word	0xe000ed00
 8008de4:	410fc271 	.word	0x410fc271
 8008de8:	410fc270 	.word	0x410fc270
 8008dec:	e000e400 	.word	0xe000e400
 8008df0:	2000104c 	.word	0x2000104c
 8008df4:	20001050 	.word	0x20001050
 8008df8:	e000ed20 	.word	0xe000ed20
 8008dfc:	20000028 	.word	0x20000028
 8008e00:	e000ef34 	.word	0xe000ef34

08008e04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	607b      	str	r3, [r7, #4]
}
 8008e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <vPortEnterCritical+0x58>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	4a0d      	ldr	r2, [pc, #52]	; (8008e5c <vPortEnterCritical+0x58>)
 8008e26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e28:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <vPortEnterCritical+0x58>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d10f      	bne.n	8008e50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <vPortEnterCritical+0x5c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	603b      	str	r3, [r7, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <vPortEnterCritical+0x4a>
	}
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20000028 	.word	0x20000028
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e6a:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <vPortExitCritical+0x24>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	607b      	str	r3, [r7, #4]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	4a09      	ldr	r2, [pc, #36]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e92:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d105      	bne.n	8008ea6 <vPortExitCritical+0x42>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	f383 8811 	msr	BASEPRI, r3
}
 8008ea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20000028 	.word	0x20000028
	...

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ee4:	f380 8811 	msr	BASEPRI, r0
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f7fe ffba 	bl	8007e68 <vTaskSwitchContext>
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f380 8811 	msr	BASEPRI, r0
 8008efc:	bc09      	pop	{r0, r3}
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	6808      	ldr	r0, [r1, #0]
 8008f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f06:	f01e 0f10 	tst.w	lr, #16
 8008f0a:	bf08      	it	eq
 8008f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f10:	f380 8809 	msr	PSP, r0
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst>:
 8008f20:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f7fe fed7 	bl	8007cf4 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <xPortSysTickHandler+0x40>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <vPortSetupTimerInterrupt+0x38>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	; (8008fac <vPortSetupTimerInterrupt+0x40>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	4a09      	ldr	r2, [pc, #36]	; (8008fb0 <vPortSetupTimerInterrupt+0x44>)
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8e:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010
 8008fa4:	e000e018 	.word	0xe000e018
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	e000e014 	.word	0xe000e014

08008fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fc4 <vPortEnableVFP+0x10>
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fbe:	6001      	str	r1, [r0, #0]
 8008fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed88 	.word	0xe000ed88

08008fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fce:	f3ef 8305 	mrs	r3, IPSR
 8008fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b0f      	cmp	r3, #15
 8008fd8:	d914      	bls.n	8009004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <vPortValidateInterruptPriority+0x70>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <vPortValidateInterruptPriority+0x74>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	7afa      	ldrb	r2, [r7, #11]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d20a      	bcs.n	8009004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009004:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <vPortValidateInterruptPriority+0x78>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <vPortValidateInterruptPriority+0x7c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d90a      	bls.n	800902a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	603b      	str	r3, [r7, #0]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <vPortValidateInterruptPriority+0x60>
	}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	e000e3f0 	.word	0xe000e3f0
 800903c:	2000104c 	.word	0x2000104c
 8009040:	e000ed0c 	.word	0xe000ed0c
 8009044:	20001050 	.word	0x20001050

08009048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009054:	f7fe fd92 	bl	8007b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009058:	4b5b      	ldr	r3, [pc, #364]	; (80091c8 <pvPortMalloc+0x180>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009060:	f000 f920 	bl	80092a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009064:	4b59      	ldr	r3, [pc, #356]	; (80091cc <pvPortMalloc+0x184>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	f040 8093 	bne.w	8009198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d01d      	beq.n	80090b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009078:	2208      	movs	r2, #8
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b00      	cmp	r3, #0
 8009088:	d014      	beq.n	80090b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f023 0307 	bic.w	r3, r3, #7
 8009090:	3308      	adds	r3, #8
 8009092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <pvPortMalloc+0x6c>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	617b      	str	r3, [r7, #20]
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d06e      	beq.n	8009198 <pvPortMalloc+0x150>
 80090ba:	4b45      	ldr	r3, [pc, #276]	; (80091d0 <pvPortMalloc+0x188>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d869      	bhi.n	8009198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090c4:	4b43      	ldr	r3, [pc, #268]	; (80091d4 <pvPortMalloc+0x18c>)
 80090c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090c8:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <pvPortMalloc+0x18c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ce:	e004      	b.n	80090da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <pvPortMalloc+0xa4>
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1f1      	bne.n	80090d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090ec:	4b36      	ldr	r3, [pc, #216]	; (80091c8 <pvPortMalloc+0x180>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d050      	beq.n	8009198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2208      	movs	r2, #8
 80090fc:	4413      	add	r3, r2
 80090fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	2308      	movs	r3, #8
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d91f      	bls.n	8009158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <pvPortMalloc+0xf8>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	613b      	str	r3, [r7, #16]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	1ad2      	subs	r2, r2, r3
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009152:	69b8      	ldr	r0, [r7, #24]
 8009154:	f000 f908 	bl	8009368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009158:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <pvPortMalloc+0x188>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <pvPortMalloc+0x188>)
 8009164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009166:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <pvPortMalloc+0x188>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <pvPortMalloc+0x190>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d203      	bcs.n	800917a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009172:	4b17      	ldr	r3, [pc, #92]	; (80091d0 <pvPortMalloc+0x188>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <pvPortMalloc+0x190>)
 8009178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	4b13      	ldr	r3, [pc, #76]	; (80091cc <pvPortMalloc+0x184>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	431a      	orrs	r2, r3
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800918e:	4b13      	ldr	r3, [pc, #76]	; (80091dc <pvPortMalloc+0x194>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3301      	adds	r3, #1
 8009194:	4a11      	ldr	r2, [pc, #68]	; (80091dc <pvPortMalloc+0x194>)
 8009196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009198:	f7fe fcfe 	bl	8007b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <pvPortMalloc+0x174>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	60fb      	str	r3, [r7, #12]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <pvPortMalloc+0x172>
	return pvReturn;
 80091bc:	69fb      	ldr	r3, [r7, #28]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3728      	adds	r7, #40	; 0x28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20004c5c 	.word	0x20004c5c
 80091cc:	20004c70 	.word	0x20004c70
 80091d0:	20004c60 	.word	0x20004c60
 80091d4:	20004c54 	.word	0x20004c54
 80091d8:	20004c64 	.word	0x20004c64
 80091dc:	20004c68 	.word	0x20004c68

080091e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d04d      	beq.n	800928e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091f2:	2308      	movs	r3, #8
 80091f4:	425b      	negs	r3, r3
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	4b24      	ldr	r3, [pc, #144]	; (8009298 <vPortFree+0xb8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4013      	ands	r3, r2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <vPortFree+0x44>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60fb      	str	r3, [r7, #12]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <vPortFree+0x62>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	60bb      	str	r3, [r7, #8]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <vPortFree+0xb8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4013      	ands	r3, r2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01e      	beq.n	800928e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d11a      	bne.n	800928e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <vPortFree+0xb8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	43db      	mvns	r3, r3
 8009262:	401a      	ands	r2, r3
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009268:	f7fe fc88 	bl	8007b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	4b0a      	ldr	r3, [pc, #40]	; (800929c <vPortFree+0xbc>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4413      	add	r3, r2
 8009276:	4a09      	ldr	r2, [pc, #36]	; (800929c <vPortFree+0xbc>)
 8009278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f000 f874 	bl	8009368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <vPortFree+0xc0>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	4a06      	ldr	r2, [pc, #24]	; (80092a0 <vPortFree+0xc0>)
 8009288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800928a:	f7fe fc85 	bl	8007b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800928e:	bf00      	nop
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20004c70 	.word	0x20004c70
 800929c:	20004c60 	.word	0x20004c60
 80092a0:	20004c6c 	.word	0x20004c6c

080092a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80092ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092b0:	4b27      	ldr	r3, [pc, #156]	; (8009350 <prvHeapInit+0xac>)
 80092b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00c      	beq.n	80092d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3307      	adds	r3, #7
 80092c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0307 	bic.w	r3, r3, #7
 80092ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	4a1f      	ldr	r2, [pc, #124]	; (8009350 <prvHeapInit+0xac>)
 80092d4:	4413      	add	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092dc:	4a1d      	ldr	r2, [pc, #116]	; (8009354 <prvHeapInit+0xb0>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092e2:	4b1c      	ldr	r3, [pc, #112]	; (8009354 <prvHeapInit+0xb0>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	4413      	add	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092f0:	2208      	movs	r2, #8
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0307 	bic.w	r3, r3, #7
 80092fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4a15      	ldr	r2, [pc, #84]	; (8009358 <prvHeapInit+0xb4>)
 8009304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009306:	4b14      	ldr	r3, [pc, #80]	; (8009358 <prvHeapInit+0xb4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2200      	movs	r2, #0
 800930c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800930e:	4b12      	ldr	r3, [pc, #72]	; (8009358 <prvHeapInit+0xb4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	1ad2      	subs	r2, r2, r3
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009324:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <prvHeapInit+0xb4>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	4a0a      	ldr	r2, [pc, #40]	; (800935c <prvHeapInit+0xb8>)
 8009332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	4a09      	ldr	r2, [pc, #36]	; (8009360 <prvHeapInit+0xbc>)
 800933a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800933c:	4b09      	ldr	r3, [pc, #36]	; (8009364 <prvHeapInit+0xc0>)
 800933e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009342:	601a      	str	r2, [r3, #0]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	20001054 	.word	0x20001054
 8009354:	20004c54 	.word	0x20004c54
 8009358:	20004c5c 	.word	0x20004c5c
 800935c:	20004c64 	.word	0x20004c64
 8009360:	20004c60 	.word	0x20004c60
 8009364:	20004c70 	.word	0x20004c70

08009368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009370:	4b28      	ldr	r3, [pc, #160]	; (8009414 <prvInsertBlockIntoFreeList+0xac>)
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e002      	b.n	800937c <prvInsertBlockIntoFreeList+0x14>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	429a      	cmp	r2, r3
 8009384:	d8f7      	bhi.n	8009376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	4413      	add	r3, r2
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	429a      	cmp	r2, r3
 8009396:	d108      	bne.n	80093aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	441a      	add	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	441a      	add	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d118      	bne.n	80093f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	4b15      	ldr	r3, [pc, #84]	; (8009418 <prvInsertBlockIntoFreeList+0xb0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d00d      	beq.n	80093e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	441a      	add	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	e008      	b.n	80093f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093e6:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <prvInsertBlockIntoFreeList+0xb0>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e003      	b.n	80093f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d002      	beq.n	8009406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009406:	bf00      	nop
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	20004c54 	.word	0x20004c54
 8009418:	20004c5c 	.word	0x20004c5c

0800941c <__errno>:
 800941c:	4b01      	ldr	r3, [pc, #4]	; (8009424 <__errno+0x8>)
 800941e:	6818      	ldr	r0, [r3, #0]
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	2000002c 	.word	0x2000002c

08009428 <std>:
 8009428:	2300      	movs	r3, #0
 800942a:	b510      	push	{r4, lr}
 800942c:	4604      	mov	r4, r0
 800942e:	e9c0 3300 	strd	r3, r3, [r0]
 8009432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009436:	6083      	str	r3, [r0, #8]
 8009438:	8181      	strh	r1, [r0, #12]
 800943a:	6643      	str	r3, [r0, #100]	; 0x64
 800943c:	81c2      	strh	r2, [r0, #14]
 800943e:	6183      	str	r3, [r0, #24]
 8009440:	4619      	mov	r1, r3
 8009442:	2208      	movs	r2, #8
 8009444:	305c      	adds	r0, #92	; 0x5c
 8009446:	f000 f92b 	bl	80096a0 <memset>
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <std+0x38>)
 800944c:	6263      	str	r3, [r4, #36]	; 0x24
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <std+0x3c>)
 8009450:	62a3      	str	r3, [r4, #40]	; 0x28
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <std+0x40>)
 8009454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <std+0x44>)
 8009458:	6224      	str	r4, [r4, #32]
 800945a:	6323      	str	r3, [r4, #48]	; 0x30
 800945c:	bd10      	pop	{r4, pc}
 800945e:	bf00      	nop
 8009460:	0800a20d 	.word	0x0800a20d
 8009464:	0800a22f 	.word	0x0800a22f
 8009468:	0800a267 	.word	0x0800a267
 800946c:	0800a28b 	.word	0x0800a28b

08009470 <_cleanup_r>:
 8009470:	4901      	ldr	r1, [pc, #4]	; (8009478 <_cleanup_r+0x8>)
 8009472:	f000 b8af 	b.w	80095d4 <_fwalk_reent>
 8009476:	bf00      	nop
 8009478:	0800b0d5 	.word	0x0800b0d5

0800947c <__sfmoreglue>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	1e4a      	subs	r2, r1, #1
 8009480:	2568      	movs	r5, #104	; 0x68
 8009482:	4355      	muls	r5, r2
 8009484:	460e      	mov	r6, r1
 8009486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800948a:	f000 f961 	bl	8009750 <_malloc_r>
 800948e:	4604      	mov	r4, r0
 8009490:	b140      	cbz	r0, 80094a4 <__sfmoreglue+0x28>
 8009492:	2100      	movs	r1, #0
 8009494:	e9c0 1600 	strd	r1, r6, [r0]
 8009498:	300c      	adds	r0, #12
 800949a:	60a0      	str	r0, [r4, #8]
 800949c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094a0:	f000 f8fe 	bl	80096a0 <memset>
 80094a4:	4620      	mov	r0, r4
 80094a6:	bd70      	pop	{r4, r5, r6, pc}

080094a8 <__sfp_lock_acquire>:
 80094a8:	4801      	ldr	r0, [pc, #4]	; (80094b0 <__sfp_lock_acquire+0x8>)
 80094aa:	f000 b8d8 	b.w	800965e <__retarget_lock_acquire_recursive>
 80094ae:	bf00      	nop
 80094b0:	200059f8 	.word	0x200059f8

080094b4 <__sfp_lock_release>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__sfp_lock_release+0x8>)
 80094b6:	f000 b8d3 	b.w	8009660 <__retarget_lock_release_recursive>
 80094ba:	bf00      	nop
 80094bc:	200059f8 	.word	0x200059f8

080094c0 <__sinit_lock_acquire>:
 80094c0:	4801      	ldr	r0, [pc, #4]	; (80094c8 <__sinit_lock_acquire+0x8>)
 80094c2:	f000 b8cc 	b.w	800965e <__retarget_lock_acquire_recursive>
 80094c6:	bf00      	nop
 80094c8:	200059f3 	.word	0x200059f3

080094cc <__sinit_lock_release>:
 80094cc:	4801      	ldr	r0, [pc, #4]	; (80094d4 <__sinit_lock_release+0x8>)
 80094ce:	f000 b8c7 	b.w	8009660 <__retarget_lock_release_recursive>
 80094d2:	bf00      	nop
 80094d4:	200059f3 	.word	0x200059f3

080094d8 <__sinit>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	4604      	mov	r4, r0
 80094dc:	f7ff fff0 	bl	80094c0 <__sinit_lock_acquire>
 80094e0:	69a3      	ldr	r3, [r4, #24]
 80094e2:	b11b      	cbz	r3, 80094ec <__sinit+0x14>
 80094e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e8:	f7ff bff0 	b.w	80094cc <__sinit_lock_release>
 80094ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094f0:	6523      	str	r3, [r4, #80]	; 0x50
 80094f2:	4b13      	ldr	r3, [pc, #76]	; (8009540 <__sinit+0x68>)
 80094f4:	4a13      	ldr	r2, [pc, #76]	; (8009544 <__sinit+0x6c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	bf04      	itt	eq
 80094fe:	2301      	moveq	r3, #1
 8009500:	61a3      	streq	r3, [r4, #24]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f820 	bl	8009548 <__sfp>
 8009508:	6060      	str	r0, [r4, #4]
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f81c 	bl	8009548 <__sfp>
 8009510:	60a0      	str	r0, [r4, #8]
 8009512:	4620      	mov	r0, r4
 8009514:	f000 f818 	bl	8009548 <__sfp>
 8009518:	2200      	movs	r2, #0
 800951a:	60e0      	str	r0, [r4, #12]
 800951c:	2104      	movs	r1, #4
 800951e:	6860      	ldr	r0, [r4, #4]
 8009520:	f7ff ff82 	bl	8009428 <std>
 8009524:	68a0      	ldr	r0, [r4, #8]
 8009526:	2201      	movs	r2, #1
 8009528:	2109      	movs	r1, #9
 800952a:	f7ff ff7d 	bl	8009428 <std>
 800952e:	68e0      	ldr	r0, [r4, #12]
 8009530:	2202      	movs	r2, #2
 8009532:	2112      	movs	r1, #18
 8009534:	f7ff ff78 	bl	8009428 <std>
 8009538:	2301      	movs	r3, #1
 800953a:	61a3      	str	r3, [r4, #24]
 800953c:	e7d2      	b.n	80094e4 <__sinit+0xc>
 800953e:	bf00      	nop
 8009540:	0800c464 	.word	0x0800c464
 8009544:	08009471 	.word	0x08009471

08009548 <__sfp>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	4607      	mov	r7, r0
 800954c:	f7ff ffac 	bl	80094a8 <__sfp_lock_acquire>
 8009550:	4b1e      	ldr	r3, [pc, #120]	; (80095cc <__sfp+0x84>)
 8009552:	681e      	ldr	r6, [r3, #0]
 8009554:	69b3      	ldr	r3, [r6, #24]
 8009556:	b913      	cbnz	r3, 800955e <__sfp+0x16>
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff ffbd 	bl	80094d8 <__sinit>
 800955e:	3648      	adds	r6, #72	; 0x48
 8009560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009564:	3b01      	subs	r3, #1
 8009566:	d503      	bpl.n	8009570 <__sfp+0x28>
 8009568:	6833      	ldr	r3, [r6, #0]
 800956a:	b30b      	cbz	r3, 80095b0 <__sfp+0x68>
 800956c:	6836      	ldr	r6, [r6, #0]
 800956e:	e7f7      	b.n	8009560 <__sfp+0x18>
 8009570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009574:	b9d5      	cbnz	r5, 80095ac <__sfp+0x64>
 8009576:	4b16      	ldr	r3, [pc, #88]	; (80095d0 <__sfp+0x88>)
 8009578:	60e3      	str	r3, [r4, #12]
 800957a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800957e:	6665      	str	r5, [r4, #100]	; 0x64
 8009580:	f000 f86c 	bl	800965c <__retarget_lock_init_recursive>
 8009584:	f7ff ff96 	bl	80094b4 <__sfp_lock_release>
 8009588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800958c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009590:	6025      	str	r5, [r4, #0]
 8009592:	61a5      	str	r5, [r4, #24]
 8009594:	2208      	movs	r2, #8
 8009596:	4629      	mov	r1, r5
 8009598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800959c:	f000 f880 	bl	80096a0 <memset>
 80095a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095a8:	4620      	mov	r0, r4
 80095aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ac:	3468      	adds	r4, #104	; 0x68
 80095ae:	e7d9      	b.n	8009564 <__sfp+0x1c>
 80095b0:	2104      	movs	r1, #4
 80095b2:	4638      	mov	r0, r7
 80095b4:	f7ff ff62 	bl	800947c <__sfmoreglue>
 80095b8:	4604      	mov	r4, r0
 80095ba:	6030      	str	r0, [r6, #0]
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1d5      	bne.n	800956c <__sfp+0x24>
 80095c0:	f7ff ff78 	bl	80094b4 <__sfp_lock_release>
 80095c4:	230c      	movs	r3, #12
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	e7ee      	b.n	80095a8 <__sfp+0x60>
 80095ca:	bf00      	nop
 80095cc:	0800c464 	.word	0x0800c464
 80095d0:	ffff0001 	.word	0xffff0001

080095d4 <_fwalk_reent>:
 80095d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	4606      	mov	r6, r0
 80095da:	4688      	mov	r8, r1
 80095dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095e0:	2700      	movs	r7, #0
 80095e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095e6:	f1b9 0901 	subs.w	r9, r9, #1
 80095ea:	d505      	bpl.n	80095f8 <_fwalk_reent+0x24>
 80095ec:	6824      	ldr	r4, [r4, #0]
 80095ee:	2c00      	cmp	r4, #0
 80095f0:	d1f7      	bne.n	80095e2 <_fwalk_reent+0xe>
 80095f2:	4638      	mov	r0, r7
 80095f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f8:	89ab      	ldrh	r3, [r5, #12]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d907      	bls.n	800960e <_fwalk_reent+0x3a>
 80095fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009602:	3301      	adds	r3, #1
 8009604:	d003      	beq.n	800960e <_fwalk_reent+0x3a>
 8009606:	4629      	mov	r1, r5
 8009608:	4630      	mov	r0, r6
 800960a:	47c0      	blx	r8
 800960c:	4307      	orrs	r7, r0
 800960e:	3568      	adds	r5, #104	; 0x68
 8009610:	e7e9      	b.n	80095e6 <_fwalk_reent+0x12>
	...

08009614 <__libc_init_array>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	4d0d      	ldr	r5, [pc, #52]	; (800964c <__libc_init_array+0x38>)
 8009618:	4c0d      	ldr	r4, [pc, #52]	; (8009650 <__libc_init_array+0x3c>)
 800961a:	1b64      	subs	r4, r4, r5
 800961c:	10a4      	asrs	r4, r4, #2
 800961e:	2600      	movs	r6, #0
 8009620:	42a6      	cmp	r6, r4
 8009622:	d109      	bne.n	8009638 <__libc_init_array+0x24>
 8009624:	4d0b      	ldr	r5, [pc, #44]	; (8009654 <__libc_init_array+0x40>)
 8009626:	4c0c      	ldr	r4, [pc, #48]	; (8009658 <__libc_init_array+0x44>)
 8009628:	f002 fe30 	bl	800c28c <_init>
 800962c:	1b64      	subs	r4, r4, r5
 800962e:	10a4      	asrs	r4, r4, #2
 8009630:	2600      	movs	r6, #0
 8009632:	42a6      	cmp	r6, r4
 8009634:	d105      	bne.n	8009642 <__libc_init_array+0x2e>
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	f855 3b04 	ldr.w	r3, [r5], #4
 800963c:	4798      	blx	r3
 800963e:	3601      	adds	r6, #1
 8009640:	e7ee      	b.n	8009620 <__libc_init_array+0xc>
 8009642:	f855 3b04 	ldr.w	r3, [r5], #4
 8009646:	4798      	blx	r3
 8009648:	3601      	adds	r6, #1
 800964a:	e7f2      	b.n	8009632 <__libc_init_array+0x1e>
 800964c:	0800c7ec 	.word	0x0800c7ec
 8009650:	0800c7ec 	.word	0x0800c7ec
 8009654:	0800c7ec 	.word	0x0800c7ec
 8009658:	0800c7f0 	.word	0x0800c7f0

0800965c <__retarget_lock_init_recursive>:
 800965c:	4770      	bx	lr

0800965e <__retarget_lock_acquire_recursive>:
 800965e:	4770      	bx	lr

08009660 <__retarget_lock_release_recursive>:
 8009660:	4770      	bx	lr
	...

08009664 <malloc>:
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <malloc+0xc>)
 8009666:	4601      	mov	r1, r0
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f000 b871 	b.w	8009750 <_malloc_r>
 800966e:	bf00      	nop
 8009670:	2000002c 	.word	0x2000002c

08009674 <free>:
 8009674:	4b02      	ldr	r3, [pc, #8]	; (8009680 <free+0xc>)
 8009676:	4601      	mov	r1, r0
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	f000 b819 	b.w	80096b0 <_free_r>
 800967e:	bf00      	nop
 8009680:	2000002c 	.word	0x2000002c

08009684 <memcpy>:
 8009684:	440a      	add	r2, r1
 8009686:	4291      	cmp	r1, r2
 8009688:	f100 33ff 	add.w	r3, r0, #4294967295
 800968c:	d100      	bne.n	8009690 <memcpy+0xc>
 800968e:	4770      	bx	lr
 8009690:	b510      	push	{r4, lr}
 8009692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800969a:	4291      	cmp	r1, r2
 800969c:	d1f9      	bne.n	8009692 <memcpy+0xe>
 800969e:	bd10      	pop	{r4, pc}

080096a0 <memset>:
 80096a0:	4402      	add	r2, r0
 80096a2:	4603      	mov	r3, r0
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d100      	bne.n	80096aa <memset+0xa>
 80096a8:	4770      	bx	lr
 80096aa:	f803 1b01 	strb.w	r1, [r3], #1
 80096ae:	e7f9      	b.n	80096a4 <memset+0x4>

080096b0 <_free_r>:
 80096b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096b2:	2900      	cmp	r1, #0
 80096b4:	d048      	beq.n	8009748 <_free_r+0x98>
 80096b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ba:	9001      	str	r0, [sp, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f1a1 0404 	sub.w	r4, r1, #4
 80096c2:	bfb8      	it	lt
 80096c4:	18e4      	addlt	r4, r4, r3
 80096c6:	f001 fd57 	bl	800b178 <__malloc_lock>
 80096ca:	4a20      	ldr	r2, [pc, #128]	; (800974c <_free_r+0x9c>)
 80096cc:	9801      	ldr	r0, [sp, #4]
 80096ce:	6813      	ldr	r3, [r2, #0]
 80096d0:	4615      	mov	r5, r2
 80096d2:	b933      	cbnz	r3, 80096e2 <_free_r+0x32>
 80096d4:	6063      	str	r3, [r4, #4]
 80096d6:	6014      	str	r4, [r2, #0]
 80096d8:	b003      	add	sp, #12
 80096da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096de:	f001 bd51 	b.w	800b184 <__malloc_unlock>
 80096e2:	42a3      	cmp	r3, r4
 80096e4:	d90b      	bls.n	80096fe <_free_r+0x4e>
 80096e6:	6821      	ldr	r1, [r4, #0]
 80096e8:	1862      	adds	r2, r4, r1
 80096ea:	4293      	cmp	r3, r2
 80096ec:	bf04      	itt	eq
 80096ee:	681a      	ldreq	r2, [r3, #0]
 80096f0:	685b      	ldreq	r3, [r3, #4]
 80096f2:	6063      	str	r3, [r4, #4]
 80096f4:	bf04      	itt	eq
 80096f6:	1852      	addeq	r2, r2, r1
 80096f8:	6022      	streq	r2, [r4, #0]
 80096fa:	602c      	str	r4, [r5, #0]
 80096fc:	e7ec      	b.n	80096d8 <_free_r+0x28>
 80096fe:	461a      	mov	r2, r3
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	b10b      	cbz	r3, 8009708 <_free_r+0x58>
 8009704:	42a3      	cmp	r3, r4
 8009706:	d9fa      	bls.n	80096fe <_free_r+0x4e>
 8009708:	6811      	ldr	r1, [r2, #0]
 800970a:	1855      	adds	r5, r2, r1
 800970c:	42a5      	cmp	r5, r4
 800970e:	d10b      	bne.n	8009728 <_free_r+0x78>
 8009710:	6824      	ldr	r4, [r4, #0]
 8009712:	4421      	add	r1, r4
 8009714:	1854      	adds	r4, r2, r1
 8009716:	42a3      	cmp	r3, r4
 8009718:	6011      	str	r1, [r2, #0]
 800971a:	d1dd      	bne.n	80096d8 <_free_r+0x28>
 800971c:	681c      	ldr	r4, [r3, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	6053      	str	r3, [r2, #4]
 8009722:	4421      	add	r1, r4
 8009724:	6011      	str	r1, [r2, #0]
 8009726:	e7d7      	b.n	80096d8 <_free_r+0x28>
 8009728:	d902      	bls.n	8009730 <_free_r+0x80>
 800972a:	230c      	movs	r3, #12
 800972c:	6003      	str	r3, [r0, #0]
 800972e:	e7d3      	b.n	80096d8 <_free_r+0x28>
 8009730:	6825      	ldr	r5, [r4, #0]
 8009732:	1961      	adds	r1, r4, r5
 8009734:	428b      	cmp	r3, r1
 8009736:	bf04      	itt	eq
 8009738:	6819      	ldreq	r1, [r3, #0]
 800973a:	685b      	ldreq	r3, [r3, #4]
 800973c:	6063      	str	r3, [r4, #4]
 800973e:	bf04      	itt	eq
 8009740:	1949      	addeq	r1, r1, r5
 8009742:	6021      	streq	r1, [r4, #0]
 8009744:	6054      	str	r4, [r2, #4]
 8009746:	e7c7      	b.n	80096d8 <_free_r+0x28>
 8009748:	b003      	add	sp, #12
 800974a:	bd30      	pop	{r4, r5, pc}
 800974c:	20004c74 	.word	0x20004c74

08009750 <_malloc_r>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	1ccd      	adds	r5, r1, #3
 8009754:	f025 0503 	bic.w	r5, r5, #3
 8009758:	3508      	adds	r5, #8
 800975a:	2d0c      	cmp	r5, #12
 800975c:	bf38      	it	cc
 800975e:	250c      	movcc	r5, #12
 8009760:	2d00      	cmp	r5, #0
 8009762:	4606      	mov	r6, r0
 8009764:	db01      	blt.n	800976a <_malloc_r+0x1a>
 8009766:	42a9      	cmp	r1, r5
 8009768:	d903      	bls.n	8009772 <_malloc_r+0x22>
 800976a:	230c      	movs	r3, #12
 800976c:	6033      	str	r3, [r6, #0]
 800976e:	2000      	movs	r0, #0
 8009770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009772:	f001 fd01 	bl	800b178 <__malloc_lock>
 8009776:	4921      	ldr	r1, [pc, #132]	; (80097fc <_malloc_r+0xac>)
 8009778:	680a      	ldr	r2, [r1, #0]
 800977a:	4614      	mov	r4, r2
 800977c:	b99c      	cbnz	r4, 80097a6 <_malloc_r+0x56>
 800977e:	4f20      	ldr	r7, [pc, #128]	; (8009800 <_malloc_r+0xb0>)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	b923      	cbnz	r3, 800978e <_malloc_r+0x3e>
 8009784:	4621      	mov	r1, r4
 8009786:	4630      	mov	r0, r6
 8009788:	f000 fd10 	bl	800a1ac <_sbrk_r>
 800978c:	6038      	str	r0, [r7, #0]
 800978e:	4629      	mov	r1, r5
 8009790:	4630      	mov	r0, r6
 8009792:	f000 fd0b 	bl	800a1ac <_sbrk_r>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	d123      	bne.n	80097e2 <_malloc_r+0x92>
 800979a:	230c      	movs	r3, #12
 800979c:	6033      	str	r3, [r6, #0]
 800979e:	4630      	mov	r0, r6
 80097a0:	f001 fcf0 	bl	800b184 <__malloc_unlock>
 80097a4:	e7e3      	b.n	800976e <_malloc_r+0x1e>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	1b5b      	subs	r3, r3, r5
 80097aa:	d417      	bmi.n	80097dc <_malloc_r+0x8c>
 80097ac:	2b0b      	cmp	r3, #11
 80097ae:	d903      	bls.n	80097b8 <_malloc_r+0x68>
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	441c      	add	r4, r3
 80097b4:	6025      	str	r5, [r4, #0]
 80097b6:	e004      	b.n	80097c2 <_malloc_r+0x72>
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	42a2      	cmp	r2, r4
 80097bc:	bf0c      	ite	eq
 80097be:	600b      	streq	r3, [r1, #0]
 80097c0:	6053      	strne	r3, [r2, #4]
 80097c2:	4630      	mov	r0, r6
 80097c4:	f001 fcde 	bl	800b184 <__malloc_unlock>
 80097c8:	f104 000b 	add.w	r0, r4, #11
 80097cc:	1d23      	adds	r3, r4, #4
 80097ce:	f020 0007 	bic.w	r0, r0, #7
 80097d2:	1ac2      	subs	r2, r0, r3
 80097d4:	d0cc      	beq.n	8009770 <_malloc_r+0x20>
 80097d6:	1a1b      	subs	r3, r3, r0
 80097d8:	50a3      	str	r3, [r4, r2]
 80097da:	e7c9      	b.n	8009770 <_malloc_r+0x20>
 80097dc:	4622      	mov	r2, r4
 80097de:	6864      	ldr	r4, [r4, #4]
 80097e0:	e7cc      	b.n	800977c <_malloc_r+0x2c>
 80097e2:	1cc4      	adds	r4, r0, #3
 80097e4:	f024 0403 	bic.w	r4, r4, #3
 80097e8:	42a0      	cmp	r0, r4
 80097ea:	d0e3      	beq.n	80097b4 <_malloc_r+0x64>
 80097ec:	1a21      	subs	r1, r4, r0
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 fcdc 	bl	800a1ac <_sbrk_r>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d1dd      	bne.n	80097b4 <_malloc_r+0x64>
 80097f8:	e7cf      	b.n	800979a <_malloc_r+0x4a>
 80097fa:	bf00      	nop
 80097fc:	20004c74 	.word	0x20004c74
 8009800:	20004c78 	.word	0x20004c78

08009804 <__cvt>:
 8009804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	ec55 4b10 	vmov	r4, r5, d0
 800980c:	2d00      	cmp	r5, #0
 800980e:	460e      	mov	r6, r1
 8009810:	4619      	mov	r1, r3
 8009812:	462b      	mov	r3, r5
 8009814:	bfbb      	ittet	lt
 8009816:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800981a:	461d      	movlt	r5, r3
 800981c:	2300      	movge	r3, #0
 800981e:	232d      	movlt	r3, #45	; 0x2d
 8009820:	700b      	strb	r3, [r1, #0]
 8009822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009824:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009828:	4691      	mov	r9, r2
 800982a:	f023 0820 	bic.w	r8, r3, #32
 800982e:	bfbc      	itt	lt
 8009830:	4622      	movlt	r2, r4
 8009832:	4614      	movlt	r4, r2
 8009834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009838:	d005      	beq.n	8009846 <__cvt+0x42>
 800983a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800983e:	d100      	bne.n	8009842 <__cvt+0x3e>
 8009840:	3601      	adds	r6, #1
 8009842:	2102      	movs	r1, #2
 8009844:	e000      	b.n	8009848 <__cvt+0x44>
 8009846:	2103      	movs	r1, #3
 8009848:	ab03      	add	r3, sp, #12
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	ab02      	add	r3, sp, #8
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	ec45 4b10 	vmov	d0, r4, r5
 8009854:	4653      	mov	r3, sl
 8009856:	4632      	mov	r2, r6
 8009858:	f000 fdca 	bl	800a3f0 <_dtoa_r>
 800985c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009860:	4607      	mov	r7, r0
 8009862:	d102      	bne.n	800986a <__cvt+0x66>
 8009864:	f019 0f01 	tst.w	r9, #1
 8009868:	d022      	beq.n	80098b0 <__cvt+0xac>
 800986a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800986e:	eb07 0906 	add.w	r9, r7, r6
 8009872:	d110      	bne.n	8009896 <__cvt+0x92>
 8009874:	783b      	ldrb	r3, [r7, #0]
 8009876:	2b30      	cmp	r3, #48	; 0x30
 8009878:	d10a      	bne.n	8009890 <__cvt+0x8c>
 800987a:	2200      	movs	r2, #0
 800987c:	2300      	movs	r3, #0
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f7 f931 	bl	8000ae8 <__aeabi_dcmpeq>
 8009886:	b918      	cbnz	r0, 8009890 <__cvt+0x8c>
 8009888:	f1c6 0601 	rsb	r6, r6, #1
 800988c:	f8ca 6000 	str.w	r6, [sl]
 8009890:	f8da 3000 	ldr.w	r3, [sl]
 8009894:	4499      	add	r9, r3
 8009896:	2200      	movs	r2, #0
 8009898:	2300      	movs	r3, #0
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f7 f923 	bl	8000ae8 <__aeabi_dcmpeq>
 80098a2:	b108      	cbz	r0, 80098a8 <__cvt+0xa4>
 80098a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80098a8:	2230      	movs	r2, #48	; 0x30
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	454b      	cmp	r3, r9
 80098ae:	d307      	bcc.n	80098c0 <__cvt+0xbc>
 80098b0:	9b03      	ldr	r3, [sp, #12]
 80098b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098b4:	1bdb      	subs	r3, r3, r7
 80098b6:	4638      	mov	r0, r7
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	b004      	add	sp, #16
 80098bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c0:	1c59      	adds	r1, r3, #1
 80098c2:	9103      	str	r1, [sp, #12]
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	e7f0      	b.n	80098aa <__cvt+0xa6>

080098c8 <__exponent>:
 80098c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ca:	4603      	mov	r3, r0
 80098cc:	2900      	cmp	r1, #0
 80098ce:	bfb8      	it	lt
 80098d0:	4249      	neglt	r1, r1
 80098d2:	f803 2b02 	strb.w	r2, [r3], #2
 80098d6:	bfb4      	ite	lt
 80098d8:	222d      	movlt	r2, #45	; 0x2d
 80098da:	222b      	movge	r2, #43	; 0x2b
 80098dc:	2909      	cmp	r1, #9
 80098de:	7042      	strb	r2, [r0, #1]
 80098e0:	dd2a      	ble.n	8009938 <__exponent+0x70>
 80098e2:	f10d 0407 	add.w	r4, sp, #7
 80098e6:	46a4      	mov	ip, r4
 80098e8:	270a      	movs	r7, #10
 80098ea:	46a6      	mov	lr, r4
 80098ec:	460a      	mov	r2, r1
 80098ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80098f2:	fb07 1516 	mls	r5, r7, r6, r1
 80098f6:	3530      	adds	r5, #48	; 0x30
 80098f8:	2a63      	cmp	r2, #99	; 0x63
 80098fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80098fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009902:	4631      	mov	r1, r6
 8009904:	dcf1      	bgt.n	80098ea <__exponent+0x22>
 8009906:	3130      	adds	r1, #48	; 0x30
 8009908:	f1ae 0502 	sub.w	r5, lr, #2
 800990c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009910:	1c44      	adds	r4, r0, #1
 8009912:	4629      	mov	r1, r5
 8009914:	4561      	cmp	r1, ip
 8009916:	d30a      	bcc.n	800992e <__exponent+0x66>
 8009918:	f10d 0209 	add.w	r2, sp, #9
 800991c:	eba2 020e 	sub.w	r2, r2, lr
 8009920:	4565      	cmp	r5, ip
 8009922:	bf88      	it	hi
 8009924:	2200      	movhi	r2, #0
 8009926:	4413      	add	r3, r2
 8009928:	1a18      	subs	r0, r3, r0
 800992a:	b003      	add	sp, #12
 800992c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800992e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009932:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009936:	e7ed      	b.n	8009914 <__exponent+0x4c>
 8009938:	2330      	movs	r3, #48	; 0x30
 800993a:	3130      	adds	r1, #48	; 0x30
 800993c:	7083      	strb	r3, [r0, #2]
 800993e:	70c1      	strb	r1, [r0, #3]
 8009940:	1d03      	adds	r3, r0, #4
 8009942:	e7f1      	b.n	8009928 <__exponent+0x60>

08009944 <_printf_float>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	ed2d 8b02 	vpush	{d8}
 800994c:	b08d      	sub	sp, #52	; 0x34
 800994e:	460c      	mov	r4, r1
 8009950:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009954:	4616      	mov	r6, r2
 8009956:	461f      	mov	r7, r3
 8009958:	4605      	mov	r5, r0
 800995a:	f001 fbf7 	bl	800b14c <_localeconv_r>
 800995e:	f8d0 a000 	ldr.w	sl, [r0]
 8009962:	4650      	mov	r0, sl
 8009964:	f7f6 fc44 	bl	80001f0 <strlen>
 8009968:	2300      	movs	r3, #0
 800996a:	930a      	str	r3, [sp, #40]	; 0x28
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	9305      	str	r3, [sp, #20]
 8009970:	f8d8 3000 	ldr.w	r3, [r8]
 8009974:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009978:	3307      	adds	r3, #7
 800997a:	f023 0307 	bic.w	r3, r3, #7
 800997e:	f103 0208 	add.w	r2, r3, #8
 8009982:	f8c8 2000 	str.w	r2, [r8]
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800998e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009992:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009996:	9307      	str	r3, [sp, #28]
 8009998:	f8cd 8018 	str.w	r8, [sp, #24]
 800999c:	ee08 0a10 	vmov	s16, r0
 80099a0:	4b9f      	ldr	r3, [pc, #636]	; (8009c20 <_printf_float+0x2dc>)
 80099a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	f7f7 f8cf 	bl	8000b4c <__aeabi_dcmpun>
 80099ae:	bb88      	cbnz	r0, 8009a14 <_printf_float+0xd0>
 80099b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099b4:	4b9a      	ldr	r3, [pc, #616]	; (8009c20 <_printf_float+0x2dc>)
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	f7f7 f8a9 	bl	8000b10 <__aeabi_dcmple>
 80099be:	bb48      	cbnz	r0, 8009a14 <_printf_float+0xd0>
 80099c0:	2200      	movs	r2, #0
 80099c2:	2300      	movs	r3, #0
 80099c4:	4640      	mov	r0, r8
 80099c6:	4649      	mov	r1, r9
 80099c8:	f7f7 f898 	bl	8000afc <__aeabi_dcmplt>
 80099cc:	b110      	cbz	r0, 80099d4 <_printf_float+0x90>
 80099ce:	232d      	movs	r3, #45	; 0x2d
 80099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d4:	4b93      	ldr	r3, [pc, #588]	; (8009c24 <_printf_float+0x2e0>)
 80099d6:	4894      	ldr	r0, [pc, #592]	; (8009c28 <_printf_float+0x2e4>)
 80099d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099dc:	bf94      	ite	ls
 80099de:	4698      	movls	r8, r3
 80099e0:	4680      	movhi	r8, r0
 80099e2:	2303      	movs	r3, #3
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	9b05      	ldr	r3, [sp, #20]
 80099e8:	f023 0204 	bic.w	r2, r3, #4
 80099ec:	6022      	str	r2, [r4, #0]
 80099ee:	f04f 0900 	mov.w	r9, #0
 80099f2:	9700      	str	r7, [sp, #0]
 80099f4:	4633      	mov	r3, r6
 80099f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80099f8:	4621      	mov	r1, r4
 80099fa:	4628      	mov	r0, r5
 80099fc:	f000 f9d8 	bl	8009db0 <_printf_common>
 8009a00:	3001      	adds	r0, #1
 8009a02:	f040 8090 	bne.w	8009b26 <_printf_float+0x1e2>
 8009a06:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0a:	b00d      	add	sp, #52	; 0x34
 8009a0c:	ecbd 8b02 	vpop	{d8}
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	4642      	mov	r2, r8
 8009a16:	464b      	mov	r3, r9
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f7 f896 	bl	8000b4c <__aeabi_dcmpun>
 8009a20:	b140      	cbz	r0, 8009a34 <_printf_float+0xf0>
 8009a22:	464b      	mov	r3, r9
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfbc      	itt	lt
 8009a28:	232d      	movlt	r3, #45	; 0x2d
 8009a2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a2e:	487f      	ldr	r0, [pc, #508]	; (8009c2c <_printf_float+0x2e8>)
 8009a30:	4b7f      	ldr	r3, [pc, #508]	; (8009c30 <_printf_float+0x2ec>)
 8009a32:	e7d1      	b.n	80099d8 <_printf_float+0x94>
 8009a34:	6863      	ldr	r3, [r4, #4]
 8009a36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a3a:	9206      	str	r2, [sp, #24]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	d13f      	bne.n	8009ac0 <_printf_float+0x17c>
 8009a40:	2306      	movs	r3, #6
 8009a42:	6063      	str	r3, [r4, #4]
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	6861      	ldr	r1, [r4, #4]
 8009a48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	ab0a      	add	r3, sp, #40	; 0x28
 8009a52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a56:	ab09      	add	r3, sp, #36	; 0x24
 8009a58:	ec49 8b10 	vmov	d0, r8, r9
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a64:	4628      	mov	r0, r5
 8009a66:	f7ff fecd 	bl	8009804 <__cvt>
 8009a6a:	9b06      	ldr	r3, [sp, #24]
 8009a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6e:	2b47      	cmp	r3, #71	; 0x47
 8009a70:	4680      	mov	r8, r0
 8009a72:	d108      	bne.n	8009a86 <_printf_float+0x142>
 8009a74:	1cc8      	adds	r0, r1, #3
 8009a76:	db02      	blt.n	8009a7e <_printf_float+0x13a>
 8009a78:	6863      	ldr	r3, [r4, #4]
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	dd41      	ble.n	8009b02 <_printf_float+0x1be>
 8009a7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a82:	fa5f fb8b 	uxtb.w	fp, fp
 8009a86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a8a:	d820      	bhi.n	8009ace <_printf_float+0x18a>
 8009a8c:	3901      	subs	r1, #1
 8009a8e:	465a      	mov	r2, fp
 8009a90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a94:	9109      	str	r1, [sp, #36]	; 0x24
 8009a96:	f7ff ff17 	bl	80098c8 <__exponent>
 8009a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a9c:	1813      	adds	r3, r2, r0
 8009a9e:	2a01      	cmp	r2, #1
 8009aa0:	4681      	mov	r9, r0
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	dc02      	bgt.n	8009aac <_printf_float+0x168>
 8009aa6:	6822      	ldr	r2, [r4, #0]
 8009aa8:	07d2      	lsls	r2, r2, #31
 8009aaa:	d501      	bpl.n	8009ab0 <_printf_float+0x16c>
 8009aac:	3301      	adds	r3, #1
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d09c      	beq.n	80099f2 <_printf_float+0xae>
 8009ab8:	232d      	movs	r3, #45	; 0x2d
 8009aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009abe:	e798      	b.n	80099f2 <_printf_float+0xae>
 8009ac0:	9a06      	ldr	r2, [sp, #24]
 8009ac2:	2a47      	cmp	r2, #71	; 0x47
 8009ac4:	d1be      	bne.n	8009a44 <_printf_float+0x100>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1bc      	bne.n	8009a44 <_printf_float+0x100>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7b9      	b.n	8009a42 <_printf_float+0xfe>
 8009ace:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ad2:	d118      	bne.n	8009b06 <_printf_float+0x1c2>
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	6863      	ldr	r3, [r4, #4]
 8009ad8:	dd0b      	ble.n	8009af2 <_printf_float+0x1ae>
 8009ada:	6121      	str	r1, [r4, #16]
 8009adc:	b913      	cbnz	r3, 8009ae4 <_printf_float+0x1a0>
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	07d0      	lsls	r0, r2, #31
 8009ae2:	d502      	bpl.n	8009aea <_printf_float+0x1a6>
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	440b      	add	r3, r1
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	65a1      	str	r1, [r4, #88]	; 0x58
 8009aec:	f04f 0900 	mov.w	r9, #0
 8009af0:	e7de      	b.n	8009ab0 <_printf_float+0x16c>
 8009af2:	b913      	cbnz	r3, 8009afa <_printf_float+0x1b6>
 8009af4:	6822      	ldr	r2, [r4, #0]
 8009af6:	07d2      	lsls	r2, r2, #31
 8009af8:	d501      	bpl.n	8009afe <_printf_float+0x1ba>
 8009afa:	3302      	adds	r3, #2
 8009afc:	e7f4      	b.n	8009ae8 <_printf_float+0x1a4>
 8009afe:	2301      	movs	r3, #1
 8009b00:	e7f2      	b.n	8009ae8 <_printf_float+0x1a4>
 8009b02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	db05      	blt.n	8009b18 <_printf_float+0x1d4>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	6121      	str	r1, [r4, #16]
 8009b10:	07d8      	lsls	r0, r3, #31
 8009b12:	d5ea      	bpl.n	8009aea <_printf_float+0x1a6>
 8009b14:	1c4b      	adds	r3, r1, #1
 8009b16:	e7e7      	b.n	8009ae8 <_printf_float+0x1a4>
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	bfd4      	ite	le
 8009b1c:	f1c1 0202 	rsble	r2, r1, #2
 8009b20:	2201      	movgt	r2, #1
 8009b22:	4413      	add	r3, r2
 8009b24:	e7e0      	b.n	8009ae8 <_printf_float+0x1a4>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	055a      	lsls	r2, r3, #21
 8009b2a:	d407      	bmi.n	8009b3c <_printf_float+0x1f8>
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	4642      	mov	r2, r8
 8009b30:	4631      	mov	r1, r6
 8009b32:	4628      	mov	r0, r5
 8009b34:	47b8      	blx	r7
 8009b36:	3001      	adds	r0, #1
 8009b38:	d12c      	bne.n	8009b94 <_printf_float+0x250>
 8009b3a:	e764      	b.n	8009a06 <_printf_float+0xc2>
 8009b3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b40:	f240 80e0 	bls.w	8009d04 <_printf_float+0x3c0>
 8009b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f7f6 ffcc 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d034      	beq.n	8009bbe <_printf_float+0x27a>
 8009b54:	4a37      	ldr	r2, [pc, #220]	; (8009c34 <_printf_float+0x2f0>)
 8009b56:	2301      	movs	r3, #1
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f af51 	beq.w	8009a06 <_printf_float+0xc2>
 8009b64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	db02      	blt.n	8009b72 <_printf_float+0x22e>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	07d8      	lsls	r0, r3, #31
 8009b70:	d510      	bpl.n	8009b94 <_printf_float+0x250>
 8009b72:	ee18 3a10 	vmov	r3, s16
 8009b76:	4652      	mov	r2, sl
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f43f af41 	beq.w	8009a06 <_printf_float+0xc2>
 8009b84:	f04f 0800 	mov.w	r8, #0
 8009b88:	f104 091a 	add.w	r9, r4, #26
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	4543      	cmp	r3, r8
 8009b92:	dc09      	bgt.n	8009ba8 <_printf_float+0x264>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	079b      	lsls	r3, r3, #30
 8009b98:	f100 8105 	bmi.w	8009da6 <_printf_float+0x462>
 8009b9c:	68e0      	ldr	r0, [r4, #12]
 8009b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba0:	4298      	cmp	r0, r3
 8009ba2:	bfb8      	it	lt
 8009ba4:	4618      	movlt	r0, r3
 8009ba6:	e730      	b.n	8009a0a <_printf_float+0xc6>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	464a      	mov	r2, r9
 8009bac:	4631      	mov	r1, r6
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b8      	blx	r7
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f43f af27 	beq.w	8009a06 <_printf_float+0xc2>
 8009bb8:	f108 0801 	add.w	r8, r8, #1
 8009bbc:	e7e6      	b.n	8009b8c <_printf_float+0x248>
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc39      	bgt.n	8009c38 <_printf_float+0x2f4>
 8009bc4:	4a1b      	ldr	r2, [pc, #108]	; (8009c34 <_printf_float+0x2f0>)
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f af19 	beq.w	8009a06 <_printf_float+0xc2>
 8009bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	d102      	bne.n	8009be2 <_printf_float+0x29e>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	07d9      	lsls	r1, r3, #31
 8009be0:	d5d8      	bpl.n	8009b94 <_printf_float+0x250>
 8009be2:	ee18 3a10 	vmov	r3, s16
 8009be6:	4652      	mov	r2, sl
 8009be8:	4631      	mov	r1, r6
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f af09 	beq.w	8009a06 <_printf_float+0xc2>
 8009bf4:	f04f 0900 	mov.w	r9, #0
 8009bf8:	f104 0a1a 	add.w	sl, r4, #26
 8009bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bfe:	425b      	negs	r3, r3
 8009c00:	454b      	cmp	r3, r9
 8009c02:	dc01      	bgt.n	8009c08 <_printf_float+0x2c4>
 8009c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c06:	e792      	b.n	8009b2e <_printf_float+0x1ea>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	4652      	mov	r2, sl
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4628      	mov	r0, r5
 8009c10:	47b8      	blx	r7
 8009c12:	3001      	adds	r0, #1
 8009c14:	f43f aef7 	beq.w	8009a06 <_printf_float+0xc2>
 8009c18:	f109 0901 	add.w	r9, r9, #1
 8009c1c:	e7ee      	b.n	8009bfc <_printf_float+0x2b8>
 8009c1e:	bf00      	nop
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	0800c468 	.word	0x0800c468
 8009c28:	0800c46c 	.word	0x0800c46c
 8009c2c:	0800c474 	.word	0x0800c474
 8009c30:	0800c470 	.word	0x0800c470
 8009c34:	0800c478 	.word	0x0800c478
 8009c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	bfa8      	it	ge
 8009c40:	461a      	movge	r2, r3
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	4691      	mov	r9, r2
 8009c46:	dc37      	bgt.n	8009cb8 <_printf_float+0x374>
 8009c48:	f04f 0b00 	mov.w	fp, #0
 8009c4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c50:	f104 021a 	add.w	r2, r4, #26
 8009c54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c56:	9305      	str	r3, [sp, #20]
 8009c58:	eba3 0309 	sub.w	r3, r3, r9
 8009c5c:	455b      	cmp	r3, fp
 8009c5e:	dc33      	bgt.n	8009cc8 <_printf_float+0x384>
 8009c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c64:	429a      	cmp	r2, r3
 8009c66:	db3b      	blt.n	8009ce0 <_printf_float+0x39c>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	07da      	lsls	r2, r3, #31
 8009c6c:	d438      	bmi.n	8009ce0 <_printf_float+0x39c>
 8009c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	eba2 0901 	sub.w	r9, r2, r1
 8009c7a:	4599      	cmp	r9, r3
 8009c7c:	bfa8      	it	ge
 8009c7e:	4699      	movge	r9, r3
 8009c80:	f1b9 0f00 	cmp.w	r9, #0
 8009c84:	dc35      	bgt.n	8009cf2 <_printf_float+0x3ae>
 8009c86:	f04f 0800 	mov.w	r8, #0
 8009c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c8e:	f104 0a1a 	add.w	sl, r4, #26
 8009c92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c96:	1a9b      	subs	r3, r3, r2
 8009c98:	eba3 0309 	sub.w	r3, r3, r9
 8009c9c:	4543      	cmp	r3, r8
 8009c9e:	f77f af79 	ble.w	8009b94 <_printf_float+0x250>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f aeaa 	beq.w	8009a06 <_printf_float+0xc2>
 8009cb2:	f108 0801 	add.w	r8, r8, #1
 8009cb6:	e7ec      	b.n	8009c92 <_printf_float+0x34e>
 8009cb8:	4613      	mov	r3, r2
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	47b8      	blx	r7
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d1c0      	bne.n	8009c48 <_printf_float+0x304>
 8009cc6:	e69e      	b.n	8009a06 <_printf_float+0xc2>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	9205      	str	r2, [sp, #20]
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	f43f ae97 	beq.w	8009a06 <_printf_float+0xc2>
 8009cd8:	9a05      	ldr	r2, [sp, #20]
 8009cda:	f10b 0b01 	add.w	fp, fp, #1
 8009cde:	e7b9      	b.n	8009c54 <_printf_float+0x310>
 8009ce0:	ee18 3a10 	vmov	r3, s16
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	d1be      	bne.n	8009c6e <_printf_float+0x32a>
 8009cf0:	e689      	b.n	8009a06 <_printf_float+0xc2>
 8009cf2:	9a05      	ldr	r2, [sp, #20]
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	4442      	add	r2, r8
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b8      	blx	r7
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d1c1      	bne.n	8009c86 <_printf_float+0x342>
 8009d02:	e680      	b.n	8009a06 <_printf_float+0xc2>
 8009d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d06:	2a01      	cmp	r2, #1
 8009d08:	dc01      	bgt.n	8009d0e <_printf_float+0x3ca>
 8009d0a:	07db      	lsls	r3, r3, #31
 8009d0c:	d538      	bpl.n	8009d80 <_printf_float+0x43c>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4642      	mov	r2, r8
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f43f ae74 	beq.w	8009a06 <_printf_float+0xc2>
 8009d1e:	ee18 3a10 	vmov	r3, s16
 8009d22:	4652      	mov	r2, sl
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	47b8      	blx	r7
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f43f ae6b 	beq.w	8009a06 <_printf_float+0xc2>
 8009d30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d34:	2200      	movs	r2, #0
 8009d36:	2300      	movs	r3, #0
 8009d38:	f7f6 fed6 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d3c:	b9d8      	cbnz	r0, 8009d76 <_printf_float+0x432>
 8009d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d40:	f108 0201 	add.w	r2, r8, #1
 8009d44:	3b01      	subs	r3, #1
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b8      	blx	r7
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d10e      	bne.n	8009d6e <_printf_float+0x42a>
 8009d50:	e659      	b.n	8009a06 <_printf_float+0xc2>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4652      	mov	r2, sl
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f ae52 	beq.w	8009a06 <_printf_float+0xc2>
 8009d62:	f108 0801 	add.w	r8, r8, #1
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	4543      	cmp	r3, r8
 8009d6c:	dcf1      	bgt.n	8009d52 <_printf_float+0x40e>
 8009d6e:	464b      	mov	r3, r9
 8009d70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d74:	e6dc      	b.n	8009b30 <_printf_float+0x1ec>
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	f104 0a1a 	add.w	sl, r4, #26
 8009d7e:	e7f2      	b.n	8009d66 <_printf_float+0x422>
 8009d80:	2301      	movs	r3, #1
 8009d82:	4642      	mov	r2, r8
 8009d84:	e7df      	b.n	8009d46 <_printf_float+0x402>
 8009d86:	2301      	movs	r3, #1
 8009d88:	464a      	mov	r2, r9
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	f43f ae38 	beq.w	8009a06 <_printf_float+0xc2>
 8009d96:	f108 0801 	add.w	r8, r8, #1
 8009d9a:	68e3      	ldr	r3, [r4, #12]
 8009d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d9e:	1a5b      	subs	r3, r3, r1
 8009da0:	4543      	cmp	r3, r8
 8009da2:	dcf0      	bgt.n	8009d86 <_printf_float+0x442>
 8009da4:	e6fa      	b.n	8009b9c <_printf_float+0x258>
 8009da6:	f04f 0800 	mov.w	r8, #0
 8009daa:	f104 0919 	add.w	r9, r4, #25
 8009dae:	e7f4      	b.n	8009d9a <_printf_float+0x456>

08009db0 <_printf_common>:
 8009db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db4:	4616      	mov	r6, r2
 8009db6:	4699      	mov	r9, r3
 8009db8:	688a      	ldr	r2, [r1, #8]
 8009dba:	690b      	ldr	r3, [r1, #16]
 8009dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	bfb8      	it	lt
 8009dc4:	4613      	movlt	r3, r2
 8009dc6:	6033      	str	r3, [r6, #0]
 8009dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dcc:	4607      	mov	r7, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_printf_common+0x26>
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	6033      	str	r3, [r6, #0]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	0699      	lsls	r1, r3, #26
 8009dda:	bf42      	ittt	mi
 8009ddc:	6833      	ldrmi	r3, [r6, #0]
 8009dde:	3302      	addmi	r3, #2
 8009de0:	6033      	strmi	r3, [r6, #0]
 8009de2:	6825      	ldr	r5, [r4, #0]
 8009de4:	f015 0506 	ands.w	r5, r5, #6
 8009de8:	d106      	bne.n	8009df8 <_printf_common+0x48>
 8009dea:	f104 0a19 	add.w	sl, r4, #25
 8009dee:	68e3      	ldr	r3, [r4, #12]
 8009df0:	6832      	ldr	r2, [r6, #0]
 8009df2:	1a9b      	subs	r3, r3, r2
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	dc26      	bgt.n	8009e46 <_printf_common+0x96>
 8009df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dfc:	1e13      	subs	r3, r2, #0
 8009dfe:	6822      	ldr	r2, [r4, #0]
 8009e00:	bf18      	it	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	0692      	lsls	r2, r2, #26
 8009e06:	d42b      	bmi.n	8009e60 <_printf_common+0xb0>
 8009e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4638      	mov	r0, r7
 8009e10:	47c0      	blx	r8
 8009e12:	3001      	adds	r0, #1
 8009e14:	d01e      	beq.n	8009e54 <_printf_common+0xa4>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	68e5      	ldr	r5, [r4, #12]
 8009e1a:	6832      	ldr	r2, [r6, #0]
 8009e1c:	f003 0306 	and.w	r3, r3, #6
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	bf08      	it	eq
 8009e24:	1aad      	subeq	r5, r5, r2
 8009e26:	68a3      	ldr	r3, [r4, #8]
 8009e28:	6922      	ldr	r2, [r4, #16]
 8009e2a:	bf0c      	ite	eq
 8009e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e30:	2500      	movne	r5, #0
 8009e32:	4293      	cmp	r3, r2
 8009e34:	bfc4      	itt	gt
 8009e36:	1a9b      	subgt	r3, r3, r2
 8009e38:	18ed      	addgt	r5, r5, r3
 8009e3a:	2600      	movs	r6, #0
 8009e3c:	341a      	adds	r4, #26
 8009e3e:	42b5      	cmp	r5, r6
 8009e40:	d11a      	bne.n	8009e78 <_printf_common+0xc8>
 8009e42:	2000      	movs	r0, #0
 8009e44:	e008      	b.n	8009e58 <_printf_common+0xa8>
 8009e46:	2301      	movs	r3, #1
 8009e48:	4652      	mov	r2, sl
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	47c0      	blx	r8
 8009e50:	3001      	adds	r0, #1
 8009e52:	d103      	bne.n	8009e5c <_printf_common+0xac>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	e7c6      	b.n	8009dee <_printf_common+0x3e>
 8009e60:	18e1      	adds	r1, r4, r3
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	2030      	movs	r0, #48	; 0x30
 8009e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e6a:	4422      	add	r2, r4
 8009e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e74:	3302      	adds	r3, #2
 8009e76:	e7c7      	b.n	8009e08 <_printf_common+0x58>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	4638      	mov	r0, r7
 8009e80:	47c0      	blx	r8
 8009e82:	3001      	adds	r0, #1
 8009e84:	d0e6      	beq.n	8009e54 <_printf_common+0xa4>
 8009e86:	3601      	adds	r6, #1
 8009e88:	e7d9      	b.n	8009e3e <_printf_common+0x8e>
	...

08009e8c <_printf_i>:
 8009e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	460c      	mov	r4, r1
 8009e92:	4691      	mov	r9, r2
 8009e94:	7e27      	ldrb	r7, [r4, #24]
 8009e96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e98:	2f78      	cmp	r7, #120	; 0x78
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	469a      	mov	sl, r3
 8009e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ea2:	d807      	bhi.n	8009eb4 <_printf_i+0x28>
 8009ea4:	2f62      	cmp	r7, #98	; 0x62
 8009ea6:	d80a      	bhi.n	8009ebe <_printf_i+0x32>
 8009ea8:	2f00      	cmp	r7, #0
 8009eaa:	f000 80d8 	beq.w	800a05e <_printf_i+0x1d2>
 8009eae:	2f58      	cmp	r7, #88	; 0x58
 8009eb0:	f000 80a3 	beq.w	8009ffa <_printf_i+0x16e>
 8009eb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ebc:	e03a      	b.n	8009f34 <_printf_i+0xa8>
 8009ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ec2:	2b15      	cmp	r3, #21
 8009ec4:	d8f6      	bhi.n	8009eb4 <_printf_i+0x28>
 8009ec6:	a001      	add	r0, pc, #4	; (adr r0, 8009ecc <_printf_i+0x40>)
 8009ec8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ecc:	08009f25 	.word	0x08009f25
 8009ed0:	08009f39 	.word	0x08009f39
 8009ed4:	08009eb5 	.word	0x08009eb5
 8009ed8:	08009eb5 	.word	0x08009eb5
 8009edc:	08009eb5 	.word	0x08009eb5
 8009ee0:	08009eb5 	.word	0x08009eb5
 8009ee4:	08009f39 	.word	0x08009f39
 8009ee8:	08009eb5 	.word	0x08009eb5
 8009eec:	08009eb5 	.word	0x08009eb5
 8009ef0:	08009eb5 	.word	0x08009eb5
 8009ef4:	08009eb5 	.word	0x08009eb5
 8009ef8:	0800a045 	.word	0x0800a045
 8009efc:	08009f69 	.word	0x08009f69
 8009f00:	0800a027 	.word	0x0800a027
 8009f04:	08009eb5 	.word	0x08009eb5
 8009f08:	08009eb5 	.word	0x08009eb5
 8009f0c:	0800a067 	.word	0x0800a067
 8009f10:	08009eb5 	.word	0x08009eb5
 8009f14:	08009f69 	.word	0x08009f69
 8009f18:	08009eb5 	.word	0x08009eb5
 8009f1c:	08009eb5 	.word	0x08009eb5
 8009f20:	0800a02f 	.word	0x0800a02f
 8009f24:	680b      	ldr	r3, [r1, #0]
 8009f26:	1d1a      	adds	r2, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	600a      	str	r2, [r1, #0]
 8009f2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f34:	2301      	movs	r3, #1
 8009f36:	e0a3      	b.n	800a080 <_printf_i+0x1f4>
 8009f38:	6825      	ldr	r5, [r4, #0]
 8009f3a:	6808      	ldr	r0, [r1, #0]
 8009f3c:	062e      	lsls	r6, r5, #24
 8009f3e:	f100 0304 	add.w	r3, r0, #4
 8009f42:	d50a      	bpl.n	8009f5a <_printf_i+0xce>
 8009f44:	6805      	ldr	r5, [r0, #0]
 8009f46:	600b      	str	r3, [r1, #0]
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	da03      	bge.n	8009f54 <_printf_i+0xc8>
 8009f4c:	232d      	movs	r3, #45	; 0x2d
 8009f4e:	426d      	negs	r5, r5
 8009f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f54:	485e      	ldr	r0, [pc, #376]	; (800a0d0 <_printf_i+0x244>)
 8009f56:	230a      	movs	r3, #10
 8009f58:	e019      	b.n	8009f8e <_printf_i+0x102>
 8009f5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f5e:	6805      	ldr	r5, [r0, #0]
 8009f60:	600b      	str	r3, [r1, #0]
 8009f62:	bf18      	it	ne
 8009f64:	b22d      	sxthne	r5, r5
 8009f66:	e7ef      	b.n	8009f48 <_printf_i+0xbc>
 8009f68:	680b      	ldr	r3, [r1, #0]
 8009f6a:	6825      	ldr	r5, [r4, #0]
 8009f6c:	1d18      	adds	r0, r3, #4
 8009f6e:	6008      	str	r0, [r1, #0]
 8009f70:	0628      	lsls	r0, r5, #24
 8009f72:	d501      	bpl.n	8009f78 <_printf_i+0xec>
 8009f74:	681d      	ldr	r5, [r3, #0]
 8009f76:	e002      	b.n	8009f7e <_printf_i+0xf2>
 8009f78:	0669      	lsls	r1, r5, #25
 8009f7a:	d5fb      	bpl.n	8009f74 <_printf_i+0xe8>
 8009f7c:	881d      	ldrh	r5, [r3, #0]
 8009f7e:	4854      	ldr	r0, [pc, #336]	; (800a0d0 <_printf_i+0x244>)
 8009f80:	2f6f      	cmp	r7, #111	; 0x6f
 8009f82:	bf0c      	ite	eq
 8009f84:	2308      	moveq	r3, #8
 8009f86:	230a      	movne	r3, #10
 8009f88:	2100      	movs	r1, #0
 8009f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f8e:	6866      	ldr	r6, [r4, #4]
 8009f90:	60a6      	str	r6, [r4, #8]
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	bfa2      	ittt	ge
 8009f96:	6821      	ldrge	r1, [r4, #0]
 8009f98:	f021 0104 	bicge.w	r1, r1, #4
 8009f9c:	6021      	strge	r1, [r4, #0]
 8009f9e:	b90d      	cbnz	r5, 8009fa4 <_printf_i+0x118>
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	d04d      	beq.n	800a040 <_printf_i+0x1b4>
 8009fa4:	4616      	mov	r6, r2
 8009fa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009faa:	fb03 5711 	mls	r7, r3, r1, r5
 8009fae:	5dc7      	ldrb	r7, [r0, r7]
 8009fb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fb4:	462f      	mov	r7, r5
 8009fb6:	42bb      	cmp	r3, r7
 8009fb8:	460d      	mov	r5, r1
 8009fba:	d9f4      	bls.n	8009fa6 <_printf_i+0x11a>
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d10b      	bne.n	8009fd8 <_printf_i+0x14c>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	07df      	lsls	r7, r3, #31
 8009fc4:	d508      	bpl.n	8009fd8 <_printf_i+0x14c>
 8009fc6:	6923      	ldr	r3, [r4, #16]
 8009fc8:	6861      	ldr	r1, [r4, #4]
 8009fca:	4299      	cmp	r1, r3
 8009fcc:	bfde      	ittt	le
 8009fce:	2330      	movle	r3, #48	; 0x30
 8009fd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fd8:	1b92      	subs	r2, r2, r6
 8009fda:	6122      	str	r2, [r4, #16]
 8009fdc:	f8cd a000 	str.w	sl, [sp]
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	aa03      	add	r2, sp, #12
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f7ff fee2 	bl	8009db0 <_printf_common>
 8009fec:	3001      	adds	r0, #1
 8009fee:	d14c      	bne.n	800a08a <_printf_i+0x1fe>
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	b004      	add	sp, #16
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	4835      	ldr	r0, [pc, #212]	; (800a0d0 <_printf_i+0x244>)
 8009ffc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	680e      	ldr	r6, [r1, #0]
 800a004:	061f      	lsls	r7, r3, #24
 800a006:	f856 5b04 	ldr.w	r5, [r6], #4
 800a00a:	600e      	str	r6, [r1, #0]
 800a00c:	d514      	bpl.n	800a038 <_printf_i+0x1ac>
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	bf44      	itt	mi
 800a012:	f043 0320 	orrmi.w	r3, r3, #32
 800a016:	6023      	strmi	r3, [r4, #0]
 800a018:	b91d      	cbnz	r5, 800a022 <_printf_i+0x196>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	f023 0320 	bic.w	r3, r3, #32
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	2310      	movs	r3, #16
 800a024:	e7b0      	b.n	8009f88 <_printf_i+0xfc>
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	f043 0320 	orr.w	r3, r3, #32
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	2378      	movs	r3, #120	; 0x78
 800a030:	4828      	ldr	r0, [pc, #160]	; (800a0d4 <_printf_i+0x248>)
 800a032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a036:	e7e3      	b.n	800a000 <_printf_i+0x174>
 800a038:	065e      	lsls	r6, r3, #25
 800a03a:	bf48      	it	mi
 800a03c:	b2ad      	uxthmi	r5, r5
 800a03e:	e7e6      	b.n	800a00e <_printf_i+0x182>
 800a040:	4616      	mov	r6, r2
 800a042:	e7bb      	b.n	8009fbc <_printf_i+0x130>
 800a044:	680b      	ldr	r3, [r1, #0]
 800a046:	6826      	ldr	r6, [r4, #0]
 800a048:	6960      	ldr	r0, [r4, #20]
 800a04a:	1d1d      	adds	r5, r3, #4
 800a04c:	600d      	str	r5, [r1, #0]
 800a04e:	0635      	lsls	r5, r6, #24
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	d501      	bpl.n	800a058 <_printf_i+0x1cc>
 800a054:	6018      	str	r0, [r3, #0]
 800a056:	e002      	b.n	800a05e <_printf_i+0x1d2>
 800a058:	0671      	lsls	r1, r6, #25
 800a05a:	d5fb      	bpl.n	800a054 <_printf_i+0x1c8>
 800a05c:	8018      	strh	r0, [r3, #0]
 800a05e:	2300      	movs	r3, #0
 800a060:	6123      	str	r3, [r4, #16]
 800a062:	4616      	mov	r6, r2
 800a064:	e7ba      	b.n	8009fdc <_printf_i+0x150>
 800a066:	680b      	ldr	r3, [r1, #0]
 800a068:	1d1a      	adds	r2, r3, #4
 800a06a:	600a      	str	r2, [r1, #0]
 800a06c:	681e      	ldr	r6, [r3, #0]
 800a06e:	6862      	ldr	r2, [r4, #4]
 800a070:	2100      	movs	r1, #0
 800a072:	4630      	mov	r0, r6
 800a074:	f7f6 f8c4 	bl	8000200 <memchr>
 800a078:	b108      	cbz	r0, 800a07e <_printf_i+0x1f2>
 800a07a:	1b80      	subs	r0, r0, r6
 800a07c:	6060      	str	r0, [r4, #4]
 800a07e:	6863      	ldr	r3, [r4, #4]
 800a080:	6123      	str	r3, [r4, #16]
 800a082:	2300      	movs	r3, #0
 800a084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a088:	e7a8      	b.n	8009fdc <_printf_i+0x150>
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	4632      	mov	r2, r6
 800a08e:	4649      	mov	r1, r9
 800a090:	4640      	mov	r0, r8
 800a092:	47d0      	blx	sl
 800a094:	3001      	adds	r0, #1
 800a096:	d0ab      	beq.n	8009ff0 <_printf_i+0x164>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	079b      	lsls	r3, r3, #30
 800a09c:	d413      	bmi.n	800a0c6 <_printf_i+0x23a>
 800a09e:	68e0      	ldr	r0, [r4, #12]
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	4298      	cmp	r0, r3
 800a0a4:	bfb8      	it	lt
 800a0a6:	4618      	movlt	r0, r3
 800a0a8:	e7a4      	b.n	8009ff4 <_printf_i+0x168>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	47d0      	blx	sl
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d09b      	beq.n	8009ff0 <_printf_i+0x164>
 800a0b8:	3501      	adds	r5, #1
 800a0ba:	68e3      	ldr	r3, [r4, #12]
 800a0bc:	9903      	ldr	r1, [sp, #12]
 800a0be:	1a5b      	subs	r3, r3, r1
 800a0c0:	42ab      	cmp	r3, r5
 800a0c2:	dcf2      	bgt.n	800a0aa <_printf_i+0x21e>
 800a0c4:	e7eb      	b.n	800a09e <_printf_i+0x212>
 800a0c6:	2500      	movs	r5, #0
 800a0c8:	f104 0619 	add.w	r6, r4, #25
 800a0cc:	e7f5      	b.n	800a0ba <_printf_i+0x22e>
 800a0ce:	bf00      	nop
 800a0d0:	0800c47a 	.word	0x0800c47a
 800a0d4:	0800c48b 	.word	0x0800c48b

0800a0d8 <cleanup_glue>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	460c      	mov	r4, r1
 800a0dc:	6809      	ldr	r1, [r1, #0]
 800a0de:	4605      	mov	r5, r0
 800a0e0:	b109      	cbz	r1, 800a0e6 <cleanup_glue+0xe>
 800a0e2:	f7ff fff9 	bl	800a0d8 <cleanup_glue>
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ee:	f7ff badf 	b.w	80096b0 <_free_r>
	...

0800a0f4 <_reclaim_reent>:
 800a0f4:	4b2c      	ldr	r3, [pc, #176]	; (800a1a8 <_reclaim_reent+0xb4>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4283      	cmp	r3, r0
 800a0fa:	b570      	push	{r4, r5, r6, lr}
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	d051      	beq.n	800a1a4 <_reclaim_reent+0xb0>
 800a100:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a102:	b143      	cbz	r3, 800a116 <_reclaim_reent+0x22>
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d14a      	bne.n	800a1a0 <_reclaim_reent+0xac>
 800a10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a10c:	6819      	ldr	r1, [r3, #0]
 800a10e:	b111      	cbz	r1, 800a116 <_reclaim_reent+0x22>
 800a110:	4620      	mov	r0, r4
 800a112:	f7ff facd 	bl	80096b0 <_free_r>
 800a116:	6961      	ldr	r1, [r4, #20]
 800a118:	b111      	cbz	r1, 800a120 <_reclaim_reent+0x2c>
 800a11a:	4620      	mov	r0, r4
 800a11c:	f7ff fac8 	bl	80096b0 <_free_r>
 800a120:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a122:	b111      	cbz	r1, 800a12a <_reclaim_reent+0x36>
 800a124:	4620      	mov	r0, r4
 800a126:	f7ff fac3 	bl	80096b0 <_free_r>
 800a12a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a12c:	b111      	cbz	r1, 800a134 <_reclaim_reent+0x40>
 800a12e:	4620      	mov	r0, r4
 800a130:	f7ff fabe 	bl	80096b0 <_free_r>
 800a134:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a136:	b111      	cbz	r1, 800a13e <_reclaim_reent+0x4a>
 800a138:	4620      	mov	r0, r4
 800a13a:	f7ff fab9 	bl	80096b0 <_free_r>
 800a13e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a140:	b111      	cbz	r1, 800a148 <_reclaim_reent+0x54>
 800a142:	4620      	mov	r0, r4
 800a144:	f7ff fab4 	bl	80096b0 <_free_r>
 800a148:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a14a:	b111      	cbz	r1, 800a152 <_reclaim_reent+0x5e>
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7ff faaf 	bl	80096b0 <_free_r>
 800a152:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a154:	b111      	cbz	r1, 800a15c <_reclaim_reent+0x68>
 800a156:	4620      	mov	r0, r4
 800a158:	f7ff faaa 	bl	80096b0 <_free_r>
 800a15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a15e:	b111      	cbz	r1, 800a166 <_reclaim_reent+0x72>
 800a160:	4620      	mov	r0, r4
 800a162:	f7ff faa5 	bl	80096b0 <_free_r>
 800a166:	69a3      	ldr	r3, [r4, #24]
 800a168:	b1e3      	cbz	r3, 800a1a4 <_reclaim_reent+0xb0>
 800a16a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a16c:	4620      	mov	r0, r4
 800a16e:	4798      	blx	r3
 800a170:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a172:	b1b9      	cbz	r1, 800a1a4 <_reclaim_reent+0xb0>
 800a174:	4620      	mov	r0, r4
 800a176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a17a:	f7ff bfad 	b.w	800a0d8 <cleanup_glue>
 800a17e:	5949      	ldr	r1, [r1, r5]
 800a180:	b941      	cbnz	r1, 800a194 <_reclaim_reent+0xa0>
 800a182:	3504      	adds	r5, #4
 800a184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a186:	2d80      	cmp	r5, #128	; 0x80
 800a188:	68d9      	ldr	r1, [r3, #12]
 800a18a:	d1f8      	bne.n	800a17e <_reclaim_reent+0x8a>
 800a18c:	4620      	mov	r0, r4
 800a18e:	f7ff fa8f 	bl	80096b0 <_free_r>
 800a192:	e7ba      	b.n	800a10a <_reclaim_reent+0x16>
 800a194:	680e      	ldr	r6, [r1, #0]
 800a196:	4620      	mov	r0, r4
 800a198:	f7ff fa8a 	bl	80096b0 <_free_r>
 800a19c:	4631      	mov	r1, r6
 800a19e:	e7ef      	b.n	800a180 <_reclaim_reent+0x8c>
 800a1a0:	2500      	movs	r5, #0
 800a1a2:	e7ef      	b.n	800a184 <_reclaim_reent+0x90>
 800a1a4:	bd70      	pop	{r4, r5, r6, pc}
 800a1a6:	bf00      	nop
 800a1a8:	2000002c 	.word	0x2000002c

0800a1ac <_sbrk_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d06      	ldr	r5, [pc, #24]	; (800a1c8 <_sbrk_r+0x1c>)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	602b      	str	r3, [r5, #0]
 800a1b8:	f7f8 f8ae 	bl	8002318 <_sbrk>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d102      	bne.n	800a1c6 <_sbrk_r+0x1a>
 800a1c0:	682b      	ldr	r3, [r5, #0]
 800a1c2:	b103      	cbz	r3, 800a1c6 <_sbrk_r+0x1a>
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	200059fc 	.word	0x200059fc

0800a1cc <siprintf>:
 800a1cc:	b40e      	push	{r1, r2, r3}
 800a1ce:	b500      	push	{lr}
 800a1d0:	b09c      	sub	sp, #112	; 0x70
 800a1d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a1d4:	9002      	str	r0, [sp, #8]
 800a1d6:	9006      	str	r0, [sp, #24]
 800a1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1dc:	4809      	ldr	r0, [pc, #36]	; (800a204 <siprintf+0x38>)
 800a1de:	9107      	str	r1, [sp, #28]
 800a1e0:	9104      	str	r1, [sp, #16]
 800a1e2:	4909      	ldr	r1, [pc, #36]	; (800a208 <siprintf+0x3c>)
 800a1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	a902      	add	r1, sp, #8
 800a1f0:	f001 fbb6 	bl	800b960 <_svfiprintf_r>
 800a1f4:	9b02      	ldr	r3, [sp, #8]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	b01c      	add	sp, #112	; 0x70
 800a1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a200:	b003      	add	sp, #12
 800a202:	4770      	bx	lr
 800a204:	2000002c 	.word	0x2000002c
 800a208:	ffff0208 	.word	0xffff0208

0800a20c <__sread>:
 800a20c:	b510      	push	{r4, lr}
 800a20e:	460c      	mov	r4, r1
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	f001 fca4 	bl	800bb60 <_read_r>
 800a218:	2800      	cmp	r0, #0
 800a21a:	bfab      	itete	ge
 800a21c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a21e:	89a3      	ldrhlt	r3, [r4, #12]
 800a220:	181b      	addge	r3, r3, r0
 800a222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a226:	bfac      	ite	ge
 800a228:	6563      	strge	r3, [r4, #84]	; 0x54
 800a22a:	81a3      	strhlt	r3, [r4, #12]
 800a22c:	bd10      	pop	{r4, pc}

0800a22e <__swrite>:
 800a22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	461f      	mov	r7, r3
 800a234:	898b      	ldrh	r3, [r1, #12]
 800a236:	05db      	lsls	r3, r3, #23
 800a238:	4605      	mov	r5, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	4616      	mov	r6, r2
 800a23e:	d505      	bpl.n	800a24c <__swrite+0x1e>
 800a240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a244:	2302      	movs	r3, #2
 800a246:	2200      	movs	r2, #0
 800a248:	f000 ff84 	bl	800b154 <_lseek_r>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	4632      	mov	r2, r6
 800a25a:	463b      	mov	r3, r7
 800a25c:	4628      	mov	r0, r5
 800a25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a262:	f000 b817 	b.w	800a294 <_write_r>

0800a266 <__sseek>:
 800a266:	b510      	push	{r4, lr}
 800a268:	460c      	mov	r4, r1
 800a26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26e:	f000 ff71 	bl	800b154 <_lseek_r>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	bf15      	itete	ne
 800a278:	6560      	strne	r0, [r4, #84]	; 0x54
 800a27a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a27e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a282:	81a3      	strheq	r3, [r4, #12]
 800a284:	bf18      	it	ne
 800a286:	81a3      	strhne	r3, [r4, #12]
 800a288:	bd10      	pop	{r4, pc}

0800a28a <__sclose>:
 800a28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28e:	f000 b813 	b.w	800a2b8 <_close_r>
	...

0800a294 <_write_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d07      	ldr	r5, [pc, #28]	; (800a2b4 <_write_r+0x20>)
 800a298:	4604      	mov	r4, r0
 800a29a:	4608      	mov	r0, r1
 800a29c:	4611      	mov	r1, r2
 800a29e:	2200      	movs	r2, #0
 800a2a0:	602a      	str	r2, [r5, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f7f7 ffe7 	bl	8002276 <_write>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_write_r+0x1e>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_write_r+0x1e>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	200059fc 	.word	0x200059fc

0800a2b8 <_close_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4d06      	ldr	r5, [pc, #24]	; (800a2d4 <_close_r+0x1c>)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4604      	mov	r4, r0
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	602b      	str	r3, [r5, #0]
 800a2c4:	f7f7 fff3 	bl	80022ae <_close>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_close_r+0x1a>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_close_r+0x1a>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	200059fc 	.word	0x200059fc

0800a2d8 <quorem>:
 800a2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	6903      	ldr	r3, [r0, #16]
 800a2de:	690c      	ldr	r4, [r1, #16]
 800a2e0:	42a3      	cmp	r3, r4
 800a2e2:	4607      	mov	r7, r0
 800a2e4:	f2c0 8081 	blt.w	800a3ea <quorem+0x112>
 800a2e8:	3c01      	subs	r4, #1
 800a2ea:	f101 0814 	add.w	r8, r1, #20
 800a2ee:	f100 0514 	add.w	r5, r0, #20
 800a2f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a300:	3301      	adds	r3, #1
 800a302:	429a      	cmp	r2, r3
 800a304:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a308:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a30c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a310:	d331      	bcc.n	800a376 <quorem+0x9e>
 800a312:	f04f 0e00 	mov.w	lr, #0
 800a316:	4640      	mov	r0, r8
 800a318:	46ac      	mov	ip, r5
 800a31a:	46f2      	mov	sl, lr
 800a31c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a320:	b293      	uxth	r3, r2
 800a322:	fb06 e303 	mla	r3, r6, r3, lr
 800a326:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	ebaa 0303 	sub.w	r3, sl, r3
 800a330:	0c12      	lsrs	r2, r2, #16
 800a332:	f8dc a000 	ldr.w	sl, [ip]
 800a336:	fb06 e202 	mla	r2, r6, r2, lr
 800a33a:	fa13 f38a 	uxtah	r3, r3, sl
 800a33e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a342:	fa1f fa82 	uxth.w	sl, r2
 800a346:	f8dc 2000 	ldr.w	r2, [ip]
 800a34a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a34e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a352:	b29b      	uxth	r3, r3
 800a354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a358:	4581      	cmp	r9, r0
 800a35a:	f84c 3b04 	str.w	r3, [ip], #4
 800a35e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a362:	d2db      	bcs.n	800a31c <quorem+0x44>
 800a364:	f855 300b 	ldr.w	r3, [r5, fp]
 800a368:	b92b      	cbnz	r3, 800a376 <quorem+0x9e>
 800a36a:	9b01      	ldr	r3, [sp, #4]
 800a36c:	3b04      	subs	r3, #4
 800a36e:	429d      	cmp	r5, r3
 800a370:	461a      	mov	r2, r3
 800a372:	d32e      	bcc.n	800a3d2 <quorem+0xfa>
 800a374:	613c      	str	r4, [r7, #16]
 800a376:	4638      	mov	r0, r7
 800a378:	f001 f988 	bl	800b68c <__mcmp>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	db24      	blt.n	800a3ca <quorem+0xf2>
 800a380:	3601      	adds	r6, #1
 800a382:	4628      	mov	r0, r5
 800a384:	f04f 0c00 	mov.w	ip, #0
 800a388:	f858 2b04 	ldr.w	r2, [r8], #4
 800a38c:	f8d0 e000 	ldr.w	lr, [r0]
 800a390:	b293      	uxth	r3, r2
 800a392:	ebac 0303 	sub.w	r3, ip, r3
 800a396:	0c12      	lsrs	r2, r2, #16
 800a398:	fa13 f38e 	uxtah	r3, r3, lr
 800a39c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3aa:	45c1      	cmp	r9, r8
 800a3ac:	f840 3b04 	str.w	r3, [r0], #4
 800a3b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3b4:	d2e8      	bcs.n	800a388 <quorem+0xb0>
 800a3b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3be:	b922      	cbnz	r2, 800a3ca <quorem+0xf2>
 800a3c0:	3b04      	subs	r3, #4
 800a3c2:	429d      	cmp	r5, r3
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	d30a      	bcc.n	800a3de <quorem+0x106>
 800a3c8:	613c      	str	r4, [r7, #16]
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	b003      	add	sp, #12
 800a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	3b04      	subs	r3, #4
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	d1cc      	bne.n	800a374 <quorem+0x9c>
 800a3da:	3c01      	subs	r4, #1
 800a3dc:	e7c7      	b.n	800a36e <quorem+0x96>
 800a3de:	6812      	ldr	r2, [r2, #0]
 800a3e0:	3b04      	subs	r3, #4
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	d1f0      	bne.n	800a3c8 <quorem+0xf0>
 800a3e6:	3c01      	subs	r4, #1
 800a3e8:	e7eb      	b.n	800a3c2 <quorem+0xea>
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e7ee      	b.n	800a3cc <quorem+0xf4>
	...

0800a3f0 <_dtoa_r>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	ed2d 8b02 	vpush	{d8}
 800a3f8:	ec57 6b10 	vmov	r6, r7, d0
 800a3fc:	b095      	sub	sp, #84	; 0x54
 800a3fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a400:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a404:	9105      	str	r1, [sp, #20]
 800a406:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a40a:	4604      	mov	r4, r0
 800a40c:	9209      	str	r2, [sp, #36]	; 0x24
 800a40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a410:	b975      	cbnz	r5, 800a430 <_dtoa_r+0x40>
 800a412:	2010      	movs	r0, #16
 800a414:	f7ff f926 	bl	8009664 <malloc>
 800a418:	4602      	mov	r2, r0
 800a41a:	6260      	str	r0, [r4, #36]	; 0x24
 800a41c:	b920      	cbnz	r0, 800a428 <_dtoa_r+0x38>
 800a41e:	4bb2      	ldr	r3, [pc, #712]	; (800a6e8 <_dtoa_r+0x2f8>)
 800a420:	21ea      	movs	r1, #234	; 0xea
 800a422:	48b2      	ldr	r0, [pc, #712]	; (800a6ec <_dtoa_r+0x2fc>)
 800a424:	f001 fbae 	bl	800bb84 <__assert_func>
 800a428:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a42c:	6005      	str	r5, [r0, #0]
 800a42e:	60c5      	str	r5, [r0, #12]
 800a430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a432:	6819      	ldr	r1, [r3, #0]
 800a434:	b151      	cbz	r1, 800a44c <_dtoa_r+0x5c>
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	604a      	str	r2, [r1, #4]
 800a43a:	2301      	movs	r3, #1
 800a43c:	4093      	lsls	r3, r2
 800a43e:	608b      	str	r3, [r1, #8]
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fee5 	bl	800b210 <_Bfree>
 800a446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	1e3b      	subs	r3, r7, #0
 800a44e:	bfb9      	ittee	lt
 800a450:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a454:	9303      	strlt	r3, [sp, #12]
 800a456:	2300      	movge	r3, #0
 800a458:	f8c8 3000 	strge.w	r3, [r8]
 800a45c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a460:	4ba3      	ldr	r3, [pc, #652]	; (800a6f0 <_dtoa_r+0x300>)
 800a462:	bfbc      	itt	lt
 800a464:	2201      	movlt	r2, #1
 800a466:	f8c8 2000 	strlt.w	r2, [r8]
 800a46a:	ea33 0309 	bics.w	r3, r3, r9
 800a46e:	d11b      	bne.n	800a4a8 <_dtoa_r+0xb8>
 800a470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a472:	f242 730f 	movw	r3, #9999	; 0x270f
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a47c:	4333      	orrs	r3, r6
 800a47e:	f000 857a 	beq.w	800af76 <_dtoa_r+0xb86>
 800a482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a484:	b963      	cbnz	r3, 800a4a0 <_dtoa_r+0xb0>
 800a486:	4b9b      	ldr	r3, [pc, #620]	; (800a6f4 <_dtoa_r+0x304>)
 800a488:	e024      	b.n	800a4d4 <_dtoa_r+0xe4>
 800a48a:	4b9b      	ldr	r3, [pc, #620]	; (800a6f8 <_dtoa_r+0x308>)
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	3308      	adds	r3, #8
 800a490:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	9800      	ldr	r0, [sp, #0]
 800a496:	b015      	add	sp, #84	; 0x54
 800a498:	ecbd 8b02 	vpop	{d8}
 800a49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a0:	4b94      	ldr	r3, [pc, #592]	; (800a6f4 <_dtoa_r+0x304>)
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	3303      	adds	r3, #3
 800a4a6:	e7f3      	b.n	800a490 <_dtoa_r+0xa0>
 800a4a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	ec51 0b17 	vmov	r0, r1, d7
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a4b8:	f7f6 fb16 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4bc:	4680      	mov	r8, r0
 800a4be:	b158      	cbz	r0, 800a4d8 <_dtoa_r+0xe8>
 800a4c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8551 	beq.w	800af70 <_dtoa_r+0xb80>
 800a4ce:	488b      	ldr	r0, [pc, #556]	; (800a6fc <_dtoa_r+0x30c>)
 800a4d0:	6018      	str	r0, [r3, #0]
 800a4d2:	1e43      	subs	r3, r0, #1
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	e7dd      	b.n	800a494 <_dtoa_r+0xa4>
 800a4d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a4dc:	aa12      	add	r2, sp, #72	; 0x48
 800a4de:	a913      	add	r1, sp, #76	; 0x4c
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f001 f977 	bl	800b7d4 <__d2b>
 800a4e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4ea:	4683      	mov	fp, r0
 800a4ec:	2d00      	cmp	r5, #0
 800a4ee:	d07c      	beq.n	800a5ea <_dtoa_r+0x1fa>
 800a4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a4f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a4fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a502:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a50a:	4b7d      	ldr	r3, [pc, #500]	; (800a700 <_dtoa_r+0x310>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f5 fec9 	bl	80002a8 <__aeabi_dsub>
 800a516:	a36e      	add	r3, pc, #440	; (adr r3, 800a6d0 <_dtoa_r+0x2e0>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f6 f87c 	bl	8000618 <__aeabi_dmul>
 800a520:	a36d      	add	r3, pc, #436	; (adr r3, 800a6d8 <_dtoa_r+0x2e8>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f5 fec1 	bl	80002ac <__adddf3>
 800a52a:	4606      	mov	r6, r0
 800a52c:	4628      	mov	r0, r5
 800a52e:	460f      	mov	r7, r1
 800a530:	f7f6 f808 	bl	8000544 <__aeabi_i2d>
 800a534:	a36a      	add	r3, pc, #424	; (adr r3, 800a6e0 <_dtoa_r+0x2f0>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f6 f86d 	bl	8000618 <__aeabi_dmul>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4630      	mov	r0, r6
 800a544:	4639      	mov	r1, r7
 800a546:	f7f5 feb1 	bl	80002ac <__adddf3>
 800a54a:	4606      	mov	r6, r0
 800a54c:	460f      	mov	r7, r1
 800a54e:	f7f6 fb13 	bl	8000b78 <__aeabi_d2iz>
 800a552:	2200      	movs	r2, #0
 800a554:	4682      	mov	sl, r0
 800a556:	2300      	movs	r3, #0
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f6 face 	bl	8000afc <__aeabi_dcmplt>
 800a560:	b148      	cbz	r0, 800a576 <_dtoa_r+0x186>
 800a562:	4650      	mov	r0, sl
 800a564:	f7f5 ffee 	bl	8000544 <__aeabi_i2d>
 800a568:	4632      	mov	r2, r6
 800a56a:	463b      	mov	r3, r7
 800a56c:	f7f6 fabc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a570:	b908      	cbnz	r0, 800a576 <_dtoa_r+0x186>
 800a572:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a576:	f1ba 0f16 	cmp.w	sl, #22
 800a57a:	d854      	bhi.n	800a626 <_dtoa_r+0x236>
 800a57c:	4b61      	ldr	r3, [pc, #388]	; (800a704 <_dtoa_r+0x314>)
 800a57e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a58a:	f7f6 fab7 	bl	8000afc <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d04b      	beq.n	800a62a <_dtoa_r+0x23a>
 800a592:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a596:	2300      	movs	r3, #0
 800a598:	930e      	str	r3, [sp, #56]	; 0x38
 800a59a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a59c:	1b5d      	subs	r5, r3, r5
 800a59e:	1e6b      	subs	r3, r5, #1
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	bf43      	ittte	mi
 800a5a4:	2300      	movmi	r3, #0
 800a5a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a5aa:	9304      	strmi	r3, [sp, #16]
 800a5ac:	f04f 0800 	movpl.w	r8, #0
 800a5b0:	f1ba 0f00 	cmp.w	sl, #0
 800a5b4:	db3b      	blt.n	800a62e <_dtoa_r+0x23e>
 800a5b6:	9b04      	ldr	r3, [sp, #16]
 800a5b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a5bc:	4453      	add	r3, sl
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9306      	str	r3, [sp, #24]
 800a5c4:	9b05      	ldr	r3, [sp, #20]
 800a5c6:	2b09      	cmp	r3, #9
 800a5c8:	d869      	bhi.n	800a69e <_dtoa_r+0x2ae>
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	bfc4      	itt	gt
 800a5ce:	3b04      	subgt	r3, #4
 800a5d0:	9305      	strgt	r3, [sp, #20]
 800a5d2:	9b05      	ldr	r3, [sp, #20]
 800a5d4:	f1a3 0302 	sub.w	r3, r3, #2
 800a5d8:	bfcc      	ite	gt
 800a5da:	2500      	movgt	r5, #0
 800a5dc:	2501      	movle	r5, #1
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d869      	bhi.n	800a6b6 <_dtoa_r+0x2c6>
 800a5e2:	e8df f003 	tbb	[pc, r3]
 800a5e6:	4e2c      	.short	0x4e2c
 800a5e8:	5a4c      	.short	0x5a4c
 800a5ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a5ee:	441d      	add	r5, r3
 800a5f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	bfc1      	itttt	gt
 800a5f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a600:	fa09 f303 	lslgt.w	r3, r9, r3
 800a604:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a608:	bfda      	itte	le
 800a60a:	f1c3 0320 	rsble	r3, r3, #32
 800a60e:	fa06 f003 	lslle.w	r0, r6, r3
 800a612:	4318      	orrgt	r0, r3
 800a614:	f7f5 ff86 	bl	8000524 <__aeabi_ui2d>
 800a618:	2301      	movs	r3, #1
 800a61a:	4606      	mov	r6, r0
 800a61c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a620:	3d01      	subs	r5, #1
 800a622:	9310      	str	r3, [sp, #64]	; 0x40
 800a624:	e771      	b.n	800a50a <_dtoa_r+0x11a>
 800a626:	2301      	movs	r3, #1
 800a628:	e7b6      	b.n	800a598 <_dtoa_r+0x1a8>
 800a62a:	900e      	str	r0, [sp, #56]	; 0x38
 800a62c:	e7b5      	b.n	800a59a <_dtoa_r+0x1aa>
 800a62e:	f1ca 0300 	rsb	r3, sl, #0
 800a632:	9306      	str	r3, [sp, #24]
 800a634:	2300      	movs	r3, #0
 800a636:	eba8 080a 	sub.w	r8, r8, sl
 800a63a:	930d      	str	r3, [sp, #52]	; 0x34
 800a63c:	e7c2      	b.n	800a5c4 <_dtoa_r+0x1d4>
 800a63e:	2300      	movs	r3, #0
 800a640:	9308      	str	r3, [sp, #32]
 800a642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a644:	2b00      	cmp	r3, #0
 800a646:	dc39      	bgt.n	800a6bc <_dtoa_r+0x2cc>
 800a648:	f04f 0901 	mov.w	r9, #1
 800a64c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a650:	464b      	mov	r3, r9
 800a652:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a656:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a658:	2200      	movs	r2, #0
 800a65a:	6042      	str	r2, [r0, #4]
 800a65c:	2204      	movs	r2, #4
 800a65e:	f102 0614 	add.w	r6, r2, #20
 800a662:	429e      	cmp	r6, r3
 800a664:	6841      	ldr	r1, [r0, #4]
 800a666:	d92f      	bls.n	800a6c8 <_dtoa_r+0x2d8>
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fd91 	bl	800b190 <_Balloc>
 800a66e:	9000      	str	r0, [sp, #0]
 800a670:	2800      	cmp	r0, #0
 800a672:	d14b      	bne.n	800a70c <_dtoa_r+0x31c>
 800a674:	4b24      	ldr	r3, [pc, #144]	; (800a708 <_dtoa_r+0x318>)
 800a676:	4602      	mov	r2, r0
 800a678:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a67c:	e6d1      	b.n	800a422 <_dtoa_r+0x32>
 800a67e:	2301      	movs	r3, #1
 800a680:	e7de      	b.n	800a640 <_dtoa_r+0x250>
 800a682:	2300      	movs	r3, #0
 800a684:	9308      	str	r3, [sp, #32]
 800a686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a688:	eb0a 0903 	add.w	r9, sl, r3
 800a68c:	f109 0301 	add.w	r3, r9, #1
 800a690:	2b01      	cmp	r3, #1
 800a692:	9301      	str	r3, [sp, #4]
 800a694:	bfb8      	it	lt
 800a696:	2301      	movlt	r3, #1
 800a698:	e7dd      	b.n	800a656 <_dtoa_r+0x266>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e7f2      	b.n	800a684 <_dtoa_r+0x294>
 800a69e:	2501      	movs	r5, #1
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	9508      	str	r5, [sp, #32]
 800a6a6:	f04f 39ff 	mov.w	r9, #4294967295
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6b0:	2312      	movs	r3, #18
 800a6b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b4:	e7cf      	b.n	800a656 <_dtoa_r+0x266>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	9308      	str	r3, [sp, #32]
 800a6ba:	e7f4      	b.n	800a6a6 <_dtoa_r+0x2b6>
 800a6bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a6c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6c4:	464b      	mov	r3, r9
 800a6c6:	e7c6      	b.n	800a656 <_dtoa_r+0x266>
 800a6c8:	3101      	adds	r1, #1
 800a6ca:	6041      	str	r1, [r0, #4]
 800a6cc:	0052      	lsls	r2, r2, #1
 800a6ce:	e7c6      	b.n	800a65e <_dtoa_r+0x26e>
 800a6d0:	636f4361 	.word	0x636f4361
 800a6d4:	3fd287a7 	.word	0x3fd287a7
 800a6d8:	8b60c8b3 	.word	0x8b60c8b3
 800a6dc:	3fc68a28 	.word	0x3fc68a28
 800a6e0:	509f79fb 	.word	0x509f79fb
 800a6e4:	3fd34413 	.word	0x3fd34413
 800a6e8:	0800c4a9 	.word	0x0800c4a9
 800a6ec:	0800c4c0 	.word	0x0800c4c0
 800a6f0:	7ff00000 	.word	0x7ff00000
 800a6f4:	0800c4a5 	.word	0x0800c4a5
 800a6f8:	0800c49c 	.word	0x0800c49c
 800a6fc:	0800c479 	.word	0x0800c479
 800a700:	3ff80000 	.word	0x3ff80000
 800a704:	0800c5b8 	.word	0x0800c5b8
 800a708:	0800c51f 	.word	0x0800c51f
 800a70c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a70e:	9a00      	ldr	r2, [sp, #0]
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	2b0e      	cmp	r3, #14
 800a716:	f200 80ad 	bhi.w	800a874 <_dtoa_r+0x484>
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	f000 80aa 	beq.w	800a874 <_dtoa_r+0x484>
 800a720:	f1ba 0f00 	cmp.w	sl, #0
 800a724:	dd36      	ble.n	800a794 <_dtoa_r+0x3a4>
 800a726:	4ac3      	ldr	r2, [pc, #780]	; (800aa34 <_dtoa_r+0x644>)
 800a728:	f00a 030f 	and.w	r3, sl, #15
 800a72c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a730:	ed93 7b00 	vldr	d7, [r3]
 800a734:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a738:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a73c:	eeb0 8a47 	vmov.f32	s16, s14
 800a740:	eef0 8a67 	vmov.f32	s17, s15
 800a744:	d016      	beq.n	800a774 <_dtoa_r+0x384>
 800a746:	4bbc      	ldr	r3, [pc, #752]	; (800aa38 <_dtoa_r+0x648>)
 800a748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a74c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a750:	f7f6 f88c 	bl	800086c <__aeabi_ddiv>
 800a754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a758:	f007 070f 	and.w	r7, r7, #15
 800a75c:	2503      	movs	r5, #3
 800a75e:	4eb6      	ldr	r6, [pc, #728]	; (800aa38 <_dtoa_r+0x648>)
 800a760:	b957      	cbnz	r7, 800a778 <_dtoa_r+0x388>
 800a762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a766:	ec53 2b18 	vmov	r2, r3, d8
 800a76a:	f7f6 f87f 	bl	800086c <__aeabi_ddiv>
 800a76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a772:	e029      	b.n	800a7c8 <_dtoa_r+0x3d8>
 800a774:	2502      	movs	r5, #2
 800a776:	e7f2      	b.n	800a75e <_dtoa_r+0x36e>
 800a778:	07f9      	lsls	r1, r7, #31
 800a77a:	d508      	bpl.n	800a78e <_dtoa_r+0x39e>
 800a77c:	ec51 0b18 	vmov	r0, r1, d8
 800a780:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a784:	f7f5 ff48 	bl	8000618 <__aeabi_dmul>
 800a788:	ec41 0b18 	vmov	d8, r0, r1
 800a78c:	3501      	adds	r5, #1
 800a78e:	107f      	asrs	r7, r7, #1
 800a790:	3608      	adds	r6, #8
 800a792:	e7e5      	b.n	800a760 <_dtoa_r+0x370>
 800a794:	f000 80a6 	beq.w	800a8e4 <_dtoa_r+0x4f4>
 800a798:	f1ca 0600 	rsb	r6, sl, #0
 800a79c:	4ba5      	ldr	r3, [pc, #660]	; (800aa34 <_dtoa_r+0x644>)
 800a79e:	4fa6      	ldr	r7, [pc, #664]	; (800aa38 <_dtoa_r+0x648>)
 800a7a0:	f006 020f 	and.w	r2, r6, #15
 800a7a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7b0:	f7f5 ff32 	bl	8000618 <__aeabi_dmul>
 800a7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b8:	1136      	asrs	r6, r6, #4
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2502      	movs	r5, #2
 800a7be:	2e00      	cmp	r6, #0
 800a7c0:	f040 8085 	bne.w	800a8ce <_dtoa_r+0x4de>
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1d2      	bne.n	800a76e <_dtoa_r+0x37e>
 800a7c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 808c 	beq.w	800a8e8 <_dtoa_r+0x4f8>
 800a7d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7d4:	4b99      	ldr	r3, [pc, #612]	; (800aa3c <_dtoa_r+0x64c>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f6 f98e 	bl	8000afc <__aeabi_dcmplt>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	f000 8081 	beq.w	800a8e8 <_dtoa_r+0x4f8>
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d07d      	beq.n	800a8e8 <_dtoa_r+0x4f8>
 800a7ec:	f1b9 0f00 	cmp.w	r9, #0
 800a7f0:	dd3c      	ble.n	800a86c <_dtoa_r+0x47c>
 800a7f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7f6:	9307      	str	r3, [sp, #28]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4b91      	ldr	r3, [pc, #580]	; (800aa40 <_dtoa_r+0x650>)
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f5 ff0a 	bl	8000618 <__aeabi_dmul>
 800a804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a808:	3501      	adds	r5, #1
 800a80a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a80e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a812:	4628      	mov	r0, r5
 800a814:	f7f5 fe96 	bl	8000544 <__aeabi_i2d>
 800a818:	4632      	mov	r2, r6
 800a81a:	463b      	mov	r3, r7
 800a81c:	f7f5 fefc 	bl	8000618 <__aeabi_dmul>
 800a820:	4b88      	ldr	r3, [pc, #544]	; (800aa44 <_dtoa_r+0x654>)
 800a822:	2200      	movs	r2, #0
 800a824:	f7f5 fd42 	bl	80002ac <__adddf3>
 800a828:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a830:	9303      	str	r3, [sp, #12]
 800a832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a834:	2b00      	cmp	r3, #0
 800a836:	d15c      	bne.n	800a8f2 <_dtoa_r+0x502>
 800a838:	4b83      	ldr	r3, [pc, #524]	; (800aa48 <_dtoa_r+0x658>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	4630      	mov	r0, r6
 800a83e:	4639      	mov	r1, r7
 800a840:	f7f5 fd32 	bl	80002a8 <__aeabi_dsub>
 800a844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a848:	4606      	mov	r6, r0
 800a84a:	460f      	mov	r7, r1
 800a84c:	f7f6 f974 	bl	8000b38 <__aeabi_dcmpgt>
 800a850:	2800      	cmp	r0, #0
 800a852:	f040 8296 	bne.w	800ad82 <_dtoa_r+0x992>
 800a856:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a85a:	4630      	mov	r0, r6
 800a85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a860:	4639      	mov	r1, r7
 800a862:	f7f6 f94b 	bl	8000afc <__aeabi_dcmplt>
 800a866:	2800      	cmp	r0, #0
 800a868:	f040 8288 	bne.w	800ad7c <_dtoa_r+0x98c>
 800a86c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a870:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a876:	2b00      	cmp	r3, #0
 800a878:	f2c0 8158 	blt.w	800ab2c <_dtoa_r+0x73c>
 800a87c:	f1ba 0f0e 	cmp.w	sl, #14
 800a880:	f300 8154 	bgt.w	800ab2c <_dtoa_r+0x73c>
 800a884:	4b6b      	ldr	r3, [pc, #428]	; (800aa34 <_dtoa_r+0x644>)
 800a886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a88a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	f280 80e3 	bge.w	800aa5c <_dtoa_r+0x66c>
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f300 80df 	bgt.w	800aa5c <_dtoa_r+0x66c>
 800a89e:	f040 826d 	bne.w	800ad7c <_dtoa_r+0x98c>
 800a8a2:	4b69      	ldr	r3, [pc, #420]	; (800aa48 <_dtoa_r+0x658>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	f7f5 feb5 	bl	8000618 <__aeabi_dmul>
 800a8ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8b2:	f7f6 f937 	bl	8000b24 <__aeabi_dcmpge>
 800a8b6:	9e01      	ldr	r6, [sp, #4]
 800a8b8:	4637      	mov	r7, r6
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	f040 8243 	bne.w	800ad46 <_dtoa_r+0x956>
 800a8c0:	9d00      	ldr	r5, [sp, #0]
 800a8c2:	2331      	movs	r3, #49	; 0x31
 800a8c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8c8:	f10a 0a01 	add.w	sl, sl, #1
 800a8cc:	e23f      	b.n	800ad4e <_dtoa_r+0x95e>
 800a8ce:	07f2      	lsls	r2, r6, #31
 800a8d0:	d505      	bpl.n	800a8de <_dtoa_r+0x4ee>
 800a8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d6:	f7f5 fe9f 	bl	8000618 <__aeabi_dmul>
 800a8da:	3501      	adds	r5, #1
 800a8dc:	2301      	movs	r3, #1
 800a8de:	1076      	asrs	r6, r6, #1
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	e76c      	b.n	800a7be <_dtoa_r+0x3ce>
 800a8e4:	2502      	movs	r5, #2
 800a8e6:	e76f      	b.n	800a7c8 <_dtoa_r+0x3d8>
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800a8ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f0:	e78d      	b.n	800a80e <_dtoa_r+0x41e>
 800a8f2:	9900      	ldr	r1, [sp, #0]
 800a8f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a8f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8f8:	4b4e      	ldr	r3, [pc, #312]	; (800aa34 <_dtoa_r+0x644>)
 800a8fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8fe:	4401      	add	r1, r0
 800a900:	9102      	str	r1, [sp, #8]
 800a902:	9908      	ldr	r1, [sp, #32]
 800a904:	eeb0 8a47 	vmov.f32	s16, s14
 800a908:	eef0 8a67 	vmov.f32	s17, s15
 800a90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a910:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a914:	2900      	cmp	r1, #0
 800a916:	d045      	beq.n	800a9a4 <_dtoa_r+0x5b4>
 800a918:	494c      	ldr	r1, [pc, #304]	; (800aa4c <_dtoa_r+0x65c>)
 800a91a:	2000      	movs	r0, #0
 800a91c:	f7f5 ffa6 	bl	800086c <__aeabi_ddiv>
 800a920:	ec53 2b18 	vmov	r2, r3, d8
 800a924:	f7f5 fcc0 	bl	80002a8 <__aeabi_dsub>
 800a928:	9d00      	ldr	r5, [sp, #0]
 800a92a:	ec41 0b18 	vmov	d8, r0, r1
 800a92e:	4639      	mov	r1, r7
 800a930:	4630      	mov	r0, r6
 800a932:	f7f6 f921 	bl	8000b78 <__aeabi_d2iz>
 800a936:	900c      	str	r0, [sp, #48]	; 0x30
 800a938:	f7f5 fe04 	bl	8000544 <__aeabi_i2d>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f5 fcb0 	bl	80002a8 <__aeabi_dsub>
 800a948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a94a:	3330      	adds	r3, #48	; 0x30
 800a94c:	f805 3b01 	strb.w	r3, [r5], #1
 800a950:	ec53 2b18 	vmov	r2, r3, d8
 800a954:	4606      	mov	r6, r0
 800a956:	460f      	mov	r7, r1
 800a958:	f7f6 f8d0 	bl	8000afc <__aeabi_dcmplt>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d165      	bne.n	800aa2c <_dtoa_r+0x63c>
 800a960:	4632      	mov	r2, r6
 800a962:	463b      	mov	r3, r7
 800a964:	4935      	ldr	r1, [pc, #212]	; (800aa3c <_dtoa_r+0x64c>)
 800a966:	2000      	movs	r0, #0
 800a968:	f7f5 fc9e 	bl	80002a8 <__aeabi_dsub>
 800a96c:	ec53 2b18 	vmov	r2, r3, d8
 800a970:	f7f6 f8c4 	bl	8000afc <__aeabi_dcmplt>
 800a974:	2800      	cmp	r0, #0
 800a976:	f040 80b9 	bne.w	800aaec <_dtoa_r+0x6fc>
 800a97a:	9b02      	ldr	r3, [sp, #8]
 800a97c:	429d      	cmp	r5, r3
 800a97e:	f43f af75 	beq.w	800a86c <_dtoa_r+0x47c>
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <_dtoa_r+0x650>)
 800a984:	ec51 0b18 	vmov	r0, r1, d8
 800a988:	2200      	movs	r2, #0
 800a98a:	f7f5 fe45 	bl	8000618 <__aeabi_dmul>
 800a98e:	4b2c      	ldr	r3, [pc, #176]	; (800aa40 <_dtoa_r+0x650>)
 800a990:	ec41 0b18 	vmov	d8, r0, r1
 800a994:	2200      	movs	r2, #0
 800a996:	4630      	mov	r0, r6
 800a998:	4639      	mov	r1, r7
 800a99a:	f7f5 fe3d 	bl	8000618 <__aeabi_dmul>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	460f      	mov	r7, r1
 800a9a2:	e7c4      	b.n	800a92e <_dtoa_r+0x53e>
 800a9a4:	ec51 0b17 	vmov	r0, r1, d7
 800a9a8:	f7f5 fe36 	bl	8000618 <__aeabi_dmul>
 800a9ac:	9b02      	ldr	r3, [sp, #8]
 800a9ae:	9d00      	ldr	r5, [sp, #0]
 800a9b0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9b2:	ec41 0b18 	vmov	d8, r0, r1
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7f6 f8dd 	bl	8000b78 <__aeabi_d2iz>
 800a9be:	9011      	str	r0, [sp, #68]	; 0x44
 800a9c0:	f7f5 fdc0 	bl	8000544 <__aeabi_i2d>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f7f5 fc6c 	bl	80002a8 <__aeabi_dsub>
 800a9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9d2:	3330      	adds	r3, #48	; 0x30
 800a9d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a9d8:	9b02      	ldr	r3, [sp, #8]
 800a9da:	429d      	cmp	r5, r3
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460f      	mov	r7, r1
 800a9e0:	f04f 0200 	mov.w	r2, #0
 800a9e4:	d134      	bne.n	800aa50 <_dtoa_r+0x660>
 800a9e6:	4b19      	ldr	r3, [pc, #100]	; (800aa4c <_dtoa_r+0x65c>)
 800a9e8:	ec51 0b18 	vmov	r0, r1, d8
 800a9ec:	f7f5 fc5e 	bl	80002ac <__adddf3>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	f7f6 f89e 	bl	8000b38 <__aeabi_dcmpgt>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d175      	bne.n	800aaec <_dtoa_r+0x6fc>
 800aa00:	ec53 2b18 	vmov	r2, r3, d8
 800aa04:	4911      	ldr	r1, [pc, #68]	; (800aa4c <_dtoa_r+0x65c>)
 800aa06:	2000      	movs	r0, #0
 800aa08:	f7f5 fc4e 	bl	80002a8 <__aeabi_dsub>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f6 f872 	bl	8000afc <__aeabi_dcmplt>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	f43f af27 	beq.w	800a86c <_dtoa_r+0x47c>
 800aa1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa20:	1e6b      	subs	r3, r5, #1
 800aa22:	930c      	str	r3, [sp, #48]	; 0x30
 800aa24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa28:	2b30      	cmp	r3, #48	; 0x30
 800aa2a:	d0f8      	beq.n	800aa1e <_dtoa_r+0x62e>
 800aa2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa30:	e04a      	b.n	800aac8 <_dtoa_r+0x6d8>
 800aa32:	bf00      	nop
 800aa34:	0800c5b8 	.word	0x0800c5b8
 800aa38:	0800c590 	.word	0x0800c590
 800aa3c:	3ff00000 	.word	0x3ff00000
 800aa40:	40240000 	.word	0x40240000
 800aa44:	401c0000 	.word	0x401c0000
 800aa48:	40140000 	.word	0x40140000
 800aa4c:	3fe00000 	.word	0x3fe00000
 800aa50:	4baf      	ldr	r3, [pc, #700]	; (800ad10 <_dtoa_r+0x920>)
 800aa52:	f7f5 fde1 	bl	8000618 <__aeabi_dmul>
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	e7ac      	b.n	800a9b6 <_dtoa_r+0x5c6>
 800aa5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa60:	9d00      	ldr	r5, [sp, #0]
 800aa62:	4642      	mov	r2, r8
 800aa64:	464b      	mov	r3, r9
 800aa66:	4630      	mov	r0, r6
 800aa68:	4639      	mov	r1, r7
 800aa6a:	f7f5 feff 	bl	800086c <__aeabi_ddiv>
 800aa6e:	f7f6 f883 	bl	8000b78 <__aeabi_d2iz>
 800aa72:	9002      	str	r0, [sp, #8]
 800aa74:	f7f5 fd66 	bl	8000544 <__aeabi_i2d>
 800aa78:	4642      	mov	r2, r8
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	f7f5 fdcc 	bl	8000618 <__aeabi_dmul>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4630      	mov	r0, r6
 800aa86:	4639      	mov	r1, r7
 800aa88:	f7f5 fc0e 	bl	80002a8 <__aeabi_dsub>
 800aa8c:	9e02      	ldr	r6, [sp, #8]
 800aa8e:	9f01      	ldr	r7, [sp, #4]
 800aa90:	3630      	adds	r6, #48	; 0x30
 800aa92:	f805 6b01 	strb.w	r6, [r5], #1
 800aa96:	9e00      	ldr	r6, [sp, #0]
 800aa98:	1bae      	subs	r6, r5, r6
 800aa9a:	42b7      	cmp	r7, r6
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	d137      	bne.n	800ab12 <_dtoa_r+0x722>
 800aaa2:	f7f5 fc03 	bl	80002ac <__adddf3>
 800aaa6:	4642      	mov	r2, r8
 800aaa8:	464b      	mov	r3, r9
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460f      	mov	r7, r1
 800aaae:	f7f6 f843 	bl	8000b38 <__aeabi_dcmpgt>
 800aab2:	b9c8      	cbnz	r0, 800aae8 <_dtoa_r+0x6f8>
 800aab4:	4642      	mov	r2, r8
 800aab6:	464b      	mov	r3, r9
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f6 f814 	bl	8000ae8 <__aeabi_dcmpeq>
 800aac0:	b110      	cbz	r0, 800aac8 <_dtoa_r+0x6d8>
 800aac2:	9b02      	ldr	r3, [sp, #8]
 800aac4:	07d9      	lsls	r1, r3, #31
 800aac6:	d40f      	bmi.n	800aae8 <_dtoa_r+0x6f8>
 800aac8:	4620      	mov	r0, r4
 800aaca:	4659      	mov	r1, fp
 800aacc:	f000 fba0 	bl	800b210 <_Bfree>
 800aad0:	2300      	movs	r3, #0
 800aad2:	702b      	strb	r3, [r5, #0]
 800aad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aad6:	f10a 0001 	add.w	r0, sl, #1
 800aada:	6018      	str	r0, [r3, #0]
 800aadc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f43f acd8 	beq.w	800a494 <_dtoa_r+0xa4>
 800aae4:	601d      	str	r5, [r3, #0]
 800aae6:	e4d5      	b.n	800a494 <_dtoa_r+0xa4>
 800aae8:	f8cd a01c 	str.w	sl, [sp, #28]
 800aaec:	462b      	mov	r3, r5
 800aaee:	461d      	mov	r5, r3
 800aaf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaf4:	2a39      	cmp	r2, #57	; 0x39
 800aaf6:	d108      	bne.n	800ab0a <_dtoa_r+0x71a>
 800aaf8:	9a00      	ldr	r2, [sp, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d1f7      	bne.n	800aaee <_dtoa_r+0x6fe>
 800aafe:	9a07      	ldr	r2, [sp, #28]
 800ab00:	9900      	ldr	r1, [sp, #0]
 800ab02:	3201      	adds	r2, #1
 800ab04:	9207      	str	r2, [sp, #28]
 800ab06:	2230      	movs	r2, #48	; 0x30
 800ab08:	700a      	strb	r2, [r1, #0]
 800ab0a:	781a      	ldrb	r2, [r3, #0]
 800ab0c:	3201      	adds	r2, #1
 800ab0e:	701a      	strb	r2, [r3, #0]
 800ab10:	e78c      	b.n	800aa2c <_dtoa_r+0x63c>
 800ab12:	4b7f      	ldr	r3, [pc, #508]	; (800ad10 <_dtoa_r+0x920>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	f7f5 fd7f 	bl	8000618 <__aeabi_dmul>
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4606      	mov	r6, r0
 800ab20:	460f      	mov	r7, r1
 800ab22:	f7f5 ffe1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d09b      	beq.n	800aa62 <_dtoa_r+0x672>
 800ab2a:	e7cd      	b.n	800aac8 <_dtoa_r+0x6d8>
 800ab2c:	9a08      	ldr	r2, [sp, #32]
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	f000 80c4 	beq.w	800acbc <_dtoa_r+0x8cc>
 800ab34:	9a05      	ldr	r2, [sp, #20]
 800ab36:	2a01      	cmp	r2, #1
 800ab38:	f300 80a8 	bgt.w	800ac8c <_dtoa_r+0x89c>
 800ab3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab3e:	2a00      	cmp	r2, #0
 800ab40:	f000 80a0 	beq.w	800ac84 <_dtoa_r+0x894>
 800ab44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab48:	9e06      	ldr	r6, [sp, #24]
 800ab4a:	4645      	mov	r5, r8
 800ab4c:	9a04      	ldr	r2, [sp, #16]
 800ab4e:	2101      	movs	r1, #1
 800ab50:	441a      	add	r2, r3
 800ab52:	4620      	mov	r0, r4
 800ab54:	4498      	add	r8, r3
 800ab56:	9204      	str	r2, [sp, #16]
 800ab58:	f000 fc16 	bl	800b388 <__i2b>
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	2d00      	cmp	r5, #0
 800ab60:	dd0b      	ble.n	800ab7a <_dtoa_r+0x78a>
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dd08      	ble.n	800ab7a <_dtoa_r+0x78a>
 800ab68:	42ab      	cmp	r3, r5
 800ab6a:	9a04      	ldr	r2, [sp, #16]
 800ab6c:	bfa8      	it	ge
 800ab6e:	462b      	movge	r3, r5
 800ab70:	eba8 0803 	sub.w	r8, r8, r3
 800ab74:	1aed      	subs	r5, r5, r3
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	9b06      	ldr	r3, [sp, #24]
 800ab7c:	b1fb      	cbz	r3, 800abbe <_dtoa_r+0x7ce>
 800ab7e:	9b08      	ldr	r3, [sp, #32]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 809f 	beq.w	800acc4 <_dtoa_r+0x8d4>
 800ab86:	2e00      	cmp	r6, #0
 800ab88:	dd11      	ble.n	800abae <_dtoa_r+0x7be>
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 fcb6 	bl	800b500 <__pow5mult>
 800ab94:	465a      	mov	r2, fp
 800ab96:	4601      	mov	r1, r0
 800ab98:	4607      	mov	r7, r0
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 fc0a 	bl	800b3b4 <__multiply>
 800aba0:	4659      	mov	r1, fp
 800aba2:	9007      	str	r0, [sp, #28]
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 fb33 	bl	800b210 <_Bfree>
 800abaa:	9b07      	ldr	r3, [sp, #28]
 800abac:	469b      	mov	fp, r3
 800abae:	9b06      	ldr	r3, [sp, #24]
 800abb0:	1b9a      	subs	r2, r3, r6
 800abb2:	d004      	beq.n	800abbe <_dtoa_r+0x7ce>
 800abb4:	4659      	mov	r1, fp
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fca2 	bl	800b500 <__pow5mult>
 800abbc:	4683      	mov	fp, r0
 800abbe:	2101      	movs	r1, #1
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fbe1 	bl	800b388 <__i2b>
 800abc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abc8:	2b00      	cmp	r3, #0
 800abca:	4606      	mov	r6, r0
 800abcc:	dd7c      	ble.n	800acc8 <_dtoa_r+0x8d8>
 800abce:	461a      	mov	r2, r3
 800abd0:	4601      	mov	r1, r0
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 fc94 	bl	800b500 <__pow5mult>
 800abd8:	9b05      	ldr	r3, [sp, #20]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	4606      	mov	r6, r0
 800abde:	dd76      	ble.n	800acce <_dtoa_r+0x8de>
 800abe0:	2300      	movs	r3, #0
 800abe2:	9306      	str	r3, [sp, #24]
 800abe4:	6933      	ldr	r3, [r6, #16]
 800abe6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abea:	6918      	ldr	r0, [r3, #16]
 800abec:	f000 fb7c 	bl	800b2e8 <__hi0bits>
 800abf0:	f1c0 0020 	rsb	r0, r0, #32
 800abf4:	9b04      	ldr	r3, [sp, #16]
 800abf6:	4418      	add	r0, r3
 800abf8:	f010 001f 	ands.w	r0, r0, #31
 800abfc:	f000 8086 	beq.w	800ad0c <_dtoa_r+0x91c>
 800ac00:	f1c0 0320 	rsb	r3, r0, #32
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	dd7f      	ble.n	800ad08 <_dtoa_r+0x918>
 800ac08:	f1c0 001c 	rsb	r0, r0, #28
 800ac0c:	9b04      	ldr	r3, [sp, #16]
 800ac0e:	4403      	add	r3, r0
 800ac10:	4480      	add	r8, r0
 800ac12:	4405      	add	r5, r0
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	f1b8 0f00 	cmp.w	r8, #0
 800ac1a:	dd05      	ble.n	800ac28 <_dtoa_r+0x838>
 800ac1c:	4659      	mov	r1, fp
 800ac1e:	4642      	mov	r2, r8
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fcc7 	bl	800b5b4 <__lshift>
 800ac26:	4683      	mov	fp, r0
 800ac28:	9b04      	ldr	r3, [sp, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dd05      	ble.n	800ac3a <_dtoa_r+0x84a>
 800ac2e:	4631      	mov	r1, r6
 800ac30:	461a      	mov	r2, r3
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 fcbe 	bl	800b5b4 <__lshift>
 800ac38:	4606      	mov	r6, r0
 800ac3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d069      	beq.n	800ad14 <_dtoa_r+0x924>
 800ac40:	4631      	mov	r1, r6
 800ac42:	4658      	mov	r0, fp
 800ac44:	f000 fd22 	bl	800b68c <__mcmp>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	da63      	bge.n	800ad14 <_dtoa_r+0x924>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4659      	mov	r1, fp
 800ac50:	220a      	movs	r2, #10
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 fafe 	bl	800b254 <__multadd>
 800ac58:	9b08      	ldr	r3, [sp, #32]
 800ac5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac5e:	4683      	mov	fp, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 818f 	beq.w	800af84 <_dtoa_r+0xb94>
 800ac66:	4639      	mov	r1, r7
 800ac68:	2300      	movs	r3, #0
 800ac6a:	220a      	movs	r2, #10
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f000 faf1 	bl	800b254 <__multadd>
 800ac72:	f1b9 0f00 	cmp.w	r9, #0
 800ac76:	4607      	mov	r7, r0
 800ac78:	f300 808e 	bgt.w	800ad98 <_dtoa_r+0x9a8>
 800ac7c:	9b05      	ldr	r3, [sp, #20]
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	dc50      	bgt.n	800ad24 <_dtoa_r+0x934>
 800ac82:	e089      	b.n	800ad98 <_dtoa_r+0x9a8>
 800ac84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac8a:	e75d      	b.n	800ab48 <_dtoa_r+0x758>
 800ac8c:	9b01      	ldr	r3, [sp, #4]
 800ac8e:	1e5e      	subs	r6, r3, #1
 800ac90:	9b06      	ldr	r3, [sp, #24]
 800ac92:	42b3      	cmp	r3, r6
 800ac94:	bfbf      	itttt	lt
 800ac96:	9b06      	ldrlt	r3, [sp, #24]
 800ac98:	9606      	strlt	r6, [sp, #24]
 800ac9a:	1af2      	sublt	r2, r6, r3
 800ac9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ac9e:	bfb6      	itet	lt
 800aca0:	189b      	addlt	r3, r3, r2
 800aca2:	1b9e      	subge	r6, r3, r6
 800aca4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	bfb8      	it	lt
 800acaa:	2600      	movlt	r6, #0
 800acac:	2b00      	cmp	r3, #0
 800acae:	bfb5      	itete	lt
 800acb0:	eba8 0503 	sublt.w	r5, r8, r3
 800acb4:	9b01      	ldrge	r3, [sp, #4]
 800acb6:	2300      	movlt	r3, #0
 800acb8:	4645      	movge	r5, r8
 800acba:	e747      	b.n	800ab4c <_dtoa_r+0x75c>
 800acbc:	9e06      	ldr	r6, [sp, #24]
 800acbe:	9f08      	ldr	r7, [sp, #32]
 800acc0:	4645      	mov	r5, r8
 800acc2:	e74c      	b.n	800ab5e <_dtoa_r+0x76e>
 800acc4:	9a06      	ldr	r2, [sp, #24]
 800acc6:	e775      	b.n	800abb4 <_dtoa_r+0x7c4>
 800acc8:	9b05      	ldr	r3, [sp, #20]
 800acca:	2b01      	cmp	r3, #1
 800accc:	dc18      	bgt.n	800ad00 <_dtoa_r+0x910>
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	b9b3      	cbnz	r3, 800ad00 <_dtoa_r+0x910>
 800acd2:	9b03      	ldr	r3, [sp, #12]
 800acd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acd8:	b9a3      	cbnz	r3, 800ad04 <_dtoa_r+0x914>
 800acda:	9b03      	ldr	r3, [sp, #12]
 800acdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ace0:	0d1b      	lsrs	r3, r3, #20
 800ace2:	051b      	lsls	r3, r3, #20
 800ace4:	b12b      	cbz	r3, 800acf2 <_dtoa_r+0x902>
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	3301      	adds	r3, #1
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	f108 0801 	add.w	r8, r8, #1
 800acf0:	2301      	movs	r3, #1
 800acf2:	9306      	str	r3, [sp, #24]
 800acf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f47f af74 	bne.w	800abe4 <_dtoa_r+0x7f4>
 800acfc:	2001      	movs	r0, #1
 800acfe:	e779      	b.n	800abf4 <_dtoa_r+0x804>
 800ad00:	2300      	movs	r3, #0
 800ad02:	e7f6      	b.n	800acf2 <_dtoa_r+0x902>
 800ad04:	9b02      	ldr	r3, [sp, #8]
 800ad06:	e7f4      	b.n	800acf2 <_dtoa_r+0x902>
 800ad08:	d085      	beq.n	800ac16 <_dtoa_r+0x826>
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	301c      	adds	r0, #28
 800ad0e:	e77d      	b.n	800ac0c <_dtoa_r+0x81c>
 800ad10:	40240000 	.word	0x40240000
 800ad14:	9b01      	ldr	r3, [sp, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dc38      	bgt.n	800ad8c <_dtoa_r+0x99c>
 800ad1a:	9b05      	ldr	r3, [sp, #20]
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	dd35      	ble.n	800ad8c <_dtoa_r+0x99c>
 800ad20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad24:	f1b9 0f00 	cmp.w	r9, #0
 800ad28:	d10d      	bne.n	800ad46 <_dtoa_r+0x956>
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	2205      	movs	r2, #5
 800ad30:	4620      	mov	r0, r4
 800ad32:	f000 fa8f 	bl	800b254 <__multadd>
 800ad36:	4601      	mov	r1, r0
 800ad38:	4606      	mov	r6, r0
 800ad3a:	4658      	mov	r0, fp
 800ad3c:	f000 fca6 	bl	800b68c <__mcmp>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	f73f adbd 	bgt.w	800a8c0 <_dtoa_r+0x4d0>
 800ad46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad48:	9d00      	ldr	r5, [sp, #0]
 800ad4a:	ea6f 0a03 	mvn.w	sl, r3
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	4631      	mov	r1, r6
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 fa5b 	bl	800b210 <_Bfree>
 800ad5a:	2f00      	cmp	r7, #0
 800ad5c:	f43f aeb4 	beq.w	800aac8 <_dtoa_r+0x6d8>
 800ad60:	f1b8 0f00 	cmp.w	r8, #0
 800ad64:	d005      	beq.n	800ad72 <_dtoa_r+0x982>
 800ad66:	45b8      	cmp	r8, r7
 800ad68:	d003      	beq.n	800ad72 <_dtoa_r+0x982>
 800ad6a:	4641      	mov	r1, r8
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 fa4f 	bl	800b210 <_Bfree>
 800ad72:	4639      	mov	r1, r7
 800ad74:	4620      	mov	r0, r4
 800ad76:	f000 fa4b 	bl	800b210 <_Bfree>
 800ad7a:	e6a5      	b.n	800aac8 <_dtoa_r+0x6d8>
 800ad7c:	2600      	movs	r6, #0
 800ad7e:	4637      	mov	r7, r6
 800ad80:	e7e1      	b.n	800ad46 <_dtoa_r+0x956>
 800ad82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ad84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad88:	4637      	mov	r7, r6
 800ad8a:	e599      	b.n	800a8c0 <_dtoa_r+0x4d0>
 800ad8c:	9b08      	ldr	r3, [sp, #32]
 800ad8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 80fd 	beq.w	800af92 <_dtoa_r+0xba2>
 800ad98:	2d00      	cmp	r5, #0
 800ad9a:	dd05      	ble.n	800ada8 <_dtoa_r+0x9b8>
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	462a      	mov	r2, r5
 800ada0:	4620      	mov	r0, r4
 800ada2:	f000 fc07 	bl	800b5b4 <__lshift>
 800ada6:	4607      	mov	r7, r0
 800ada8:	9b06      	ldr	r3, [sp, #24]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d05c      	beq.n	800ae68 <_dtoa_r+0xa78>
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 f9ed 	bl	800b190 <_Balloc>
 800adb6:	4605      	mov	r5, r0
 800adb8:	b928      	cbnz	r0, 800adc6 <_dtoa_r+0x9d6>
 800adba:	4b80      	ldr	r3, [pc, #512]	; (800afbc <_dtoa_r+0xbcc>)
 800adbc:	4602      	mov	r2, r0
 800adbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adc2:	f7ff bb2e 	b.w	800a422 <_dtoa_r+0x32>
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	3202      	adds	r2, #2
 800adca:	0092      	lsls	r2, r2, #2
 800adcc:	f107 010c 	add.w	r1, r7, #12
 800add0:	300c      	adds	r0, #12
 800add2:	f7fe fc57 	bl	8009684 <memcpy>
 800add6:	2201      	movs	r2, #1
 800add8:	4629      	mov	r1, r5
 800adda:	4620      	mov	r0, r4
 800addc:	f000 fbea 	bl	800b5b4 <__lshift>
 800ade0:	9b00      	ldr	r3, [sp, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	444b      	add	r3, r9
 800adea:	9307      	str	r3, [sp, #28]
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	46b8      	mov	r8, r7
 800adf4:	9306      	str	r3, [sp, #24]
 800adf6:	4607      	mov	r7, r0
 800adf8:	9b01      	ldr	r3, [sp, #4]
 800adfa:	4631      	mov	r1, r6
 800adfc:	3b01      	subs	r3, #1
 800adfe:	4658      	mov	r0, fp
 800ae00:	9302      	str	r3, [sp, #8]
 800ae02:	f7ff fa69 	bl	800a2d8 <quorem>
 800ae06:	4603      	mov	r3, r0
 800ae08:	3330      	adds	r3, #48	; 0x30
 800ae0a:	9004      	str	r0, [sp, #16]
 800ae0c:	4641      	mov	r1, r8
 800ae0e:	4658      	mov	r0, fp
 800ae10:	9308      	str	r3, [sp, #32]
 800ae12:	f000 fc3b 	bl	800b68c <__mcmp>
 800ae16:	463a      	mov	r2, r7
 800ae18:	4681      	mov	r9, r0
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 fc51 	bl	800b6c4 <__mdiff>
 800ae22:	68c2      	ldr	r2, [r0, #12]
 800ae24:	9b08      	ldr	r3, [sp, #32]
 800ae26:	4605      	mov	r5, r0
 800ae28:	bb02      	cbnz	r2, 800ae6c <_dtoa_r+0xa7c>
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	4658      	mov	r0, fp
 800ae2e:	f000 fc2d 	bl	800b68c <__mcmp>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	4602      	mov	r2, r0
 800ae36:	4629      	mov	r1, r5
 800ae38:	4620      	mov	r0, r4
 800ae3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ae3e:	f000 f9e7 	bl	800b210 <_Bfree>
 800ae42:	9b05      	ldr	r3, [sp, #20]
 800ae44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae46:	9d01      	ldr	r5, [sp, #4]
 800ae48:	ea43 0102 	orr.w	r1, r3, r2
 800ae4c:	9b06      	ldr	r3, [sp, #24]
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	9b08      	ldr	r3, [sp, #32]
 800ae52:	d10d      	bne.n	800ae70 <_dtoa_r+0xa80>
 800ae54:	2b39      	cmp	r3, #57	; 0x39
 800ae56:	d029      	beq.n	800aeac <_dtoa_r+0xabc>
 800ae58:	f1b9 0f00 	cmp.w	r9, #0
 800ae5c:	dd01      	ble.n	800ae62 <_dtoa_r+0xa72>
 800ae5e:	9b04      	ldr	r3, [sp, #16]
 800ae60:	3331      	adds	r3, #49	; 0x31
 800ae62:	9a02      	ldr	r2, [sp, #8]
 800ae64:	7013      	strb	r3, [r2, #0]
 800ae66:	e774      	b.n	800ad52 <_dtoa_r+0x962>
 800ae68:	4638      	mov	r0, r7
 800ae6a:	e7b9      	b.n	800ade0 <_dtoa_r+0x9f0>
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	e7e2      	b.n	800ae36 <_dtoa_r+0xa46>
 800ae70:	f1b9 0f00 	cmp.w	r9, #0
 800ae74:	db06      	blt.n	800ae84 <_dtoa_r+0xa94>
 800ae76:	9905      	ldr	r1, [sp, #20]
 800ae78:	ea41 0909 	orr.w	r9, r1, r9
 800ae7c:	9906      	ldr	r1, [sp, #24]
 800ae7e:	ea59 0101 	orrs.w	r1, r9, r1
 800ae82:	d120      	bne.n	800aec6 <_dtoa_r+0xad6>
 800ae84:	2a00      	cmp	r2, #0
 800ae86:	ddec      	ble.n	800ae62 <_dtoa_r+0xa72>
 800ae88:	4659      	mov	r1, fp
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	f000 fb90 	bl	800b5b4 <__lshift>
 800ae94:	4631      	mov	r1, r6
 800ae96:	4683      	mov	fp, r0
 800ae98:	f000 fbf8 	bl	800b68c <__mcmp>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	9b01      	ldr	r3, [sp, #4]
 800aea0:	dc02      	bgt.n	800aea8 <_dtoa_r+0xab8>
 800aea2:	d1de      	bne.n	800ae62 <_dtoa_r+0xa72>
 800aea4:	07da      	lsls	r2, r3, #31
 800aea6:	d5dc      	bpl.n	800ae62 <_dtoa_r+0xa72>
 800aea8:	2b39      	cmp	r3, #57	; 0x39
 800aeaa:	d1d8      	bne.n	800ae5e <_dtoa_r+0xa6e>
 800aeac:	9a02      	ldr	r2, [sp, #8]
 800aeae:	2339      	movs	r3, #57	; 0x39
 800aeb0:	7013      	strb	r3, [r2, #0]
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	461d      	mov	r5, r3
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aebc:	2a39      	cmp	r2, #57	; 0x39
 800aebe:	d050      	beq.n	800af62 <_dtoa_r+0xb72>
 800aec0:	3201      	adds	r2, #1
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e745      	b.n	800ad52 <_dtoa_r+0x962>
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	dd03      	ble.n	800aed2 <_dtoa_r+0xae2>
 800aeca:	2b39      	cmp	r3, #57	; 0x39
 800aecc:	d0ee      	beq.n	800aeac <_dtoa_r+0xabc>
 800aece:	3301      	adds	r3, #1
 800aed0:	e7c7      	b.n	800ae62 <_dtoa_r+0xa72>
 800aed2:	9a01      	ldr	r2, [sp, #4]
 800aed4:	9907      	ldr	r1, [sp, #28]
 800aed6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aeda:	428a      	cmp	r2, r1
 800aedc:	d02a      	beq.n	800af34 <_dtoa_r+0xb44>
 800aede:	4659      	mov	r1, fp
 800aee0:	2300      	movs	r3, #0
 800aee2:	220a      	movs	r2, #10
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 f9b5 	bl	800b254 <__multadd>
 800aeea:	45b8      	cmp	r8, r7
 800aeec:	4683      	mov	fp, r0
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	f04f 020a 	mov.w	r2, #10
 800aef6:	4641      	mov	r1, r8
 800aef8:	4620      	mov	r0, r4
 800aefa:	d107      	bne.n	800af0c <_dtoa_r+0xb1c>
 800aefc:	f000 f9aa 	bl	800b254 <__multadd>
 800af00:	4680      	mov	r8, r0
 800af02:	4607      	mov	r7, r0
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	3301      	adds	r3, #1
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	e775      	b.n	800adf8 <_dtoa_r+0xa08>
 800af0c:	f000 f9a2 	bl	800b254 <__multadd>
 800af10:	4639      	mov	r1, r7
 800af12:	4680      	mov	r8, r0
 800af14:	2300      	movs	r3, #0
 800af16:	220a      	movs	r2, #10
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 f99b 	bl	800b254 <__multadd>
 800af1e:	4607      	mov	r7, r0
 800af20:	e7f0      	b.n	800af04 <_dtoa_r+0xb14>
 800af22:	f1b9 0f00 	cmp.w	r9, #0
 800af26:	9a00      	ldr	r2, [sp, #0]
 800af28:	bfcc      	ite	gt
 800af2a:	464d      	movgt	r5, r9
 800af2c:	2501      	movle	r5, #1
 800af2e:	4415      	add	r5, r2
 800af30:	f04f 0800 	mov.w	r8, #0
 800af34:	4659      	mov	r1, fp
 800af36:	2201      	movs	r2, #1
 800af38:	4620      	mov	r0, r4
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	f000 fb3a 	bl	800b5b4 <__lshift>
 800af40:	4631      	mov	r1, r6
 800af42:	4683      	mov	fp, r0
 800af44:	f000 fba2 	bl	800b68c <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	dcb2      	bgt.n	800aeb2 <_dtoa_r+0xac2>
 800af4c:	d102      	bne.n	800af54 <_dtoa_r+0xb64>
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	07db      	lsls	r3, r3, #31
 800af52:	d4ae      	bmi.n	800aeb2 <_dtoa_r+0xac2>
 800af54:	462b      	mov	r3, r5
 800af56:	461d      	mov	r5, r3
 800af58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af5c:	2a30      	cmp	r2, #48	; 0x30
 800af5e:	d0fa      	beq.n	800af56 <_dtoa_r+0xb66>
 800af60:	e6f7      	b.n	800ad52 <_dtoa_r+0x962>
 800af62:	9a00      	ldr	r2, [sp, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d1a5      	bne.n	800aeb4 <_dtoa_r+0xac4>
 800af68:	f10a 0a01 	add.w	sl, sl, #1
 800af6c:	2331      	movs	r3, #49	; 0x31
 800af6e:	e779      	b.n	800ae64 <_dtoa_r+0xa74>
 800af70:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <_dtoa_r+0xbd0>)
 800af72:	f7ff baaf 	b.w	800a4d4 <_dtoa_r+0xe4>
 800af76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f47f aa86 	bne.w	800a48a <_dtoa_r+0x9a>
 800af7e:	4b11      	ldr	r3, [pc, #68]	; (800afc4 <_dtoa_r+0xbd4>)
 800af80:	f7ff baa8 	b.w	800a4d4 <_dtoa_r+0xe4>
 800af84:	f1b9 0f00 	cmp.w	r9, #0
 800af88:	dc03      	bgt.n	800af92 <_dtoa_r+0xba2>
 800af8a:	9b05      	ldr	r3, [sp, #20]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	f73f aec9 	bgt.w	800ad24 <_dtoa_r+0x934>
 800af92:	9d00      	ldr	r5, [sp, #0]
 800af94:	4631      	mov	r1, r6
 800af96:	4658      	mov	r0, fp
 800af98:	f7ff f99e 	bl	800a2d8 <quorem>
 800af9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afa0:	f805 3b01 	strb.w	r3, [r5], #1
 800afa4:	9a00      	ldr	r2, [sp, #0]
 800afa6:	1aaa      	subs	r2, r5, r2
 800afa8:	4591      	cmp	r9, r2
 800afaa:	ddba      	ble.n	800af22 <_dtoa_r+0xb32>
 800afac:	4659      	mov	r1, fp
 800afae:	2300      	movs	r3, #0
 800afb0:	220a      	movs	r2, #10
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 f94e 	bl	800b254 <__multadd>
 800afb8:	4683      	mov	fp, r0
 800afba:	e7eb      	b.n	800af94 <_dtoa_r+0xba4>
 800afbc:	0800c51f 	.word	0x0800c51f
 800afc0:	0800c478 	.word	0x0800c478
 800afc4:	0800c49c 	.word	0x0800c49c

0800afc8 <__sflush_r>:
 800afc8:	898a      	ldrh	r2, [r1, #12]
 800afca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afce:	4605      	mov	r5, r0
 800afd0:	0710      	lsls	r0, r2, #28
 800afd2:	460c      	mov	r4, r1
 800afd4:	d458      	bmi.n	800b088 <__sflush_r+0xc0>
 800afd6:	684b      	ldr	r3, [r1, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dc05      	bgt.n	800afe8 <__sflush_r+0x20>
 800afdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afde:	2b00      	cmp	r3, #0
 800afe0:	dc02      	bgt.n	800afe8 <__sflush_r+0x20>
 800afe2:	2000      	movs	r0, #0
 800afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afea:	2e00      	cmp	r6, #0
 800afec:	d0f9      	beq.n	800afe2 <__sflush_r+0x1a>
 800afee:	2300      	movs	r3, #0
 800aff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aff4:	682f      	ldr	r7, [r5, #0]
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	d032      	beq.n	800b060 <__sflush_r+0x98>
 800affa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	075a      	lsls	r2, r3, #29
 800b000:	d505      	bpl.n	800b00e <__sflush_r+0x46>
 800b002:	6863      	ldr	r3, [r4, #4]
 800b004:	1ac0      	subs	r0, r0, r3
 800b006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b008:	b10b      	cbz	r3, 800b00e <__sflush_r+0x46>
 800b00a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b00c:	1ac0      	subs	r0, r0, r3
 800b00e:	2300      	movs	r3, #0
 800b010:	4602      	mov	r2, r0
 800b012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b014:	6a21      	ldr	r1, [r4, #32]
 800b016:	4628      	mov	r0, r5
 800b018:	47b0      	blx	r6
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	d106      	bne.n	800b02e <__sflush_r+0x66>
 800b020:	6829      	ldr	r1, [r5, #0]
 800b022:	291d      	cmp	r1, #29
 800b024:	d82c      	bhi.n	800b080 <__sflush_r+0xb8>
 800b026:	4a2a      	ldr	r2, [pc, #168]	; (800b0d0 <__sflush_r+0x108>)
 800b028:	40ca      	lsrs	r2, r1
 800b02a:	07d6      	lsls	r6, r2, #31
 800b02c:	d528      	bpl.n	800b080 <__sflush_r+0xb8>
 800b02e:	2200      	movs	r2, #0
 800b030:	6062      	str	r2, [r4, #4]
 800b032:	04d9      	lsls	r1, r3, #19
 800b034:	6922      	ldr	r2, [r4, #16]
 800b036:	6022      	str	r2, [r4, #0]
 800b038:	d504      	bpl.n	800b044 <__sflush_r+0x7c>
 800b03a:	1c42      	adds	r2, r0, #1
 800b03c:	d101      	bne.n	800b042 <__sflush_r+0x7a>
 800b03e:	682b      	ldr	r3, [r5, #0]
 800b040:	b903      	cbnz	r3, 800b044 <__sflush_r+0x7c>
 800b042:	6560      	str	r0, [r4, #84]	; 0x54
 800b044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b046:	602f      	str	r7, [r5, #0]
 800b048:	2900      	cmp	r1, #0
 800b04a:	d0ca      	beq.n	800afe2 <__sflush_r+0x1a>
 800b04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b050:	4299      	cmp	r1, r3
 800b052:	d002      	beq.n	800b05a <__sflush_r+0x92>
 800b054:	4628      	mov	r0, r5
 800b056:	f7fe fb2b 	bl	80096b0 <_free_r>
 800b05a:	2000      	movs	r0, #0
 800b05c:	6360      	str	r0, [r4, #52]	; 0x34
 800b05e:	e7c1      	b.n	800afe4 <__sflush_r+0x1c>
 800b060:	6a21      	ldr	r1, [r4, #32]
 800b062:	2301      	movs	r3, #1
 800b064:	4628      	mov	r0, r5
 800b066:	47b0      	blx	r6
 800b068:	1c41      	adds	r1, r0, #1
 800b06a:	d1c7      	bne.n	800affc <__sflush_r+0x34>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0c4      	beq.n	800affc <__sflush_r+0x34>
 800b072:	2b1d      	cmp	r3, #29
 800b074:	d001      	beq.n	800b07a <__sflush_r+0xb2>
 800b076:	2b16      	cmp	r3, #22
 800b078:	d101      	bne.n	800b07e <__sflush_r+0xb6>
 800b07a:	602f      	str	r7, [r5, #0]
 800b07c:	e7b1      	b.n	800afe2 <__sflush_r+0x1a>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	e7ad      	b.n	800afe4 <__sflush_r+0x1c>
 800b088:	690f      	ldr	r7, [r1, #16]
 800b08a:	2f00      	cmp	r7, #0
 800b08c:	d0a9      	beq.n	800afe2 <__sflush_r+0x1a>
 800b08e:	0793      	lsls	r3, r2, #30
 800b090:	680e      	ldr	r6, [r1, #0]
 800b092:	bf08      	it	eq
 800b094:	694b      	ldreq	r3, [r1, #20]
 800b096:	600f      	str	r7, [r1, #0]
 800b098:	bf18      	it	ne
 800b09a:	2300      	movne	r3, #0
 800b09c:	eba6 0807 	sub.w	r8, r6, r7
 800b0a0:	608b      	str	r3, [r1, #8]
 800b0a2:	f1b8 0f00 	cmp.w	r8, #0
 800b0a6:	dd9c      	ble.n	800afe2 <__sflush_r+0x1a>
 800b0a8:	6a21      	ldr	r1, [r4, #32]
 800b0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0ac:	4643      	mov	r3, r8
 800b0ae:	463a      	mov	r2, r7
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	47b0      	blx	r6
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	dc06      	bgt.n	800b0c6 <__sflush_r+0xfe>
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0be:	81a3      	strh	r3, [r4, #12]
 800b0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c4:	e78e      	b.n	800afe4 <__sflush_r+0x1c>
 800b0c6:	4407      	add	r7, r0
 800b0c8:	eba8 0800 	sub.w	r8, r8, r0
 800b0cc:	e7e9      	b.n	800b0a2 <__sflush_r+0xda>
 800b0ce:	bf00      	nop
 800b0d0:	20400001 	.word	0x20400001

0800b0d4 <_fflush_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	690b      	ldr	r3, [r1, #16]
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	b913      	cbnz	r3, 800b0e4 <_fflush_r+0x10>
 800b0de:	2500      	movs	r5, #0
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	b118      	cbz	r0, 800b0ee <_fflush_r+0x1a>
 800b0e6:	6983      	ldr	r3, [r0, #24]
 800b0e8:	b90b      	cbnz	r3, 800b0ee <_fflush_r+0x1a>
 800b0ea:	f7fe f9f5 	bl	80094d8 <__sinit>
 800b0ee:	4b14      	ldr	r3, [pc, #80]	; (800b140 <_fflush_r+0x6c>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d11b      	bne.n	800b12c <_fflush_r+0x58>
 800b0f4:	686c      	ldr	r4, [r5, #4]
 800b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0ef      	beq.n	800b0de <_fflush_r+0xa>
 800b0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b100:	07d0      	lsls	r0, r2, #31
 800b102:	d404      	bmi.n	800b10e <_fflush_r+0x3a>
 800b104:	0599      	lsls	r1, r3, #22
 800b106:	d402      	bmi.n	800b10e <_fflush_r+0x3a>
 800b108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b10a:	f7fe faa8 	bl	800965e <__retarget_lock_acquire_recursive>
 800b10e:	4628      	mov	r0, r5
 800b110:	4621      	mov	r1, r4
 800b112:	f7ff ff59 	bl	800afc8 <__sflush_r>
 800b116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b118:	07da      	lsls	r2, r3, #31
 800b11a:	4605      	mov	r5, r0
 800b11c:	d4e0      	bmi.n	800b0e0 <_fflush_r+0xc>
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	059b      	lsls	r3, r3, #22
 800b122:	d4dd      	bmi.n	800b0e0 <_fflush_r+0xc>
 800b124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b126:	f7fe fa9b 	bl	8009660 <__retarget_lock_release_recursive>
 800b12a:	e7d9      	b.n	800b0e0 <_fflush_r+0xc>
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <_fflush_r+0x70>)
 800b12e:	429c      	cmp	r4, r3
 800b130:	d101      	bne.n	800b136 <_fflush_r+0x62>
 800b132:	68ac      	ldr	r4, [r5, #8]
 800b134:	e7df      	b.n	800b0f6 <_fflush_r+0x22>
 800b136:	4b04      	ldr	r3, [pc, #16]	; (800b148 <_fflush_r+0x74>)
 800b138:	429c      	cmp	r4, r3
 800b13a:	bf08      	it	eq
 800b13c:	68ec      	ldreq	r4, [r5, #12]
 800b13e:	e7da      	b.n	800b0f6 <_fflush_r+0x22>
 800b140:	0800c424 	.word	0x0800c424
 800b144:	0800c444 	.word	0x0800c444
 800b148:	0800c404 	.word	0x0800c404

0800b14c <_localeconv_r>:
 800b14c:	4800      	ldr	r0, [pc, #0]	; (800b150 <_localeconv_r+0x4>)
 800b14e:	4770      	bx	lr
 800b150:	20000180 	.word	0x20000180

0800b154 <_lseek_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d07      	ldr	r5, [pc, #28]	; (800b174 <_lseek_r+0x20>)
 800b158:	4604      	mov	r4, r0
 800b15a:	4608      	mov	r0, r1
 800b15c:	4611      	mov	r1, r2
 800b15e:	2200      	movs	r2, #0
 800b160:	602a      	str	r2, [r5, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f7f7 f8ca 	bl	80022fc <_lseek>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_lseek_r+0x1e>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_lseek_r+0x1e>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	200059fc 	.word	0x200059fc

0800b178 <__malloc_lock>:
 800b178:	4801      	ldr	r0, [pc, #4]	; (800b180 <__malloc_lock+0x8>)
 800b17a:	f7fe ba70 	b.w	800965e <__retarget_lock_acquire_recursive>
 800b17e:	bf00      	nop
 800b180:	200059f4 	.word	0x200059f4

0800b184 <__malloc_unlock>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__malloc_unlock+0x8>)
 800b186:	f7fe ba6b 	b.w	8009660 <__retarget_lock_release_recursive>
 800b18a:	bf00      	nop
 800b18c:	200059f4 	.word	0x200059f4

0800b190 <_Balloc>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b194:	4604      	mov	r4, r0
 800b196:	460d      	mov	r5, r1
 800b198:	b976      	cbnz	r6, 800b1b8 <_Balloc+0x28>
 800b19a:	2010      	movs	r0, #16
 800b19c:	f7fe fa62 	bl	8009664 <malloc>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6260      	str	r0, [r4, #36]	; 0x24
 800b1a4:	b920      	cbnz	r0, 800b1b0 <_Balloc+0x20>
 800b1a6:	4b18      	ldr	r3, [pc, #96]	; (800b208 <_Balloc+0x78>)
 800b1a8:	4818      	ldr	r0, [pc, #96]	; (800b20c <_Balloc+0x7c>)
 800b1aa:	2166      	movs	r1, #102	; 0x66
 800b1ac:	f000 fcea 	bl	800bb84 <__assert_func>
 800b1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1b4:	6006      	str	r6, [r0, #0]
 800b1b6:	60c6      	str	r6, [r0, #12]
 800b1b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1ba:	68f3      	ldr	r3, [r6, #12]
 800b1bc:	b183      	cbz	r3, 800b1e0 <_Balloc+0x50>
 800b1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1c6:	b9b8      	cbnz	r0, 800b1f8 <_Balloc+0x68>
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b1ce:	1d72      	adds	r2, r6, #5
 800b1d0:	0092      	lsls	r2, r2, #2
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 fb5a 	bl	800b88c <_calloc_r>
 800b1d8:	b160      	cbz	r0, 800b1f4 <_Balloc+0x64>
 800b1da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1de:	e00e      	b.n	800b1fe <_Balloc+0x6e>
 800b1e0:	2221      	movs	r2, #33	; 0x21
 800b1e2:	2104      	movs	r1, #4
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f000 fb51 	bl	800b88c <_calloc_r>
 800b1ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1ec:	60f0      	str	r0, [r6, #12]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e4      	bne.n	800b1be <_Balloc+0x2e>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	6802      	ldr	r2, [r0, #0]
 800b1fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1fe:	2300      	movs	r3, #0
 800b200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b204:	e7f7      	b.n	800b1f6 <_Balloc+0x66>
 800b206:	bf00      	nop
 800b208:	0800c4a9 	.word	0x0800c4a9
 800b20c:	0800c530 	.word	0x0800c530

0800b210 <_Bfree>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b214:	4605      	mov	r5, r0
 800b216:	460c      	mov	r4, r1
 800b218:	b976      	cbnz	r6, 800b238 <_Bfree+0x28>
 800b21a:	2010      	movs	r0, #16
 800b21c:	f7fe fa22 	bl	8009664 <malloc>
 800b220:	4602      	mov	r2, r0
 800b222:	6268      	str	r0, [r5, #36]	; 0x24
 800b224:	b920      	cbnz	r0, 800b230 <_Bfree+0x20>
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <_Bfree+0x3c>)
 800b228:	4809      	ldr	r0, [pc, #36]	; (800b250 <_Bfree+0x40>)
 800b22a:	218a      	movs	r1, #138	; 0x8a
 800b22c:	f000 fcaa 	bl	800bb84 <__assert_func>
 800b230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b234:	6006      	str	r6, [r0, #0]
 800b236:	60c6      	str	r6, [r0, #12]
 800b238:	b13c      	cbz	r4, 800b24a <_Bfree+0x3a>
 800b23a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b23c:	6862      	ldr	r2, [r4, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b244:	6021      	str	r1, [r4, #0]
 800b246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b24a:	bd70      	pop	{r4, r5, r6, pc}
 800b24c:	0800c4a9 	.word	0x0800c4a9
 800b250:	0800c530 	.word	0x0800c530

0800b254 <__multadd>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	690e      	ldr	r6, [r1, #16]
 800b25a:	4607      	mov	r7, r0
 800b25c:	4698      	mov	r8, r3
 800b25e:	460c      	mov	r4, r1
 800b260:	f101 0014 	add.w	r0, r1, #20
 800b264:	2300      	movs	r3, #0
 800b266:	6805      	ldr	r5, [r0, #0]
 800b268:	b2a9      	uxth	r1, r5
 800b26a:	fb02 8101 	mla	r1, r2, r1, r8
 800b26e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b272:	0c2d      	lsrs	r5, r5, #16
 800b274:	fb02 c505 	mla	r5, r2, r5, ip
 800b278:	b289      	uxth	r1, r1
 800b27a:	3301      	adds	r3, #1
 800b27c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b280:	429e      	cmp	r6, r3
 800b282:	f840 1b04 	str.w	r1, [r0], #4
 800b286:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b28a:	dcec      	bgt.n	800b266 <__multadd+0x12>
 800b28c:	f1b8 0f00 	cmp.w	r8, #0
 800b290:	d022      	beq.n	800b2d8 <__multadd+0x84>
 800b292:	68a3      	ldr	r3, [r4, #8]
 800b294:	42b3      	cmp	r3, r6
 800b296:	dc19      	bgt.n	800b2cc <__multadd+0x78>
 800b298:	6861      	ldr	r1, [r4, #4]
 800b29a:	4638      	mov	r0, r7
 800b29c:	3101      	adds	r1, #1
 800b29e:	f7ff ff77 	bl	800b190 <_Balloc>
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	b928      	cbnz	r0, 800b2b2 <__multadd+0x5e>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	4b0d      	ldr	r3, [pc, #52]	; (800b2e0 <__multadd+0x8c>)
 800b2aa:	480e      	ldr	r0, [pc, #56]	; (800b2e4 <__multadd+0x90>)
 800b2ac:	21b5      	movs	r1, #181	; 0xb5
 800b2ae:	f000 fc69 	bl	800bb84 <__assert_func>
 800b2b2:	6922      	ldr	r2, [r4, #16]
 800b2b4:	3202      	adds	r2, #2
 800b2b6:	f104 010c 	add.w	r1, r4, #12
 800b2ba:	0092      	lsls	r2, r2, #2
 800b2bc:	300c      	adds	r0, #12
 800b2be:	f7fe f9e1 	bl	8009684 <memcpy>
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	f7ff ffa3 	bl	800b210 <_Bfree>
 800b2ca:	462c      	mov	r4, r5
 800b2cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b2d0:	3601      	adds	r6, #1
 800b2d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b2d6:	6126      	str	r6, [r4, #16]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800c51f 	.word	0x0800c51f
 800b2e4:	0800c530 	.word	0x0800c530

0800b2e8 <__hi0bits>:
 800b2e8:	0c03      	lsrs	r3, r0, #16
 800b2ea:	041b      	lsls	r3, r3, #16
 800b2ec:	b9d3      	cbnz	r3, 800b324 <__hi0bits+0x3c>
 800b2ee:	0400      	lsls	r0, r0, #16
 800b2f0:	2310      	movs	r3, #16
 800b2f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2f6:	bf04      	itt	eq
 800b2f8:	0200      	lsleq	r0, r0, #8
 800b2fa:	3308      	addeq	r3, #8
 800b2fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b300:	bf04      	itt	eq
 800b302:	0100      	lsleq	r0, r0, #4
 800b304:	3304      	addeq	r3, #4
 800b306:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b30a:	bf04      	itt	eq
 800b30c:	0080      	lsleq	r0, r0, #2
 800b30e:	3302      	addeq	r3, #2
 800b310:	2800      	cmp	r0, #0
 800b312:	db05      	blt.n	800b320 <__hi0bits+0x38>
 800b314:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b318:	f103 0301 	add.w	r3, r3, #1
 800b31c:	bf08      	it	eq
 800b31e:	2320      	moveq	r3, #32
 800b320:	4618      	mov	r0, r3
 800b322:	4770      	bx	lr
 800b324:	2300      	movs	r3, #0
 800b326:	e7e4      	b.n	800b2f2 <__hi0bits+0xa>

0800b328 <__lo0bits>:
 800b328:	6803      	ldr	r3, [r0, #0]
 800b32a:	f013 0207 	ands.w	r2, r3, #7
 800b32e:	4601      	mov	r1, r0
 800b330:	d00b      	beq.n	800b34a <__lo0bits+0x22>
 800b332:	07da      	lsls	r2, r3, #31
 800b334:	d424      	bmi.n	800b380 <__lo0bits+0x58>
 800b336:	0798      	lsls	r0, r3, #30
 800b338:	bf49      	itett	mi
 800b33a:	085b      	lsrmi	r3, r3, #1
 800b33c:	089b      	lsrpl	r3, r3, #2
 800b33e:	2001      	movmi	r0, #1
 800b340:	600b      	strmi	r3, [r1, #0]
 800b342:	bf5c      	itt	pl
 800b344:	600b      	strpl	r3, [r1, #0]
 800b346:	2002      	movpl	r0, #2
 800b348:	4770      	bx	lr
 800b34a:	b298      	uxth	r0, r3
 800b34c:	b9b0      	cbnz	r0, 800b37c <__lo0bits+0x54>
 800b34e:	0c1b      	lsrs	r3, r3, #16
 800b350:	2010      	movs	r0, #16
 800b352:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b356:	bf04      	itt	eq
 800b358:	0a1b      	lsreq	r3, r3, #8
 800b35a:	3008      	addeq	r0, #8
 800b35c:	071a      	lsls	r2, r3, #28
 800b35e:	bf04      	itt	eq
 800b360:	091b      	lsreq	r3, r3, #4
 800b362:	3004      	addeq	r0, #4
 800b364:	079a      	lsls	r2, r3, #30
 800b366:	bf04      	itt	eq
 800b368:	089b      	lsreq	r3, r3, #2
 800b36a:	3002      	addeq	r0, #2
 800b36c:	07da      	lsls	r2, r3, #31
 800b36e:	d403      	bmi.n	800b378 <__lo0bits+0x50>
 800b370:	085b      	lsrs	r3, r3, #1
 800b372:	f100 0001 	add.w	r0, r0, #1
 800b376:	d005      	beq.n	800b384 <__lo0bits+0x5c>
 800b378:	600b      	str	r3, [r1, #0]
 800b37a:	4770      	bx	lr
 800b37c:	4610      	mov	r0, r2
 800b37e:	e7e8      	b.n	800b352 <__lo0bits+0x2a>
 800b380:	2000      	movs	r0, #0
 800b382:	4770      	bx	lr
 800b384:	2020      	movs	r0, #32
 800b386:	4770      	bx	lr

0800b388 <__i2b>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	460c      	mov	r4, r1
 800b38c:	2101      	movs	r1, #1
 800b38e:	f7ff feff 	bl	800b190 <_Balloc>
 800b392:	4602      	mov	r2, r0
 800b394:	b928      	cbnz	r0, 800b3a2 <__i2b+0x1a>
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <__i2b+0x24>)
 800b398:	4805      	ldr	r0, [pc, #20]	; (800b3b0 <__i2b+0x28>)
 800b39a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b39e:	f000 fbf1 	bl	800bb84 <__assert_func>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	6144      	str	r4, [r0, #20]
 800b3a6:	6103      	str	r3, [r0, #16]
 800b3a8:	bd10      	pop	{r4, pc}
 800b3aa:	bf00      	nop
 800b3ac:	0800c51f 	.word	0x0800c51f
 800b3b0:	0800c530 	.word	0x0800c530

0800b3b4 <__multiply>:
 800b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	690a      	ldr	r2, [r1, #16]
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	bfb8      	it	lt
 800b3c2:	460b      	movlt	r3, r1
 800b3c4:	460d      	mov	r5, r1
 800b3c6:	bfbc      	itt	lt
 800b3c8:	4625      	movlt	r5, r4
 800b3ca:	461c      	movlt	r4, r3
 800b3cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b3d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b3d4:	68ab      	ldr	r3, [r5, #8]
 800b3d6:	6869      	ldr	r1, [r5, #4]
 800b3d8:	eb0a 0709 	add.w	r7, sl, r9
 800b3dc:	42bb      	cmp	r3, r7
 800b3de:	b085      	sub	sp, #20
 800b3e0:	bfb8      	it	lt
 800b3e2:	3101      	addlt	r1, #1
 800b3e4:	f7ff fed4 	bl	800b190 <_Balloc>
 800b3e8:	b930      	cbnz	r0, 800b3f8 <__multiply+0x44>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	4b42      	ldr	r3, [pc, #264]	; (800b4f8 <__multiply+0x144>)
 800b3ee:	4843      	ldr	r0, [pc, #268]	; (800b4fc <__multiply+0x148>)
 800b3f0:	f240 115d 	movw	r1, #349	; 0x15d
 800b3f4:	f000 fbc6 	bl	800bb84 <__assert_func>
 800b3f8:	f100 0614 	add.w	r6, r0, #20
 800b3fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b400:	4633      	mov	r3, r6
 800b402:	2200      	movs	r2, #0
 800b404:	4543      	cmp	r3, r8
 800b406:	d31e      	bcc.n	800b446 <__multiply+0x92>
 800b408:	f105 0c14 	add.w	ip, r5, #20
 800b40c:	f104 0314 	add.w	r3, r4, #20
 800b410:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b414:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b418:	9202      	str	r2, [sp, #8]
 800b41a:	ebac 0205 	sub.w	r2, ip, r5
 800b41e:	3a15      	subs	r2, #21
 800b420:	f022 0203 	bic.w	r2, r2, #3
 800b424:	3204      	adds	r2, #4
 800b426:	f105 0115 	add.w	r1, r5, #21
 800b42a:	458c      	cmp	ip, r1
 800b42c:	bf38      	it	cc
 800b42e:	2204      	movcc	r2, #4
 800b430:	9201      	str	r2, [sp, #4]
 800b432:	9a02      	ldr	r2, [sp, #8]
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	429a      	cmp	r2, r3
 800b438:	d808      	bhi.n	800b44c <__multiply+0x98>
 800b43a:	2f00      	cmp	r7, #0
 800b43c:	dc55      	bgt.n	800b4ea <__multiply+0x136>
 800b43e:	6107      	str	r7, [r0, #16]
 800b440:	b005      	add	sp, #20
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	f843 2b04 	str.w	r2, [r3], #4
 800b44a:	e7db      	b.n	800b404 <__multiply+0x50>
 800b44c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b450:	f1ba 0f00 	cmp.w	sl, #0
 800b454:	d020      	beq.n	800b498 <__multiply+0xe4>
 800b456:	f105 0e14 	add.w	lr, r5, #20
 800b45a:	46b1      	mov	r9, r6
 800b45c:	2200      	movs	r2, #0
 800b45e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b462:	f8d9 b000 	ldr.w	fp, [r9]
 800b466:	b2a1      	uxth	r1, r4
 800b468:	fa1f fb8b 	uxth.w	fp, fp
 800b46c:	fb0a b101 	mla	r1, sl, r1, fp
 800b470:	4411      	add	r1, r2
 800b472:	f8d9 2000 	ldr.w	r2, [r9]
 800b476:	0c24      	lsrs	r4, r4, #16
 800b478:	0c12      	lsrs	r2, r2, #16
 800b47a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b47e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b482:	b289      	uxth	r1, r1
 800b484:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b488:	45f4      	cmp	ip, lr
 800b48a:	f849 1b04 	str.w	r1, [r9], #4
 800b48e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b492:	d8e4      	bhi.n	800b45e <__multiply+0xaa>
 800b494:	9901      	ldr	r1, [sp, #4]
 800b496:	5072      	str	r2, [r6, r1]
 800b498:	9a03      	ldr	r2, [sp, #12]
 800b49a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	f1b9 0f00 	cmp.w	r9, #0
 800b4a4:	d01f      	beq.n	800b4e6 <__multiply+0x132>
 800b4a6:	6834      	ldr	r4, [r6, #0]
 800b4a8:	f105 0114 	add.w	r1, r5, #20
 800b4ac:	46b6      	mov	lr, r6
 800b4ae:	f04f 0a00 	mov.w	sl, #0
 800b4b2:	880a      	ldrh	r2, [r1, #0]
 800b4b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b4b8:	fb09 b202 	mla	r2, r9, r2, fp
 800b4bc:	4492      	add	sl, r2
 800b4be:	b2a4      	uxth	r4, r4
 800b4c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b4c4:	f84e 4b04 	str.w	r4, [lr], #4
 800b4c8:	f851 4b04 	ldr.w	r4, [r1], #4
 800b4cc:	f8be 2000 	ldrh.w	r2, [lr]
 800b4d0:	0c24      	lsrs	r4, r4, #16
 800b4d2:	fb09 2404 	mla	r4, r9, r4, r2
 800b4d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b4da:	458c      	cmp	ip, r1
 800b4dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b4e0:	d8e7      	bhi.n	800b4b2 <__multiply+0xfe>
 800b4e2:	9a01      	ldr	r2, [sp, #4]
 800b4e4:	50b4      	str	r4, [r6, r2]
 800b4e6:	3604      	adds	r6, #4
 800b4e8:	e7a3      	b.n	800b432 <__multiply+0x7e>
 800b4ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1a5      	bne.n	800b43e <__multiply+0x8a>
 800b4f2:	3f01      	subs	r7, #1
 800b4f4:	e7a1      	b.n	800b43a <__multiply+0x86>
 800b4f6:	bf00      	nop
 800b4f8:	0800c51f 	.word	0x0800c51f
 800b4fc:	0800c530 	.word	0x0800c530

0800b500 <__pow5mult>:
 800b500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b504:	4615      	mov	r5, r2
 800b506:	f012 0203 	ands.w	r2, r2, #3
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
 800b50e:	d007      	beq.n	800b520 <__pow5mult+0x20>
 800b510:	4c25      	ldr	r4, [pc, #148]	; (800b5a8 <__pow5mult+0xa8>)
 800b512:	3a01      	subs	r2, #1
 800b514:	2300      	movs	r3, #0
 800b516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b51a:	f7ff fe9b 	bl	800b254 <__multadd>
 800b51e:	4607      	mov	r7, r0
 800b520:	10ad      	asrs	r5, r5, #2
 800b522:	d03d      	beq.n	800b5a0 <__pow5mult+0xa0>
 800b524:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b526:	b97c      	cbnz	r4, 800b548 <__pow5mult+0x48>
 800b528:	2010      	movs	r0, #16
 800b52a:	f7fe f89b 	bl	8009664 <malloc>
 800b52e:	4602      	mov	r2, r0
 800b530:	6270      	str	r0, [r6, #36]	; 0x24
 800b532:	b928      	cbnz	r0, 800b540 <__pow5mult+0x40>
 800b534:	4b1d      	ldr	r3, [pc, #116]	; (800b5ac <__pow5mult+0xac>)
 800b536:	481e      	ldr	r0, [pc, #120]	; (800b5b0 <__pow5mult+0xb0>)
 800b538:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b53c:	f000 fb22 	bl	800bb84 <__assert_func>
 800b540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b544:	6004      	str	r4, [r0, #0]
 800b546:	60c4      	str	r4, [r0, #12]
 800b548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b54c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b550:	b94c      	cbnz	r4, 800b566 <__pow5mult+0x66>
 800b552:	f240 2171 	movw	r1, #625	; 0x271
 800b556:	4630      	mov	r0, r6
 800b558:	f7ff ff16 	bl	800b388 <__i2b>
 800b55c:	2300      	movs	r3, #0
 800b55e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b562:	4604      	mov	r4, r0
 800b564:	6003      	str	r3, [r0, #0]
 800b566:	f04f 0900 	mov.w	r9, #0
 800b56a:	07eb      	lsls	r3, r5, #31
 800b56c:	d50a      	bpl.n	800b584 <__pow5mult+0x84>
 800b56e:	4639      	mov	r1, r7
 800b570:	4622      	mov	r2, r4
 800b572:	4630      	mov	r0, r6
 800b574:	f7ff ff1e 	bl	800b3b4 <__multiply>
 800b578:	4639      	mov	r1, r7
 800b57a:	4680      	mov	r8, r0
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7ff fe47 	bl	800b210 <_Bfree>
 800b582:	4647      	mov	r7, r8
 800b584:	106d      	asrs	r5, r5, #1
 800b586:	d00b      	beq.n	800b5a0 <__pow5mult+0xa0>
 800b588:	6820      	ldr	r0, [r4, #0]
 800b58a:	b938      	cbnz	r0, 800b59c <__pow5mult+0x9c>
 800b58c:	4622      	mov	r2, r4
 800b58e:	4621      	mov	r1, r4
 800b590:	4630      	mov	r0, r6
 800b592:	f7ff ff0f 	bl	800b3b4 <__multiply>
 800b596:	6020      	str	r0, [r4, #0]
 800b598:	f8c0 9000 	str.w	r9, [r0]
 800b59c:	4604      	mov	r4, r0
 800b59e:	e7e4      	b.n	800b56a <__pow5mult+0x6a>
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a6:	bf00      	nop
 800b5a8:	0800c680 	.word	0x0800c680
 800b5ac:	0800c4a9 	.word	0x0800c4a9
 800b5b0:	0800c530 	.word	0x0800c530

0800b5b4 <__lshift>:
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	6849      	ldr	r1, [r1, #4]
 800b5bc:	6923      	ldr	r3, [r4, #16]
 800b5be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	4691      	mov	r9, r2
 800b5c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5cc:	f108 0601 	add.w	r6, r8, #1
 800b5d0:	42b3      	cmp	r3, r6
 800b5d2:	db0b      	blt.n	800b5ec <__lshift+0x38>
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f7ff fddb 	bl	800b190 <_Balloc>
 800b5da:	4605      	mov	r5, r0
 800b5dc:	b948      	cbnz	r0, 800b5f2 <__lshift+0x3e>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	4b28      	ldr	r3, [pc, #160]	; (800b684 <__lshift+0xd0>)
 800b5e2:	4829      	ldr	r0, [pc, #164]	; (800b688 <__lshift+0xd4>)
 800b5e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5e8:	f000 facc 	bl	800bb84 <__assert_func>
 800b5ec:	3101      	adds	r1, #1
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	e7ee      	b.n	800b5d0 <__lshift+0x1c>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f100 0114 	add.w	r1, r0, #20
 800b5f8:	f100 0210 	add.w	r2, r0, #16
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	4553      	cmp	r3, sl
 800b600:	db33      	blt.n	800b66a <__lshift+0xb6>
 800b602:	6920      	ldr	r0, [r4, #16]
 800b604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b608:	f104 0314 	add.w	r3, r4, #20
 800b60c:	f019 091f 	ands.w	r9, r9, #31
 800b610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b618:	d02b      	beq.n	800b672 <__lshift+0xbe>
 800b61a:	f1c9 0e20 	rsb	lr, r9, #32
 800b61e:	468a      	mov	sl, r1
 800b620:	2200      	movs	r2, #0
 800b622:	6818      	ldr	r0, [r3, #0]
 800b624:	fa00 f009 	lsl.w	r0, r0, r9
 800b628:	4302      	orrs	r2, r0
 800b62a:	f84a 2b04 	str.w	r2, [sl], #4
 800b62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b632:	459c      	cmp	ip, r3
 800b634:	fa22 f20e 	lsr.w	r2, r2, lr
 800b638:	d8f3      	bhi.n	800b622 <__lshift+0x6e>
 800b63a:	ebac 0304 	sub.w	r3, ip, r4
 800b63e:	3b15      	subs	r3, #21
 800b640:	f023 0303 	bic.w	r3, r3, #3
 800b644:	3304      	adds	r3, #4
 800b646:	f104 0015 	add.w	r0, r4, #21
 800b64a:	4584      	cmp	ip, r0
 800b64c:	bf38      	it	cc
 800b64e:	2304      	movcc	r3, #4
 800b650:	50ca      	str	r2, [r1, r3]
 800b652:	b10a      	cbz	r2, 800b658 <__lshift+0xa4>
 800b654:	f108 0602 	add.w	r6, r8, #2
 800b658:	3e01      	subs	r6, #1
 800b65a:	4638      	mov	r0, r7
 800b65c:	612e      	str	r6, [r5, #16]
 800b65e:	4621      	mov	r1, r4
 800b660:	f7ff fdd6 	bl	800b210 <_Bfree>
 800b664:	4628      	mov	r0, r5
 800b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b66e:	3301      	adds	r3, #1
 800b670:	e7c5      	b.n	800b5fe <__lshift+0x4a>
 800b672:	3904      	subs	r1, #4
 800b674:	f853 2b04 	ldr.w	r2, [r3], #4
 800b678:	f841 2f04 	str.w	r2, [r1, #4]!
 800b67c:	459c      	cmp	ip, r3
 800b67e:	d8f9      	bhi.n	800b674 <__lshift+0xc0>
 800b680:	e7ea      	b.n	800b658 <__lshift+0xa4>
 800b682:	bf00      	nop
 800b684:	0800c51f 	.word	0x0800c51f
 800b688:	0800c530 	.word	0x0800c530

0800b68c <__mcmp>:
 800b68c:	b530      	push	{r4, r5, lr}
 800b68e:	6902      	ldr	r2, [r0, #16]
 800b690:	690c      	ldr	r4, [r1, #16]
 800b692:	1b12      	subs	r2, r2, r4
 800b694:	d10e      	bne.n	800b6b4 <__mcmp+0x28>
 800b696:	f100 0314 	add.w	r3, r0, #20
 800b69a:	3114      	adds	r1, #20
 800b69c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6ac:	42a5      	cmp	r5, r4
 800b6ae:	d003      	beq.n	800b6b8 <__mcmp+0x2c>
 800b6b0:	d305      	bcc.n	800b6be <__mcmp+0x32>
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	4283      	cmp	r3, r0
 800b6ba:	d3f3      	bcc.n	800b6a4 <__mcmp+0x18>
 800b6bc:	e7fa      	b.n	800b6b4 <__mcmp+0x28>
 800b6be:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c2:	e7f7      	b.n	800b6b4 <__mcmp+0x28>

0800b6c4 <__mdiff>:
 800b6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	4617      	mov	r7, r2
 800b6d2:	f7ff ffdb 	bl	800b68c <__mcmp>
 800b6d6:	1e05      	subs	r5, r0, #0
 800b6d8:	d110      	bne.n	800b6fc <__mdiff+0x38>
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7ff fd57 	bl	800b190 <_Balloc>
 800b6e2:	b930      	cbnz	r0, 800b6f2 <__mdiff+0x2e>
 800b6e4:	4b39      	ldr	r3, [pc, #228]	; (800b7cc <__mdiff+0x108>)
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	f240 2132 	movw	r1, #562	; 0x232
 800b6ec:	4838      	ldr	r0, [pc, #224]	; (800b7d0 <__mdiff+0x10c>)
 800b6ee:	f000 fa49 	bl	800bb84 <__assert_func>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	bfa4      	itt	ge
 800b6fe:	463b      	movge	r3, r7
 800b700:	4627      	movge	r7, r4
 800b702:	4630      	mov	r0, r6
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	bfa6      	itte	ge
 800b708:	461c      	movge	r4, r3
 800b70a:	2500      	movge	r5, #0
 800b70c:	2501      	movlt	r5, #1
 800b70e:	f7ff fd3f 	bl	800b190 <_Balloc>
 800b712:	b920      	cbnz	r0, 800b71e <__mdiff+0x5a>
 800b714:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <__mdiff+0x108>)
 800b716:	4602      	mov	r2, r0
 800b718:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b71c:	e7e6      	b.n	800b6ec <__mdiff+0x28>
 800b71e:	693e      	ldr	r6, [r7, #16]
 800b720:	60c5      	str	r5, [r0, #12]
 800b722:	6925      	ldr	r5, [r4, #16]
 800b724:	f107 0114 	add.w	r1, r7, #20
 800b728:	f104 0914 	add.w	r9, r4, #20
 800b72c:	f100 0e14 	add.w	lr, r0, #20
 800b730:	f107 0210 	add.w	r2, r7, #16
 800b734:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b738:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b73c:	46f2      	mov	sl, lr
 800b73e:	2700      	movs	r7, #0
 800b740:	f859 3b04 	ldr.w	r3, [r9], #4
 800b744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b748:	fa1f f883 	uxth.w	r8, r3
 800b74c:	fa17 f78b 	uxtah	r7, r7, fp
 800b750:	0c1b      	lsrs	r3, r3, #16
 800b752:	eba7 0808 	sub.w	r8, r7, r8
 800b756:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b75a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b75e:	fa1f f888 	uxth.w	r8, r8
 800b762:	141f      	asrs	r7, r3, #16
 800b764:	454d      	cmp	r5, r9
 800b766:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b76a:	f84a 3b04 	str.w	r3, [sl], #4
 800b76e:	d8e7      	bhi.n	800b740 <__mdiff+0x7c>
 800b770:	1b2b      	subs	r3, r5, r4
 800b772:	3b15      	subs	r3, #21
 800b774:	f023 0303 	bic.w	r3, r3, #3
 800b778:	3304      	adds	r3, #4
 800b77a:	3415      	adds	r4, #21
 800b77c:	42a5      	cmp	r5, r4
 800b77e:	bf38      	it	cc
 800b780:	2304      	movcc	r3, #4
 800b782:	4419      	add	r1, r3
 800b784:	4473      	add	r3, lr
 800b786:	469e      	mov	lr, r3
 800b788:	460d      	mov	r5, r1
 800b78a:	4565      	cmp	r5, ip
 800b78c:	d30e      	bcc.n	800b7ac <__mdiff+0xe8>
 800b78e:	f10c 0203 	add.w	r2, ip, #3
 800b792:	1a52      	subs	r2, r2, r1
 800b794:	f022 0203 	bic.w	r2, r2, #3
 800b798:	3903      	subs	r1, #3
 800b79a:	458c      	cmp	ip, r1
 800b79c:	bf38      	it	cc
 800b79e:	2200      	movcc	r2, #0
 800b7a0:	441a      	add	r2, r3
 800b7a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7a6:	b17b      	cbz	r3, 800b7c8 <__mdiff+0x104>
 800b7a8:	6106      	str	r6, [r0, #16]
 800b7aa:	e7a5      	b.n	800b6f8 <__mdiff+0x34>
 800b7ac:	f855 8b04 	ldr.w	r8, [r5], #4
 800b7b0:	fa17 f488 	uxtah	r4, r7, r8
 800b7b4:	1422      	asrs	r2, r4, #16
 800b7b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b7ba:	b2a4      	uxth	r4, r4
 800b7bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7c0:	f84e 4b04 	str.w	r4, [lr], #4
 800b7c4:	1417      	asrs	r7, r2, #16
 800b7c6:	e7e0      	b.n	800b78a <__mdiff+0xc6>
 800b7c8:	3e01      	subs	r6, #1
 800b7ca:	e7ea      	b.n	800b7a2 <__mdiff+0xde>
 800b7cc:	0800c51f 	.word	0x0800c51f
 800b7d0:	0800c530 	.word	0x0800c530

0800b7d4 <__d2b>:
 800b7d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	4689      	mov	r9, r1
 800b7da:	2101      	movs	r1, #1
 800b7dc:	ec57 6b10 	vmov	r6, r7, d0
 800b7e0:	4690      	mov	r8, r2
 800b7e2:	f7ff fcd5 	bl	800b190 <_Balloc>
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	b930      	cbnz	r0, 800b7f8 <__d2b+0x24>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	4b25      	ldr	r3, [pc, #148]	; (800b884 <__d2b+0xb0>)
 800b7ee:	4826      	ldr	r0, [pc, #152]	; (800b888 <__d2b+0xb4>)
 800b7f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b7f4:	f000 f9c6 	bl	800bb84 <__assert_func>
 800b7f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b800:	bb35      	cbnz	r5, 800b850 <__d2b+0x7c>
 800b802:	2e00      	cmp	r6, #0
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	d028      	beq.n	800b85a <__d2b+0x86>
 800b808:	4668      	mov	r0, sp
 800b80a:	9600      	str	r6, [sp, #0]
 800b80c:	f7ff fd8c 	bl	800b328 <__lo0bits>
 800b810:	9900      	ldr	r1, [sp, #0]
 800b812:	b300      	cbz	r0, 800b856 <__d2b+0x82>
 800b814:	9a01      	ldr	r2, [sp, #4]
 800b816:	f1c0 0320 	rsb	r3, r0, #32
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	430b      	orrs	r3, r1
 800b820:	40c2      	lsrs	r2, r0
 800b822:	6163      	str	r3, [r4, #20]
 800b824:	9201      	str	r2, [sp, #4]
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	61a3      	str	r3, [r4, #24]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bf14      	ite	ne
 800b82e:	2202      	movne	r2, #2
 800b830:	2201      	moveq	r2, #1
 800b832:	6122      	str	r2, [r4, #16]
 800b834:	b1d5      	cbz	r5, 800b86c <__d2b+0x98>
 800b836:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b83a:	4405      	add	r5, r0
 800b83c:	f8c9 5000 	str.w	r5, [r9]
 800b840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b844:	f8c8 0000 	str.w	r0, [r8]
 800b848:	4620      	mov	r0, r4
 800b84a:	b003      	add	sp, #12
 800b84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b854:	e7d5      	b.n	800b802 <__d2b+0x2e>
 800b856:	6161      	str	r1, [r4, #20]
 800b858:	e7e5      	b.n	800b826 <__d2b+0x52>
 800b85a:	a801      	add	r0, sp, #4
 800b85c:	f7ff fd64 	bl	800b328 <__lo0bits>
 800b860:	9b01      	ldr	r3, [sp, #4]
 800b862:	6163      	str	r3, [r4, #20]
 800b864:	2201      	movs	r2, #1
 800b866:	6122      	str	r2, [r4, #16]
 800b868:	3020      	adds	r0, #32
 800b86a:	e7e3      	b.n	800b834 <__d2b+0x60>
 800b86c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b874:	f8c9 0000 	str.w	r0, [r9]
 800b878:	6918      	ldr	r0, [r3, #16]
 800b87a:	f7ff fd35 	bl	800b2e8 <__hi0bits>
 800b87e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b882:	e7df      	b.n	800b844 <__d2b+0x70>
 800b884:	0800c51f 	.word	0x0800c51f
 800b888:	0800c530 	.word	0x0800c530

0800b88c <_calloc_r>:
 800b88c:	b513      	push	{r0, r1, r4, lr}
 800b88e:	434a      	muls	r2, r1
 800b890:	4611      	mov	r1, r2
 800b892:	9201      	str	r2, [sp, #4]
 800b894:	f7fd ff5c 	bl	8009750 <_malloc_r>
 800b898:	4604      	mov	r4, r0
 800b89a:	b118      	cbz	r0, 800b8a4 <_calloc_r+0x18>
 800b89c:	9a01      	ldr	r2, [sp, #4]
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f7fd fefe 	bl	80096a0 <memset>
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	b002      	add	sp, #8
 800b8a8:	bd10      	pop	{r4, pc}

0800b8aa <__ssputs_r>:
 800b8aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ae:	688e      	ldr	r6, [r1, #8]
 800b8b0:	429e      	cmp	r6, r3
 800b8b2:	4682      	mov	sl, r0
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	4690      	mov	r8, r2
 800b8b8:	461f      	mov	r7, r3
 800b8ba:	d838      	bhi.n	800b92e <__ssputs_r+0x84>
 800b8bc:	898a      	ldrh	r2, [r1, #12]
 800b8be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8c2:	d032      	beq.n	800b92a <__ssputs_r+0x80>
 800b8c4:	6825      	ldr	r5, [r4, #0]
 800b8c6:	6909      	ldr	r1, [r1, #16]
 800b8c8:	eba5 0901 	sub.w	r9, r5, r1
 800b8cc:	6965      	ldr	r5, [r4, #20]
 800b8ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	444b      	add	r3, r9
 800b8da:	106d      	asrs	r5, r5, #1
 800b8dc:	429d      	cmp	r5, r3
 800b8de:	bf38      	it	cc
 800b8e0:	461d      	movcc	r5, r3
 800b8e2:	0553      	lsls	r3, r2, #21
 800b8e4:	d531      	bpl.n	800b94a <__ssputs_r+0xa0>
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	f7fd ff32 	bl	8009750 <_malloc_r>
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	b950      	cbnz	r0, 800b906 <__ssputs_r+0x5c>
 800b8f0:	230c      	movs	r3, #12
 800b8f2:	f8ca 3000 	str.w	r3, [sl]
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8fc:	81a3      	strh	r3, [r4, #12]
 800b8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b906:	6921      	ldr	r1, [r4, #16]
 800b908:	464a      	mov	r2, r9
 800b90a:	f7fd febb 	bl	8009684 <memcpy>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	6126      	str	r6, [r4, #16]
 800b91c:	6165      	str	r5, [r4, #20]
 800b91e:	444e      	add	r6, r9
 800b920:	eba5 0509 	sub.w	r5, r5, r9
 800b924:	6026      	str	r6, [r4, #0]
 800b926:	60a5      	str	r5, [r4, #8]
 800b928:	463e      	mov	r6, r7
 800b92a:	42be      	cmp	r6, r7
 800b92c:	d900      	bls.n	800b930 <__ssputs_r+0x86>
 800b92e:	463e      	mov	r6, r7
 800b930:	4632      	mov	r2, r6
 800b932:	6820      	ldr	r0, [r4, #0]
 800b934:	4641      	mov	r1, r8
 800b936:	f000 f967 	bl	800bc08 <memmove>
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	1b9b      	subs	r3, r3, r6
 800b940:	4432      	add	r2, r6
 800b942:	60a3      	str	r3, [r4, #8]
 800b944:	6022      	str	r2, [r4, #0]
 800b946:	2000      	movs	r0, #0
 800b948:	e7db      	b.n	800b902 <__ssputs_r+0x58>
 800b94a:	462a      	mov	r2, r5
 800b94c:	f000 f976 	bl	800bc3c <_realloc_r>
 800b950:	4606      	mov	r6, r0
 800b952:	2800      	cmp	r0, #0
 800b954:	d1e1      	bne.n	800b91a <__ssputs_r+0x70>
 800b956:	6921      	ldr	r1, [r4, #16]
 800b958:	4650      	mov	r0, sl
 800b95a:	f7fd fea9 	bl	80096b0 <_free_r>
 800b95e:	e7c7      	b.n	800b8f0 <__ssputs_r+0x46>

0800b960 <_svfiprintf_r>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	4698      	mov	r8, r3
 800b966:	898b      	ldrh	r3, [r1, #12]
 800b968:	061b      	lsls	r3, r3, #24
 800b96a:	b09d      	sub	sp, #116	; 0x74
 800b96c:	4607      	mov	r7, r0
 800b96e:	460d      	mov	r5, r1
 800b970:	4614      	mov	r4, r2
 800b972:	d50e      	bpl.n	800b992 <_svfiprintf_r+0x32>
 800b974:	690b      	ldr	r3, [r1, #16]
 800b976:	b963      	cbnz	r3, 800b992 <_svfiprintf_r+0x32>
 800b978:	2140      	movs	r1, #64	; 0x40
 800b97a:	f7fd fee9 	bl	8009750 <_malloc_r>
 800b97e:	6028      	str	r0, [r5, #0]
 800b980:	6128      	str	r0, [r5, #16]
 800b982:	b920      	cbnz	r0, 800b98e <_svfiprintf_r+0x2e>
 800b984:	230c      	movs	r3, #12
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	f04f 30ff 	mov.w	r0, #4294967295
 800b98c:	e0d1      	b.n	800bb32 <_svfiprintf_r+0x1d2>
 800b98e:	2340      	movs	r3, #64	; 0x40
 800b990:	616b      	str	r3, [r5, #20]
 800b992:	2300      	movs	r3, #0
 800b994:	9309      	str	r3, [sp, #36]	; 0x24
 800b996:	2320      	movs	r3, #32
 800b998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b99c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9a0:	2330      	movs	r3, #48	; 0x30
 800b9a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb4c <_svfiprintf_r+0x1ec>
 800b9a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9aa:	f04f 0901 	mov.w	r9, #1
 800b9ae:	4623      	mov	r3, r4
 800b9b0:	469a      	mov	sl, r3
 800b9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b6:	b10a      	cbz	r2, 800b9bc <_svfiprintf_r+0x5c>
 800b9b8:	2a25      	cmp	r2, #37	; 0x25
 800b9ba:	d1f9      	bne.n	800b9b0 <_svfiprintf_r+0x50>
 800b9bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b9c0:	d00b      	beq.n	800b9da <_svfiprintf_r+0x7a>
 800b9c2:	465b      	mov	r3, fp
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff ff6e 	bl	800b8aa <__ssputs_r>
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	f000 80aa 	beq.w	800bb28 <_svfiprintf_r+0x1c8>
 800b9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d6:	445a      	add	r2, fp
 800b9d8:	9209      	str	r2, [sp, #36]	; 0x24
 800b9da:	f89a 3000 	ldrb.w	r3, [sl]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 80a2 	beq.w	800bb28 <_svfiprintf_r+0x1c8>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ee:	f10a 0a01 	add.w	sl, sl, #1
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	9307      	str	r3, [sp, #28]
 800b9f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9fa:	931a      	str	r3, [sp, #104]	; 0x68
 800b9fc:	4654      	mov	r4, sl
 800b9fe:	2205      	movs	r2, #5
 800ba00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba04:	4851      	ldr	r0, [pc, #324]	; (800bb4c <_svfiprintf_r+0x1ec>)
 800ba06:	f7f4 fbfb 	bl	8000200 <memchr>
 800ba0a:	9a04      	ldr	r2, [sp, #16]
 800ba0c:	b9d8      	cbnz	r0, 800ba46 <_svfiprintf_r+0xe6>
 800ba0e:	06d0      	lsls	r0, r2, #27
 800ba10:	bf44      	itt	mi
 800ba12:	2320      	movmi	r3, #32
 800ba14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba18:	0711      	lsls	r1, r2, #28
 800ba1a:	bf44      	itt	mi
 800ba1c:	232b      	movmi	r3, #43	; 0x2b
 800ba1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba22:	f89a 3000 	ldrb.w	r3, [sl]
 800ba26:	2b2a      	cmp	r3, #42	; 0x2a
 800ba28:	d015      	beq.n	800ba56 <_svfiprintf_r+0xf6>
 800ba2a:	9a07      	ldr	r2, [sp, #28]
 800ba2c:	4654      	mov	r4, sl
 800ba2e:	2000      	movs	r0, #0
 800ba30:	f04f 0c0a 	mov.w	ip, #10
 800ba34:	4621      	mov	r1, r4
 800ba36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba3a:	3b30      	subs	r3, #48	; 0x30
 800ba3c:	2b09      	cmp	r3, #9
 800ba3e:	d94e      	bls.n	800bade <_svfiprintf_r+0x17e>
 800ba40:	b1b0      	cbz	r0, 800ba70 <_svfiprintf_r+0x110>
 800ba42:	9207      	str	r2, [sp, #28]
 800ba44:	e014      	b.n	800ba70 <_svfiprintf_r+0x110>
 800ba46:	eba0 0308 	sub.w	r3, r0, r8
 800ba4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	46a2      	mov	sl, r4
 800ba54:	e7d2      	b.n	800b9fc <_svfiprintf_r+0x9c>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	1d19      	adds	r1, r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	9103      	str	r1, [sp, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bfbb      	ittet	lt
 800ba62:	425b      	neglt	r3, r3
 800ba64:	f042 0202 	orrlt.w	r2, r2, #2
 800ba68:	9307      	strge	r3, [sp, #28]
 800ba6a:	9307      	strlt	r3, [sp, #28]
 800ba6c:	bfb8      	it	lt
 800ba6e:	9204      	strlt	r2, [sp, #16]
 800ba70:	7823      	ldrb	r3, [r4, #0]
 800ba72:	2b2e      	cmp	r3, #46	; 0x2e
 800ba74:	d10c      	bne.n	800ba90 <_svfiprintf_r+0x130>
 800ba76:	7863      	ldrb	r3, [r4, #1]
 800ba78:	2b2a      	cmp	r3, #42	; 0x2a
 800ba7a:	d135      	bne.n	800bae8 <_svfiprintf_r+0x188>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	1d1a      	adds	r2, r3, #4
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	9203      	str	r2, [sp, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	bfb8      	it	lt
 800ba88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba8c:	3402      	adds	r4, #2
 800ba8e:	9305      	str	r3, [sp, #20]
 800ba90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb5c <_svfiprintf_r+0x1fc>
 800ba94:	7821      	ldrb	r1, [r4, #0]
 800ba96:	2203      	movs	r2, #3
 800ba98:	4650      	mov	r0, sl
 800ba9a:	f7f4 fbb1 	bl	8000200 <memchr>
 800ba9e:	b140      	cbz	r0, 800bab2 <_svfiprintf_r+0x152>
 800baa0:	2340      	movs	r3, #64	; 0x40
 800baa2:	eba0 000a 	sub.w	r0, r0, sl
 800baa6:	fa03 f000 	lsl.w	r0, r3, r0
 800baaa:	9b04      	ldr	r3, [sp, #16]
 800baac:	4303      	orrs	r3, r0
 800baae:	3401      	adds	r4, #1
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab6:	4826      	ldr	r0, [pc, #152]	; (800bb50 <_svfiprintf_r+0x1f0>)
 800bab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800babc:	2206      	movs	r2, #6
 800babe:	f7f4 fb9f 	bl	8000200 <memchr>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d038      	beq.n	800bb38 <_svfiprintf_r+0x1d8>
 800bac6:	4b23      	ldr	r3, [pc, #140]	; (800bb54 <_svfiprintf_r+0x1f4>)
 800bac8:	bb1b      	cbnz	r3, 800bb12 <_svfiprintf_r+0x1b2>
 800baca:	9b03      	ldr	r3, [sp, #12]
 800bacc:	3307      	adds	r3, #7
 800bace:	f023 0307 	bic.w	r3, r3, #7
 800bad2:	3308      	adds	r3, #8
 800bad4:	9303      	str	r3, [sp, #12]
 800bad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad8:	4433      	add	r3, r6
 800bada:	9309      	str	r3, [sp, #36]	; 0x24
 800badc:	e767      	b.n	800b9ae <_svfiprintf_r+0x4e>
 800bade:	fb0c 3202 	mla	r2, ip, r2, r3
 800bae2:	460c      	mov	r4, r1
 800bae4:	2001      	movs	r0, #1
 800bae6:	e7a5      	b.n	800ba34 <_svfiprintf_r+0xd4>
 800bae8:	2300      	movs	r3, #0
 800baea:	3401      	adds	r4, #1
 800baec:	9305      	str	r3, [sp, #20]
 800baee:	4619      	mov	r1, r3
 800baf0:	f04f 0c0a 	mov.w	ip, #10
 800baf4:	4620      	mov	r0, r4
 800baf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bafa:	3a30      	subs	r2, #48	; 0x30
 800bafc:	2a09      	cmp	r2, #9
 800bafe:	d903      	bls.n	800bb08 <_svfiprintf_r+0x1a8>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d0c5      	beq.n	800ba90 <_svfiprintf_r+0x130>
 800bb04:	9105      	str	r1, [sp, #20]
 800bb06:	e7c3      	b.n	800ba90 <_svfiprintf_r+0x130>
 800bb08:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e7f0      	b.n	800baf4 <_svfiprintf_r+0x194>
 800bb12:	ab03      	add	r3, sp, #12
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	462a      	mov	r2, r5
 800bb18:	4b0f      	ldr	r3, [pc, #60]	; (800bb58 <_svfiprintf_r+0x1f8>)
 800bb1a:	a904      	add	r1, sp, #16
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7fd ff11 	bl	8009944 <_printf_float>
 800bb22:	1c42      	adds	r2, r0, #1
 800bb24:	4606      	mov	r6, r0
 800bb26:	d1d6      	bne.n	800bad6 <_svfiprintf_r+0x176>
 800bb28:	89ab      	ldrh	r3, [r5, #12]
 800bb2a:	065b      	lsls	r3, r3, #25
 800bb2c:	f53f af2c 	bmi.w	800b988 <_svfiprintf_r+0x28>
 800bb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb32:	b01d      	add	sp, #116	; 0x74
 800bb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb38:	ab03      	add	r3, sp, #12
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	462a      	mov	r2, r5
 800bb3e:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <_svfiprintf_r+0x1f8>)
 800bb40:	a904      	add	r1, sp, #16
 800bb42:	4638      	mov	r0, r7
 800bb44:	f7fe f9a2 	bl	8009e8c <_printf_i>
 800bb48:	e7eb      	b.n	800bb22 <_svfiprintf_r+0x1c2>
 800bb4a:	bf00      	nop
 800bb4c:	0800c68c 	.word	0x0800c68c
 800bb50:	0800c696 	.word	0x0800c696
 800bb54:	08009945 	.word	0x08009945
 800bb58:	0800b8ab 	.word	0x0800b8ab
 800bb5c:	0800c692 	.word	0x0800c692

0800bb60 <_read_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d07      	ldr	r5, [pc, #28]	; (800bb80 <_read_r+0x20>)
 800bb64:	4604      	mov	r4, r0
 800bb66:	4608      	mov	r0, r1
 800bb68:	4611      	mov	r1, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	602a      	str	r2, [r5, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f7f6 fb64 	bl	800223c <_read>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_read_r+0x1e>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_read_r+0x1e>
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	200059fc 	.word	0x200059fc

0800bb84 <__assert_func>:
 800bb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb86:	4614      	mov	r4, r2
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4b09      	ldr	r3, [pc, #36]	; (800bbb0 <__assert_func+0x2c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4605      	mov	r5, r0
 800bb90:	68d8      	ldr	r0, [r3, #12]
 800bb92:	b14c      	cbz	r4, 800bba8 <__assert_func+0x24>
 800bb94:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <__assert_func+0x30>)
 800bb96:	9100      	str	r1, [sp, #0]
 800bb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb9c:	4906      	ldr	r1, [pc, #24]	; (800bbb8 <__assert_func+0x34>)
 800bb9e:	462b      	mov	r3, r5
 800bba0:	f000 f80e 	bl	800bbc0 <fiprintf>
 800bba4:	f000 fa98 	bl	800c0d8 <abort>
 800bba8:	4b04      	ldr	r3, [pc, #16]	; (800bbbc <__assert_func+0x38>)
 800bbaa:	461c      	mov	r4, r3
 800bbac:	e7f3      	b.n	800bb96 <__assert_func+0x12>
 800bbae:	bf00      	nop
 800bbb0:	2000002c 	.word	0x2000002c
 800bbb4:	0800c69d 	.word	0x0800c69d
 800bbb8:	0800c6aa 	.word	0x0800c6aa
 800bbbc:	0800c6d8 	.word	0x0800c6d8

0800bbc0 <fiprintf>:
 800bbc0:	b40e      	push	{r1, r2, r3}
 800bbc2:	b503      	push	{r0, r1, lr}
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	ab03      	add	r3, sp, #12
 800bbc8:	4805      	ldr	r0, [pc, #20]	; (800bbe0 <fiprintf+0x20>)
 800bbca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbce:	6800      	ldr	r0, [r0, #0]
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	f000 f883 	bl	800bcdc <_vfiprintf_r>
 800bbd6:	b002      	add	sp, #8
 800bbd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbdc:	b003      	add	sp, #12
 800bbde:	4770      	bx	lr
 800bbe0:	2000002c 	.word	0x2000002c

0800bbe4 <__ascii_mbtowc>:
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	b901      	cbnz	r1, 800bbea <__ascii_mbtowc+0x6>
 800bbe8:	a901      	add	r1, sp, #4
 800bbea:	b142      	cbz	r2, 800bbfe <__ascii_mbtowc+0x1a>
 800bbec:	b14b      	cbz	r3, 800bc02 <__ascii_mbtowc+0x1e>
 800bbee:	7813      	ldrb	r3, [r2, #0]
 800bbf0:	600b      	str	r3, [r1, #0]
 800bbf2:	7812      	ldrb	r2, [r2, #0]
 800bbf4:	1e10      	subs	r0, r2, #0
 800bbf6:	bf18      	it	ne
 800bbf8:	2001      	movne	r0, #1
 800bbfa:	b002      	add	sp, #8
 800bbfc:	4770      	bx	lr
 800bbfe:	4610      	mov	r0, r2
 800bc00:	e7fb      	b.n	800bbfa <__ascii_mbtowc+0x16>
 800bc02:	f06f 0001 	mvn.w	r0, #1
 800bc06:	e7f8      	b.n	800bbfa <__ascii_mbtowc+0x16>

0800bc08 <memmove>:
 800bc08:	4288      	cmp	r0, r1
 800bc0a:	b510      	push	{r4, lr}
 800bc0c:	eb01 0402 	add.w	r4, r1, r2
 800bc10:	d902      	bls.n	800bc18 <memmove+0x10>
 800bc12:	4284      	cmp	r4, r0
 800bc14:	4623      	mov	r3, r4
 800bc16:	d807      	bhi.n	800bc28 <memmove+0x20>
 800bc18:	1e43      	subs	r3, r0, #1
 800bc1a:	42a1      	cmp	r1, r4
 800bc1c:	d008      	beq.n	800bc30 <memmove+0x28>
 800bc1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc26:	e7f8      	b.n	800bc1a <memmove+0x12>
 800bc28:	4402      	add	r2, r0
 800bc2a:	4601      	mov	r1, r0
 800bc2c:	428a      	cmp	r2, r1
 800bc2e:	d100      	bne.n	800bc32 <memmove+0x2a>
 800bc30:	bd10      	pop	{r4, pc}
 800bc32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc3a:	e7f7      	b.n	800bc2c <memmove+0x24>

0800bc3c <_realloc_r>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	4607      	mov	r7, r0
 800bc40:	4614      	mov	r4, r2
 800bc42:	460e      	mov	r6, r1
 800bc44:	b921      	cbnz	r1, 800bc50 <_realloc_r+0x14>
 800bc46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	f7fd bd80 	b.w	8009750 <_malloc_r>
 800bc50:	b922      	cbnz	r2, 800bc5c <_realloc_r+0x20>
 800bc52:	f7fd fd2d 	bl	80096b0 <_free_r>
 800bc56:	4625      	mov	r5, r4
 800bc58:	4628      	mov	r0, r5
 800bc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc5c:	f000 faa8 	bl	800c1b0 <_malloc_usable_size_r>
 800bc60:	42a0      	cmp	r0, r4
 800bc62:	d20f      	bcs.n	800bc84 <_realloc_r+0x48>
 800bc64:	4621      	mov	r1, r4
 800bc66:	4638      	mov	r0, r7
 800bc68:	f7fd fd72 	bl	8009750 <_malloc_r>
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d0f2      	beq.n	800bc58 <_realloc_r+0x1c>
 800bc72:	4631      	mov	r1, r6
 800bc74:	4622      	mov	r2, r4
 800bc76:	f7fd fd05 	bl	8009684 <memcpy>
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	f7fd fd17 	bl	80096b0 <_free_r>
 800bc82:	e7e9      	b.n	800bc58 <_realloc_r+0x1c>
 800bc84:	4635      	mov	r5, r6
 800bc86:	e7e7      	b.n	800bc58 <_realloc_r+0x1c>

0800bc88 <__sfputc_r>:
 800bc88:	6893      	ldr	r3, [r2, #8]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	b410      	push	{r4}
 800bc90:	6093      	str	r3, [r2, #8]
 800bc92:	da08      	bge.n	800bca6 <__sfputc_r+0x1e>
 800bc94:	6994      	ldr	r4, [r2, #24]
 800bc96:	42a3      	cmp	r3, r4
 800bc98:	db01      	blt.n	800bc9e <__sfputc_r+0x16>
 800bc9a:	290a      	cmp	r1, #10
 800bc9c:	d103      	bne.n	800bca6 <__sfputc_r+0x1e>
 800bc9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca2:	f000 b94b 	b.w	800bf3c <__swbuf_r>
 800bca6:	6813      	ldr	r3, [r2, #0]
 800bca8:	1c58      	adds	r0, r3, #1
 800bcaa:	6010      	str	r0, [r2, #0]
 800bcac:	7019      	strb	r1, [r3, #0]
 800bcae:	4608      	mov	r0, r1
 800bcb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <__sfputs_r>:
 800bcb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb8:	4606      	mov	r6, r0
 800bcba:	460f      	mov	r7, r1
 800bcbc:	4614      	mov	r4, r2
 800bcbe:	18d5      	adds	r5, r2, r3
 800bcc0:	42ac      	cmp	r4, r5
 800bcc2:	d101      	bne.n	800bcc8 <__sfputs_r+0x12>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e007      	b.n	800bcd8 <__sfputs_r+0x22>
 800bcc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bccc:	463a      	mov	r2, r7
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f7ff ffda 	bl	800bc88 <__sfputc_r>
 800bcd4:	1c43      	adds	r3, r0, #1
 800bcd6:	d1f3      	bne.n	800bcc0 <__sfputs_r+0xa>
 800bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcdc <_vfiprintf_r>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	460d      	mov	r5, r1
 800bce2:	b09d      	sub	sp, #116	; 0x74
 800bce4:	4614      	mov	r4, r2
 800bce6:	4698      	mov	r8, r3
 800bce8:	4606      	mov	r6, r0
 800bcea:	b118      	cbz	r0, 800bcf4 <_vfiprintf_r+0x18>
 800bcec:	6983      	ldr	r3, [r0, #24]
 800bcee:	b90b      	cbnz	r3, 800bcf4 <_vfiprintf_r+0x18>
 800bcf0:	f7fd fbf2 	bl	80094d8 <__sinit>
 800bcf4:	4b89      	ldr	r3, [pc, #548]	; (800bf1c <_vfiprintf_r+0x240>)
 800bcf6:	429d      	cmp	r5, r3
 800bcf8:	d11b      	bne.n	800bd32 <_vfiprintf_r+0x56>
 800bcfa:	6875      	ldr	r5, [r6, #4]
 800bcfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcfe:	07d9      	lsls	r1, r3, #31
 800bd00:	d405      	bmi.n	800bd0e <_vfiprintf_r+0x32>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	059a      	lsls	r2, r3, #22
 800bd06:	d402      	bmi.n	800bd0e <_vfiprintf_r+0x32>
 800bd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd0a:	f7fd fca8 	bl	800965e <__retarget_lock_acquire_recursive>
 800bd0e:	89ab      	ldrh	r3, [r5, #12]
 800bd10:	071b      	lsls	r3, r3, #28
 800bd12:	d501      	bpl.n	800bd18 <_vfiprintf_r+0x3c>
 800bd14:	692b      	ldr	r3, [r5, #16]
 800bd16:	b9eb      	cbnz	r3, 800bd54 <_vfiprintf_r+0x78>
 800bd18:	4629      	mov	r1, r5
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f000 f96e 	bl	800bffc <__swsetup_r>
 800bd20:	b1c0      	cbz	r0, 800bd54 <_vfiprintf_r+0x78>
 800bd22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd24:	07dc      	lsls	r4, r3, #31
 800bd26:	d50e      	bpl.n	800bd46 <_vfiprintf_r+0x6a>
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	b01d      	add	sp, #116	; 0x74
 800bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd32:	4b7b      	ldr	r3, [pc, #492]	; (800bf20 <_vfiprintf_r+0x244>)
 800bd34:	429d      	cmp	r5, r3
 800bd36:	d101      	bne.n	800bd3c <_vfiprintf_r+0x60>
 800bd38:	68b5      	ldr	r5, [r6, #8]
 800bd3a:	e7df      	b.n	800bcfc <_vfiprintf_r+0x20>
 800bd3c:	4b79      	ldr	r3, [pc, #484]	; (800bf24 <_vfiprintf_r+0x248>)
 800bd3e:	429d      	cmp	r5, r3
 800bd40:	bf08      	it	eq
 800bd42:	68f5      	ldreq	r5, [r6, #12]
 800bd44:	e7da      	b.n	800bcfc <_vfiprintf_r+0x20>
 800bd46:	89ab      	ldrh	r3, [r5, #12]
 800bd48:	0598      	lsls	r0, r3, #22
 800bd4a:	d4ed      	bmi.n	800bd28 <_vfiprintf_r+0x4c>
 800bd4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd4e:	f7fd fc87 	bl	8009660 <__retarget_lock_release_recursive>
 800bd52:	e7e9      	b.n	800bd28 <_vfiprintf_r+0x4c>
 800bd54:	2300      	movs	r3, #0
 800bd56:	9309      	str	r3, [sp, #36]	; 0x24
 800bd58:	2320      	movs	r3, #32
 800bd5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd62:	2330      	movs	r3, #48	; 0x30
 800bd64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf28 <_vfiprintf_r+0x24c>
 800bd68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd6c:	f04f 0901 	mov.w	r9, #1
 800bd70:	4623      	mov	r3, r4
 800bd72:	469a      	mov	sl, r3
 800bd74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd78:	b10a      	cbz	r2, 800bd7e <_vfiprintf_r+0xa2>
 800bd7a:	2a25      	cmp	r2, #37	; 0x25
 800bd7c:	d1f9      	bne.n	800bd72 <_vfiprintf_r+0x96>
 800bd7e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd82:	d00b      	beq.n	800bd9c <_vfiprintf_r+0xc0>
 800bd84:	465b      	mov	r3, fp
 800bd86:	4622      	mov	r2, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f7ff ff93 	bl	800bcb6 <__sfputs_r>
 800bd90:	3001      	adds	r0, #1
 800bd92:	f000 80aa 	beq.w	800beea <_vfiprintf_r+0x20e>
 800bd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd98:	445a      	add	r2, fp
 800bd9a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80a2 	beq.w	800beea <_vfiprintf_r+0x20e>
 800bda6:	2300      	movs	r3, #0
 800bda8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdb0:	f10a 0a01 	add.w	sl, sl, #1
 800bdb4:	9304      	str	r3, [sp, #16]
 800bdb6:	9307      	str	r3, [sp, #28]
 800bdb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdbc:	931a      	str	r3, [sp, #104]	; 0x68
 800bdbe:	4654      	mov	r4, sl
 800bdc0:	2205      	movs	r2, #5
 800bdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc6:	4858      	ldr	r0, [pc, #352]	; (800bf28 <_vfiprintf_r+0x24c>)
 800bdc8:	f7f4 fa1a 	bl	8000200 <memchr>
 800bdcc:	9a04      	ldr	r2, [sp, #16]
 800bdce:	b9d8      	cbnz	r0, 800be08 <_vfiprintf_r+0x12c>
 800bdd0:	06d1      	lsls	r1, r2, #27
 800bdd2:	bf44      	itt	mi
 800bdd4:	2320      	movmi	r3, #32
 800bdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdda:	0713      	lsls	r3, r2, #28
 800bddc:	bf44      	itt	mi
 800bdde:	232b      	movmi	r3, #43	; 0x2b
 800bde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bde4:	f89a 3000 	ldrb.w	r3, [sl]
 800bde8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdea:	d015      	beq.n	800be18 <_vfiprintf_r+0x13c>
 800bdec:	9a07      	ldr	r2, [sp, #28]
 800bdee:	4654      	mov	r4, sl
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	f04f 0c0a 	mov.w	ip, #10
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdfc:	3b30      	subs	r3, #48	; 0x30
 800bdfe:	2b09      	cmp	r3, #9
 800be00:	d94e      	bls.n	800bea0 <_vfiprintf_r+0x1c4>
 800be02:	b1b0      	cbz	r0, 800be32 <_vfiprintf_r+0x156>
 800be04:	9207      	str	r2, [sp, #28]
 800be06:	e014      	b.n	800be32 <_vfiprintf_r+0x156>
 800be08:	eba0 0308 	sub.w	r3, r0, r8
 800be0c:	fa09 f303 	lsl.w	r3, r9, r3
 800be10:	4313      	orrs	r3, r2
 800be12:	9304      	str	r3, [sp, #16]
 800be14:	46a2      	mov	sl, r4
 800be16:	e7d2      	b.n	800bdbe <_vfiprintf_r+0xe2>
 800be18:	9b03      	ldr	r3, [sp, #12]
 800be1a:	1d19      	adds	r1, r3, #4
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	9103      	str	r1, [sp, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	bfbb      	ittet	lt
 800be24:	425b      	neglt	r3, r3
 800be26:	f042 0202 	orrlt.w	r2, r2, #2
 800be2a:	9307      	strge	r3, [sp, #28]
 800be2c:	9307      	strlt	r3, [sp, #28]
 800be2e:	bfb8      	it	lt
 800be30:	9204      	strlt	r2, [sp, #16]
 800be32:	7823      	ldrb	r3, [r4, #0]
 800be34:	2b2e      	cmp	r3, #46	; 0x2e
 800be36:	d10c      	bne.n	800be52 <_vfiprintf_r+0x176>
 800be38:	7863      	ldrb	r3, [r4, #1]
 800be3a:	2b2a      	cmp	r3, #42	; 0x2a
 800be3c:	d135      	bne.n	800beaa <_vfiprintf_r+0x1ce>
 800be3e:	9b03      	ldr	r3, [sp, #12]
 800be40:	1d1a      	adds	r2, r3, #4
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	9203      	str	r2, [sp, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	bfb8      	it	lt
 800be4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be4e:	3402      	adds	r4, #2
 800be50:	9305      	str	r3, [sp, #20]
 800be52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf38 <_vfiprintf_r+0x25c>
 800be56:	7821      	ldrb	r1, [r4, #0]
 800be58:	2203      	movs	r2, #3
 800be5a:	4650      	mov	r0, sl
 800be5c:	f7f4 f9d0 	bl	8000200 <memchr>
 800be60:	b140      	cbz	r0, 800be74 <_vfiprintf_r+0x198>
 800be62:	2340      	movs	r3, #64	; 0x40
 800be64:	eba0 000a 	sub.w	r0, r0, sl
 800be68:	fa03 f000 	lsl.w	r0, r3, r0
 800be6c:	9b04      	ldr	r3, [sp, #16]
 800be6e:	4303      	orrs	r3, r0
 800be70:	3401      	adds	r4, #1
 800be72:	9304      	str	r3, [sp, #16]
 800be74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be78:	482c      	ldr	r0, [pc, #176]	; (800bf2c <_vfiprintf_r+0x250>)
 800be7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be7e:	2206      	movs	r2, #6
 800be80:	f7f4 f9be 	bl	8000200 <memchr>
 800be84:	2800      	cmp	r0, #0
 800be86:	d03f      	beq.n	800bf08 <_vfiprintf_r+0x22c>
 800be88:	4b29      	ldr	r3, [pc, #164]	; (800bf30 <_vfiprintf_r+0x254>)
 800be8a:	bb1b      	cbnz	r3, 800bed4 <_vfiprintf_r+0x1f8>
 800be8c:	9b03      	ldr	r3, [sp, #12]
 800be8e:	3307      	adds	r3, #7
 800be90:	f023 0307 	bic.w	r3, r3, #7
 800be94:	3308      	adds	r3, #8
 800be96:	9303      	str	r3, [sp, #12]
 800be98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be9a:	443b      	add	r3, r7
 800be9c:	9309      	str	r3, [sp, #36]	; 0x24
 800be9e:	e767      	b.n	800bd70 <_vfiprintf_r+0x94>
 800bea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bea4:	460c      	mov	r4, r1
 800bea6:	2001      	movs	r0, #1
 800bea8:	e7a5      	b.n	800bdf6 <_vfiprintf_r+0x11a>
 800beaa:	2300      	movs	r3, #0
 800beac:	3401      	adds	r4, #1
 800beae:	9305      	str	r3, [sp, #20]
 800beb0:	4619      	mov	r1, r3
 800beb2:	f04f 0c0a 	mov.w	ip, #10
 800beb6:	4620      	mov	r0, r4
 800beb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bebc:	3a30      	subs	r2, #48	; 0x30
 800bebe:	2a09      	cmp	r2, #9
 800bec0:	d903      	bls.n	800beca <_vfiprintf_r+0x1ee>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0c5      	beq.n	800be52 <_vfiprintf_r+0x176>
 800bec6:	9105      	str	r1, [sp, #20]
 800bec8:	e7c3      	b.n	800be52 <_vfiprintf_r+0x176>
 800beca:	fb0c 2101 	mla	r1, ip, r1, r2
 800bece:	4604      	mov	r4, r0
 800bed0:	2301      	movs	r3, #1
 800bed2:	e7f0      	b.n	800beb6 <_vfiprintf_r+0x1da>
 800bed4:	ab03      	add	r3, sp, #12
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	462a      	mov	r2, r5
 800beda:	4b16      	ldr	r3, [pc, #88]	; (800bf34 <_vfiprintf_r+0x258>)
 800bedc:	a904      	add	r1, sp, #16
 800bede:	4630      	mov	r0, r6
 800bee0:	f7fd fd30 	bl	8009944 <_printf_float>
 800bee4:	4607      	mov	r7, r0
 800bee6:	1c78      	adds	r0, r7, #1
 800bee8:	d1d6      	bne.n	800be98 <_vfiprintf_r+0x1bc>
 800beea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beec:	07d9      	lsls	r1, r3, #31
 800beee:	d405      	bmi.n	800befc <_vfiprintf_r+0x220>
 800bef0:	89ab      	ldrh	r3, [r5, #12]
 800bef2:	059a      	lsls	r2, r3, #22
 800bef4:	d402      	bmi.n	800befc <_vfiprintf_r+0x220>
 800bef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bef8:	f7fd fbb2 	bl	8009660 <__retarget_lock_release_recursive>
 800befc:	89ab      	ldrh	r3, [r5, #12]
 800befe:	065b      	lsls	r3, r3, #25
 800bf00:	f53f af12 	bmi.w	800bd28 <_vfiprintf_r+0x4c>
 800bf04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf06:	e711      	b.n	800bd2c <_vfiprintf_r+0x50>
 800bf08:	ab03      	add	r3, sp, #12
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	462a      	mov	r2, r5
 800bf0e:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <_vfiprintf_r+0x258>)
 800bf10:	a904      	add	r1, sp, #16
 800bf12:	4630      	mov	r0, r6
 800bf14:	f7fd ffba 	bl	8009e8c <_printf_i>
 800bf18:	e7e4      	b.n	800bee4 <_vfiprintf_r+0x208>
 800bf1a:	bf00      	nop
 800bf1c:	0800c424 	.word	0x0800c424
 800bf20:	0800c444 	.word	0x0800c444
 800bf24:	0800c404 	.word	0x0800c404
 800bf28:	0800c68c 	.word	0x0800c68c
 800bf2c:	0800c696 	.word	0x0800c696
 800bf30:	08009945 	.word	0x08009945
 800bf34:	0800bcb7 	.word	0x0800bcb7
 800bf38:	0800c692 	.word	0x0800c692

0800bf3c <__swbuf_r>:
 800bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3e:	460e      	mov	r6, r1
 800bf40:	4614      	mov	r4, r2
 800bf42:	4605      	mov	r5, r0
 800bf44:	b118      	cbz	r0, 800bf4e <__swbuf_r+0x12>
 800bf46:	6983      	ldr	r3, [r0, #24]
 800bf48:	b90b      	cbnz	r3, 800bf4e <__swbuf_r+0x12>
 800bf4a:	f7fd fac5 	bl	80094d8 <__sinit>
 800bf4e:	4b21      	ldr	r3, [pc, #132]	; (800bfd4 <__swbuf_r+0x98>)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	d12b      	bne.n	800bfac <__swbuf_r+0x70>
 800bf54:	686c      	ldr	r4, [r5, #4]
 800bf56:	69a3      	ldr	r3, [r4, #24]
 800bf58:	60a3      	str	r3, [r4, #8]
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	071a      	lsls	r2, r3, #28
 800bf5e:	d52f      	bpl.n	800bfc0 <__swbuf_r+0x84>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	b36b      	cbz	r3, 800bfc0 <__swbuf_r+0x84>
 800bf64:	6923      	ldr	r3, [r4, #16]
 800bf66:	6820      	ldr	r0, [r4, #0]
 800bf68:	1ac0      	subs	r0, r0, r3
 800bf6a:	6963      	ldr	r3, [r4, #20]
 800bf6c:	b2f6      	uxtb	r6, r6
 800bf6e:	4283      	cmp	r3, r0
 800bf70:	4637      	mov	r7, r6
 800bf72:	dc04      	bgt.n	800bf7e <__swbuf_r+0x42>
 800bf74:	4621      	mov	r1, r4
 800bf76:	4628      	mov	r0, r5
 800bf78:	f7ff f8ac 	bl	800b0d4 <_fflush_r>
 800bf7c:	bb30      	cbnz	r0, 800bfcc <__swbuf_r+0x90>
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	60a3      	str	r3, [r4, #8]
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	6022      	str	r2, [r4, #0]
 800bf8a:	701e      	strb	r6, [r3, #0]
 800bf8c:	6963      	ldr	r3, [r4, #20]
 800bf8e:	3001      	adds	r0, #1
 800bf90:	4283      	cmp	r3, r0
 800bf92:	d004      	beq.n	800bf9e <__swbuf_r+0x62>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	07db      	lsls	r3, r3, #31
 800bf98:	d506      	bpl.n	800bfa8 <__swbuf_r+0x6c>
 800bf9a:	2e0a      	cmp	r6, #10
 800bf9c:	d104      	bne.n	800bfa8 <__swbuf_r+0x6c>
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f7ff f897 	bl	800b0d4 <_fflush_r>
 800bfa6:	b988      	cbnz	r0, 800bfcc <__swbuf_r+0x90>
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <__swbuf_r+0x9c>)
 800bfae:	429c      	cmp	r4, r3
 800bfb0:	d101      	bne.n	800bfb6 <__swbuf_r+0x7a>
 800bfb2:	68ac      	ldr	r4, [r5, #8]
 800bfb4:	e7cf      	b.n	800bf56 <__swbuf_r+0x1a>
 800bfb6:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <__swbuf_r+0xa0>)
 800bfb8:	429c      	cmp	r4, r3
 800bfba:	bf08      	it	eq
 800bfbc:	68ec      	ldreq	r4, [r5, #12]
 800bfbe:	e7ca      	b.n	800bf56 <__swbuf_r+0x1a>
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f000 f81a 	bl	800bffc <__swsetup_r>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0cb      	beq.n	800bf64 <__swbuf_r+0x28>
 800bfcc:	f04f 37ff 	mov.w	r7, #4294967295
 800bfd0:	e7ea      	b.n	800bfa8 <__swbuf_r+0x6c>
 800bfd2:	bf00      	nop
 800bfd4:	0800c424 	.word	0x0800c424
 800bfd8:	0800c444 	.word	0x0800c444
 800bfdc:	0800c404 	.word	0x0800c404

0800bfe0 <__ascii_wctomb>:
 800bfe0:	b149      	cbz	r1, 800bff6 <__ascii_wctomb+0x16>
 800bfe2:	2aff      	cmp	r2, #255	; 0xff
 800bfe4:	bf85      	ittet	hi
 800bfe6:	238a      	movhi	r3, #138	; 0x8a
 800bfe8:	6003      	strhi	r3, [r0, #0]
 800bfea:	700a      	strbls	r2, [r1, #0]
 800bfec:	f04f 30ff 	movhi.w	r0, #4294967295
 800bff0:	bf98      	it	ls
 800bff2:	2001      	movls	r0, #1
 800bff4:	4770      	bx	lr
 800bff6:	4608      	mov	r0, r1
 800bff8:	4770      	bx	lr
	...

0800bffc <__swsetup_r>:
 800bffc:	4b32      	ldr	r3, [pc, #200]	; (800c0c8 <__swsetup_r+0xcc>)
 800bffe:	b570      	push	{r4, r5, r6, lr}
 800c000:	681d      	ldr	r5, [r3, #0]
 800c002:	4606      	mov	r6, r0
 800c004:	460c      	mov	r4, r1
 800c006:	b125      	cbz	r5, 800c012 <__swsetup_r+0x16>
 800c008:	69ab      	ldr	r3, [r5, #24]
 800c00a:	b913      	cbnz	r3, 800c012 <__swsetup_r+0x16>
 800c00c:	4628      	mov	r0, r5
 800c00e:	f7fd fa63 	bl	80094d8 <__sinit>
 800c012:	4b2e      	ldr	r3, [pc, #184]	; (800c0cc <__swsetup_r+0xd0>)
 800c014:	429c      	cmp	r4, r3
 800c016:	d10f      	bne.n	800c038 <__swsetup_r+0x3c>
 800c018:	686c      	ldr	r4, [r5, #4]
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c020:	0719      	lsls	r1, r3, #28
 800c022:	d42c      	bmi.n	800c07e <__swsetup_r+0x82>
 800c024:	06dd      	lsls	r5, r3, #27
 800c026:	d411      	bmi.n	800c04c <__swsetup_r+0x50>
 800c028:	2309      	movs	r3, #9
 800c02a:	6033      	str	r3, [r6, #0]
 800c02c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	f04f 30ff 	mov.w	r0, #4294967295
 800c036:	e03e      	b.n	800c0b6 <__swsetup_r+0xba>
 800c038:	4b25      	ldr	r3, [pc, #148]	; (800c0d0 <__swsetup_r+0xd4>)
 800c03a:	429c      	cmp	r4, r3
 800c03c:	d101      	bne.n	800c042 <__swsetup_r+0x46>
 800c03e:	68ac      	ldr	r4, [r5, #8]
 800c040:	e7eb      	b.n	800c01a <__swsetup_r+0x1e>
 800c042:	4b24      	ldr	r3, [pc, #144]	; (800c0d4 <__swsetup_r+0xd8>)
 800c044:	429c      	cmp	r4, r3
 800c046:	bf08      	it	eq
 800c048:	68ec      	ldreq	r4, [r5, #12]
 800c04a:	e7e6      	b.n	800c01a <__swsetup_r+0x1e>
 800c04c:	0758      	lsls	r0, r3, #29
 800c04e:	d512      	bpl.n	800c076 <__swsetup_r+0x7a>
 800c050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c052:	b141      	cbz	r1, 800c066 <__swsetup_r+0x6a>
 800c054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c058:	4299      	cmp	r1, r3
 800c05a:	d002      	beq.n	800c062 <__swsetup_r+0x66>
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7fd fb27 	bl	80096b0 <_free_r>
 800c062:	2300      	movs	r3, #0
 800c064:	6363      	str	r3, [r4, #52]	; 0x34
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	2300      	movs	r3, #0
 800c070:	6063      	str	r3, [r4, #4]
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f043 0308 	orr.w	r3, r3, #8
 800c07c:	81a3      	strh	r3, [r4, #12]
 800c07e:	6923      	ldr	r3, [r4, #16]
 800c080:	b94b      	cbnz	r3, 800c096 <__swsetup_r+0x9a>
 800c082:	89a3      	ldrh	r3, [r4, #12]
 800c084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c08c:	d003      	beq.n	800c096 <__swsetup_r+0x9a>
 800c08e:	4621      	mov	r1, r4
 800c090:	4630      	mov	r0, r6
 800c092:	f000 f84d 	bl	800c130 <__smakebuf_r>
 800c096:	89a0      	ldrh	r0, [r4, #12]
 800c098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c09c:	f010 0301 	ands.w	r3, r0, #1
 800c0a0:	d00a      	beq.n	800c0b8 <__swsetup_r+0xbc>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60a3      	str	r3, [r4, #8]
 800c0a6:	6963      	ldr	r3, [r4, #20]
 800c0a8:	425b      	negs	r3, r3
 800c0aa:	61a3      	str	r3, [r4, #24]
 800c0ac:	6923      	ldr	r3, [r4, #16]
 800c0ae:	b943      	cbnz	r3, 800c0c2 <__swsetup_r+0xc6>
 800c0b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0b4:	d1ba      	bne.n	800c02c <__swsetup_r+0x30>
 800c0b6:	bd70      	pop	{r4, r5, r6, pc}
 800c0b8:	0781      	lsls	r1, r0, #30
 800c0ba:	bf58      	it	pl
 800c0bc:	6963      	ldrpl	r3, [r4, #20]
 800c0be:	60a3      	str	r3, [r4, #8]
 800c0c0:	e7f4      	b.n	800c0ac <__swsetup_r+0xb0>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	e7f7      	b.n	800c0b6 <__swsetup_r+0xba>
 800c0c6:	bf00      	nop
 800c0c8:	2000002c 	.word	0x2000002c
 800c0cc:	0800c424 	.word	0x0800c424
 800c0d0:	0800c444 	.word	0x0800c444
 800c0d4:	0800c404 	.word	0x0800c404

0800c0d8 <abort>:
 800c0d8:	b508      	push	{r3, lr}
 800c0da:	2006      	movs	r0, #6
 800c0dc:	f000 f898 	bl	800c210 <raise>
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	f7f6 f8a1 	bl	8002228 <_exit>

0800c0e6 <__swhatbuf_r>:
 800c0e6:	b570      	push	{r4, r5, r6, lr}
 800c0e8:	460e      	mov	r6, r1
 800c0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ee:	2900      	cmp	r1, #0
 800c0f0:	b096      	sub	sp, #88	; 0x58
 800c0f2:	4614      	mov	r4, r2
 800c0f4:	461d      	mov	r5, r3
 800c0f6:	da07      	bge.n	800c108 <__swhatbuf_r+0x22>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	602b      	str	r3, [r5, #0]
 800c0fc:	89b3      	ldrh	r3, [r6, #12]
 800c0fe:	061a      	lsls	r2, r3, #24
 800c100:	d410      	bmi.n	800c124 <__swhatbuf_r+0x3e>
 800c102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c106:	e00e      	b.n	800c126 <__swhatbuf_r+0x40>
 800c108:	466a      	mov	r2, sp
 800c10a:	f000 f89d 	bl	800c248 <_fstat_r>
 800c10e:	2800      	cmp	r0, #0
 800c110:	dbf2      	blt.n	800c0f8 <__swhatbuf_r+0x12>
 800c112:	9a01      	ldr	r2, [sp, #4]
 800c114:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c118:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c11c:	425a      	negs	r2, r3
 800c11e:	415a      	adcs	r2, r3
 800c120:	602a      	str	r2, [r5, #0]
 800c122:	e7ee      	b.n	800c102 <__swhatbuf_r+0x1c>
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	2000      	movs	r0, #0
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	b016      	add	sp, #88	; 0x58
 800c12c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c130 <__smakebuf_r>:
 800c130:	898b      	ldrh	r3, [r1, #12]
 800c132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c134:	079d      	lsls	r5, r3, #30
 800c136:	4606      	mov	r6, r0
 800c138:	460c      	mov	r4, r1
 800c13a:	d507      	bpl.n	800c14c <__smakebuf_r+0x1c>
 800c13c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	6123      	str	r3, [r4, #16]
 800c144:	2301      	movs	r3, #1
 800c146:	6163      	str	r3, [r4, #20]
 800c148:	b002      	add	sp, #8
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	ab01      	add	r3, sp, #4
 800c14e:	466a      	mov	r2, sp
 800c150:	f7ff ffc9 	bl	800c0e6 <__swhatbuf_r>
 800c154:	9900      	ldr	r1, [sp, #0]
 800c156:	4605      	mov	r5, r0
 800c158:	4630      	mov	r0, r6
 800c15a:	f7fd faf9 	bl	8009750 <_malloc_r>
 800c15e:	b948      	cbnz	r0, 800c174 <__smakebuf_r+0x44>
 800c160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c164:	059a      	lsls	r2, r3, #22
 800c166:	d4ef      	bmi.n	800c148 <__smakebuf_r+0x18>
 800c168:	f023 0303 	bic.w	r3, r3, #3
 800c16c:	f043 0302 	orr.w	r3, r3, #2
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	e7e3      	b.n	800c13c <__smakebuf_r+0xc>
 800c174:	4b0d      	ldr	r3, [pc, #52]	; (800c1ac <__smakebuf_r+0x7c>)
 800c176:	62b3      	str	r3, [r6, #40]	; 0x28
 800c178:	89a3      	ldrh	r3, [r4, #12]
 800c17a:	6020      	str	r0, [r4, #0]
 800c17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	9b00      	ldr	r3, [sp, #0]
 800c184:	6163      	str	r3, [r4, #20]
 800c186:	9b01      	ldr	r3, [sp, #4]
 800c188:	6120      	str	r0, [r4, #16]
 800c18a:	b15b      	cbz	r3, 800c1a4 <__smakebuf_r+0x74>
 800c18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c190:	4630      	mov	r0, r6
 800c192:	f000 f86b 	bl	800c26c <_isatty_r>
 800c196:	b128      	cbz	r0, 800c1a4 <__smakebuf_r+0x74>
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	f023 0303 	bic.w	r3, r3, #3
 800c19e:	f043 0301 	orr.w	r3, r3, #1
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	89a0      	ldrh	r0, [r4, #12]
 800c1a6:	4305      	orrs	r5, r0
 800c1a8:	81a5      	strh	r5, [r4, #12]
 800c1aa:	e7cd      	b.n	800c148 <__smakebuf_r+0x18>
 800c1ac:	08009471 	.word	0x08009471

0800c1b0 <_malloc_usable_size_r>:
 800c1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b4:	1f18      	subs	r0, r3, #4
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	bfbc      	itt	lt
 800c1ba:	580b      	ldrlt	r3, [r1, r0]
 800c1bc:	18c0      	addlt	r0, r0, r3
 800c1be:	4770      	bx	lr

0800c1c0 <_raise_r>:
 800c1c0:	291f      	cmp	r1, #31
 800c1c2:	b538      	push	{r3, r4, r5, lr}
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	460d      	mov	r5, r1
 800c1c8:	d904      	bls.n	800c1d4 <_raise_r+0x14>
 800c1ca:	2316      	movs	r3, #22
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1d6:	b112      	cbz	r2, 800c1de <_raise_r+0x1e>
 800c1d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1dc:	b94b      	cbnz	r3, 800c1f2 <_raise_r+0x32>
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 f830 	bl	800c244 <_getpid_r>
 800c1e4:	462a      	mov	r2, r5
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1ee:	f000 b817 	b.w	800c220 <_kill_r>
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d00a      	beq.n	800c20c <_raise_r+0x4c>
 800c1f6:	1c59      	adds	r1, r3, #1
 800c1f8:	d103      	bne.n	800c202 <_raise_r+0x42>
 800c1fa:	2316      	movs	r3, #22
 800c1fc:	6003      	str	r3, [r0, #0]
 800c1fe:	2001      	movs	r0, #1
 800c200:	e7e7      	b.n	800c1d2 <_raise_r+0x12>
 800c202:	2400      	movs	r4, #0
 800c204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c208:	4628      	mov	r0, r5
 800c20a:	4798      	blx	r3
 800c20c:	2000      	movs	r0, #0
 800c20e:	e7e0      	b.n	800c1d2 <_raise_r+0x12>

0800c210 <raise>:
 800c210:	4b02      	ldr	r3, [pc, #8]	; (800c21c <raise+0xc>)
 800c212:	4601      	mov	r1, r0
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	f7ff bfd3 	b.w	800c1c0 <_raise_r>
 800c21a:	bf00      	nop
 800c21c:	2000002c 	.word	0x2000002c

0800c220 <_kill_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d07      	ldr	r5, [pc, #28]	; (800c240 <_kill_r+0x20>)
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	4608      	mov	r0, r1
 800c22a:	4611      	mov	r1, r2
 800c22c:	602b      	str	r3, [r5, #0]
 800c22e:	f7f5 ffeb 	bl	8002208 <_kill>
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	d102      	bne.n	800c23c <_kill_r+0x1c>
 800c236:	682b      	ldr	r3, [r5, #0]
 800c238:	b103      	cbz	r3, 800c23c <_kill_r+0x1c>
 800c23a:	6023      	str	r3, [r4, #0]
 800c23c:	bd38      	pop	{r3, r4, r5, pc}
 800c23e:	bf00      	nop
 800c240:	200059fc 	.word	0x200059fc

0800c244 <_getpid_r>:
 800c244:	f7f5 bfd8 	b.w	80021f8 <_getpid>

0800c248 <_fstat_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4d07      	ldr	r5, [pc, #28]	; (800c268 <_fstat_r+0x20>)
 800c24c:	2300      	movs	r3, #0
 800c24e:	4604      	mov	r4, r0
 800c250:	4608      	mov	r0, r1
 800c252:	4611      	mov	r1, r2
 800c254:	602b      	str	r3, [r5, #0]
 800c256:	f7f6 f836 	bl	80022c6 <_fstat>
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	d102      	bne.n	800c264 <_fstat_r+0x1c>
 800c25e:	682b      	ldr	r3, [r5, #0]
 800c260:	b103      	cbz	r3, 800c264 <_fstat_r+0x1c>
 800c262:	6023      	str	r3, [r4, #0]
 800c264:	bd38      	pop	{r3, r4, r5, pc}
 800c266:	bf00      	nop
 800c268:	200059fc 	.word	0x200059fc

0800c26c <_isatty_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4d06      	ldr	r5, [pc, #24]	; (800c288 <_isatty_r+0x1c>)
 800c270:	2300      	movs	r3, #0
 800c272:	4604      	mov	r4, r0
 800c274:	4608      	mov	r0, r1
 800c276:	602b      	str	r3, [r5, #0]
 800c278:	f7f6 f835 	bl	80022e6 <_isatty>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	d102      	bne.n	800c286 <_isatty_r+0x1a>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	b103      	cbz	r3, 800c286 <_isatty_r+0x1a>
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	200059fc 	.word	0x200059fc

0800c28c <_init>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	bf00      	nop
 800c290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c292:	bc08      	pop	{r3}
 800c294:	469e      	mov	lr, r3
 800c296:	4770      	bx	lr

0800c298 <_fini>:
 800c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29a:	bf00      	nop
 800c29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c29e:	bc08      	pop	{r3}
 800c2a0:	469e      	mov	lr, r3
 800c2a2:	4770      	bx	lr
