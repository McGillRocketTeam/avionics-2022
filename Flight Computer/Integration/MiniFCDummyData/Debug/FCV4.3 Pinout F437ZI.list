
FCV4.3 Pinout F437ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800824c  0800824c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008254  08008254  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800825c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005780  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200057f4  200057f4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025feb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004210  00000000  00000000  0004608f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cc0  00000000  00000000  0004a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b70  00000000  00000000  0004bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000498f  00000000  00000000  0004dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020792  00000000  00000000  0005245f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7489  00000000  00000000  00072bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016a07a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008120  00000000  00000000  0016a0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080080e0 	.word	0x080080e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080080e0 	.word	0x080080e0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f001 f9b0 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f83c 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 fb60 	bl	8000c68 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a8:	f000 f8a6 	bl	80006f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005ac:	f000 f8f6 	bl	800079c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b0:	f000 f934 	bl	800081c <MX_I2C2_Init>
  MX_I2C3_Init();
 80005b4:	f000 f972 	bl	800089c <MX_I2C3_Init>
  MX_SPI2_Init();
 80005b8:	f000 f9b0 	bl	800091c <MX_SPI2_Init>
  MX_SPI4_Init();
 80005bc:	f000 f9e4 	bl	8000988 <MX_SPI4_Init>
  MX_SPI5_Init();
 80005c0:	f000 fa18 	bl	80009f4 <MX_SPI5_Init>
  MX_TIM2_Init();
 80005c4:	f000 fa4c 	bl	8000a60 <MX_TIM2_Init>
  MX_UART8_Init();
 80005c8:	f000 faa2 	bl	8000b10 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 faca 	bl	8000b64 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005d0:	f000 faf2 	bl	8000bb8 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d4:	f000 fb1a 	bl	8000c0c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d8:	f004 fb40 	bl	8004c5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of radioShenanigan */
  radioShenaniganHandle = osThreadNew(StartDefaultTask, NULL, &radioShenanigan_attributes);
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <main+0x6c>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <main+0x70>)
 80005e2:	f004 fb85 	bl	8004cf0 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <main+0x74>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of fakeSensors */
  fakeSensorsHandle = osThreadNew(StartFakeSensors, NULL, &fakeSensors_attributes);
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <main+0x78>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x7c>)
 80005f2:	f004 fb7d 	bl	8004cf0 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <main+0x80>)
 80005fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f004 fb52 	bl	8004ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x68>
 8000602:	bf00      	nop
 8000604:	08008158 	.word	0x08008158
 8000608:	08000f79 	.word	0x08000f79
 800060c:	20005508 	.word	0x20005508
 8000610:	0800817c 	.word	0x0800817c
 8000614:	08000fdd 	.word	0x08000fdd
 8000618:	20005698 	.word	0x20005698

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 f8c8 	bl	80077c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemClock_Config+0xd8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800067c:	2303      	movs	r3, #3
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	2310      	movs	r3, #16
 800068c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800069c:	23c0      	movs	r3, #192	; 0xc0
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f983 	bl	80029b8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006b8:	f000 fcd0 	bl	800105c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fbe6 	bl	8002ea8 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e2:	f000 fcbb 	bl	800105c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_ADC1_Init+0x98>)
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <MX_ADC1_Init+0x9c>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_ADC1_Init+0x98>)
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_ADC1_Init+0xa0>)
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_ADC1_Init+0x98>)
 8000744:	2201      	movs	r2, #1
 8000746:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_ADC1_Init+0x98>)
 8000752:	2201      	movs	r2, #1
 8000754:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_ADC1_Init+0x98>)
 8000758:	f001 f938 	bl	80019cc <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 fc7b 	bl	800105c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	2306      	movs	r3, #6
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	; (8000790 <MX_ADC1_Init+0x98>)
 8000778:	f001 f96c 	bl	8001a54 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000782:	f000 fc6b 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20005268 	.word	0x20005268
 8000794:	40012000 	.word	0x40012000
 8000798:	0f000001 	.word	0x0f000001

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_I2C1_Init+0x74>)
 80007da:	f001 fe11 	bl	8002400 <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 fc3a 	bl	800105c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ec:	f001 ff4c 	bl	8002688 <HAL_I2CEx_ConfigAnalogFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007f6:	f000 fc31 	bl	800105c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fe:	f001 ff7f 	bl	8002700 <HAL_I2CEx_ConfigDigitalFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 fc28 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20004db8 	.word	0x20004db8
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C2_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C2_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C2_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_I2C2_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_I2C2_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C2_Init+0x74>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_I2C2_Init+0x74>)
 800085a:	f001 fdd1 	bl	8002400 <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 fbfa 	bl	800105c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_I2C2_Init+0x74>)
 800086c:	f001 ff0c 	bl	8002688 <HAL_I2CEx_ConfigAnalogFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000876:	f000 fbf1 	bl	800105c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_I2C2_Init+0x74>)
 800087e:	f001 ff3f 	bl	8002700 <HAL_I2CEx_ConfigDigitalFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 fbe8 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20005214 	.word	0x20005214
 8000894:	40005800 	.word	0x40005800
 8000898:	000186a0 	.word	0x000186a0

0800089c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_I2C3_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_I2C3_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_I2C3_Init+0x74>)
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <MX_I2C3_Init+0x7c>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_I2C3_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_I2C3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_I2C3_Init+0x74>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_I2C3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_I2C3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_I2C3_Init+0x74>)
 80008da:	f001 fd91 	bl	8002400 <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 fbba 	bl	800105c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_I2C3_Init+0x74>)
 80008ec:	f001 fecc 	bl	8002688 <HAL_I2CEx_ConfigAnalogFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008f6:	f000 fbb1 	bl	800105c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_I2C3_Init+0x74>)
 80008fe:	f001 feff 	bl	8002700 <HAL_I2CEx_ConfigDigitalFilter>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000908:	f000 fba8 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20004a70 	.word	0x20004a70
 8000914:	40005c00 	.word	0x40005c00
 8000918:	000186a0 	.word	0x000186a0

0800091c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI2_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_SPI2_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI2_Init+0x64>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI2_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_SPI2_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI2_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI2_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI2_Init+0x64>)
 8000948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI2_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI2_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI2_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI2_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI2_Init+0x64>)
 8000968:	220a      	movs	r2, #10
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_SPI2_Init+0x64>)
 800096e:	f002 fcc7 	bl	8003300 <HAL_SPI_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000978:	f000 fb70 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20004ac4 	.word	0x20004ac4
 8000984:	40003800 	.word	0x40003800

08000988 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_SPI4_Init+0x64>)
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <MX_SPI4_Init+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_SPI4_Init+0x64>)
 8000994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000998:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_SPI4_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_SPI4_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_SPI4_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_SPI4_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_SPI4_Init+0x64>)
 80009b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_SPI4_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_SPI4_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_SPI4_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_SPI4_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_SPI4_Init+0x64>)
 80009d4:	220a      	movs	r2, #10
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_SPI4_Init+0x64>)
 80009da:	f002 fc91 	bl	8003300 <HAL_SPI_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80009e4:	f000 fb3a 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200052b0 	.word	0x200052b0
 80009f0:	40013400 	.word	0x40013400

080009f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_SPI5_Init+0x64>)
 80009fa:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <MX_SPI5_Init+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a40:	220a      	movs	r2, #10
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a46:	f002 fc5b 	bl	8003300 <HAL_SPI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a50:	f000 fb04 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20004d1c 	.word	0x20004d1c
 8000a5c:	40015000 	.word	0x40015000

08000a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aaa:	4818      	ldr	r0, [pc, #96]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000aac:	f002 fd7a 	bl	80035a4 <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ab6:	f000 fad1 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4810      	ldr	r0, [pc, #64]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000aca:	f003 f9fd 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ad4:	f000 fac2 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2208      	movs	r2, #8
 8000aec:	4619      	mov	r1, r3
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000af0:	f002 feb0 	bl	8003854 <HAL_TIM_PWM_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000afa:	f000 faaf 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <MX_TIM2_Init+0xac>)
 8000b00:	f000 fcce 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20005650 	.word	0x20005650

08000b10 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_UART8_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_UART8_Init+0x4c>)
 8000b48:	f003 fa4e 	bl	8003fe8 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 fa83 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000550c 	.word	0x2000550c
 8000b60:	40007c00 	.word	0x40007c00

08000b64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_USART3_UART_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USART3_UART_Init+0x4c>)
 8000b9c:	f003 fa24 	bl	8003fe8 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ba6:	f000 fa59 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20004d74 	.word	0x20004d74
 8000bb4:	40004800 	.word	0x40004800

08000bb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <MX_USART6_UART_Init+0x50>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bf0:	f003 f9fa 	bl	8003fe8 <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f000 fa2f 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20005550 	.word	0x20005550
 8000c08:	40011400 	.word	0x40011400

08000c0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c50:	f001 fd95 	bl	800277e <HAL_PCD_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c5a:	f000 f9ff 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20004e0c 	.word	0x20004e0c

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	4bb5      	ldr	r3, [pc, #724]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4ab4      	ldr	r2, [pc, #720]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4bb2      	ldr	r3, [pc, #712]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	4bae      	ldr	r3, [pc, #696]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4aad      	ldr	r2, [pc, #692]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4bab      	ldr	r3, [pc, #684]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	4ba7      	ldr	r3, [pc, #668]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4aa6      	ldr	r2, [pc, #664]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cc0:	f043 0320 	orr.w	r3, r3, #32
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4ba4      	ldr	r3, [pc, #656]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0320 	and.w	r3, r3, #32
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	4ba0      	ldr	r3, [pc, #640]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a9f      	ldr	r2, [pc, #636]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b9d      	ldr	r3, [pc, #628]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b99      	ldr	r3, [pc, #612]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a98      	ldr	r2, [pc, #608]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b96      	ldr	r3, [pc, #600]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b92      	ldr	r3, [pc, #584]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a91      	ldr	r2, [pc, #580]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b8f      	ldr	r3, [pc, #572]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b8b      	ldr	r3, [pc, #556]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a8a      	ldr	r2, [pc, #552]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b88      	ldr	r3, [pc, #544]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b84      	ldr	r3, [pc, #528]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a83      	ldr	r2, [pc, #524]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b81      	ldr	r3, [pc, #516]	; (8000f58 <MX_GPIO_Init+0x2f0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f248 4184 	movw	r1, #33924	; 0x8484
 8000d64:	487d      	ldr	r0, [pc, #500]	; (8000f5c <MX_GPIO_Init+0x2f4>)
 8000d66:	f001 fb31 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000d70:	487b      	ldr	r0, [pc, #492]	; (8000f60 <MX_GPIO_Init+0x2f8>)
 8000d72:	f001 fb2b 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000d7c:	4879      	ldr	r0, [pc, #484]	; (8000f64 <MX_GPIO_Init+0x2fc>)
 8000d7e:	f001 fb25 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	4878      	ldr	r0, [pc, #480]	; (8000f68 <MX_GPIO_Init+0x300>)
 8000d88:	f001 fb20 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8000d92:	4876      	ldr	r0, [pc, #472]	; (8000f6c <MX_GPIO_Init+0x304>)
 8000d94:	f001 fb1a 	bl	80023cc <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9e:	4874      	ldr	r0, [pc, #464]	; (8000f70 <MX_GPIO_Init+0x308>)
 8000da0:	f001 fb14 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8000da4:	2200      	movs	r2, #0
 8000da6:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8000daa:	4872      	ldr	r0, [pc, #456]	; (8000f74 <MX_GPIO_Init+0x30c>)
 8000dac:	f001 fb0e 	bl	80023cc <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8000db0:	f248 4384 	movw	r3, #33924	; 0x8484
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4864      	ldr	r0, [pc, #400]	; (8000f5c <MX_GPIO_Init+0x2f4>)
 8000dca:	f001 f953 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8000dce:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	485e      	ldr	r0, [pc, #376]	; (8000f60 <MX_GPIO_Init+0x2f8>)
 8000de8:	f001 f944 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8000dec:	2301      	movs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4858      	ldr	r0, [pc, #352]	; (8000f64 <MX_GPIO_Init+0x2fc>)
 8000e02:	f001 f937 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8000e06:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4851      	ldr	r0, [pc, #324]	; (8000f64 <MX_GPIO_Init+0x2fc>)
 8000e20:	f001 f928 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8000e24:	2308      	movs	r3, #8
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	484b      	ldr	r0, [pc, #300]	; (8000f68 <MX_GPIO_Init+0x300>)
 8000e3c:	f001 f91a 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8000e40:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	4843      	ldr	r0, [pc, #268]	; (8000f64 <MX_GPIO_Init+0x2fc>)
 8000e56:	f001 f90d 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4840      	ldr	r0, [pc, #256]	; (8000f70 <MX_GPIO_Init+0x308>)
 8000e6e:	f001 f901 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4836      	ldr	r0, [pc, #216]	; (8000f60 <MX_GPIO_Init+0x2f8>)
 8000e88:	f001 f8f4 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8000e8c:	f242 4301 	movw	r3, #9217	; 0x2401
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4832      	ldr	r0, [pc, #200]	; (8000f6c <MX_GPIO_Init+0x304>)
 8000ea2:	f001 f8e7 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8000ea6:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	482b      	ldr	r0, [pc, #172]	; (8000f6c <MX_GPIO_Init+0x304>)
 8000ec0:	f001 f8d8 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8000ec4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4820      	ldr	r0, [pc, #128]	; (8000f5c <MX_GPIO_Init+0x2f4>)
 8000eda:	f001 f8cb 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <MX_GPIO_Init+0x308>)
 8000ef8:	f001 f8bc 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8000efc:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <MX_GPIO_Init+0x30c>)
 8000f16:	f001 f8ad 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8000f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <MX_GPIO_Init+0x30c>)
 8000f30:	f001 f8a0 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8000f34:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <MX_GPIO_Init+0x304>)
 8000f4c:	f001 f892 	bl	8002074 <HAL_GPIO_Init>

}
 8000f50:	bf00      	nop
 8000f52:	3738      	adds	r7, #56	; 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40021400 	.word	0x40021400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint16_t friends[] = { 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2 };
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <StartDefaultTask+0x58>)
 8000f82:	f107 040c 	add.w	r4, r7, #12
 8000f86:	461d      	mov	r5, r3
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f90:	e884 0003 	stmia.w	r4, {r0, r1}
	int i = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {
	  nbOfFriends = friends[i%12];
 8000f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <StartDefaultTask+0x5c>)
 8000f9c:	fb83 2301 	smull	r2, r3, r3, r1
 8000fa0:	105a      	asrs	r2, r3, #1
 8000fa2:	17cb      	asrs	r3, r1, #31
 8000fa4:	1ad2      	subs	r2, r2, r3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	1aca      	subs	r2, r1, r3
 8000fb0:	0053      	lsls	r3, r2, #1
 8000fb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <StartDefaultTask+0x60>)
 8000fbe:	801a      	strh	r2, [r3, #0]
	  i++;
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    osDelay(150);
 8000fc6:	2096      	movs	r0, #150	; 0x96
 8000fc8:	f003 ff24 	bl	8004e14 <osDelay>
	  nbOfFriends = friends[i%12];
 8000fcc:	e7e4      	b.n	8000f98 <StartDefaultTask+0x20>
 8000fce:	bf00      	nop
 8000fd0:	08008114 	.word	0x08008114
 8000fd4:	2aaaaaab 	.word	0x2aaaaaab
 8000fd8:	20000090 	.word	0x20000090

08000fdc <StartFakeSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeSensors */
void StartFakeSensors(void *argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	; 0x70
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeSensors */
  /* Infinite loop */
	char buffer[100];
	HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fee:	f001 f9ed 	bl	80023cc <HAL_GPIO_WritePin>
  for(;;)
  {
	  sprintf(buffer, "I have %d friends", nbOfFriends);
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <StartFakeSensors+0x50>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <StartFakeSensors+0x54>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 fcba 	bl	8007978 <siprintf>
	  HAL_UART_Transmit(&huart3, buffer, sizeof(uint16_t) * strlen(buffer), HAL_MAX_DELAY);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f8f1 	bl	80001f0 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	b29b      	uxth	r3, r3
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	f107 010c 	add.w	r1, r7, #12
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <StartFakeSensors+0x58>)
 8001020:	f003 f82f 	bl	8004082 <HAL_UART_Transmit>
    osDelay(100);
 8001024:	2064      	movs	r0, #100	; 0x64
 8001026:	f003 fef5 	bl	8004e14 <osDelay>
  {
 800102a:	e7e2      	b.n	8000ff2 <StartFakeSensors+0x16>
 800102c:	20000090 	.word	0x20000090
 8001030:	0800812c 	.word	0x0800812c
 8001034:	20004d74 	.word	0x20004d74

08001038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800104a:	f000 fc7b 	bl	8001944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001000 	.word	0x40001000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_MspInit+0x54>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <HAL_MspInit+0x54>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_MspInit+0x54>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_MspInit+0x54>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_MspInit+0x54>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_MspInit+0x54>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210f      	movs	r1, #15
 80010aa:	f06f 0001 	mvn.w	r0, #1
 80010ae:	f000 ffb7 	bl	8002020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_ADC_MspInit+0x7c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d127      	bne.n	8001132 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_ADC_MspInit+0x80>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_ADC_MspInit+0x80>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_ADC_MspInit+0x80>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_ADC_MspInit+0x80>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_ADC_MspInit+0x80>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_ADC_MspInit+0x80>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800111a:	2340      	movs	r3, #64	; 0x40
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_ADC_MspInit+0x84>)
 800112e:	f000 ffa1 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012000 	.word	0x40012000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a5c      	ldr	r2, [pc, #368]	; (80012d8 <HAL_I2C_MspInit+0x190>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12d      	bne.n	80011c6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a5a      	ldr	r2, [pc, #360]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b58      	ldr	r3, [pc, #352]	; (80012dc <HAL_I2C_MspInit+0x194>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001198:	2304      	movs	r3, #4
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	484f      	ldr	r0, [pc, #316]	; (80012e0 <HAL_I2C_MspInit+0x198>)
 80011a4:	f000 ff66 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	4a4a      	ldr	r2, [pc, #296]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80011b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b6:	6413      	str	r3, [r2, #64]	; 0x40
 80011b8:	4b48      	ldr	r3, [pc, #288]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011c4:	e083      	b.n	80012ce <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a46      	ldr	r2, [pc, #280]	; (80012e4 <HAL_I2C_MspInit+0x19c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d12d      	bne.n	800122c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a40      	ldr	r2, [pc, #256]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f2:	2312      	movs	r3, #18
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011fe:	2304      	movs	r3, #4
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <HAL_I2C_MspInit+0x198>)
 800120a:	f000 ff33 	bl	8002074 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a31      	ldr	r2, [pc, #196]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
}
 800122a:	e050      	b.n	80012ce <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_I2C_MspInit+0x1a0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d14b      	bne.n	80012ce <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_I2C_MspInit+0x194>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a27      	ldr	r2, [pc, #156]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a20      	ldr	r2, [pc, #128]	; (80012dc <HAL_I2C_MspInit+0x194>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_I2C_MspInit+0x194>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800126e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001278:	2301      	movs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001280:	2304      	movs	r3, #4
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	4818      	ldr	r0, [pc, #96]	; (80012ec <HAL_I2C_MspInit+0x1a4>)
 800128c:	f000 fef2 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	2312      	movs	r3, #18
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129a:	2301      	movs	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012a2:	2304      	movs	r3, #4
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	4619      	mov	r1, r3
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <HAL_I2C_MspInit+0x1a8>)
 80012ae:	f000 fee1 	bl	8002074 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80012bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_I2C_MspInit+0x194>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	; 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40005800 	.word	0x40005800
 80012e8:	40005c00 	.word	0x40005c00
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_SPI_MspInit+0x150>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12d      	bne.n	8001372 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <HAL_SPI_MspInit+0x154>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a4a      	ldr	r2, [pc, #296]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b48      	ldr	r3, [pc, #288]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a43      	ldr	r2, [pc, #268]	; (8001448 <HAL_SPI_MspInit+0x154>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800134e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001360:	2305      	movs	r3, #5
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	4838      	ldr	r0, [pc, #224]	; (800144c <HAL_SPI_MspInit+0x158>)
 800136c:	f000 fe82 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001370:	e064      	b.n	800143c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a36      	ldr	r2, [pc, #216]	; (8001450 <HAL_SPI_MspInit+0x15c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d12d      	bne.n	80013d8 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	4a30      	ldr	r2, [pc, #192]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138a:	6453      	str	r3, [r2, #68]	; 0x44
 800138c:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <HAL_SPI_MspInit+0x154>)
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_SPI_MspInit+0x154>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a29      	ldr	r2, [pc, #164]	; (8001448 <HAL_SPI_MspInit+0x154>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_SPI_MspInit+0x154>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80013b4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80013c6:	2305      	movs	r3, #5
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4820      	ldr	r0, [pc, #128]	; (8001454 <HAL_SPI_MspInit+0x160>)
 80013d2:	f000 fe4f 	bl	8002074 <HAL_GPIO_Init>
}
 80013d6:	e031      	b.n	800143c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <HAL_SPI_MspInit+0x164>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12c      	bne.n	800143c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_SPI_MspInit+0x154>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_SPI_MspInit+0x154>)
 80013ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_SPI_MspInit+0x154>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_SPI_MspInit+0x154>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800141a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800142c:	2305      	movs	r3, #5
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <HAL_SPI_MspInit+0x168>)
 8001438:	f000 fe1c 	bl	8002074 <HAL_GPIO_Init>
}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40003800 	.word	0x40003800
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400
 8001450:	40013400 	.word	0x40013400
 8001454:	40021000 	.word	0x40021000
 8001458:	40015000 	.word	0x40015000
 800145c:	40021400 	.word	0x40021400

08001460 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001470:	d10d      	bne.n	800148e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_TIM_PWM_MspInit+0x3c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_TIM_PWM_MspInit+0x3c>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_TIM_PWM_MspInit+0x3c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d11d      	bne.n	80014fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80014de:	2304      	movs	r3, #4
 80014e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <HAL_TIM_MspPostInit+0x6c>)
 80014fa:	f000 fdbb 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_UART_MspInit+0x14c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d12c      	bne.n	800158c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a49      	ldr	r2, [pc, #292]	; (8001660 <HAL_UART_MspInit+0x150>)
 800153c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800154a:	623b      	str	r3, [r7, #32]
 800154c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a42      	ldr	r2, [pc, #264]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800156a:	2303      	movs	r3, #3
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800157a:	2308      	movs	r3, #8
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	4837      	ldr	r0, [pc, #220]	; (8001664 <HAL_UART_MspInit+0x154>)
 8001586:	f000 fd75 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800158a:	e063      	b.n	8001654 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a35      	ldr	r2, [pc, #212]	; (8001668 <HAL_UART_MspInit+0x158>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12d      	bne.n	80015f2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_UART_MspInit+0x150>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_UART_MspInit+0x150>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_UART_MspInit+0x150>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_UART_MspInit+0x150>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a29      	ldr	r2, [pc, #164]	; (8001660 <HAL_UART_MspInit+0x150>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_UART_MspInit+0x150>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80015ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e0:	2307      	movs	r3, #7
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	4820      	ldr	r0, [pc, #128]	; (800166c <HAL_UART_MspInit+0x15c>)
 80015ec:	f000 fd42 	bl	8002074 <HAL_GPIO_Init>
}
 80015f0:	e030      	b.n	8001654 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_UART_MspInit+0x160>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d12b      	bne.n	8001654 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001606:	f043 0320 	orr.w	r3, r3, #32
 800160a:	6453      	str	r3, [r2, #68]	; 0x44
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_UART_MspInit+0x150>)
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_UART_MspInit+0x150>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_UART_MspInit+0x150>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_UART_MspInit+0x150>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8001634:	23c0      	movs	r3, #192	; 0xc0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001644:	2308      	movs	r3, #8
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_UART_MspInit+0x164>)
 8001650:	f000 fd10 	bl	8002074 <HAL_GPIO_Init>
}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40007c00 	.word	0x40007c00
 8001660:	40023800 	.word	0x40023800
 8001664:	40021000 	.word	0x40021000
 8001668:	40004800 	.word	0x40004800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40011400 	.word	0x40011400
 8001674:	40020800 	.word	0x40020800

08001678 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001698:	d13f      	bne.n	800171a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_PCD_MspInit+0xac>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a20      	ldr	r2, [pc, #128]	; (8001724 <HAL_PCD_MspInit+0xac>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_PCD_MspInit+0xac>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4817      	ldr	r0, [pc, #92]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 80016cc:	f000 fcd2 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016e2:	230a      	movs	r3, #10
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	480e      	ldr	r0, [pc, #56]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 80016ee:	f000 fcc1 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_PCD_MspInit+0xac>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_PCD_MspInit+0xac>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	6353      	str	r3, [r2, #52]	; 0x34
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_PCD_MspInit+0xac>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_PCD_MspInit+0xac>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_PCD_MspInit+0xac>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	2036      	movs	r0, #54	; 0x36
 8001742:	f000 fc6d 	bl	8002020 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001746:	2036      	movs	r0, #54	; 0x36
 8001748:	f000 fc86 	bl	8002058 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_InitTick+0xa0>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_InitTick+0xa0>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_InitTick+0xa0>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001768:	f107 0210 	add.w	r2, r7, #16
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fd92 	bl	800329c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001778:	f001 fd68 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 800177c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <HAL_InitTick+0xa4>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0c9b      	lsrs	r3, r3, #18
 8001788:	3b01      	subs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_InitTick+0xa8>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_InitTick+0xac>)
 8001790:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_InitTick+0xa8>)
 8001794:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001798:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_InitTick+0xa8>)
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_InitTick+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_InitTick+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <HAL_InitTick+0xa8>)
 80017ae:	f001 fe30 	bl	8003412 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d104      	bne.n	80017c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <HAL_InitTick+0xa8>)
 80017ba:	f001 fe83 	bl	80034c4 <HAL_TIM_Base_Start_IT>
 80017be:	4603      	mov	r3, r0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	431bde83 	.word	0x431bde83
 80017d4:	20005758 	.word	0x20005758
 80017d8:	40001000 	.word	0x40001000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM6_DAC_IRQHandler+0x10>)
 800180e:	f001 ff18 	bl	8003642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20005758 	.word	0x20005758

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f005 ff7e 	bl	800774c <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20030000 	.word	0x20030000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000094 	.word	0x20000094
 8001884:	200057f8 	.word	0x200057f8

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c8:	4c0b      	ldr	r4, [pc, #44]	; (80018f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffd7 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f005 ff3d 	bl	8007758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7fe fe5b 	bl	8000598 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018f0:	0800825c 	.word	0x0800825c
  ldr r2, =_sbss
 80018f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018f8:	200057f4 	.word	0x200057f4

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 fb6e 	bl	800200a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f7ff fefc 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fb98 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	200057a0 	.word	0x200057a0

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200057a0 	.word	0x200057a0

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008

080019cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e033      	b.n	8001a4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fb68 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a12:	f023 0302 	bic.w	r3, r3, #2
 8001a16:	f043 0202 	orr.w	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f94a 	bl	8001cb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3a:	e001      	b.n	8001a40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1c>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e113      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x244>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d925      	bls.n	8001acc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68d9      	ldr	r1, [r3, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	3b1e      	subs	r3, #30
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68d9      	ldr	r1, [r3, #12]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4403      	add	r3, r0
 8001abe:	3b1e      	subs	r3, #30
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	e022      	b.n	8001b12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	400a      	ands	r2, r1
 8001aee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6919      	ldr	r1, [r3, #16]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4403      	add	r3, r0
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d824      	bhi.n	8001b64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b05      	subs	r3, #5
 8001b2c:	221f      	movs	r2, #31
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	3b05      	subs	r3, #5
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
 8001b62:	e04c      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d824      	bhi.n	8001bb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b23      	subs	r3, #35	; 0x23
 8001b7e:	221f      	movs	r2, #31
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43da      	mvns	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b23      	subs	r3, #35	; 0x23
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb4:	e023      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b41      	subs	r3, #65	; 0x41
 8001bc8:	221f      	movs	r2, #31
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b41      	subs	r3, #65	; 0x41
 8001bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_ADC_ConfigChannel+0x250>)
 8001c00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_ADC_ConfigChannel+0x254>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d10f      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1d8>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b12      	cmp	r3, #18
 8001c12:	d10b      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_ADC_ConfigChannel+0x254>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12b      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x23a>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_ADC_ConfigChannel+0x258>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d003      	beq.n	8001c48 <HAL_ADC_ConfigChannel+0x1f4>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b11      	cmp	r3, #17
 8001c46:	d122      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <HAL_ADC_ConfigChannel+0x258>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d111      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_ADC_ConfigChannel+0x25c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_ADC_ConfigChannel+0x260>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	0c9a      	lsrs	r2, r3, #18
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f9      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	10000012 	.word	0x10000012
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	431bde83 	.word	0x431bde83

08001cb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc0:	4b79      	ldr	r3, [pc, #484]	; (8001ea8 <ADC_Init+0x1f0>)
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	021a      	lsls	r2, r3, #8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6899      	ldr	r1, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	4a58      	ldr	r2, [pc, #352]	; (8001eac <ADC_Init+0x1f4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d022      	beq.n	8001d96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6899      	ldr	r1, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	e00f      	b.n	8001db6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0202 	bic.w	r2, r2, #2
 8001dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6899      	ldr	r1, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7e1b      	ldrb	r3, [r3, #24]
 8001dd0:	005a      	lsls	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	035a      	lsls	r2, r3, #13
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	e007      	b.n	8001e2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	051a      	lsls	r2, r3, #20
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e6e:	025a      	lsls	r2, r3, #9
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	029a      	lsls	r2, r3, #10
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	609a      	str	r2, [r3, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40012300 	.word	0x40012300
 8001eac:	0f000001 	.word	0x0f000001

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff4c 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002032:	f7ff ff61 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002036:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f7ff ffb1 	bl	8001fa4 <NVIC_EncodePriority>
 8002042:	4602      	mov	r2, r0
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff80 	bl	8001f50 <__NVIC_SetPriority>
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff54 	bl	8001f14 <__NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e177      	b.n	8002380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8166 	bne.w	800237a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80c0 	beq.w	800237a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b66      	ldr	r3, [pc, #408]	; (8002398 <HAL_GPIO_Init+0x324>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a65      	ldr	r2, [pc, #404]	; (8002398 <HAL_GPIO_Init+0x324>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_GPIO_Init+0x324>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a61      	ldr	r2, [pc, #388]	; (800239c <HAL_GPIO_Init+0x328>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_GPIO_Init+0x32c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d037      	beq.n	80022b2 <HAL_GPIO_Init+0x23e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a57      	ldr	r2, [pc, #348]	; (80023a4 <HAL_GPIO_Init+0x330>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d031      	beq.n	80022ae <HAL_GPIO_Init+0x23a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a56      	ldr	r2, [pc, #344]	; (80023a8 <HAL_GPIO_Init+0x334>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <HAL_GPIO_Init+0x236>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a55      	ldr	r2, [pc, #340]	; (80023ac <HAL_GPIO_Init+0x338>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x232>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <HAL_GPIO_Init+0x33c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x22e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a53      	ldr	r2, [pc, #332]	; (80023b4 <HAL_GPIO_Init+0x340>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x22a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <HAL_GPIO_Init+0x344>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x226>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a51      	ldr	r2, [pc, #324]	; (80023bc <HAL_GPIO_Init+0x348>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x222>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a50      	ldr	r2, [pc, #320]	; (80023c0 <HAL_GPIO_Init+0x34c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x21e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4f      	ldr	r2, [pc, #316]	; (80023c4 <HAL_GPIO_Init+0x350>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x21a>
 800228a:	2309      	movs	r3, #9
 800228c:	e012      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800228e:	230a      	movs	r3, #10
 8002290:	e010      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 8002292:	2308      	movs	r3, #8
 8002294:	e00e      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 8002296:	2307      	movs	r3, #7
 8002298:	e00c      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800229a:	2306      	movs	r3, #6
 800229c:	e00a      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800229e:	2305      	movs	r3, #5
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c4:	4935      	ldr	r1, [pc, #212]	; (800239c <HAL_GPIO_Init+0x328>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_GPIO_Init+0x354>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f6:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_GPIO_Init+0x354>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022fc:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_GPIO_Init+0x354>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002320:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_GPIO_Init+0x354>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f ae84 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40022400 	.word	0x40022400
 80023c8:	40013c00 	.word	0x40013c00

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e12b      	b.n	800266a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fe8e 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2224      	movs	r2, #36	; 0x24
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002464:	f000 fef2 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 8002468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4a81      	ldr	r2, [pc, #516]	; (8002674 <HAL_I2C_Init+0x274>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d807      	bhi.n	8002484 <HAL_I2C_Init+0x84>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a80      	ldr	r2, [pc, #512]	; (8002678 <HAL_I2C_Init+0x278>)
 8002478:	4293      	cmp	r3, r2
 800247a:	bf94      	ite	ls
 800247c:	2301      	movls	r3, #1
 800247e:	2300      	movhi	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e006      	b.n	8002492 <HAL_I2C_Init+0x92>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a7d      	ldr	r2, [pc, #500]	; (800267c <HAL_I2C_Init+0x27c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	bf94      	ite	ls
 800248c:	2301      	movls	r3, #1
 800248e:	2300      	movhi	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0e7      	b.n	800266a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a78      	ldr	r2, [pc, #480]	; (8002680 <HAL_I2C_Init+0x280>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a6a      	ldr	r2, [pc, #424]	; (8002674 <HAL_I2C_Init+0x274>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d802      	bhi.n	80024d4 <HAL_I2C_Init+0xd4>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3301      	adds	r3, #1
 80024d2:	e009      	b.n	80024e8 <HAL_I2C_Init+0xe8>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_I2C_Init+0x284>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	3301      	adds	r3, #1
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	495c      	ldr	r1, [pc, #368]	; (8002674 <HAL_I2C_Init+0x274>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d819      	bhi.n	800253c <HAL_I2C_Init+0x13c>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e59      	subs	r1, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fbb1 f3f3 	udiv	r3, r1, r3
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	f640 73fc 	movw	r3, #4092	; 0xffc
 800251c:	400b      	ands	r3, r1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_I2C_Init+0x138>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e59      	subs	r1, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002536:	e051      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 8002538:	2304      	movs	r3, #4
 800253a:	e04f      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <HAL_I2C_Init+0x168>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e012      	b.n	800258e <HAL_I2C_Init+0x18e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Init+0x196>
 8002592:	2301      	movs	r3, #1
 8002594:	e022      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <HAL_I2C_Init+0x1bc>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1e58      	subs	r0, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	440b      	add	r3, r1
 80025ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ba:	e00f      	b.n	80025dc <HAL_I2C_Init+0x1dc>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	0099      	lsls	r1, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	6809      	ldr	r1, [r1, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800260a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6911      	ldr	r1, [r2, #16]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	430b      	orrs	r3, r1
 800261e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	000186a0 	.word	0x000186a0
 8002678:	001e847f 	.word	0x001e847f
 800267c:	003d08ff 	.word	0x003d08ff
 8002680:	431bde83 	.word	0x431bde83
 8002684:	10624dd3 	.word	0x10624dd3

08002688 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	d129      	bne.n	80026f2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2224      	movs	r2, #36	; 0x24
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0210 	bic.w	r2, r2, #16
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d12a      	bne.n	8002770 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2224      	movs	r2, #36	; 0x24
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800273a:	89fb      	ldrh	r3, [r7, #14]
 800273c:	f023 030f 	bic.w	r3, r3, #15
 8002740:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b29a      	uxth	r2, r3
 8002746:	89fb      	ldrh	r3, [r7, #14]
 8002748:	4313      	orrs	r3, r2
 800274a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	89fa      	ldrh	r2, [r7, #14]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800277e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002780:	b08f      	sub	sp, #60	; 0x3c
 8002782:	af0a      	add	r7, sp, #40	; 0x28
 8002784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e10f      	b.n	80029b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe ff64 	bl	8001678 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2203      	movs	r2, #3
 80027b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 ff81 	bl	80046d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	687e      	ldr	r6, [r7, #4]
 80027dc:	466d      	mov	r5, sp
 80027de:	f106 0410 	add.w	r4, r6, #16
 80027e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f2:	1d33      	adds	r3, r6, #4
 80027f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	f001 ff0c 	bl	8004614 <USB_CoreInit>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0d0      	b.n	80029b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f001 ff6f 	bl	80046f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e04a      	b.n	80028b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	333d      	adds	r3, #61	; 0x3d
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	333c      	adds	r3, #60	; 0x3c
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	b298      	uxth	r0, r3
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3342      	adds	r3, #66	; 0x42
 800285c:	4602      	mov	r2, r0
 800285e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	333f      	adds	r3, #63	; 0x3f
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3344      	adds	r3, #68	; 0x44
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3348      	adds	r3, #72	; 0x48
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3350      	adds	r3, #80	; 0x50
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	3301      	adds	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3af      	bcc.n	8002820 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e044      	b.n	8002950 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	3301      	adds	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3b5      	bcc.n	80028c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	687e      	ldr	r6, [r7, #4]
 8002962:	466d      	mov	r5, sp
 8002964:	f106 0410 	add.w	r4, r6, #16
 8002968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002970:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002974:	e885 0003 	stmia.w	r5, {r0, r1}
 8002978:	1d33      	adds	r3, r6, #4
 800297a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297c:	6838      	ldr	r0, [r7, #0]
 800297e:	f001 ff07 	bl	8004790 <USB_DevInit>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e00d      	b.n	80029b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 f8b2 	bl	8004b12 <USB_DevDisconnect>

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e264      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d075      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	4ba3      	ldr	r3, [pc, #652]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4ba0      	ldr	r3, [pc, #640]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b9d      	ldr	r3, [pc, #628]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	4b99      	ldr	r3, [pc, #612]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05b      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x108>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d157      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e23f      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x74>
 8002a1e:	4b91      	ldr	r3, [pc, #580]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a90      	ldr	r2, [pc, #576]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x98>
 8002a36:	4b8b      	ldr	r3, [pc, #556]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a8a      	ldr	r2, [pc, #552]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b88      	ldr	r3, [pc, #544]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a87      	ldr	r2, [pc, #540]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a50:	4b84      	ldr	r3, [pc, #528]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a83      	ldr	r2, [pc, #524]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a80      	ldr	r2, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe ff7c 	bl	800196c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe ff78 	bl	800196c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e204      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xc0>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe ff68 	bl	800196c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe ff64 	bl	800196c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1f0      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0xe8>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1c4      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4952      	ldr	r1, [pc, #328]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCC_OscConfig+0x2b0>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe ff1d 	bl	800196c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe ff19 	bl	800196c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1a5      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4940      	ldr	r1, [pc, #256]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCC_OscConfig+0x2b0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fefc 	bl	800196c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe fef8 	bl	800196c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e184      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d030      	beq.n	8002c04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_RCC_OscConfig+0x2b4>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fedc 	bl	800196c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fed8 	bl	800196c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e164      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x200>
 8002bd6:	e015      	b.n	8002c04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_OscConfig+0x2b4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fec5 	bl	800196c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe fec1 	bl	800196c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e14d      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a0 	beq.w	8002d52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x2b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_RCC_OscConfig+0x2b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_RCC_OscConfig+0x2b8>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fe87 	bl	800196c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e011      	b.n	8002c86 <HAL_RCC_OscConfig+0x2ce>
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	42470000 	.word	0x42470000
 8002c6c:	42470e80 	.word	0x42470e80
 8002c70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fe fe7a 	bl	800196c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e106      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <HAL_RCC_OscConfig+0x4e4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2f0>
 8002c9a:	4b81      	ldr	r3, [pc, #516]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a80      	ldr	r2, [pc, #512]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	e01c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x32a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x312>
 8002cb0:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	4a7a      	ldr	r2, [pc, #488]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbc:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a77      	ldr	r2, [pc, #476]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x32a>
 8002cca:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a74      	ldr	r2, [pc, #464]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd6:	4b72      	ldr	r3, [pc, #456]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a71      	ldr	r2, [pc, #452]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fe3f 	bl	800196c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fe3b 	bl	800196c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0c5      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ee      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x33a>
 8002d14:	e014      	b.n	8002d40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fe29 	bl	800196c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fe25 	bl	800196c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0af      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ee      	bne.n	8002d1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d105      	bne.n	8002d52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d46:	4b56      	ldr	r3, [pc, #344]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a55      	ldr	r2, [pc, #340]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 809b 	beq.w	8002e92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d05c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d141      	bne.n	8002df4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <HAL_RCC_OscConfig+0x4ec>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fdf9 	bl	800196c <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe fdf5 	bl	800196c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e081      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	019b      	lsls	r3, r3, #6
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <HAL_RCC_OscConfig+0x4ec>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fdce 	bl	800196c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fdca 	bl	800196c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e056      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x41c>
 8002df2:	e04e      	b.n	8002e92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCC_OscConfig+0x4ec>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fdb7 	bl	800196c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fdb3 	bl	800196c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03f      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e14:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x44a>
 8002e20:	e037      	b.n	8002e92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e032      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_RCC_OscConfig+0x4e8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d028      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d121      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d11a      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d111      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	3b01      	subs	r3, #1
 8002e78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470060 	.word	0x42470060

08002ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0cc      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d90c      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b65      	ldr	r3, [pc, #404]	; (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0b8      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002efc:	4b59      	ldr	r3, [pc, #356]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a58      	ldr	r2, [pc, #352]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f14:	4b53      	ldr	r3, [pc, #332]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a52      	ldr	r2, [pc, #328]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f20:	4b50      	ldr	r3, [pc, #320]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	494d      	ldr	r1, [pc, #308]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d044      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d119      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e07f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d003      	beq.n	8002f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e067      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b37      	ldr	r3, [pc, #220]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4934      	ldr	r1, [pc, #208]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fe fce8 	bl	800196c <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fe fce4 	bl	800196c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e04f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d20c      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e032      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4916      	ldr	r1, [pc, #88]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	490e      	ldr	r1, [pc, #56]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800302e:	f000 f821 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	490a      	ldr	r1, [pc, #40]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fb6c 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00
 8003064:	40023800 	.word	0x40023800
 8003068:	080081a0 	.word	0x080081a0
 800306c:	20000000 	.word	0x20000000
 8003070:	20000004 	.word	0x20000004

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	2300      	movs	r3, #0
 8003086:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308c:	4b67      	ldr	r3, [pc, #412]	; (800322c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d00d      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003098:	2b08      	cmp	r3, #8
 800309a:	f200 80bd 	bhi.w	8003218 <HAL_RCC_GetSysClockFreq+0x1a4>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x34>
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x3a>
 80030a6:	e0b7      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b61      	ldr	r3, [pc, #388]	; (8003230 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030aa:	60bb      	str	r3, [r7, #8]
       break;
 80030ac:	e0b7      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ae:	4b60      	ldr	r3, [pc, #384]	; (8003230 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030b0:	60bb      	str	r3, [r7, #8]
      break;
 80030b2:	e0b4      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b4:	4b5d      	ldr	r3, [pc, #372]	; (800322c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030be:	4b5b      	ldr	r3, [pc, #364]	; (800322c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04d      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	461a      	mov	r2, r3
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	ea02 0800 	and.w	r8, r2, r0
 80030e2:	ea03 0901 	and.w	r9, r3, r1
 80030e6:	4640      	mov	r0, r8
 80030e8:	4649      	mov	r1, r9
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	014b      	lsls	r3, r1, #5
 80030f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030f8:	0142      	lsls	r2, r0, #5
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	ebb0 0008 	subs.w	r0, r0, r8
 8003102:	eb61 0109 	sbc.w	r1, r1, r9
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	018b      	lsls	r3, r1, #6
 8003110:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003114:	0182      	lsls	r2, r0, #6
 8003116:	1a12      	subs	r2, r2, r0
 8003118:	eb63 0301 	sbc.w	r3, r3, r1
 800311c:	f04f 0000 	mov.w	r0, #0
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	00d9      	lsls	r1, r3, #3
 8003126:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800312a:	00d0      	lsls	r0, r2, #3
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	eb12 0208 	adds.w	r2, r2, r8
 8003134:	eb43 0309 	adc.w	r3, r3, r9
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	0299      	lsls	r1, r3, #10
 8003142:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003146:	0290      	lsls	r0, r2, #10
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	461a      	mov	r2, r3
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f7fd f8a2 	bl	80002a0 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e04a      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003166:	4b31      	ldr	r3, [pc, #196]	; (800322c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	099b      	lsrs	r3, r3, #6
 800316c:	461a      	mov	r2, r3
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	ea02 0400 	and.w	r4, r2, r0
 800317e:	ea03 0501 	and.w	r5, r3, r1
 8003182:	4620      	mov	r0, r4
 8003184:	4629      	mov	r1, r5
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	014b      	lsls	r3, r1, #5
 8003190:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003194:	0142      	lsls	r2, r0, #5
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	1b00      	subs	r0, r0, r4
 800319c:	eb61 0105 	sbc.w	r1, r1, r5
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	018b      	lsls	r3, r1, #6
 80031aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031ae:	0182      	lsls	r2, r0, #6
 80031b0:	1a12      	subs	r2, r2, r0
 80031b2:	eb63 0301 	sbc.w	r3, r3, r1
 80031b6:	f04f 0000 	mov.w	r0, #0
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	00d9      	lsls	r1, r3, #3
 80031c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031c4:	00d0      	lsls	r0, r2, #3
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	1912      	adds	r2, r2, r4
 80031cc:	eb45 0303 	adc.w	r3, r5, r3
 80031d0:	f04f 0000 	mov.w	r0, #0
 80031d4:	f04f 0100 	mov.w	r1, #0
 80031d8:	0299      	lsls	r1, r3, #10
 80031da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031de:	0290      	lsls	r0, r2, #10
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	f7fd f856 	bl	80002a0 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	3301      	adds	r3, #1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	60bb      	str	r3, [r7, #8]
      break;
 8003216:	e002      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800321a:	60bb      	str	r3, [r7, #8]
      break;
 800321c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800321e:	68bb      	ldr	r3, [r7, #8]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	00f42400 	.word	0x00f42400

08003234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_RCC_GetHCLKFreq+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000000 	.word	0x20000000

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003250:	f7ff fff0 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	0a9b      	lsrs	r3, r3, #10
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4903      	ldr	r1, [pc, #12]	; (8003270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	080081b0 	.word	0x080081b0

08003274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003278:	f7ff ffdc 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0b5b      	lsrs	r3, r3, #13
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	080081b0 	.word	0x080081b0

0800329c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	220f      	movs	r2, #15
 80032aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0203 	and.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	08db      	lsrs	r3, r3, #3
 80032d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_RCC_GetClockConfig+0x60>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 020f 	and.w	r2, r3, #15
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07b      	b.n	800340a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003322:	d009      	beq.n	8003338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
 800332a:	e005      	b.n	8003338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd ffce 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	ea42 0103 	orr.w	r1, r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0104 	and.w	r1, r3, #4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f003 0210 	and.w	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e041      	b.n	80034a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f839 	bl	80034b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f000 fae9 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e04e      	b.n	800357a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a23      	ldr	r2, [pc, #140]	; (8003588 <HAL_TIM_Base_Start_IT+0xc4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d022      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d01d      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_TIM_Base_Start_IT+0xc8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_TIM_Base_Start_IT+0xcc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_TIM_Base_Start_IT+0xd0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_TIM_Base_Start_IT+0xd4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_TIM_Base_Start_IT+0xd8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d111      	bne.n	8003568 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d010      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	e007      	b.n	8003578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40010400 	.word	0x40010400
 800359c:	40014000 	.word	0x40014000
 80035a0:	40001800 	.word	0x40001800

080035a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e041      	b.n	800363a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd ff48 	bl	8001460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fa20 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d122      	bne.n	800369e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11b      	bne.n	800369e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f06f 0202 	mvn.w	r2, #2
 800366e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f9b1 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 800368a:	e005      	b.n	8003698 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f9a3 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9b4 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d122      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d11b      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0204 	mvn.w	r2, #4
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f987 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 80036de:	e005      	b.n	80036ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f979 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f98a 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d122      	bne.n	8003746 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11b      	bne.n	8003746 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0208 	mvn.w	r2, #8
 8003716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2204      	movs	r2, #4
 800371c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f95d 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003732:	e005      	b.n	8003740 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f94f 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f960 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b10      	cmp	r3, #16
 8003752:	d122      	bne.n	800379a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d11b      	bne.n	800379a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0210 	mvn.w	r2, #16
 800376a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2208      	movs	r2, #8
 8003770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f933 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003786:	e005      	b.n	8003794 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f925 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f936 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10e      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0201 	mvn.w	r2, #1
 80037be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fc39 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d10e      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d107      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fbf1 	bl	8003fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d10e      	bne.n	800381e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d107      	bne.n	800381e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8fb 	bl	8003a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b20      	cmp	r3, #32
 800382a:	d10e      	bne.n	800384a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b20      	cmp	r3, #32
 8003838:	d107      	bne.n	800384a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f06f 0220 	mvn.w	r2, #32
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fbbb 	bl	8003fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800386e:	2302      	movs	r3, #2
 8003870:	e0ae      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	f200 809f 	bhi.w	80039c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080039c1 	.word	0x080039c1
 8003890:	080039c1 	.word	0x080039c1
 8003894:	080039c1 	.word	0x080039c1
 8003898:	080038fd 	.word	0x080038fd
 800389c:	080039c1 	.word	0x080039c1
 80038a0:	080039c1 	.word	0x080039c1
 80038a4:	080039c1 	.word	0x080039c1
 80038a8:	0800393f 	.word	0x0800393f
 80038ac:	080039c1 	.word	0x080039c1
 80038b0:	080039c1 	.word	0x080039c1
 80038b4:	080039c1 	.word	0x080039c1
 80038b8:	0800397f 	.word	0x0800397f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f950 	bl	8003b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0204 	bic.w	r2, r2, #4
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	619a      	str	r2, [r3, #24]
      break;
 80038fa:	e064      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f9a0 	bl	8003c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	619a      	str	r2, [r3, #24]
      break;
 800393c:	e043      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f9f5 	bl	8003d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0208 	orr.w	r2, r2, #8
 8003958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	61da      	str	r2, [r3, #28]
      break;
 800397c:	e023      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fa49 	bl	8003e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	021a      	lsls	r2, r3, #8
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	61da      	str	r2, [r3, #28]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
      break;
 80039c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a40      	ldr	r2, [pc, #256]	; (8003b3c <TIM_Base_SetConfig+0x114>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d00f      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3d      	ldr	r2, [pc, #244]	; (8003b40 <TIM_Base_SetConfig+0x118>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3c      	ldr	r2, [pc, #240]	; (8003b44 <TIM_Base_SetConfig+0x11c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3b      	ldr	r2, [pc, #236]	; (8003b48 <TIM_Base_SetConfig+0x120>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3a      	ldr	r2, [pc, #232]	; (8003b4c <TIM_Base_SetConfig+0x124>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2f      	ldr	r2, [pc, #188]	; (8003b3c <TIM_Base_SetConfig+0x114>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d027      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2c      	ldr	r2, [pc, #176]	; (8003b40 <TIM_Base_SetConfig+0x118>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d023      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <TIM_Base_SetConfig+0x11c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01f      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2a      	ldr	r2, [pc, #168]	; (8003b48 <TIM_Base_SetConfig+0x120>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <TIM_Base_SetConfig+0x124>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d017      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <TIM_Base_SetConfig+0x128>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a27      	ldr	r2, [pc, #156]	; (8003b54 <TIM_Base_SetConfig+0x12c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a26      	ldr	r2, [pc, #152]	; (8003b58 <TIM_Base_SetConfig+0x130>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <TIM_Base_SetConfig+0x134>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <TIM_Base_SetConfig+0x138>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <TIM_Base_SetConfig+0x13c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <TIM_Base_SetConfig+0x114>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0xf8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <TIM_Base_SetConfig+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d103      	bne.n	8003b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	615a      	str	r2, [r3, #20]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800
 8003b5c:	40001800 	.word	0x40001800
 8003b60:	40001c00 	.word	0x40001c00
 8003b64:	40002000 	.word	0x40002000

08003b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <TIM_OC1_SetConfig+0xd8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC1_SetConfig+0x64>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <TIM_OC1_SetConfig+0xdc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10c      	bne.n	8003be6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0308 	bic.w	r3, r3, #8
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <TIM_OC1_SetConfig+0xd8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC1_SetConfig+0x8e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <TIM_OC1_SetConfig+0xdc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d111      	bne.n	8003c1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40010400 	.word	0x40010400

08003c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f023 0210 	bic.w	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0320 	bic.w	r3, r3, #32
 8003c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <TIM_OC2_SetConfig+0xe4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC2_SetConfig+0x68>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <TIM_OC2_SetConfig+0xe8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10d      	bne.n	8003ccc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <TIM_OC2_SetConfig+0xe4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_OC2_SetConfig+0x94>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <TIM_OC2_SetConfig+0xe8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d113      	bne.n	8003d04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010400 	.word	0x40010400

08003d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <TIM_OC3_SetConfig+0xe0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_OC3_SetConfig+0x66>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10d      	bne.n	8003db6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <TIM_OC3_SetConfig+0xe0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_OC3_SetConfig+0x92>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d113      	bne.n	8003dee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40010400 	.word	0x40010400

08003e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <TIM_OC4_SetConfig+0xa4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC4_SetConfig+0x68>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <TIM_OC4_SetConfig+0xa8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d109      	bne.n	8003e98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e05a      	b.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d01d      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1a      	ldr	r2, [pc, #104]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10c      	bne.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40001800 	.word	0x40001800

08003fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e03f      	b.n	800407a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd fa7e 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800402a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f929 	bl	8004284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b08a      	sub	sp, #40	; 0x28
 8004086:	af02      	add	r7, sp, #8
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d17c      	bne.n	800419c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_UART_Transmit+0x2c>
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e075      	b.n	800419e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Transmit+0x3e>
 80040bc:	2302      	movs	r3, #2
 80040be:	e06e      	b.n	800419e <HAL_UART_Transmit+0x11c>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2221      	movs	r2, #33	; 0x21
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040d6:	f7fd fc49 	bl	800196c <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	88fa      	ldrh	r2, [r7, #6]
 80040e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f0:	d108      	bne.n	8004104 <HAL_UART_Transmit+0x82>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	e003      	b.n	800410c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004114:	e02a      	b.n	800416c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f840 	bl	80041a6 <UART_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e036      	b.n	800419e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	3302      	adds	r3, #2
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e007      	b.n	800415e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1cf      	bne.n	8004116 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2140      	movs	r1, #64	; 0x40
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f810 	bl	80041a6 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e006      	b.n	800419e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b090      	sub	sp, #64	; 0x40
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b6:	e050      	b.n	800425a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d04c      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041c6:	f7fd fbd1 	bl	800196c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d241      	bcs.n	800425a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041f6:	637a      	str	r2, [r7, #52]	; 0x34
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	613b      	str	r3, [r7, #16]
   return(result);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800422a:	623a      	str	r2, [r7, #32]
 800422c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	69f9      	ldr	r1, [r7, #28]
 8004230:	6a3a      	ldr	r2, [r7, #32]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	61bb      	str	r3, [r7, #24]
   return(result);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e00f      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	429a      	cmp	r2, r3
 8004276:	d09f      	beq.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3740      	adds	r7, #64	; 0x40
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	b09f      	sub	sp, #124	; 0x7c
 800428a:	af00      	add	r7, sp, #0
 800428c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	68d9      	ldr	r1, [r3, #12]
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	ea40 0301 	orr.w	r3, r0, r1
 80042a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042c8:	f021 010c 	bic.w	r1, r1, #12
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042d2:	430b      	orrs	r3, r1
 80042d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e2:	6999      	ldr	r1, [r3, #24]
 80042e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	ea40 0301 	orr.w	r3, r0, r1
 80042ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4bc5      	ldr	r3, [pc, #788]	; (8004608 <UART_SetConfig+0x384>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d004      	beq.n	8004302 <UART_SetConfig+0x7e>
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4bc3      	ldr	r3, [pc, #780]	; (800460c <UART_SetConfig+0x388>)
 80042fe:	429a      	cmp	r2, r3
 8004300:	d103      	bne.n	800430a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004302:	f7fe ffb7 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 8004306:	6778      	str	r0, [r7, #116]	; 0x74
 8004308:	e002      	b.n	8004310 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430a:	f7fe ff9f 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 800430e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004318:	f040 80b6 	bne.w	8004488 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800431c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431e:	461c      	mov	r4, r3
 8004320:	f04f 0500 	mov.w	r5, #0
 8004324:	4622      	mov	r2, r4
 8004326:	462b      	mov	r3, r5
 8004328:	1891      	adds	r1, r2, r2
 800432a:	6439      	str	r1, [r7, #64]	; 0x40
 800432c:	415b      	adcs	r3, r3
 800432e:	647b      	str	r3, [r7, #68]	; 0x44
 8004330:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004334:	1912      	adds	r2, r2, r4
 8004336:	eb45 0303 	adc.w	r3, r5, r3
 800433a:	f04f 0000 	mov.w	r0, #0
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	00d9      	lsls	r1, r3, #3
 8004344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004348:	00d0      	lsls	r0, r2, #3
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	1911      	adds	r1, r2, r4
 8004350:	6639      	str	r1, [r7, #96]	; 0x60
 8004352:	416b      	adcs	r3, r5
 8004354:	667b      	str	r3, [r7, #100]	; 0x64
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	461a      	mov	r2, r3
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	1891      	adds	r1, r2, r2
 8004362:	63b9      	str	r1, [r7, #56]	; 0x38
 8004364:	415b      	adcs	r3, r3
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800436c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004370:	f7fb ff96 	bl	80002a0 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4ba5      	ldr	r3, [pc, #660]	; (8004610 <UART_SetConfig+0x38c>)
 800437a:	fba3 2302 	umull	r2, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	011e      	lsls	r6, r3, #4
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	461c      	mov	r4, r3
 8004386:	f04f 0500 	mov.w	r5, #0
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	1891      	adds	r1, r2, r2
 8004390:	6339      	str	r1, [r7, #48]	; 0x30
 8004392:	415b      	adcs	r3, r3
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
 8004396:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800439a:	1912      	adds	r2, r2, r4
 800439c:	eb45 0303 	adc.w	r3, r5, r3
 80043a0:	f04f 0000 	mov.w	r0, #0
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	00d9      	lsls	r1, r3, #3
 80043aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ae:	00d0      	lsls	r0, r2, #3
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	1911      	adds	r1, r2, r4
 80043b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80043b8:	416b      	adcs	r3, r5
 80043ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	461a      	mov	r2, r3
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	1891      	adds	r1, r2, r2
 80043c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80043ca:	415b      	adcs	r3, r3
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043d6:	f7fb ff63 	bl	80002a0 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b8c      	ldr	r3, [pc, #560]	; (8004610 <UART_SetConfig+0x38c>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	; 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3332      	adds	r3, #50	; 0x32
 80043f2:	4a87      	ldr	r2, [pc, #540]	; (8004610 <UART_SetConfig+0x38c>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004400:	441e      	add	r6, r3
 8004402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004404:	4618      	mov	r0, r3
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	1894      	adds	r4, r2, r2
 8004410:	623c      	str	r4, [r7, #32]
 8004412:	415b      	adcs	r3, r3
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
 8004416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800441a:	1812      	adds	r2, r2, r0
 800441c:	eb41 0303 	adc.w	r3, r1, r3
 8004420:	f04f 0400 	mov.w	r4, #0
 8004424:	f04f 0500 	mov.w	r5, #0
 8004428:	00dd      	lsls	r5, r3, #3
 800442a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800442e:	00d4      	lsls	r4, r2, #3
 8004430:	4622      	mov	r2, r4
 8004432:	462b      	mov	r3, r5
 8004434:	1814      	adds	r4, r2, r0
 8004436:	653c      	str	r4, [r7, #80]	; 0x50
 8004438:	414b      	adcs	r3, r1
 800443a:	657b      	str	r3, [r7, #84]	; 0x54
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	461a      	mov	r2, r3
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	1891      	adds	r1, r2, r2
 8004448:	61b9      	str	r1, [r7, #24]
 800444a:	415b      	adcs	r3, r3
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004452:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004456:	f7fb ff23 	bl	80002a0 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4b6c      	ldr	r3, [pc, #432]	; (8004610 <UART_SetConfig+0x38c>)
 8004460:	fba3 1302 	umull	r1, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	3332      	adds	r3, #50	; 0x32
 8004472:	4a67      	ldr	r2, [pc, #412]	; (8004610 <UART_SetConfig+0x38c>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 0207 	and.w	r2, r3, #7
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4432      	add	r2, r6
 8004484:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004486:	e0b9      	b.n	80045fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800448a:	461c      	mov	r4, r3
 800448c:	f04f 0500 	mov.w	r5, #0
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	1891      	adds	r1, r2, r2
 8004496:	6139      	str	r1, [r7, #16]
 8004498:	415b      	adcs	r3, r3
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044a0:	1912      	adds	r2, r2, r4
 80044a2:	eb45 0303 	adc.w	r3, r5, r3
 80044a6:	f04f 0000 	mov.w	r0, #0
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	00d9      	lsls	r1, r3, #3
 80044b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b4:	00d0      	lsls	r0, r2, #3
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	eb12 0804 	adds.w	r8, r2, r4
 80044be:	eb43 0905 	adc.w	r9, r3, r5
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f04f 0100 	mov.w	r1, #0
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	008b      	lsls	r3, r1, #2
 80044d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044da:	0082      	lsls	r2, r0, #2
 80044dc:	4640      	mov	r0, r8
 80044de:	4649      	mov	r1, r9
 80044e0:	f7fb fede 	bl	80002a0 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4b49      	ldr	r3, [pc, #292]	; (8004610 <UART_SetConfig+0x38c>)
 80044ea:	fba3 2302 	umull	r2, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	011e      	lsls	r6, r3, #4
 80044f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f4:	4618      	mov	r0, r3
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	1894      	adds	r4, r2, r2
 8004500:	60bc      	str	r4, [r7, #8]
 8004502:	415b      	adcs	r3, r3
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800450a:	1812      	adds	r2, r2, r0
 800450c:	eb41 0303 	adc.w	r3, r1, r3
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	f04f 0500 	mov.w	r5, #0
 8004518:	00dd      	lsls	r5, r3, #3
 800451a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800451e:	00d4      	lsls	r4, r2, #3
 8004520:	4622      	mov	r2, r4
 8004522:	462b      	mov	r3, r5
 8004524:	1814      	adds	r4, r2, r0
 8004526:	64bc      	str	r4, [r7, #72]	; 0x48
 8004528:	414b      	adcs	r3, r1
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4618      	mov	r0, r3
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	008b      	lsls	r3, r1, #2
 8004540:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004544:	0082      	lsls	r2, r0, #2
 8004546:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800454a:	f7fb fea9 	bl	80002a0 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <UART_SetConfig+0x38c>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	; 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	3332      	adds	r3, #50	; 0x32
 8004566:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <UART_SetConfig+0x38c>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004572:	441e      	add	r6, r3
 8004574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004576:	4618      	mov	r0, r3
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	1894      	adds	r4, r2, r2
 8004582:	603c      	str	r4, [r7, #0]
 8004584:	415b      	adcs	r3, r3
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800458c:	1812      	adds	r2, r2, r0
 800458e:	eb41 0303 	adc.w	r3, r1, r3
 8004592:	f04f 0400 	mov.w	r4, #0
 8004596:	f04f 0500 	mov.w	r5, #0
 800459a:	00dd      	lsls	r5, r3, #3
 800459c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045a0:	00d4      	lsls	r4, r2, #3
 80045a2:	4622      	mov	r2, r4
 80045a4:	462b      	mov	r3, r5
 80045a6:	eb12 0a00 	adds.w	sl, r2, r0
 80045aa:	eb43 0b01 	adc.w	fp, r3, r1
 80045ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f04f 0100 	mov.w	r1, #0
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	008b      	lsls	r3, r1, #2
 80045c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045c6:	0082      	lsls	r2, r0, #2
 80045c8:	4650      	mov	r0, sl
 80045ca:	4659      	mov	r1, fp
 80045cc:	f7fb fe68 	bl	80002a0 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <UART_SetConfig+0x38c>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a09      	ldr	r2, [pc, #36]	; (8004610 <UART_SetConfig+0x38c>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4432      	add	r2, r6
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	377c      	adds	r7, #124	; 0x7c
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	40011000 	.word	0x40011000
 800460c:	40011400 	.word	0x40011400
 8004610:	51eb851f 	.word	0x51eb851f

08004614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004614:	b084      	sub	sp, #16
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	f107 001c 	add.w	r0, r7, #28
 8004622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2b01      	cmp	r3, #1
 800462a:	d122      	bne.n	8004672 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d105      	bne.n	8004666 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa82 	bl	8004b70 <USB_CoreReset>
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e01a      	b.n	80046a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa76 	bl	8004b70 <USB_CoreReset>
 8004684:	4603      	mov	r3, r0
 8004686:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
 800469a:	e005      	b.n	80046a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d10b      	bne.n	80046c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f043 0206 	orr.w	r2, r3, #6
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046d2:	b004      	add	sp, #16
 80046d4:	4770      	bx	lr

080046d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d115      	bne.n	8004746 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004726:	2001      	movs	r0, #1
 8004728:	f7fd f92c 	bl	8001984 <HAL_Delay>
      ms++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa0e 	bl	8004b54 <USB_GetMode>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	d01e      	beq.n	800477c <USB_SetCurrentMode+0x84>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b31      	cmp	r3, #49	; 0x31
 8004742:	d9f0      	bls.n	8004726 <USB_SetCurrentMode+0x2e>
 8004744:	e01a      	b.n	800477c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d115      	bne.n	8004778 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004758:	2001      	movs	r0, #1
 800475a:	f7fd f913 	bl	8001984 <HAL_Delay>
      ms++;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3301      	adds	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f9f5 	bl	8004b54 <USB_GetMode>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <USB_SetCurrentMode+0x84>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b31      	cmp	r3, #49	; 0x31
 8004774:	d9f0      	bls.n	8004758 <USB_SetCurrentMode+0x60>
 8004776:	e001      	b.n	800477c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e005      	b.n	8004788 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b32      	cmp	r3, #50	; 0x32
 8004780:	d101      	bne.n	8004786 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004790:	b084      	sub	sp, #16
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800479e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e009      	b.n	80047c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	3340      	adds	r3, #64	; 0x40
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	2200      	movs	r2, #0
 80047bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3301      	adds	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b0e      	cmp	r3, #14
 80047c8:	d9f2      	bls.n	80047b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11c      	bne.n	800480a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
 8004808:	e00b      	b.n	8004822 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004828:	461a      	mov	r2, r3
 800482a:	2300      	movs	r3, #0
 800482c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	4619      	mov	r1, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483c:	461a      	mov	r2, r3
 800483e:	680b      	ldr	r3, [r1, #0]
 8004840:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10c      	bne.n	8004862 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800484e:	2100      	movs	r1, #0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f945 	bl	8004ae0 <USB_SetDevSpeed>
 8004856:	e008      	b.n	800486a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004858:	2101      	movs	r1, #1
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f940 	bl	8004ae0 <USB_SetDevSpeed>
 8004860:	e003      	b.n	800486a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004862:	2103      	movs	r1, #3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f93b 	bl	8004ae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800486a:	2110      	movs	r1, #16
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f8f3 	bl	8004a58 <USB_FlushTxFifo>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f90f 	bl	8004aa0 <USB_FlushRxFifo>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	461a      	mov	r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	461a      	mov	r2, r3
 80048a0:	2300      	movs	r3, #0
 80048a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	461a      	mov	r2, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b0:	2300      	movs	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	e043      	b.n	800493e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048cc:	d118      	bne.n	8004900 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	461a      	mov	r2, r3
 80048e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e013      	b.n	8004912 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e008      	b.n	8004912 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	461a      	mov	r2, r3
 800490e:	2300      	movs	r3, #0
 8004910:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	461a      	mov	r2, r3
 8004932:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004936:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	3301      	adds	r3, #1
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	429a      	cmp	r2, r3
 8004944:	d3b7      	bcc.n	80048b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e043      	b.n	80049d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800495e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004962:	d118      	bne.n	8004996 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	461a      	mov	r2, r3
 8004978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e013      	b.n	80049a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	461a      	mov	r2, r3
 800498e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	e008      	b.n	80049a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	2300      	movs	r3, #0
 80049a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	2300      	movs	r3, #0
 80049b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	461a      	mov	r2, r3
 80049c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3301      	adds	r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d3b7      	bcc.n	800494c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f043 0210 	orr.w	r2, r3, #16
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <USB_DevInit+0x2c4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f043 0208 	orr.w	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a50:	b004      	add	sp, #16
 8004a52:	4770      	bx	lr
 8004a54:	803c3800 	.word	0x803c3800

08004a58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	019b      	lsls	r3, r3, #6
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <USB_FlushTxFifo+0x44>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e006      	b.n	8004a90 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d0f1      	beq.n	8004a72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	00030d40 	.word	0x00030d40

08004aa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	4a08      	ldr	r2, [pc, #32]	; (8004adc <USB_FlushRxFifo+0x3c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e006      	b.n	8004ad0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d0f1      	beq.n	8004ab2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	00030d40 	.word	0x00030d40

08004ae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b2c:	f023 0303 	bic.w	r3, r3, #3
 8004b30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0301 	and.w	r3, r3, #1
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <USB_CoreReset+0x60>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e01a      	b.n	8004bc2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	daf3      	bge.n	8004b7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <USB_CoreReset+0x60>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e006      	b.n	8004bc2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d0f1      	beq.n	8004ba4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	00030d40 	.word	0x00030d40

08004bd4 <__NVIC_SetPriority>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db0a      	blt.n	8004bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	490c      	ldr	r1, [pc, #48]	; (8004c20 <__NVIC_SetPriority+0x4c>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bfc:	e00a      	b.n	8004c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4908      	ldr	r1, [pc, #32]	; (8004c24 <__NVIC_SetPriority+0x50>)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	0112      	lsls	r2, r2, #4
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	440b      	add	r3, r1
 8004c12:	761a      	strb	r2, [r3, #24]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000e100 	.word	0xe000e100
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <SysTick_Handler+0x1c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c30:	f001 fd28 	bl	8006684 <xTaskGetSchedulerState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d001      	beq.n	8004c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c3a:	f002 fb0d 	bl	8007258 <xPortSysTickHandler>
  }
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	e000e010 	.word	0xe000e010

08004c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f06f 0004 	mvn.w	r0, #4
 8004c52:	f7ff ffbf 	bl	8004bd4 <__NVIC_SetPriority>
#endif
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c62:	f3ef 8305 	mrs	r3, IPSR
 8004c66:	603b      	str	r3, [r7, #0]
  return(result);
 8004c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c6e:	f06f 0305 	mvn.w	r3, #5
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	e00c      	b.n	8004c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <osKernelInitialize+0x44>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <osKernelInitialize+0x44>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	e002      	b.n	8004c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000098 	.word	0x20000098

08004ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004caa:	f3ef 8305 	mrs	r3, IPSR
 8004cae:	603b      	str	r3, [r7, #0]
  return(result);
 8004cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cb6:	f06f 0305 	mvn.w	r3, #5
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	e010      	b.n	8004ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <osKernelStart+0x48>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d109      	bne.n	8004cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004cc6:	f7ff ffbf 	bl	8004c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <osKernelStart+0x48>)
 8004ccc:	2202      	movs	r2, #2
 8004cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cd0:	f001 f87c 	bl	8005dcc <vTaskStartScheduler>
      stat = osOK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	e002      	b.n	8004ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ce0:	687b      	ldr	r3, [r7, #4]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000098 	.word	0x20000098

08004cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	; 0x38
 8004cf4:	af04      	add	r7, sp, #16
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d00:	f3ef 8305 	mrs	r3, IPSR
 8004d04:	617b      	str	r3, [r7, #20]
  return(result);
 8004d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d17e      	bne.n	8004e0a <osThreadNew+0x11a>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d07b      	beq.n	8004e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d16:	2318      	movs	r3, #24
 8004d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d045      	beq.n	8004db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <osThreadNew+0x48>
        name = attr->name;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <osThreadNew+0x6e>
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b38      	cmp	r3, #56	; 0x38
 8004d50:	d805      	bhi.n	8004d5e <osThreadNew+0x6e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <osThreadNew+0x72>
        return (NULL);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e054      	b.n	8004e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00e      	beq.n	8004d98 <osThreadNew+0xa8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2bbb      	cmp	r3, #187	; 0xbb
 8004d80:	d90a      	bls.n	8004d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <osThreadNew+0xa8>
        mem = 1;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e010      	b.n	8004dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10c      	bne.n	8004dba <osThreadNew+0xca>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d108      	bne.n	8004dba <osThreadNew+0xca>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <osThreadNew+0xca>
          mem = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e001      	b.n	8004dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d110      	bne.n	8004de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dc8:	9202      	str	r2, [sp, #8]
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6a3a      	ldr	r2, [r7, #32]
 8004dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fe0c 	bl	80059f4 <xTaskCreateStatic>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	e013      	b.n	8004e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f107 0310 	add.w	r3, r7, #16
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fe57 	bl	8005aae <xTaskCreate>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d001      	beq.n	8004e0a <osThreadNew+0x11a>
            hTask = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e0a:	693b      	ldr	r3, [r7, #16]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3728      	adds	r7, #40	; 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1c:	f3ef 8305 	mrs	r3, IPSR
 8004e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <osDelay+0x1c>
    stat = osErrorISR;
 8004e28:	f06f 0305 	mvn.w	r3, #5
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e007      	b.n	8004e40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 ff92 	bl	8005d64 <vTaskDelay>
    }
  }

  return (stat);
 8004e40:	68fb      	ldr	r3, [r7, #12]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a07      	ldr	r2, [pc, #28]	; (8004e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4a06      	ldr	r2, [pc, #24]	; (8004e7c <vApplicationGetIdleTaskMemory+0x30>)
 8004e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	601a      	str	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000009c 	.word	0x2000009c
 8004e7c:	20000158 	.word	0x20000158

08004e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a07      	ldr	r2, [pc, #28]	; (8004eac <vApplicationGetTimerTaskMemory+0x2c>)
 8004e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8004e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e9e:	601a      	str	r2, [r3, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	20000358 	.word	0x20000358
 8004eb0:	20000414 	.word	0x20000414

08004eb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f103 0208 	add.w	r2, r3, #8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ecc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f103 0208 	add.w	r2, r3, #8
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f103 0208 	add.w	r2, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d103      	bne.n	8004f76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e00c      	b.n	8004f90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e002      	b.n	8004f84 <vListInsert+0x2e>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d2f6      	bcs.n	8004f7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	601a      	str	r2, [r3, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6892      	ldr	r2, [r2, #8]
 8004fde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6852      	ldr	r2, [r2, #4]
 8004fe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d103      	bne.n	8004ffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	1e5a      	subs	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005046:	f002 f875 	bl	8007134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005056:	fb01 f303 	mul.w	r3, r1, r3
 800505a:	441a      	add	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	3b01      	subs	r3, #1
 8005078:	68f9      	ldr	r1, [r7, #12]
 800507a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	22ff      	movs	r2, #255	; 0xff
 800508a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d114      	bne.n	80050c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01a      	beq.n	80050da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3310      	adds	r3, #16
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 f929 	bl	8006300 <xTaskRemoveFromEventList>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d012      	beq.n	80050da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <xQueueGenericReset+0xcc>)
 80050b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	e009      	b.n	80050da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3310      	adds	r3, #16
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fef2 	bl	8004eb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3324      	adds	r3, #36	; 0x24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff feed 	bl	8004eb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050da:	f002 f85b 	bl	8007194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050de:	2301      	movs	r3, #1
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005112:	bf00      	nop
 8005114:	e7fe      	b.n	8005114 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <xQueueGenericCreateStatic+0x52>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <xQueueGenericCreateStatic+0x56>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <xQueueGenericCreateStatic+0x58>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	623b      	str	r3, [r7, #32]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <xQueueGenericCreateStatic+0x7e>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <xQueueGenericCreateStatic+0x82>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <xQueueGenericCreateStatic+0x84>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	61fb      	str	r3, [r7, #28]
}
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800518a:	2350      	movs	r3, #80	; 0x50
 800518c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b50      	cmp	r3, #80	; 0x50
 8005192:	d00a      	beq.n	80051aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	61bb      	str	r3, [r7, #24]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f805 	bl	80051dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3730      	adds	r7, #48	; 0x30
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e002      	b.n	80051fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800520a:	2101      	movs	r1, #1
 800520c:	69b8      	ldr	r0, [r7, #24]
 800520e:	f7ff ff05 	bl	800501c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08e      	sub	sp, #56	; 0x38
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005232:	2300      	movs	r3, #0
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueGenericSend+0x32>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <xQueueGenericSend+0x40>
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <xQueueGenericSend+0x44>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <xQueueGenericSend+0x46>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <xQueueGenericSend+0x60>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d103      	bne.n	8005292 <xQueueGenericSend+0x6e>
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <xQueueGenericSend+0x72>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <xQueueGenericSend+0x74>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	623b      	str	r3, [r7, #32]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052b2:	f001 f9e7 	bl	8006684 <xTaskGetSchedulerState>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <xQueueGenericSend+0x9e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <xQueueGenericSend+0xa2>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGenericSend+0xa4>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	61fb      	str	r3, [r7, #28]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052e2:	f001 ff27 	bl	8007134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <xQueueGenericSend+0xd4>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d129      	bne.n	800534c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fe:	f000 fa0b 	bl	8005718 <prvCopyDataToQueue>
 8005302:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d010      	beq.n	800532e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	3324      	adds	r3, #36	; 0x24
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fff5 	bl	8006300 <xTaskRemoveFromEventList>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d013      	beq.n	8005344 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800531c:	4b3f      	ldr	r3, [pc, #252]	; (800541c <xQueueGenericSend+0x1f8>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	e00a      	b.n	8005344 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005334:	4b39      	ldr	r3, [pc, #228]	; (800541c <xQueueGenericSend+0x1f8>)
 8005336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005344:	f001 ff26 	bl	8007194 <vPortExitCritical>
				return pdPASS;
 8005348:	2301      	movs	r3, #1
 800534a:	e063      	b.n	8005414 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005352:	f001 ff1f 	bl	8007194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005356:	2300      	movs	r3, #0
 8005358:	e05c      	b.n	8005414 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005360:	f107 0314 	add.w	r3, r7, #20
 8005364:	4618      	mov	r0, r3
 8005366:	f001 f82f 	bl	80063c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800536a:	2301      	movs	r3, #1
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800536e:	f001 ff11 	bl	8007194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005372:	f000 fd9b 	bl	8005eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005376:	f001 fedd 	bl	8007134 <vPortEnterCritical>
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005380:	b25b      	sxtb	r3, r3
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d103      	bne.n	8005390 <xQueueGenericSend+0x16c>
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005396:	b25b      	sxtb	r3, r3
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d103      	bne.n	80053a6 <xQueueGenericSend+0x182>
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a6:	f001 fef5 	bl	8007194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053aa:	1d3a      	adds	r2, r7, #4
 80053ac:	f107 0314 	add.w	r3, r7, #20
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 f81e 	bl	80063f4 <xTaskCheckForTimeOut>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d124      	bne.n	8005408 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c0:	f000 faa2 	bl	8005908 <prvIsQueueFull>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	3310      	adds	r3, #16
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4611      	mov	r1, r2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ff44 	bl	8006260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053da:	f000 fa2d 	bl	8005838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053de:	f000 fd73 	bl	8005ec8 <xTaskResumeAll>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f47f af7c 	bne.w	80052e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <xQueueGenericSend+0x1f8>)
 80053ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	e772      	b.n	80052e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053fe:	f000 fa1b 	bl	8005838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005402:	f000 fd61 	bl	8005ec8 <xTaskResumeAll>
 8005406:	e76c      	b.n	80052e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800540a:	f000 fa15 	bl	8005838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800540e:	f000 fd5b 	bl	8005ec8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005414:	4618      	mov	r0, r3
 8005416:	3738      	adds	r7, #56	; 0x38
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b090      	sub	sp, #64	; 0x40
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <xQueueGenericSendFromISR+0x3c>
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <xQueueGenericSendFromISR+0x40>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <xQueueGenericSendFromISR+0x42>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d103      	bne.n	800548a <xQueueGenericSendFromISR+0x6a>
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <xQueueGenericSendFromISR+0x6e>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <xQueueGenericSendFromISR+0x70>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	623b      	str	r3, [r7, #32]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054aa:	f001 ff25 	bl	80072f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054ae:	f3ef 8211 	mrs	r2, BASEPRI
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	61fa      	str	r2, [r7, #28]
 80054c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <xQueueGenericSendFromISR+0xbc>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d12f      	bne.n	800553c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054f2:	f000 f911 	bl	8005718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d112      	bne.n	8005526 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	2b00      	cmp	r3, #0
 8005506:	d016      	beq.n	8005536 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	3324      	adds	r3, #36	; 0x24
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fef7 	bl	8006300 <xTaskRemoveFromEventList>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00e      	beq.n	8005536 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e007      	b.n	8005536 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005526:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800552a:	3301      	adds	r3, #1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	b25a      	sxtb	r2, r3
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005536:	2301      	movs	r3, #1
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800553a:	e001      	b.n	8005540 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800554a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800554c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800554e:	4618      	mov	r0, r3
 8005550:	3740      	adds	r7, #64	; 0x40
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08c      	sub	sp, #48	; 0x30
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005564:	2300      	movs	r3, #0
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <xQueueReceive+0x30>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	623b      	str	r3, [r7, #32]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <xQueueReceive+0x3e>
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <xQueueReceive+0x42>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <xQueueReceive+0x44>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <xQueueReceive+0x5e>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	61fb      	str	r3, [r7, #28]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055b6:	f001 f865 	bl	8006684 <xTaskGetSchedulerState>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <xQueueReceive+0x6e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <xQueueReceive+0x72>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <xQueueReceive+0x74>
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xQueueReceive+0x8e>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	61bb      	str	r3, [r7, #24]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055e6:	f001 fda5 	bl	8007134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01f      	beq.n	8005636 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fa:	f000 f8f7 	bl	80057ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1e5a      	subs	r2, r3, #1
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00f      	beq.n	800562e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	3310      	adds	r3, #16
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fe74 	bl	8006300 <xTaskRemoveFromEventList>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800561e:	4b3d      	ldr	r3, [pc, #244]	; (8005714 <xQueueReceive+0x1bc>)
 8005620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800562e:	f001 fdb1 	bl	8007194 <vPortExitCritical>
				return pdPASS;
 8005632:	2301      	movs	r3, #1
 8005634:	e069      	b.n	800570a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800563c:	f001 fdaa 	bl	8007194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005640:	2300      	movs	r3, #0
 8005642:	e062      	b.n	800570a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800564a:	f107 0310 	add.w	r3, r7, #16
 800564e:	4618      	mov	r0, r3
 8005650:	f000 feba 	bl	80063c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005658:	f001 fd9c 	bl	8007194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800565c:	f000 fc26 	bl	8005eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005660:	f001 fd68 	bl	8007134 <vPortEnterCritical>
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800566a:	b25b      	sxtb	r3, r3
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d103      	bne.n	800567a <xQueueReceive+0x122>
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005680:	b25b      	sxtb	r3, r3
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d103      	bne.n	8005690 <xQueueReceive+0x138>
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005690:	f001 fd80 	bl	8007194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005694:	1d3a      	adds	r2, r7, #4
 8005696:	f107 0310 	add.w	r3, r7, #16
 800569a:	4611      	mov	r1, r2
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fea9 	bl	80063f4 <xTaskCheckForTimeOut>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d123      	bne.n	80056f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056aa:	f000 f917 	bl	80058dc <prvIsQueueEmpty>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d017      	beq.n	80056e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	3324      	adds	r3, #36	; 0x24
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4611      	mov	r1, r2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fdcf 	bl	8006260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c4:	f000 f8b8 	bl	8005838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056c8:	f000 fbfe 	bl	8005ec8 <xTaskResumeAll>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d189      	bne.n	80055e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <xQueueReceive+0x1bc>)
 80056d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	e780      	b.n	80055e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056e6:	f000 f8a7 	bl	8005838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056ea:	f000 fbed 	bl	8005ec8 <xTaskResumeAll>
 80056ee:	e77a      	b.n	80055e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f2:	f000 f8a1 	bl	8005838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056f6:	f000 fbe7 	bl	8005ec8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fc:	f000 f8ee 	bl	80058dc <prvIsQueueEmpty>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	f43f af6f 	beq.w	80055e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800570a:	4618      	mov	r0, r3
 800570c:	3730      	adds	r7, #48	; 0x30
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10d      	bne.n	8005752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d14d      	bne.n	80057da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 ffbc 	bl	80066c0 <xTaskPriorityDisinherit>
 8005748:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	e043      	b.n	80057da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d119      	bne.n	800578c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6858      	ldr	r0, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	461a      	mov	r2, r3
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	f002 f81e 	bl	80077a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d32b      	bcc.n	80057da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	e026      	b.n	80057da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68d8      	ldr	r0, [r3, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	461a      	mov	r2, r3
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	f002 f804 	bl	80077a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	425b      	negs	r3, r3
 80057a6:	441a      	add	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d207      	bcs.n	80057c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	425b      	negs	r3, r3
 80057c2:	441a      	add	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d105      	bne.n	80057da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057e2:	697b      	ldr	r3, [r7, #20]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d018      	beq.n	8005830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	441a      	add	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	429a      	cmp	r2, r3
 8005816:	d303      	bcc.n	8005820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68d9      	ldr	r1, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	461a      	mov	r2, r3
 800582a:	6838      	ldr	r0, [r7, #0]
 800582c:	f001 ffba 	bl	80077a4 <memcpy>
	}
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005840:	f001 fc78 	bl	8007134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800584c:	e011      	b.n	8005872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d012      	beq.n	800587c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3324      	adds	r3, #36	; 0x24
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fd50 	bl	8006300 <xTaskRemoveFromEventList>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005866:	f000 fe27 	bl	80064b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	3b01      	subs	r3, #1
 800586e:	b2db      	uxtb	r3, r3
 8005870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005876:	2b00      	cmp	r3, #0
 8005878:	dce9      	bgt.n	800584e <prvUnlockQueue+0x16>
 800587a:	e000      	b.n	800587e <prvUnlockQueue+0x46>
					break;
 800587c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	22ff      	movs	r2, #255	; 0xff
 8005882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005886:	f001 fc85 	bl	8007194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800588a:	f001 fc53 	bl	8007134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005896:	e011      	b.n	80058bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d012      	beq.n	80058c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3310      	adds	r3, #16
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fd2b 	bl	8006300 <xTaskRemoveFromEventList>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058b0:	f000 fe02 	bl	80064b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dce9      	bgt.n	8005898 <prvUnlockQueue+0x60>
 80058c4:	e000      	b.n	80058c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	22ff      	movs	r2, #255	; 0xff
 80058cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80058d0:	f001 fc60 	bl	8007194 <vPortExitCritical>
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058e4:	f001 fc26 	bl	8007134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058f0:	2301      	movs	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e001      	b.n	80058fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058fa:	f001 fc4b 	bl	8007194 <vPortExitCritical>

	return xReturn;
 80058fe:	68fb      	ldr	r3, [r7, #12]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005910:	f001 fc10 	bl	8007134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	429a      	cmp	r2, r3
 800591e:	d102      	bne.n	8005926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e001      	b.n	800592a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800592a:	f001 fc33 	bl	8007194 <vPortExitCritical>

	return xReturn;
 800592e:	68fb      	ldr	r3, [r7, #12]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e014      	b.n	8005972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005948:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <vQueueAddToRegistry+0x50>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005954:	490c      	ldr	r1, [pc, #48]	; (8005988 <vQueueAddToRegistry+0x50>)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <vQueueAddToRegistry+0x50>)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4413      	add	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800596a:	e006      	b.n	800597a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3301      	adds	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b07      	cmp	r3, #7
 8005976:	d9e7      	bls.n	8005948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	200057a4 	.word	0x200057a4

0800598c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800599c:	f001 fbca 	bl	8007134 <vPortEnterCritical>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d103      	bne.n	80059b6 <vQueueWaitForMessageRestricted+0x2a>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d103      	bne.n	80059cc <vQueueWaitForMessageRestricted+0x40>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059cc:	f001 fbe2 	bl	8007194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3324      	adds	r3, #36	; 0x24
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fc61 	bl	80062a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059e6:	6978      	ldr	r0, [r7, #20]
 80059e8:	f7ff ff26 	bl	8005838 <prvUnlockQueue>
	}
 80059ec:	bf00      	nop
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08e      	sub	sp, #56	; 0x38
 80059f8:	af04      	add	r7, sp, #16
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	623b      	str	r3, [r7, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xTaskCreateStatic+0x46>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61fb      	str	r3, [r7, #28]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a3a:	23bc      	movs	r3, #188	; 0xbc
 8005a3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2bbc      	cmp	r3, #188	; 0xbc
 8005a42:	d00a      	beq.n	8005a5a <xTaskCreateStatic+0x66>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	61bb      	str	r3, [r7, #24]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01e      	beq.n	8005aa0 <xTaskCreateStatic+0xac>
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01b      	beq.n	8005aa0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9303      	str	r3, [sp, #12]
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	f107 0314 	add.w	r3, r7, #20
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f850 	bl	8005b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a9a:	f000 f8f3 	bl	8005c84 <prvAddNewTaskToReadyList>
 8005a9e:	e001      	b.n	8005aa4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005aa4:	697b      	ldr	r3, [r7, #20]
	}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3728      	adds	r7, #40	; 0x28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b08c      	sub	sp, #48	; 0x30
 8005ab2:	af04      	add	r7, sp, #16
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 fc58 	bl	8007378 <pvPortMalloc>
 8005ac8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00e      	beq.n	8005aee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ad0:	20bc      	movs	r0, #188	; 0xbc
 8005ad2:	f001 fc51 	bl	8007378 <pvPortMalloc>
 8005ad6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae4:	e005      	b.n	8005af2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ae6:	6978      	ldr	r0, [r7, #20]
 8005ae8:	f001 fd12 	bl	8007510 <vPortFree>
 8005aec:	e001      	b.n	8005af2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d017      	beq.n	8005b28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b00:	88fa      	ldrh	r2, [r7, #6]
 8005b02:	2300      	movs	r3, #0
 8005b04:	9303      	str	r3, [sp, #12]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	9302      	str	r3, [sp, #8]
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f80e 	bl	8005b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b1c:	69f8      	ldr	r0, [r7, #28]
 8005b1e:	f000 f8b1 	bl	8005c84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b22:	2301      	movs	r3, #1
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	e002      	b.n	8005b2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	461a      	mov	r2, r3
 8005b50:	21a5      	movs	r1, #165	; 0xa5
 8005b52:	f001 fe35 	bl	80077c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b60:	3b01      	subs	r3, #1
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f023 0307 	bic.w	r3, r3, #7
 8005b6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	617b      	str	r3, [r7, #20]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01f      	beq.n	8005bd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e012      	b.n	8005bc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	7819      	ldrb	r1, [r3, #0]
 8005ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	3334      	adds	r3, #52	; 0x34
 8005bac:	460a      	mov	r2, r1
 8005bae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d006      	beq.n	8005bca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2b0f      	cmp	r3, #15
 8005bc6:	d9e9      	bls.n	8005b9c <prvInitialiseNewTask+0x64>
 8005bc8:	e000      	b.n	8005bcc <prvInitialiseNewTask+0x94>
			{
				break;
 8005bca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd4:	e003      	b.n	8005bde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	2b37      	cmp	r3, #55	; 0x37
 8005be2:	d901      	bls.n	8005be8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005be4:	2337      	movs	r3, #55	; 0x37
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff f978 	bl	8004ef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	3318      	adds	r3, #24
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff f973 	bl	8004ef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	3354      	adds	r3, #84	; 0x54
 8005c38:	2260      	movs	r2, #96	; 0x60
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 fdbf 	bl	80077c0 <memset>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	4a0c      	ldr	r2, [pc, #48]	; (8005c78 <prvInitialiseNewTask+0x140>)
 8005c46:	659a      	str	r2, [r3, #88]	; 0x58
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <prvInitialiseNewTask+0x144>)
 8005c4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	4a0b      	ldr	r2, [pc, #44]	; (8005c80 <prvInitialiseNewTask+0x148>)
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	69b8      	ldr	r0, [r7, #24]
 8005c5a:	f001 f941 	bl	8006ee0 <pxPortInitialiseStack>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c70:	bf00      	nop
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	080081d8 	.word	0x080081d8
 8005c7c:	080081f8 	.word	0x080081f8
 8005c80:	080081b8 	.word	0x080081b8

08005c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c8c:	f001 fa52 	bl	8007134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c90:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <prvAddNewTaskToReadyList+0xc4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <prvAddNewTaskToReadyList+0xc4>)
 8005c98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c9a:	4b2c      	ldr	r3, [pc, #176]	; (8005d4c <prvAddNewTaskToReadyList+0xc8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ca2:	4a2a      	ldr	r2, [pc, #168]	; (8005d4c <prvAddNewTaskToReadyList+0xc8>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ca8:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <prvAddNewTaskToReadyList+0xc4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d110      	bne.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cb0:	f000 fc26 	bl	8006500 <prvInitialiseTaskLists>
 8005cb4:	e00d      	b.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cb6:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <prvAddNewTaskToReadyList+0xcc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cbe:	4b23      	ldr	r3, [pc, #140]	; (8005d4c <prvAddNewTaskToReadyList+0xc8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d802      	bhi.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ccc:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <prvAddNewTaskToReadyList+0xc8>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cd2:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <prvAddNewTaskToReadyList+0xd0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	4a1e      	ldr	r2, [pc, #120]	; (8005d54 <prvAddNewTaskToReadyList+0xd0>)
 8005cda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <prvAddNewTaskToReadyList+0xd0>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <prvAddNewTaskToReadyList+0xd4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d903      	bls.n	8005cf8 <prvAddNewTaskToReadyList+0x74>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <prvAddNewTaskToReadyList+0xd4>)
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a15      	ldr	r2, [pc, #84]	; (8005d5c <prvAddNewTaskToReadyList+0xd8>)
 8005d06:	441a      	add	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7ff f8fd 	bl	8004f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d14:	f001 fa3e 	bl	8007194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <prvAddNewTaskToReadyList+0xcc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00e      	beq.n	8005d3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <prvAddNewTaskToReadyList+0xc8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d207      	bcs.n	8005d3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <prvAddNewTaskToReadyList+0xdc>)
 8005d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000ce8 	.word	0x20000ce8
 8005d4c:	20000814 	.word	0x20000814
 8005d50:	20000cf4 	.word	0x20000cf4
 8005d54:	20000d04 	.word	0x20000d04
 8005d58:	20000cf0 	.word	0x20000cf0
 8005d5c:	20000818 	.word	0x20000818
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d017      	beq.n	8005da6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d76:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <vTaskDelay+0x60>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <vTaskDelay+0x30>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60bb      	str	r3, [r7, #8]
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d94:	f000 f88a 	bl	8005eac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fcfe 	bl	800679c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005da0:	f000 f892 	bl	8005ec8 <xTaskResumeAll>
 8005da4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <vTaskDelay+0x64>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000d10 	.word	0x20000d10
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dda:	463a      	mov	r2, r7
 8005ddc:	1d39      	adds	r1, r7, #4
 8005dde:	f107 0308 	add.w	r3, r7, #8
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff f832 	bl	8004e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	9202      	str	r2, [sp, #8]
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	2300      	movs	r3, #0
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	2300      	movs	r3, #0
 8005df8:	460a      	mov	r2, r1
 8005dfa:	4924      	ldr	r1, [pc, #144]	; (8005e8c <vTaskStartScheduler+0xc0>)
 8005dfc:	4824      	ldr	r0, [pc, #144]	; (8005e90 <vTaskStartScheduler+0xc4>)
 8005dfe:	f7ff fdf9 	bl	80059f4 <xTaskCreateStatic>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4a23      	ldr	r2, [pc, #140]	; (8005e94 <vTaskStartScheduler+0xc8>)
 8005e06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e08:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <vTaskStartScheduler+0xc8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e10:	2301      	movs	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e001      	b.n	8005e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d102      	bne.n	8005e26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e20:	f000 fd10 	bl	8006844 <xTimerCreateTimerTask>
 8005e24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d11b      	bne.n	8005e64 <vTaskStartScheduler+0x98>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	613b      	str	r3, [r7, #16]
}
 8005e3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <vTaskStartScheduler+0xcc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3354      	adds	r3, #84	; 0x54
 8005e46:	4a15      	ldr	r2, [pc, #84]	; (8005e9c <vTaskStartScheduler+0xd0>)
 8005e48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <vTaskStartScheduler+0xd4>)
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e52:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <vTaskStartScheduler+0xd8>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e58:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <vTaskStartScheduler+0xdc>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e5e:	f001 f8c7 	bl	8006ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e62:	e00e      	b.n	8005e82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d10a      	bne.n	8005e82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <vTaskStartScheduler+0xb4>
}
 8005e82:	bf00      	nop
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08008140 	.word	0x08008140
 8005e90:	080064d1 	.word	0x080064d1
 8005e94:	20000d0c 	.word	0x20000d0c
 8005e98:	20000814 	.word	0x20000814
 8005e9c:	20000010 	.word	0x20000010
 8005ea0:	20000d08 	.word	0x20000d08
 8005ea4:	20000cf4 	.word	0x20000cf4
 8005ea8:	20000cec 	.word	0x20000cec

08005eac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <vTaskSuspendAll+0x18>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	4a03      	ldr	r2, [pc, #12]	; (8005ec4 <vTaskSuspendAll+0x18>)
 8005eb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eba:	bf00      	nop
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20000d10 	.word	0x20000d10

08005ec8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ed6:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	603b      	str	r3, [r7, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ef4:	f001 f91e 	bl	8007134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ef8:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4a38      	ldr	r2, [pc, #224]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005f00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f02:	4b37      	ldr	r3, [pc, #220]	; (8005fe0 <xTaskResumeAll+0x118>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d162      	bne.n	8005fd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <xTaskResumeAll+0x11c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d05e      	beq.n	8005fd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f12:	e02f      	b.n	8005f74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f14:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <xTaskResumeAll+0x120>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff f851 	bl	8004fc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff f84c 	bl	8004fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f34:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <xTaskResumeAll+0x124>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d903      	bls.n	8005f44 <xTaskResumeAll+0x7c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	4a2a      	ldr	r2, [pc, #168]	; (8005fec <xTaskResumeAll+0x124>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <xTaskResumeAll+0x128>)
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7fe ffd7 	bl	8004f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <xTaskResumeAll+0x12c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d302      	bcc.n	8005f74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f6e:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <xTaskResumeAll+0x130>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f74:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <xTaskResumeAll+0x120>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1cb      	bne.n	8005f14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f82:	f000 fb5f 	bl	8006644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <xTaskResumeAll+0x134>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d010      	beq.n	8005fb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f92:	f000 f847 	bl	8006024 <xTaskIncrementTick>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f9c:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <xTaskResumeAll+0x130>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f1      	bne.n	8005f92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <xTaskResumeAll+0x134>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <xTaskResumeAll+0x130>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <xTaskResumeAll+0x138>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fd0:	f001 f8e0 	bl	8007194 <vPortExitCritical>

	return xAlreadyYielded;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000d10 	.word	0x20000d10
 8005fe4:	20000ce8 	.word	0x20000ce8
 8005fe8:	20000ca8 	.word	0x20000ca8
 8005fec:	20000cf0 	.word	0x20000cf0
 8005ff0:	20000818 	.word	0x20000818
 8005ff4:	20000814 	.word	0x20000814
 8005ff8:	20000cfc 	.word	0x20000cfc
 8005ffc:	20000cf8 	.word	0x20000cf8
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <xTaskGetTickCount+0x1c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006010:	687b      	ldr	r3, [r7, #4]
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000cec 	.word	0x20000cec

08006024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800602e:	4b4f      	ldr	r3, [pc, #316]	; (800616c <xTaskIncrementTick+0x148>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 808f 	bne.w	8006156 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006038:	4b4d      	ldr	r3, [pc, #308]	; (8006170 <xTaskIncrementTick+0x14c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006040:	4a4b      	ldr	r2, [pc, #300]	; (8006170 <xTaskIncrementTick+0x14c>)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d120      	bne.n	800608e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800604c:	4b49      	ldr	r3, [pc, #292]	; (8006174 <xTaskIncrementTick+0x150>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <xTaskIncrementTick+0x48>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	603b      	str	r3, [r7, #0]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xTaskIncrementTick+0x46>
 800606c:	4b41      	ldr	r3, [pc, #260]	; (8006174 <xTaskIncrementTick+0x150>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	4b41      	ldr	r3, [pc, #260]	; (8006178 <xTaskIncrementTick+0x154>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a3f      	ldr	r2, [pc, #252]	; (8006174 <xTaskIncrementTick+0x150>)
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	4a3f      	ldr	r2, [pc, #252]	; (8006178 <xTaskIncrementTick+0x154>)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	4b3e      	ldr	r3, [pc, #248]	; (800617c <xTaskIncrementTick+0x158>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a3d      	ldr	r2, [pc, #244]	; (800617c <xTaskIncrementTick+0x158>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	f000 fadb 	bl	8006644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800608e:	4b3c      	ldr	r3, [pc, #240]	; (8006180 <xTaskIncrementTick+0x15c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d349      	bcc.n	800612c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <xTaskIncrementTick+0x150>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a2:	4b37      	ldr	r3, [pc, #220]	; (8006180 <xTaskIncrementTick+0x15c>)
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
 80060a8:	601a      	str	r2, [r3, #0]
					break;
 80060aa:	e03f      	b.n	800612c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ac:	4b31      	ldr	r3, [pc, #196]	; (8006174 <xTaskIncrementTick+0x150>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d203      	bcs.n	80060cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060c4:	4a2e      	ldr	r2, [pc, #184]	; (8006180 <xTaskIncrementTick+0x15c>)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060ca:	e02f      	b.n	800612c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe ff79 	bl	8004fc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	3318      	adds	r3, #24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe ff70 	bl	8004fc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4b25      	ldr	r3, [pc, #148]	; (8006184 <xTaskIncrementTick+0x160>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <xTaskIncrementTick+0xd8>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a22      	ldr	r2, [pc, #136]	; (8006184 <xTaskIncrementTick+0x160>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <xTaskIncrementTick+0x164>)
 800610a:	441a      	add	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe fefb 	bl	8004f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	4b1b      	ldr	r3, [pc, #108]	; (800618c <xTaskIncrementTick+0x168>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	429a      	cmp	r2, r3
 8006124:	d3b8      	bcc.n	8006098 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800612a:	e7b5      	b.n	8006098 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800612c:	4b17      	ldr	r3, [pc, #92]	; (800618c <xTaskIncrementTick+0x168>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	4915      	ldr	r1, [pc, #84]	; (8006188 <xTaskIncrementTick+0x164>)
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d901      	bls.n	8006148 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <xTaskIncrementTick+0x16c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e004      	b.n	8006160 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <xTaskIncrementTick+0x170>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	4a0d      	ldr	r2, [pc, #52]	; (8006194 <xTaskIncrementTick+0x170>)
 800615e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006160:	697b      	ldr	r3, [r7, #20]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000d10 	.word	0x20000d10
 8006170:	20000cec 	.word	0x20000cec
 8006174:	20000ca0 	.word	0x20000ca0
 8006178:	20000ca4 	.word	0x20000ca4
 800617c:	20000d00 	.word	0x20000d00
 8006180:	20000d08 	.word	0x20000d08
 8006184:	20000cf0 	.word	0x20000cf0
 8006188:	20000818 	.word	0x20000818
 800618c:	20000814 	.word	0x20000814
 8006190:	20000cfc 	.word	0x20000cfc
 8006194:	20000cf8 	.word	0x20000cf8

08006198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800619e:	4b2a      	ldr	r3, [pc, #168]	; (8006248 <vTaskSwitchContext+0xb0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061a6:	4b29      	ldr	r3, [pc, #164]	; (800624c <vTaskSwitchContext+0xb4>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061ac:	e046      	b.n	800623c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80061ae:	4b27      	ldr	r3, [pc, #156]	; (800624c <vTaskSwitchContext+0xb4>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b4:	4b26      	ldr	r3, [pc, #152]	; (8006250 <vTaskSwitchContext+0xb8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e010      	b.n	80061de <vTaskSwitchContext+0x46>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	607b      	str	r3, [r7, #4]
}
 80061d4:	bf00      	nop
 80061d6:	e7fe      	b.n	80061d6 <vTaskSwitchContext+0x3e>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b01      	subs	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	491d      	ldr	r1, [pc, #116]	; (8006254 <vTaskSwitchContext+0xbc>)
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0e4      	beq.n	80061bc <vTaskSwitchContext+0x24>
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a15      	ldr	r2, [pc, #84]	; (8006254 <vTaskSwitchContext+0xbc>)
 80061fe:	4413      	add	r3, r2
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	605a      	str	r2, [r3, #4]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	3308      	adds	r3, #8
 8006214:	429a      	cmp	r2, r3
 8006216:	d104      	bne.n	8006222 <vTaskSwitchContext+0x8a>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	605a      	str	r2, [r3, #4]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a0b      	ldr	r2, [pc, #44]	; (8006258 <vTaskSwitchContext+0xc0>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <vTaskSwitchContext+0xb8>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <vTaskSwitchContext+0xc0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3354      	adds	r3, #84	; 0x54
 8006238:	4a08      	ldr	r2, [pc, #32]	; (800625c <vTaskSwitchContext+0xc4>)
 800623a:	6013      	str	r3, [r2, #0]
}
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	20000d10 	.word	0x20000d10
 800624c:	20000cfc 	.word	0x20000cfc
 8006250:	20000cf0 	.word	0x20000cf0
 8006254:	20000818 	.word	0x20000818
 8006258:	20000814 	.word	0x20000814
 800625c:	20000010 	.word	0x20000010

08006260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	60fb      	str	r3, [r7, #12]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006286:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <vTaskPlaceOnEventList+0x44>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3318      	adds	r3, #24
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fe fe61 	bl	8004f56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006294:	2101      	movs	r1, #1
 8006296:	6838      	ldr	r0, [r7, #0]
 8006298:	f000 fa80 	bl	800679c <prvAddCurrentTaskToDelayedList>
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000814 	.word	0x20000814

080062a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	617b      	str	r3, [r7, #20]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <vTaskPlaceOnEventListRestricted+0x54>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3318      	adds	r3, #24
 80062d6:	4619      	mov	r1, r3
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7fe fe18 	bl	8004f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295
 80062e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f000 fa55 	bl	800679c <prvAddCurrentTaskToDelayedList>
	}
 80062f2:	bf00      	nop
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000814 	.word	0x20000814

08006300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	60fb      	str	r3, [r7, #12]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	3318      	adds	r3, #24
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fe49 	bl	8004fc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006336:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <xTaskRemoveFromEventList+0xb0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11d      	bne.n	800637a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe fe40 	bl	8004fc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <xTaskRemoveFromEventList+0xb4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <xTaskRemoveFromEventList+0x5c>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <xTaskRemoveFromEventList+0xb4>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a13      	ldr	r2, [pc, #76]	; (80063b8 <xTaskRemoveFromEventList+0xb8>)
 800636a:	441a      	add	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe fdcb 	bl	8004f0e <vListInsertEnd>
 8006378:	e005      	b.n	8006386 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	3318      	adds	r3, #24
 800637e:	4619      	mov	r1, r3
 8006380:	480e      	ldr	r0, [pc, #56]	; (80063bc <xTaskRemoveFromEventList+0xbc>)
 8006382:	f7fe fdc4 	bl	8004f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638a:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <xTaskRemoveFromEventList+0xc0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	429a      	cmp	r2, r3
 8006392:	d905      	bls.n	80063a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006394:	2301      	movs	r3, #1
 8006396:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <xTaskRemoveFromEventList+0xc4>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e001      	b.n	80063a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063a4:	697b      	ldr	r3, [r7, #20]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000d10 	.word	0x20000d10
 80063b4:	20000cf0 	.word	0x20000cf0
 80063b8:	20000818 	.word	0x20000818
 80063bc:	20000ca8 	.word	0x20000ca8
 80063c0:	20000814 	.word	0x20000814
 80063c4:	20000cfc 	.word	0x20000cfc

080063c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <vTaskInternalSetTimeOutState+0x24>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <vTaskInternalSetTimeOutState+0x28>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	605a      	str	r2, [r3, #4]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000d00 	.word	0x20000d00
 80063f0:	20000cec 	.word	0x20000cec

080063f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	613b      	str	r3, [r7, #16]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006436:	f000 fe7d 	bl	8007134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800643a:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <xTaskCheckForTimeOut+0xbc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d102      	bne.n	800645a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	e023      	b.n	80064a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <xTaskCheckForTimeOut+0xc0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d007      	beq.n	8006476 <xTaskCheckForTimeOut+0x82>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	d302      	bcc.n	8006476 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	e015      	b.n	80064a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	429a      	cmp	r2, r3
 800647e:	d20b      	bcs.n	8006498 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ff9b 	bl	80063c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e004      	b.n	80064a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064a2:	f000 fe77 	bl	8007194 <vPortExitCritical>

	return xReturn;
 80064a6:	69fb      	ldr	r3, [r7, #28]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000cec 	.word	0x20000cec
 80064b4:	20000d00 	.word	0x20000d00

080064b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064bc:	4b03      	ldr	r3, [pc, #12]	; (80064cc <vTaskMissedYield+0x14>)
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
}
 80064c2:	bf00      	nop
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000cfc 	.word	0x20000cfc

080064d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064d8:	f000 f852 	bl	8006580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <prvIdleTask+0x28>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d9f9      	bls.n	80064d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <prvIdleTask+0x2c>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064f4:	e7f0      	b.n	80064d8 <prvIdleTask+0x8>
 80064f6:	bf00      	nop
 80064f8:	20000818 	.word	0x20000818
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006506:	2300      	movs	r3, #0
 8006508:	607b      	str	r3, [r7, #4]
 800650a:	e00c      	b.n	8006526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4a12      	ldr	r2, [pc, #72]	; (8006560 <prvInitialiseTaskLists+0x60>)
 8006518:	4413      	add	r3, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fcca 	bl	8004eb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3301      	adds	r3, #1
 8006524:	607b      	str	r3, [r7, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b37      	cmp	r3, #55	; 0x37
 800652a:	d9ef      	bls.n	800650c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800652c:	480d      	ldr	r0, [pc, #52]	; (8006564 <prvInitialiseTaskLists+0x64>)
 800652e:	f7fe fcc1 	bl	8004eb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006532:	480d      	ldr	r0, [pc, #52]	; (8006568 <prvInitialiseTaskLists+0x68>)
 8006534:	f7fe fcbe 	bl	8004eb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006538:	480c      	ldr	r0, [pc, #48]	; (800656c <prvInitialiseTaskLists+0x6c>)
 800653a:	f7fe fcbb 	bl	8004eb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800653e:	480c      	ldr	r0, [pc, #48]	; (8006570 <prvInitialiseTaskLists+0x70>)
 8006540:	f7fe fcb8 	bl	8004eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006544:	480b      	ldr	r0, [pc, #44]	; (8006574 <prvInitialiseTaskLists+0x74>)
 8006546:	f7fe fcb5 	bl	8004eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800654a:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <prvInitialiseTaskLists+0x78>)
 800654c:	4a05      	ldr	r2, [pc, #20]	; (8006564 <prvInitialiseTaskLists+0x64>)
 800654e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <prvInitialiseTaskLists+0x7c>)
 8006552:	4a05      	ldr	r2, [pc, #20]	; (8006568 <prvInitialiseTaskLists+0x68>)
 8006554:	601a      	str	r2, [r3, #0]
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000818 	.word	0x20000818
 8006564:	20000c78 	.word	0x20000c78
 8006568:	20000c8c 	.word	0x20000c8c
 800656c:	20000ca8 	.word	0x20000ca8
 8006570:	20000cbc 	.word	0x20000cbc
 8006574:	20000cd4 	.word	0x20000cd4
 8006578:	20000ca0 	.word	0x20000ca0
 800657c:	20000ca4 	.word	0x20000ca4

08006580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006586:	e019      	b.n	80065bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006588:	f000 fdd4 	bl	8007134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <prvCheckTasksWaitingTermination+0x50>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe fd15 	bl	8004fc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <prvCheckTasksWaitingTermination+0x54>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	4a0b      	ldr	r2, [pc, #44]	; (80065d4 <prvCheckTasksWaitingTermination+0x54>)
 80065a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <prvCheckTasksWaitingTermination+0x58>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <prvCheckTasksWaitingTermination+0x58>)
 80065b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065b2:	f000 fdef 	bl	8007194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f810 	bl	80065dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <prvCheckTasksWaitingTermination+0x58>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e1      	bne.n	8006588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000cbc 	.word	0x20000cbc
 80065d4:	20000ce8 	.word	0x20000ce8
 80065d8:	20000cd0 	.word	0x20000cd0

080065dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3354      	adds	r3, #84	; 0x54
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 f959 	bl	80078a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d108      	bne.n	800660a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 ff87 	bl	8007510 <vPortFree>
				vPortFree( pxTCB );
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 ff84 	bl	8007510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006608:	e018      	b.n	800663c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006610:	2b01      	cmp	r3, #1
 8006612:	d103      	bne.n	800661c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 ff7b 	bl	8007510 <vPortFree>
	}
 800661a:	e00f      	b.n	800663c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006622:	2b02      	cmp	r3, #2
 8006624:	d00a      	beq.n	800663c <prvDeleteTCB+0x60>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60fb      	str	r3, [r7, #12]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <prvDeleteTCB+0x5e>
	}
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800664a:	4b0c      	ldr	r3, [pc, #48]	; (800667c <prvResetNextTaskUnblockTime+0x38>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <prvResetNextTaskUnblockTime+0x3c>)
 8006656:	f04f 32ff 	mov.w	r2, #4294967295
 800665a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800665c:	e008      	b.n	8006670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <prvResetNextTaskUnblockTime+0x38>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	4a04      	ldr	r2, [pc, #16]	; (8006680 <prvResetNextTaskUnblockTime+0x3c>)
 800666e:	6013      	str	r3, [r2, #0]
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20000ca0 	.word	0x20000ca0
 8006680:	20000d08 	.word	0x20000d08

08006684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800668a:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <xTaskGetSchedulerState+0x34>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d102      	bne.n	8006698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006692:	2301      	movs	r3, #1
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	e008      	b.n	80066aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006698:	4b08      	ldr	r3, [pc, #32]	; (80066bc <xTaskGetSchedulerState+0x38>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066a0:	2302      	movs	r3, #2
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	e001      	b.n	80066aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066aa:	687b      	ldr	r3, [r7, #4]
	}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	20000cf4 	.word	0x20000cf4
 80066bc:	20000d10 	.word	0x20000d10

080066c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d056      	beq.n	8006784 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066d6:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <xTaskPriorityDisinherit+0xd0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d00a      	beq.n	80066f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	60fb      	str	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	1e5a      	subs	r2, r3, #1
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006726:	429a      	cmp	r2, r3
 8006728:	d02c      	beq.n	8006784 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672e:	2b00      	cmp	r3, #0
 8006730:	d128      	bne.n	8006784 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	3304      	adds	r3, #4
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fc46 	bl	8004fc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <xTaskPriorityDisinherit+0xd4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d903      	bls.n	8006764 <xTaskPriorityDisinherit+0xa4>
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <xTaskPriorityDisinherit+0xd4>)
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4a09      	ldr	r2, [pc, #36]	; (8006798 <xTaskPriorityDisinherit+0xd8>)
 8006772:	441a      	add	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3304      	adds	r3, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f7fe fbc7 	bl	8004f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006784:	697b      	ldr	r3, [r7, #20]
	}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000814 	.word	0x20000814
 8006794:	20000cf0 	.word	0x20000cf0
 8006798:	20000818 	.word	0x20000818

0800679c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067a6:	4b21      	ldr	r3, [pc, #132]	; (800682c <prvAddCurrentTaskToDelayedList+0x90>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ac:	4b20      	ldr	r3, [pc, #128]	; (8006830 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fc08 	bl	8004fc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d10a      	bne.n	80067d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4819      	ldr	r0, [pc, #100]	; (8006834 <prvAddCurrentTaskToDelayedList+0x98>)
 80067d0:	f7fe fb9d 	bl	8004f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067d4:	e026      	b.n	8006824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4413      	add	r3, r2
 80067dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067de:	4b14      	ldr	r3, [pc, #80]	; (8006830 <prvAddCurrentTaskToDelayedList+0x94>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d209      	bcs.n	8006802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <prvAddCurrentTaskToDelayedList+0x94>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f7fe fbab 	bl	8004f56 <vListInsert>
}
 8006800:	e010      	b.n	8006824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006802:	4b0e      	ldr	r3, [pc, #56]	; (800683c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <prvAddCurrentTaskToDelayedList+0x94>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7fe fba1 	bl	8004f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	429a      	cmp	r2, r3
 800681c:	d202      	bcs.n	8006824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800681e:	4a08      	ldr	r2, [pc, #32]	; (8006840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6013      	str	r3, [r2, #0]
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000cec 	.word	0x20000cec
 8006830:	20000814 	.word	0x20000814
 8006834:	20000cd4 	.word	0x20000cd4
 8006838:	20000ca4 	.word	0x20000ca4
 800683c:	20000ca0 	.word	0x20000ca0
 8006840:	20000d08 	.word	0x20000d08

08006844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800684e:	f000 fb07 	bl	8006e60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <xTimerCreateTimerTask+0x80>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d021      	beq.n	800689e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006862:	1d3a      	adds	r2, r7, #4
 8006864:	f107 0108 	add.w	r1, r7, #8
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fb07 	bl	8004e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	9202      	str	r2, [sp, #8]
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	2302      	movs	r3, #2
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	2300      	movs	r3, #0
 8006882:	460a      	mov	r2, r1
 8006884:	4910      	ldr	r1, [pc, #64]	; (80068c8 <xTimerCreateTimerTask+0x84>)
 8006886:	4811      	ldr	r0, [pc, #68]	; (80068cc <xTimerCreateTimerTask+0x88>)
 8006888:	f7ff f8b4 	bl	80059f4 <xTaskCreateStatic>
 800688c:	4603      	mov	r3, r0
 800688e:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <xTimerCreateTimerTask+0x8c>)
 8006890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <xTimerCreateTimerTask+0x8c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800689a:	2301      	movs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	613b      	str	r3, [r7, #16]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068ba:	697b      	ldr	r3, [r7, #20]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000d44 	.word	0x20000d44
 80068c8:	08008148 	.word	0x08008148
 80068cc:	08006a09 	.word	0x08006a09
 80068d0:	20000d48 	.word	0x20000d48

080068d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xTimerGenericCommand+0x2e>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	623b      	str	r3, [r7, #32]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <xTimerGenericCommand+0x98>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d02a      	beq.n	8006960 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b05      	cmp	r3, #5
 800691a:	dc18      	bgt.n	800694e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800691c:	f7ff feb2 	bl	8006684 <xTaskGetSchedulerState>
 8006920:	4603      	mov	r3, r0
 8006922:	2b02      	cmp	r3, #2
 8006924:	d109      	bne.n	800693a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <xTimerGenericCommand+0x98>)
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	f107 0110 	add.w	r1, r7, #16
 800692e:	2300      	movs	r3, #0
 8006930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006932:	f7fe fc77 	bl	8005224 <xQueueGenericSend>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24
 8006938:	e012      	b.n	8006960 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <xTimerGenericCommand+0x98>)
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f107 0110 	add.w	r1, r7, #16
 8006942:	2300      	movs	r3, #0
 8006944:	2200      	movs	r2, #0
 8006946:	f7fe fc6d 	bl	8005224 <xQueueGenericSend>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24
 800694c:	e008      	b.n	8006960 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <xTimerGenericCommand+0x98>)
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f107 0110 	add.w	r1, r7, #16
 8006956:	2300      	movs	r3, #0
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	f7fe fd61 	bl	8005420 <xQueueGenericSendFromISR>
 800695e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006962:	4618      	mov	r0, r3
 8006964:	3728      	adds	r7, #40	; 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000d44 	.word	0x20000d44

08006970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800697a:	4b22      	ldr	r3, [pc, #136]	; (8006a04 <prvProcessExpiredTimer+0x94>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3304      	adds	r3, #4
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe fb1d 	bl	8004fc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d022      	beq.n	80069e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	18d1      	adds	r1, r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	6978      	ldr	r0, [r7, #20]
 80069aa:	f000 f8d1 	bl	8006b50 <prvInsertTimerInActiveList>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01f      	beq.n	80069f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069b4:	2300      	movs	r3, #0
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	2300      	movs	r3, #0
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	2100      	movs	r1, #0
 80069be:	6978      	ldr	r0, [r7, #20]
 80069c0:	f7ff ff88 	bl	80068d4 <xTimerGenericCommand>
 80069c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d113      	bne.n	80069f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60fb      	str	r3, [r7, #12]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e8:	f023 0301 	bic.w	r3, r3, #1
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	6978      	ldr	r0, [r7, #20]
 80069fa:	4798      	blx	r3
}
 80069fc:	bf00      	nop
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000d3c 	.word	0x20000d3c

08006a08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 f857 	bl	8006ac8 <prvGetNextExpireTime>
 8006a1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f803 	bl	8006a2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a26:	f000 f8d5 	bl	8006bd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a2a:	e7f1      	b.n	8006a10 <prvTimerTask+0x8>

08006a2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a36:	f7ff fa39 	bl	8005eac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f866 	bl	8006b10 <prvSampleTimeNow>
 8006a44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d130      	bne.n	8006aae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <prvProcessTimerOrBlockTask+0x3c>
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d806      	bhi.n	8006a68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a5a:	f7ff fa35 	bl	8005ec8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff85 	bl	8006970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a66:	e024      	b.n	8006ab2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d008      	beq.n	8006a80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <prvProcessTimerOrBlockTask+0x90>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <prvProcessTimerOrBlockTask+0x50>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <prvProcessTimerOrBlockTask+0x52>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a80:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <prvProcessTimerOrBlockTask+0x94>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f7fe ff7d 	bl	800598c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a92:	f7ff fa19 	bl	8005ec8 <xTaskResumeAll>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <prvProcessTimerOrBlockTask+0x98>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	f3bf 8f6f 	isb	sy
}
 8006aac:	e001      	b.n	8006ab2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006aae:	f7ff fa0b 	bl	8005ec8 <xTaskResumeAll>
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000d40 	.word	0x20000d40
 8006ac0:	20000d44 	.word	0x20000d44
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <prvGetNextExpireTime+0x44>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <prvGetNextExpireTime+0x16>
 8006ada:	2201      	movs	r2, #1
 8006adc:	e000      	b.n	8006ae0 <prvGetNextExpireTime+0x18>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <prvGetNextExpireTime+0x44>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e001      	b.n	8006afc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006afc:	68fb      	ldr	r3, [r7, #12]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000d3c 	.word	0x20000d3c

08006b10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b18:	f7ff fa74 	bl	8006004 <xTaskGetTickCount>
 8006b1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <prvSampleTimeNow+0x3c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d205      	bcs.n	8006b34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b28:	f000 f936 	bl	8006d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e002      	b.n	8006b3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b3a:	4a04      	ldr	r2, [pc, #16]	; (8006b4c <prvSampleTimeNow+0x3c>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000d4c 	.word	0x20000d4c

08006b50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d812      	bhi.n	8006b9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d302      	bcc.n	8006b8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e01b      	b.n	8006bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b8a:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <prvInsertTimerInActiveList+0x7c>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f7fe f9de 	bl	8004f56 <vListInsert>
 8006b9a:	e012      	b.n	8006bc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d206      	bcs.n	8006bb2 <prvInsertTimerInActiveList+0x62>
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e007      	b.n	8006bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bb2:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <prvInsertTimerInActiveList+0x80>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7fe f9ca 	bl	8004f56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bc2:	697b      	ldr	r3, [r7, #20]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000d40 	.word	0x20000d40
 8006bd0:	20000d3c 	.word	0x20000d3c

08006bd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08e      	sub	sp, #56	; 0x38
 8006bd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bda:	e0ca      	b.n	8006d72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da18      	bge.n	8006c14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	3304      	adds	r3, #4
 8006be6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fb      	str	r3, [r7, #28]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0a:	6850      	ldr	r0, [r2, #4]
 8006c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0e:	6892      	ldr	r2, [r2, #8]
 8006c10:	4611      	mov	r1, r2
 8006c12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f2c0 80aa 	blt.w	8006d70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe f9cb 	bl	8004fc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c32:	463b      	mov	r3, r7
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff ff6b 	bl	8006b10 <prvSampleTimeNow>
 8006c3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b09      	cmp	r3, #9
 8006c40:	f200 8097 	bhi.w	8006d72 <prvProcessReceivedCommands+0x19e>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <prvProcessReceivedCommands+0x78>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c75 	.word	0x08006c75
 8006c50:	08006c75 	.word	0x08006c75
 8006c54:	08006c75 	.word	0x08006c75
 8006c58:	08006ce9 	.word	0x08006ce9
 8006c5c:	08006cfd 	.word	0x08006cfd
 8006c60:	08006d47 	.word	0x08006d47
 8006c64:	08006c75 	.word	0x08006c75
 8006c68:	08006c75 	.word	0x08006c75
 8006c6c:	08006ce9 	.word	0x08006ce9
 8006c70:	08006cfd 	.word	0x08006cfd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	18d1      	adds	r1, r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c94:	f7ff ff5c 	bl	8006b50 <prvInsertTimerInActiveList>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d069      	beq.n	8006d72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d05e      	beq.n	8006d72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	441a      	add	r2, r3
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc6:	f7ff fe05 	bl	80068d4 <xTimerGenericCommand>
 8006cca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d14f      	bne.n	8006d72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	61bb      	str	r3, [r7, #24]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cee:	f023 0301 	bic.w	r3, r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006cfa:	e03a      	b.n	8006d72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	617b      	str	r3, [r7, #20]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	18d1      	adds	r1, r2, r3
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d40:	f7ff ff06 	bl	8006b50 <prvInsertTimerInActiveList>
					break;
 8006d44:	e015      	b.n	8006d72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d56:	f000 fbdb 	bl	8007510 <vPortFree>
 8006d5a:	e00a      	b.n	8006d72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d6e:	e000      	b.n	8006d72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <prvProcessReceivedCommands+0x1c0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	1d39      	adds	r1, r7, #4
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fbec 	bl	8005558 <xQueueReceive>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f47f af2a 	bne.w	8006bdc <prvProcessReceivedCommands+0x8>
	}
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	3730      	adds	r7, #48	; 0x30
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000d44 	.word	0x20000d44

08006d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d9e:	e048      	b.n	8006e32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006da0:	4b2d      	ldr	r3, [pc, #180]	; (8006e58 <prvSwitchTimerLists+0xc0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006daa:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <prvSwitchTimerLists+0xc0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe f905 	bl	8004fc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d02e      	beq.n	8006e32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d90e      	bls.n	8006e04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006df2:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <prvSwitchTimerLists+0xc0>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7fe f8aa 	bl	8004f56 <vListInsert>
 8006e02:	e016      	b.n	8006e32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e04:	2300      	movs	r3, #0
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff fd60 	bl	80068d4 <xTimerGenericCommand>
 8006e14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	603b      	str	r3, [r7, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <prvSwitchTimerLists+0xc0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1b1      	bne.n	8006da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <prvSwitchTimerLists+0xc0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <prvSwitchTimerLists+0xc4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <prvSwitchTimerLists+0xc0>)
 8006e48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e4a:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <prvSwitchTimerLists+0xc4>)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	6013      	str	r3, [r2, #0]
}
 8006e50:	bf00      	nop
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000d3c 	.word	0x20000d3c
 8006e5c:	20000d40 	.word	0x20000d40

08006e60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e66:	f000 f965 	bl	8007134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e6a:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <prvCheckForValidListAndQueue+0x60>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d120      	bne.n	8006eb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e72:	4814      	ldr	r0, [pc, #80]	; (8006ec4 <prvCheckForValidListAndQueue+0x64>)
 8006e74:	f7fe f81e 	bl	8004eb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e78:	4813      	ldr	r0, [pc, #76]	; (8006ec8 <prvCheckForValidListAndQueue+0x68>)
 8006e7a:	f7fe f81b 	bl	8004eb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e7e:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <prvCheckForValidListAndQueue+0x6c>)
 8006e80:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <prvCheckForValidListAndQueue+0x64>)
 8006e82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <prvCheckForValidListAndQueue+0x70>)
 8006e86:	4a10      	ldr	r2, [pc, #64]	; (8006ec8 <prvCheckForValidListAndQueue+0x68>)
 8006e88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <prvCheckForValidListAndQueue+0x74>)
 8006e90:	4a11      	ldr	r2, [pc, #68]	; (8006ed8 <prvCheckForValidListAndQueue+0x78>)
 8006e92:	2110      	movs	r1, #16
 8006e94:	200a      	movs	r0, #10
 8006e96:	f7fe f929 	bl	80050ec <xQueueGenericCreateStatic>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <prvCheckForValidListAndQueue+0x60>)
 8006e9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <prvCheckForValidListAndQueue+0x60>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <prvCheckForValidListAndQueue+0x60>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	490b      	ldr	r1, [pc, #44]	; (8006edc <prvCheckForValidListAndQueue+0x7c>)
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fd42 	bl	8005938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eb4:	f000 f96e 	bl	8007194 <vPortExitCritical>
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000d44 	.word	0x20000d44
 8006ec4:	20000d14 	.word	0x20000d14
 8006ec8:	20000d28 	.word	0x20000d28
 8006ecc:	20000d3c 	.word	0x20000d3c
 8006ed0:	20000d40 	.word	0x20000d40
 8006ed4:	20000df0 	.word	0x20000df0
 8006ed8:	20000d50 	.word	0x20000d50
 8006edc:	08008150 	.word	0x08008150

08006ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3b04      	subs	r3, #4
 8006ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3b04      	subs	r3, #4
 8006efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f023 0201 	bic.w	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f10:	4a0c      	ldr	r2, [pc, #48]	; (8006f44 <pxPortInitialiseStack+0x64>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3b14      	subs	r3, #20
 8006f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b04      	subs	r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f06f 0202 	mvn.w	r2, #2
 8006f2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3b20      	subs	r3, #32
 8006f34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	08006f49 	.word	0x08006f49

08006f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <prvTaskExitError+0x54>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5a:	d00a      	beq.n	8006f72 <prvTaskExitError+0x2a>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	60fb      	str	r3, [r7, #12]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <prvTaskExitError+0x28>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60bb      	str	r3, [r7, #8]
}
 8006f84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f86:	bf00      	nop
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0fc      	beq.n	8006f88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	2000000c 	.word	0x2000000c

08006fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <pxCurrentTCBConst2>)
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	f380 8809 	msr	PSP, r0
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	4770      	bx	lr
 8006fbc:	f3af 8000 	nop.w

08006fc0 <pxCurrentTCBConst2>:
 8006fc0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fc8:	4808      	ldr	r0, [pc, #32]	; (8006fec <prvPortStartFirstTask+0x24>)
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f380 8808 	msr	MSP, r0
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8814 	msr	CONTROL, r0
 8006fda:	b662      	cpsie	i
 8006fdc:	b661      	cpsie	f
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	df00      	svc	0
 8006fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fea:	bf00      	nop
 8006fec:	e000ed08 	.word	0xe000ed08

08006ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ff6:	4b46      	ldr	r3, [pc, #280]	; (8007110 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a46      	ldr	r2, [pc, #280]	; (8007114 <xPortStartScheduler+0x124>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x26>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007016:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <xPortStartScheduler+0x120>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a3f      	ldr	r2, [pc, #252]	; (8007118 <xPortStartScheduler+0x128>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10a      	bne.n	8007036 <xPortStartScheduler+0x46>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	60fb      	str	r3, [r7, #12]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007036:	4b39      	ldr	r3, [pc, #228]	; (800711c <xPortStartScheduler+0x12c>)
 8007038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007058:	b2da      	uxtb	r2, r3
 800705a:	4b31      	ldr	r3, [pc, #196]	; (8007120 <xPortStartScheduler+0x130>)
 800705c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800705e:	4b31      	ldr	r3, [pc, #196]	; (8007124 <xPortStartScheduler+0x134>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007064:	e009      	b.n	800707a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007066:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3b01      	subs	r3, #1
 800706c:	4a2d      	ldr	r2, [pc, #180]	; (8007124 <xPortStartScheduler+0x134>)
 800706e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d0ef      	beq.n	8007066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007086:	4b27      	ldr	r3, [pc, #156]	; (8007124 <xPortStartScheduler+0x134>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1c3 0307 	rsb	r3, r3, #7
 800708e:	2b04      	cmp	r3, #4
 8007090:	d00a      	beq.n	80070a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60bb      	str	r3, [r7, #8]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070a8:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <xPortStartScheduler+0x134>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <xPortStartScheduler+0x134>)
 80070b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <xPortStartScheduler+0x134>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <xPortStartScheduler+0x134>)
 80070bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070c6:	4b18      	ldr	r3, [pc, #96]	; (8007128 <xPortStartScheduler+0x138>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a17      	ldr	r2, [pc, #92]	; (8007128 <xPortStartScheduler+0x138>)
 80070cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <xPortStartScheduler+0x138>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a14      	ldr	r2, [pc, #80]	; (8007128 <xPortStartScheduler+0x138>)
 80070d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070de:	f000 f8dd 	bl	800729c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <xPortStartScheduler+0x13c>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070e8:	f000 f8fc 	bl	80072e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070ec:	4b10      	ldr	r3, [pc, #64]	; (8007130 <xPortStartScheduler+0x140>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a0f      	ldr	r2, [pc, #60]	; (8007130 <xPortStartScheduler+0x140>)
 80070f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070f8:	f7ff ff66 	bl	8006fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070fc:	f7ff f84c 	bl	8006198 <vTaskSwitchContext>
	prvTaskExitError();
 8007100:	f7ff ff22 	bl	8006f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000ed00 	.word	0xe000ed00
 8007114:	410fc271 	.word	0x410fc271
 8007118:	410fc270 	.word	0x410fc270
 800711c:	e000e400 	.word	0xe000e400
 8007120:	20000e40 	.word	0x20000e40
 8007124:	20000e44 	.word	0x20000e44
 8007128:	e000ed20 	.word	0xe000ed20
 800712c:	2000000c 	.word	0x2000000c
 8007130:	e000ef34 	.word	0xe000ef34

08007134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	607b      	str	r3, [r7, #4]
}
 800714c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <vPortEnterCritical+0x58>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	4a0d      	ldr	r2, [pc, #52]	; (800718c <vPortEnterCritical+0x58>)
 8007156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <vPortEnterCritical+0x58>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d10f      	bne.n	8007180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <vPortEnterCritical+0x5c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <vPortEnterCritical+0x4c>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	603b      	str	r3, [r7, #0]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <vPortEnterCritical+0x4a>
	}
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	2000000c 	.word	0x2000000c
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800719a:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <vPortExitCritical+0x50>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <vPortExitCritical+0x24>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	607b      	str	r3, [r7, #4]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <vPortExitCritical+0x50>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3b01      	subs	r3, #1
 80071be:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <vPortExitCritical+0x50>)
 80071c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071c2:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <vPortExitCritical+0x50>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <vPortExitCritical+0x42>
 80071ca:	2300      	movs	r3, #0
 80071cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f383 8811 	msr	BASEPRI, r3
}
 80071d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	2000000c 	.word	0x2000000c
	...

080071f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071f0:	f3ef 8009 	mrs	r0, PSP
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4b15      	ldr	r3, [pc, #84]	; (8007250 <pxCurrentTCBConst>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	f01e 0f10 	tst.w	lr, #16
 8007200:	bf08      	it	eq
 8007202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720a:	6010      	str	r0, [r2, #0]
 800720c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007214:	f380 8811 	msr	BASEPRI, r0
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f7fe ffba 	bl	8006198 <vTaskSwitchContext>
 8007224:	f04f 0000 	mov.w	r0, #0
 8007228:	f380 8811 	msr	BASEPRI, r0
 800722c:	bc09      	pop	{r0, r3}
 800722e:	6819      	ldr	r1, [r3, #0]
 8007230:	6808      	ldr	r0, [r1, #0]
 8007232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007236:	f01e 0f10 	tst.w	lr, #16
 800723a:	bf08      	it	eq
 800723c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007240:	f380 8809 	msr	PSP, r0
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst>:
 8007250:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007272:	f7fe fed7 	bl	8006024 <xTaskIncrementTick>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <xPortSysTickHandler+0x40>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f383 8811 	msr	BASEPRI, r3
}
 800728e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <vPortSetupTimerInterrupt+0x34>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <vPortSetupTimerInterrupt+0x38>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <vPortSetupTimerInterrupt+0x3c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <vPortSetupTimerInterrupt+0x40>)
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <vPortSetupTimerInterrupt+0x44>)
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <vPortSetupTimerInterrupt+0x34>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	e000e010 	.word	0xe000e010
 80072d4:	e000e018 	.word	0xe000e018
 80072d8:	20000000 	.word	0x20000000
 80072dc:	10624dd3 	.word	0x10624dd3
 80072e0:	e000e014 	.word	0xe000e014

080072e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072f4 <vPortEnableVFP+0x10>
 80072e8:	6801      	ldr	r1, [r0, #0]
 80072ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ee:	6001      	str	r1, [r0, #0]
 80072f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072f2:	bf00      	nop
 80072f4:	e000ed88 	.word	0xe000ed88

080072f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072fe:	f3ef 8305 	mrs	r3, IPSR
 8007302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b0f      	cmp	r3, #15
 8007308:	d914      	bls.n	8007334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800730a:	4a17      	ldr	r2, [pc, #92]	; (8007368 <vPortValidateInterruptPriority+0x70>)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007314:	4b15      	ldr	r3, [pc, #84]	; (800736c <vPortValidateInterruptPriority+0x74>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	7afa      	ldrb	r2, [r7, #11]
 800731a:	429a      	cmp	r2, r3
 800731c:	d20a      	bcs.n	8007334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <vPortValidateInterruptPriority+0x78>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800733c:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <vPortValidateInterruptPriority+0x7c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d90a      	bls.n	800735a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	603b      	str	r3, [r7, #0]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <vPortValidateInterruptPriority+0x60>
	}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	e000e3f0 	.word	0xe000e3f0
 800736c:	20000e40 	.word	0x20000e40
 8007370:	e000ed0c 	.word	0xe000ed0c
 8007374:	20000e44 	.word	0x20000e44

08007378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08a      	sub	sp, #40	; 0x28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007384:	f7fe fd92 	bl	8005eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007388:	4b5b      	ldr	r3, [pc, #364]	; (80074f8 <pvPortMalloc+0x180>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007390:	f000 f920 	bl	80075d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007394:	4b59      	ldr	r3, [pc, #356]	; (80074fc <pvPortMalloc+0x184>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	f040 8093 	bne.w	80074c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01d      	beq.n	80073e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073a8:	2208      	movs	r2, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f023 0307 	bic.w	r3, r3, #7
 80073c0:	3308      	adds	r3, #8
 80073c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <pvPortMalloc+0x6c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	617b      	str	r3, [r7, #20]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d06e      	beq.n	80074c8 <pvPortMalloc+0x150>
 80073ea:	4b45      	ldr	r3, [pc, #276]	; (8007500 <pvPortMalloc+0x188>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d869      	bhi.n	80074c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073f4:	4b43      	ldr	r3, [pc, #268]	; (8007504 <pvPortMalloc+0x18c>)
 80073f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073f8:	4b42      	ldr	r3, [pc, #264]	; (8007504 <pvPortMalloc+0x18c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073fe:	e004      	b.n	800740a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d903      	bls.n	800741c <pvPortMalloc+0xa4>
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f1      	bne.n	8007400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800741c:	4b36      	ldr	r3, [pc, #216]	; (80074f8 <pvPortMalloc+0x180>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007422:	429a      	cmp	r2, r3
 8007424:	d050      	beq.n	80074c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2208      	movs	r2, #8
 800742c:	4413      	add	r3, r2
 800742e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	1ad2      	subs	r2, r2, r3
 8007440:	2308      	movs	r3, #8
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	429a      	cmp	r2, r3
 8007446:	d91f      	bls.n	8007488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <pvPortMalloc+0xf8>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	613b      	str	r3, [r7, #16]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	1ad2      	subs	r2, r2, r3
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007482:	69b8      	ldr	r0, [r7, #24]
 8007484:	f000 f908 	bl	8007698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007488:	4b1d      	ldr	r3, [pc, #116]	; (8007500 <pvPortMalloc+0x188>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	4a1b      	ldr	r2, [pc, #108]	; (8007500 <pvPortMalloc+0x188>)
 8007494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007496:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <pvPortMalloc+0x188>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <pvPortMalloc+0x190>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d203      	bcs.n	80074aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <pvPortMalloc+0x188>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <pvPortMalloc+0x190>)
 80074a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	4b13      	ldr	r3, [pc, #76]	; (80074fc <pvPortMalloc+0x184>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <pvPortMalloc+0x194>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	4a11      	ldr	r2, [pc, #68]	; (800750c <pvPortMalloc+0x194>)
 80074c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074c8:	f7fe fcfe 	bl	8005ec8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <pvPortMalloc+0x174>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <pvPortMalloc+0x172>
	return pvReturn;
 80074ec:	69fb      	ldr	r3, [r7, #28]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3728      	adds	r7, #40	; 0x28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20004a50 	.word	0x20004a50
 80074fc:	20004a64 	.word	0x20004a64
 8007500:	20004a54 	.word	0x20004a54
 8007504:	20004a48 	.word	0x20004a48
 8007508:	20004a58 	.word	0x20004a58
 800750c:	20004a5c 	.word	0x20004a5c

08007510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04d      	beq.n	80075be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007522:	2308      	movs	r3, #8
 8007524:	425b      	negs	r3, r3
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <vPortFree+0xb8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <vPortFree+0x44>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60fb      	str	r3, [r7, #12]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <vPortFree+0x62>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	60bb      	str	r3, [r7, #8]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <vPortFree+0xb8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01e      	beq.n	80075be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11a      	bne.n	80075be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <vPortFree+0xb8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	43db      	mvns	r3, r3
 8007592:	401a      	ands	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007598:	f7fe fc88 	bl	8005eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <vPortFree+0xbc>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	4a09      	ldr	r2, [pc, #36]	; (80075cc <vPortFree+0xbc>)
 80075a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075aa:	6938      	ldr	r0, [r7, #16]
 80075ac:	f000 f874 	bl	8007698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <vPortFree+0xc0>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	4a06      	ldr	r2, [pc, #24]	; (80075d0 <vPortFree+0xc0>)
 80075b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075ba:	f7fe fc85 	bl	8005ec8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075be:	bf00      	nop
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20004a64 	.word	0x20004a64
 80075cc:	20004a54 	.word	0x20004a54
 80075d0:	20004a60 	.word	0x20004a60

080075d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075e0:	4b27      	ldr	r3, [pc, #156]	; (8007680 <prvHeapInit+0xac>)
 80075e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00c      	beq.n	8007608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3307      	adds	r3, #7
 80075f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0307 	bic.w	r3, r3, #7
 80075fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	4a1f      	ldr	r2, [pc, #124]	; (8007680 <prvHeapInit+0xac>)
 8007604:	4413      	add	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800760c:	4a1d      	ldr	r2, [pc, #116]	; (8007684 <prvHeapInit+0xb0>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007612:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <prvHeapInit+0xb0>)
 8007614:	2200      	movs	r2, #0
 8007616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	4413      	add	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007620:	2208      	movs	r2, #8
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0307 	bic.w	r3, r3, #7
 800762e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a15      	ldr	r2, [pc, #84]	; (8007688 <prvHeapInit+0xb4>)
 8007634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <prvHeapInit+0xb4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2200      	movs	r2, #0
 800763c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800763e:	4b12      	ldr	r3, [pc, #72]	; (8007688 <prvHeapInit+0xb4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007654:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <prvHeapInit+0xb4>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4a0a      	ldr	r2, [pc, #40]	; (800768c <prvHeapInit+0xb8>)
 8007662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <prvHeapInit+0xbc>)
 800766a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <prvHeapInit+0xc0>)
 800766e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007672:	601a      	str	r2, [r3, #0]
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000e48 	.word	0x20000e48
 8007684:	20004a48 	.word	0x20004a48
 8007688:	20004a50 	.word	0x20004a50
 800768c:	20004a58 	.word	0x20004a58
 8007690:	20004a54 	.word	0x20004a54
 8007694:	20004a64 	.word	0x20004a64

08007698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076a0:	4b28      	ldr	r3, [pc, #160]	; (8007744 <prvInsertBlockIntoFreeList+0xac>)
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	e002      	b.n	80076ac <prvInsertBlockIntoFreeList+0x14>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d8f7      	bhi.n	80076a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4413      	add	r3, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d108      	bne.n	80076da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	441a      	add	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	441a      	add	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d118      	bne.n	8007720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <prvInsertBlockIntoFreeList+0xb0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d00d      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	441a      	add	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e008      	b.n	8007728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <prvInsertBlockIntoFreeList+0xb0>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	e003      	b.n	8007728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	429a      	cmp	r2, r3
 800772e:	d002      	beq.n	8007736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	20004a48 	.word	0x20004a48
 8007748:	20004a50 	.word	0x20004a50

0800774c <__errno>:
 800774c:	4b01      	ldr	r3, [pc, #4]	; (8007754 <__errno+0x8>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000010 	.word	0x20000010

08007758 <__libc_init_array>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	4d0d      	ldr	r5, [pc, #52]	; (8007790 <__libc_init_array+0x38>)
 800775c:	4c0d      	ldr	r4, [pc, #52]	; (8007794 <__libc_init_array+0x3c>)
 800775e:	1b64      	subs	r4, r4, r5
 8007760:	10a4      	asrs	r4, r4, #2
 8007762:	2600      	movs	r6, #0
 8007764:	42a6      	cmp	r6, r4
 8007766:	d109      	bne.n	800777c <__libc_init_array+0x24>
 8007768:	4d0b      	ldr	r5, [pc, #44]	; (8007798 <__libc_init_array+0x40>)
 800776a:	4c0c      	ldr	r4, [pc, #48]	; (800779c <__libc_init_array+0x44>)
 800776c:	f000 fcb8 	bl	80080e0 <_init>
 8007770:	1b64      	subs	r4, r4, r5
 8007772:	10a4      	asrs	r4, r4, #2
 8007774:	2600      	movs	r6, #0
 8007776:	42a6      	cmp	r6, r4
 8007778:	d105      	bne.n	8007786 <__libc_init_array+0x2e>
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007780:	4798      	blx	r3
 8007782:	3601      	adds	r6, #1
 8007784:	e7ee      	b.n	8007764 <__libc_init_array+0xc>
 8007786:	f855 3b04 	ldr.w	r3, [r5], #4
 800778a:	4798      	blx	r3
 800778c:	3601      	adds	r6, #1
 800778e:	e7f2      	b.n	8007776 <__libc_init_array+0x1e>
 8007790:	08008254 	.word	0x08008254
 8007794:	08008254 	.word	0x08008254
 8007798:	08008254 	.word	0x08008254
 800779c:	08008258 	.word	0x08008258

080077a0 <__retarget_lock_acquire_recursive>:
 80077a0:	4770      	bx	lr

080077a2 <__retarget_lock_release_recursive>:
 80077a2:	4770      	bx	lr

080077a4 <memcpy>:
 80077a4:	440a      	add	r2, r1
 80077a6:	4291      	cmp	r1, r2
 80077a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ac:	d100      	bne.n	80077b0 <memcpy+0xc>
 80077ae:	4770      	bx	lr
 80077b0:	b510      	push	{r4, lr}
 80077b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ba:	4291      	cmp	r1, r2
 80077bc:	d1f9      	bne.n	80077b2 <memcpy+0xe>
 80077be:	bd10      	pop	{r4, pc}

080077c0 <memset>:
 80077c0:	4402      	add	r2, r0
 80077c2:	4603      	mov	r3, r0
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d100      	bne.n	80077ca <memset+0xa>
 80077c8:	4770      	bx	lr
 80077ca:	f803 1b01 	strb.w	r1, [r3], #1
 80077ce:	e7f9      	b.n	80077c4 <memset+0x4>

080077d0 <_malloc_r>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	1ccd      	adds	r5, r1, #3
 80077d4:	f025 0503 	bic.w	r5, r5, #3
 80077d8:	3508      	adds	r5, #8
 80077da:	2d0c      	cmp	r5, #12
 80077dc:	bf38      	it	cc
 80077de:	250c      	movcc	r5, #12
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	4606      	mov	r6, r0
 80077e4:	db01      	blt.n	80077ea <_malloc_r+0x1a>
 80077e6:	42a9      	cmp	r1, r5
 80077e8:	d903      	bls.n	80077f2 <_malloc_r+0x22>
 80077ea:	230c      	movs	r3, #12
 80077ec:	6033      	str	r3, [r6, #0]
 80077ee:	2000      	movs	r0, #0
 80077f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f2:	f000 f8e1 	bl	80079b8 <__malloc_lock>
 80077f6:	4921      	ldr	r1, [pc, #132]	; (800787c <_malloc_r+0xac>)
 80077f8:	680a      	ldr	r2, [r1, #0]
 80077fa:	4614      	mov	r4, r2
 80077fc:	b99c      	cbnz	r4, 8007826 <_malloc_r+0x56>
 80077fe:	4f20      	ldr	r7, [pc, #128]	; (8007880 <_malloc_r+0xb0>)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	b923      	cbnz	r3, 800780e <_malloc_r+0x3e>
 8007804:	4621      	mov	r1, r4
 8007806:	4630      	mov	r0, r6
 8007808:	f000 f8a6 	bl	8007958 <_sbrk_r>
 800780c:	6038      	str	r0, [r7, #0]
 800780e:	4629      	mov	r1, r5
 8007810:	4630      	mov	r0, r6
 8007812:	f000 f8a1 	bl	8007958 <_sbrk_r>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	d123      	bne.n	8007862 <_malloc_r+0x92>
 800781a:	230c      	movs	r3, #12
 800781c:	6033      	str	r3, [r6, #0]
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f8d0 	bl	80079c4 <__malloc_unlock>
 8007824:	e7e3      	b.n	80077ee <_malloc_r+0x1e>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	1b5b      	subs	r3, r3, r5
 800782a:	d417      	bmi.n	800785c <_malloc_r+0x8c>
 800782c:	2b0b      	cmp	r3, #11
 800782e:	d903      	bls.n	8007838 <_malloc_r+0x68>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	441c      	add	r4, r3
 8007834:	6025      	str	r5, [r4, #0]
 8007836:	e004      	b.n	8007842 <_malloc_r+0x72>
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	42a2      	cmp	r2, r4
 800783c:	bf0c      	ite	eq
 800783e:	600b      	streq	r3, [r1, #0]
 8007840:	6053      	strne	r3, [r2, #4]
 8007842:	4630      	mov	r0, r6
 8007844:	f000 f8be 	bl	80079c4 <__malloc_unlock>
 8007848:	f104 000b 	add.w	r0, r4, #11
 800784c:	1d23      	adds	r3, r4, #4
 800784e:	f020 0007 	bic.w	r0, r0, #7
 8007852:	1ac2      	subs	r2, r0, r3
 8007854:	d0cc      	beq.n	80077f0 <_malloc_r+0x20>
 8007856:	1a1b      	subs	r3, r3, r0
 8007858:	50a3      	str	r3, [r4, r2]
 800785a:	e7c9      	b.n	80077f0 <_malloc_r+0x20>
 800785c:	4622      	mov	r2, r4
 800785e:	6864      	ldr	r4, [r4, #4]
 8007860:	e7cc      	b.n	80077fc <_malloc_r+0x2c>
 8007862:	1cc4      	adds	r4, r0, #3
 8007864:	f024 0403 	bic.w	r4, r4, #3
 8007868:	42a0      	cmp	r0, r4
 800786a:	d0e3      	beq.n	8007834 <_malloc_r+0x64>
 800786c:	1a21      	subs	r1, r4, r0
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f872 	bl	8007958 <_sbrk_r>
 8007874:	3001      	adds	r0, #1
 8007876:	d1dd      	bne.n	8007834 <_malloc_r+0x64>
 8007878:	e7cf      	b.n	800781a <_malloc_r+0x4a>
 800787a:	bf00      	nop
 800787c:	20004a68 	.word	0x20004a68
 8007880:	20004a6c 	.word	0x20004a6c

08007884 <cleanup_glue>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	460c      	mov	r4, r1
 8007888:	6809      	ldr	r1, [r1, #0]
 800788a:	4605      	mov	r5, r0
 800788c:	b109      	cbz	r1, 8007892 <cleanup_glue+0xe>
 800788e:	f7ff fff9 	bl	8007884 <cleanup_glue>
 8007892:	4621      	mov	r1, r4
 8007894:	4628      	mov	r0, r5
 8007896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789a:	f000 b899 	b.w	80079d0 <_free_r>
	...

080078a0 <_reclaim_reent>:
 80078a0:	4b2c      	ldr	r3, [pc, #176]	; (8007954 <_reclaim_reent+0xb4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4283      	cmp	r3, r0
 80078a6:	b570      	push	{r4, r5, r6, lr}
 80078a8:	4604      	mov	r4, r0
 80078aa:	d051      	beq.n	8007950 <_reclaim_reent+0xb0>
 80078ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078ae:	b143      	cbz	r3, 80078c2 <_reclaim_reent+0x22>
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d14a      	bne.n	800794c <_reclaim_reent+0xac>
 80078b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b8:	6819      	ldr	r1, [r3, #0]
 80078ba:	b111      	cbz	r1, 80078c2 <_reclaim_reent+0x22>
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 f887 	bl	80079d0 <_free_r>
 80078c2:	6961      	ldr	r1, [r4, #20]
 80078c4:	b111      	cbz	r1, 80078cc <_reclaim_reent+0x2c>
 80078c6:	4620      	mov	r0, r4
 80078c8:	f000 f882 	bl	80079d0 <_free_r>
 80078cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80078ce:	b111      	cbz	r1, 80078d6 <_reclaim_reent+0x36>
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 f87d 	bl	80079d0 <_free_r>
 80078d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80078d8:	b111      	cbz	r1, 80078e0 <_reclaim_reent+0x40>
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 f878 	bl	80079d0 <_free_r>
 80078e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80078e2:	b111      	cbz	r1, 80078ea <_reclaim_reent+0x4a>
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f873 	bl	80079d0 <_free_r>
 80078ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078ec:	b111      	cbz	r1, 80078f4 <_reclaim_reent+0x54>
 80078ee:	4620      	mov	r0, r4
 80078f0:	f000 f86e 	bl	80079d0 <_free_r>
 80078f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80078f6:	b111      	cbz	r1, 80078fe <_reclaim_reent+0x5e>
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 f869 	bl	80079d0 <_free_r>
 80078fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007900:	b111      	cbz	r1, 8007908 <_reclaim_reent+0x68>
 8007902:	4620      	mov	r0, r4
 8007904:	f000 f864 	bl	80079d0 <_free_r>
 8007908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800790a:	b111      	cbz	r1, 8007912 <_reclaim_reent+0x72>
 800790c:	4620      	mov	r0, r4
 800790e:	f000 f85f 	bl	80079d0 <_free_r>
 8007912:	69a3      	ldr	r3, [r4, #24]
 8007914:	b1e3      	cbz	r3, 8007950 <_reclaim_reent+0xb0>
 8007916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007918:	4620      	mov	r0, r4
 800791a:	4798      	blx	r3
 800791c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800791e:	b1b9      	cbz	r1, 8007950 <_reclaim_reent+0xb0>
 8007920:	4620      	mov	r0, r4
 8007922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007926:	f7ff bfad 	b.w	8007884 <cleanup_glue>
 800792a:	5949      	ldr	r1, [r1, r5]
 800792c:	b941      	cbnz	r1, 8007940 <_reclaim_reent+0xa0>
 800792e:	3504      	adds	r5, #4
 8007930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007932:	2d80      	cmp	r5, #128	; 0x80
 8007934:	68d9      	ldr	r1, [r3, #12]
 8007936:	d1f8      	bne.n	800792a <_reclaim_reent+0x8a>
 8007938:	4620      	mov	r0, r4
 800793a:	f000 f849 	bl	80079d0 <_free_r>
 800793e:	e7ba      	b.n	80078b6 <_reclaim_reent+0x16>
 8007940:	680e      	ldr	r6, [r1, #0]
 8007942:	4620      	mov	r0, r4
 8007944:	f000 f844 	bl	80079d0 <_free_r>
 8007948:	4631      	mov	r1, r6
 800794a:	e7ef      	b.n	800792c <_reclaim_reent+0x8c>
 800794c:	2500      	movs	r5, #0
 800794e:	e7ef      	b.n	8007930 <_reclaim_reent+0x90>
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	bf00      	nop
 8007954:	20000010 	.word	0x20000010

08007958 <_sbrk_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d06      	ldr	r5, [pc, #24]	; (8007974 <_sbrk_r+0x1c>)
 800795c:	2300      	movs	r3, #0
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	f7f9 ff5a 	bl	800181c <_sbrk>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d102      	bne.n	8007972 <_sbrk_r+0x1a>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	b103      	cbz	r3, 8007972 <_sbrk_r+0x1a>
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	200057f0 	.word	0x200057f0

08007978 <siprintf>:
 8007978:	b40e      	push	{r1, r2, r3}
 800797a:	b500      	push	{lr}
 800797c:	b09c      	sub	sp, #112	; 0x70
 800797e:	ab1d      	add	r3, sp, #116	; 0x74
 8007980:	9002      	str	r0, [sp, #8]
 8007982:	9006      	str	r0, [sp, #24]
 8007984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007988:	4809      	ldr	r0, [pc, #36]	; (80079b0 <siprintf+0x38>)
 800798a:	9107      	str	r1, [sp, #28]
 800798c:	9104      	str	r1, [sp, #16]
 800798e:	4909      	ldr	r1, [pc, #36]	; (80079b4 <siprintf+0x3c>)
 8007990:	f853 2b04 	ldr.w	r2, [r3], #4
 8007994:	9105      	str	r1, [sp, #20]
 8007996:	6800      	ldr	r0, [r0, #0]
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	a902      	add	r1, sp, #8
 800799c:	f000 f8c4 	bl	8007b28 <_svfiprintf_r>
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	b01c      	add	sp, #112	; 0x70
 80079a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079ac:	b003      	add	sp, #12
 80079ae:	4770      	bx	lr
 80079b0:	20000010 	.word	0x20000010
 80079b4:	ffff0208 	.word	0xffff0208

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_lock+0x8>)
 80079ba:	f7ff bef1 	b.w	80077a0 <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	200057e8 	.word	0x200057e8

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__malloc_unlock+0x8>)
 80079c6:	f7ff beec 	b.w	80077a2 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	200057e8 	.word	0x200057e8

080079d0 <_free_r>:
 80079d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d048      	beq.n	8007a68 <_free_r+0x98>
 80079d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079da:	9001      	str	r0, [sp, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f1a1 0404 	sub.w	r4, r1, #4
 80079e2:	bfb8      	it	lt
 80079e4:	18e4      	addlt	r4, r4, r3
 80079e6:	f7ff ffe7 	bl	80079b8 <__malloc_lock>
 80079ea:	4a20      	ldr	r2, [pc, #128]	; (8007a6c <_free_r+0x9c>)
 80079ec:	9801      	ldr	r0, [sp, #4]
 80079ee:	6813      	ldr	r3, [r2, #0]
 80079f0:	4615      	mov	r5, r2
 80079f2:	b933      	cbnz	r3, 8007a02 <_free_r+0x32>
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	6014      	str	r4, [r2, #0]
 80079f8:	b003      	add	sp, #12
 80079fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079fe:	f7ff bfe1 	b.w	80079c4 <__malloc_unlock>
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	d90b      	bls.n	8007a1e <_free_r+0x4e>
 8007a06:	6821      	ldr	r1, [r4, #0]
 8007a08:	1862      	adds	r2, r4, r1
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bf04      	itt	eq
 8007a0e:	681a      	ldreq	r2, [r3, #0]
 8007a10:	685b      	ldreq	r3, [r3, #4]
 8007a12:	6063      	str	r3, [r4, #4]
 8007a14:	bf04      	itt	eq
 8007a16:	1852      	addeq	r2, r2, r1
 8007a18:	6022      	streq	r2, [r4, #0]
 8007a1a:	602c      	str	r4, [r5, #0]
 8007a1c:	e7ec      	b.n	80079f8 <_free_r+0x28>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b10b      	cbz	r3, 8007a28 <_free_r+0x58>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d9fa      	bls.n	8007a1e <_free_r+0x4e>
 8007a28:	6811      	ldr	r1, [r2, #0]
 8007a2a:	1855      	adds	r5, r2, r1
 8007a2c:	42a5      	cmp	r5, r4
 8007a2e:	d10b      	bne.n	8007a48 <_free_r+0x78>
 8007a30:	6824      	ldr	r4, [r4, #0]
 8007a32:	4421      	add	r1, r4
 8007a34:	1854      	adds	r4, r2, r1
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	d1dd      	bne.n	80079f8 <_free_r+0x28>
 8007a3c:	681c      	ldr	r4, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6053      	str	r3, [r2, #4]
 8007a42:	4421      	add	r1, r4
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	e7d7      	b.n	80079f8 <_free_r+0x28>
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x80>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	e7d3      	b.n	80079f8 <_free_r+0x28>
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	1961      	adds	r1, r4, r5
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf04      	itt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	6063      	str	r3, [r4, #4]
 8007a5e:	bf04      	itt	eq
 8007a60:	1949      	addeq	r1, r1, r5
 8007a62:	6021      	streq	r1, [r4, #0]
 8007a64:	6054      	str	r4, [r2, #4]
 8007a66:	e7c7      	b.n	80079f8 <_free_r+0x28>
 8007a68:	b003      	add	sp, #12
 8007a6a:	bd30      	pop	{r4, r5, pc}
 8007a6c:	20004a68 	.word	0x20004a68

08007a70 <__ssputs_r>:
 8007a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	688e      	ldr	r6, [r1, #8]
 8007a76:	429e      	cmp	r6, r3
 8007a78:	4682      	mov	sl, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	4690      	mov	r8, r2
 8007a7e:	461f      	mov	r7, r3
 8007a80:	d838      	bhi.n	8007af4 <__ssputs_r+0x84>
 8007a82:	898a      	ldrh	r2, [r1, #12]
 8007a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a88:	d032      	beq.n	8007af0 <__ssputs_r+0x80>
 8007a8a:	6825      	ldr	r5, [r4, #0]
 8007a8c:	6909      	ldr	r1, [r1, #16]
 8007a8e:	eba5 0901 	sub.w	r9, r5, r1
 8007a92:	6965      	ldr	r5, [r4, #20]
 8007a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	444b      	add	r3, r9
 8007aa0:	106d      	asrs	r5, r5, #1
 8007aa2:	429d      	cmp	r5, r3
 8007aa4:	bf38      	it	cc
 8007aa6:	461d      	movcc	r5, r3
 8007aa8:	0553      	lsls	r3, r2, #21
 8007aaa:	d531      	bpl.n	8007b10 <__ssputs_r+0xa0>
 8007aac:	4629      	mov	r1, r5
 8007aae:	f7ff fe8f 	bl	80077d0 <_malloc_r>
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	b950      	cbnz	r0, 8007acc <__ssputs_r+0x5c>
 8007ab6:	230c      	movs	r3, #12
 8007ab8:	f8ca 3000 	str.w	r3, [sl]
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac2:	81a3      	strh	r3, [r4, #12]
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007acc:	6921      	ldr	r1, [r4, #16]
 8007ace:	464a      	mov	r2, r9
 8007ad0:	f7ff fe68 	bl	80077a4 <memcpy>
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	6126      	str	r6, [r4, #16]
 8007ae2:	6165      	str	r5, [r4, #20]
 8007ae4:	444e      	add	r6, r9
 8007ae6:	eba5 0509 	sub.w	r5, r5, r9
 8007aea:	6026      	str	r6, [r4, #0]
 8007aec:	60a5      	str	r5, [r4, #8]
 8007aee:	463e      	mov	r6, r7
 8007af0:	42be      	cmp	r6, r7
 8007af2:	d900      	bls.n	8007af6 <__ssputs_r+0x86>
 8007af4:	463e      	mov	r6, r7
 8007af6:	4632      	mov	r2, r6
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	4641      	mov	r1, r8
 8007afc:	f000 faa8 	bl	8008050 <memmove>
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	1b9b      	subs	r3, r3, r6
 8007b06:	4432      	add	r2, r6
 8007b08:	60a3      	str	r3, [r4, #8]
 8007b0a:	6022      	str	r2, [r4, #0]
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	e7db      	b.n	8007ac8 <__ssputs_r+0x58>
 8007b10:	462a      	mov	r2, r5
 8007b12:	f000 fab7 	bl	8008084 <_realloc_r>
 8007b16:	4606      	mov	r6, r0
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d1e1      	bne.n	8007ae0 <__ssputs_r+0x70>
 8007b1c:	6921      	ldr	r1, [r4, #16]
 8007b1e:	4650      	mov	r0, sl
 8007b20:	f7ff ff56 	bl	80079d0 <_free_r>
 8007b24:	e7c7      	b.n	8007ab6 <__ssputs_r+0x46>
	...

08007b28 <_svfiprintf_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	4698      	mov	r8, r3
 8007b2e:	898b      	ldrh	r3, [r1, #12]
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	b09d      	sub	sp, #116	; 0x74
 8007b34:	4607      	mov	r7, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	4614      	mov	r4, r2
 8007b3a:	d50e      	bpl.n	8007b5a <_svfiprintf_r+0x32>
 8007b3c:	690b      	ldr	r3, [r1, #16]
 8007b3e:	b963      	cbnz	r3, 8007b5a <_svfiprintf_r+0x32>
 8007b40:	2140      	movs	r1, #64	; 0x40
 8007b42:	f7ff fe45 	bl	80077d0 <_malloc_r>
 8007b46:	6028      	str	r0, [r5, #0]
 8007b48:	6128      	str	r0, [r5, #16]
 8007b4a:	b920      	cbnz	r0, 8007b56 <_svfiprintf_r+0x2e>
 8007b4c:	230c      	movs	r3, #12
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	e0d1      	b.n	8007cfa <_svfiprintf_r+0x1d2>
 8007b56:	2340      	movs	r3, #64	; 0x40
 8007b58:	616b      	str	r3, [r5, #20]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	2320      	movs	r3, #32
 8007b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b68:	2330      	movs	r3, #48	; 0x30
 8007b6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d14 <_svfiprintf_r+0x1ec>
 8007b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b72:	f04f 0901 	mov.w	r9, #1
 8007b76:	4623      	mov	r3, r4
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b7e:	b10a      	cbz	r2, 8007b84 <_svfiprintf_r+0x5c>
 8007b80:	2a25      	cmp	r2, #37	; 0x25
 8007b82:	d1f9      	bne.n	8007b78 <_svfiprintf_r+0x50>
 8007b84:	ebba 0b04 	subs.w	fp, sl, r4
 8007b88:	d00b      	beq.n	8007ba2 <_svfiprintf_r+0x7a>
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4629      	mov	r1, r5
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff ff6d 	bl	8007a70 <__ssputs_r>
 8007b96:	3001      	adds	r0, #1
 8007b98:	f000 80aa 	beq.w	8007cf0 <_svfiprintf_r+0x1c8>
 8007b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9e:	445a      	add	r2, fp
 8007ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80a2 	beq.w	8007cf0 <_svfiprintf_r+0x1c8>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb6:	f10a 0a01 	add.w	sl, sl, #1
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	9307      	str	r3, [sp, #28]
 8007bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc4:	4654      	mov	r4, sl
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bcc:	4851      	ldr	r0, [pc, #324]	; (8007d14 <_svfiprintf_r+0x1ec>)
 8007bce:	f7f8 fb17 	bl	8000200 <memchr>
 8007bd2:	9a04      	ldr	r2, [sp, #16]
 8007bd4:	b9d8      	cbnz	r0, 8007c0e <_svfiprintf_r+0xe6>
 8007bd6:	06d0      	lsls	r0, r2, #27
 8007bd8:	bf44      	itt	mi
 8007bda:	2320      	movmi	r3, #32
 8007bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be0:	0711      	lsls	r1, r2, #28
 8007be2:	bf44      	itt	mi
 8007be4:	232b      	movmi	r3, #43	; 0x2b
 8007be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bea:	f89a 3000 	ldrb.w	r3, [sl]
 8007bee:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf0:	d015      	beq.n	8007c1e <_svfiprintf_r+0xf6>
 8007bf2:	9a07      	ldr	r2, [sp, #28]
 8007bf4:	4654      	mov	r4, sl
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	f04f 0c0a 	mov.w	ip, #10
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c02:	3b30      	subs	r3, #48	; 0x30
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	d94e      	bls.n	8007ca6 <_svfiprintf_r+0x17e>
 8007c08:	b1b0      	cbz	r0, 8007c38 <_svfiprintf_r+0x110>
 8007c0a:	9207      	str	r2, [sp, #28]
 8007c0c:	e014      	b.n	8007c38 <_svfiprintf_r+0x110>
 8007c0e:	eba0 0308 	sub.w	r3, r0, r8
 8007c12:	fa09 f303 	lsl.w	r3, r9, r3
 8007c16:	4313      	orrs	r3, r2
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	46a2      	mov	sl, r4
 8007c1c:	e7d2      	b.n	8007bc4 <_svfiprintf_r+0x9c>
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	1d19      	adds	r1, r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	9103      	str	r1, [sp, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfbb      	ittet	lt
 8007c2a:	425b      	neglt	r3, r3
 8007c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c30:	9307      	strge	r3, [sp, #28]
 8007c32:	9307      	strlt	r3, [sp, #28]
 8007c34:	bfb8      	it	lt
 8007c36:	9204      	strlt	r2, [sp, #16]
 8007c38:	7823      	ldrb	r3, [r4, #0]
 8007c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c3c:	d10c      	bne.n	8007c58 <_svfiprintf_r+0x130>
 8007c3e:	7863      	ldrb	r3, [r4, #1]
 8007c40:	2b2a      	cmp	r3, #42	; 0x2a
 8007c42:	d135      	bne.n	8007cb0 <_svfiprintf_r+0x188>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	1d1a      	adds	r2, r3, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	9203      	str	r2, [sp, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bfb8      	it	lt
 8007c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c54:	3402      	adds	r4, #2
 8007c56:	9305      	str	r3, [sp, #20]
 8007c58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d24 <_svfiprintf_r+0x1fc>
 8007c5c:	7821      	ldrb	r1, [r4, #0]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	4650      	mov	r0, sl
 8007c62:	f7f8 facd 	bl	8000200 <memchr>
 8007c66:	b140      	cbz	r0, 8007c7a <_svfiprintf_r+0x152>
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	eba0 000a 	sub.w	r0, r0, sl
 8007c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c72:	9b04      	ldr	r3, [sp, #16]
 8007c74:	4303      	orrs	r3, r0
 8007c76:	3401      	adds	r4, #1
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7e:	4826      	ldr	r0, [pc, #152]	; (8007d18 <_svfiprintf_r+0x1f0>)
 8007c80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c84:	2206      	movs	r2, #6
 8007c86:	f7f8 fabb 	bl	8000200 <memchr>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d038      	beq.n	8007d00 <_svfiprintf_r+0x1d8>
 8007c8e:	4b23      	ldr	r3, [pc, #140]	; (8007d1c <_svfiprintf_r+0x1f4>)
 8007c90:	bb1b      	cbnz	r3, 8007cda <_svfiprintf_r+0x1b2>
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	3307      	adds	r3, #7
 8007c96:	f023 0307 	bic.w	r3, r3, #7
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca0:	4433      	add	r3, r6
 8007ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca4:	e767      	b.n	8007b76 <_svfiprintf_r+0x4e>
 8007ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007caa:	460c      	mov	r4, r1
 8007cac:	2001      	movs	r0, #1
 8007cae:	e7a5      	b.n	8007bfc <_svfiprintf_r+0xd4>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	3401      	adds	r4, #1
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	f04f 0c0a 	mov.w	ip, #10
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc2:	3a30      	subs	r2, #48	; 0x30
 8007cc4:	2a09      	cmp	r2, #9
 8007cc6:	d903      	bls.n	8007cd0 <_svfiprintf_r+0x1a8>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0c5      	beq.n	8007c58 <_svfiprintf_r+0x130>
 8007ccc:	9105      	str	r1, [sp, #20]
 8007cce:	e7c3      	b.n	8007c58 <_svfiprintf_r+0x130>
 8007cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e7f0      	b.n	8007cbc <_svfiprintf_r+0x194>
 8007cda:	ab03      	add	r3, sp, #12
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	462a      	mov	r2, r5
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <_svfiprintf_r+0x1f8>)
 8007ce2:	a904      	add	r1, sp, #16
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f3af 8000 	nop.w
 8007cea:	1c42      	adds	r2, r0, #1
 8007cec:	4606      	mov	r6, r0
 8007cee:	d1d6      	bne.n	8007c9e <_svfiprintf_r+0x176>
 8007cf0:	89ab      	ldrh	r3, [r5, #12]
 8007cf2:	065b      	lsls	r3, r3, #25
 8007cf4:	f53f af2c 	bmi.w	8007b50 <_svfiprintf_r+0x28>
 8007cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cfa:	b01d      	add	sp, #116	; 0x74
 8007cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d00:	ab03      	add	r3, sp, #12
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	462a      	mov	r2, r5
 8007d06:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <_svfiprintf_r+0x1f8>)
 8007d08:	a904      	add	r1, sp, #16
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f000 f87a 	bl	8007e04 <_printf_i>
 8007d10:	e7eb      	b.n	8007cea <_svfiprintf_r+0x1c2>
 8007d12:	bf00      	nop
 8007d14:	08008218 	.word	0x08008218
 8007d18:	08008222 	.word	0x08008222
 8007d1c:	00000000 	.word	0x00000000
 8007d20:	08007a71 	.word	0x08007a71
 8007d24:	0800821e 	.word	0x0800821e

08007d28 <_printf_common>:
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	4699      	mov	r9, r3
 8007d30:	688a      	ldr	r2, [r1, #8]
 8007d32:	690b      	ldr	r3, [r1, #16]
 8007d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	bfb8      	it	lt
 8007d3c:	4613      	movlt	r3, r2
 8007d3e:	6033      	str	r3, [r6, #0]
 8007d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d44:	4607      	mov	r7, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b10a      	cbz	r2, 8007d4e <_printf_common+0x26>
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	6033      	str	r3, [r6, #0]
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	0699      	lsls	r1, r3, #26
 8007d52:	bf42      	ittt	mi
 8007d54:	6833      	ldrmi	r3, [r6, #0]
 8007d56:	3302      	addmi	r3, #2
 8007d58:	6033      	strmi	r3, [r6, #0]
 8007d5a:	6825      	ldr	r5, [r4, #0]
 8007d5c:	f015 0506 	ands.w	r5, r5, #6
 8007d60:	d106      	bne.n	8007d70 <_printf_common+0x48>
 8007d62:	f104 0a19 	add.w	sl, r4, #25
 8007d66:	68e3      	ldr	r3, [r4, #12]
 8007d68:	6832      	ldr	r2, [r6, #0]
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	42ab      	cmp	r3, r5
 8007d6e:	dc26      	bgt.n	8007dbe <_printf_common+0x96>
 8007d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d74:	1e13      	subs	r3, r2, #0
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	bf18      	it	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	0692      	lsls	r2, r2, #26
 8007d7e:	d42b      	bmi.n	8007dd8 <_printf_common+0xb0>
 8007d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d84:	4649      	mov	r1, r9
 8007d86:	4638      	mov	r0, r7
 8007d88:	47c0      	blx	r8
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d01e      	beq.n	8007dcc <_printf_common+0xa4>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	68e5      	ldr	r5, [r4, #12]
 8007d92:	6832      	ldr	r2, [r6, #0]
 8007d94:	f003 0306 	and.w	r3, r3, #6
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	bf08      	it	eq
 8007d9c:	1aad      	subeq	r5, r5, r2
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	6922      	ldr	r2, [r4, #16]
 8007da2:	bf0c      	ite	eq
 8007da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da8:	2500      	movne	r5, #0
 8007daa:	4293      	cmp	r3, r2
 8007dac:	bfc4      	itt	gt
 8007dae:	1a9b      	subgt	r3, r3, r2
 8007db0:	18ed      	addgt	r5, r5, r3
 8007db2:	2600      	movs	r6, #0
 8007db4:	341a      	adds	r4, #26
 8007db6:	42b5      	cmp	r5, r6
 8007db8:	d11a      	bne.n	8007df0 <_printf_common+0xc8>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e008      	b.n	8007dd0 <_printf_common+0xa8>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	47c0      	blx	r8
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d103      	bne.n	8007dd4 <_printf_common+0xac>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	e7c6      	b.n	8007d66 <_printf_common+0x3e>
 8007dd8:	18e1      	adds	r1, r4, r3
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	2030      	movs	r0, #48	; 0x30
 8007dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007de2:	4422      	add	r2, r4
 8007de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dec:	3302      	adds	r3, #2
 8007dee:	e7c7      	b.n	8007d80 <_printf_common+0x58>
 8007df0:	2301      	movs	r3, #1
 8007df2:	4622      	mov	r2, r4
 8007df4:	4649      	mov	r1, r9
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c0      	blx	r8
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d0e6      	beq.n	8007dcc <_printf_common+0xa4>
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7d9      	b.n	8007db6 <_printf_common+0x8e>
	...

08007e04 <_printf_i>:
 8007e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4691      	mov	r9, r2
 8007e0c:	7e27      	ldrb	r7, [r4, #24]
 8007e0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e10:	2f78      	cmp	r7, #120	; 0x78
 8007e12:	4680      	mov	r8, r0
 8007e14:	469a      	mov	sl, r3
 8007e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e1a:	d807      	bhi.n	8007e2c <_printf_i+0x28>
 8007e1c:	2f62      	cmp	r7, #98	; 0x62
 8007e1e:	d80a      	bhi.n	8007e36 <_printf_i+0x32>
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	f000 80d8 	beq.w	8007fd6 <_printf_i+0x1d2>
 8007e26:	2f58      	cmp	r7, #88	; 0x58
 8007e28:	f000 80a3 	beq.w	8007f72 <_printf_i+0x16e>
 8007e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e34:	e03a      	b.n	8007eac <_printf_i+0xa8>
 8007e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e3a:	2b15      	cmp	r3, #21
 8007e3c:	d8f6      	bhi.n	8007e2c <_printf_i+0x28>
 8007e3e:	a001      	add	r0, pc, #4	; (adr r0, 8007e44 <_printf_i+0x40>)
 8007e40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e44:	08007e9d 	.word	0x08007e9d
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007e2d 	.word	0x08007e2d
 8007e50:	08007e2d 	.word	0x08007e2d
 8007e54:	08007e2d 	.word	0x08007e2d
 8007e58:	08007e2d 	.word	0x08007e2d
 8007e5c:	08007eb1 	.word	0x08007eb1
 8007e60:	08007e2d 	.word	0x08007e2d
 8007e64:	08007e2d 	.word	0x08007e2d
 8007e68:	08007e2d 	.word	0x08007e2d
 8007e6c:	08007e2d 	.word	0x08007e2d
 8007e70:	08007fbd 	.word	0x08007fbd
 8007e74:	08007ee1 	.word	0x08007ee1
 8007e78:	08007f9f 	.word	0x08007f9f
 8007e7c:	08007e2d 	.word	0x08007e2d
 8007e80:	08007e2d 	.word	0x08007e2d
 8007e84:	08007fdf 	.word	0x08007fdf
 8007e88:	08007e2d 	.word	0x08007e2d
 8007e8c:	08007ee1 	.word	0x08007ee1
 8007e90:	08007e2d 	.word	0x08007e2d
 8007e94:	08007e2d 	.word	0x08007e2d
 8007e98:	08007fa7 	.word	0x08007fa7
 8007e9c:	680b      	ldr	r3, [r1, #0]
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	600a      	str	r2, [r1, #0]
 8007ea4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0a3      	b.n	8007ff8 <_printf_i+0x1f4>
 8007eb0:	6825      	ldr	r5, [r4, #0]
 8007eb2:	6808      	ldr	r0, [r1, #0]
 8007eb4:	062e      	lsls	r6, r5, #24
 8007eb6:	f100 0304 	add.w	r3, r0, #4
 8007eba:	d50a      	bpl.n	8007ed2 <_printf_i+0xce>
 8007ebc:	6805      	ldr	r5, [r0, #0]
 8007ebe:	600b      	str	r3, [r1, #0]
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	da03      	bge.n	8007ecc <_printf_i+0xc8>
 8007ec4:	232d      	movs	r3, #45	; 0x2d
 8007ec6:	426d      	negs	r5, r5
 8007ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ecc:	485e      	ldr	r0, [pc, #376]	; (8008048 <_printf_i+0x244>)
 8007ece:	230a      	movs	r3, #10
 8007ed0:	e019      	b.n	8007f06 <_printf_i+0x102>
 8007ed2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ed6:	6805      	ldr	r5, [r0, #0]
 8007ed8:	600b      	str	r3, [r1, #0]
 8007eda:	bf18      	it	ne
 8007edc:	b22d      	sxthne	r5, r5
 8007ede:	e7ef      	b.n	8007ec0 <_printf_i+0xbc>
 8007ee0:	680b      	ldr	r3, [r1, #0]
 8007ee2:	6825      	ldr	r5, [r4, #0]
 8007ee4:	1d18      	adds	r0, r3, #4
 8007ee6:	6008      	str	r0, [r1, #0]
 8007ee8:	0628      	lsls	r0, r5, #24
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0xec>
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <_printf_i+0xf2>
 8007ef0:	0669      	lsls	r1, r5, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0xe8>
 8007ef4:	881d      	ldrh	r5, [r3, #0]
 8007ef6:	4854      	ldr	r0, [pc, #336]	; (8008048 <_printf_i+0x244>)
 8007ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8007efa:	bf0c      	ite	eq
 8007efc:	2308      	moveq	r3, #8
 8007efe:	230a      	movne	r3, #10
 8007f00:	2100      	movs	r1, #0
 8007f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f06:	6866      	ldr	r6, [r4, #4]
 8007f08:	60a6      	str	r6, [r4, #8]
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	bfa2      	ittt	ge
 8007f0e:	6821      	ldrge	r1, [r4, #0]
 8007f10:	f021 0104 	bicge.w	r1, r1, #4
 8007f14:	6021      	strge	r1, [r4, #0]
 8007f16:	b90d      	cbnz	r5, 8007f1c <_printf_i+0x118>
 8007f18:	2e00      	cmp	r6, #0
 8007f1a:	d04d      	beq.n	8007fb8 <_printf_i+0x1b4>
 8007f1c:	4616      	mov	r6, r2
 8007f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f22:	fb03 5711 	mls	r7, r3, r1, r5
 8007f26:	5dc7      	ldrb	r7, [r0, r7]
 8007f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f2c:	462f      	mov	r7, r5
 8007f2e:	42bb      	cmp	r3, r7
 8007f30:	460d      	mov	r5, r1
 8007f32:	d9f4      	bls.n	8007f1e <_printf_i+0x11a>
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d10b      	bne.n	8007f50 <_printf_i+0x14c>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	07df      	lsls	r7, r3, #31
 8007f3c:	d508      	bpl.n	8007f50 <_printf_i+0x14c>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	6861      	ldr	r1, [r4, #4]
 8007f42:	4299      	cmp	r1, r3
 8007f44:	bfde      	ittt	le
 8007f46:	2330      	movle	r3, #48	; 0x30
 8007f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f50:	1b92      	subs	r2, r2, r6
 8007f52:	6122      	str	r2, [r4, #16]
 8007f54:	f8cd a000 	str.w	sl, [sp]
 8007f58:	464b      	mov	r3, r9
 8007f5a:	aa03      	add	r2, sp, #12
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4640      	mov	r0, r8
 8007f60:	f7ff fee2 	bl	8007d28 <_printf_common>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d14c      	bne.n	8008002 <_printf_i+0x1fe>
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	b004      	add	sp, #16
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	4835      	ldr	r0, [pc, #212]	; (8008048 <_printf_i+0x244>)
 8007f74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	680e      	ldr	r6, [r1, #0]
 8007f7c:	061f      	lsls	r7, r3, #24
 8007f7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f82:	600e      	str	r6, [r1, #0]
 8007f84:	d514      	bpl.n	8007fb0 <_printf_i+0x1ac>
 8007f86:	07d9      	lsls	r1, r3, #31
 8007f88:	bf44      	itt	mi
 8007f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f8e:	6023      	strmi	r3, [r4, #0]
 8007f90:	b91d      	cbnz	r5, 8007f9a <_printf_i+0x196>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	f023 0320 	bic.w	r3, r3, #32
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	2310      	movs	r3, #16
 8007f9c:	e7b0      	b.n	8007f00 <_printf_i+0xfc>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	f043 0320 	orr.w	r3, r3, #32
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	2378      	movs	r3, #120	; 0x78
 8007fa8:	4828      	ldr	r0, [pc, #160]	; (800804c <_printf_i+0x248>)
 8007faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fae:	e7e3      	b.n	8007f78 <_printf_i+0x174>
 8007fb0:	065e      	lsls	r6, r3, #25
 8007fb2:	bf48      	it	mi
 8007fb4:	b2ad      	uxthmi	r5, r5
 8007fb6:	e7e6      	b.n	8007f86 <_printf_i+0x182>
 8007fb8:	4616      	mov	r6, r2
 8007fba:	e7bb      	b.n	8007f34 <_printf_i+0x130>
 8007fbc:	680b      	ldr	r3, [r1, #0]
 8007fbe:	6826      	ldr	r6, [r4, #0]
 8007fc0:	6960      	ldr	r0, [r4, #20]
 8007fc2:	1d1d      	adds	r5, r3, #4
 8007fc4:	600d      	str	r5, [r1, #0]
 8007fc6:	0635      	lsls	r5, r6, #24
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	d501      	bpl.n	8007fd0 <_printf_i+0x1cc>
 8007fcc:	6018      	str	r0, [r3, #0]
 8007fce:	e002      	b.n	8007fd6 <_printf_i+0x1d2>
 8007fd0:	0671      	lsls	r1, r6, #25
 8007fd2:	d5fb      	bpl.n	8007fcc <_printf_i+0x1c8>
 8007fd4:	8018      	strh	r0, [r3, #0]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6123      	str	r3, [r4, #16]
 8007fda:	4616      	mov	r6, r2
 8007fdc:	e7ba      	b.n	8007f54 <_printf_i+0x150>
 8007fde:	680b      	ldr	r3, [r1, #0]
 8007fe0:	1d1a      	adds	r2, r3, #4
 8007fe2:	600a      	str	r2, [r1, #0]
 8007fe4:	681e      	ldr	r6, [r3, #0]
 8007fe6:	6862      	ldr	r2, [r4, #4]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7f8 f908 	bl	8000200 <memchr>
 8007ff0:	b108      	cbz	r0, 8007ff6 <_printf_i+0x1f2>
 8007ff2:	1b80      	subs	r0, r0, r6
 8007ff4:	6060      	str	r0, [r4, #4]
 8007ff6:	6863      	ldr	r3, [r4, #4]
 8007ff8:	6123      	str	r3, [r4, #16]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008000:	e7a8      	b.n	8007f54 <_printf_i+0x150>
 8008002:	6923      	ldr	r3, [r4, #16]
 8008004:	4632      	mov	r2, r6
 8008006:	4649      	mov	r1, r9
 8008008:	4640      	mov	r0, r8
 800800a:	47d0      	blx	sl
 800800c:	3001      	adds	r0, #1
 800800e:	d0ab      	beq.n	8007f68 <_printf_i+0x164>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	079b      	lsls	r3, r3, #30
 8008014:	d413      	bmi.n	800803e <_printf_i+0x23a>
 8008016:	68e0      	ldr	r0, [r4, #12]
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	4298      	cmp	r0, r3
 800801c:	bfb8      	it	lt
 800801e:	4618      	movlt	r0, r3
 8008020:	e7a4      	b.n	8007f6c <_printf_i+0x168>
 8008022:	2301      	movs	r3, #1
 8008024:	4632      	mov	r2, r6
 8008026:	4649      	mov	r1, r9
 8008028:	4640      	mov	r0, r8
 800802a:	47d0      	blx	sl
 800802c:	3001      	adds	r0, #1
 800802e:	d09b      	beq.n	8007f68 <_printf_i+0x164>
 8008030:	3501      	adds	r5, #1
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	9903      	ldr	r1, [sp, #12]
 8008036:	1a5b      	subs	r3, r3, r1
 8008038:	42ab      	cmp	r3, r5
 800803a:	dcf2      	bgt.n	8008022 <_printf_i+0x21e>
 800803c:	e7eb      	b.n	8008016 <_printf_i+0x212>
 800803e:	2500      	movs	r5, #0
 8008040:	f104 0619 	add.w	r6, r4, #25
 8008044:	e7f5      	b.n	8008032 <_printf_i+0x22e>
 8008046:	bf00      	nop
 8008048:	08008229 	.word	0x08008229
 800804c:	0800823a 	.word	0x0800823a

08008050 <memmove>:
 8008050:	4288      	cmp	r0, r1
 8008052:	b510      	push	{r4, lr}
 8008054:	eb01 0402 	add.w	r4, r1, r2
 8008058:	d902      	bls.n	8008060 <memmove+0x10>
 800805a:	4284      	cmp	r4, r0
 800805c:	4623      	mov	r3, r4
 800805e:	d807      	bhi.n	8008070 <memmove+0x20>
 8008060:	1e43      	subs	r3, r0, #1
 8008062:	42a1      	cmp	r1, r4
 8008064:	d008      	beq.n	8008078 <memmove+0x28>
 8008066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800806a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800806e:	e7f8      	b.n	8008062 <memmove+0x12>
 8008070:	4402      	add	r2, r0
 8008072:	4601      	mov	r1, r0
 8008074:	428a      	cmp	r2, r1
 8008076:	d100      	bne.n	800807a <memmove+0x2a>
 8008078:	bd10      	pop	{r4, pc}
 800807a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800807e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008082:	e7f7      	b.n	8008074 <memmove+0x24>

08008084 <_realloc_r>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	4607      	mov	r7, r0
 8008088:	4614      	mov	r4, r2
 800808a:	460e      	mov	r6, r1
 800808c:	b921      	cbnz	r1, 8008098 <_realloc_r+0x14>
 800808e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008092:	4611      	mov	r1, r2
 8008094:	f7ff bb9c 	b.w	80077d0 <_malloc_r>
 8008098:	b922      	cbnz	r2, 80080a4 <_realloc_r+0x20>
 800809a:	f7ff fc99 	bl	80079d0 <_free_r>
 800809e:	4625      	mov	r5, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a4:	f000 f814 	bl	80080d0 <_malloc_usable_size_r>
 80080a8:	42a0      	cmp	r0, r4
 80080aa:	d20f      	bcs.n	80080cc <_realloc_r+0x48>
 80080ac:	4621      	mov	r1, r4
 80080ae:	4638      	mov	r0, r7
 80080b0:	f7ff fb8e 	bl	80077d0 <_malloc_r>
 80080b4:	4605      	mov	r5, r0
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d0f2      	beq.n	80080a0 <_realloc_r+0x1c>
 80080ba:	4631      	mov	r1, r6
 80080bc:	4622      	mov	r2, r4
 80080be:	f7ff fb71 	bl	80077a4 <memcpy>
 80080c2:	4631      	mov	r1, r6
 80080c4:	4638      	mov	r0, r7
 80080c6:	f7ff fc83 	bl	80079d0 <_free_r>
 80080ca:	e7e9      	b.n	80080a0 <_realloc_r+0x1c>
 80080cc:	4635      	mov	r5, r6
 80080ce:	e7e7      	b.n	80080a0 <_realloc_r+0x1c>

080080d0 <_malloc_usable_size_r>:
 80080d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d4:	1f18      	subs	r0, r3, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfbc      	itt	lt
 80080da:	580b      	ldrlt	r3, [r1, r0]
 80080dc:	18c0      	addlt	r0, r0, r3
 80080de:	4770      	bx	lr

080080e0 <_init>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr

080080ec <_fini>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr
