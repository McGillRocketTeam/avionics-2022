
FCV4.3 Pinout F437ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08009f98  08009f98  00019f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c4  0800a4c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4c4  0800a4c4  0001a4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4cc  0800a4cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000810  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009ec  200009ec  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028930  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000346b  00000000  00000000  00048b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002068  00000000  00000000  0004bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f58  00000000  00000000  0004e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028119  00000000  00000000  0004ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e6d0  00000000  00000000  00078081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f742f  00000000  00000000  00096751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018db80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f8c  00000000  00000000  0018dbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009f7c 	.word	0x08009f7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08009f7c 	.word	0x08009f7c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	461a      	mov	r2, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	72fb      	strb	r3, [r7, #11]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8000ef4:	7afb      	ldrb	r3, [r7, #11]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	893b      	ldrh	r3, [r7, #8]
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	21d5      	movs	r1, #213	; 0xd5
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f002 ffaa 	bl	8003e64 <HAL_I2C_Mem_Write>
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b088      	sub	sp, #32
 8000f1e:	af04      	add	r7, sp, #16
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	461a      	mov	r2, r3
 8000f26:	460b      	mov	r3, r1
 8000f28:	72fb      	strb	r3, [r7, #11]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	893b      	ldrh	r3, [r7, #8]
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	21d5      	movs	r1, #213	; 0xd5
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f003 f887 	bl	8004058 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b08b      	sub	sp, #44	; 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 8000f60:	4a53      	ldr	r2, [pc, #332]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8000f66:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	2216      	movs	r2, #22
 8000f70:	4950      	ldr	r1, [pc, #320]	; (80010b4 <MRT_LSM6DSR_Setup+0x160>)
 8000f72:	f005 faf0 	bl	8006556 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <MRT_LSM6DSR_Setup+0x164>)
 8000f78:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 8000f7a:	4b50      	ldr	r3, [pc, #320]	; (80010bc <MRT_LSM6DSR_Setup+0x168>)
 8000f7c:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 8000f82:	2064      	movs	r0, #100	; 0x64
 8000f84:	f002 f8ec 	bl	8003160 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	494c      	ldr	r1, [pc, #304]	; (80010c0 <MRT_LSM6DSR_Setup+0x16c>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 ffe0 	bl	8002f54 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 8000f94:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2215      	movs	r2, #21
 8000f9e:	4949      	ldr	r1, [pc, #292]	; (80010c4 <MRT_LSM6DSR_Setup+0x170>)
 8000fa0:	f005 fad9 	bl	8006556 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <MRT_LSM6DSR_Setup+0x16c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b6a      	cmp	r3, #106	; 0x6a
 8000faa:	d032      	beq.n	8001012 <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	4944      	ldr	r1, [pc, #272]	; (80010c8 <MRT_LSM6DSR_Setup+0x174>)
 8000fb8:	f005 facd 	bl	8006556 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	4941      	ldr	r1, [pc, #260]	; (80010cc <MRT_LSM6DSR_Setup+0x178>)
 8000fc8:	f005 fac5 	bl	8006556 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <MRT_LSM6DSR_Setup+0x16c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	493e      	ldr	r1, [pc, #248]	; (80010d0 <MRT_LSM6DSR_Setup+0x17c>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f006 fda3 	bl	8007b24 <siprintf>

			__BKPT();
 8000fde:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8000fe2:	681c      	ldr	r4, [r3, #0]
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f90b 	bl	8000204 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f107 0110 	add.w	r1, r7, #16
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f005 faab 	bl	8006556 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	2216      	movs	r2, #22
 800100a:	4932      	ldr	r1, [pc, #200]	; (80010d4 <MRT_LSM6DSR_Setup+0x180>)
 800100c:	f005 faa3 	bl	8006556 <HAL_UART_Transmit>
		  while(1);
 8001010:	e7fe      	b.n	8001010 <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	2206      	movs	r2, #6
 800101c:	492e      	ldr	r1, [pc, #184]	; (80010d8 <MRT_LSM6DSR_Setup+0x184>)
 800101e:	f005 fa9a 	bl	8006556 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f001 ffa4 	bl	8002f76 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800102e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001032:	f002 f895 	bl	8003160 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4928      	ldr	r1, [pc, #160]	; (80010dc <MRT_LSM6DSR_Setup+0x188>)
 800103c:	4618      	mov	r0, r3
 800103e:	f001 ffc0 	bl	8002fc2 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MRT_LSM6DSR_Setup+0x188>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f5      	bne.n	8001036 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fe2f 	bl	8002cb4 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2101      	movs	r1, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fc0b 	bl	8002878 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fd27 	bl	8002abc <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fbd9 	bl	800282c <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	210c      	movs	r1, #12
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fcf5 	bl	8002a70 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MRT_LSM6DSR_Setup+0x15c>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	2219      	movs	r2, #25
 8001090:	4913      	ldr	r1, [pc, #76]	; (80010e0 <MRT_LSM6DSR_Setup+0x18c>)
 8001092:	f005 fa60 	bl	8006556 <HAL_UART_Transmit>

	  return lsm_ctx;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	461c      	mov	r4, r3
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	372c      	adds	r7, #44	; 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000218 	.word	0x20000218
 80010b4:	08009f98 	.word	0x08009f98
 80010b8:	08000ee1 	.word	0x08000ee1
 80010bc:	08000f1b 	.word	0x08000f1b
 80010c0:	20000208 	.word	0x20000208
 80010c4:	08009fb0 	.word	0x08009fb0
 80010c8:	08009fc8 	.word	0x08009fc8
 80010cc:	08009fd4 	.word	0x08009fd4
 80010d0:	08009fe8 	.word	0x08009fe8
 80010d4:	08009ff0 	.word	0x08009ff0
 80010d8:	0800a008 	.word	0x0800a008
 80010dc:	20000209 	.word	0x20000209
 80010e0:	0800a010 	.word	0x0800a010

080010e4 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	1d3c      	adds	r4, r7, #4
 80010ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010f0:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 80010f2:	f107 0217 	add.w	r2, r7, #23
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fe00 	bl	8002d00 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d02d      	beq.n	8001162 <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001106:	2206      	movs	r2, #6
 8001108:	2100      	movs	r1, #0
 800110a:	4818      	ldr	r0, [pc, #96]	; (800116c <MRT_LSM6DSR_getAcceleration+0x88>)
 800110c:	f006 f898 	bl	8007240 <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4916      	ldr	r1, [pc, #88]	; (800116c <MRT_LSM6DSR_getAcceleration+0x88>)
 8001114:	4618      	mov	r0, r3
 8001116:	f001 feac 	bl	8002e72 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MRT_LSM6DSR_getAcceleration+0x88>)
 800111c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fb37 	bl	8002794 <lsm6dsr_from_fs2g_to_mg>
 8001126:	eef0 7a40 	vmov.f32	s15, s0
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MRT_LSM6DSR_getAcceleration+0x88>)
 8001132:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	1d1c      	adds	r4, r3, #4
 800113a:	4610      	mov	r0, r2
 800113c:	f001 fb2a 	bl	8002794 <lsm6dsr_from_fs2g_to_mg>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
 8001144:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <MRT_LSM6DSR_getAcceleration+0x88>)
 800114a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f103 0408 	add.w	r4, r3, #8
 8001154:	4610      	mov	r0, r2
 8001156:	f001 fb1d 	bl	8002794 <lsm6dsr_from_fs2g_to_mg>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	bf00      	nop
 800116c:	200001f8 	.word	0x200001f8

08001170 <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	1d3c      	adds	r4, r7, #4
 8001178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800117c:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 800117e:	f107 0217 	add.w	r2, r7, #23
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fdec 	bl	8002d64 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d017      	beq.n	80011c2 <MRT_LSM6DSR_getTemperature+0x52>
		//Read temperature data
		memset(lsm_data_raw_temperature, 0x00, sizeof(int16_t));
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MRT_LSM6DSR_getTemperature+0x5c>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	2202      	movs	r2, #2
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f006 f84f 	bl	8007240 <memset>
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4909      	ldr	r1, [pc, #36]	; (80011cc <MRT_LSM6DSR_getTemperature+0x5c>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fdf5 	bl	8002d96 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MRT_LSM6DSR_getTemperature+0x5c>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fb1e 	bl	80027f4 <lsm6dsr_from_lsb_to_celsius>
 80011b8:	eef0 7a40 	vmov.f32	s15, s0
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000206 	.word	0x20000206

080011d0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	1d3c      	adds	r4, r7, #4
 80011d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011dc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80011de:	f107 0217 	add.w	r2, r7, #23
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fda3 	bl	8002d32 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d02d      	beq.n	800124e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80011f2:	2206      	movs	r2, #6
 80011f4:	2100      	movs	r1, #0
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <MRT_LSM6DSR_getAngularRate+0x88>)
 80011f8:	f006 f822 	bl	8007240 <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4916      	ldr	r1, [pc, #88]	; (8001258 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fdeb 	bl	8002ddc <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fad9 	bl	80027c4 <lsm6dsr_from_fs2000dps_to_mdps>
 8001212:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MRT_LSM6DSR_getAngularRate+0x88>)
 800121e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001226:	4610      	mov	r0, r2
 8001228:	f001 facc 	bl	80027c4 <lsm6dsr_from_fs2000dps_to_mdps>
 800122c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001230:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001236:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001240:	4610      	mov	r0, r2
 8001242:	f001 fabf 	bl	80027c4 <lsm6dsr_from_fs2000dps_to_mdps>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800124a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
 8001256:	bf00      	nop
 8001258:	20000200 	.word	0x20000200

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001260:	b0c4      	sub	sp, #272	; 0x110
 8001262:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f001 ff3a 	bl	80030dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f8b0 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126c:	f000 fbd4 	bl	8001a18 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001270:	f000 f91a 	bl	80014a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001274:	f000 f96a 	bl	800154c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001278:	f000 f9a8 	bl	80015cc <MX_I2C2_Init>
  MX_I2C3_Init();
 800127c:	f000 f9e6 	bl	800164c <MX_I2C3_Init>
  MX_SPI2_Init();
 8001280:	f000 fa24 	bl	80016cc <MX_SPI2_Init>
  MX_SPI4_Init();
 8001284:	f000 fa58 	bl	8001738 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001288:	f000 fa8c 	bl	80017a4 <MX_SPI5_Init>
  MX_TIM2_Init();
 800128c:	f000 fac0 	bl	8001810 <MX_TIM2_Init>
  MX_UART8_Init();
 8001290:	f000 fb16 	bl	80018c0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001294:	f000 fb3e 	bl	8001914 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001298:	f000 fb66 	bl	8001968 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800129c:	f000 fb8e 	bl	80019bc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  char rxBuffer[50];
  HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012aa:	f002 fc7d 	bl	8003ba8 <HAL_GPIO_WritePin>
  while (strcmp(rxBuffer, "launch") != 0)
 80012ae:	e007      	b.n	80012c0 <main+0x64>
  {
	  HAL_UART_Receive (&huart3, rxBuffer, sizeof(char) * 6, HAL_MAX_DELAY);
 80012b0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2206      	movs	r2, #6
 80012ba:	483e      	ldr	r0, [pc, #248]	; (80013b4 <main+0x158>)
 80012bc:	f005 f9dd 	bl	800667a <HAL_UART_Receive>
  while (strcmp(rxBuffer, "launch") != 0)
 80012c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012c4:	493c      	ldr	r1, [pc, #240]	; (80013b8 <main+0x15c>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff92 	bl	80001f0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1ee      	bne.n	80012b0 <main+0x54>
  }
  lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 80012d2:	4c3a      	ldr	r4, [pc, #232]	; (80013bc <main+0x160>)
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <main+0x164>)
 80012da:	493a      	ldr	r1, [pc, #232]	; (80013c4 <main+0x168>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe39 	bl	8000f54 <MRT_LSM6DSR_Setup>
 80012e2:	f107 0318 	add.w	r3, r7, #24
 80012e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80012ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012f2:	4a32      	ldr	r2, [pc, #200]	; (80013bc <main+0x160>)
 80012f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f6:	f7ff fef5 	bl	80010e4 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80012fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <main+0x160>)
 8001300:	ca07      	ldmia	r2, {r0, r1, r2}
 8001302:	f7ff ff65 	bl	80011d0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8001306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130a:	4a2c      	ldr	r2, [pc, #176]	; (80013bc <main+0x160>)
 800130c:	ca07      	ldmia	r2, {r0, r1, r2}
 800130e:	f7ff ff2f 	bl	8001170 <MRT_LSM6DSR_getTemperature>

	  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n Angular Rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n Temperature [C]:%4.2f\t\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2], angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2], lsm_temperature_degC);
 8001312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f937 	bl	8000588 <__aeabi_f2d>
 800131a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800131e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f931 	bl	8000588 <__aeabi_f2d>
 8001326:	4680      	mov	r8, r0
 8001328:	4689      	mov	r9, r1
 800132a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f92b 	bl	8000588 <__aeabi_f2d>
 8001332:	4682      	mov	sl, r0
 8001334:	468b      	mov	fp, r1
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f925 	bl	8000588 <__aeabi_f2d>
 800133e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	e9c7 0100 	strd	r0, r1, [r7]
 800134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f919 	bl	8000588 <__aeabi_f2d>
 8001356:	4604      	mov	r4, r0
 8001358:	460d      	mov	r5, r1
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f913 	bl	8000588 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800136a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800136e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001372:	ed97 7b00 	vldr	d7, [r7]
 8001376:	ed8d 7b06 	vstr	d7, [sp, #24]
 800137a:	ed97 7b02 	vldr	d7, [r7, #8]
 800137e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001382:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001386:	e9cd 8900 	strd	r8, r9, [sp]
 800138a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <main+0x16c>)
 8001390:	f006 fbc8 	bl	8007b24 <siprintf>

	  HAL_UART_Transmit(&huart3, buffer, sizeof(char) * strlen(buffer), HAL_MAX_DELAY);
 8001394:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001398:	4618      	mov	r0, r3
 800139a:	f7fe ff33 	bl	8000204 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	4802      	ldr	r0, [pc, #8]	; (80013b4 <main+0x158>)
 80013ac:	f005 f8d3 	bl	8006556 <HAL_UART_Transmit>
  {
 80013b0:	e79d      	b.n	80012ee <main+0x92>
 80013b2:	bf00      	nop
 80013b4:	20000320 	.word	0x20000320
 80013b8:	0800a058 	.word	0x0800a058
 80013bc:	20000984 	.word	0x20000984
 80013c0:	200008b4 	.word	0x200008b4
 80013c4:	2000021c 	.word	0x2000021c
 80013c8:	0800a060 	.word	0x0800a060

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 ff30 	bl	8007240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <SystemClock_Config+0xd4>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <SystemClock_Config+0xd4>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <SystemClock_Config+0xd4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <SystemClock_Config+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001418:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <SystemClock_Config+0xd8>)
 800141a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <SystemClock_Config+0xd8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800142c:	2303      	movs	r3, #3
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001436:	2301      	movs	r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143a:	2310      	movs	r3, #16
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001448:	2310      	movs	r3, #16
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800144c:	23c0      	movs	r3, #192	; 0xc0
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fd15 	bl	8004e8c <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001468:	f000 fc70 	bl	8001d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f003 ff78 	bl	800537c <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001492:	f000 fc5b 	bl	8001d4c <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	; 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <MX_ADC1_Init+0x98>)
 80014bc:	4a21      	ldr	r2, [pc, #132]	; (8001544 <MX_ADC1_Init+0x9c>)
 80014be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_ADC1_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_ADC1_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_ADC1_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_ADC1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_ADC1_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_ADC1_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_ADC1_Init+0x98>)
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <MX_ADC1_Init+0xa0>)
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_ADC1_Init+0x98>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_ADC1_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_ADC1_Init+0x98>)
 8001502:	2201      	movs	r2, #1
 8001504:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <MX_ADC1_Init+0x98>)
 8001508:	f001 fe4e 	bl	80031a8 <HAL_ADC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001512:	f000 fc1b 	bl	8001d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001516:	2306      	movs	r3, #6
 8001518:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_ADC1_Init+0x98>)
 8001528:	f001 fe82 	bl	8003230 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001532:	f000 fc0b 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000814 	.word	0x20000814
 8001544:	40012000 	.word	0x40012000
 8001548:	0f000001 	.word	0x0f000001

0800154c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <MX_I2C1_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <MX_I2C1_Init+0x7c>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <MX_I2C1_Init+0x74>)
 800156a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <MX_I2C1_Init+0x74>)
 800158a:	f002 fb27 	bl	8003bdc <HAL_I2C_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001594:	f000 fbda 	bl	8001d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <MX_I2C1_Init+0x74>)
 800159c:	f003 fadd 	bl	8004b5a <HAL_I2CEx_ConfigAnalogFilter>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015a6:	f000 fbd1 	bl	8001d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_I2C1_Init+0x74>)
 80015ae:	f003 fb10 	bl	8004bd2 <HAL_I2CEx_ConfigDigitalFilter>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015b8:	f000 fbc8 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000364 	.word	0x20000364
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_I2C2_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_I2C2_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_I2C2_Init+0x74>)
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <MX_I2C2_Init+0x7c>)
 80015da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_I2C2_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_I2C2_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_I2C2_Init+0x74>)
 80015ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_I2C2_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_I2C2_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_I2C2_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_I2C2_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_I2C2_Init+0x74>)
 800160a:	f002 fae7 	bl	8003bdc <HAL_I2C_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001614:	f000 fb9a 	bl	8001d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001618:	2100      	movs	r1, #0
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <MX_I2C2_Init+0x74>)
 800161c:	f003 fa9d 	bl	8004b5a <HAL_I2CEx_ConfigAnalogFilter>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001626:	f000 fb91 	bl	8001d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_I2C2_Init+0x74>)
 800162e:	f003 fad0 	bl	8004bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001638:	f000 fb88 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200007c0 	.word	0x200007c0
 8001644:	40005800 	.word	0x40005800
 8001648:	000186a0 	.word	0x000186a0

0800164c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_I2C3_Init+0x74>)
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <MX_I2C3_Init+0x78>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_I2C3_Init+0x74>)
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <MX_I2C3_Init+0x7c>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_I2C3_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_I2C3_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_I2C3_Init+0x74>)
 800166a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800166e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_I2C3_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C3_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_I2C3_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C3_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_I2C3_Init+0x74>)
 800168a:	f002 faa7 	bl	8003bdc <HAL_I2C_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001694:	f000 fb5a 	bl	8001d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <MX_I2C3_Init+0x74>)
 800169c:	f003 fa5d 	bl	8004b5a <HAL_I2CEx_ConfigAnalogFilter>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80016a6:	f000 fb51 	bl	8001d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_I2C3_Init+0x74>)
 80016ae:	f003 fa90 	bl	8004bd2 <HAL_I2CEx_ConfigDigitalFilter>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80016b8:	f000 fb48 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000021c 	.word	0x2000021c
 80016c4:	40005c00 	.word	0x40005c00
 80016c8:	000186a0 	.word	0x000186a0

080016cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_SPI2_Init+0x64>)
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <MX_SPI2_Init+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI2_Init+0x64>)
 80016d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI2_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_SPI2_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI2_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI2_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI2_Init+0x64>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI2_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_SPI2_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI2_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_SPI2_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI2_Init+0x64>)
 8001718:	220a      	movs	r2, #10
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_SPI2_Init+0x64>)
 800171e:	f004 f859 	bl	80057d4 <HAL_SPI_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001728:	f000 fb10 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000270 	.word	0x20000270
 8001734:	40003800 	.word	0x40003800

08001738 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_SPI4_Init+0x64>)
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <MX_SPI4_Init+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_SPI4_Init+0x64>)
 8001744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001748:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_SPI4_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_SPI4_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_SPI4_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_SPI4_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_SPI4_Init+0x64>)
 8001764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001768:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_SPI4_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_SPI4_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_SPI4_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_SPI4_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_SPI4_Init+0x64>)
 8001784:	220a      	movs	r2, #10
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_SPI4_Init+0x64>)
 800178a:	f004 f823 	bl	80057d4 <HAL_SPI_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001794:	f000 fada 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000085c 	.word	0x2000085c
 80017a0:	40013400 	.word	0x40013400

080017a4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI5_Init+0x64>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <MX_SPI5_Init+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI5_Init+0x64>)
 80017b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI5_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI5_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI5_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI5_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI5_Init+0x64>)
 80017d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI5_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_SPI5_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI5_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_SPI5_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI5_Init+0x64>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_SPI5_Init+0x64>)
 80017f6:	f003 ffed 	bl	80057d4 <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001800:	f000 faa4 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200002c8 	.word	0x200002c8
 800180c:	40015000 	.word	0x40015000

08001810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_TIM2_Init+0xac>)
 8001834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001838:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MX_TIM2_Init+0xac>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_TIM2_Init+0xac>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_TIM2_Init+0xac>)
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_TIM2_Init+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_TIM2_Init+0xac>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800185a:	4818      	ldr	r0, [pc, #96]	; (80018bc <MX_TIM2_Init+0xac>)
 800185c:	f004 f90c 	bl	8005a78 <HAL_TIM_PWM_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001866:	f000 fa71 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	4619      	mov	r1, r3
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_TIM2_Init+0xac>)
 800187a:	f004 fd8f 	bl	800639c <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001884:	f000 fa62 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001888:	2360      	movs	r3, #96	; 0x60
 800188a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2208      	movs	r2, #8
 800189c:	4619      	mov	r1, r3
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <MX_TIM2_Init+0xac>)
 80018a0:	f004 fa42 	bl	8005d28 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018aa:	f000 fa4f 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <MX_TIM2_Init+0xac>)
 80018b0:	f000 fc6a 	bl	8002188 <HAL_TIM_MspPostInit>

}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000093c 	.word	0x2000093c

080018c0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_UART8_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_UART8_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_UART8_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_UART8_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_UART8_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_UART8_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_UART8_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_UART8_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_UART8_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_UART8_Init+0x4c>)
 80018f8:	f004 fde0 	bl	80064bc <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001902:	f000 fa23 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200008b4 	.word	0x200008b4
 8001910:	40007c00 	.word	0x40007c00

08001914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_USART3_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800194c:	f004 fdb6 	bl	80064bc <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f000 f9f9 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000320 	.word	0x20000320
 8001964:	40004800 	.word	0x40004800

08001968 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <MX_USART6_UART_Init+0x50>)
 8001970:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 80019a0:	f004 fd8c 	bl	80064bc <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019aa:	f000 f9cf 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200008f8 	.word	0x200008f8
 80019b8:	40011400 	.word	0x40011400

080019bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019dc:	2202      	movs	r2, #2
 80019de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a00:	f003 f926 	bl	8004c50 <HAL_PCD_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a0a:	f000 f99f 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200003b8 	.word	0x200003b8

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08e      	sub	sp, #56	; 0x38
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	4bb5      	ldr	r3, [pc, #724]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4ab4      	ldr	r2, [pc, #720]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4bb2      	ldr	r3, [pc, #712]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	4bae      	ldr	r3, [pc, #696]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4aad      	ldr	r2, [pc, #692]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4bab      	ldr	r3, [pc, #684]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	4ba7      	ldr	r3, [pc, #668]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4aa6      	ldr	r2, [pc, #664]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4ba4      	ldr	r3, [pc, #656]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	4ba0      	ldr	r3, [pc, #640]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a9f      	ldr	r2, [pc, #636]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b99      	ldr	r3, [pc, #612]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b92      	ldr	r3, [pc, #584]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a91      	ldr	r2, [pc, #580]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b8f      	ldr	r3, [pc, #572]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a8a      	ldr	r2, [pc, #552]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a83      	ldr	r2, [pc, #524]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f248 4184 	movw	r1, #33924	; 0x8484
 8001b14:	487d      	ldr	r0, [pc, #500]	; (8001d0c <MX_GPIO_Init+0x2f4>)
 8001b16:	f002 f847 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001b20:	487b      	ldr	r0, [pc, #492]	; (8001d10 <MX_GPIO_Init+0x2f8>)
 8001b22:	f002 f841 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001b2c:	4879      	ldr	r0, [pc, #484]	; (8001d14 <MX_GPIO_Init+0x2fc>)
 8001b2e:	f002 f83b 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2108      	movs	r1, #8
 8001b36:	4878      	ldr	r0, [pc, #480]	; (8001d18 <MX_GPIO_Init+0x300>)
 8001b38:	f002 f836 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8001b42:	4876      	ldr	r0, [pc, #472]	; (8001d1c <MX_GPIO_Init+0x304>)
 8001b44:	f002 f830 	bl	8003ba8 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4874      	ldr	r0, [pc, #464]	; (8001d20 <MX_GPIO_Init+0x308>)
 8001b50:	f002 f82a 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001b54:	2200      	movs	r2, #0
 8001b56:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001b5a:	4872      	ldr	r0, [pc, #456]	; (8001d24 <MX_GPIO_Init+0x30c>)
 8001b5c:	f002 f824 	bl	8003ba8 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001b60:	f248 4384 	movw	r3, #33924	; 0x8484
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4619      	mov	r1, r3
 8001b78:	4864      	ldr	r0, [pc, #400]	; (8001d0c <MX_GPIO_Init+0x2f4>)
 8001b7a:	f001 fe69 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001b7e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	485e      	ldr	r0, [pc, #376]	; (8001d10 <MX_GPIO_Init+0x2f8>)
 8001b98:	f001 fe5a 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4858      	ldr	r0, [pc, #352]	; (8001d14 <MX_GPIO_Init+0x2fc>)
 8001bb2:	f001 fe4d 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001bb6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4851      	ldr	r0, [pc, #324]	; (8001d14 <MX_GPIO_Init+0x2fc>)
 8001bd0:	f001 fe3e 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	4619      	mov	r1, r3
 8001bea:	484b      	ldr	r0, [pc, #300]	; (8001d18 <MX_GPIO_Init+0x300>)
 8001bec:	f001 fe30 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001bf0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c02:	4619      	mov	r1, r3
 8001c04:	4843      	ldr	r0, [pc, #268]	; (8001d14 <MX_GPIO_Init+0x2fc>)
 8001c06:	f001 fe23 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4840      	ldr	r0, [pc, #256]	; (8001d20 <MX_GPIO_Init+0x308>)
 8001c1e:	f001 fe17 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4836      	ldr	r0, [pc, #216]	; (8001d10 <MX_GPIO_Init+0x2f8>)
 8001c38:	f001 fe0a 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8001c3c:	f242 4301 	movw	r3, #9217	; 0x2401
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4832      	ldr	r0, [pc, #200]	; (8001d1c <MX_GPIO_Init+0x304>)
 8001c52:	f001 fdfd 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001c56:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	482b      	ldr	r0, [pc, #172]	; (8001d1c <MX_GPIO_Init+0x304>)
 8001c70:	f001 fdee 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001c74:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4820      	ldr	r0, [pc, #128]	; (8001d0c <MX_GPIO_Init+0x2f4>)
 8001c8a:	f001 fde1 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <MX_GPIO_Init+0x308>)
 8001ca8:	f001 fdd2 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001cac:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4817      	ldr	r0, [pc, #92]	; (8001d24 <MX_GPIO_Init+0x30c>)
 8001cc6:	f001 fdc3 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4811      	ldr	r0, [pc, #68]	; (8001d24 <MX_GPIO_Init+0x30c>)
 8001ce0:	f001 fdb6 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8001ce4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4808      	ldr	r0, [pc, #32]	; (8001d1c <MX_GPIO_Init+0x304>)
 8001cfc:	f001 fda8 	bl	8003850 <HAL_GPIO_Init>

}
 8001d00:	bf00      	nop
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	40020400 	.word	0x40020400
 8001d24:	40020c00 	.word	0x40020c00

08001d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d3a:	f001 f9f1 	bl	8003120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40001000 	.word	0x40001000

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0x8>
	...

08001d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_ADC_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d127      	bne.n	8001e1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_ADC_MspInit+0x80>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001e02:	2340      	movs	r3, #64	; 0x40
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_ADC_MspInit+0x84>)
 8001e16:	f001 fd1b 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40012000 	.word	0x40012000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000

08001e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	; 0x38
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_I2C_MspInit+0x190>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12d      	bne.n	8001eae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e80:	2304      	movs	r3, #4
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	484f      	ldr	r0, [pc, #316]	; (8001fc8 <HAL_I2C_MspInit+0x198>)
 8001e8c:	f001 fce0 	bl	8003850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a4a      	ldr	r2, [pc, #296]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001eac:	e083      	b.n	8001fb6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a46      	ldr	r2, [pc, #280]	; (8001fcc <HAL_I2C_MspInit+0x19c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d12d      	bne.n	8001f14 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ed4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eda:	2312      	movs	r3, #18
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4835      	ldr	r0, [pc, #212]	; (8001fc8 <HAL_I2C_MspInit+0x198>)
 8001ef2:	f001 fcad 	bl	8003850 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
}
 8001f12:	e050      	b.n	8001fb6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_I2C_MspInit+0x1a0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d14b      	bne.n	8001fb6 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5c:	2312      	movs	r3, #18
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	4818      	ldr	r0, [pc, #96]	; (8001fd4 <HAL_I2C_MspInit+0x1a4>)
 8001f74:	f001 fc6c 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f7e:	2312      	movs	r3, #18
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	4619      	mov	r1, r3
 8001f94:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <HAL_I2C_MspInit+0x1a8>)
 8001f96:	f001 fc5b 	bl	8003850 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001fa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_I2C_MspInit+0x194>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
}
 8001fb6:	bf00      	nop
 8001fb8:	3738      	adds	r7, #56	; 0x38
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40005800 	.word	0x40005800
 8001fd0:	40005c00 	.word	0x40005c00
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08e      	sub	sp, #56	; 0x38
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a4c      	ldr	r2, [pc, #304]	; (800212c <HAL_SPI_MspInit+0x150>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d12d      	bne.n	800205a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
 8002002:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b48      	ldr	r3, [pc, #288]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	4b44      	ldr	r3, [pc, #272]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a43      	ldr	r2, [pc, #268]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_SPI_MspInit+0x154>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002036:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002048:	2305      	movs	r3, #5
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	4838      	ldr	r0, [pc, #224]	; (8002134 <HAL_SPI_MspInit+0x158>)
 8002054:	f001 fbfc 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002058:	e064      	b.n	8002124 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a36      	ldr	r2, [pc, #216]	; (8002138 <HAL_SPI_MspInit+0x15c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d12d      	bne.n	80020c0 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_SPI_MspInit+0x154>)
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_SPI_MspInit+0x154>)
 800206e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002072:	6453      	str	r3, [r2, #68]	; 0x44
 8002074:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_SPI_MspInit+0x154>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	6313      	str	r3, [r2, #48]	; 0x30
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_SPI_MspInit+0x154>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800209c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020ae:	2305      	movs	r3, #5
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	4820      	ldr	r0, [pc, #128]	; (800213c <HAL_SPI_MspInit+0x160>)
 80020ba:	f001 fbc9 	bl	8003850 <HAL_GPIO_Init>
}
 80020be:	e031      	b.n	8002124 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <HAL_SPI_MspInit+0x164>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d12c      	bne.n	8002124 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_SPI_MspInit+0x154>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_SPI_MspInit+0x154>)
 80020d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_SPI_MspInit+0x154>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_SPI_MspInit+0x154>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_SPI_MspInit+0x154>)
 80020f0:	f043 0320 	orr.w	r3, r3, #32
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_SPI_MspInit+0x154>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002102:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002114:	2305      	movs	r3, #5
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	4809      	ldr	r0, [pc, #36]	; (8002144 <HAL_SPI_MspInit+0x168>)
 8002120:	f001 fb96 	bl	8003850 <HAL_GPIO_Init>
}
 8002124:	bf00      	nop
 8002126:	3738      	adds	r7, #56	; 0x38
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40003800 	.word	0x40003800
 8002130:	40023800 	.word	0x40023800
 8002134:	40020400 	.word	0x40020400
 8002138:	40013400 	.word	0x40013400
 800213c:	40021000 	.word	0x40021000
 8002140:	40015000 	.word	0x40015000
 8002144:	40021400 	.word	0x40021400

08002148 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002158:	d10d      	bne.n	8002176 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_TIM_PWM_MspInit+0x3c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_TIM_PWM_MspInit+0x3c>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_TIM_PWM_MspInit+0x3c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d11d      	bne.n	80021e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80021c6:	2304      	movs	r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021e2:	f001 fb35 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	; 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_UART_MspInit+0x14c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d12c      	bne.n	8002274 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_UART_MspInit+0x150>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002232:	623b      	str	r3, [r7, #32]
 8002234:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_UART_MspInit+0x150>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a42      	ldr	r2, [pc, #264]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002252:	2303      	movs	r3, #3
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002262:	2308      	movs	r3, #8
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	4619      	mov	r1, r3
 800226c:	4837      	ldr	r0, [pc, #220]	; (800234c <HAL_UART_MspInit+0x154>)
 800226e:	f001 faef 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002272:	e063      	b.n	800233c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a35      	ldr	r2, [pc, #212]	; (8002350 <HAL_UART_MspInit+0x158>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d12d      	bne.n	80022da <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a30      	ldr	r2, [pc, #192]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_UART_MspInit+0x150>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_UART_MspInit+0x150>)
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_UART_MspInit+0x150>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80022b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c8:	2307      	movs	r3, #7
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	4619      	mov	r1, r3
 80022d2:	4820      	ldr	r0, [pc, #128]	; (8002354 <HAL_UART_MspInit+0x15c>)
 80022d4:	f001 fabc 	bl	8003850 <HAL_GPIO_Init>
}
 80022d8:	e030      	b.n	800233c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <HAL_UART_MspInit+0x160>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d12b      	bne.n	800233c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_UART_MspInit+0x150>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_UART_MspInit+0x150>)
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	6453      	str	r3, [r2, #68]	; 0x44
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_UART_MspInit+0x150>)
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_UART_MspInit+0x150>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6313      	str	r3, [r2, #48]	; 0x30
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_UART_MspInit+0x150>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800231c:	23c0      	movs	r3, #192	; 0xc0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800232c:	2308      	movs	r3, #8
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	4619      	mov	r1, r3
 8002336:	4809      	ldr	r0, [pc, #36]	; (800235c <HAL_UART_MspInit+0x164>)
 8002338:	f001 fa8a 	bl	8003850 <HAL_GPIO_Init>
}
 800233c:	bf00      	nop
 800233e:	3738      	adds	r7, #56	; 0x38
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40007c00 	.word	0x40007c00
 8002348:	40023800 	.word	0x40023800
 800234c:	40021000 	.word	0x40021000
 8002350:	40004800 	.word	0x40004800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40011400 	.word	0x40011400
 800235c:	40020800 	.word	0x40020800

08002360 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002380:	d13f      	bne.n	8002402 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_PCD_MspInit+0xac>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a20      	ldr	r2, [pc, #128]	; (800240c <HAL_PCD_MspInit+0xac>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_PCD_MspInit+0xac>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	4817      	ldr	r0, [pc, #92]	; (8002410 <HAL_PCD_MspInit+0xb0>)
 80023b4:	f001 fa4c 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ca:	230a      	movs	r3, #10
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	480e      	ldr	r0, [pc, #56]	; (8002410 <HAL_PCD_MspInit+0xb0>)
 80023d6:	f001 fa3b 	bl	8003850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_PCD_MspInit+0xac>)
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <HAL_PCD_MspInit+0xac>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6353      	str	r3, [r2, #52]	; 0x34
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_PCD_MspInit+0xac>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <HAL_PCD_MspInit+0xac>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_PCD_MspInit+0xac>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000

08002414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	2036      	movs	r0, #54	; 0x36
 800242a:	f001 f9e7 	bl	80037fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800242e:	2036      	movs	r0, #54	; 0x36
 8002430:	f001 fa00 	bl	8003834 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_InitTick+0xa0>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_InitTick+0xa0>)
 800243e:	f043 0310 	orr.w	r3, r3, #16
 8002442:	6413      	str	r3, [r2, #64]	; 0x40
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_InitTick+0xa0>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002450:	f107 0210 	add.w	r2, r7, #16
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f003 f988 	bl	8005770 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002460:	f003 f95e 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8002464:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_InitTick+0xa4>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	3b01      	subs	r3, #1
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_InitTick+0xa8>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <HAL_InitTick+0xac>)
 8002478:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_InitTick+0xa8>)
 800247c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002480:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_InitTick+0xa8>)
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_InitTick+0xa8>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_InitTick+0xa8>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002494:	4809      	ldr	r0, [pc, #36]	; (80024bc <HAL_InitTick+0xa8>)
 8002496:	f003 fa26 	bl	80058e6 <HAL_TIM_Base_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d104      	bne.n	80024aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024a0:	4806      	ldr	r0, [pc, #24]	; (80024bc <HAL_InitTick+0xa8>)
 80024a2:	f003 fa79 	bl	8005998 <HAL_TIM_Base_Start_IT>
 80024a6:	4603      	mov	r3, r0
 80024a8:	e000      	b.n	80024ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3730      	adds	r7, #48	; 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	431bde83 	.word	0x431bde83
 80024bc:	20000990 	.word	0x20000990
 80024c0:	40001000 	.word	0x40001000

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler+0x4>

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <MemManage_Handler+0x4>

080024d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM6_DAC_IRQHandler+0x10>)
 8002522:	f003 faf8 	bl	8005b16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000990 	.word	0x20000990

08002530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_kill>:

int _kill(int pid, int sig)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800254a:	f004 fe4f 	bl	80071ec <__errno>
 800254e:	4603      	mov	r3, r0
 8002550:	2216      	movs	r2, #22
 8002552:	601a      	str	r2, [r3, #0]
	return -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_exit>:

void _exit (int status)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ffe7 	bl	8002540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002572:	e7fe      	b.n	8002572 <_exit+0x12>

08002574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e00a      	b.n	800259c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002586:	f3af 8000 	nop.w
 800258a:	4601      	mov	r1, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	60ba      	str	r2, [r7, #8]
 8002592:	b2ca      	uxtb	r2, r1
 8002594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dbf0      	blt.n	8002586 <_read+0x12>
	}

return len;
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e009      	b.n	80025d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbf1      	blt.n	80025c0 <_write+0x12>
	}
	return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_close>:

int _close(int file)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
	return -1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260e:	605a      	str	r2, [r3, #4]
	return 0;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_isatty>:

int _isatty(int file)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	return 1;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
	return 0;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f004 fdb4 	bl	80071ec <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20030000 	.word	0x20030000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	2000020c 	.word	0x2000020c
 80026b8:	200009f0 	.word	0x200009f0

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800270a:	f7ff ffd7 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f004 fd73 	bl	80071f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7fe fda3 	bl	800125c <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002718:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002724:	0800a4d4 	.word	0x0800a4d4
  ldr r2, =_sbss
 8002728:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800272c:	200009ec 	.word	0x200009ec

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>

08002732 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002732:	b590      	push	{r4, r7, lr}
 8002734:	b087      	sub	sp, #28
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	461a      	mov	r2, r3
 800273e:	460b      	mov	r3, r1
 8002740:	72fb      	strb	r3, [r7, #11]
 8002742:	4613      	mov	r3, r2
 8002744:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685c      	ldr	r4, [r3, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6898      	ldr	r0, [r3, #8]
 800274e:	893b      	ldrh	r3, [r7, #8]
 8002750:	7af9      	ldrb	r1, [r7, #11]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	47a0      	blx	r4
 8002756:	6178      	str	r0, [r7, #20]

  return ret;
 8002758:	697b      	ldr	r3, [r7, #20]
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}

08002762 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002762:	b590      	push	{r4, r7, lr}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	461a      	mov	r2, r3
 800276e:	460b      	mov	r3, r1
 8002770:	72fb      	strb	r3, [r7, #11]
 8002772:	4613      	mov	r3, r2
 8002774:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681c      	ldr	r4, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6898      	ldr	r0, [r3, #8]
 800277e:	893b      	ldrh	r3, [r7, #8]
 8002780:	7af9      	ldrb	r1, [r7, #11]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	47a0      	blx	r4
 8002786:	6178      	str	r0, [r7, #20]

  return ret;
 8002788:	697b      	ldr	r3, [r7, #20]
}
 800278a:	4618      	mov	r0, r3
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd90      	pop	{r4, r7, pc}
	...

08002794 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800279e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80027c0 <lsm6dsr_from_fs2g_to_mg+0x2c>
 80027ae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027b2:	eeb0 0a67 	vmov.f32	s0, s15
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	3d79db23 	.word	0x3d79db23

080027c4 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80027ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80027f0 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80027de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	428c0000 	.word	0x428c0000

080027f4 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80027fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002828 <lsm6dsr_from_lsb_to_celsius+0x34>
 800280e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002812:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002816:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	43800000 	.word	0x43800000

0800282c <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002838:	f107 0208 	add.w	r2, r7, #8
 800283c:	2301      	movs	r3, #1
 800283e:	2110      	movs	r1, #16
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff76 	bl	8002732 <lsm6dsr_read_reg>
 8002846:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	b2da      	uxtb	r2, r3
 8002856:	7a3b      	ldrb	r3, [r7, #8]
 8002858:	f362 0383 	bfi	r3, r2, #2, #2
 800285c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800285e:	f107 0208 	add.w	r2, r7, #8
 8002862:	2301      	movs	r3, #1
 8002864:	2110      	movs	r1, #16
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff7b 	bl	8002762 <lsm6dsr_write_reg>
 800286c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fbb0 	bl	8002ff4 <lsm6dsr_fsm_enable_get>
 8002894:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 80c4 	bne.w	8002a26 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800289e:	7b3b      	ldrb	r3, [r7, #12]
 80028a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80028a6:	7b3b      	ldrb	r3, [r7, #12]
 80028a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028ac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80028ae:	4313      	orrs	r3, r2
 80028b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80028b2:	7b3b      	ldrb	r3, [r7, #12]
 80028b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80028be:	7b3b      	ldrb	r3, [r7, #12]
 80028c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80028c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80028ca:	7b3b      	ldrb	r3, [r7, #12]
 80028cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80028d6:	7b3b      	ldrb	r3, [r7, #12]
 80028d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80028dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80028de:	4313      	orrs	r3, r2
 80028e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80028e2:	7b3b      	ldrb	r3, [r7, #12]
 80028e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80028e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80028ea:	4313      	orrs	r3, r2
 80028ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80028ee:	7b3b      	ldrb	r3, [r7, #12]
 80028f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80028f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002900:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002902:	4313      	orrs	r3, r2
 8002904:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002906:	7b7b      	ldrb	r3, [r7, #13]
 8002908:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800290c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800290e:	4313      	orrs	r3, r2
 8002910:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002912:	7b7b      	ldrb	r3, [r7, #13]
 8002914:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002918:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800291a:	4313      	orrs	r3, r2
 800291c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800291e:	7b7b      	ldrb	r3, [r7, #13]
 8002920:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002924:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002926:	4313      	orrs	r3, r2
 8002928:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002930:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002932:	4313      	orrs	r3, r2
 8002934:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002936:	7b7b      	ldrb	r3, [r7, #13]
 8002938:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800293c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800293e:	4313      	orrs	r3, r2
 8002940:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002942:	7b7b      	ldrb	r3, [r7, #13]
 8002944:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002948:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800294a:	4313      	orrs	r3, r2
 800294c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800294e:	7b7b      	ldrb	r3, [r7, #13]
 8002950:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002954:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002956:	4313      	orrs	r3, r2
 8002958:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800295a:	2b01      	cmp	r3, #1
 800295c:	d163      	bne.n	8002a26 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800295e:	f107 030b 	add.w	r3, r7, #11
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb71 	bl	800304c <lsm6dsr_fsm_data_rate_get>
 800296a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d159      	bne.n	8002a26 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002972:	7afb      	ldrb	r3, [r7, #11]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d853      	bhi.n	8002a20 <lsm6dsr_xl_data_rate_set+0x1a8>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <lsm6dsr_xl_data_rate_set+0x108>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	080029a3 	.word	0x080029a3
 8002988:	080029c1 	.word	0x080029c1
 800298c:	080029eb 	.word	0x080029eb
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800299a:	e045      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	75fb      	strb	r3, [r7, #23]
            break;
 80029a0:	e042      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80029a8:	2302      	movs	r3, #2
 80029aa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80029ac:	e03c      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80029b4:	2302      	movs	r3, #2
 80029b6:	75fb      	strb	r3, [r7, #23]
            break;
 80029b8:	e036      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	75fb      	strb	r3, [r7, #23]
            break;
 80029be:	e033      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80029c6:	2303      	movs	r3, #3
 80029c8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80029ca:	e02d      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80029d2:	2303      	movs	r3, #3
 80029d4:	75fb      	strb	r3, [r7, #23]
            break;
 80029d6:	e027      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d102      	bne.n	80029e4 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80029de:	2303      	movs	r3, #3
 80029e0:	75fb      	strb	r3, [r7, #23]
            break;
 80029e2:	e021      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	75fb      	strb	r3, [r7, #23]
            break;
 80029e8:	e01e      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80029f0:	2304      	movs	r3, #4
 80029f2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80029f4:	e018      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80029fc:	2304      	movs	r3, #4
 80029fe:	75fb      	strb	r3, [r7, #23]
            break;
 8002a00:	e012      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d102      	bne.n	8002a0e <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8002a0c:	e00c      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d102      	bne.n	8002a1a <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8002a14:	2304      	movs	r3, #4
 8002a16:	75fb      	strb	r3, [r7, #23]
            break;
 8002a18:	e006      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	75fb      	strb	r3, [r7, #23]
            break;
 8002a1e:	e003      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	75fb      	strb	r3, [r7, #23]
            break;
 8002a24:	e000      	b.n	8002a28 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8002a26:	bf00      	nop
    }
  }

  if (ret == 0)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002a2e:	f107 0208 	add.w	r2, r7, #8
 8002a32:	2301      	movs	r3, #1
 8002a34:	2110      	movs	r1, #16
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fe7b 	bl	8002732 <lsm6dsr_read_reg>
 8002a3c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10f      	bne.n	8002a64 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	7a3b      	ldrb	r3, [r7, #8]
 8002a4e:	f362 1307 	bfi	r3, r2, #4, #4
 8002a52:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8002a54:	f107 0208 	add.w	r2, r7, #8
 8002a58:	2301      	movs	r3, #1
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fe80 	bl	8002762 <lsm6dsr_write_reg>
 8002a62:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002a64:	693b      	ldr	r3, [r7, #16]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop

08002a70 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002a7c:	f107 0208 	add.w	r2, r7, #8
 8002a80:	2301      	movs	r3, #1
 8002a82:	2111      	movs	r1, #17
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fe54 	bl	8002732 <lsm6dsr_read_reg>
 8002a8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	7a3b      	ldrb	r3, [r7, #8]
 8002a9c:	f362 0303 	bfi	r3, r2, #0, #4
 8002aa0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002aa2:	f107 0208 	add.w	r2, r7, #8
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	2111      	movs	r1, #17
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fe59 	bl	8002762 <lsm6dsr_write_reg>
 8002ab0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa8e 	bl	8002ff4 <lsm6dsr_fsm_enable_get>
 8002ad8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 80c4 	bne.w	8002c6a <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002ae2:	7b3b      	ldrb	r3, [r7, #12]
 8002ae4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ae8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002aea:	7b3b      	ldrb	r3, [r7, #12]
 8002aec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002af0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002af6:	7b3b      	ldrb	r3, [r7, #12]
 8002af8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002afc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002afe:	4313      	orrs	r3, r2
 8002b00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002b02:	7b3b      	ldrb	r3, [r7, #12]
 8002b04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002b0e:	7b3b      	ldrb	r3, [r7, #12]
 8002b10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002b16:	4313      	orrs	r3, r2
 8002b18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002b1a:	7b3b      	ldrb	r3, [r7, #12]
 8002b1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002b22:	4313      	orrs	r3, r2
 8002b24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002b26:	7b3b      	ldrb	r3, [r7, #12]
 8002b28:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002b32:	7b3b      	ldrb	r3, [r7, #12]
 8002b34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002b3e:	7b7b      	ldrb	r3, [r7, #13]
 8002b40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002b4a:	7b7b      	ldrb	r3, [r7, #13]
 8002b4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002b56:	7b7b      	ldrb	r3, [r7, #13]
 8002b58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002b62:	7b7b      	ldrb	r3, [r7, #13]
 8002b64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002b6e:	7b7b      	ldrb	r3, [r7, #13]
 8002b70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002b7a:	7b7b      	ldrb	r3, [r7, #13]
 8002b7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002b86:	7b7b      	ldrb	r3, [r7, #13]
 8002b88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002b92:	7b7b      	ldrb	r3, [r7, #13]
 8002b94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d163      	bne.n	8002c6a <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8002ba2:	f107 030b 	add.w	r3, r7, #11
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fa4f 	bl	800304c <lsm6dsr_fsm_data_rate_get>
 8002bae:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d159      	bne.n	8002c6a <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d853      	bhi.n	8002c64 <lsm6dsr_gy_data_rate_set+0x1a8>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <lsm6dsr_gy_data_rate_set+0x108>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002be7 	.word	0x08002be7
 8002bcc:	08002c05 	.word	0x08002c05
 8002bd0:	08002c2f 	.word	0x08002c2f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002bde:	e045      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	75fb      	strb	r3, [r7, #23]
            break;
 8002be4:	e042      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8002bec:	2302      	movs	r3, #2
 8002bee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002bf0:	e03c      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	75fb      	strb	r3, [r7, #23]
            break;
 8002bfc:	e036      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	75fb      	strb	r3, [r7, #23]
            break;
 8002c02:	e033      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002c0e:	e02d      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8002c16:	2303      	movs	r3, #3
 8002c18:	75fb      	strb	r3, [r7, #23]
            break;
 8002c1a:	e027      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d102      	bne.n	8002c28 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8002c22:	2303      	movs	r3, #3
 8002c24:	75fb      	strb	r3, [r7, #23]
            break;
 8002c26:	e021      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	75fb      	strb	r3, [r7, #23]
            break;
 8002c2c:	e01e      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8002c34:	2304      	movs	r3, #4
 8002c36:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002c38:	e018      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8002c40:	2304      	movs	r3, #4
 8002c42:	75fb      	strb	r3, [r7, #23]
            break;
 8002c44:	e012      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d102      	bne.n	8002c52 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	75fb      	strb	r3, [r7, #23]
            break;
 8002c50:	e00c      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d102      	bne.n	8002c5e <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8002c58:	2304      	movs	r3, #4
 8002c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8002c5c:	e006      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	75fb      	strb	r3, [r7, #23]
            break;
 8002c62:	e003      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	75fb      	strb	r3, [r7, #23]
            break;
 8002c68:	e000      	b.n	8002c6c <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8002c6a:	bf00      	nop
    }
  }

  if (ret == 0)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d107      	bne.n	8002c82 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002c72:	f107 0208 	add.w	r2, r7, #8
 8002c76:	2301      	movs	r3, #1
 8002c78:	2111      	movs	r1, #17
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fd59 	bl	8002732 <lsm6dsr_read_reg>
 8002c80:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10f      	bne.n	8002ca8 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	7a3b      	ldrb	r3, [r7, #8]
 8002c92:	f362 1307 	bfi	r3, r2, #4, #4
 8002c96:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002c98:	f107 0208 	add.w	r2, r7, #8
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	2111      	movs	r1, #17
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fd5e 	bl	8002762 <lsm6dsr_write_reg>
 8002ca6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8002ca8:	693b      	ldr	r3, [r7, #16]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop

08002cb4 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002cc0:	f107 0208 	add.w	r2, r7, #8
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	2112      	movs	r1, #18
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fd32 	bl	8002732 <lsm6dsr_read_reg>
 8002cce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	7a3b      	ldrb	r3, [r7, #8]
 8002ce0:	f362 1386 	bfi	r3, r2, #6, #1
 8002ce4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002ce6:	f107 0208 	add.w	r2, r7, #8
 8002cea:	2301      	movs	r3, #1
 8002cec:	2112      	movs	r1, #18
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fd37 	bl	8002762 <lsm6dsr_write_reg>
 8002cf4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8002d0a:	f107 0208 	add.w	r2, r7, #8
 8002d0e:	2301      	movs	r3, #1
 8002d10:	211e      	movs	r1, #30
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fd0d 	bl	8002732 <lsm6dsr_read_reg>
 8002d18:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8002d1a:	7a3b      	ldrb	r3, [r7, #8]
 8002d1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	701a      	strb	r2, [r3, #0]

  return ret;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	2301      	movs	r3, #1
 8002d42:	211e      	movs	r1, #30
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fcf4 	bl	8002732 <lsm6dsr_read_reg>
 8002d4a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8002d4c:	7a3b      	ldrb	r3, [r7, #8]
 8002d4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	701a      	strb	r2, [r3, #0]

  return ret;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8002d6e:	f107 0208 	add.w	r2, r7, #8
 8002d72:	2301      	movs	r3, #1
 8002d74:	211e      	movs	r1, #30
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fcdb 	bl	8002732 <lsm6dsr_read_reg>
 8002d7c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8002d7e:	7a3b      	ldrb	r3, [r7, #8]
 8002d80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	701a      	strb	r2, [r3, #0]

  return ret;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8002da0:	f107 0208 	add.w	r2, r7, #8
 8002da4:	2302      	movs	r3, #2
 8002da6:	2120      	movs	r1, #32
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fcc2 	bl	8002732 <lsm6dsr_read_reg>
 8002dae:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8002db0:	7a7b      	ldrb	r3, [r7, #9]
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	7a3b      	ldrb	r3, [r7, #8]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	b21a      	sxth	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	801a      	strh	r2, [r3, #0]

  return ret;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8002de6:	f107 020c 	add.w	r2, r7, #12
 8002dea:	2306      	movs	r3, #6
 8002dec:	2122      	movs	r1, #34	; 0x22
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fc9f 	bl	8002732 <lsm6dsr_read_reg>
 8002df4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002df6:	7b7b      	ldrb	r3, [r7, #13]
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	7b3b      	ldrb	r3, [r7, #12]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	b212      	sxth	r2, r2
 8002e20:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3302      	adds	r3, #2
 8002e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	7bbb      	ldrb	r3, [r7, #14]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	b212      	sxth	r2, r2
 8002e3e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002e40:	7c7a      	ldrb	r2, [r7, #17]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	3304      	adds	r3, #4
 8002e46:	b212      	sxth	r2, r2
 8002e48:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	7c3b      	ldrb	r3, [r7, #16]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	3304      	adds	r3, #4
 8002e64:	b212      	sxth	r2, r2
 8002e66:	801a      	strh	r2, [r3, #0]

  return ret;
 8002e68:	697b      	ldr	r3, [r7, #20]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8002e7c:	f107 020c 	add.w	r2, r7, #12
 8002e80:	2306      	movs	r3, #6
 8002e82:	2128      	movs	r1, #40	; 0x28
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fc54 	bl	8002732 <lsm6dsr_read_reg>
 8002e8a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002e8c:	7b7b      	ldrb	r3, [r7, #13]
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	7b3b      	ldrb	r3, [r7, #12]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	b212      	sxth	r2, r2
 8002eb6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	3302      	adds	r3, #2
 8002ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	7bbb      	ldrb	r3, [r7, #14]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	b212      	sxth	r2, r2
 8002ed4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002ed6:	7c7a      	ldrb	r2, [r7, #17]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	3304      	adds	r3, #4
 8002edc:	b212      	sxth	r2, r2
 8002ede:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	7c3b      	ldrb	r3, [r7, #16]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	b212      	sxth	r2, r2
 8002efc:	801a      	strh	r2, [r3, #0]

  return ret;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8002f14:	f107 0208 	add.w	r2, r7, #8
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fc08 	bl	8002732 <lsm6dsr_read_reg>
 8002f22:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	7a3b      	ldrb	r3, [r7, #8]
 8002f34:	f362 1387 	bfi	r3, r2, #6, #2
 8002f38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8002f3a:	f107 0208 	add.w	r2, r7, #8
 8002f3e:	2301      	movs	r3, #1
 8002f40:	2101      	movs	r1, #1
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fc0d 	bl	8002762 <lsm6dsr_write_reg>
 8002f48:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8002f5e:	2301      	movs	r3, #1
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	210f      	movs	r1, #15
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff fbe4 	bl	8002732 <lsm6dsr_read_reg>
 8002f6a:	60f8      	str	r0, [r7, #12]

  return ret;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002f82:	f107 0208 	add.w	r2, r7, #8
 8002f86:	2301      	movs	r3, #1
 8002f88:	2112      	movs	r1, #18
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fbd1 	bl	8002732 <lsm6dsr_read_reg>
 8002f90:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	7a3b      	ldrb	r3, [r7, #8]
 8002fa2:	f362 0300 	bfi	r3, r2, #0, #1
 8002fa6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002fa8:	f107 0208 	add.w	r2, r7, #8
 8002fac:	2301      	movs	r3, #1
 8002fae:	2112      	movs	r1, #18
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fbd6 	bl	8002762 <lsm6dsr_write_reg>
 8002fb6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002fcc:	f107 0208 	add.w	r2, r7, #8
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	2112      	movs	r1, #18
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fbac 	bl	8002732 <lsm6dsr_read_reg>
 8002fda:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8002fdc:	7a3b      	ldrb	r3, [r7, #8]
 8002fde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]

  return ret;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8002ffe:	2102      	movs	r1, #2
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff81 	bl	8002f08 <lsm6dsr_mem_bank_set>
 8003006:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800300e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8003010:	2301      	movs	r3, #1
 8003012:	2146      	movs	r1, #70	; 0x46
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fb8c 	bl	8002732 <lsm6dsr_read_reg>
 800301a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8003026:	2301      	movs	r3, #1
 8003028:	2147      	movs	r1, #71	; 0x47
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fb81 	bl	8002732 <lsm6dsr_read_reg>
 8003030:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8003038:	2100      	movs	r1, #0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ff64 	bl	8002f08 <lsm6dsr_mem_bank_set>
 8003040:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8003056:	2102      	movs	r1, #2
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff55 	bl	8002f08 <lsm6dsr_mem_bank_set>
 800305e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d107      	bne.n	8003076 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8003066:	f107 0208 	add.w	r2, r7, #8
 800306a:	2301      	movs	r3, #1
 800306c:	215f      	movs	r1, #95	; 0x5f
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff fb5f 	bl	8002732 <lsm6dsr_read_reg>
 8003074:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800307c:	2100      	movs	r1, #0
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff42 	bl	8002f08 <lsm6dsr_mem_bank_set>
 8003084:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8003086:	7a3b      	ldrb	r3, [r7, #8]
 8003088:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d81a      	bhi.n	80030c8 <lsm6dsr_fsm_data_rate_get+0x7c>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030b1 	.word	0x080030b1
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030c1 	.word	0x080030c1
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
      break;
 80030ae:	e00f      	b.n	80030d0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
      break;
 80030b6:	e00b      	b.n	80030d0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
      break;
 80030be:	e007      	b.n	80030d0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2203      	movs	r2, #3
 80030c4:	701a      	strb	r2, [r3, #0]
      break;
 80030c6:	e003      	b.n	80030d0 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
      break;
 80030ce:	bf00      	nop
  }

  return ret;
 80030d0:	68fb      	ldr	r3, [r7, #12]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop

080030dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_Init+0x40>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_Init+0x40>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_Init+0x40>)
 80030f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <HAL_Init+0x40>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003104:	2003      	movs	r0, #3
 8003106:	f000 fb6e 	bl	80037e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800310a:	200f      	movs	r0, #15
 800310c:	f7ff f982 	bl	8002414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003110:	f7fe fe22 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023c00 	.word	0x40023c00

08003120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_IncTick+0x20>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x24>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4413      	add	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_IncTick+0x24>)
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000008 	.word	0x20000008
 8003144:	200009d8 	.word	0x200009d8

08003148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return uwTick;
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_GetTick+0x14>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200009d8 	.word	0x200009d8

08003160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7ff ffee 	bl	8003148 <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d005      	beq.n	8003186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_Delay+0x44>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003186:	bf00      	nop
 8003188:	f7ff ffde 	bl	8003148 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d8f7      	bhi.n	8003188 <HAL_Delay+0x28>
  {
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000008 	.word	0x20000008

080031a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e033      	b.n	8003226 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fdee 	bl	8001da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ee:	f023 0302 	bic.w	r3, r3, #2
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f94a 	bl	8003494 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
 8003216:	e001      	b.n	800321c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_ADC_ConfigChannel+0x1c>
 8003248:	2302      	movs	r3, #2
 800324a:	e113      	b.n	8003474 <HAL_ADC_ConfigChannel+0x244>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b09      	cmp	r3, #9
 800325a:	d925      	bls.n	80032a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68d9      	ldr	r1, [r3, #12]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	3b1e      	subs	r3, #30
 8003272:	2207      	movs	r2, #7
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43da      	mvns	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	400a      	ands	r2, r1
 8003280:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68d9      	ldr	r1, [r3, #12]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	4603      	mov	r3, r0
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4403      	add	r3, r0
 800329a:	3b1e      	subs	r3, #30
 800329c:	409a      	lsls	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	e022      	b.n	80032ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6919      	ldr	r1, [r3, #16]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	2207      	movs	r2, #7
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	400a      	ands	r2, r1
 80032ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6919      	ldr	r1, [r3, #16]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4403      	add	r3, r0
 80032e4:	409a      	lsls	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d824      	bhi.n	8003340 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	3b05      	subs	r3, #5
 8003308:	221f      	movs	r2, #31
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	400a      	ands	r2, r1
 8003316:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	4618      	mov	r0, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	3b05      	subs	r3, #5
 8003332:	fa00 f203 	lsl.w	r2, r0, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	635a      	str	r2, [r3, #52]	; 0x34
 800333e:	e04c      	b.n	80033da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	d824      	bhi.n	8003392 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3b23      	subs	r3, #35	; 0x23
 800335a:	221f      	movs	r2, #31
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43da      	mvns	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	400a      	ands	r2, r1
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b23      	subs	r3, #35	; 0x23
 8003384:	fa00 f203 	lsl.w	r2, r0, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
 8003390:	e023      	b.n	80033da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	3b41      	subs	r3, #65	; 0x41
 80033a4:	221f      	movs	r2, #31
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	400a      	ands	r2, r1
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	4618      	mov	r0, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	3b41      	subs	r3, #65	; 0x41
 80033ce:	fa00 f203 	lsl.w	r2, r0, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_ADC_ConfigChannel+0x250>)
 80033dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a28      	ldr	r2, [pc, #160]	; (8003484 <HAL_ADC_ConfigChannel+0x254>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10f      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d8>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b12      	cmp	r3, #18
 80033ee:	d10b      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_ADC_ConfigChannel+0x254>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d12b      	bne.n	800346a <HAL_ADC_ConfigChannel+0x23a>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_ADC_ConfigChannel+0x258>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <HAL_ADC_ConfigChannel+0x1f4>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b11      	cmp	r3, #17
 8003422:	d122      	bne.n	800346a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_ADC_ConfigChannel+0x258>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d111      	bne.n	800346a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_ADC_ConfigChannel+0x25c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a11      	ldr	r2, [pc, #68]	; (8003490 <HAL_ADC_ConfigChannel+0x260>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0c9a      	lsrs	r2, r3, #18
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800345c:	e002      	b.n	8003464 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3b01      	subs	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f9      	bne.n	800345e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40012300 	.word	0x40012300
 8003484:	40012000 	.word	0x40012000
 8003488:	10000012 	.word	0x10000012
 800348c:	20000000 	.word	0x20000000
 8003490:	431bde83 	.word	0x431bde83

08003494 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800349c:	4b79      	ldr	r3, [pc, #484]	; (8003684 <ADC_Init+0x1f0>)
 800349e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	4a58      	ldr	r2, [pc, #352]	; (8003688 <ADC_Init+0x1f4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800353a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e00f      	b.n	8003592 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003590:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0202 	bic.w	r2, r2, #2
 80035a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7e1b      	ldrb	r3, [r3, #24]
 80035ac:	005a      	lsls	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	3b01      	subs	r3, #1
 80035ec:	035a      	lsls	r2, r3, #13
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	e007      	b.n	8003608 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	3b01      	subs	r3, #1
 8003624:	051a      	lsls	r2, r3, #20
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800363c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800364a:	025a      	lsls	r2, r3, #9
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	029a      	lsls	r2, r3, #10
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40012300 	.word	0x40012300
 8003688:	0f000001 	.word	0x0f000001

0800368c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	60d3      	str	r3, [r2, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_GetPriorityGrouping+0x18>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 0307 	and.w	r3, r3, #7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db0b      	blt.n	800371a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <__NVIC_EnableIRQ+0x38>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff4c 	bl	800368c <__NVIC_SetPriorityGrouping>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380e:	f7ff ff61 	bl	80036d4 <__NVIC_GetPriorityGrouping>
 8003812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	f7ff ffb1 	bl	8003780 <NVIC_EncodePriority>
 800381e:	4602      	mov	r2, r0
 8003820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff80 	bl	800372c <__NVIC_SetPriority>
}
 800382c:	bf00      	nop
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff54 	bl	80036f0 <__NVIC_EnableIRQ>
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e177      	b.n	8003b5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800386c:	2201      	movs	r2, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	f040 8166 	bne.w	8003b56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d005      	beq.n	80038a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d130      	bne.n	8003904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	2203      	movs	r2, #3
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d8:	2201      	movs	r2, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 0201 	and.w	r2, r3, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b03      	cmp	r3, #3
 800390e:	d017      	beq.n	8003940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	2203      	movs	r2, #3
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d123      	bne.n	8003994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	08da      	lsrs	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3208      	adds	r2, #8
 8003954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	220f      	movs	r2, #15
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	08da      	lsrs	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3208      	adds	r2, #8
 800398e:	69b9      	ldr	r1, [r7, #24]
 8003990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80c0 	beq.w	8003b56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <HAL_GPIO_Init+0x324>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	4a65      	ldr	r2, [pc, #404]	; (8003b74 <HAL_GPIO_Init+0x324>)
 80039e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e4:	6453      	str	r3, [r2, #68]	; 0x44
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_GPIO_Init+0x324>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039f2:	4a61      	ldr	r2, [pc, #388]	; (8003b78 <HAL_GPIO_Init+0x328>)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	3302      	adds	r3, #2
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	220f      	movs	r2, #15
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d037      	beq.n	8003a8e <HAL_GPIO_Init+0x23e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <HAL_GPIO_Init+0x330>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_GPIO_Init+0x23a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a56      	ldr	r2, [pc, #344]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d02b      	beq.n	8003a86 <HAL_GPIO_Init+0x236>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a55      	ldr	r2, [pc, #340]	; (8003b88 <HAL_GPIO_Init+0x338>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d025      	beq.n	8003a82 <HAL_GPIO_Init+0x232>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a54      	ldr	r2, [pc, #336]	; (8003b8c <HAL_GPIO_Init+0x33c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x22e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a53      	ldr	r2, [pc, #332]	; (8003b90 <HAL_GPIO_Init+0x340>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x22a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a52      	ldr	r2, [pc, #328]	; (8003b94 <HAL_GPIO_Init+0x344>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x226>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a51      	ldr	r2, [pc, #324]	; (8003b98 <HAL_GPIO_Init+0x348>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x222>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a50      	ldr	r2, [pc, #320]	; (8003b9c <HAL_GPIO_Init+0x34c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x21e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4f      	ldr	r2, [pc, #316]	; (8003ba0 <HAL_GPIO_Init+0x350>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x21a>
 8003a66:	2309      	movs	r3, #9
 8003a68:	e012      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a6a:	230a      	movs	r3, #10
 8003a6c:	e010      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a6e:	2308      	movs	r3, #8
 8003a70:	e00e      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a72:	2307      	movs	r3, #7
 8003a74:	e00c      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a76:	2306      	movs	r3, #6
 8003a78:	e00a      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	e008      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a82:	2303      	movs	r3, #3
 8003a84:	e004      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_GPIO_Init+0x240>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f002 0203 	and.w	r2, r2, #3
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa0:	4935      	ldr	r1, [pc, #212]	; (8003b78 <HAL_GPIO_Init+0x328>)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad2:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afc:	4a29      	ldr	r2, [pc, #164]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b26:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <HAL_GPIO_Init+0x354>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	f67f ae84 	bls.w	800386c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020800 	.word	0x40020800
 8003b88:	40020c00 	.word	0x40020c00
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40021400 	.word	0x40021400
 8003b94:	40021800 	.word	0x40021800
 8003b98:	40021c00 	.word	0x40021c00
 8003b9c:	40022000 	.word	0x40022000
 8003ba0:	40022400 	.word	0x40022400
 8003ba4:	40013c00 	.word	0x40013c00

08003ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb8:	787b      	ldrb	r3, [r7, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc4:	e003      	b.n	8003bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	619a      	str	r2, [r3, #24]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e12b      	b.n	8003e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe f914 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c40:	f001 fd6e 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8003c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a81      	ldr	r2, [pc, #516]	; (8003e50 <HAL_I2C_Init+0x274>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d807      	bhi.n	8003c60 <HAL_I2C_Init+0x84>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a80      	ldr	r2, [pc, #512]	; (8003e54 <HAL_I2C_Init+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bf94      	ite	ls
 8003c58:	2301      	movls	r3, #1
 8003c5a:	2300      	movhi	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e006      	b.n	8003c6e <HAL_I2C_Init+0x92>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a7d      	ldr	r2, [pc, #500]	; (8003e58 <HAL_I2C_Init+0x27c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0e7      	b.n	8003e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a78      	ldr	r2, [pc, #480]	; (8003e5c <HAL_I2C_Init+0x280>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0c9b      	lsrs	r3, r3, #18
 8003c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a6a      	ldr	r2, [pc, #424]	; (8003e50 <HAL_I2C_Init+0x274>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d802      	bhi.n	8003cb0 <HAL_I2C_Init+0xd4>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3301      	adds	r3, #1
 8003cae:	e009      	b.n	8003cc4 <HAL_I2C_Init+0xe8>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	4a69      	ldr	r2, [pc, #420]	; (8003e60 <HAL_I2C_Init+0x284>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	495c      	ldr	r1, [pc, #368]	; (8003e50 <HAL_I2C_Init+0x274>)
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	d819      	bhi.n	8003d18 <HAL_I2C_Init+0x13c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e59      	subs	r1, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_I2C_Init+0x138>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1e59      	subs	r1, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d12:	e051      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d14:	2304      	movs	r3, #4
 8003d16:	e04f      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <HAL_I2C_Init+0x168>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	440b      	add	r3, r1
 8003d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e012      	b.n	8003d6a <HAL_I2C_Init+0x18e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	0099      	lsls	r1, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Init+0x196>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e022      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10e      	bne.n	8003d98 <HAL_I2C_Init+0x1bc>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1e58      	subs	r0, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	440b      	add	r3, r1
 8003d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	e00f      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1e58      	subs	r0, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	0099      	lsls	r1, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	6809      	ldr	r1, [r1, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6911      	ldr	r1, [r2, #16]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68d2      	ldr	r2, [r2, #12]
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	000186a0 	.word	0x000186a0
 8003e54:	001e847f 	.word	0x001e847f
 8003e58:	003d08ff 	.word	0x003d08ff
 8003e5c:	431bde83 	.word	0x431bde83
 8003e60:	10624dd3 	.word	0x10624dd3

08003e64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	460b      	mov	r3, r1
 8003e78:	813b      	strh	r3, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e7e:	f7ff f963 	bl	8003148 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	f040 80d9 	bne.w	8004044 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2319      	movs	r3, #25
 8003e98:	2201      	movs	r2, #1
 8003e9a:	496d      	ldr	r1, [pc, #436]	; (8004050 <HAL_I2C_Mem_Write+0x1ec>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fc7f 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0cc      	b.n	8004046 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Mem_Write+0x56>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e0c5      	b.n	8004046 <HAL_I2C_Mem_Write+0x1e2>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d007      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2221      	movs	r2, #33	; 0x21
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a4d      	ldr	r2, [pc, #308]	; (8004054 <HAL_I2C_Mem_Write+0x1f0>)
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f22:	88f8      	ldrh	r0, [r7, #6]
 8003f24:	893a      	ldrh	r2, [r7, #8]
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4603      	mov	r3, r0
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fab6 	bl	80044a4 <I2C_RequestMemoryWrite>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d052      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e081      	b.n	8004046 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fd00 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06b      	b.n	8004046 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11b      	bne.n	8003fe4 <HAL_I2C_Mem_Write+0x180>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d017      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1aa      	bne.n	8003f42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fcec 	bl	80049ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00d      	beq.n	8004018 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	2b04      	cmp	r3, #4
 8004002:	d107      	bne.n	8004014 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004012:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e016      	b.n	8004046 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000

08004058 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	461a      	mov	r2, r3
 8004066:	4603      	mov	r3, r0
 8004068:	817b      	strh	r3, [r7, #10]
 800406a:	460b      	mov	r3, r1
 800406c:	813b      	strh	r3, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004072:	f7ff f869 	bl	8003148 <HAL_GetTick>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	f040 8208 	bne.w	8004496 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2319      	movs	r3, #25
 800408c:	2201      	movs	r2, #1
 800408e:	497b      	ldr	r1, [pc, #492]	; (800427c <HAL_I2C_Mem_Read+0x224>)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fb85 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
 800409e:	e1fb      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Mem_Read+0x56>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e1f4      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d007      	beq.n	80040d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2222      	movs	r2, #34	; 0x22
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a5b      	ldr	r2, [pc, #364]	; (8004280 <HAL_I2C_Mem_Read+0x228>)
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004116:	88f8      	ldrh	r0, [r7, #6]
 8004118:	893a      	ldrh	r2, [r7, #8]
 800411a:	8979      	ldrh	r1, [r7, #10]
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4603      	mov	r3, r0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fa52 	bl	80045d0 <I2C_RequestMemoryRead>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e1b0      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d113      	bne.n	8004166 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413e:	2300      	movs	r3, #0
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e184      	b.n	8004470 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	2b01      	cmp	r3, #1
 800416c:	d11b      	bne.n	80041a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e164      	b.n	8004470 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d11b      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	e144      	b.n	8004470 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041fc:	e138      	b.n	8004470 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	2b03      	cmp	r3, #3
 8004204:	f200 80f1 	bhi.w	80043ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	2b01      	cmp	r3, #1
 800420e:	d123      	bne.n	8004258 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fc1b 	bl	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e139      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004256:	e10b      	b.n	8004470 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b02      	cmp	r3, #2
 800425e:	d14e      	bne.n	80042fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	2200      	movs	r2, #0
 8004268:	4906      	ldr	r1, [pc, #24]	; (8004284 <HAL_I2C_Mem_Read+0x22c>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fa98 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e10e      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
 800427a:	bf00      	nop
 800427c:	00100002 	.word	0x00100002
 8004280:	ffff0000 	.word	0xffff0000
 8004284:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042fc:	e0b8      	b.n	8004470 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	2200      	movs	r2, #0
 8004306:	4966      	ldr	r1, [pc, #408]	; (80044a0 <HAL_I2C_Mem_Read+0x448>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa49 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0bf      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	2200      	movs	r2, #0
 8004362:	494f      	ldr	r1, [pc, #316]	; (80044a0 <HAL_I2C_Mem_Read+0x448>)
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fa1b 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e091      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043e8:	e042      	b.n	8004470 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fb2e 	bl	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e04c      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d118      	bne.n	8004470 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f aec2 	bne.w	80041fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	00010004 	.word	0x00010004

080044a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f960 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d103      	bne.n	80044fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e05f      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	492d      	ldr	r1, [pc, #180]	; (80045cc <I2C_RequestMemoryWrite+0x128>)
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f998 	bl	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e04c      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004540:	6a39      	ldr	r1, [r7, #32]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa02 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b04      	cmp	r3, #4
 8004554:	d107      	bne.n	8004566 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e02b      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	611a      	str	r2, [r3, #16]
 800457a:	e021      	b.n	80045c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800457c:	893b      	ldrh	r3, [r7, #8]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	b29b      	uxth	r3, r3
 8004582:	b2da      	uxtb	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	6a39      	ldr	r1, [r7, #32]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f9dc 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d107      	bne.n	80045b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e005      	b.n	80045c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b6:	893b      	ldrh	r3, [r7, #8]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	00010002 	.word	0x00010002

080045d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004608:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	2200      	movs	r2, #0
 8004612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f8c2 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004630:	d103      	bne.n	800463a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0aa      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800464c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	4952      	ldr	r1, [pc, #328]	; (800479c <I2C_RequestMemoryRead+0x1cc>)
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f8fa 	bl	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e097      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	6a39      	ldr	r1, [r7, #32]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f964 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b04      	cmp	r3, #4
 8004690:	d107      	bne.n	80046a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e076      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ac:	893b      	ldrh	r3, [r7, #8]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]
 80046b6:	e021      	b.n	80046fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046b8:	893b      	ldrh	r3, [r7, #8]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	6a39      	ldr	r1, [r7, #32]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f93e 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d107      	bne.n	80046ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e050      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046f2:	893b      	ldrh	r3, [r7, #8]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	6a39      	ldr	r1, [r7, #32]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f923 	bl	800494c <I2C_WaitOnTXEFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b04      	cmp	r3, #4
 8004712:	d107      	bne.n	8004724 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e035      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004736:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2200      	movs	r2, #0
 8004740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f82b 	bl	80047a0 <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475e:	d103      	bne.n	8004768 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e013      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800476c:	897b      	ldrh	r3, [r7, #10]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	6a3a      	ldr	r2, [r7, #32]
 8004780:	4906      	ldr	r1, [pc, #24]	; (800479c <I2C_RequestMemoryRead+0x1cc>)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f863 	bl	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	00010002 	.word	0x00010002

080047a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b0:	e025      	b.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d021      	beq.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe fcc5 	bl	8003148 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d116      	bne.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e023      	b.n	8004846 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10d      	bne.n	8004824 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	43da      	mvns	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	e00c      	b.n	800483e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	429a      	cmp	r2, r3
 8004842:	d0b6      	beq.n	80047b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800485c:	e051      	b.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d123      	bne.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004886:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f043 0204 	orr.w	r2, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e046      	b.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d021      	beq.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fe fc43 	bl	8003148 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e020      	b.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e00b      	b.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	43da      	mvns	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d18d      	bne.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004958:	e02d      	b.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f8ce 	bl	8004afc <I2C_IsAcknowledgeFailed>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e02d      	b.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d021      	beq.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004972:	f7fe fbe9 	bl	8003148 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e007      	b.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d1ca      	bne.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049da:	e02d      	b.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f88d 	bl	8004afc <I2C_IsAcknowledgeFailed>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e02d      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d021      	beq.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f4:	f7fe fba8 	bl	8003148 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e007      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d1ca      	bne.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a5c:	e042      	b.n	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d119      	bne.n	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0210 	mvn.w	r2, #16
 8004a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e029      	b.n	8004af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa0:	f7fe fb52 	bl	8003148 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d116      	bne.n	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f043 0220 	orr.w	r2, r3, #32
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e007      	b.n	8004af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d1b5      	bne.n	8004a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d11b      	bne.n	8004b4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	f043 0204 	orr.w	r2, r3, #4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d129      	bne.n	8004bc4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	; 0x24
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0210 	bic.w	r2, r2, #16
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e000      	b.n	8004bc6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004bc4:	2302      	movs	r3, #2
  }
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d12a      	bne.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c0c:	89fb      	ldrh	r3, [r7, #14]
 8004c0e:	f023 030f 	bic.w	r3, r3, #15
 8004c12:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	89fb      	ldrh	r3, [r7, #14]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	89fa      	ldrh	r2, [r7, #14]
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e000      	b.n	8004c44 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
  }
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b08f      	sub	sp, #60	; 0x3c
 8004c54:	af0a      	add	r7, sp, #40	; 0x28
 8004c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e10f      	b.n	8004e82 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fd fb6f 	bl	8002360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 f824 	bl	8006cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	687e      	ldr	r6, [r7, #4]
 8004cae:	466d      	mov	r5, sp
 8004cb0:	f106 0410 	add.w	r4, r6, #16
 8004cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cc4:	1d33      	adds	r3, r6, #4
 8004cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f001 ffaf 	bl	8006c2c <USB_CoreInit>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0d0      	b.n	8004e82 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f002 f812 	bl	8006d10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	e04a      	b.n	8004d88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	333d      	adds	r3, #61	; 0x3d
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	333c      	adds	r3, #60	; 0x3c
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	b298      	uxth	r0, r3
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3342      	adds	r3, #66	; 0x42
 8004d2e:	4602      	mov	r2, r0
 8004d30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	333f      	adds	r3, #63	; 0x3f
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	3344      	adds	r3, #68	; 0x44
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	3348      	adds	r3, #72	; 0x48
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3350      	adds	r3, #80	; 0x50
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	3301      	adds	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d3af      	bcc.n	8004cf2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
 8004d96:	e044      	b.n	8004e22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dae:	7bfa      	ldrb	r2, [r7, #15]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dc4:	7bfa      	ldrb	r2, [r7, #15]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dda:	7bfa      	ldrb	r2, [r7, #15]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e06:	7bfa      	ldrb	r2, [r7, #15]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d3b5      	bcc.n	8004d98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	687e      	ldr	r6, [r7, #4]
 8004e34:	466d      	mov	r5, sp
 8004e36:	f106 0410 	add.w	r4, r6, #16
 8004e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e4a:	1d33      	adds	r3, r6, #4
 8004e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e4e:	6838      	ldr	r0, [r7, #0]
 8004e50:	f001 ffaa 	bl	8006da8 <USB_DevInit>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e00d      	b.n	8004e82 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f002 f955 	bl	800712a <USB_DevDisconnect>

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e264      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d075      	beq.n	8004f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eaa:	4ba3      	ldr	r3, [pc, #652]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d00c      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb6:	4ba0      	ldr	r3, [pc, #640]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d112      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4b9d      	ldr	r3, [pc, #628]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ece:	d10b      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	4b99      	ldr	r3, [pc, #612]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05b      	beq.n	8004f94 <HAL_RCC_OscConfig+0x108>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d157      	bne.n	8004f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e23f      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCC_OscConfig+0x74>
 8004ef2:	4b91      	ldr	r3, [pc, #580]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a90      	ldr	r2, [pc, #576]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e01d      	b.n	8004f3c <HAL_RCC_OscConfig+0xb0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x98>
 8004f0a:	4b8b      	ldr	r3, [pc, #556]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a8a      	ldr	r2, [pc, #552]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4b88      	ldr	r3, [pc, #544]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a87      	ldr	r2, [pc, #540]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e00b      	b.n	8004f3c <HAL_RCC_OscConfig+0xb0>
 8004f24:	4b84      	ldr	r3, [pc, #528]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a83      	ldr	r2, [pc, #524]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b81      	ldr	r3, [pc, #516]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a80      	ldr	r2, [pc, #512]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d013      	beq.n	8004f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fe f900 	bl	8003148 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7fe f8fc 	bl	8003148 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e204      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5e:	4b76      	ldr	r3, [pc, #472]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0xc0>
 8004f6a:	e014      	b.n	8004f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fe f8ec 	bl	8003148 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fe f8e8 	bl	8003148 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e1f0      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f86:	4b6c      	ldr	r3, [pc, #432]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0xe8>
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d063      	beq.n	800506a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fa2:	4b65      	ldr	r3, [pc, #404]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fae:	4b62      	ldr	r3, [pc, #392]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d11c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b5f      	ldr	r3, [pc, #380]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d116      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	4b5c      	ldr	r3, [pc, #368]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_RCC_OscConfig+0x152>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e1c4      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	4b56      	ldr	r3, [pc, #344]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4952      	ldr	r1, [pc, #328]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff2:	e03a      	b.n	800506a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ffc:	4b4f      	ldr	r3, [pc, #316]	; (800513c <HAL_RCC_OscConfig+0x2b0>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005002:	f7fe f8a1 	bl	8003148 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500a:	f7fe f89d 	bl	8003148 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e1a5      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501c:	4b46      	ldr	r3, [pc, #280]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b43      	ldr	r3, [pc, #268]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4940      	ldr	r1, [pc, #256]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
 800503c:	e015      	b.n	800506a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503e:	4b3f      	ldr	r3, [pc, #252]	; (800513c <HAL_RCC_OscConfig+0x2b0>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fe f880 	bl	8003148 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800504c:	f7fe f87c 	bl	8003148 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e184      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d030      	beq.n	80050d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507e:	4b30      	ldr	r3, [pc, #192]	; (8005140 <HAL_RCC_OscConfig+0x2b4>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fe f860 	bl	8003148 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508c:	f7fe f85c 	bl	8003148 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e164      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x200>
 80050aa:	e015      	b.n	80050d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ac:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCC_OscConfig+0x2b4>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fe f849 	bl	8003148 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ba:	f7fe f845 	bl	8003148 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e14d      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 80050ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80a0 	beq.w	8005226 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10f      	bne.n	8005116 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005104:	6413      	str	r3, [r2, #64]	; 0x40
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_RCC_OscConfig+0x2b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d121      	bne.n	8005166 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <HAL_RCC_OscConfig+0x2b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a07      	ldr	r2, [pc, #28]	; (8005144 <HAL_RCC_OscConfig+0x2b8>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512e:	f7fe f80b 	bl	8003148 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005134:	e011      	b.n	800515a <HAL_RCC_OscConfig+0x2ce>
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	42470000 	.word	0x42470000
 8005140:	42470e80 	.word	0x42470e80
 8005144:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005148:	f7fd fffe 	bl	8003148 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e106      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515a:	4b85      	ldr	r3, [pc, #532]	; (8005370 <HAL_RCC_OscConfig+0x4e4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d106      	bne.n	800517c <HAL_RCC_OscConfig+0x2f0>
 800516e:	4b81      	ldr	r3, [pc, #516]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	4a80      	ldr	r2, [pc, #512]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6713      	str	r3, [r2, #112]	; 0x70
 800517a:	e01c      	b.n	80051b6 <HAL_RCC_OscConfig+0x32a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b05      	cmp	r3, #5
 8005182:	d10c      	bne.n	800519e <HAL_RCC_OscConfig+0x312>
 8005184:	4b7b      	ldr	r3, [pc, #492]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a7a      	ldr	r2, [pc, #488]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
 8005190:	4b78      	ldr	r3, [pc, #480]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	4a77      	ldr	r2, [pc, #476]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	6713      	str	r3, [r2, #112]	; 0x70
 800519c:	e00b      	b.n	80051b6 <HAL_RCC_OscConfig+0x32a>
 800519e:	4b75      	ldr	r3, [pc, #468]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	4a74      	ldr	r2, [pc, #464]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	6713      	str	r3, [r2, #112]	; 0x70
 80051aa:	4b72      	ldr	r3, [pc, #456]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a71      	ldr	r2, [pc, #452]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051be:	f7fd ffc3 	bl	8003148 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fd ffbf 	bl	8003148 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e0c5      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051dc:	4b65      	ldr	r3, [pc, #404]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ee      	beq.n	80051c6 <HAL_RCC_OscConfig+0x33a>
 80051e8:	e014      	b.n	8005214 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ea:	f7fd ffad 	bl	8003148 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fd ffa9 	bl	8003148 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e0af      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005208:	4b5a      	ldr	r3, [pc, #360]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ee      	bne.n	80051f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d105      	bne.n	8005226 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521a:	4b56      	ldr	r3, [pc, #344]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	4a55      	ldr	r2, [pc, #340]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005224:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 809b 	beq.w	8005366 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005230:	4b50      	ldr	r3, [pc, #320]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 030c 	and.w	r3, r3, #12
 8005238:	2b08      	cmp	r3, #8
 800523a:	d05c      	beq.n	80052f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d141      	bne.n	80052c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005244:	4b4c      	ldr	r3, [pc, #304]	; (8005378 <HAL_RCC_OscConfig+0x4ec>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fd ff7d 	bl	8003148 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005252:	f7fd ff79 	bl	8003148 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e081      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	019b      	lsls	r3, r3, #6
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	3b01      	subs	r3, #1
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	4937      	ldr	r1, [pc, #220]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800529a:	4b37      	ldr	r3, [pc, #220]	; (8005378 <HAL_RCC_OscConfig+0x4ec>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fd ff52 	bl	8003148 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a8:	f7fd ff4e 	bl	8003148 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e056      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x41c>
 80052c6:	e04e      	b.n	8005366 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c8:	4b2b      	ldr	r3, [pc, #172]	; (8005378 <HAL_RCC_OscConfig+0x4ec>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ce:	f7fd ff3b 	bl	8003148 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d6:	f7fd ff37 	bl	8003148 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e03f      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f0      	bne.n	80052d6 <HAL_RCC_OscConfig+0x44a>
 80052f4:	e037      	b.n	8005366 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e032      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_RCC_OscConfig+0x4e8>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d028      	beq.n	8005362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d121      	bne.n	8005362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d11a      	bne.n	8005362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005332:	4013      	ands	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005338:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533a:	4293      	cmp	r3, r2
 800533c:	d111      	bne.n	8005362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	3b01      	subs	r3, #1
 800534c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d107      	bne.n	8005362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40007000 	.word	0x40007000
 8005374:	40023800 	.word	0x40023800
 8005378:	42470060 	.word	0x42470060

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0cc      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b68      	ldr	r3, [pc, #416]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d90c      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b65      	ldr	r3, [pc, #404]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b63      	ldr	r3, [pc, #396]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0b8      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a58      	ldr	r2, [pc, #352]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e8:	4b53      	ldr	r3, [pc, #332]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4a52      	ldr	r2, [pc, #328]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f4:	4b50      	ldr	r3, [pc, #320]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	494d      	ldr	r1, [pc, #308]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d044      	beq.n	800549c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541a:	4b47      	ldr	r3, [pc, #284]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d119      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d003      	beq.n	800543a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	2b03      	cmp	r3, #3
 8005438:	d107      	bne.n	800544a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543a:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e06f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544a:	4b3b      	ldr	r3, [pc, #236]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e067      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545a:	4b37      	ldr	r3, [pc, #220]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 0203 	bic.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4934      	ldr	r1, [pc, #208]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800546c:	f7fd fe6c 	bl	8003148 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	e00a      	b.n	800548a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005474:	f7fd fe68 	bl	8003148 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e04f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548a:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 020c 	and.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	429a      	cmp	r2, r3
 800549a:	d1eb      	bne.n	8005474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d20c      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b22      	ldr	r3, [pc, #136]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b20      	ldr	r3, [pc, #128]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e032      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4916      	ldr	r1, [pc, #88]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	490e      	ldr	r1, [pc, #56]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005502:	f000 f821 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	490a      	ldr	r1, [pc, #40]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	fa22 f303 	lsr.w	r3, r2, r3
 800551a:	4a09      	ldr	r2, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fc ff76 	bl	8002414 <HAL_InitTick>

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023c00 	.word	0x40023c00
 8005538:	40023800 	.word	0x40023800
 800553c:	0800a0c8 	.word	0x0800a0c8
 8005540:	20000000 	.word	0x20000000
 8005544:	20000004 	.word	0x20000004

08005548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	2300      	movs	r3, #0
 800555a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005560:	4b67      	ldr	r3, [pc, #412]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b08      	cmp	r3, #8
 800556a:	d00d      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x40>
 800556c:	2b08      	cmp	r3, #8
 800556e:	f200 80bd 	bhi.w	80056ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x34>
 8005576:	2b04      	cmp	r3, #4
 8005578:	d003      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x3a>
 800557a:	e0b7      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800557c:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800557e:	60bb      	str	r3, [r7, #8]
       break;
 8005580:	e0b7      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005582:	4b60      	ldr	r3, [pc, #384]	; (8005704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005584:	60bb      	str	r3, [r7, #8]
      break;
 8005586:	e0b4      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005588:	4b5d      	ldr	r3, [pc, #372]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005590:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005592:	4b5b      	ldr	r3, [pc, #364]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d04d      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559e:	4b58      	ldr	r3, [pc, #352]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	099b      	lsrs	r3, r3, #6
 80055a4:	461a      	mov	r2, r3
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ae:	f04f 0100 	mov.w	r1, #0
 80055b2:	ea02 0800 	and.w	r8, r2, r0
 80055b6:	ea03 0901 	and.w	r9, r3, r1
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	014b      	lsls	r3, r1, #5
 80055c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055cc:	0142      	lsls	r2, r0, #5
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	ebb0 0008 	subs.w	r0, r0, r8
 80055d6:	eb61 0109 	sbc.w	r1, r1, r9
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	018b      	lsls	r3, r1, #6
 80055e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055e8:	0182      	lsls	r2, r0, #6
 80055ea:	1a12      	subs	r2, r2, r0
 80055ec:	eb63 0301 	sbc.w	r3, r3, r1
 80055f0:	f04f 0000 	mov.w	r0, #0
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	00d9      	lsls	r1, r3, #3
 80055fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055fe:	00d0      	lsls	r0, r2, #3
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	eb12 0208 	adds.w	r2, r2, r8
 8005608:	eb43 0309 	adc.w	r3, r3, r9
 800560c:	f04f 0000 	mov.w	r0, #0
 8005610:	f04f 0100 	mov.w	r1, #0
 8005614:	0299      	lsls	r1, r3, #10
 8005616:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800561a:	0290      	lsls	r0, r2, #10
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	461a      	mov	r2, r3
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	f7fb fadc 	bl	8000be8 <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4613      	mov	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e04a      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563a:	4b31      	ldr	r3, [pc, #196]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	461a      	mov	r2, r3
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	f240 10ff 	movw	r0, #511	; 0x1ff
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	ea02 0400 	and.w	r4, r2, r0
 8005652:	ea03 0501 	and.w	r5, r3, r1
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	014b      	lsls	r3, r1, #5
 8005664:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005668:	0142      	lsls	r2, r0, #5
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	1b00      	subs	r0, r0, r4
 8005670:	eb61 0105 	sbc.w	r1, r1, r5
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	018b      	lsls	r3, r1, #6
 800567e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005682:	0182      	lsls	r2, r0, #6
 8005684:	1a12      	subs	r2, r2, r0
 8005686:	eb63 0301 	sbc.w	r3, r3, r1
 800568a:	f04f 0000 	mov.w	r0, #0
 800568e:	f04f 0100 	mov.w	r1, #0
 8005692:	00d9      	lsls	r1, r3, #3
 8005694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005698:	00d0      	lsls	r0, r2, #3
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	1912      	adds	r2, r2, r4
 80056a0:	eb45 0303 	adc.w	r3, r5, r3
 80056a4:	f04f 0000 	mov.w	r0, #0
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	0299      	lsls	r1, r3, #10
 80056ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056b2:	0290      	lsls	r0, r2, #10
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	461a      	mov	r2, r3
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	f7fb fa90 	bl	8000be8 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	3301      	adds	r3, #1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	60bb      	str	r3, [r7, #8]
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056ee:	60bb      	str	r3, [r7, #8]
      break;
 80056f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f2:	68bb      	ldr	r3, [r7, #8]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800
 8005704:	00f42400 	.word	0x00f42400

08005708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <HAL_RCC_GetHCLKFreq+0x14>)
 800570e:	681b      	ldr	r3, [r3, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000000 	.word	0x20000000

08005720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005724:	f7ff fff0 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0a9b      	lsrs	r3, r3, #10
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4903      	ldr	r1, [pc, #12]	; (8005744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800573c:	4618      	mov	r0, r3
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40023800 	.word	0x40023800
 8005744:	0800a0d8 	.word	0x0800a0d8

08005748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800574c:	f7ff ffdc 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0b5b      	lsrs	r3, r3, #13
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <HAL_RCC_GetPCLK2Freq+0x24>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	0800a0d8 	.word	0x0800a0d8

08005770 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	220f      	movs	r2, #15
 800577e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005780:	4b12      	ldr	r3, [pc, #72]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0203 	and.w	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <HAL_RCC_GetClockConfig+0x60>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 020f 	and.w	r2, r3, #15
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40023c00 	.word	0x40023c00

080057d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e07b      	b.n	80058de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d108      	bne.n	8005800 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f6:	d009      	beq.n	800580c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	61da      	str	r2, [r3, #28]
 80057fe:	e005      	b.n	800580c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc fbd8 	bl	8001fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005842:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	ea42 0103 	orr.w	r1, r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	f003 0104 	and.w	r1, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f003 0210 	and.w	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e041      	b.n	800597c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d106      	bne.n	8005912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f839 	bl	8005984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3304      	adds	r3, #4
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f000 fae9 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d001      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e04e      	b.n	8005a4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a23      	ldr	r2, [pc, #140]	; (8005a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d022      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x80>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059da:	d01d      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d018      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x80>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x80>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1c      	ldr	r2, [pc, #112]	; (8005a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00e      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x80>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1b      	ldr	r2, [pc, #108]	; (8005a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a19      	ldr	r2, [pc, #100]	; (8005a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x80>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d111      	bne.n	8005a3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b06      	cmp	r3, #6
 8005a28:	d010      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	e007      	b.n	8005a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40010400 	.word	0x40010400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40001800 	.word	0x40001800

08005a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e041      	b.n	8005b0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc fb52 	bl	8002148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f000 fa20 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d122      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d11b      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f06f 0202 	mvn.w	r2, #2
 8005b42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f9b1 	bl	8005ec0 <HAL_TIM_IC_CaptureCallback>
 8005b5e:	e005      	b.n	8005b6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f9a3 	bl	8005eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f9b4 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d122      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d11b      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f06f 0204 	mvn.w	r2, #4
 8005b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f987 	bl	8005ec0 <HAL_TIM_IC_CaptureCallback>
 8005bb2:	e005      	b.n	8005bc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f979 	bl	8005eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f98a 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d122      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d11b      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f06f 0208 	mvn.w	r2, #8
 8005bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f95d 	bl	8005ec0 <HAL_TIM_IC_CaptureCallback>
 8005c06:	e005      	b.n	8005c14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f94f 	bl	8005eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f960 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d122      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b10      	cmp	r3, #16
 8005c34:	d11b      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f06f 0210 	mvn.w	r2, #16
 8005c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2208      	movs	r2, #8
 8005c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f933 	bl	8005ec0 <HAL_TIM_IC_CaptureCallback>
 8005c5a:	e005      	b.n	8005c68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f925 	bl	8005eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f936 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d10e      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d107      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f06f 0201 	mvn.w	r2, #1
 8005c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7fc f847 	bl	8001d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca4:	2b80      	cmp	r3, #128	; 0x80
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb2:	2b80      	cmp	r3, #128	; 0x80
 8005cb4:	d107      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fbf1 	bl	80064a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d10e      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d107      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8fb 	bl	8005ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d10e      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0220 	mvn.w	r2, #32
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fbbb 	bl	8006494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e0ae      	b.n	8005ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	f200 809f 	bhi.w	8005e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005e95 	.word	0x08005e95
 8005d64:	08005e95 	.word	0x08005e95
 8005d68:	08005e95 	.word	0x08005e95
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005e95 	.word	0x08005e95
 8005d74:	08005e95 	.word	0x08005e95
 8005d78:	08005e95 	.word	0x08005e95
 8005d7c:	08005e13 	.word	0x08005e13
 8005d80:	08005e95 	.word	0x08005e95
 8005d84:	08005e95 	.word	0x08005e95
 8005d88:	08005e95 	.word	0x08005e95
 8005d8c:	08005e53 	.word	0x08005e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f950 	bl	800603c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0204 	bic.w	r2, r2, #4
 8005dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	619a      	str	r2, [r3, #24]
      break;
 8005dce:	e064      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f9a0 	bl	800611c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]
      break;
 8005e10:	e043      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 f9f5 	bl	8006208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0208 	orr.w	r2, r2, #8
 8005e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0204 	bic.w	r2, r2, #4
 8005e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69d9      	ldr	r1, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	61da      	str	r2, [r3, #28]
      break;
 8005e50:	e023      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fa49 	bl	80062f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69d9      	ldr	r1, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	021a      	lsls	r2, r3, #8
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	61da      	str	r2, [r3, #28]
      break;
 8005e92:	e002      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
      break;
 8005e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a40      	ldr	r2, [pc, #256]	; (8006010 <TIM_Base_SetConfig+0x114>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1a:	d00f      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a3d      	ldr	r2, [pc, #244]	; (8006014 <TIM_Base_SetConfig+0x118>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3c      	ldr	r2, [pc, #240]	; (8006018 <TIM_Base_SetConfig+0x11c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a3b      	ldr	r2, [pc, #236]	; (800601c <TIM_Base_SetConfig+0x120>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a3a      	ldr	r2, [pc, #232]	; (8006020 <TIM_Base_SetConfig+0x124>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d108      	bne.n	8005f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2f      	ldr	r2, [pc, #188]	; (8006010 <TIM_Base_SetConfig+0x114>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5c:	d027      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <TIM_Base_SetConfig+0x118>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d023      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a2b      	ldr	r2, [pc, #172]	; (8006018 <TIM_Base_SetConfig+0x11c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01f      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2a      	ldr	r2, [pc, #168]	; (800601c <TIM_Base_SetConfig+0x120>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a29      	ldr	r2, [pc, #164]	; (8006020 <TIM_Base_SetConfig+0x124>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d017      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a28      	ldr	r2, [pc, #160]	; (8006024 <TIM_Base_SetConfig+0x128>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a27      	ldr	r2, [pc, #156]	; (8006028 <TIM_Base_SetConfig+0x12c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00f      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a26      	ldr	r2, [pc, #152]	; (800602c <TIM_Base_SetConfig+0x130>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a25      	ldr	r2, [pc, #148]	; (8006030 <TIM_Base_SetConfig+0x134>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a24      	ldr	r2, [pc, #144]	; (8006034 <TIM_Base_SetConfig+0x138>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a23      	ldr	r2, [pc, #140]	; (8006038 <TIM_Base_SetConfig+0x13c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d108      	bne.n	8005fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <TIM_Base_SetConfig+0x114>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0xf8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <TIM_Base_SetConfig+0x124>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d103      	bne.n	8005ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	615a      	str	r2, [r3, #20]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40010400 	.word	0x40010400
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400
 800602c:	40014800 	.word	0x40014800
 8006030:	40001800 	.word	0x40001800
 8006034:	40001c00 	.word	0x40001c00
 8006038:	40002000 	.word	0x40002000

0800603c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f023 0201 	bic.w	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0303 	bic.w	r3, r3, #3
 8006072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f023 0302 	bic.w	r3, r3, #2
 8006084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a20      	ldr	r2, [pc, #128]	; (8006114 <TIM_OC1_SetConfig+0xd8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC1_SetConfig+0x64>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <TIM_OC1_SetConfig+0xdc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10c      	bne.n	80060ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0308 	bic.w	r3, r3, #8
 80060a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f023 0304 	bic.w	r3, r3, #4
 80060b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <TIM_OC1_SetConfig+0xd8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d003      	beq.n	80060ca <TIM_OC1_SetConfig+0x8e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a14      	ldr	r2, [pc, #80]	; (8006118 <TIM_OC1_SetConfig+0xdc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d111      	bne.n	80060ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40010000 	.word	0x40010000
 8006118:	40010400 	.word	0x40010400

0800611c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0210 	bic.w	r2, r3, #16
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0320 	bic.w	r3, r3, #32
 8006166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a22      	ldr	r2, [pc, #136]	; (8006200 <TIM_OC2_SetConfig+0xe4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_OC2_SetConfig+0x68>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <TIM_OC2_SetConfig+0xe8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d10d      	bne.n	80061a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800619e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a17      	ldr	r2, [pc, #92]	; (8006200 <TIM_OC2_SetConfig+0xe4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC2_SetConfig+0x94>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a16      	ldr	r2, [pc, #88]	; (8006204 <TIM_OC2_SetConfig+0xe8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d113      	bne.n	80061d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40010400 	.word	0x40010400

08006208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a21      	ldr	r2, [pc, #132]	; (80062e8 <TIM_OC3_SetConfig+0xe0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_OC3_SetConfig+0x66>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a20      	ldr	r2, [pc, #128]	; (80062ec <TIM_OC3_SetConfig+0xe4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10d      	bne.n	800628a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <TIM_OC3_SetConfig+0xe0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_OC3_SetConfig+0x92>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a15      	ldr	r2, [pc, #84]	; (80062ec <TIM_OC3_SetConfig+0xe4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d113      	bne.n	80062c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	621a      	str	r2, [r3, #32]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40010400 	.word	0x40010400

080062f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800633a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	031b      	lsls	r3, r3, #12
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <TIM_OC4_SetConfig+0xa4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC4_SetConfig+0x68>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a11      	ldr	r2, [pc, #68]	; (8006398 <TIM_OC4_SetConfig+0xa8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d109      	bne.n	800636c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800635e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	019b      	lsls	r3, r3, #6
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400

0800639c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e05a      	b.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a21      	ldr	r2, [pc, #132]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d022      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006400:	d01d      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1d      	ldr	r2, [pc, #116]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d018      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a18      	ldr	r2, [pc, #96]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d009      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a17      	ldr	r2, [pc, #92]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a15      	ldr	r2, [pc, #84]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d10c      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4313      	orrs	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40010000 	.word	0x40010000
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40000c00 	.word	0x40000c00
 8006488:	40010400 	.word	0x40010400
 800648c:	40014000 	.word	0x40014000
 8006490:	40001800 	.word	0x40001800

08006494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e03f      	b.n	800654e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fb fe88 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2224      	movs	r2, #36	; 0x24
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f9cb 	bl	800689c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b08a      	sub	sp, #40	; 0x28
 800655a:	af02      	add	r7, sp, #8
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	4613      	mov	r3, r2
 8006564:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d17c      	bne.n	8006670 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_UART_Transmit+0x2c>
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e075      	b.n	8006672 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_UART_Transmit+0x3e>
 8006590:	2302      	movs	r3, #2
 8006592:	e06e      	b.n	8006672 <HAL_UART_Transmit+0x11c>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2221      	movs	r2, #33	; 0x21
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065aa:	f7fc fdcd 	bl	8003148 <HAL_GetTick>
 80065ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c4:	d108      	bne.n	80065d8 <HAL_UART_Transmit+0x82>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e003      	b.n	80065e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065e8:	e02a      	b.n	8006640 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	2180      	movs	r1, #128	; 0x80
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f8e2 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e036      	b.n	8006672 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10b      	bne.n	8006622 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	3302      	adds	r3, #2
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	e007      	b.n	8006632 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	3301      	adds	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1cf      	bne.n	80065ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	2140      	movs	r1, #64	; 0x40
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f8b2 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e006      	b.n	8006672 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	e000      	b.n	8006672 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006670:	2302      	movs	r3, #2
  }
}
 8006672:	4618      	mov	r0, r3
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b08a      	sub	sp, #40	; 0x28
 800667e:	af02      	add	r7, sp, #8
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b20      	cmp	r3, #32
 8006698:	f040 808c 	bne.w	80067b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_UART_Receive+0x2e>
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e084      	b.n	80067b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_UART_Receive+0x40>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e07d      	b.n	80067b6 <HAL_UART_Receive+0x13c>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2222      	movs	r2, #34	; 0x22
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066d6:	f7fc fd37 	bl	8003148 <HAL_GetTick>
 80066da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f0:	d108      	bne.n	8006704 <HAL_UART_Receive+0x8a>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e003      	b.n	800670c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006708:	2300      	movs	r3, #0
 800670a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006714:	e043      	b.n	800679e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2200      	movs	r2, #0
 800671e:	2120      	movs	r1, #32
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f84c 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e042      	b.n	80067b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10c      	bne.n	8006750 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006742:	b29a      	uxth	r2, r3
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	3302      	adds	r3, #2
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e01f      	b.n	8006790 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006758:	d007      	beq.n	800676a <HAL_UART_Receive+0xf0>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <HAL_UART_Receive+0xfe>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	b2da      	uxtb	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e008      	b.n	800678a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006784:	b2da      	uxtb	r2, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3301      	adds	r3, #1
 800678e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1b6      	bne.n	8006716 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b090      	sub	sp, #64	; 0x40
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ce:	e050      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d04c      	beq.n	8006872 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d007      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0x30>
 80067de:	f7fc fcb3 	bl	8003148 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d241      	bcs.n	8006872 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800680e:	637a      	str	r2, [r7, #52]	; 0x34
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	613b      	str	r3, [r7, #16]
   return(result);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	63bb      	str	r3, [r7, #56]	; 0x38
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006842:	623a      	str	r2, [r7, #32]
 8006844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	69f9      	ldr	r1, [r7, #28]
 8006848:	6a3a      	ldr	r2, [r7, #32]
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e00f      	b.n	8006892 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4013      	ands	r3, r2
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	bf0c      	ite	eq
 8006882:	2301      	moveq	r3, #1
 8006884:	2300      	movne	r3, #0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	429a      	cmp	r2, r3
 800688e:	d09f      	beq.n	80067d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3740      	adds	r7, #64	; 0x40
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	b09f      	sub	sp, #124	; 0x7c
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b2:	68d9      	ldr	r1, [r3, #12]
 80068b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	ea40 0301 	orr.w	r3, r0, r1
 80068bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	431a      	orrs	r2, r3
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068e0:	f021 010c 	bic.w	r1, r1, #12
 80068e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ea:	430b      	orrs	r3, r1
 80068ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fa:	6999      	ldr	r1, [r3, #24]
 80068fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	ea40 0301 	orr.w	r3, r0, r1
 8006904:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4bc5      	ldr	r3, [pc, #788]	; (8006c20 <UART_SetConfig+0x384>)
 800690c:	429a      	cmp	r2, r3
 800690e:	d004      	beq.n	800691a <UART_SetConfig+0x7e>
 8006910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	4bc3      	ldr	r3, [pc, #780]	; (8006c24 <UART_SetConfig+0x388>)
 8006916:	429a      	cmp	r2, r3
 8006918:	d103      	bne.n	8006922 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800691a:	f7fe ff15 	bl	8005748 <HAL_RCC_GetPCLK2Freq>
 800691e:	6778      	str	r0, [r7, #116]	; 0x74
 8006920:	e002      	b.n	8006928 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006922:	f7fe fefd 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8006926:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	f040 80b6 	bne.w	8006aa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006936:	461c      	mov	r4, r3
 8006938:	f04f 0500 	mov.w	r5, #0
 800693c:	4622      	mov	r2, r4
 800693e:	462b      	mov	r3, r5
 8006940:	1891      	adds	r1, r2, r2
 8006942:	6439      	str	r1, [r7, #64]	; 0x40
 8006944:	415b      	adcs	r3, r3
 8006946:	647b      	str	r3, [r7, #68]	; 0x44
 8006948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800694c:	1912      	adds	r2, r2, r4
 800694e:	eb45 0303 	adc.w	r3, r5, r3
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f04f 0100 	mov.w	r1, #0
 800695a:	00d9      	lsls	r1, r3, #3
 800695c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006960:	00d0      	lsls	r0, r2, #3
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	1911      	adds	r1, r2, r4
 8006968:	6639      	str	r1, [r7, #96]	; 0x60
 800696a:	416b      	adcs	r3, r5
 800696c:	667b      	str	r3, [r7, #100]	; 0x64
 800696e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	461a      	mov	r2, r3
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	1891      	adds	r1, r2, r2
 800697a:	63b9      	str	r1, [r7, #56]	; 0x38
 800697c:	415b      	adcs	r3, r3
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006984:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006988:	f7fa f92e 	bl	8000be8 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4ba5      	ldr	r3, [pc, #660]	; (8006c28 <UART_SetConfig+0x38c>)
 8006992:	fba3 2302 	umull	r2, r3, r3, r2
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	011e      	lsls	r6, r3, #4
 800699a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800699c:	461c      	mov	r4, r3
 800699e:	f04f 0500 	mov.w	r5, #0
 80069a2:	4622      	mov	r2, r4
 80069a4:	462b      	mov	r3, r5
 80069a6:	1891      	adds	r1, r2, r2
 80069a8:	6339      	str	r1, [r7, #48]	; 0x30
 80069aa:	415b      	adcs	r3, r3
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
 80069ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069b2:	1912      	adds	r2, r2, r4
 80069b4:	eb45 0303 	adc.w	r3, r5, r3
 80069b8:	f04f 0000 	mov.w	r0, #0
 80069bc:	f04f 0100 	mov.w	r1, #0
 80069c0:	00d9      	lsls	r1, r3, #3
 80069c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069c6:	00d0      	lsls	r0, r2, #3
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	1911      	adds	r1, r2, r4
 80069ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80069d0:	416b      	adcs	r3, r5
 80069d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	461a      	mov	r2, r3
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	1891      	adds	r1, r2, r2
 80069e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80069e2:	415b      	adcs	r3, r3
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069ee:	f7fa f8fb 	bl	8000be8 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4b8c      	ldr	r3, [pc, #560]	; (8006c28 <UART_SetConfig+0x38c>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	; 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	3332      	adds	r3, #50	; 0x32
 8006a0a:	4a87      	ldr	r2, [pc, #540]	; (8006c28 <UART_SetConfig+0x38c>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a18:	441e      	add	r6, r3
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f04f 0100 	mov.w	r1, #0
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	1894      	adds	r4, r2, r2
 8006a28:	623c      	str	r4, [r7, #32]
 8006a2a:	415b      	adcs	r3, r3
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a32:	1812      	adds	r2, r2, r0
 8006a34:	eb41 0303 	adc.w	r3, r1, r3
 8006a38:	f04f 0400 	mov.w	r4, #0
 8006a3c:	f04f 0500 	mov.w	r5, #0
 8006a40:	00dd      	lsls	r5, r3, #3
 8006a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a46:	00d4      	lsls	r4, r2, #3
 8006a48:	4622      	mov	r2, r4
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	1814      	adds	r4, r2, r0
 8006a4e:	653c      	str	r4, [r7, #80]	; 0x50
 8006a50:	414b      	adcs	r3, r1
 8006a52:	657b      	str	r3, [r7, #84]	; 0x54
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	1891      	adds	r1, r2, r2
 8006a60:	61b9      	str	r1, [r7, #24]
 8006a62:	415b      	adcs	r3, r3
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a6e:	f7fa f8bb 	bl	8000be8 <__aeabi_uldivmod>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4b6c      	ldr	r3, [pc, #432]	; (8006c28 <UART_SetConfig+0x38c>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	; 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	3332      	adds	r3, #50	; 0x32
 8006a8a:	4a67      	ldr	r2, [pc, #412]	; (8006c28 <UART_SetConfig+0x38c>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 0207 	and.w	r2, r3, #7
 8006a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4432      	add	r2, r6
 8006a9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a9e:	e0b9      	b.n	8006c14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	f04f 0500 	mov.w	r5, #0
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	462b      	mov	r3, r5
 8006aac:	1891      	adds	r1, r2, r2
 8006aae:	6139      	str	r1, [r7, #16]
 8006ab0:	415b      	adcs	r3, r3
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ab8:	1912      	adds	r2, r2, r4
 8006aba:	eb45 0303 	adc.w	r3, r5, r3
 8006abe:	f04f 0000 	mov.w	r0, #0
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	00d9      	lsls	r1, r3, #3
 8006ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006acc:	00d0      	lsls	r0, r2, #3
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	eb12 0804 	adds.w	r8, r2, r4
 8006ad6:	eb43 0905 	adc.w	r9, r3, r5
 8006ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f04f 0100 	mov.w	r1, #0
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	008b      	lsls	r3, r1, #2
 8006aee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006af2:	0082      	lsls	r2, r0, #2
 8006af4:	4640      	mov	r0, r8
 8006af6:	4649      	mov	r1, r9
 8006af8:	f7fa f876 	bl	8000be8 <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4b49      	ldr	r3, [pc, #292]	; (8006c28 <UART_SetConfig+0x38c>)
 8006b02:	fba3 2302 	umull	r2, r3, r3, r2
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	011e      	lsls	r6, r3, #4
 8006b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f04f 0100 	mov.w	r1, #0
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	1894      	adds	r4, r2, r2
 8006b18:	60bc      	str	r4, [r7, #8]
 8006b1a:	415b      	adcs	r3, r3
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b22:	1812      	adds	r2, r2, r0
 8006b24:	eb41 0303 	adc.w	r3, r1, r3
 8006b28:	f04f 0400 	mov.w	r4, #0
 8006b2c:	f04f 0500 	mov.w	r5, #0
 8006b30:	00dd      	lsls	r5, r3, #3
 8006b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b36:	00d4      	lsls	r4, r2, #3
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	1814      	adds	r4, r2, r0
 8006b3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b40:	414b      	adcs	r3, r1
 8006b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f04f 0100 	mov.w	r1, #0
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	008b      	lsls	r3, r1, #2
 8006b58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b5c:	0082      	lsls	r2, r0, #2
 8006b5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b62:	f7fa f841 	bl	8000be8 <__aeabi_uldivmod>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4b2f      	ldr	r3, [pc, #188]	; (8006c28 <UART_SetConfig+0x38c>)
 8006b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	2164      	movs	r1, #100	; 0x64
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	3332      	adds	r3, #50	; 0x32
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	; (8006c28 <UART_SetConfig+0x38c>)
 8006b80:	fba2 2303 	umull	r2, r3, r2, r3
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b8a:	441e      	add	r6, r3
 8006b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f04f 0100 	mov.w	r1, #0
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	1894      	adds	r4, r2, r2
 8006b9a:	603c      	str	r4, [r7, #0]
 8006b9c:	415b      	adcs	r3, r3
 8006b9e:	607b      	str	r3, [r7, #4]
 8006ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba4:	1812      	adds	r2, r2, r0
 8006ba6:	eb41 0303 	adc.w	r3, r1, r3
 8006baa:	f04f 0400 	mov.w	r4, #0
 8006bae:	f04f 0500 	mov.w	r5, #0
 8006bb2:	00dd      	lsls	r5, r3, #3
 8006bb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bb8:	00d4      	lsls	r4, r2, #3
 8006bba:	4622      	mov	r2, r4
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	eb12 0a00 	adds.w	sl, r2, r0
 8006bc2:	eb43 0b01 	adc.w	fp, r3, r1
 8006bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f04f 0100 	mov.w	r1, #0
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	008b      	lsls	r3, r1, #2
 8006bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bde:	0082      	lsls	r2, r0, #2
 8006be0:	4650      	mov	r0, sl
 8006be2:	4659      	mov	r1, fp
 8006be4:	f7fa f800 	bl	8000be8 <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <UART_SetConfig+0x38c>)
 8006bee:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	2164      	movs	r1, #100	; 0x64
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	3332      	adds	r3, #50	; 0x32
 8006c00:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <UART_SetConfig+0x38c>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4432      	add	r2, r6
 8006c12:	609a      	str	r2, [r3, #8]
}
 8006c14:	bf00      	nop
 8006c16:	377c      	adds	r7, #124	; 0x7c
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	bf00      	nop
 8006c20:	40011000 	.word	0x40011000
 8006c24:	40011400 	.word	0x40011400
 8006c28:	51eb851f 	.word	0x51eb851f

08006c2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	f107 001c 	add.w	r0, r7, #28
 8006c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d122      	bne.n	8006c8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d105      	bne.n	8006c7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa82 	bl	8007188 <USB_CoreReset>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e01a      	b.n	8006cc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa76 	bl	8007188 <USB_CoreReset>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8006cb2:	e005      	b.n	8006cc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d10b      	bne.n	8006cde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f043 0206 	orr.w	r2, r3, #6
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cea:	b004      	add	sp, #16
 8006cec:	4770      	bx	lr

08006cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d115      	bne.n	8006d5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d3e:	2001      	movs	r0, #1
 8006d40:	f7fc fa0e 	bl	8003160 <HAL_Delay>
      ms++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa0e 	bl	800716c <USB_GetMode>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d01e      	beq.n	8006d94 <USB_SetCurrentMode+0x84>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b31      	cmp	r3, #49	; 0x31
 8006d5a:	d9f0      	bls.n	8006d3e <USB_SetCurrentMode+0x2e>
 8006d5c:	e01a      	b.n	8006d94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d115      	bne.n	8006d90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d70:	2001      	movs	r0, #1
 8006d72:	f7fc f9f5 	bl	8003160 <HAL_Delay>
      ms++;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f9f5 	bl	800716c <USB_GetMode>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <USB_SetCurrentMode+0x84>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b31      	cmp	r3, #49	; 0x31
 8006d8c:	d9f0      	bls.n	8006d70 <USB_SetCurrentMode+0x60>
 8006d8e:	e001      	b.n	8006d94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e005      	b.n	8006da0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b32      	cmp	r3, #50	; 0x32
 8006d98:	d101      	bne.n	8006d9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006da8:	b084      	sub	sp, #16
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	e009      	b.n	8006ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3340      	adds	r3, #64	; 0x40
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b0e      	cmp	r3, #14
 8006de0:	d9f2      	bls.n	8006dc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11c      	bne.n	8006e22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df6:	f043 0302 	orr.w	r3, r3, #2
 8006dfa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8006e20:	e00b      	b.n	8006e3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e40:	461a      	mov	r2, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e54:	461a      	mov	r2, r3
 8006e56:	680b      	ldr	r3, [r1, #0]
 8006e58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d10c      	bne.n	8006e7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e66:	2100      	movs	r1, #0
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f945 	bl	80070f8 <USB_SetDevSpeed>
 8006e6e:	e008      	b.n	8006e82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e70:	2101      	movs	r1, #1
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f940 	bl	80070f8 <USB_SetDevSpeed>
 8006e78:	e003      	b.n	8006e82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e7a:	2103      	movs	r1, #3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f93b 	bl	80070f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e82:	2110      	movs	r1, #16
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f8f3 	bl	8007070 <USB_FlushTxFifo>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f90f 	bl	80070b8 <USB_FlushRxFifo>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2300      	movs	r3, #0
 8006eba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	e043      	b.n	8006f56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee4:	d118      	bne.n	8006f18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	e013      	b.n	8006f2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e008      	b.n	8006f2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f24:	461a      	mov	r2, r3
 8006f26:	2300      	movs	r3, #0
 8006f28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	461a      	mov	r2, r3
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	3301      	adds	r3, #1
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d3b7      	bcc.n	8006ece <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f5e:	2300      	movs	r3, #0
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e043      	b.n	8006fec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f7a:	d118      	bne.n	8006fae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e013      	b.n	8006fc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	e008      	b.n	8006fc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	461a      	mov	r2, r3
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d3b7      	bcc.n	8006f64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007006:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007014:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f043 0210 	orr.w	r2, r3, #16
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	4b0f      	ldr	r3, [pc, #60]	; (800706c <USB_DevInit+0x2c4>)
 800702e:	4313      	orrs	r3, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f043 0208 	orr.w	r2, r3, #8
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d107      	bne.n	800705c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007054:	f043 0304 	orr.w	r3, r3, #4
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007068:	b004      	add	sp, #16
 800706a:	4770      	bx	lr
 800706c:	803c3800 	.word	0x803c3800

08007070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	019b      	lsls	r3, r3, #6
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <USB_FlushTxFifo+0x44>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d901      	bls.n	800709a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e006      	b.n	80070a8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d0f1      	beq.n	800708a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	00030d40 	.word	0x00030d40

080070b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2210      	movs	r2, #16
 80070c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	4a08      	ldr	r2, [pc, #32]	; (80070f4 <USB_FlushRxFifo+0x3c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d901      	bls.n	80070da <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e006      	b.n	80070e8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b10      	cmp	r3, #16
 80070e4:	d0f1      	beq.n	80070ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	00030d40 	.word	0x00030d40

080070f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007118:	4313      	orrs	r3, r2
 800711a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007144:	f023 0303 	bic.w	r3, r3, #3
 8007148:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007158:	f043 0302 	orr.w	r3, r3, #2
 800715c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f003 0301 	and.w	r3, r3, #1
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <USB_CoreReset+0x60>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d901      	bls.n	80071a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e01a      	b.n	80071da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	daf3      	bge.n	8007194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f043 0201 	orr.w	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	4a09      	ldr	r2, [pc, #36]	; (80071e8 <USB_CoreReset+0x60>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d901      	bls.n	80071cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e006      	b.n	80071da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d0f1      	beq.n	80071bc <USB_CoreReset+0x34>

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	00030d40 	.word	0x00030d40

080071ec <__errno>:
 80071ec:	4b01      	ldr	r3, [pc, #4]	; (80071f4 <__errno+0x8>)
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	2000000c 	.word	0x2000000c

080071f8 <__libc_init_array>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4d0d      	ldr	r5, [pc, #52]	; (8007230 <__libc_init_array+0x38>)
 80071fc:	4c0d      	ldr	r4, [pc, #52]	; (8007234 <__libc_init_array+0x3c>)
 80071fe:	1b64      	subs	r4, r4, r5
 8007200:	10a4      	asrs	r4, r4, #2
 8007202:	2600      	movs	r6, #0
 8007204:	42a6      	cmp	r6, r4
 8007206:	d109      	bne.n	800721c <__libc_init_array+0x24>
 8007208:	4d0b      	ldr	r5, [pc, #44]	; (8007238 <__libc_init_array+0x40>)
 800720a:	4c0c      	ldr	r4, [pc, #48]	; (800723c <__libc_init_array+0x44>)
 800720c:	f002 feb6 	bl	8009f7c <_init>
 8007210:	1b64      	subs	r4, r4, r5
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	2600      	movs	r6, #0
 8007216:	42a6      	cmp	r6, r4
 8007218:	d105      	bne.n	8007226 <__libc_init_array+0x2e>
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007220:	4798      	blx	r3
 8007222:	3601      	adds	r6, #1
 8007224:	e7ee      	b.n	8007204 <__libc_init_array+0xc>
 8007226:	f855 3b04 	ldr.w	r3, [r5], #4
 800722a:	4798      	blx	r3
 800722c:	3601      	adds	r6, #1
 800722e:	e7f2      	b.n	8007216 <__libc_init_array+0x1e>
 8007230:	0800a4cc 	.word	0x0800a4cc
 8007234:	0800a4cc 	.word	0x0800a4cc
 8007238:	0800a4cc 	.word	0x0800a4cc
 800723c:	0800a4d0 	.word	0x0800a4d0

08007240 <memset>:
 8007240:	4402      	add	r2, r0
 8007242:	4603      	mov	r3, r0
 8007244:	4293      	cmp	r3, r2
 8007246:	d100      	bne.n	800724a <memset+0xa>
 8007248:	4770      	bx	lr
 800724a:	f803 1b01 	strb.w	r1, [r3], #1
 800724e:	e7f9      	b.n	8007244 <memset+0x4>

08007250 <__cvt>:
 8007250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	ec55 4b10 	vmov	r4, r5, d0
 8007258:	2d00      	cmp	r5, #0
 800725a:	460e      	mov	r6, r1
 800725c:	4619      	mov	r1, r3
 800725e:	462b      	mov	r3, r5
 8007260:	bfbb      	ittet	lt
 8007262:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007266:	461d      	movlt	r5, r3
 8007268:	2300      	movge	r3, #0
 800726a:	232d      	movlt	r3, #45	; 0x2d
 800726c:	700b      	strb	r3, [r1, #0]
 800726e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007270:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007274:	4691      	mov	r9, r2
 8007276:	f023 0820 	bic.w	r8, r3, #32
 800727a:	bfbc      	itt	lt
 800727c:	4622      	movlt	r2, r4
 800727e:	4614      	movlt	r4, r2
 8007280:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007284:	d005      	beq.n	8007292 <__cvt+0x42>
 8007286:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800728a:	d100      	bne.n	800728e <__cvt+0x3e>
 800728c:	3601      	adds	r6, #1
 800728e:	2102      	movs	r1, #2
 8007290:	e000      	b.n	8007294 <__cvt+0x44>
 8007292:	2103      	movs	r1, #3
 8007294:	ab03      	add	r3, sp, #12
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	ab02      	add	r3, sp, #8
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	ec45 4b10 	vmov	d0, r4, r5
 80072a0:	4653      	mov	r3, sl
 80072a2:	4632      	mov	r2, r6
 80072a4:	f000 fcec 	bl	8007c80 <_dtoa_r>
 80072a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072ac:	4607      	mov	r7, r0
 80072ae:	d102      	bne.n	80072b6 <__cvt+0x66>
 80072b0:	f019 0f01 	tst.w	r9, #1
 80072b4:	d022      	beq.n	80072fc <__cvt+0xac>
 80072b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072ba:	eb07 0906 	add.w	r9, r7, r6
 80072be:	d110      	bne.n	80072e2 <__cvt+0x92>
 80072c0:	783b      	ldrb	r3, [r7, #0]
 80072c2:	2b30      	cmp	r3, #48	; 0x30
 80072c4:	d10a      	bne.n	80072dc <__cvt+0x8c>
 80072c6:	2200      	movs	r2, #0
 80072c8:	2300      	movs	r3, #0
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f9 fc1b 	bl	8000b08 <__aeabi_dcmpeq>
 80072d2:	b918      	cbnz	r0, 80072dc <__cvt+0x8c>
 80072d4:	f1c6 0601 	rsb	r6, r6, #1
 80072d8:	f8ca 6000 	str.w	r6, [sl]
 80072dc:	f8da 3000 	ldr.w	r3, [sl]
 80072e0:	4499      	add	r9, r3
 80072e2:	2200      	movs	r2, #0
 80072e4:	2300      	movs	r3, #0
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f9 fc0d 	bl	8000b08 <__aeabi_dcmpeq>
 80072ee:	b108      	cbz	r0, 80072f4 <__cvt+0xa4>
 80072f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80072f4:	2230      	movs	r2, #48	; 0x30
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	454b      	cmp	r3, r9
 80072fa:	d307      	bcc.n	800730c <__cvt+0xbc>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007300:	1bdb      	subs	r3, r3, r7
 8007302:	4638      	mov	r0, r7
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	b004      	add	sp, #16
 8007308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730c:	1c59      	adds	r1, r3, #1
 800730e:	9103      	str	r1, [sp, #12]
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e7f0      	b.n	80072f6 <__cvt+0xa6>

08007314 <__exponent>:
 8007314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007316:	4603      	mov	r3, r0
 8007318:	2900      	cmp	r1, #0
 800731a:	bfb8      	it	lt
 800731c:	4249      	neglt	r1, r1
 800731e:	f803 2b02 	strb.w	r2, [r3], #2
 8007322:	bfb4      	ite	lt
 8007324:	222d      	movlt	r2, #45	; 0x2d
 8007326:	222b      	movge	r2, #43	; 0x2b
 8007328:	2909      	cmp	r1, #9
 800732a:	7042      	strb	r2, [r0, #1]
 800732c:	dd2a      	ble.n	8007384 <__exponent+0x70>
 800732e:	f10d 0407 	add.w	r4, sp, #7
 8007332:	46a4      	mov	ip, r4
 8007334:	270a      	movs	r7, #10
 8007336:	46a6      	mov	lr, r4
 8007338:	460a      	mov	r2, r1
 800733a:	fb91 f6f7 	sdiv	r6, r1, r7
 800733e:	fb07 1516 	mls	r5, r7, r6, r1
 8007342:	3530      	adds	r5, #48	; 0x30
 8007344:	2a63      	cmp	r2, #99	; 0x63
 8007346:	f104 34ff 	add.w	r4, r4, #4294967295
 800734a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800734e:	4631      	mov	r1, r6
 8007350:	dcf1      	bgt.n	8007336 <__exponent+0x22>
 8007352:	3130      	adds	r1, #48	; 0x30
 8007354:	f1ae 0502 	sub.w	r5, lr, #2
 8007358:	f804 1c01 	strb.w	r1, [r4, #-1]
 800735c:	1c44      	adds	r4, r0, #1
 800735e:	4629      	mov	r1, r5
 8007360:	4561      	cmp	r1, ip
 8007362:	d30a      	bcc.n	800737a <__exponent+0x66>
 8007364:	f10d 0209 	add.w	r2, sp, #9
 8007368:	eba2 020e 	sub.w	r2, r2, lr
 800736c:	4565      	cmp	r5, ip
 800736e:	bf88      	it	hi
 8007370:	2200      	movhi	r2, #0
 8007372:	4413      	add	r3, r2
 8007374:	1a18      	subs	r0, r3, r0
 8007376:	b003      	add	sp, #12
 8007378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007382:	e7ed      	b.n	8007360 <__exponent+0x4c>
 8007384:	2330      	movs	r3, #48	; 0x30
 8007386:	3130      	adds	r1, #48	; 0x30
 8007388:	7083      	strb	r3, [r0, #2]
 800738a:	70c1      	strb	r1, [r0, #3]
 800738c:	1d03      	adds	r3, r0, #4
 800738e:	e7f1      	b.n	8007374 <__exponent+0x60>

08007390 <_printf_float>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	ed2d 8b02 	vpush	{d8}
 8007398:	b08d      	sub	sp, #52	; 0x34
 800739a:	460c      	mov	r4, r1
 800739c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073a0:	4616      	mov	r6, r2
 80073a2:	461f      	mov	r7, r3
 80073a4:	4605      	mov	r5, r0
 80073a6:	f001 fa57 	bl	8008858 <_localeconv_r>
 80073aa:	f8d0 a000 	ldr.w	sl, [r0]
 80073ae:	4650      	mov	r0, sl
 80073b0:	f7f8 ff28 	bl	8000204 <strlen>
 80073b4:	2300      	movs	r3, #0
 80073b6:	930a      	str	r3, [sp, #40]	; 0x28
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	f8d8 3000 	ldr.w	r3, [r8]
 80073c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073c4:	3307      	adds	r3, #7
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	f103 0208 	add.w	r2, r3, #8
 80073ce:	f8c8 2000 	str.w	r2, [r8]
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073e2:	9307      	str	r3, [sp, #28]
 80073e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80073e8:	ee08 0a10 	vmov	s16, r0
 80073ec:	4b9f      	ldr	r3, [pc, #636]	; (800766c <_printf_float+0x2dc>)
 80073ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073f2:	f04f 32ff 	mov.w	r2, #4294967295
 80073f6:	f7f9 fbb9 	bl	8000b6c <__aeabi_dcmpun>
 80073fa:	bb88      	cbnz	r0, 8007460 <_printf_float+0xd0>
 80073fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007400:	4b9a      	ldr	r3, [pc, #616]	; (800766c <_printf_float+0x2dc>)
 8007402:	f04f 32ff 	mov.w	r2, #4294967295
 8007406:	f7f9 fb93 	bl	8000b30 <__aeabi_dcmple>
 800740a:	bb48      	cbnz	r0, 8007460 <_printf_float+0xd0>
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	f7f9 fb82 	bl	8000b1c <__aeabi_dcmplt>
 8007418:	b110      	cbz	r0, 8007420 <_printf_float+0x90>
 800741a:	232d      	movs	r3, #45	; 0x2d
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007420:	4b93      	ldr	r3, [pc, #588]	; (8007670 <_printf_float+0x2e0>)
 8007422:	4894      	ldr	r0, [pc, #592]	; (8007674 <_printf_float+0x2e4>)
 8007424:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007428:	bf94      	ite	ls
 800742a:	4698      	movls	r8, r3
 800742c:	4680      	movhi	r8, r0
 800742e:	2303      	movs	r3, #3
 8007430:	6123      	str	r3, [r4, #16]
 8007432:	9b05      	ldr	r3, [sp, #20]
 8007434:	f023 0204 	bic.w	r2, r3, #4
 8007438:	6022      	str	r2, [r4, #0]
 800743a:	f04f 0900 	mov.w	r9, #0
 800743e:	9700      	str	r7, [sp, #0]
 8007440:	4633      	mov	r3, r6
 8007442:	aa0b      	add	r2, sp, #44	; 0x2c
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f000 f9d8 	bl	80077fc <_printf_common>
 800744c:	3001      	adds	r0, #1
 800744e:	f040 8090 	bne.w	8007572 <_printf_float+0x1e2>
 8007452:	f04f 30ff 	mov.w	r0, #4294967295
 8007456:	b00d      	add	sp, #52	; 0x34
 8007458:	ecbd 8b02 	vpop	{d8}
 800745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	4640      	mov	r0, r8
 8007466:	4649      	mov	r1, r9
 8007468:	f7f9 fb80 	bl	8000b6c <__aeabi_dcmpun>
 800746c:	b140      	cbz	r0, 8007480 <_printf_float+0xf0>
 800746e:	464b      	mov	r3, r9
 8007470:	2b00      	cmp	r3, #0
 8007472:	bfbc      	itt	lt
 8007474:	232d      	movlt	r3, #45	; 0x2d
 8007476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800747a:	487f      	ldr	r0, [pc, #508]	; (8007678 <_printf_float+0x2e8>)
 800747c:	4b7f      	ldr	r3, [pc, #508]	; (800767c <_printf_float+0x2ec>)
 800747e:	e7d1      	b.n	8007424 <_printf_float+0x94>
 8007480:	6863      	ldr	r3, [r4, #4]
 8007482:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007486:	9206      	str	r2, [sp, #24]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	d13f      	bne.n	800750c <_printf_float+0x17c>
 800748c:	2306      	movs	r3, #6
 800748e:	6063      	str	r3, [r4, #4]
 8007490:	9b05      	ldr	r3, [sp, #20]
 8007492:	6861      	ldr	r1, [r4, #4]
 8007494:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007498:	2300      	movs	r3, #0
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	ab0a      	add	r3, sp, #40	; 0x28
 800749e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074a2:	ab09      	add	r3, sp, #36	; 0x24
 80074a4:	ec49 8b10 	vmov	d0, r8, r9
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	6022      	str	r2, [r4, #0]
 80074ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074b0:	4628      	mov	r0, r5
 80074b2:	f7ff fecd 	bl	8007250 <__cvt>
 80074b6:	9b06      	ldr	r3, [sp, #24]
 80074b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ba:	2b47      	cmp	r3, #71	; 0x47
 80074bc:	4680      	mov	r8, r0
 80074be:	d108      	bne.n	80074d2 <_printf_float+0x142>
 80074c0:	1cc8      	adds	r0, r1, #3
 80074c2:	db02      	blt.n	80074ca <_printf_float+0x13a>
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	4299      	cmp	r1, r3
 80074c8:	dd41      	ble.n	800754e <_printf_float+0x1be>
 80074ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80074ce:	fa5f fb8b 	uxtb.w	fp, fp
 80074d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074d6:	d820      	bhi.n	800751a <_printf_float+0x18a>
 80074d8:	3901      	subs	r1, #1
 80074da:	465a      	mov	r2, fp
 80074dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074e0:	9109      	str	r1, [sp, #36]	; 0x24
 80074e2:	f7ff ff17 	bl	8007314 <__exponent>
 80074e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074e8:	1813      	adds	r3, r2, r0
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	4681      	mov	r9, r0
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	dc02      	bgt.n	80074f8 <_printf_float+0x168>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	07d2      	lsls	r2, r2, #31
 80074f6:	d501      	bpl.n	80074fc <_printf_float+0x16c>
 80074f8:	3301      	adds	r3, #1
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007500:	2b00      	cmp	r3, #0
 8007502:	d09c      	beq.n	800743e <_printf_float+0xae>
 8007504:	232d      	movs	r3, #45	; 0x2d
 8007506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750a:	e798      	b.n	800743e <_printf_float+0xae>
 800750c:	9a06      	ldr	r2, [sp, #24]
 800750e:	2a47      	cmp	r2, #71	; 0x47
 8007510:	d1be      	bne.n	8007490 <_printf_float+0x100>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1bc      	bne.n	8007490 <_printf_float+0x100>
 8007516:	2301      	movs	r3, #1
 8007518:	e7b9      	b.n	800748e <_printf_float+0xfe>
 800751a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800751e:	d118      	bne.n	8007552 <_printf_float+0x1c2>
 8007520:	2900      	cmp	r1, #0
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	dd0b      	ble.n	800753e <_printf_float+0x1ae>
 8007526:	6121      	str	r1, [r4, #16]
 8007528:	b913      	cbnz	r3, 8007530 <_printf_float+0x1a0>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	07d0      	lsls	r0, r2, #31
 800752e:	d502      	bpl.n	8007536 <_printf_float+0x1a6>
 8007530:	3301      	adds	r3, #1
 8007532:	440b      	add	r3, r1
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	65a1      	str	r1, [r4, #88]	; 0x58
 8007538:	f04f 0900 	mov.w	r9, #0
 800753c:	e7de      	b.n	80074fc <_printf_float+0x16c>
 800753e:	b913      	cbnz	r3, 8007546 <_printf_float+0x1b6>
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	07d2      	lsls	r2, r2, #31
 8007544:	d501      	bpl.n	800754a <_printf_float+0x1ba>
 8007546:	3302      	adds	r3, #2
 8007548:	e7f4      	b.n	8007534 <_printf_float+0x1a4>
 800754a:	2301      	movs	r3, #1
 800754c:	e7f2      	b.n	8007534 <_printf_float+0x1a4>
 800754e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007554:	4299      	cmp	r1, r3
 8007556:	db05      	blt.n	8007564 <_printf_float+0x1d4>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	6121      	str	r1, [r4, #16]
 800755c:	07d8      	lsls	r0, r3, #31
 800755e:	d5ea      	bpl.n	8007536 <_printf_float+0x1a6>
 8007560:	1c4b      	adds	r3, r1, #1
 8007562:	e7e7      	b.n	8007534 <_printf_float+0x1a4>
 8007564:	2900      	cmp	r1, #0
 8007566:	bfd4      	ite	le
 8007568:	f1c1 0202 	rsble	r2, r1, #2
 800756c:	2201      	movgt	r2, #1
 800756e:	4413      	add	r3, r2
 8007570:	e7e0      	b.n	8007534 <_printf_float+0x1a4>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	055a      	lsls	r2, r3, #21
 8007576:	d407      	bmi.n	8007588 <_printf_float+0x1f8>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	4642      	mov	r2, r8
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	d12c      	bne.n	80075e0 <_printf_float+0x250>
 8007586:	e764      	b.n	8007452 <_printf_float+0xc2>
 8007588:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800758c:	f240 80e0 	bls.w	8007750 <_printf_float+0x3c0>
 8007590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007594:	2200      	movs	r2, #0
 8007596:	2300      	movs	r3, #0
 8007598:	f7f9 fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800759c:	2800      	cmp	r0, #0
 800759e:	d034      	beq.n	800760a <_printf_float+0x27a>
 80075a0:	4a37      	ldr	r2, [pc, #220]	; (8007680 <_printf_float+0x2f0>)
 80075a2:	2301      	movs	r3, #1
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f af51 	beq.w	8007452 <_printf_float+0xc2>
 80075b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075b4:	429a      	cmp	r2, r3
 80075b6:	db02      	blt.n	80075be <_printf_float+0x22e>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	07d8      	lsls	r0, r3, #31
 80075bc:	d510      	bpl.n	80075e0 <_printf_float+0x250>
 80075be:	ee18 3a10 	vmov	r3, s16
 80075c2:	4652      	mov	r2, sl
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f af41 	beq.w	8007452 <_printf_float+0xc2>
 80075d0:	f04f 0800 	mov.w	r8, #0
 80075d4:	f104 091a 	add.w	r9, r4, #26
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	3b01      	subs	r3, #1
 80075dc:	4543      	cmp	r3, r8
 80075de:	dc09      	bgt.n	80075f4 <_printf_float+0x264>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	079b      	lsls	r3, r3, #30
 80075e4:	f100 8105 	bmi.w	80077f2 <_printf_float+0x462>
 80075e8:	68e0      	ldr	r0, [r4, #12]
 80075ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ec:	4298      	cmp	r0, r3
 80075ee:	bfb8      	it	lt
 80075f0:	4618      	movlt	r0, r3
 80075f2:	e730      	b.n	8007456 <_printf_float+0xc6>
 80075f4:	2301      	movs	r3, #1
 80075f6:	464a      	mov	r2, r9
 80075f8:	4631      	mov	r1, r6
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b8      	blx	r7
 80075fe:	3001      	adds	r0, #1
 8007600:	f43f af27 	beq.w	8007452 <_printf_float+0xc2>
 8007604:	f108 0801 	add.w	r8, r8, #1
 8007608:	e7e6      	b.n	80075d8 <_printf_float+0x248>
 800760a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	dc39      	bgt.n	8007684 <_printf_float+0x2f4>
 8007610:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <_printf_float+0x2f0>)
 8007612:	2301      	movs	r3, #1
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f43f af19 	beq.w	8007452 <_printf_float+0xc2>
 8007620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007624:	4313      	orrs	r3, r2
 8007626:	d102      	bne.n	800762e <_printf_float+0x29e>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	07d9      	lsls	r1, r3, #31
 800762c:	d5d8      	bpl.n	80075e0 <_printf_float+0x250>
 800762e:	ee18 3a10 	vmov	r3, s16
 8007632:	4652      	mov	r2, sl
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af09 	beq.w	8007452 <_printf_float+0xc2>
 8007640:	f04f 0900 	mov.w	r9, #0
 8007644:	f104 0a1a 	add.w	sl, r4, #26
 8007648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764a:	425b      	negs	r3, r3
 800764c:	454b      	cmp	r3, r9
 800764e:	dc01      	bgt.n	8007654 <_printf_float+0x2c4>
 8007650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007652:	e792      	b.n	800757a <_printf_float+0x1ea>
 8007654:	2301      	movs	r3, #1
 8007656:	4652      	mov	r2, sl
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	f43f aef7 	beq.w	8007452 <_printf_float+0xc2>
 8007664:	f109 0901 	add.w	r9, r9, #1
 8007668:	e7ee      	b.n	8007648 <_printf_float+0x2b8>
 800766a:	bf00      	nop
 800766c:	7fefffff 	.word	0x7fefffff
 8007670:	0800a0e4 	.word	0x0800a0e4
 8007674:	0800a0e8 	.word	0x0800a0e8
 8007678:	0800a0f0 	.word	0x0800a0f0
 800767c:	0800a0ec 	.word	0x0800a0ec
 8007680:	0800a0f4 	.word	0x0800a0f4
 8007684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007688:	429a      	cmp	r2, r3
 800768a:	bfa8      	it	ge
 800768c:	461a      	movge	r2, r3
 800768e:	2a00      	cmp	r2, #0
 8007690:	4691      	mov	r9, r2
 8007692:	dc37      	bgt.n	8007704 <_printf_float+0x374>
 8007694:	f04f 0b00 	mov.w	fp, #0
 8007698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800769c:	f104 021a 	add.w	r2, r4, #26
 80076a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	eba3 0309 	sub.w	r3, r3, r9
 80076a8:	455b      	cmp	r3, fp
 80076aa:	dc33      	bgt.n	8007714 <_printf_float+0x384>
 80076ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b0:	429a      	cmp	r2, r3
 80076b2:	db3b      	blt.n	800772c <_printf_float+0x39c>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	07da      	lsls	r2, r3, #31
 80076b8:	d438      	bmi.n	800772c <_printf_float+0x39c>
 80076ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076bc:	9b05      	ldr	r3, [sp, #20]
 80076be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	eba2 0901 	sub.w	r9, r2, r1
 80076c6:	4599      	cmp	r9, r3
 80076c8:	bfa8      	it	ge
 80076ca:	4699      	movge	r9, r3
 80076cc:	f1b9 0f00 	cmp.w	r9, #0
 80076d0:	dc35      	bgt.n	800773e <_printf_float+0x3ae>
 80076d2:	f04f 0800 	mov.w	r8, #0
 80076d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076da:	f104 0a1a 	add.w	sl, r4, #26
 80076de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	eba3 0309 	sub.w	r3, r3, r9
 80076e8:	4543      	cmp	r3, r8
 80076ea:	f77f af79 	ble.w	80075e0 <_printf_float+0x250>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4652      	mov	r2, sl
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	f43f aeaa 	beq.w	8007452 <_printf_float+0xc2>
 80076fe:	f108 0801 	add.w	r8, r8, #1
 8007702:	e7ec      	b.n	80076de <_printf_float+0x34e>
 8007704:	4613      	mov	r3, r2
 8007706:	4631      	mov	r1, r6
 8007708:	4642      	mov	r2, r8
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	d1c0      	bne.n	8007694 <_printf_float+0x304>
 8007712:	e69e      	b.n	8007452 <_printf_float+0xc2>
 8007714:	2301      	movs	r3, #1
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	9205      	str	r2, [sp, #20]
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	f43f ae97 	beq.w	8007452 <_printf_float+0xc2>
 8007724:	9a05      	ldr	r2, [sp, #20]
 8007726:	f10b 0b01 	add.w	fp, fp, #1
 800772a:	e7b9      	b.n	80076a0 <_printf_float+0x310>
 800772c:	ee18 3a10 	vmov	r3, s16
 8007730:	4652      	mov	r2, sl
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	d1be      	bne.n	80076ba <_printf_float+0x32a>
 800773c:	e689      	b.n	8007452 <_printf_float+0xc2>
 800773e:	9a05      	ldr	r2, [sp, #20]
 8007740:	464b      	mov	r3, r9
 8007742:	4442      	add	r2, r8
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	d1c1      	bne.n	80076d2 <_printf_float+0x342>
 800774e:	e680      	b.n	8007452 <_printf_float+0xc2>
 8007750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007752:	2a01      	cmp	r2, #1
 8007754:	dc01      	bgt.n	800775a <_printf_float+0x3ca>
 8007756:	07db      	lsls	r3, r3, #31
 8007758:	d538      	bpl.n	80077cc <_printf_float+0x43c>
 800775a:	2301      	movs	r3, #1
 800775c:	4642      	mov	r2, r8
 800775e:	4631      	mov	r1, r6
 8007760:	4628      	mov	r0, r5
 8007762:	47b8      	blx	r7
 8007764:	3001      	adds	r0, #1
 8007766:	f43f ae74 	beq.w	8007452 <_printf_float+0xc2>
 800776a:	ee18 3a10 	vmov	r3, s16
 800776e:	4652      	mov	r2, sl
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f ae6b 	beq.w	8007452 <_printf_float+0xc2>
 800777c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007780:	2200      	movs	r2, #0
 8007782:	2300      	movs	r3, #0
 8007784:	f7f9 f9c0 	bl	8000b08 <__aeabi_dcmpeq>
 8007788:	b9d8      	cbnz	r0, 80077c2 <_printf_float+0x432>
 800778a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778c:	f108 0201 	add.w	r2, r8, #1
 8007790:	3b01      	subs	r3, #1
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	d10e      	bne.n	80077ba <_printf_float+0x42a>
 800779c:	e659      	b.n	8007452 <_printf_float+0xc2>
 800779e:	2301      	movs	r3, #1
 80077a0:	4652      	mov	r2, sl
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	f43f ae52 	beq.w	8007452 <_printf_float+0xc2>
 80077ae:	f108 0801 	add.w	r8, r8, #1
 80077b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b4:	3b01      	subs	r3, #1
 80077b6:	4543      	cmp	r3, r8
 80077b8:	dcf1      	bgt.n	800779e <_printf_float+0x40e>
 80077ba:	464b      	mov	r3, r9
 80077bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077c0:	e6dc      	b.n	800757c <_printf_float+0x1ec>
 80077c2:	f04f 0800 	mov.w	r8, #0
 80077c6:	f104 0a1a 	add.w	sl, r4, #26
 80077ca:	e7f2      	b.n	80077b2 <_printf_float+0x422>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4642      	mov	r2, r8
 80077d0:	e7df      	b.n	8007792 <_printf_float+0x402>
 80077d2:	2301      	movs	r3, #1
 80077d4:	464a      	mov	r2, r9
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f ae38 	beq.w	8007452 <_printf_float+0xc2>
 80077e2:	f108 0801 	add.w	r8, r8, #1
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	4543      	cmp	r3, r8
 80077ee:	dcf0      	bgt.n	80077d2 <_printf_float+0x442>
 80077f0:	e6fa      	b.n	80075e8 <_printf_float+0x258>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	f104 0919 	add.w	r9, r4, #25
 80077fa:	e7f4      	b.n	80077e6 <_printf_float+0x456>

080077fc <_printf_common>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	4616      	mov	r6, r2
 8007802:	4699      	mov	r9, r3
 8007804:	688a      	ldr	r2, [r1, #8]
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800780c:	4293      	cmp	r3, r2
 800780e:	bfb8      	it	lt
 8007810:	4613      	movlt	r3, r2
 8007812:	6033      	str	r3, [r6, #0]
 8007814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007818:	4607      	mov	r7, r0
 800781a:	460c      	mov	r4, r1
 800781c:	b10a      	cbz	r2, 8007822 <_printf_common+0x26>
 800781e:	3301      	adds	r3, #1
 8007820:	6033      	str	r3, [r6, #0]
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	0699      	lsls	r1, r3, #26
 8007826:	bf42      	ittt	mi
 8007828:	6833      	ldrmi	r3, [r6, #0]
 800782a:	3302      	addmi	r3, #2
 800782c:	6033      	strmi	r3, [r6, #0]
 800782e:	6825      	ldr	r5, [r4, #0]
 8007830:	f015 0506 	ands.w	r5, r5, #6
 8007834:	d106      	bne.n	8007844 <_printf_common+0x48>
 8007836:	f104 0a19 	add.w	sl, r4, #25
 800783a:	68e3      	ldr	r3, [r4, #12]
 800783c:	6832      	ldr	r2, [r6, #0]
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc26      	bgt.n	8007892 <_printf_common+0x96>
 8007844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007848:	1e13      	subs	r3, r2, #0
 800784a:	6822      	ldr	r2, [r4, #0]
 800784c:	bf18      	it	ne
 800784e:	2301      	movne	r3, #1
 8007850:	0692      	lsls	r2, r2, #26
 8007852:	d42b      	bmi.n	80078ac <_printf_common+0xb0>
 8007854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007858:	4649      	mov	r1, r9
 800785a:	4638      	mov	r0, r7
 800785c:	47c0      	blx	r8
 800785e:	3001      	adds	r0, #1
 8007860:	d01e      	beq.n	80078a0 <_printf_common+0xa4>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	68e5      	ldr	r5, [r4, #12]
 8007866:	6832      	ldr	r2, [r6, #0]
 8007868:	f003 0306 	and.w	r3, r3, #6
 800786c:	2b04      	cmp	r3, #4
 800786e:	bf08      	it	eq
 8007870:	1aad      	subeq	r5, r5, r2
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	6922      	ldr	r2, [r4, #16]
 8007876:	bf0c      	ite	eq
 8007878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800787c:	2500      	movne	r5, #0
 800787e:	4293      	cmp	r3, r2
 8007880:	bfc4      	itt	gt
 8007882:	1a9b      	subgt	r3, r3, r2
 8007884:	18ed      	addgt	r5, r5, r3
 8007886:	2600      	movs	r6, #0
 8007888:	341a      	adds	r4, #26
 800788a:	42b5      	cmp	r5, r6
 800788c:	d11a      	bne.n	80078c4 <_printf_common+0xc8>
 800788e:	2000      	movs	r0, #0
 8007890:	e008      	b.n	80078a4 <_printf_common+0xa8>
 8007892:	2301      	movs	r3, #1
 8007894:	4652      	mov	r2, sl
 8007896:	4649      	mov	r1, r9
 8007898:	4638      	mov	r0, r7
 800789a:	47c0      	blx	r8
 800789c:	3001      	adds	r0, #1
 800789e:	d103      	bne.n	80078a8 <_printf_common+0xac>
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	3501      	adds	r5, #1
 80078aa:	e7c6      	b.n	800783a <_printf_common+0x3e>
 80078ac:	18e1      	adds	r1, r4, r3
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	2030      	movs	r0, #48	; 0x30
 80078b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078b6:	4422      	add	r2, r4
 80078b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078c0:	3302      	adds	r3, #2
 80078c2:	e7c7      	b.n	8007854 <_printf_common+0x58>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4622      	mov	r2, r4
 80078c8:	4649      	mov	r1, r9
 80078ca:	4638      	mov	r0, r7
 80078cc:	47c0      	blx	r8
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0e6      	beq.n	80078a0 <_printf_common+0xa4>
 80078d2:	3601      	adds	r6, #1
 80078d4:	e7d9      	b.n	800788a <_printf_common+0x8e>
	...

080078d8 <_printf_i>:
 80078d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	460c      	mov	r4, r1
 80078de:	4691      	mov	r9, r2
 80078e0:	7e27      	ldrb	r7, [r4, #24]
 80078e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078e4:	2f78      	cmp	r7, #120	; 0x78
 80078e6:	4680      	mov	r8, r0
 80078e8:	469a      	mov	sl, r3
 80078ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078ee:	d807      	bhi.n	8007900 <_printf_i+0x28>
 80078f0:	2f62      	cmp	r7, #98	; 0x62
 80078f2:	d80a      	bhi.n	800790a <_printf_i+0x32>
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	f000 80d8 	beq.w	8007aaa <_printf_i+0x1d2>
 80078fa:	2f58      	cmp	r7, #88	; 0x58
 80078fc:	f000 80a3 	beq.w	8007a46 <_printf_i+0x16e>
 8007900:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007908:	e03a      	b.n	8007980 <_printf_i+0xa8>
 800790a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800790e:	2b15      	cmp	r3, #21
 8007910:	d8f6      	bhi.n	8007900 <_printf_i+0x28>
 8007912:	a001      	add	r0, pc, #4	; (adr r0, 8007918 <_printf_i+0x40>)
 8007914:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007918:	08007971 	.word	0x08007971
 800791c:	08007985 	.word	0x08007985
 8007920:	08007901 	.word	0x08007901
 8007924:	08007901 	.word	0x08007901
 8007928:	08007901 	.word	0x08007901
 800792c:	08007901 	.word	0x08007901
 8007930:	08007985 	.word	0x08007985
 8007934:	08007901 	.word	0x08007901
 8007938:	08007901 	.word	0x08007901
 800793c:	08007901 	.word	0x08007901
 8007940:	08007901 	.word	0x08007901
 8007944:	08007a91 	.word	0x08007a91
 8007948:	080079b5 	.word	0x080079b5
 800794c:	08007a73 	.word	0x08007a73
 8007950:	08007901 	.word	0x08007901
 8007954:	08007901 	.word	0x08007901
 8007958:	08007ab3 	.word	0x08007ab3
 800795c:	08007901 	.word	0x08007901
 8007960:	080079b5 	.word	0x080079b5
 8007964:	08007901 	.word	0x08007901
 8007968:	08007901 	.word	0x08007901
 800796c:	08007a7b 	.word	0x08007a7b
 8007970:	680b      	ldr	r3, [r1, #0]
 8007972:	1d1a      	adds	r2, r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	600a      	str	r2, [r1, #0]
 8007978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800797c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007980:	2301      	movs	r3, #1
 8007982:	e0a3      	b.n	8007acc <_printf_i+0x1f4>
 8007984:	6825      	ldr	r5, [r4, #0]
 8007986:	6808      	ldr	r0, [r1, #0]
 8007988:	062e      	lsls	r6, r5, #24
 800798a:	f100 0304 	add.w	r3, r0, #4
 800798e:	d50a      	bpl.n	80079a6 <_printf_i+0xce>
 8007990:	6805      	ldr	r5, [r0, #0]
 8007992:	600b      	str	r3, [r1, #0]
 8007994:	2d00      	cmp	r5, #0
 8007996:	da03      	bge.n	80079a0 <_printf_i+0xc8>
 8007998:	232d      	movs	r3, #45	; 0x2d
 800799a:	426d      	negs	r5, r5
 800799c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a0:	485e      	ldr	r0, [pc, #376]	; (8007b1c <_printf_i+0x244>)
 80079a2:	230a      	movs	r3, #10
 80079a4:	e019      	b.n	80079da <_printf_i+0x102>
 80079a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079aa:	6805      	ldr	r5, [r0, #0]
 80079ac:	600b      	str	r3, [r1, #0]
 80079ae:	bf18      	it	ne
 80079b0:	b22d      	sxthne	r5, r5
 80079b2:	e7ef      	b.n	8007994 <_printf_i+0xbc>
 80079b4:	680b      	ldr	r3, [r1, #0]
 80079b6:	6825      	ldr	r5, [r4, #0]
 80079b8:	1d18      	adds	r0, r3, #4
 80079ba:	6008      	str	r0, [r1, #0]
 80079bc:	0628      	lsls	r0, r5, #24
 80079be:	d501      	bpl.n	80079c4 <_printf_i+0xec>
 80079c0:	681d      	ldr	r5, [r3, #0]
 80079c2:	e002      	b.n	80079ca <_printf_i+0xf2>
 80079c4:	0669      	lsls	r1, r5, #25
 80079c6:	d5fb      	bpl.n	80079c0 <_printf_i+0xe8>
 80079c8:	881d      	ldrh	r5, [r3, #0]
 80079ca:	4854      	ldr	r0, [pc, #336]	; (8007b1c <_printf_i+0x244>)
 80079cc:	2f6f      	cmp	r7, #111	; 0x6f
 80079ce:	bf0c      	ite	eq
 80079d0:	2308      	moveq	r3, #8
 80079d2:	230a      	movne	r3, #10
 80079d4:	2100      	movs	r1, #0
 80079d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079da:	6866      	ldr	r6, [r4, #4]
 80079dc:	60a6      	str	r6, [r4, #8]
 80079de:	2e00      	cmp	r6, #0
 80079e0:	bfa2      	ittt	ge
 80079e2:	6821      	ldrge	r1, [r4, #0]
 80079e4:	f021 0104 	bicge.w	r1, r1, #4
 80079e8:	6021      	strge	r1, [r4, #0]
 80079ea:	b90d      	cbnz	r5, 80079f0 <_printf_i+0x118>
 80079ec:	2e00      	cmp	r6, #0
 80079ee:	d04d      	beq.n	8007a8c <_printf_i+0x1b4>
 80079f0:	4616      	mov	r6, r2
 80079f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80079f6:	fb03 5711 	mls	r7, r3, r1, r5
 80079fa:	5dc7      	ldrb	r7, [r0, r7]
 80079fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a00:	462f      	mov	r7, r5
 8007a02:	42bb      	cmp	r3, r7
 8007a04:	460d      	mov	r5, r1
 8007a06:	d9f4      	bls.n	80079f2 <_printf_i+0x11a>
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d10b      	bne.n	8007a24 <_printf_i+0x14c>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	07df      	lsls	r7, r3, #31
 8007a10:	d508      	bpl.n	8007a24 <_printf_i+0x14c>
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	6861      	ldr	r1, [r4, #4]
 8007a16:	4299      	cmp	r1, r3
 8007a18:	bfde      	ittt	le
 8007a1a:	2330      	movle	r3, #48	; 0x30
 8007a1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a24:	1b92      	subs	r2, r2, r6
 8007a26:	6122      	str	r2, [r4, #16]
 8007a28:	f8cd a000 	str.w	sl, [sp]
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	aa03      	add	r2, sp, #12
 8007a30:	4621      	mov	r1, r4
 8007a32:	4640      	mov	r0, r8
 8007a34:	f7ff fee2 	bl	80077fc <_printf_common>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d14c      	bne.n	8007ad6 <_printf_i+0x1fe>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	b004      	add	sp, #16
 8007a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a46:	4835      	ldr	r0, [pc, #212]	; (8007b1c <_printf_i+0x244>)
 8007a48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	680e      	ldr	r6, [r1, #0]
 8007a50:	061f      	lsls	r7, r3, #24
 8007a52:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a56:	600e      	str	r6, [r1, #0]
 8007a58:	d514      	bpl.n	8007a84 <_printf_i+0x1ac>
 8007a5a:	07d9      	lsls	r1, r3, #31
 8007a5c:	bf44      	itt	mi
 8007a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a62:	6023      	strmi	r3, [r4, #0]
 8007a64:	b91d      	cbnz	r5, 8007a6e <_printf_i+0x196>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	f023 0320 	bic.w	r3, r3, #32
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	2310      	movs	r3, #16
 8007a70:	e7b0      	b.n	80079d4 <_printf_i+0xfc>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f043 0320 	orr.w	r3, r3, #32
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	2378      	movs	r3, #120	; 0x78
 8007a7c:	4828      	ldr	r0, [pc, #160]	; (8007b20 <_printf_i+0x248>)
 8007a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a82:	e7e3      	b.n	8007a4c <_printf_i+0x174>
 8007a84:	065e      	lsls	r6, r3, #25
 8007a86:	bf48      	it	mi
 8007a88:	b2ad      	uxthmi	r5, r5
 8007a8a:	e7e6      	b.n	8007a5a <_printf_i+0x182>
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	e7bb      	b.n	8007a08 <_printf_i+0x130>
 8007a90:	680b      	ldr	r3, [r1, #0]
 8007a92:	6826      	ldr	r6, [r4, #0]
 8007a94:	6960      	ldr	r0, [r4, #20]
 8007a96:	1d1d      	adds	r5, r3, #4
 8007a98:	600d      	str	r5, [r1, #0]
 8007a9a:	0635      	lsls	r5, r6, #24
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_i+0x1cc>
 8007aa0:	6018      	str	r0, [r3, #0]
 8007aa2:	e002      	b.n	8007aaa <_printf_i+0x1d2>
 8007aa4:	0671      	lsls	r1, r6, #25
 8007aa6:	d5fb      	bpl.n	8007aa0 <_printf_i+0x1c8>
 8007aa8:	8018      	strh	r0, [r3, #0]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	6123      	str	r3, [r4, #16]
 8007aae:	4616      	mov	r6, r2
 8007ab0:	e7ba      	b.n	8007a28 <_printf_i+0x150>
 8007ab2:	680b      	ldr	r3, [r1, #0]
 8007ab4:	1d1a      	adds	r2, r3, #4
 8007ab6:	600a      	str	r2, [r1, #0]
 8007ab8:	681e      	ldr	r6, [r3, #0]
 8007aba:	6862      	ldr	r2, [r4, #4]
 8007abc:	2100      	movs	r1, #0
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f7f8 fbae 	bl	8000220 <memchr>
 8007ac4:	b108      	cbz	r0, 8007aca <_printf_i+0x1f2>
 8007ac6:	1b80      	subs	r0, r0, r6
 8007ac8:	6060      	str	r0, [r4, #4]
 8007aca:	6863      	ldr	r3, [r4, #4]
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad4:	e7a8      	b.n	8007a28 <_printf_i+0x150>
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	4632      	mov	r2, r6
 8007ada:	4649      	mov	r1, r9
 8007adc:	4640      	mov	r0, r8
 8007ade:	47d0      	blx	sl
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d0ab      	beq.n	8007a3c <_printf_i+0x164>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	079b      	lsls	r3, r3, #30
 8007ae8:	d413      	bmi.n	8007b12 <_printf_i+0x23a>
 8007aea:	68e0      	ldr	r0, [r4, #12]
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	4298      	cmp	r0, r3
 8007af0:	bfb8      	it	lt
 8007af2:	4618      	movlt	r0, r3
 8007af4:	e7a4      	b.n	8007a40 <_printf_i+0x168>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4632      	mov	r2, r6
 8007afa:	4649      	mov	r1, r9
 8007afc:	4640      	mov	r0, r8
 8007afe:	47d0      	blx	sl
 8007b00:	3001      	adds	r0, #1
 8007b02:	d09b      	beq.n	8007a3c <_printf_i+0x164>
 8007b04:	3501      	adds	r5, #1
 8007b06:	68e3      	ldr	r3, [r4, #12]
 8007b08:	9903      	ldr	r1, [sp, #12]
 8007b0a:	1a5b      	subs	r3, r3, r1
 8007b0c:	42ab      	cmp	r3, r5
 8007b0e:	dcf2      	bgt.n	8007af6 <_printf_i+0x21e>
 8007b10:	e7eb      	b.n	8007aea <_printf_i+0x212>
 8007b12:	2500      	movs	r5, #0
 8007b14:	f104 0619 	add.w	r6, r4, #25
 8007b18:	e7f5      	b.n	8007b06 <_printf_i+0x22e>
 8007b1a:	bf00      	nop
 8007b1c:	0800a0f6 	.word	0x0800a0f6
 8007b20:	0800a107 	.word	0x0800a107

08007b24 <siprintf>:
 8007b24:	b40e      	push	{r1, r2, r3}
 8007b26:	b500      	push	{lr}
 8007b28:	b09c      	sub	sp, #112	; 0x70
 8007b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b2c:	9002      	str	r0, [sp, #8]
 8007b2e:	9006      	str	r0, [sp, #24]
 8007b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b34:	4809      	ldr	r0, [pc, #36]	; (8007b5c <siprintf+0x38>)
 8007b36:	9107      	str	r1, [sp, #28]
 8007b38:	9104      	str	r1, [sp, #16]
 8007b3a:	4909      	ldr	r1, [pc, #36]	; (8007b60 <siprintf+0x3c>)
 8007b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b40:	9105      	str	r1, [sp, #20]
 8007b42:	6800      	ldr	r0, [r0, #0]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	a902      	add	r1, sp, #8
 8007b48:	f001 fb34 	bl	80091b4 <_svfiprintf_r>
 8007b4c:	9b02      	ldr	r3, [sp, #8]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	b01c      	add	sp, #112	; 0x70
 8007b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b58:	b003      	add	sp, #12
 8007b5a:	4770      	bx	lr
 8007b5c:	2000000c 	.word	0x2000000c
 8007b60:	ffff0208 	.word	0xffff0208

08007b64 <quorem>:
 8007b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	6903      	ldr	r3, [r0, #16]
 8007b6a:	690c      	ldr	r4, [r1, #16]
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	4607      	mov	r7, r0
 8007b70:	f2c0 8081 	blt.w	8007c76 <quorem+0x112>
 8007b74:	3c01      	subs	r4, #1
 8007b76:	f101 0814 	add.w	r8, r1, #20
 8007b7a:	f100 0514 	add.w	r5, r0, #20
 8007b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b9c:	d331      	bcc.n	8007c02 <quorem+0x9e>
 8007b9e:	f04f 0e00 	mov.w	lr, #0
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	46ac      	mov	ip, r5
 8007ba6:	46f2      	mov	sl, lr
 8007ba8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bac:	b293      	uxth	r3, r2
 8007bae:	fb06 e303 	mla	r3, r6, r3, lr
 8007bb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	ebaa 0303 	sub.w	r3, sl, r3
 8007bbc:	0c12      	lsrs	r2, r2, #16
 8007bbe:	f8dc a000 	ldr.w	sl, [ip]
 8007bc2:	fb06 e202 	mla	r2, r6, r2, lr
 8007bc6:	fa13 f38a 	uxtah	r3, r3, sl
 8007bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bce:	fa1f fa82 	uxth.w	sl, r2
 8007bd2:	f8dc 2000 	ldr.w	r2, [ip]
 8007bd6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007bda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007be4:	4581      	cmp	r9, r0
 8007be6:	f84c 3b04 	str.w	r3, [ip], #4
 8007bea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007bee:	d2db      	bcs.n	8007ba8 <quorem+0x44>
 8007bf0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007bf4:	b92b      	cbnz	r3, 8007c02 <quorem+0x9e>
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	3b04      	subs	r3, #4
 8007bfa:	429d      	cmp	r5, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	d32e      	bcc.n	8007c5e <quorem+0xfa>
 8007c00:	613c      	str	r4, [r7, #16]
 8007c02:	4638      	mov	r0, r7
 8007c04:	f001 f8c0 	bl	8008d88 <__mcmp>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	db24      	blt.n	8007c56 <quorem+0xf2>
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f04f 0c00 	mov.w	ip, #0
 8007c14:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c18:	f8d0 e000 	ldr.w	lr, [r0]
 8007c1c:	b293      	uxth	r3, r2
 8007c1e:	ebac 0303 	sub.w	r3, ip, r3
 8007c22:	0c12      	lsrs	r2, r2, #16
 8007c24:	fa13 f38e 	uxtah	r3, r3, lr
 8007c28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c36:	45c1      	cmp	r9, r8
 8007c38:	f840 3b04 	str.w	r3, [r0], #4
 8007c3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c40:	d2e8      	bcs.n	8007c14 <quorem+0xb0>
 8007c42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c4a:	b922      	cbnz	r2, 8007c56 <quorem+0xf2>
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	d30a      	bcc.n	8007c6a <quorem+0x106>
 8007c54:	613c      	str	r4, [r7, #16]
 8007c56:	4630      	mov	r0, r6
 8007c58:	b003      	add	sp, #12
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	3b04      	subs	r3, #4
 8007c62:	2a00      	cmp	r2, #0
 8007c64:	d1cc      	bne.n	8007c00 <quorem+0x9c>
 8007c66:	3c01      	subs	r4, #1
 8007c68:	e7c7      	b.n	8007bfa <quorem+0x96>
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	d1f0      	bne.n	8007c54 <quorem+0xf0>
 8007c72:	3c01      	subs	r4, #1
 8007c74:	e7eb      	b.n	8007c4e <quorem+0xea>
 8007c76:	2000      	movs	r0, #0
 8007c78:	e7ee      	b.n	8007c58 <quorem+0xf4>
 8007c7a:	0000      	movs	r0, r0
 8007c7c:	0000      	movs	r0, r0
	...

08007c80 <_dtoa_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	ed2d 8b02 	vpush	{d8}
 8007c88:	ec57 6b10 	vmov	r6, r7, d0
 8007c8c:	b095      	sub	sp, #84	; 0x54
 8007c8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c94:	9105      	str	r1, [sp, #20]
 8007c96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca0:	b975      	cbnz	r5, 8007cc0 <_dtoa_r+0x40>
 8007ca2:	2010      	movs	r0, #16
 8007ca4:	f000 fddc 	bl	8008860 <malloc>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6260      	str	r0, [r4, #36]	; 0x24
 8007cac:	b920      	cbnz	r0, 8007cb8 <_dtoa_r+0x38>
 8007cae:	4bb2      	ldr	r3, [pc, #712]	; (8007f78 <_dtoa_r+0x2f8>)
 8007cb0:	21ea      	movs	r1, #234	; 0xea
 8007cb2:	48b2      	ldr	r0, [pc, #712]	; (8007f7c <_dtoa_r+0x2fc>)
 8007cb4:	f001 fb8e 	bl	80093d4 <__assert_func>
 8007cb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cbc:	6005      	str	r5, [r0, #0]
 8007cbe:	60c5      	str	r5, [r0, #12]
 8007cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc2:	6819      	ldr	r1, [r3, #0]
 8007cc4:	b151      	cbz	r1, 8007cdc <_dtoa_r+0x5c>
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	604a      	str	r2, [r1, #4]
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4093      	lsls	r3, r2
 8007cce:	608b      	str	r3, [r1, #8]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fe1b 	bl	800890c <_Bfree>
 8007cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	1e3b      	subs	r3, r7, #0
 8007cde:	bfb9      	ittee	lt
 8007ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ce4:	9303      	strlt	r3, [sp, #12]
 8007ce6:	2300      	movge	r3, #0
 8007ce8:	f8c8 3000 	strge.w	r3, [r8]
 8007cec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007cf0:	4ba3      	ldr	r3, [pc, #652]	; (8007f80 <_dtoa_r+0x300>)
 8007cf2:	bfbc      	itt	lt
 8007cf4:	2201      	movlt	r2, #1
 8007cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8007cfa:	ea33 0309 	bics.w	r3, r3, r9
 8007cfe:	d11b      	bne.n	8007d38 <_dtoa_r+0xb8>
 8007d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d02:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d0c:	4333      	orrs	r3, r6
 8007d0e:	f000 857a 	beq.w	8008806 <_dtoa_r+0xb86>
 8007d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d14:	b963      	cbnz	r3, 8007d30 <_dtoa_r+0xb0>
 8007d16:	4b9b      	ldr	r3, [pc, #620]	; (8007f84 <_dtoa_r+0x304>)
 8007d18:	e024      	b.n	8007d64 <_dtoa_r+0xe4>
 8007d1a:	4b9b      	ldr	r3, [pc, #620]	; (8007f88 <_dtoa_r+0x308>)
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	9800      	ldr	r0, [sp, #0]
 8007d26:	b015      	add	sp, #84	; 0x54
 8007d28:	ecbd 8b02 	vpop	{d8}
 8007d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d30:	4b94      	ldr	r3, [pc, #592]	; (8007f84 <_dtoa_r+0x304>)
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	3303      	adds	r3, #3
 8007d36:	e7f3      	b.n	8007d20 <_dtoa_r+0xa0>
 8007d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	ec51 0b17 	vmov	r0, r1, d7
 8007d42:	2300      	movs	r3, #0
 8007d44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007d48:	f7f8 fede 	bl	8000b08 <__aeabi_dcmpeq>
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	b158      	cbz	r0, 8007d68 <_dtoa_r+0xe8>
 8007d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d52:	2301      	movs	r3, #1
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 8551 	beq.w	8008800 <_dtoa_r+0xb80>
 8007d5e:	488b      	ldr	r0, [pc, #556]	; (8007f8c <_dtoa_r+0x30c>)
 8007d60:	6018      	str	r0, [r3, #0]
 8007d62:	1e43      	subs	r3, r0, #1
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	e7dd      	b.n	8007d24 <_dtoa_r+0xa4>
 8007d68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007d6c:	aa12      	add	r2, sp, #72	; 0x48
 8007d6e:	a913      	add	r1, sp, #76	; 0x4c
 8007d70:	4620      	mov	r0, r4
 8007d72:	f001 f8ad 	bl	8008ed0 <__d2b>
 8007d76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d7a:	4683      	mov	fp, r0
 8007d7c:	2d00      	cmp	r5, #0
 8007d7e:	d07c      	beq.n	8007e7a <_dtoa_r+0x1fa>
 8007d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007d8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d9a:	4b7d      	ldr	r3, [pc, #500]	; (8007f90 <_dtoa_r+0x310>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4630      	mov	r0, r6
 8007da0:	4639      	mov	r1, r7
 8007da2:	f7f8 fa91 	bl	80002c8 <__aeabi_dsub>
 8007da6:	a36e      	add	r3, pc, #440	; (adr r3, 8007f60 <_dtoa_r+0x2e0>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 fc44 	bl	8000638 <__aeabi_dmul>
 8007db0:	a36d      	add	r3, pc, #436	; (adr r3, 8007f68 <_dtoa_r+0x2e8>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fa89 	bl	80002cc <__adddf3>
 8007dba:	4606      	mov	r6, r0
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	f7f8 fbd0 	bl	8000564 <__aeabi_i2d>
 8007dc4:	a36a      	add	r3, pc, #424	; (adr r3, 8007f70 <_dtoa_r+0x2f0>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fc35 	bl	8000638 <__aeabi_dmul>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fa79 	bl	80002cc <__adddf3>
 8007dda:	4606      	mov	r6, r0
 8007ddc:	460f      	mov	r7, r1
 8007dde:	f7f8 fedb 	bl	8000b98 <__aeabi_d2iz>
 8007de2:	2200      	movs	r2, #0
 8007de4:	4682      	mov	sl, r0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fe96 	bl	8000b1c <__aeabi_dcmplt>
 8007df0:	b148      	cbz	r0, 8007e06 <_dtoa_r+0x186>
 8007df2:	4650      	mov	r0, sl
 8007df4:	f7f8 fbb6 	bl	8000564 <__aeabi_i2d>
 8007df8:	4632      	mov	r2, r6
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	f7f8 fe84 	bl	8000b08 <__aeabi_dcmpeq>
 8007e00:	b908      	cbnz	r0, 8007e06 <_dtoa_r+0x186>
 8007e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e06:	f1ba 0f16 	cmp.w	sl, #22
 8007e0a:	d854      	bhi.n	8007eb6 <_dtoa_r+0x236>
 8007e0c:	4b61      	ldr	r3, [pc, #388]	; (8007f94 <_dtoa_r+0x314>)
 8007e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e1a:	f7f8 fe7f 	bl	8000b1c <__aeabi_dcmplt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d04b      	beq.n	8007eba <_dtoa_r+0x23a>
 8007e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e26:	2300      	movs	r3, #0
 8007e28:	930e      	str	r3, [sp, #56]	; 0x38
 8007e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e2c:	1b5d      	subs	r5, r3, r5
 8007e2e:	1e6b      	subs	r3, r5, #1
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	bf43      	ittte	mi
 8007e34:	2300      	movmi	r3, #0
 8007e36:	f1c5 0801 	rsbmi	r8, r5, #1
 8007e3a:	9304      	strmi	r3, [sp, #16]
 8007e3c:	f04f 0800 	movpl.w	r8, #0
 8007e40:	f1ba 0f00 	cmp.w	sl, #0
 8007e44:	db3b      	blt.n	8007ebe <_dtoa_r+0x23e>
 8007e46:	9b04      	ldr	r3, [sp, #16]
 8007e48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007e4c:	4453      	add	r3, sl
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	2300      	movs	r3, #0
 8007e52:	9306      	str	r3, [sp, #24]
 8007e54:	9b05      	ldr	r3, [sp, #20]
 8007e56:	2b09      	cmp	r3, #9
 8007e58:	d869      	bhi.n	8007f2e <_dtoa_r+0x2ae>
 8007e5a:	2b05      	cmp	r3, #5
 8007e5c:	bfc4      	itt	gt
 8007e5e:	3b04      	subgt	r3, #4
 8007e60:	9305      	strgt	r3, [sp, #20]
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	f1a3 0302 	sub.w	r3, r3, #2
 8007e68:	bfcc      	ite	gt
 8007e6a:	2500      	movgt	r5, #0
 8007e6c:	2501      	movle	r5, #1
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d869      	bhi.n	8007f46 <_dtoa_r+0x2c6>
 8007e72:	e8df f003 	tbb	[pc, r3]
 8007e76:	4e2c      	.short	0x4e2c
 8007e78:	5a4c      	.short	0x5a4c
 8007e7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007e7e:	441d      	add	r5, r3
 8007e80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	bfc1      	itttt	gt
 8007e88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e90:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e98:	bfda      	itte	le
 8007e9a:	f1c3 0320 	rsble	r3, r3, #32
 8007e9e:	fa06 f003 	lslle.w	r0, r6, r3
 8007ea2:	4318      	orrgt	r0, r3
 8007ea4:	f7f8 fb4e 	bl	8000544 <__aeabi_ui2d>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4606      	mov	r6, r0
 8007eac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007eb0:	3d01      	subs	r5, #1
 8007eb2:	9310      	str	r3, [sp, #64]	; 0x40
 8007eb4:	e771      	b.n	8007d9a <_dtoa_r+0x11a>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e7b6      	b.n	8007e28 <_dtoa_r+0x1a8>
 8007eba:	900e      	str	r0, [sp, #56]	; 0x38
 8007ebc:	e7b5      	b.n	8007e2a <_dtoa_r+0x1aa>
 8007ebe:	f1ca 0300 	rsb	r3, sl, #0
 8007ec2:	9306      	str	r3, [sp, #24]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	eba8 080a 	sub.w	r8, r8, sl
 8007eca:	930d      	str	r3, [sp, #52]	; 0x34
 8007ecc:	e7c2      	b.n	8007e54 <_dtoa_r+0x1d4>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9308      	str	r3, [sp, #32]
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dc39      	bgt.n	8007f4c <_dtoa_r+0x2cc>
 8007ed8:	f04f 0901 	mov.w	r9, #1
 8007edc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ee8:	2200      	movs	r2, #0
 8007eea:	6042      	str	r2, [r0, #4]
 8007eec:	2204      	movs	r2, #4
 8007eee:	f102 0614 	add.w	r6, r2, #20
 8007ef2:	429e      	cmp	r6, r3
 8007ef4:	6841      	ldr	r1, [r0, #4]
 8007ef6:	d92f      	bls.n	8007f58 <_dtoa_r+0x2d8>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 fcc7 	bl	800888c <_Balloc>
 8007efe:	9000      	str	r0, [sp, #0]
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d14b      	bne.n	8007f9c <_dtoa_r+0x31c>
 8007f04:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <_dtoa_r+0x318>)
 8007f06:	4602      	mov	r2, r0
 8007f08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f0c:	e6d1      	b.n	8007cb2 <_dtoa_r+0x32>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e7de      	b.n	8007ed0 <_dtoa_r+0x250>
 8007f12:	2300      	movs	r3, #0
 8007f14:	9308      	str	r3, [sp, #32]
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	eb0a 0903 	add.w	r9, sl, r3
 8007f1c:	f109 0301 	add.w	r3, r9, #1
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	bfb8      	it	lt
 8007f26:	2301      	movlt	r3, #1
 8007f28:	e7dd      	b.n	8007ee6 <_dtoa_r+0x266>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e7f2      	b.n	8007f14 <_dtoa_r+0x294>
 8007f2e:	2501      	movs	r5, #1
 8007f30:	2300      	movs	r3, #0
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	9508      	str	r5, [sp, #32]
 8007f36:	f04f 39ff 	mov.w	r9, #4294967295
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f40:	2312      	movs	r3, #18
 8007f42:	9209      	str	r2, [sp, #36]	; 0x24
 8007f44:	e7cf      	b.n	8007ee6 <_dtoa_r+0x266>
 8007f46:	2301      	movs	r3, #1
 8007f48:	9308      	str	r3, [sp, #32]
 8007f4a:	e7f4      	b.n	8007f36 <_dtoa_r+0x2b6>
 8007f4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007f50:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f54:	464b      	mov	r3, r9
 8007f56:	e7c6      	b.n	8007ee6 <_dtoa_r+0x266>
 8007f58:	3101      	adds	r1, #1
 8007f5a:	6041      	str	r1, [r0, #4]
 8007f5c:	0052      	lsls	r2, r2, #1
 8007f5e:	e7c6      	b.n	8007eee <_dtoa_r+0x26e>
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	0800a125 	.word	0x0800a125
 8007f7c:	0800a13c 	.word	0x0800a13c
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	0800a121 	.word	0x0800a121
 8007f88:	0800a118 	.word	0x0800a118
 8007f8c:	0800a0f5 	.word	0x0800a0f5
 8007f90:	3ff80000 	.word	0x3ff80000
 8007f94:	0800a238 	.word	0x0800a238
 8007f98:	0800a19b 	.word	0x0800a19b
 8007f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f9e:	9a00      	ldr	r2, [sp, #0]
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	2b0e      	cmp	r3, #14
 8007fa6:	f200 80ad 	bhi.w	8008104 <_dtoa_r+0x484>
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	f000 80aa 	beq.w	8008104 <_dtoa_r+0x484>
 8007fb0:	f1ba 0f00 	cmp.w	sl, #0
 8007fb4:	dd36      	ble.n	8008024 <_dtoa_r+0x3a4>
 8007fb6:	4ac3      	ldr	r2, [pc, #780]	; (80082c4 <_dtoa_r+0x644>)
 8007fb8:	f00a 030f 	and.w	r3, sl, #15
 8007fbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fc0:	ed93 7b00 	vldr	d7, [r3]
 8007fc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007fc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007fcc:	eeb0 8a47 	vmov.f32	s16, s14
 8007fd0:	eef0 8a67 	vmov.f32	s17, s15
 8007fd4:	d016      	beq.n	8008004 <_dtoa_r+0x384>
 8007fd6:	4bbc      	ldr	r3, [pc, #752]	; (80082c8 <_dtoa_r+0x648>)
 8007fd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fe0:	f7f8 fc54 	bl	800088c <__aeabi_ddiv>
 8007fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe8:	f007 070f 	and.w	r7, r7, #15
 8007fec:	2503      	movs	r5, #3
 8007fee:	4eb6      	ldr	r6, [pc, #728]	; (80082c8 <_dtoa_r+0x648>)
 8007ff0:	b957      	cbnz	r7, 8008008 <_dtoa_r+0x388>
 8007ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff6:	ec53 2b18 	vmov	r2, r3, d8
 8007ffa:	f7f8 fc47 	bl	800088c <__aeabi_ddiv>
 8007ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008002:	e029      	b.n	8008058 <_dtoa_r+0x3d8>
 8008004:	2502      	movs	r5, #2
 8008006:	e7f2      	b.n	8007fee <_dtoa_r+0x36e>
 8008008:	07f9      	lsls	r1, r7, #31
 800800a:	d508      	bpl.n	800801e <_dtoa_r+0x39e>
 800800c:	ec51 0b18 	vmov	r0, r1, d8
 8008010:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008014:	f7f8 fb10 	bl	8000638 <__aeabi_dmul>
 8008018:	ec41 0b18 	vmov	d8, r0, r1
 800801c:	3501      	adds	r5, #1
 800801e:	107f      	asrs	r7, r7, #1
 8008020:	3608      	adds	r6, #8
 8008022:	e7e5      	b.n	8007ff0 <_dtoa_r+0x370>
 8008024:	f000 80a6 	beq.w	8008174 <_dtoa_r+0x4f4>
 8008028:	f1ca 0600 	rsb	r6, sl, #0
 800802c:	4ba5      	ldr	r3, [pc, #660]	; (80082c4 <_dtoa_r+0x644>)
 800802e:	4fa6      	ldr	r7, [pc, #664]	; (80082c8 <_dtoa_r+0x648>)
 8008030:	f006 020f 	and.w	r2, r6, #15
 8008034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008040:	f7f8 fafa 	bl	8000638 <__aeabi_dmul>
 8008044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008048:	1136      	asrs	r6, r6, #4
 800804a:	2300      	movs	r3, #0
 800804c:	2502      	movs	r5, #2
 800804e:	2e00      	cmp	r6, #0
 8008050:	f040 8085 	bne.w	800815e <_dtoa_r+0x4de>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1d2      	bne.n	8007ffe <_dtoa_r+0x37e>
 8008058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 808c 	beq.w	8008178 <_dtoa_r+0x4f8>
 8008060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008064:	4b99      	ldr	r3, [pc, #612]	; (80082cc <_dtoa_r+0x64c>)
 8008066:	2200      	movs	r2, #0
 8008068:	4630      	mov	r0, r6
 800806a:	4639      	mov	r1, r7
 800806c:	f7f8 fd56 	bl	8000b1c <__aeabi_dcmplt>
 8008070:	2800      	cmp	r0, #0
 8008072:	f000 8081 	beq.w	8008178 <_dtoa_r+0x4f8>
 8008076:	9b01      	ldr	r3, [sp, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d07d      	beq.n	8008178 <_dtoa_r+0x4f8>
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	dd3c      	ble.n	80080fc <_dtoa_r+0x47c>
 8008082:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008086:	9307      	str	r3, [sp, #28]
 8008088:	2200      	movs	r2, #0
 800808a:	4b91      	ldr	r3, [pc, #580]	; (80082d0 <_dtoa_r+0x650>)
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 fad2 	bl	8000638 <__aeabi_dmul>
 8008094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008098:	3501      	adds	r5, #1
 800809a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800809e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080a2:	4628      	mov	r0, r5
 80080a4:	f7f8 fa5e 	bl	8000564 <__aeabi_i2d>
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	f7f8 fac4 	bl	8000638 <__aeabi_dmul>
 80080b0:	4b88      	ldr	r3, [pc, #544]	; (80082d4 <_dtoa_r+0x654>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 f90a 	bl	80002cc <__adddf3>
 80080b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80080bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c0:	9303      	str	r3, [sp, #12]
 80080c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d15c      	bne.n	8008182 <_dtoa_r+0x502>
 80080c8:	4b83      	ldr	r3, [pc, #524]	; (80082d8 <_dtoa_r+0x658>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 f8fa 	bl	80002c8 <__aeabi_dsub>
 80080d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080d8:	4606      	mov	r6, r0
 80080da:	460f      	mov	r7, r1
 80080dc:	f7f8 fd3c 	bl	8000b58 <__aeabi_dcmpgt>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f040 8296 	bne.w	8008612 <_dtoa_r+0x992>
 80080e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80080ea:	4630      	mov	r0, r6
 80080ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f040 8288 	bne.w	800860c <_dtoa_r+0x98c>
 80080fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008106:	2b00      	cmp	r3, #0
 8008108:	f2c0 8158 	blt.w	80083bc <_dtoa_r+0x73c>
 800810c:	f1ba 0f0e 	cmp.w	sl, #14
 8008110:	f300 8154 	bgt.w	80083bc <_dtoa_r+0x73c>
 8008114:	4b6b      	ldr	r3, [pc, #428]	; (80082c4 <_dtoa_r+0x644>)
 8008116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800811a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800811e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	f280 80e3 	bge.w	80082ec <_dtoa_r+0x66c>
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f300 80df 	bgt.w	80082ec <_dtoa_r+0x66c>
 800812e:	f040 826d 	bne.w	800860c <_dtoa_r+0x98c>
 8008132:	4b69      	ldr	r3, [pc, #420]	; (80082d8 <_dtoa_r+0x658>)
 8008134:	2200      	movs	r2, #0
 8008136:	4640      	mov	r0, r8
 8008138:	4649      	mov	r1, r9
 800813a:	f7f8 fa7d 	bl	8000638 <__aeabi_dmul>
 800813e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008142:	f7f8 fcff 	bl	8000b44 <__aeabi_dcmpge>
 8008146:	9e01      	ldr	r6, [sp, #4]
 8008148:	4637      	mov	r7, r6
 800814a:	2800      	cmp	r0, #0
 800814c:	f040 8243 	bne.w	80085d6 <_dtoa_r+0x956>
 8008150:	9d00      	ldr	r5, [sp, #0]
 8008152:	2331      	movs	r3, #49	; 0x31
 8008154:	f805 3b01 	strb.w	r3, [r5], #1
 8008158:	f10a 0a01 	add.w	sl, sl, #1
 800815c:	e23f      	b.n	80085de <_dtoa_r+0x95e>
 800815e:	07f2      	lsls	r2, r6, #31
 8008160:	d505      	bpl.n	800816e <_dtoa_r+0x4ee>
 8008162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008166:	f7f8 fa67 	bl	8000638 <__aeabi_dmul>
 800816a:	3501      	adds	r5, #1
 800816c:	2301      	movs	r3, #1
 800816e:	1076      	asrs	r6, r6, #1
 8008170:	3708      	adds	r7, #8
 8008172:	e76c      	b.n	800804e <_dtoa_r+0x3ce>
 8008174:	2502      	movs	r5, #2
 8008176:	e76f      	b.n	8008058 <_dtoa_r+0x3d8>
 8008178:	9b01      	ldr	r3, [sp, #4]
 800817a:	f8cd a01c 	str.w	sl, [sp, #28]
 800817e:	930c      	str	r3, [sp, #48]	; 0x30
 8008180:	e78d      	b.n	800809e <_dtoa_r+0x41e>
 8008182:	9900      	ldr	r1, [sp, #0]
 8008184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008188:	4b4e      	ldr	r3, [pc, #312]	; (80082c4 <_dtoa_r+0x644>)
 800818a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800818e:	4401      	add	r1, r0
 8008190:	9102      	str	r1, [sp, #8]
 8008192:	9908      	ldr	r1, [sp, #32]
 8008194:	eeb0 8a47 	vmov.f32	s16, s14
 8008198:	eef0 8a67 	vmov.f32	s17, s15
 800819c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d045      	beq.n	8008234 <_dtoa_r+0x5b4>
 80081a8:	494c      	ldr	r1, [pc, #304]	; (80082dc <_dtoa_r+0x65c>)
 80081aa:	2000      	movs	r0, #0
 80081ac:	f7f8 fb6e 	bl	800088c <__aeabi_ddiv>
 80081b0:	ec53 2b18 	vmov	r2, r3, d8
 80081b4:	f7f8 f888 	bl	80002c8 <__aeabi_dsub>
 80081b8:	9d00      	ldr	r5, [sp, #0]
 80081ba:	ec41 0b18 	vmov	d8, r0, r1
 80081be:	4639      	mov	r1, r7
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7f8 fce9 	bl	8000b98 <__aeabi_d2iz>
 80081c6:	900c      	str	r0, [sp, #48]	; 0x30
 80081c8:	f7f8 f9cc 	bl	8000564 <__aeabi_i2d>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f8 f878 	bl	80002c8 <__aeabi_dsub>
 80081d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081da:	3330      	adds	r3, #48	; 0x30
 80081dc:	f805 3b01 	strb.w	r3, [r5], #1
 80081e0:	ec53 2b18 	vmov	r2, r3, d8
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	f7f8 fc98 	bl	8000b1c <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d165      	bne.n	80082bc <_dtoa_r+0x63c>
 80081f0:	4632      	mov	r2, r6
 80081f2:	463b      	mov	r3, r7
 80081f4:	4935      	ldr	r1, [pc, #212]	; (80082cc <_dtoa_r+0x64c>)
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7f8 f866 	bl	80002c8 <__aeabi_dsub>
 80081fc:	ec53 2b18 	vmov	r2, r3, d8
 8008200:	f7f8 fc8c 	bl	8000b1c <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	f040 80b9 	bne.w	800837c <_dtoa_r+0x6fc>
 800820a:	9b02      	ldr	r3, [sp, #8]
 800820c:	429d      	cmp	r5, r3
 800820e:	f43f af75 	beq.w	80080fc <_dtoa_r+0x47c>
 8008212:	4b2f      	ldr	r3, [pc, #188]	; (80082d0 <_dtoa_r+0x650>)
 8008214:	ec51 0b18 	vmov	r0, r1, d8
 8008218:	2200      	movs	r2, #0
 800821a:	f7f8 fa0d 	bl	8000638 <__aeabi_dmul>
 800821e:	4b2c      	ldr	r3, [pc, #176]	; (80082d0 <_dtoa_r+0x650>)
 8008220:	ec41 0b18 	vmov	d8, r0, r1
 8008224:	2200      	movs	r2, #0
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 fa05 	bl	8000638 <__aeabi_dmul>
 800822e:	4606      	mov	r6, r0
 8008230:	460f      	mov	r7, r1
 8008232:	e7c4      	b.n	80081be <_dtoa_r+0x53e>
 8008234:	ec51 0b17 	vmov	r0, r1, d7
 8008238:	f7f8 f9fe 	bl	8000638 <__aeabi_dmul>
 800823c:	9b02      	ldr	r3, [sp, #8]
 800823e:	9d00      	ldr	r5, [sp, #0]
 8008240:	930c      	str	r3, [sp, #48]	; 0x30
 8008242:	ec41 0b18 	vmov	d8, r0, r1
 8008246:	4639      	mov	r1, r7
 8008248:	4630      	mov	r0, r6
 800824a:	f7f8 fca5 	bl	8000b98 <__aeabi_d2iz>
 800824e:	9011      	str	r0, [sp, #68]	; 0x44
 8008250:	f7f8 f988 	bl	8000564 <__aeabi_i2d>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 f834 	bl	80002c8 <__aeabi_dsub>
 8008260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008262:	3330      	adds	r3, #48	; 0x30
 8008264:	f805 3b01 	strb.w	r3, [r5], #1
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	429d      	cmp	r5, r3
 800826c:	4606      	mov	r6, r0
 800826e:	460f      	mov	r7, r1
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	d134      	bne.n	80082e0 <_dtoa_r+0x660>
 8008276:	4b19      	ldr	r3, [pc, #100]	; (80082dc <_dtoa_r+0x65c>)
 8008278:	ec51 0b18 	vmov	r0, r1, d8
 800827c:	f7f8 f826 	bl	80002cc <__adddf3>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f8 fc66 	bl	8000b58 <__aeabi_dcmpgt>
 800828c:	2800      	cmp	r0, #0
 800828e:	d175      	bne.n	800837c <_dtoa_r+0x6fc>
 8008290:	ec53 2b18 	vmov	r2, r3, d8
 8008294:	4911      	ldr	r1, [pc, #68]	; (80082dc <_dtoa_r+0x65c>)
 8008296:	2000      	movs	r0, #0
 8008298:	f7f8 f816 	bl	80002c8 <__aeabi_dsub>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4630      	mov	r0, r6
 80082a2:	4639      	mov	r1, r7
 80082a4:	f7f8 fc3a 	bl	8000b1c <__aeabi_dcmplt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	f43f af27 	beq.w	80080fc <_dtoa_r+0x47c>
 80082ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082b0:	1e6b      	subs	r3, r5, #1
 80082b2:	930c      	str	r3, [sp, #48]	; 0x30
 80082b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082b8:	2b30      	cmp	r3, #48	; 0x30
 80082ba:	d0f8      	beq.n	80082ae <_dtoa_r+0x62e>
 80082bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80082c0:	e04a      	b.n	8008358 <_dtoa_r+0x6d8>
 80082c2:	bf00      	nop
 80082c4:	0800a238 	.word	0x0800a238
 80082c8:	0800a210 	.word	0x0800a210
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	40240000 	.word	0x40240000
 80082d4:	401c0000 	.word	0x401c0000
 80082d8:	40140000 	.word	0x40140000
 80082dc:	3fe00000 	.word	0x3fe00000
 80082e0:	4baf      	ldr	r3, [pc, #700]	; (80085a0 <_dtoa_r+0x920>)
 80082e2:	f7f8 f9a9 	bl	8000638 <__aeabi_dmul>
 80082e6:	4606      	mov	r6, r0
 80082e8:	460f      	mov	r7, r1
 80082ea:	e7ac      	b.n	8008246 <_dtoa_r+0x5c6>
 80082ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082f0:	9d00      	ldr	r5, [sp, #0]
 80082f2:	4642      	mov	r2, r8
 80082f4:	464b      	mov	r3, r9
 80082f6:	4630      	mov	r0, r6
 80082f8:	4639      	mov	r1, r7
 80082fa:	f7f8 fac7 	bl	800088c <__aeabi_ddiv>
 80082fe:	f7f8 fc4b 	bl	8000b98 <__aeabi_d2iz>
 8008302:	9002      	str	r0, [sp, #8]
 8008304:	f7f8 f92e 	bl	8000564 <__aeabi_i2d>
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	f7f8 f994 	bl	8000638 <__aeabi_dmul>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f7 ffd6 	bl	80002c8 <__aeabi_dsub>
 800831c:	9e02      	ldr	r6, [sp, #8]
 800831e:	9f01      	ldr	r7, [sp, #4]
 8008320:	3630      	adds	r6, #48	; 0x30
 8008322:	f805 6b01 	strb.w	r6, [r5], #1
 8008326:	9e00      	ldr	r6, [sp, #0]
 8008328:	1bae      	subs	r6, r5, r6
 800832a:	42b7      	cmp	r7, r6
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	d137      	bne.n	80083a2 <_dtoa_r+0x722>
 8008332:	f7f7 ffcb 	bl	80002cc <__adddf3>
 8008336:	4642      	mov	r2, r8
 8008338:	464b      	mov	r3, r9
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	f7f8 fc0b 	bl	8000b58 <__aeabi_dcmpgt>
 8008342:	b9c8      	cbnz	r0, 8008378 <_dtoa_r+0x6f8>
 8008344:	4642      	mov	r2, r8
 8008346:	464b      	mov	r3, r9
 8008348:	4630      	mov	r0, r6
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fbdc 	bl	8000b08 <__aeabi_dcmpeq>
 8008350:	b110      	cbz	r0, 8008358 <_dtoa_r+0x6d8>
 8008352:	9b02      	ldr	r3, [sp, #8]
 8008354:	07d9      	lsls	r1, r3, #31
 8008356:	d40f      	bmi.n	8008378 <_dtoa_r+0x6f8>
 8008358:	4620      	mov	r0, r4
 800835a:	4659      	mov	r1, fp
 800835c:	f000 fad6 	bl	800890c <_Bfree>
 8008360:	2300      	movs	r3, #0
 8008362:	702b      	strb	r3, [r5, #0]
 8008364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008366:	f10a 0001 	add.w	r0, sl, #1
 800836a:	6018      	str	r0, [r3, #0]
 800836c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800836e:	2b00      	cmp	r3, #0
 8008370:	f43f acd8 	beq.w	8007d24 <_dtoa_r+0xa4>
 8008374:	601d      	str	r5, [r3, #0]
 8008376:	e4d5      	b.n	8007d24 <_dtoa_r+0xa4>
 8008378:	f8cd a01c 	str.w	sl, [sp, #28]
 800837c:	462b      	mov	r3, r5
 800837e:	461d      	mov	r5, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a39      	cmp	r2, #57	; 0x39
 8008386:	d108      	bne.n	800839a <_dtoa_r+0x71a>
 8008388:	9a00      	ldr	r2, [sp, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d1f7      	bne.n	800837e <_dtoa_r+0x6fe>
 800838e:	9a07      	ldr	r2, [sp, #28]
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	3201      	adds	r2, #1
 8008394:	9207      	str	r2, [sp, #28]
 8008396:	2230      	movs	r2, #48	; 0x30
 8008398:	700a      	strb	r2, [r1, #0]
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	3201      	adds	r2, #1
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e78c      	b.n	80082bc <_dtoa_r+0x63c>
 80083a2:	4b7f      	ldr	r3, [pc, #508]	; (80085a0 <_dtoa_r+0x920>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	f7f8 f947 	bl	8000638 <__aeabi_dmul>
 80083aa:	2200      	movs	r2, #0
 80083ac:	2300      	movs	r3, #0
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	f7f8 fba9 	bl	8000b08 <__aeabi_dcmpeq>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d09b      	beq.n	80082f2 <_dtoa_r+0x672>
 80083ba:	e7cd      	b.n	8008358 <_dtoa_r+0x6d8>
 80083bc:	9a08      	ldr	r2, [sp, #32]
 80083be:	2a00      	cmp	r2, #0
 80083c0:	f000 80c4 	beq.w	800854c <_dtoa_r+0x8cc>
 80083c4:	9a05      	ldr	r2, [sp, #20]
 80083c6:	2a01      	cmp	r2, #1
 80083c8:	f300 80a8 	bgt.w	800851c <_dtoa_r+0x89c>
 80083cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083ce:	2a00      	cmp	r2, #0
 80083d0:	f000 80a0 	beq.w	8008514 <_dtoa_r+0x894>
 80083d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083d8:	9e06      	ldr	r6, [sp, #24]
 80083da:	4645      	mov	r5, r8
 80083dc:	9a04      	ldr	r2, [sp, #16]
 80083de:	2101      	movs	r1, #1
 80083e0:	441a      	add	r2, r3
 80083e2:	4620      	mov	r0, r4
 80083e4:	4498      	add	r8, r3
 80083e6:	9204      	str	r2, [sp, #16]
 80083e8:	f000 fb4c 	bl	8008a84 <__i2b>
 80083ec:	4607      	mov	r7, r0
 80083ee:	2d00      	cmp	r5, #0
 80083f0:	dd0b      	ble.n	800840a <_dtoa_r+0x78a>
 80083f2:	9b04      	ldr	r3, [sp, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd08      	ble.n	800840a <_dtoa_r+0x78a>
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	9a04      	ldr	r2, [sp, #16]
 80083fc:	bfa8      	it	ge
 80083fe:	462b      	movge	r3, r5
 8008400:	eba8 0803 	sub.w	r8, r8, r3
 8008404:	1aed      	subs	r5, r5, r3
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	9b06      	ldr	r3, [sp, #24]
 800840c:	b1fb      	cbz	r3, 800844e <_dtoa_r+0x7ce>
 800840e:	9b08      	ldr	r3, [sp, #32]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 809f 	beq.w	8008554 <_dtoa_r+0x8d4>
 8008416:	2e00      	cmp	r6, #0
 8008418:	dd11      	ble.n	800843e <_dtoa_r+0x7be>
 800841a:	4639      	mov	r1, r7
 800841c:	4632      	mov	r2, r6
 800841e:	4620      	mov	r0, r4
 8008420:	f000 fbec 	bl	8008bfc <__pow5mult>
 8008424:	465a      	mov	r2, fp
 8008426:	4601      	mov	r1, r0
 8008428:	4607      	mov	r7, r0
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fb40 	bl	8008ab0 <__multiply>
 8008430:	4659      	mov	r1, fp
 8008432:	9007      	str	r0, [sp, #28]
 8008434:	4620      	mov	r0, r4
 8008436:	f000 fa69 	bl	800890c <_Bfree>
 800843a:	9b07      	ldr	r3, [sp, #28]
 800843c:	469b      	mov	fp, r3
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	1b9a      	subs	r2, r3, r6
 8008442:	d004      	beq.n	800844e <_dtoa_r+0x7ce>
 8008444:	4659      	mov	r1, fp
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fbd8 	bl	8008bfc <__pow5mult>
 800844c:	4683      	mov	fp, r0
 800844e:	2101      	movs	r1, #1
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fb17 	bl	8008a84 <__i2b>
 8008456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008458:	2b00      	cmp	r3, #0
 800845a:	4606      	mov	r6, r0
 800845c:	dd7c      	ble.n	8008558 <_dtoa_r+0x8d8>
 800845e:	461a      	mov	r2, r3
 8008460:	4601      	mov	r1, r0
 8008462:	4620      	mov	r0, r4
 8008464:	f000 fbca 	bl	8008bfc <__pow5mult>
 8008468:	9b05      	ldr	r3, [sp, #20]
 800846a:	2b01      	cmp	r3, #1
 800846c:	4606      	mov	r6, r0
 800846e:	dd76      	ble.n	800855e <_dtoa_r+0x8de>
 8008470:	2300      	movs	r3, #0
 8008472:	9306      	str	r3, [sp, #24]
 8008474:	6933      	ldr	r3, [r6, #16]
 8008476:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800847a:	6918      	ldr	r0, [r3, #16]
 800847c:	f000 fab2 	bl	80089e4 <__hi0bits>
 8008480:	f1c0 0020 	rsb	r0, r0, #32
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	4418      	add	r0, r3
 8008488:	f010 001f 	ands.w	r0, r0, #31
 800848c:	f000 8086 	beq.w	800859c <_dtoa_r+0x91c>
 8008490:	f1c0 0320 	rsb	r3, r0, #32
 8008494:	2b04      	cmp	r3, #4
 8008496:	dd7f      	ble.n	8008598 <_dtoa_r+0x918>
 8008498:	f1c0 001c 	rsb	r0, r0, #28
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	4403      	add	r3, r0
 80084a0:	4480      	add	r8, r0
 80084a2:	4405      	add	r5, r0
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	f1b8 0f00 	cmp.w	r8, #0
 80084aa:	dd05      	ble.n	80084b8 <_dtoa_r+0x838>
 80084ac:	4659      	mov	r1, fp
 80084ae:	4642      	mov	r2, r8
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fbfd 	bl	8008cb0 <__lshift>
 80084b6:	4683      	mov	fp, r0
 80084b8:	9b04      	ldr	r3, [sp, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dd05      	ble.n	80084ca <_dtoa_r+0x84a>
 80084be:	4631      	mov	r1, r6
 80084c0:	461a      	mov	r2, r3
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 fbf4 	bl	8008cb0 <__lshift>
 80084c8:	4606      	mov	r6, r0
 80084ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d069      	beq.n	80085a4 <_dtoa_r+0x924>
 80084d0:	4631      	mov	r1, r6
 80084d2:	4658      	mov	r0, fp
 80084d4:	f000 fc58 	bl	8008d88 <__mcmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	da63      	bge.n	80085a4 <_dtoa_r+0x924>
 80084dc:	2300      	movs	r3, #0
 80084de:	4659      	mov	r1, fp
 80084e0:	220a      	movs	r2, #10
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fa34 	bl	8008950 <__multadd>
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ee:	4683      	mov	fp, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 818f 	beq.w	8008814 <_dtoa_r+0xb94>
 80084f6:	4639      	mov	r1, r7
 80084f8:	2300      	movs	r3, #0
 80084fa:	220a      	movs	r2, #10
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fa27 	bl	8008950 <__multadd>
 8008502:	f1b9 0f00 	cmp.w	r9, #0
 8008506:	4607      	mov	r7, r0
 8008508:	f300 808e 	bgt.w	8008628 <_dtoa_r+0x9a8>
 800850c:	9b05      	ldr	r3, [sp, #20]
 800850e:	2b02      	cmp	r3, #2
 8008510:	dc50      	bgt.n	80085b4 <_dtoa_r+0x934>
 8008512:	e089      	b.n	8008628 <_dtoa_r+0x9a8>
 8008514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800851a:	e75d      	b.n	80083d8 <_dtoa_r+0x758>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	1e5e      	subs	r6, r3, #1
 8008520:	9b06      	ldr	r3, [sp, #24]
 8008522:	42b3      	cmp	r3, r6
 8008524:	bfbf      	itttt	lt
 8008526:	9b06      	ldrlt	r3, [sp, #24]
 8008528:	9606      	strlt	r6, [sp, #24]
 800852a:	1af2      	sublt	r2, r6, r3
 800852c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800852e:	bfb6      	itet	lt
 8008530:	189b      	addlt	r3, r3, r2
 8008532:	1b9e      	subge	r6, r3, r6
 8008534:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008536:	9b01      	ldr	r3, [sp, #4]
 8008538:	bfb8      	it	lt
 800853a:	2600      	movlt	r6, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	bfb5      	itete	lt
 8008540:	eba8 0503 	sublt.w	r5, r8, r3
 8008544:	9b01      	ldrge	r3, [sp, #4]
 8008546:	2300      	movlt	r3, #0
 8008548:	4645      	movge	r5, r8
 800854a:	e747      	b.n	80083dc <_dtoa_r+0x75c>
 800854c:	9e06      	ldr	r6, [sp, #24]
 800854e:	9f08      	ldr	r7, [sp, #32]
 8008550:	4645      	mov	r5, r8
 8008552:	e74c      	b.n	80083ee <_dtoa_r+0x76e>
 8008554:	9a06      	ldr	r2, [sp, #24]
 8008556:	e775      	b.n	8008444 <_dtoa_r+0x7c4>
 8008558:	9b05      	ldr	r3, [sp, #20]
 800855a:	2b01      	cmp	r3, #1
 800855c:	dc18      	bgt.n	8008590 <_dtoa_r+0x910>
 800855e:	9b02      	ldr	r3, [sp, #8]
 8008560:	b9b3      	cbnz	r3, 8008590 <_dtoa_r+0x910>
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008568:	b9a3      	cbnz	r3, 8008594 <_dtoa_r+0x914>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008570:	0d1b      	lsrs	r3, r3, #20
 8008572:	051b      	lsls	r3, r3, #20
 8008574:	b12b      	cbz	r3, 8008582 <_dtoa_r+0x902>
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	3301      	adds	r3, #1
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	f108 0801 	add.w	r8, r8, #1
 8008580:	2301      	movs	r3, #1
 8008582:	9306      	str	r3, [sp, #24]
 8008584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008586:	2b00      	cmp	r3, #0
 8008588:	f47f af74 	bne.w	8008474 <_dtoa_r+0x7f4>
 800858c:	2001      	movs	r0, #1
 800858e:	e779      	b.n	8008484 <_dtoa_r+0x804>
 8008590:	2300      	movs	r3, #0
 8008592:	e7f6      	b.n	8008582 <_dtoa_r+0x902>
 8008594:	9b02      	ldr	r3, [sp, #8]
 8008596:	e7f4      	b.n	8008582 <_dtoa_r+0x902>
 8008598:	d085      	beq.n	80084a6 <_dtoa_r+0x826>
 800859a:	4618      	mov	r0, r3
 800859c:	301c      	adds	r0, #28
 800859e:	e77d      	b.n	800849c <_dtoa_r+0x81c>
 80085a0:	40240000 	.word	0x40240000
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dc38      	bgt.n	800861c <_dtoa_r+0x99c>
 80085aa:	9b05      	ldr	r3, [sp, #20]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	dd35      	ble.n	800861c <_dtoa_r+0x99c>
 80085b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80085b4:	f1b9 0f00 	cmp.w	r9, #0
 80085b8:	d10d      	bne.n	80085d6 <_dtoa_r+0x956>
 80085ba:	4631      	mov	r1, r6
 80085bc:	464b      	mov	r3, r9
 80085be:	2205      	movs	r2, #5
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 f9c5 	bl	8008950 <__multadd>
 80085c6:	4601      	mov	r1, r0
 80085c8:	4606      	mov	r6, r0
 80085ca:	4658      	mov	r0, fp
 80085cc:	f000 fbdc 	bl	8008d88 <__mcmp>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f73f adbd 	bgt.w	8008150 <_dtoa_r+0x4d0>
 80085d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d8:	9d00      	ldr	r5, [sp, #0]
 80085da:	ea6f 0a03 	mvn.w	sl, r3
 80085de:	f04f 0800 	mov.w	r8, #0
 80085e2:	4631      	mov	r1, r6
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 f991 	bl	800890c <_Bfree>
 80085ea:	2f00      	cmp	r7, #0
 80085ec:	f43f aeb4 	beq.w	8008358 <_dtoa_r+0x6d8>
 80085f0:	f1b8 0f00 	cmp.w	r8, #0
 80085f4:	d005      	beq.n	8008602 <_dtoa_r+0x982>
 80085f6:	45b8      	cmp	r8, r7
 80085f8:	d003      	beq.n	8008602 <_dtoa_r+0x982>
 80085fa:	4641      	mov	r1, r8
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 f985 	bl	800890c <_Bfree>
 8008602:	4639      	mov	r1, r7
 8008604:	4620      	mov	r0, r4
 8008606:	f000 f981 	bl	800890c <_Bfree>
 800860a:	e6a5      	b.n	8008358 <_dtoa_r+0x6d8>
 800860c:	2600      	movs	r6, #0
 800860e:	4637      	mov	r7, r6
 8008610:	e7e1      	b.n	80085d6 <_dtoa_r+0x956>
 8008612:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008618:	4637      	mov	r7, r6
 800861a:	e599      	b.n	8008150 <_dtoa_r+0x4d0>
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80fd 	beq.w	8008822 <_dtoa_r+0xba2>
 8008628:	2d00      	cmp	r5, #0
 800862a:	dd05      	ble.n	8008638 <_dtoa_r+0x9b8>
 800862c:	4639      	mov	r1, r7
 800862e:	462a      	mov	r2, r5
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fb3d 	bl	8008cb0 <__lshift>
 8008636:	4607      	mov	r7, r0
 8008638:	9b06      	ldr	r3, [sp, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d05c      	beq.n	80086f8 <_dtoa_r+0xa78>
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	4620      	mov	r0, r4
 8008642:	f000 f923 	bl	800888c <_Balloc>
 8008646:	4605      	mov	r5, r0
 8008648:	b928      	cbnz	r0, 8008656 <_dtoa_r+0x9d6>
 800864a:	4b80      	ldr	r3, [pc, #512]	; (800884c <_dtoa_r+0xbcc>)
 800864c:	4602      	mov	r2, r0
 800864e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008652:	f7ff bb2e 	b.w	8007cb2 <_dtoa_r+0x32>
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	3202      	adds	r2, #2
 800865a:	0092      	lsls	r2, r2, #2
 800865c:	f107 010c 	add.w	r1, r7, #12
 8008660:	300c      	adds	r0, #12
 8008662:	f000 f905 	bl	8008870 <memcpy>
 8008666:	2201      	movs	r2, #1
 8008668:	4629      	mov	r1, r5
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fb20 	bl	8008cb0 <__lshift>
 8008670:	9b00      	ldr	r3, [sp, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	9b00      	ldr	r3, [sp, #0]
 8008678:	444b      	add	r3, r9
 800867a:	9307      	str	r3, [sp, #28]
 800867c:	9b02      	ldr	r3, [sp, #8]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	46b8      	mov	r8, r7
 8008684:	9306      	str	r3, [sp, #24]
 8008686:	4607      	mov	r7, r0
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	4631      	mov	r1, r6
 800868c:	3b01      	subs	r3, #1
 800868e:	4658      	mov	r0, fp
 8008690:	9302      	str	r3, [sp, #8]
 8008692:	f7ff fa67 	bl	8007b64 <quorem>
 8008696:	4603      	mov	r3, r0
 8008698:	3330      	adds	r3, #48	; 0x30
 800869a:	9004      	str	r0, [sp, #16]
 800869c:	4641      	mov	r1, r8
 800869e:	4658      	mov	r0, fp
 80086a0:	9308      	str	r3, [sp, #32]
 80086a2:	f000 fb71 	bl	8008d88 <__mcmp>
 80086a6:	463a      	mov	r2, r7
 80086a8:	4681      	mov	r9, r0
 80086aa:	4631      	mov	r1, r6
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fb87 	bl	8008dc0 <__mdiff>
 80086b2:	68c2      	ldr	r2, [r0, #12]
 80086b4:	9b08      	ldr	r3, [sp, #32]
 80086b6:	4605      	mov	r5, r0
 80086b8:	bb02      	cbnz	r2, 80086fc <_dtoa_r+0xa7c>
 80086ba:	4601      	mov	r1, r0
 80086bc:	4658      	mov	r0, fp
 80086be:	f000 fb63 	bl	8008d88 <__mcmp>
 80086c2:	9b08      	ldr	r3, [sp, #32]
 80086c4:	4602      	mov	r2, r0
 80086c6:	4629      	mov	r1, r5
 80086c8:	4620      	mov	r0, r4
 80086ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80086ce:	f000 f91d 	bl	800890c <_Bfree>
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d6:	9d01      	ldr	r5, [sp, #4]
 80086d8:	ea43 0102 	orr.w	r1, r3, r2
 80086dc:	9b06      	ldr	r3, [sp, #24]
 80086de:	430b      	orrs	r3, r1
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	d10d      	bne.n	8008700 <_dtoa_r+0xa80>
 80086e4:	2b39      	cmp	r3, #57	; 0x39
 80086e6:	d029      	beq.n	800873c <_dtoa_r+0xabc>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	dd01      	ble.n	80086f2 <_dtoa_r+0xa72>
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	3331      	adds	r3, #49	; 0x31
 80086f2:	9a02      	ldr	r2, [sp, #8]
 80086f4:	7013      	strb	r3, [r2, #0]
 80086f6:	e774      	b.n	80085e2 <_dtoa_r+0x962>
 80086f8:	4638      	mov	r0, r7
 80086fa:	e7b9      	b.n	8008670 <_dtoa_r+0x9f0>
 80086fc:	2201      	movs	r2, #1
 80086fe:	e7e2      	b.n	80086c6 <_dtoa_r+0xa46>
 8008700:	f1b9 0f00 	cmp.w	r9, #0
 8008704:	db06      	blt.n	8008714 <_dtoa_r+0xa94>
 8008706:	9905      	ldr	r1, [sp, #20]
 8008708:	ea41 0909 	orr.w	r9, r1, r9
 800870c:	9906      	ldr	r1, [sp, #24]
 800870e:	ea59 0101 	orrs.w	r1, r9, r1
 8008712:	d120      	bne.n	8008756 <_dtoa_r+0xad6>
 8008714:	2a00      	cmp	r2, #0
 8008716:	ddec      	ble.n	80086f2 <_dtoa_r+0xa72>
 8008718:	4659      	mov	r1, fp
 800871a:	2201      	movs	r2, #1
 800871c:	4620      	mov	r0, r4
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	f000 fac6 	bl	8008cb0 <__lshift>
 8008724:	4631      	mov	r1, r6
 8008726:	4683      	mov	fp, r0
 8008728:	f000 fb2e 	bl	8008d88 <__mcmp>
 800872c:	2800      	cmp	r0, #0
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	dc02      	bgt.n	8008738 <_dtoa_r+0xab8>
 8008732:	d1de      	bne.n	80086f2 <_dtoa_r+0xa72>
 8008734:	07da      	lsls	r2, r3, #31
 8008736:	d5dc      	bpl.n	80086f2 <_dtoa_r+0xa72>
 8008738:	2b39      	cmp	r3, #57	; 0x39
 800873a:	d1d8      	bne.n	80086ee <_dtoa_r+0xa6e>
 800873c:	9a02      	ldr	r2, [sp, #8]
 800873e:	2339      	movs	r3, #57	; 0x39
 8008740:	7013      	strb	r3, [r2, #0]
 8008742:	462b      	mov	r3, r5
 8008744:	461d      	mov	r5, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800874c:	2a39      	cmp	r2, #57	; 0x39
 800874e:	d050      	beq.n	80087f2 <_dtoa_r+0xb72>
 8008750:	3201      	adds	r2, #1
 8008752:	701a      	strb	r2, [r3, #0]
 8008754:	e745      	b.n	80085e2 <_dtoa_r+0x962>
 8008756:	2a00      	cmp	r2, #0
 8008758:	dd03      	ble.n	8008762 <_dtoa_r+0xae2>
 800875a:	2b39      	cmp	r3, #57	; 0x39
 800875c:	d0ee      	beq.n	800873c <_dtoa_r+0xabc>
 800875e:	3301      	adds	r3, #1
 8008760:	e7c7      	b.n	80086f2 <_dtoa_r+0xa72>
 8008762:	9a01      	ldr	r2, [sp, #4]
 8008764:	9907      	ldr	r1, [sp, #28]
 8008766:	f802 3c01 	strb.w	r3, [r2, #-1]
 800876a:	428a      	cmp	r2, r1
 800876c:	d02a      	beq.n	80087c4 <_dtoa_r+0xb44>
 800876e:	4659      	mov	r1, fp
 8008770:	2300      	movs	r3, #0
 8008772:	220a      	movs	r2, #10
 8008774:	4620      	mov	r0, r4
 8008776:	f000 f8eb 	bl	8008950 <__multadd>
 800877a:	45b8      	cmp	r8, r7
 800877c:	4683      	mov	fp, r0
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	f04f 020a 	mov.w	r2, #10
 8008786:	4641      	mov	r1, r8
 8008788:	4620      	mov	r0, r4
 800878a:	d107      	bne.n	800879c <_dtoa_r+0xb1c>
 800878c:	f000 f8e0 	bl	8008950 <__multadd>
 8008790:	4680      	mov	r8, r0
 8008792:	4607      	mov	r7, r0
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	3301      	adds	r3, #1
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	e775      	b.n	8008688 <_dtoa_r+0xa08>
 800879c:	f000 f8d8 	bl	8008950 <__multadd>
 80087a0:	4639      	mov	r1, r7
 80087a2:	4680      	mov	r8, r0
 80087a4:	2300      	movs	r3, #0
 80087a6:	220a      	movs	r2, #10
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 f8d1 	bl	8008950 <__multadd>
 80087ae:	4607      	mov	r7, r0
 80087b0:	e7f0      	b.n	8008794 <_dtoa_r+0xb14>
 80087b2:	f1b9 0f00 	cmp.w	r9, #0
 80087b6:	9a00      	ldr	r2, [sp, #0]
 80087b8:	bfcc      	ite	gt
 80087ba:	464d      	movgt	r5, r9
 80087bc:	2501      	movle	r5, #1
 80087be:	4415      	add	r5, r2
 80087c0:	f04f 0800 	mov.w	r8, #0
 80087c4:	4659      	mov	r1, fp
 80087c6:	2201      	movs	r2, #1
 80087c8:	4620      	mov	r0, r4
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	f000 fa70 	bl	8008cb0 <__lshift>
 80087d0:	4631      	mov	r1, r6
 80087d2:	4683      	mov	fp, r0
 80087d4:	f000 fad8 	bl	8008d88 <__mcmp>
 80087d8:	2800      	cmp	r0, #0
 80087da:	dcb2      	bgt.n	8008742 <_dtoa_r+0xac2>
 80087dc:	d102      	bne.n	80087e4 <_dtoa_r+0xb64>
 80087de:	9b01      	ldr	r3, [sp, #4]
 80087e0:	07db      	lsls	r3, r3, #31
 80087e2:	d4ae      	bmi.n	8008742 <_dtoa_r+0xac2>
 80087e4:	462b      	mov	r3, r5
 80087e6:	461d      	mov	r5, r3
 80087e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ec:	2a30      	cmp	r2, #48	; 0x30
 80087ee:	d0fa      	beq.n	80087e6 <_dtoa_r+0xb66>
 80087f0:	e6f7      	b.n	80085e2 <_dtoa_r+0x962>
 80087f2:	9a00      	ldr	r2, [sp, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d1a5      	bne.n	8008744 <_dtoa_r+0xac4>
 80087f8:	f10a 0a01 	add.w	sl, sl, #1
 80087fc:	2331      	movs	r3, #49	; 0x31
 80087fe:	e779      	b.n	80086f4 <_dtoa_r+0xa74>
 8008800:	4b13      	ldr	r3, [pc, #76]	; (8008850 <_dtoa_r+0xbd0>)
 8008802:	f7ff baaf 	b.w	8007d64 <_dtoa_r+0xe4>
 8008806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f aa86 	bne.w	8007d1a <_dtoa_r+0x9a>
 800880e:	4b11      	ldr	r3, [pc, #68]	; (8008854 <_dtoa_r+0xbd4>)
 8008810:	f7ff baa8 	b.w	8007d64 <_dtoa_r+0xe4>
 8008814:	f1b9 0f00 	cmp.w	r9, #0
 8008818:	dc03      	bgt.n	8008822 <_dtoa_r+0xba2>
 800881a:	9b05      	ldr	r3, [sp, #20]
 800881c:	2b02      	cmp	r3, #2
 800881e:	f73f aec9 	bgt.w	80085b4 <_dtoa_r+0x934>
 8008822:	9d00      	ldr	r5, [sp, #0]
 8008824:	4631      	mov	r1, r6
 8008826:	4658      	mov	r0, fp
 8008828:	f7ff f99c 	bl	8007b64 <quorem>
 800882c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008830:	f805 3b01 	strb.w	r3, [r5], #1
 8008834:	9a00      	ldr	r2, [sp, #0]
 8008836:	1aaa      	subs	r2, r5, r2
 8008838:	4591      	cmp	r9, r2
 800883a:	ddba      	ble.n	80087b2 <_dtoa_r+0xb32>
 800883c:	4659      	mov	r1, fp
 800883e:	2300      	movs	r3, #0
 8008840:	220a      	movs	r2, #10
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f884 	bl	8008950 <__multadd>
 8008848:	4683      	mov	fp, r0
 800884a:	e7eb      	b.n	8008824 <_dtoa_r+0xba4>
 800884c:	0800a19b 	.word	0x0800a19b
 8008850:	0800a0f4 	.word	0x0800a0f4
 8008854:	0800a118 	.word	0x0800a118

08008858 <_localeconv_r>:
 8008858:	4800      	ldr	r0, [pc, #0]	; (800885c <_localeconv_r+0x4>)
 800885a:	4770      	bx	lr
 800885c:	20000160 	.word	0x20000160

08008860 <malloc>:
 8008860:	4b02      	ldr	r3, [pc, #8]	; (800886c <malloc+0xc>)
 8008862:	4601      	mov	r1, r0
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	f000 bbef 	b.w	8009048 <_malloc_r>
 800886a:	bf00      	nop
 800886c:	2000000c 	.word	0x2000000c

08008870 <memcpy>:
 8008870:	440a      	add	r2, r1
 8008872:	4291      	cmp	r1, r2
 8008874:	f100 33ff 	add.w	r3, r0, #4294967295
 8008878:	d100      	bne.n	800887c <memcpy+0xc>
 800887a:	4770      	bx	lr
 800887c:	b510      	push	{r4, lr}
 800887e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008886:	4291      	cmp	r1, r2
 8008888:	d1f9      	bne.n	800887e <memcpy+0xe>
 800888a:	bd10      	pop	{r4, pc}

0800888c <_Balloc>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008890:	4604      	mov	r4, r0
 8008892:	460d      	mov	r5, r1
 8008894:	b976      	cbnz	r6, 80088b4 <_Balloc+0x28>
 8008896:	2010      	movs	r0, #16
 8008898:	f7ff ffe2 	bl	8008860 <malloc>
 800889c:	4602      	mov	r2, r0
 800889e:	6260      	str	r0, [r4, #36]	; 0x24
 80088a0:	b920      	cbnz	r0, 80088ac <_Balloc+0x20>
 80088a2:	4b18      	ldr	r3, [pc, #96]	; (8008904 <_Balloc+0x78>)
 80088a4:	4818      	ldr	r0, [pc, #96]	; (8008908 <_Balloc+0x7c>)
 80088a6:	2166      	movs	r1, #102	; 0x66
 80088a8:	f000 fd94 	bl	80093d4 <__assert_func>
 80088ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088b0:	6006      	str	r6, [r0, #0]
 80088b2:	60c6      	str	r6, [r0, #12]
 80088b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088b6:	68f3      	ldr	r3, [r6, #12]
 80088b8:	b183      	cbz	r3, 80088dc <_Balloc+0x50>
 80088ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088c2:	b9b8      	cbnz	r0, 80088f4 <_Balloc+0x68>
 80088c4:	2101      	movs	r1, #1
 80088c6:	fa01 f605 	lsl.w	r6, r1, r5
 80088ca:	1d72      	adds	r2, r6, #5
 80088cc:	0092      	lsls	r2, r2, #2
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 fb5a 	bl	8008f88 <_calloc_r>
 80088d4:	b160      	cbz	r0, 80088f0 <_Balloc+0x64>
 80088d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088da:	e00e      	b.n	80088fa <_Balloc+0x6e>
 80088dc:	2221      	movs	r2, #33	; 0x21
 80088de:	2104      	movs	r1, #4
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fb51 	bl	8008f88 <_calloc_r>
 80088e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e8:	60f0      	str	r0, [r6, #12]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e4      	bne.n	80088ba <_Balloc+0x2e>
 80088f0:	2000      	movs	r0, #0
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	6802      	ldr	r2, [r0, #0]
 80088f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088fa:	2300      	movs	r3, #0
 80088fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008900:	e7f7      	b.n	80088f2 <_Balloc+0x66>
 8008902:	bf00      	nop
 8008904:	0800a125 	.word	0x0800a125
 8008908:	0800a1ac 	.word	0x0800a1ac

0800890c <_Bfree>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008910:	4605      	mov	r5, r0
 8008912:	460c      	mov	r4, r1
 8008914:	b976      	cbnz	r6, 8008934 <_Bfree+0x28>
 8008916:	2010      	movs	r0, #16
 8008918:	f7ff ffa2 	bl	8008860 <malloc>
 800891c:	4602      	mov	r2, r0
 800891e:	6268      	str	r0, [r5, #36]	; 0x24
 8008920:	b920      	cbnz	r0, 800892c <_Bfree+0x20>
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <_Bfree+0x3c>)
 8008924:	4809      	ldr	r0, [pc, #36]	; (800894c <_Bfree+0x40>)
 8008926:	218a      	movs	r1, #138	; 0x8a
 8008928:	f000 fd54 	bl	80093d4 <__assert_func>
 800892c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008930:	6006      	str	r6, [r0, #0]
 8008932:	60c6      	str	r6, [r0, #12]
 8008934:	b13c      	cbz	r4, 8008946 <_Bfree+0x3a>
 8008936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008938:	6862      	ldr	r2, [r4, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008940:	6021      	str	r1, [r4, #0]
 8008942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	0800a125 	.word	0x0800a125
 800894c:	0800a1ac 	.word	0x0800a1ac

08008950 <__multadd>:
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008954:	690e      	ldr	r6, [r1, #16]
 8008956:	4607      	mov	r7, r0
 8008958:	4698      	mov	r8, r3
 800895a:	460c      	mov	r4, r1
 800895c:	f101 0014 	add.w	r0, r1, #20
 8008960:	2300      	movs	r3, #0
 8008962:	6805      	ldr	r5, [r0, #0]
 8008964:	b2a9      	uxth	r1, r5
 8008966:	fb02 8101 	mla	r1, r2, r1, r8
 800896a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800896e:	0c2d      	lsrs	r5, r5, #16
 8008970:	fb02 c505 	mla	r5, r2, r5, ip
 8008974:	b289      	uxth	r1, r1
 8008976:	3301      	adds	r3, #1
 8008978:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800897c:	429e      	cmp	r6, r3
 800897e:	f840 1b04 	str.w	r1, [r0], #4
 8008982:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008986:	dcec      	bgt.n	8008962 <__multadd+0x12>
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	d022      	beq.n	80089d4 <__multadd+0x84>
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	42b3      	cmp	r3, r6
 8008992:	dc19      	bgt.n	80089c8 <__multadd+0x78>
 8008994:	6861      	ldr	r1, [r4, #4]
 8008996:	4638      	mov	r0, r7
 8008998:	3101      	adds	r1, #1
 800899a:	f7ff ff77 	bl	800888c <_Balloc>
 800899e:	4605      	mov	r5, r0
 80089a0:	b928      	cbnz	r0, 80089ae <__multadd+0x5e>
 80089a2:	4602      	mov	r2, r0
 80089a4:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <__multadd+0x8c>)
 80089a6:	480e      	ldr	r0, [pc, #56]	; (80089e0 <__multadd+0x90>)
 80089a8:	21b5      	movs	r1, #181	; 0xb5
 80089aa:	f000 fd13 	bl	80093d4 <__assert_func>
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	3202      	adds	r2, #2
 80089b2:	f104 010c 	add.w	r1, r4, #12
 80089b6:	0092      	lsls	r2, r2, #2
 80089b8:	300c      	adds	r0, #12
 80089ba:	f7ff ff59 	bl	8008870 <memcpy>
 80089be:	4621      	mov	r1, r4
 80089c0:	4638      	mov	r0, r7
 80089c2:	f7ff ffa3 	bl	800890c <_Bfree>
 80089c6:	462c      	mov	r4, r5
 80089c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80089cc:	3601      	adds	r6, #1
 80089ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80089d2:	6126      	str	r6, [r4, #16]
 80089d4:	4620      	mov	r0, r4
 80089d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089da:	bf00      	nop
 80089dc:	0800a19b 	.word	0x0800a19b
 80089e0:	0800a1ac 	.word	0x0800a1ac

080089e4 <__hi0bits>:
 80089e4:	0c03      	lsrs	r3, r0, #16
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	b9d3      	cbnz	r3, 8008a20 <__hi0bits+0x3c>
 80089ea:	0400      	lsls	r0, r0, #16
 80089ec:	2310      	movs	r3, #16
 80089ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089f2:	bf04      	itt	eq
 80089f4:	0200      	lsleq	r0, r0, #8
 80089f6:	3308      	addeq	r3, #8
 80089f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089fc:	bf04      	itt	eq
 80089fe:	0100      	lsleq	r0, r0, #4
 8008a00:	3304      	addeq	r3, #4
 8008a02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a06:	bf04      	itt	eq
 8008a08:	0080      	lsleq	r0, r0, #2
 8008a0a:	3302      	addeq	r3, #2
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	db05      	blt.n	8008a1c <__hi0bits+0x38>
 8008a10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a14:	f103 0301 	add.w	r3, r3, #1
 8008a18:	bf08      	it	eq
 8008a1a:	2320      	moveq	r3, #32
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	4770      	bx	lr
 8008a20:	2300      	movs	r3, #0
 8008a22:	e7e4      	b.n	80089ee <__hi0bits+0xa>

08008a24 <__lo0bits>:
 8008a24:	6803      	ldr	r3, [r0, #0]
 8008a26:	f013 0207 	ands.w	r2, r3, #7
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	d00b      	beq.n	8008a46 <__lo0bits+0x22>
 8008a2e:	07da      	lsls	r2, r3, #31
 8008a30:	d424      	bmi.n	8008a7c <__lo0bits+0x58>
 8008a32:	0798      	lsls	r0, r3, #30
 8008a34:	bf49      	itett	mi
 8008a36:	085b      	lsrmi	r3, r3, #1
 8008a38:	089b      	lsrpl	r3, r3, #2
 8008a3a:	2001      	movmi	r0, #1
 8008a3c:	600b      	strmi	r3, [r1, #0]
 8008a3e:	bf5c      	itt	pl
 8008a40:	600b      	strpl	r3, [r1, #0]
 8008a42:	2002      	movpl	r0, #2
 8008a44:	4770      	bx	lr
 8008a46:	b298      	uxth	r0, r3
 8008a48:	b9b0      	cbnz	r0, 8008a78 <__lo0bits+0x54>
 8008a4a:	0c1b      	lsrs	r3, r3, #16
 8008a4c:	2010      	movs	r0, #16
 8008a4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a52:	bf04      	itt	eq
 8008a54:	0a1b      	lsreq	r3, r3, #8
 8008a56:	3008      	addeq	r0, #8
 8008a58:	071a      	lsls	r2, r3, #28
 8008a5a:	bf04      	itt	eq
 8008a5c:	091b      	lsreq	r3, r3, #4
 8008a5e:	3004      	addeq	r0, #4
 8008a60:	079a      	lsls	r2, r3, #30
 8008a62:	bf04      	itt	eq
 8008a64:	089b      	lsreq	r3, r3, #2
 8008a66:	3002      	addeq	r0, #2
 8008a68:	07da      	lsls	r2, r3, #31
 8008a6a:	d403      	bmi.n	8008a74 <__lo0bits+0x50>
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	f100 0001 	add.w	r0, r0, #1
 8008a72:	d005      	beq.n	8008a80 <__lo0bits+0x5c>
 8008a74:	600b      	str	r3, [r1, #0]
 8008a76:	4770      	bx	lr
 8008a78:	4610      	mov	r0, r2
 8008a7a:	e7e8      	b.n	8008a4e <__lo0bits+0x2a>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	4770      	bx	lr
 8008a80:	2020      	movs	r0, #32
 8008a82:	4770      	bx	lr

08008a84 <__i2b>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	460c      	mov	r4, r1
 8008a88:	2101      	movs	r1, #1
 8008a8a:	f7ff feff 	bl	800888c <_Balloc>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	b928      	cbnz	r0, 8008a9e <__i2b+0x1a>
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <__i2b+0x24>)
 8008a94:	4805      	ldr	r0, [pc, #20]	; (8008aac <__i2b+0x28>)
 8008a96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a9a:	f000 fc9b 	bl	80093d4 <__assert_func>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	6144      	str	r4, [r0, #20]
 8008aa2:	6103      	str	r3, [r0, #16]
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	0800a19b 	.word	0x0800a19b
 8008aac:	0800a1ac 	.word	0x0800a1ac

08008ab0 <__multiply>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	690a      	ldr	r2, [r1, #16]
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	bfb8      	it	lt
 8008abe:	460b      	movlt	r3, r1
 8008ac0:	460d      	mov	r5, r1
 8008ac2:	bfbc      	itt	lt
 8008ac4:	4625      	movlt	r5, r4
 8008ac6:	461c      	movlt	r4, r3
 8008ac8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008acc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ad0:	68ab      	ldr	r3, [r5, #8]
 8008ad2:	6869      	ldr	r1, [r5, #4]
 8008ad4:	eb0a 0709 	add.w	r7, sl, r9
 8008ad8:	42bb      	cmp	r3, r7
 8008ada:	b085      	sub	sp, #20
 8008adc:	bfb8      	it	lt
 8008ade:	3101      	addlt	r1, #1
 8008ae0:	f7ff fed4 	bl	800888c <_Balloc>
 8008ae4:	b930      	cbnz	r0, 8008af4 <__multiply+0x44>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4b42      	ldr	r3, [pc, #264]	; (8008bf4 <__multiply+0x144>)
 8008aea:	4843      	ldr	r0, [pc, #268]	; (8008bf8 <__multiply+0x148>)
 8008aec:	f240 115d 	movw	r1, #349	; 0x15d
 8008af0:	f000 fc70 	bl	80093d4 <__assert_func>
 8008af4:	f100 0614 	add.w	r6, r0, #20
 8008af8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008afc:	4633      	mov	r3, r6
 8008afe:	2200      	movs	r2, #0
 8008b00:	4543      	cmp	r3, r8
 8008b02:	d31e      	bcc.n	8008b42 <__multiply+0x92>
 8008b04:	f105 0c14 	add.w	ip, r5, #20
 8008b08:	f104 0314 	add.w	r3, r4, #20
 8008b0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b14:	9202      	str	r2, [sp, #8]
 8008b16:	ebac 0205 	sub.w	r2, ip, r5
 8008b1a:	3a15      	subs	r2, #21
 8008b1c:	f022 0203 	bic.w	r2, r2, #3
 8008b20:	3204      	adds	r2, #4
 8008b22:	f105 0115 	add.w	r1, r5, #21
 8008b26:	458c      	cmp	ip, r1
 8008b28:	bf38      	it	cc
 8008b2a:	2204      	movcc	r2, #4
 8008b2c:	9201      	str	r2, [sp, #4]
 8008b2e:	9a02      	ldr	r2, [sp, #8]
 8008b30:	9303      	str	r3, [sp, #12]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d808      	bhi.n	8008b48 <__multiply+0x98>
 8008b36:	2f00      	cmp	r7, #0
 8008b38:	dc55      	bgt.n	8008be6 <__multiply+0x136>
 8008b3a:	6107      	str	r7, [r0, #16]
 8008b3c:	b005      	add	sp, #20
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	f843 2b04 	str.w	r2, [r3], #4
 8008b46:	e7db      	b.n	8008b00 <__multiply+0x50>
 8008b48:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b4c:	f1ba 0f00 	cmp.w	sl, #0
 8008b50:	d020      	beq.n	8008b94 <__multiply+0xe4>
 8008b52:	f105 0e14 	add.w	lr, r5, #20
 8008b56:	46b1      	mov	r9, r6
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b5e:	f8d9 b000 	ldr.w	fp, [r9]
 8008b62:	b2a1      	uxth	r1, r4
 8008b64:	fa1f fb8b 	uxth.w	fp, fp
 8008b68:	fb0a b101 	mla	r1, sl, r1, fp
 8008b6c:	4411      	add	r1, r2
 8008b6e:	f8d9 2000 	ldr.w	r2, [r9]
 8008b72:	0c24      	lsrs	r4, r4, #16
 8008b74:	0c12      	lsrs	r2, r2, #16
 8008b76:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b7e:	b289      	uxth	r1, r1
 8008b80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b84:	45f4      	cmp	ip, lr
 8008b86:	f849 1b04 	str.w	r1, [r9], #4
 8008b8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b8e:	d8e4      	bhi.n	8008b5a <__multiply+0xaa>
 8008b90:	9901      	ldr	r1, [sp, #4]
 8008b92:	5072      	str	r2, [r6, r1]
 8008b94:	9a03      	ldr	r2, [sp, #12]
 8008b96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ba0:	d01f      	beq.n	8008be2 <__multiply+0x132>
 8008ba2:	6834      	ldr	r4, [r6, #0]
 8008ba4:	f105 0114 	add.w	r1, r5, #20
 8008ba8:	46b6      	mov	lr, r6
 8008baa:	f04f 0a00 	mov.w	sl, #0
 8008bae:	880a      	ldrh	r2, [r1, #0]
 8008bb0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008bb4:	fb09 b202 	mla	r2, r9, r2, fp
 8008bb8:	4492      	add	sl, r2
 8008bba:	b2a4      	uxth	r4, r4
 8008bbc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008bc0:	f84e 4b04 	str.w	r4, [lr], #4
 8008bc4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008bc8:	f8be 2000 	ldrh.w	r2, [lr]
 8008bcc:	0c24      	lsrs	r4, r4, #16
 8008bce:	fb09 2404 	mla	r4, r9, r4, r2
 8008bd2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008bd6:	458c      	cmp	ip, r1
 8008bd8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008bdc:	d8e7      	bhi.n	8008bae <__multiply+0xfe>
 8008bde:	9a01      	ldr	r2, [sp, #4]
 8008be0:	50b4      	str	r4, [r6, r2]
 8008be2:	3604      	adds	r6, #4
 8008be4:	e7a3      	b.n	8008b2e <__multiply+0x7e>
 8008be6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1a5      	bne.n	8008b3a <__multiply+0x8a>
 8008bee:	3f01      	subs	r7, #1
 8008bf0:	e7a1      	b.n	8008b36 <__multiply+0x86>
 8008bf2:	bf00      	nop
 8008bf4:	0800a19b 	.word	0x0800a19b
 8008bf8:	0800a1ac 	.word	0x0800a1ac

08008bfc <__pow5mult>:
 8008bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	4615      	mov	r5, r2
 8008c02:	f012 0203 	ands.w	r2, r2, #3
 8008c06:	4606      	mov	r6, r0
 8008c08:	460f      	mov	r7, r1
 8008c0a:	d007      	beq.n	8008c1c <__pow5mult+0x20>
 8008c0c:	4c25      	ldr	r4, [pc, #148]	; (8008ca4 <__pow5mult+0xa8>)
 8008c0e:	3a01      	subs	r2, #1
 8008c10:	2300      	movs	r3, #0
 8008c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c16:	f7ff fe9b 	bl	8008950 <__multadd>
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	10ad      	asrs	r5, r5, #2
 8008c1e:	d03d      	beq.n	8008c9c <__pow5mult+0xa0>
 8008c20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c22:	b97c      	cbnz	r4, 8008c44 <__pow5mult+0x48>
 8008c24:	2010      	movs	r0, #16
 8008c26:	f7ff fe1b 	bl	8008860 <malloc>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	6270      	str	r0, [r6, #36]	; 0x24
 8008c2e:	b928      	cbnz	r0, 8008c3c <__pow5mult+0x40>
 8008c30:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <__pow5mult+0xac>)
 8008c32:	481e      	ldr	r0, [pc, #120]	; (8008cac <__pow5mult+0xb0>)
 8008c34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c38:	f000 fbcc 	bl	80093d4 <__assert_func>
 8008c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c40:	6004      	str	r4, [r0, #0]
 8008c42:	60c4      	str	r4, [r0, #12]
 8008c44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c4c:	b94c      	cbnz	r4, 8008c62 <__pow5mult+0x66>
 8008c4e:	f240 2171 	movw	r1, #625	; 0x271
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ff16 	bl	8008a84 <__i2b>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c5e:	4604      	mov	r4, r0
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	07eb      	lsls	r3, r5, #31
 8008c68:	d50a      	bpl.n	8008c80 <__pow5mult+0x84>
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f7ff ff1e 	bl	8008ab0 <__multiply>
 8008c74:	4639      	mov	r1, r7
 8008c76:	4680      	mov	r8, r0
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff fe47 	bl	800890c <_Bfree>
 8008c7e:	4647      	mov	r7, r8
 8008c80:	106d      	asrs	r5, r5, #1
 8008c82:	d00b      	beq.n	8008c9c <__pow5mult+0xa0>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	b938      	cbnz	r0, 8008c98 <__pow5mult+0x9c>
 8008c88:	4622      	mov	r2, r4
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f7ff ff0f 	bl	8008ab0 <__multiply>
 8008c92:	6020      	str	r0, [r4, #0]
 8008c94:	f8c0 9000 	str.w	r9, [r0]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	e7e4      	b.n	8008c66 <__pow5mult+0x6a>
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0800a300 	.word	0x0800a300
 8008ca8:	0800a125 	.word	0x0800a125
 8008cac:	0800a1ac 	.word	0x0800a1ac

08008cb0 <__lshift>:
 8008cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	6849      	ldr	r1, [r1, #4]
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	4691      	mov	r9, r2
 8008cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cc8:	f108 0601 	add.w	r6, r8, #1
 8008ccc:	42b3      	cmp	r3, r6
 8008cce:	db0b      	blt.n	8008ce8 <__lshift+0x38>
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f7ff fddb 	bl	800888c <_Balloc>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b948      	cbnz	r0, 8008cee <__lshift+0x3e>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	4b28      	ldr	r3, [pc, #160]	; (8008d80 <__lshift+0xd0>)
 8008cde:	4829      	ldr	r0, [pc, #164]	; (8008d84 <__lshift+0xd4>)
 8008ce0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ce4:	f000 fb76 	bl	80093d4 <__assert_func>
 8008ce8:	3101      	adds	r1, #1
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	e7ee      	b.n	8008ccc <__lshift+0x1c>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f100 0114 	add.w	r1, r0, #20
 8008cf4:	f100 0210 	add.w	r2, r0, #16
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	4553      	cmp	r3, sl
 8008cfc:	db33      	blt.n	8008d66 <__lshift+0xb6>
 8008cfe:	6920      	ldr	r0, [r4, #16]
 8008d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d04:	f104 0314 	add.w	r3, r4, #20
 8008d08:	f019 091f 	ands.w	r9, r9, #31
 8008d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d14:	d02b      	beq.n	8008d6e <__lshift+0xbe>
 8008d16:	f1c9 0e20 	rsb	lr, r9, #32
 8008d1a:	468a      	mov	sl, r1
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	fa00 f009 	lsl.w	r0, r0, r9
 8008d24:	4302      	orrs	r2, r0
 8008d26:	f84a 2b04 	str.w	r2, [sl], #4
 8008d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2e:	459c      	cmp	ip, r3
 8008d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d34:	d8f3      	bhi.n	8008d1e <__lshift+0x6e>
 8008d36:	ebac 0304 	sub.w	r3, ip, r4
 8008d3a:	3b15      	subs	r3, #21
 8008d3c:	f023 0303 	bic.w	r3, r3, #3
 8008d40:	3304      	adds	r3, #4
 8008d42:	f104 0015 	add.w	r0, r4, #21
 8008d46:	4584      	cmp	ip, r0
 8008d48:	bf38      	it	cc
 8008d4a:	2304      	movcc	r3, #4
 8008d4c:	50ca      	str	r2, [r1, r3]
 8008d4e:	b10a      	cbz	r2, 8008d54 <__lshift+0xa4>
 8008d50:	f108 0602 	add.w	r6, r8, #2
 8008d54:	3e01      	subs	r6, #1
 8008d56:	4638      	mov	r0, r7
 8008d58:	612e      	str	r6, [r5, #16]
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	f7ff fdd6 	bl	800890c <_Bfree>
 8008d60:	4628      	mov	r0, r5
 8008d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	e7c5      	b.n	8008cfa <__lshift+0x4a>
 8008d6e:	3904      	subs	r1, #4
 8008d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d78:	459c      	cmp	ip, r3
 8008d7a:	d8f9      	bhi.n	8008d70 <__lshift+0xc0>
 8008d7c:	e7ea      	b.n	8008d54 <__lshift+0xa4>
 8008d7e:	bf00      	nop
 8008d80:	0800a19b 	.word	0x0800a19b
 8008d84:	0800a1ac 	.word	0x0800a1ac

08008d88 <__mcmp>:
 8008d88:	b530      	push	{r4, r5, lr}
 8008d8a:	6902      	ldr	r2, [r0, #16]
 8008d8c:	690c      	ldr	r4, [r1, #16]
 8008d8e:	1b12      	subs	r2, r2, r4
 8008d90:	d10e      	bne.n	8008db0 <__mcmp+0x28>
 8008d92:	f100 0314 	add.w	r3, r0, #20
 8008d96:	3114      	adds	r1, #20
 8008d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008da8:	42a5      	cmp	r5, r4
 8008daa:	d003      	beq.n	8008db4 <__mcmp+0x2c>
 8008dac:	d305      	bcc.n	8008dba <__mcmp+0x32>
 8008dae:	2201      	movs	r2, #1
 8008db0:	4610      	mov	r0, r2
 8008db2:	bd30      	pop	{r4, r5, pc}
 8008db4:	4283      	cmp	r3, r0
 8008db6:	d3f3      	bcc.n	8008da0 <__mcmp+0x18>
 8008db8:	e7fa      	b.n	8008db0 <__mcmp+0x28>
 8008dba:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbe:	e7f7      	b.n	8008db0 <__mcmp+0x28>

08008dc0 <__mdiff>:
 8008dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4620      	mov	r0, r4
 8008dcc:	4617      	mov	r7, r2
 8008dce:	f7ff ffdb 	bl	8008d88 <__mcmp>
 8008dd2:	1e05      	subs	r5, r0, #0
 8008dd4:	d110      	bne.n	8008df8 <__mdiff+0x38>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff fd57 	bl	800888c <_Balloc>
 8008dde:	b930      	cbnz	r0, 8008dee <__mdiff+0x2e>
 8008de0:	4b39      	ldr	r3, [pc, #228]	; (8008ec8 <__mdiff+0x108>)
 8008de2:	4602      	mov	r2, r0
 8008de4:	f240 2132 	movw	r1, #562	; 0x232
 8008de8:	4838      	ldr	r0, [pc, #224]	; (8008ecc <__mdiff+0x10c>)
 8008dea:	f000 faf3 	bl	80093d4 <__assert_func>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df8:	bfa4      	itt	ge
 8008dfa:	463b      	movge	r3, r7
 8008dfc:	4627      	movge	r7, r4
 8008dfe:	4630      	mov	r0, r6
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	bfa6      	itte	ge
 8008e04:	461c      	movge	r4, r3
 8008e06:	2500      	movge	r5, #0
 8008e08:	2501      	movlt	r5, #1
 8008e0a:	f7ff fd3f 	bl	800888c <_Balloc>
 8008e0e:	b920      	cbnz	r0, 8008e1a <__mdiff+0x5a>
 8008e10:	4b2d      	ldr	r3, [pc, #180]	; (8008ec8 <__mdiff+0x108>)
 8008e12:	4602      	mov	r2, r0
 8008e14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e18:	e7e6      	b.n	8008de8 <__mdiff+0x28>
 8008e1a:	693e      	ldr	r6, [r7, #16]
 8008e1c:	60c5      	str	r5, [r0, #12]
 8008e1e:	6925      	ldr	r5, [r4, #16]
 8008e20:	f107 0114 	add.w	r1, r7, #20
 8008e24:	f104 0914 	add.w	r9, r4, #20
 8008e28:	f100 0e14 	add.w	lr, r0, #20
 8008e2c:	f107 0210 	add.w	r2, r7, #16
 8008e30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008e34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008e38:	46f2      	mov	sl, lr
 8008e3a:	2700      	movs	r7, #0
 8008e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e44:	fa1f f883 	uxth.w	r8, r3
 8008e48:	fa17 f78b 	uxtah	r7, r7, fp
 8008e4c:	0c1b      	lsrs	r3, r3, #16
 8008e4e:	eba7 0808 	sub.w	r8, r7, r8
 8008e52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e5a:	fa1f f888 	uxth.w	r8, r8
 8008e5e:	141f      	asrs	r7, r3, #16
 8008e60:	454d      	cmp	r5, r9
 8008e62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e66:	f84a 3b04 	str.w	r3, [sl], #4
 8008e6a:	d8e7      	bhi.n	8008e3c <__mdiff+0x7c>
 8008e6c:	1b2b      	subs	r3, r5, r4
 8008e6e:	3b15      	subs	r3, #21
 8008e70:	f023 0303 	bic.w	r3, r3, #3
 8008e74:	3304      	adds	r3, #4
 8008e76:	3415      	adds	r4, #21
 8008e78:	42a5      	cmp	r5, r4
 8008e7a:	bf38      	it	cc
 8008e7c:	2304      	movcc	r3, #4
 8008e7e:	4419      	add	r1, r3
 8008e80:	4473      	add	r3, lr
 8008e82:	469e      	mov	lr, r3
 8008e84:	460d      	mov	r5, r1
 8008e86:	4565      	cmp	r5, ip
 8008e88:	d30e      	bcc.n	8008ea8 <__mdiff+0xe8>
 8008e8a:	f10c 0203 	add.w	r2, ip, #3
 8008e8e:	1a52      	subs	r2, r2, r1
 8008e90:	f022 0203 	bic.w	r2, r2, #3
 8008e94:	3903      	subs	r1, #3
 8008e96:	458c      	cmp	ip, r1
 8008e98:	bf38      	it	cc
 8008e9a:	2200      	movcc	r2, #0
 8008e9c:	441a      	add	r2, r3
 8008e9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ea2:	b17b      	cbz	r3, 8008ec4 <__mdiff+0x104>
 8008ea4:	6106      	str	r6, [r0, #16]
 8008ea6:	e7a5      	b.n	8008df4 <__mdiff+0x34>
 8008ea8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008eac:	fa17 f488 	uxtah	r4, r7, r8
 8008eb0:	1422      	asrs	r2, r4, #16
 8008eb2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008eb6:	b2a4      	uxth	r4, r4
 8008eb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008ebc:	f84e 4b04 	str.w	r4, [lr], #4
 8008ec0:	1417      	asrs	r7, r2, #16
 8008ec2:	e7e0      	b.n	8008e86 <__mdiff+0xc6>
 8008ec4:	3e01      	subs	r6, #1
 8008ec6:	e7ea      	b.n	8008e9e <__mdiff+0xde>
 8008ec8:	0800a19b 	.word	0x0800a19b
 8008ecc:	0800a1ac 	.word	0x0800a1ac

08008ed0 <__d2b>:
 8008ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	4689      	mov	r9, r1
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	ec57 6b10 	vmov	r6, r7, d0
 8008edc:	4690      	mov	r8, r2
 8008ede:	f7ff fcd5 	bl	800888c <_Balloc>
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	b930      	cbnz	r0, 8008ef4 <__d2b+0x24>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	4b25      	ldr	r3, [pc, #148]	; (8008f80 <__d2b+0xb0>)
 8008eea:	4826      	ldr	r0, [pc, #152]	; (8008f84 <__d2b+0xb4>)
 8008eec:	f240 310a 	movw	r1, #778	; 0x30a
 8008ef0:	f000 fa70 	bl	80093d4 <__assert_func>
 8008ef4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008efc:	bb35      	cbnz	r5, 8008f4c <__d2b+0x7c>
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	d028      	beq.n	8008f56 <__d2b+0x86>
 8008f04:	4668      	mov	r0, sp
 8008f06:	9600      	str	r6, [sp, #0]
 8008f08:	f7ff fd8c 	bl	8008a24 <__lo0bits>
 8008f0c:	9900      	ldr	r1, [sp, #0]
 8008f0e:	b300      	cbz	r0, 8008f52 <__d2b+0x82>
 8008f10:	9a01      	ldr	r2, [sp, #4]
 8008f12:	f1c0 0320 	rsb	r3, r0, #32
 8008f16:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	40c2      	lsrs	r2, r0
 8008f1e:	6163      	str	r3, [r4, #20]
 8008f20:	9201      	str	r2, [sp, #4]
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	61a3      	str	r3, [r4, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf14      	ite	ne
 8008f2a:	2202      	movne	r2, #2
 8008f2c:	2201      	moveq	r2, #1
 8008f2e:	6122      	str	r2, [r4, #16]
 8008f30:	b1d5      	cbz	r5, 8008f68 <__d2b+0x98>
 8008f32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f36:	4405      	add	r5, r0
 8008f38:	f8c9 5000 	str.w	r5, [r9]
 8008f3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f40:	f8c8 0000 	str.w	r0, [r8]
 8008f44:	4620      	mov	r0, r4
 8008f46:	b003      	add	sp, #12
 8008f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f50:	e7d5      	b.n	8008efe <__d2b+0x2e>
 8008f52:	6161      	str	r1, [r4, #20]
 8008f54:	e7e5      	b.n	8008f22 <__d2b+0x52>
 8008f56:	a801      	add	r0, sp, #4
 8008f58:	f7ff fd64 	bl	8008a24 <__lo0bits>
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	6163      	str	r3, [r4, #20]
 8008f60:	2201      	movs	r2, #1
 8008f62:	6122      	str	r2, [r4, #16]
 8008f64:	3020      	adds	r0, #32
 8008f66:	e7e3      	b.n	8008f30 <__d2b+0x60>
 8008f68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f70:	f8c9 0000 	str.w	r0, [r9]
 8008f74:	6918      	ldr	r0, [r3, #16]
 8008f76:	f7ff fd35 	bl	80089e4 <__hi0bits>
 8008f7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f7e:	e7df      	b.n	8008f40 <__d2b+0x70>
 8008f80:	0800a19b 	.word	0x0800a19b
 8008f84:	0800a1ac 	.word	0x0800a1ac

08008f88 <_calloc_r>:
 8008f88:	b513      	push	{r0, r1, r4, lr}
 8008f8a:	434a      	muls	r2, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	9201      	str	r2, [sp, #4]
 8008f90:	f000 f85a 	bl	8009048 <_malloc_r>
 8008f94:	4604      	mov	r4, r0
 8008f96:	b118      	cbz	r0, 8008fa0 <_calloc_r+0x18>
 8008f98:	9a01      	ldr	r2, [sp, #4]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	f7fe f950 	bl	8007240 <memset>
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	b002      	add	sp, #8
 8008fa4:	bd10      	pop	{r4, pc}
	...

08008fa8 <_free_r>:
 8008fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008faa:	2900      	cmp	r1, #0
 8008fac:	d048      	beq.n	8009040 <_free_r+0x98>
 8008fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb2:	9001      	str	r0, [sp, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fba:	bfb8      	it	lt
 8008fbc:	18e4      	addlt	r4, r4, r3
 8008fbe:	f000 fa65 	bl	800948c <__malloc_lock>
 8008fc2:	4a20      	ldr	r2, [pc, #128]	; (8009044 <_free_r+0x9c>)
 8008fc4:	9801      	ldr	r0, [sp, #4]
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	4615      	mov	r5, r2
 8008fca:	b933      	cbnz	r3, 8008fda <_free_r+0x32>
 8008fcc:	6063      	str	r3, [r4, #4]
 8008fce:	6014      	str	r4, [r2, #0]
 8008fd0:	b003      	add	sp, #12
 8008fd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fd6:	f000 ba5f 	b.w	8009498 <__malloc_unlock>
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	d90b      	bls.n	8008ff6 <_free_r+0x4e>
 8008fde:	6821      	ldr	r1, [r4, #0]
 8008fe0:	1862      	adds	r2, r4, r1
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	bf04      	itt	eq
 8008fe6:	681a      	ldreq	r2, [r3, #0]
 8008fe8:	685b      	ldreq	r3, [r3, #4]
 8008fea:	6063      	str	r3, [r4, #4]
 8008fec:	bf04      	itt	eq
 8008fee:	1852      	addeq	r2, r2, r1
 8008ff0:	6022      	streq	r2, [r4, #0]
 8008ff2:	602c      	str	r4, [r5, #0]
 8008ff4:	e7ec      	b.n	8008fd0 <_free_r+0x28>
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	b10b      	cbz	r3, 8009000 <_free_r+0x58>
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	d9fa      	bls.n	8008ff6 <_free_r+0x4e>
 8009000:	6811      	ldr	r1, [r2, #0]
 8009002:	1855      	adds	r5, r2, r1
 8009004:	42a5      	cmp	r5, r4
 8009006:	d10b      	bne.n	8009020 <_free_r+0x78>
 8009008:	6824      	ldr	r4, [r4, #0]
 800900a:	4421      	add	r1, r4
 800900c:	1854      	adds	r4, r2, r1
 800900e:	42a3      	cmp	r3, r4
 8009010:	6011      	str	r1, [r2, #0]
 8009012:	d1dd      	bne.n	8008fd0 <_free_r+0x28>
 8009014:	681c      	ldr	r4, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	6053      	str	r3, [r2, #4]
 800901a:	4421      	add	r1, r4
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	e7d7      	b.n	8008fd0 <_free_r+0x28>
 8009020:	d902      	bls.n	8009028 <_free_r+0x80>
 8009022:	230c      	movs	r3, #12
 8009024:	6003      	str	r3, [r0, #0]
 8009026:	e7d3      	b.n	8008fd0 <_free_r+0x28>
 8009028:	6825      	ldr	r5, [r4, #0]
 800902a:	1961      	adds	r1, r4, r5
 800902c:	428b      	cmp	r3, r1
 800902e:	bf04      	itt	eq
 8009030:	6819      	ldreq	r1, [r3, #0]
 8009032:	685b      	ldreq	r3, [r3, #4]
 8009034:	6063      	str	r3, [r4, #4]
 8009036:	bf04      	itt	eq
 8009038:	1949      	addeq	r1, r1, r5
 800903a:	6021      	streq	r1, [r4, #0]
 800903c:	6054      	str	r4, [r2, #4]
 800903e:	e7c7      	b.n	8008fd0 <_free_r+0x28>
 8009040:	b003      	add	sp, #12
 8009042:	bd30      	pop	{r4, r5, pc}
 8009044:	20000210 	.word	0x20000210

08009048 <_malloc_r>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	1ccd      	adds	r5, r1, #3
 800904c:	f025 0503 	bic.w	r5, r5, #3
 8009050:	3508      	adds	r5, #8
 8009052:	2d0c      	cmp	r5, #12
 8009054:	bf38      	it	cc
 8009056:	250c      	movcc	r5, #12
 8009058:	2d00      	cmp	r5, #0
 800905a:	4606      	mov	r6, r0
 800905c:	db01      	blt.n	8009062 <_malloc_r+0x1a>
 800905e:	42a9      	cmp	r1, r5
 8009060:	d903      	bls.n	800906a <_malloc_r+0x22>
 8009062:	230c      	movs	r3, #12
 8009064:	6033      	str	r3, [r6, #0]
 8009066:	2000      	movs	r0, #0
 8009068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906a:	f000 fa0f 	bl	800948c <__malloc_lock>
 800906e:	4921      	ldr	r1, [pc, #132]	; (80090f4 <_malloc_r+0xac>)
 8009070:	680a      	ldr	r2, [r1, #0]
 8009072:	4614      	mov	r4, r2
 8009074:	b99c      	cbnz	r4, 800909e <_malloc_r+0x56>
 8009076:	4f20      	ldr	r7, [pc, #128]	; (80090f8 <_malloc_r+0xb0>)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	b923      	cbnz	r3, 8009086 <_malloc_r+0x3e>
 800907c:	4621      	mov	r1, r4
 800907e:	4630      	mov	r0, r6
 8009080:	f000 f998 	bl	80093b4 <_sbrk_r>
 8009084:	6038      	str	r0, [r7, #0]
 8009086:	4629      	mov	r1, r5
 8009088:	4630      	mov	r0, r6
 800908a:	f000 f993 	bl	80093b4 <_sbrk_r>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d123      	bne.n	80090da <_malloc_r+0x92>
 8009092:	230c      	movs	r3, #12
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f9fe 	bl	8009498 <__malloc_unlock>
 800909c:	e7e3      	b.n	8009066 <_malloc_r+0x1e>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	1b5b      	subs	r3, r3, r5
 80090a2:	d417      	bmi.n	80090d4 <_malloc_r+0x8c>
 80090a4:	2b0b      	cmp	r3, #11
 80090a6:	d903      	bls.n	80090b0 <_malloc_r+0x68>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	441c      	add	r4, r3
 80090ac:	6025      	str	r5, [r4, #0]
 80090ae:	e004      	b.n	80090ba <_malloc_r+0x72>
 80090b0:	6863      	ldr	r3, [r4, #4]
 80090b2:	42a2      	cmp	r2, r4
 80090b4:	bf0c      	ite	eq
 80090b6:	600b      	streq	r3, [r1, #0]
 80090b8:	6053      	strne	r3, [r2, #4]
 80090ba:	4630      	mov	r0, r6
 80090bc:	f000 f9ec 	bl	8009498 <__malloc_unlock>
 80090c0:	f104 000b 	add.w	r0, r4, #11
 80090c4:	1d23      	adds	r3, r4, #4
 80090c6:	f020 0007 	bic.w	r0, r0, #7
 80090ca:	1ac2      	subs	r2, r0, r3
 80090cc:	d0cc      	beq.n	8009068 <_malloc_r+0x20>
 80090ce:	1a1b      	subs	r3, r3, r0
 80090d0:	50a3      	str	r3, [r4, r2]
 80090d2:	e7c9      	b.n	8009068 <_malloc_r+0x20>
 80090d4:	4622      	mov	r2, r4
 80090d6:	6864      	ldr	r4, [r4, #4]
 80090d8:	e7cc      	b.n	8009074 <_malloc_r+0x2c>
 80090da:	1cc4      	adds	r4, r0, #3
 80090dc:	f024 0403 	bic.w	r4, r4, #3
 80090e0:	42a0      	cmp	r0, r4
 80090e2:	d0e3      	beq.n	80090ac <_malloc_r+0x64>
 80090e4:	1a21      	subs	r1, r4, r0
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 f964 	bl	80093b4 <_sbrk_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d1dd      	bne.n	80090ac <_malloc_r+0x64>
 80090f0:	e7cf      	b.n	8009092 <_malloc_r+0x4a>
 80090f2:	bf00      	nop
 80090f4:	20000210 	.word	0x20000210
 80090f8:	20000214 	.word	0x20000214

080090fc <__ssputs_r>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	688e      	ldr	r6, [r1, #8]
 8009102:	429e      	cmp	r6, r3
 8009104:	4682      	mov	sl, r0
 8009106:	460c      	mov	r4, r1
 8009108:	4690      	mov	r8, r2
 800910a:	461f      	mov	r7, r3
 800910c:	d838      	bhi.n	8009180 <__ssputs_r+0x84>
 800910e:	898a      	ldrh	r2, [r1, #12]
 8009110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009114:	d032      	beq.n	800917c <__ssputs_r+0x80>
 8009116:	6825      	ldr	r5, [r4, #0]
 8009118:	6909      	ldr	r1, [r1, #16]
 800911a:	eba5 0901 	sub.w	r9, r5, r1
 800911e:	6965      	ldr	r5, [r4, #20]
 8009120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009128:	3301      	adds	r3, #1
 800912a:	444b      	add	r3, r9
 800912c:	106d      	asrs	r5, r5, #1
 800912e:	429d      	cmp	r5, r3
 8009130:	bf38      	it	cc
 8009132:	461d      	movcc	r5, r3
 8009134:	0553      	lsls	r3, r2, #21
 8009136:	d531      	bpl.n	800919c <__ssputs_r+0xa0>
 8009138:	4629      	mov	r1, r5
 800913a:	f7ff ff85 	bl	8009048 <_malloc_r>
 800913e:	4606      	mov	r6, r0
 8009140:	b950      	cbnz	r0, 8009158 <__ssputs_r+0x5c>
 8009142:	230c      	movs	r3, #12
 8009144:	f8ca 3000 	str.w	r3, [sl]
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009158:	6921      	ldr	r1, [r4, #16]
 800915a:	464a      	mov	r2, r9
 800915c:	f7ff fb88 	bl	8008870 <memcpy>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	6126      	str	r6, [r4, #16]
 800916e:	6165      	str	r5, [r4, #20]
 8009170:	444e      	add	r6, r9
 8009172:	eba5 0509 	sub.w	r5, r5, r9
 8009176:	6026      	str	r6, [r4, #0]
 8009178:	60a5      	str	r5, [r4, #8]
 800917a:	463e      	mov	r6, r7
 800917c:	42be      	cmp	r6, r7
 800917e:	d900      	bls.n	8009182 <__ssputs_r+0x86>
 8009180:	463e      	mov	r6, r7
 8009182:	4632      	mov	r2, r6
 8009184:	6820      	ldr	r0, [r4, #0]
 8009186:	4641      	mov	r1, r8
 8009188:	f000 f966 	bl	8009458 <memmove>
 800918c:	68a3      	ldr	r3, [r4, #8]
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	1b9b      	subs	r3, r3, r6
 8009192:	4432      	add	r2, r6
 8009194:	60a3      	str	r3, [r4, #8]
 8009196:	6022      	str	r2, [r4, #0]
 8009198:	2000      	movs	r0, #0
 800919a:	e7db      	b.n	8009154 <__ssputs_r+0x58>
 800919c:	462a      	mov	r2, r5
 800919e:	f000 f981 	bl	80094a4 <_realloc_r>
 80091a2:	4606      	mov	r6, r0
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d1e1      	bne.n	800916c <__ssputs_r+0x70>
 80091a8:	6921      	ldr	r1, [r4, #16]
 80091aa:	4650      	mov	r0, sl
 80091ac:	f7ff fefc 	bl	8008fa8 <_free_r>
 80091b0:	e7c7      	b.n	8009142 <__ssputs_r+0x46>
	...

080091b4 <_svfiprintf_r>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	4698      	mov	r8, r3
 80091ba:	898b      	ldrh	r3, [r1, #12]
 80091bc:	061b      	lsls	r3, r3, #24
 80091be:	b09d      	sub	sp, #116	; 0x74
 80091c0:	4607      	mov	r7, r0
 80091c2:	460d      	mov	r5, r1
 80091c4:	4614      	mov	r4, r2
 80091c6:	d50e      	bpl.n	80091e6 <_svfiprintf_r+0x32>
 80091c8:	690b      	ldr	r3, [r1, #16]
 80091ca:	b963      	cbnz	r3, 80091e6 <_svfiprintf_r+0x32>
 80091cc:	2140      	movs	r1, #64	; 0x40
 80091ce:	f7ff ff3b 	bl	8009048 <_malloc_r>
 80091d2:	6028      	str	r0, [r5, #0]
 80091d4:	6128      	str	r0, [r5, #16]
 80091d6:	b920      	cbnz	r0, 80091e2 <_svfiprintf_r+0x2e>
 80091d8:	230c      	movs	r3, #12
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	e0d1      	b.n	8009386 <_svfiprintf_r+0x1d2>
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	616b      	str	r3, [r5, #20]
 80091e6:	2300      	movs	r3, #0
 80091e8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ea:	2320      	movs	r3, #32
 80091ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f4:	2330      	movs	r3, #48	; 0x30
 80091f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093a0 <_svfiprintf_r+0x1ec>
 80091fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091fe:	f04f 0901 	mov.w	r9, #1
 8009202:	4623      	mov	r3, r4
 8009204:	469a      	mov	sl, r3
 8009206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800920a:	b10a      	cbz	r2, 8009210 <_svfiprintf_r+0x5c>
 800920c:	2a25      	cmp	r2, #37	; 0x25
 800920e:	d1f9      	bne.n	8009204 <_svfiprintf_r+0x50>
 8009210:	ebba 0b04 	subs.w	fp, sl, r4
 8009214:	d00b      	beq.n	800922e <_svfiprintf_r+0x7a>
 8009216:	465b      	mov	r3, fp
 8009218:	4622      	mov	r2, r4
 800921a:	4629      	mov	r1, r5
 800921c:	4638      	mov	r0, r7
 800921e:	f7ff ff6d 	bl	80090fc <__ssputs_r>
 8009222:	3001      	adds	r0, #1
 8009224:	f000 80aa 	beq.w	800937c <_svfiprintf_r+0x1c8>
 8009228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800922a:	445a      	add	r2, fp
 800922c:	9209      	str	r2, [sp, #36]	; 0x24
 800922e:	f89a 3000 	ldrb.w	r3, [sl]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 80a2 	beq.w	800937c <_svfiprintf_r+0x1c8>
 8009238:	2300      	movs	r3, #0
 800923a:	f04f 32ff 	mov.w	r2, #4294967295
 800923e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009242:	f10a 0a01 	add.w	sl, sl, #1
 8009246:	9304      	str	r3, [sp, #16]
 8009248:	9307      	str	r3, [sp, #28]
 800924a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800924e:	931a      	str	r3, [sp, #104]	; 0x68
 8009250:	4654      	mov	r4, sl
 8009252:	2205      	movs	r2, #5
 8009254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009258:	4851      	ldr	r0, [pc, #324]	; (80093a0 <_svfiprintf_r+0x1ec>)
 800925a:	f7f6 ffe1 	bl	8000220 <memchr>
 800925e:	9a04      	ldr	r2, [sp, #16]
 8009260:	b9d8      	cbnz	r0, 800929a <_svfiprintf_r+0xe6>
 8009262:	06d0      	lsls	r0, r2, #27
 8009264:	bf44      	itt	mi
 8009266:	2320      	movmi	r3, #32
 8009268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800926c:	0711      	lsls	r1, r2, #28
 800926e:	bf44      	itt	mi
 8009270:	232b      	movmi	r3, #43	; 0x2b
 8009272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009276:	f89a 3000 	ldrb.w	r3, [sl]
 800927a:	2b2a      	cmp	r3, #42	; 0x2a
 800927c:	d015      	beq.n	80092aa <_svfiprintf_r+0xf6>
 800927e:	9a07      	ldr	r2, [sp, #28]
 8009280:	4654      	mov	r4, sl
 8009282:	2000      	movs	r0, #0
 8009284:	f04f 0c0a 	mov.w	ip, #10
 8009288:	4621      	mov	r1, r4
 800928a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800928e:	3b30      	subs	r3, #48	; 0x30
 8009290:	2b09      	cmp	r3, #9
 8009292:	d94e      	bls.n	8009332 <_svfiprintf_r+0x17e>
 8009294:	b1b0      	cbz	r0, 80092c4 <_svfiprintf_r+0x110>
 8009296:	9207      	str	r2, [sp, #28]
 8009298:	e014      	b.n	80092c4 <_svfiprintf_r+0x110>
 800929a:	eba0 0308 	sub.w	r3, r0, r8
 800929e:	fa09 f303 	lsl.w	r3, r9, r3
 80092a2:	4313      	orrs	r3, r2
 80092a4:	9304      	str	r3, [sp, #16]
 80092a6:	46a2      	mov	sl, r4
 80092a8:	e7d2      	b.n	8009250 <_svfiprintf_r+0x9c>
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	1d19      	adds	r1, r3, #4
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	9103      	str	r1, [sp, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	bfbb      	ittet	lt
 80092b6:	425b      	neglt	r3, r3
 80092b8:	f042 0202 	orrlt.w	r2, r2, #2
 80092bc:	9307      	strge	r3, [sp, #28]
 80092be:	9307      	strlt	r3, [sp, #28]
 80092c0:	bfb8      	it	lt
 80092c2:	9204      	strlt	r2, [sp, #16]
 80092c4:	7823      	ldrb	r3, [r4, #0]
 80092c6:	2b2e      	cmp	r3, #46	; 0x2e
 80092c8:	d10c      	bne.n	80092e4 <_svfiprintf_r+0x130>
 80092ca:	7863      	ldrb	r3, [r4, #1]
 80092cc:	2b2a      	cmp	r3, #42	; 0x2a
 80092ce:	d135      	bne.n	800933c <_svfiprintf_r+0x188>
 80092d0:	9b03      	ldr	r3, [sp, #12]
 80092d2:	1d1a      	adds	r2, r3, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	9203      	str	r2, [sp, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bfb8      	it	lt
 80092dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80092e0:	3402      	adds	r4, #2
 80092e2:	9305      	str	r3, [sp, #20]
 80092e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093b0 <_svfiprintf_r+0x1fc>
 80092e8:	7821      	ldrb	r1, [r4, #0]
 80092ea:	2203      	movs	r2, #3
 80092ec:	4650      	mov	r0, sl
 80092ee:	f7f6 ff97 	bl	8000220 <memchr>
 80092f2:	b140      	cbz	r0, 8009306 <_svfiprintf_r+0x152>
 80092f4:	2340      	movs	r3, #64	; 0x40
 80092f6:	eba0 000a 	sub.w	r0, r0, sl
 80092fa:	fa03 f000 	lsl.w	r0, r3, r0
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	4303      	orrs	r3, r0
 8009302:	3401      	adds	r4, #1
 8009304:	9304      	str	r3, [sp, #16]
 8009306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930a:	4826      	ldr	r0, [pc, #152]	; (80093a4 <_svfiprintf_r+0x1f0>)
 800930c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009310:	2206      	movs	r2, #6
 8009312:	f7f6 ff85 	bl	8000220 <memchr>
 8009316:	2800      	cmp	r0, #0
 8009318:	d038      	beq.n	800938c <_svfiprintf_r+0x1d8>
 800931a:	4b23      	ldr	r3, [pc, #140]	; (80093a8 <_svfiprintf_r+0x1f4>)
 800931c:	bb1b      	cbnz	r3, 8009366 <_svfiprintf_r+0x1b2>
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	3307      	adds	r3, #7
 8009322:	f023 0307 	bic.w	r3, r3, #7
 8009326:	3308      	adds	r3, #8
 8009328:	9303      	str	r3, [sp, #12]
 800932a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932c:	4433      	add	r3, r6
 800932e:	9309      	str	r3, [sp, #36]	; 0x24
 8009330:	e767      	b.n	8009202 <_svfiprintf_r+0x4e>
 8009332:	fb0c 3202 	mla	r2, ip, r2, r3
 8009336:	460c      	mov	r4, r1
 8009338:	2001      	movs	r0, #1
 800933a:	e7a5      	b.n	8009288 <_svfiprintf_r+0xd4>
 800933c:	2300      	movs	r3, #0
 800933e:	3401      	adds	r4, #1
 8009340:	9305      	str	r3, [sp, #20]
 8009342:	4619      	mov	r1, r3
 8009344:	f04f 0c0a 	mov.w	ip, #10
 8009348:	4620      	mov	r0, r4
 800934a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800934e:	3a30      	subs	r2, #48	; 0x30
 8009350:	2a09      	cmp	r2, #9
 8009352:	d903      	bls.n	800935c <_svfiprintf_r+0x1a8>
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0c5      	beq.n	80092e4 <_svfiprintf_r+0x130>
 8009358:	9105      	str	r1, [sp, #20]
 800935a:	e7c3      	b.n	80092e4 <_svfiprintf_r+0x130>
 800935c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009360:	4604      	mov	r4, r0
 8009362:	2301      	movs	r3, #1
 8009364:	e7f0      	b.n	8009348 <_svfiprintf_r+0x194>
 8009366:	ab03      	add	r3, sp, #12
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	462a      	mov	r2, r5
 800936c:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <_svfiprintf_r+0x1f8>)
 800936e:	a904      	add	r1, sp, #16
 8009370:	4638      	mov	r0, r7
 8009372:	f7fe f80d 	bl	8007390 <_printf_float>
 8009376:	1c42      	adds	r2, r0, #1
 8009378:	4606      	mov	r6, r0
 800937a:	d1d6      	bne.n	800932a <_svfiprintf_r+0x176>
 800937c:	89ab      	ldrh	r3, [r5, #12]
 800937e:	065b      	lsls	r3, r3, #25
 8009380:	f53f af2c 	bmi.w	80091dc <_svfiprintf_r+0x28>
 8009384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009386:	b01d      	add	sp, #116	; 0x74
 8009388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938c:	ab03      	add	r3, sp, #12
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	462a      	mov	r2, r5
 8009392:	4b06      	ldr	r3, [pc, #24]	; (80093ac <_svfiprintf_r+0x1f8>)
 8009394:	a904      	add	r1, sp, #16
 8009396:	4638      	mov	r0, r7
 8009398:	f7fe fa9e 	bl	80078d8 <_printf_i>
 800939c:	e7eb      	b.n	8009376 <_svfiprintf_r+0x1c2>
 800939e:	bf00      	nop
 80093a0:	0800a30c 	.word	0x0800a30c
 80093a4:	0800a316 	.word	0x0800a316
 80093a8:	08007391 	.word	0x08007391
 80093ac:	080090fd 	.word	0x080090fd
 80093b0:	0800a312 	.word	0x0800a312

080093b4 <_sbrk_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4d06      	ldr	r5, [pc, #24]	; (80093d0 <_sbrk_r+0x1c>)
 80093b8:	2300      	movs	r3, #0
 80093ba:	4604      	mov	r4, r0
 80093bc:	4608      	mov	r0, r1
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	f7f9 f946 	bl	8002650 <_sbrk>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d102      	bne.n	80093ce <_sbrk_r+0x1a>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	b103      	cbz	r3, 80093ce <_sbrk_r+0x1a>
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	200009dc 	.word	0x200009dc

080093d4 <__assert_func>:
 80093d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093d6:	4614      	mov	r4, r2
 80093d8:	461a      	mov	r2, r3
 80093da:	4b09      	ldr	r3, [pc, #36]	; (8009400 <__assert_func+0x2c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4605      	mov	r5, r0
 80093e0:	68d8      	ldr	r0, [r3, #12]
 80093e2:	b14c      	cbz	r4, 80093f8 <__assert_func+0x24>
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <__assert_func+0x30>)
 80093e6:	9100      	str	r1, [sp, #0]
 80093e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093ec:	4906      	ldr	r1, [pc, #24]	; (8009408 <__assert_func+0x34>)
 80093ee:	462b      	mov	r3, r5
 80093f0:	f000 f80e 	bl	8009410 <fiprintf>
 80093f4:	f000 faa4 	bl	8009940 <abort>
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <__assert_func+0x38>)
 80093fa:	461c      	mov	r4, r3
 80093fc:	e7f3      	b.n	80093e6 <__assert_func+0x12>
 80093fe:	bf00      	nop
 8009400:	2000000c 	.word	0x2000000c
 8009404:	0800a31d 	.word	0x0800a31d
 8009408:	0800a32a 	.word	0x0800a32a
 800940c:	0800a358 	.word	0x0800a358

08009410 <fiprintf>:
 8009410:	b40e      	push	{r1, r2, r3}
 8009412:	b503      	push	{r0, r1, lr}
 8009414:	4601      	mov	r1, r0
 8009416:	ab03      	add	r3, sp, #12
 8009418:	4805      	ldr	r0, [pc, #20]	; (8009430 <fiprintf+0x20>)
 800941a:	f853 2b04 	ldr.w	r2, [r3], #4
 800941e:	6800      	ldr	r0, [r0, #0]
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	f000 f88f 	bl	8009544 <_vfiprintf_r>
 8009426:	b002      	add	sp, #8
 8009428:	f85d eb04 	ldr.w	lr, [sp], #4
 800942c:	b003      	add	sp, #12
 800942e:	4770      	bx	lr
 8009430:	2000000c 	.word	0x2000000c

08009434 <__ascii_mbtowc>:
 8009434:	b082      	sub	sp, #8
 8009436:	b901      	cbnz	r1, 800943a <__ascii_mbtowc+0x6>
 8009438:	a901      	add	r1, sp, #4
 800943a:	b142      	cbz	r2, 800944e <__ascii_mbtowc+0x1a>
 800943c:	b14b      	cbz	r3, 8009452 <__ascii_mbtowc+0x1e>
 800943e:	7813      	ldrb	r3, [r2, #0]
 8009440:	600b      	str	r3, [r1, #0]
 8009442:	7812      	ldrb	r2, [r2, #0]
 8009444:	1e10      	subs	r0, r2, #0
 8009446:	bf18      	it	ne
 8009448:	2001      	movne	r0, #1
 800944a:	b002      	add	sp, #8
 800944c:	4770      	bx	lr
 800944e:	4610      	mov	r0, r2
 8009450:	e7fb      	b.n	800944a <__ascii_mbtowc+0x16>
 8009452:	f06f 0001 	mvn.w	r0, #1
 8009456:	e7f8      	b.n	800944a <__ascii_mbtowc+0x16>

08009458 <memmove>:
 8009458:	4288      	cmp	r0, r1
 800945a:	b510      	push	{r4, lr}
 800945c:	eb01 0402 	add.w	r4, r1, r2
 8009460:	d902      	bls.n	8009468 <memmove+0x10>
 8009462:	4284      	cmp	r4, r0
 8009464:	4623      	mov	r3, r4
 8009466:	d807      	bhi.n	8009478 <memmove+0x20>
 8009468:	1e43      	subs	r3, r0, #1
 800946a:	42a1      	cmp	r1, r4
 800946c:	d008      	beq.n	8009480 <memmove+0x28>
 800946e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009476:	e7f8      	b.n	800946a <memmove+0x12>
 8009478:	4402      	add	r2, r0
 800947a:	4601      	mov	r1, r0
 800947c:	428a      	cmp	r2, r1
 800947e:	d100      	bne.n	8009482 <memmove+0x2a>
 8009480:	bd10      	pop	{r4, pc}
 8009482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800948a:	e7f7      	b.n	800947c <memmove+0x24>

0800948c <__malloc_lock>:
 800948c:	4801      	ldr	r0, [pc, #4]	; (8009494 <__malloc_lock+0x8>)
 800948e:	f000 bc17 	b.w	8009cc0 <__retarget_lock_acquire_recursive>
 8009492:	bf00      	nop
 8009494:	200009e4 	.word	0x200009e4

08009498 <__malloc_unlock>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__malloc_unlock+0x8>)
 800949a:	f000 bc12 	b.w	8009cc2 <__retarget_lock_release_recursive>
 800949e:	bf00      	nop
 80094a0:	200009e4 	.word	0x200009e4

080094a4 <_realloc_r>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	4607      	mov	r7, r0
 80094a8:	4614      	mov	r4, r2
 80094aa:	460e      	mov	r6, r1
 80094ac:	b921      	cbnz	r1, 80094b8 <_realloc_r+0x14>
 80094ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094b2:	4611      	mov	r1, r2
 80094b4:	f7ff bdc8 	b.w	8009048 <_malloc_r>
 80094b8:	b922      	cbnz	r2, 80094c4 <_realloc_r+0x20>
 80094ba:	f7ff fd75 	bl	8008fa8 <_free_r>
 80094be:	4625      	mov	r5, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c4:	f000 fc62 	bl	8009d8c <_malloc_usable_size_r>
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d20f      	bcs.n	80094ec <_realloc_r+0x48>
 80094cc:	4621      	mov	r1, r4
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7ff fdba 	bl	8009048 <_malloc_r>
 80094d4:	4605      	mov	r5, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d0f2      	beq.n	80094c0 <_realloc_r+0x1c>
 80094da:	4631      	mov	r1, r6
 80094dc:	4622      	mov	r2, r4
 80094de:	f7ff f9c7 	bl	8008870 <memcpy>
 80094e2:	4631      	mov	r1, r6
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff fd5f 	bl	8008fa8 <_free_r>
 80094ea:	e7e9      	b.n	80094c0 <_realloc_r+0x1c>
 80094ec:	4635      	mov	r5, r6
 80094ee:	e7e7      	b.n	80094c0 <_realloc_r+0x1c>

080094f0 <__sfputc_r>:
 80094f0:	6893      	ldr	r3, [r2, #8]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	b410      	push	{r4}
 80094f8:	6093      	str	r3, [r2, #8]
 80094fa:	da08      	bge.n	800950e <__sfputc_r+0x1e>
 80094fc:	6994      	ldr	r4, [r2, #24]
 80094fe:	42a3      	cmp	r3, r4
 8009500:	db01      	blt.n	8009506 <__sfputc_r+0x16>
 8009502:	290a      	cmp	r1, #10
 8009504:	d103      	bne.n	800950e <__sfputc_r+0x1e>
 8009506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950a:	f000 b94b 	b.w	80097a4 <__swbuf_r>
 800950e:	6813      	ldr	r3, [r2, #0]
 8009510:	1c58      	adds	r0, r3, #1
 8009512:	6010      	str	r0, [r2, #0]
 8009514:	7019      	strb	r1, [r3, #0]
 8009516:	4608      	mov	r0, r1
 8009518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800951c:	4770      	bx	lr

0800951e <__sfputs_r>:
 800951e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009520:	4606      	mov	r6, r0
 8009522:	460f      	mov	r7, r1
 8009524:	4614      	mov	r4, r2
 8009526:	18d5      	adds	r5, r2, r3
 8009528:	42ac      	cmp	r4, r5
 800952a:	d101      	bne.n	8009530 <__sfputs_r+0x12>
 800952c:	2000      	movs	r0, #0
 800952e:	e007      	b.n	8009540 <__sfputs_r+0x22>
 8009530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009534:	463a      	mov	r2, r7
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff ffda 	bl	80094f0 <__sfputc_r>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d1f3      	bne.n	8009528 <__sfputs_r+0xa>
 8009540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009544 <_vfiprintf_r>:
 8009544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	460d      	mov	r5, r1
 800954a:	b09d      	sub	sp, #116	; 0x74
 800954c:	4614      	mov	r4, r2
 800954e:	4698      	mov	r8, r3
 8009550:	4606      	mov	r6, r0
 8009552:	b118      	cbz	r0, 800955c <_vfiprintf_r+0x18>
 8009554:	6983      	ldr	r3, [r0, #24]
 8009556:	b90b      	cbnz	r3, 800955c <_vfiprintf_r+0x18>
 8009558:	f000 fb14 	bl	8009b84 <__sinit>
 800955c:	4b89      	ldr	r3, [pc, #548]	; (8009784 <_vfiprintf_r+0x240>)
 800955e:	429d      	cmp	r5, r3
 8009560:	d11b      	bne.n	800959a <_vfiprintf_r+0x56>
 8009562:	6875      	ldr	r5, [r6, #4]
 8009564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009566:	07d9      	lsls	r1, r3, #31
 8009568:	d405      	bmi.n	8009576 <_vfiprintf_r+0x32>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	059a      	lsls	r2, r3, #22
 800956e:	d402      	bmi.n	8009576 <_vfiprintf_r+0x32>
 8009570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009572:	f000 fba5 	bl	8009cc0 <__retarget_lock_acquire_recursive>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	071b      	lsls	r3, r3, #28
 800957a:	d501      	bpl.n	8009580 <_vfiprintf_r+0x3c>
 800957c:	692b      	ldr	r3, [r5, #16]
 800957e:	b9eb      	cbnz	r3, 80095bc <_vfiprintf_r+0x78>
 8009580:	4629      	mov	r1, r5
 8009582:	4630      	mov	r0, r6
 8009584:	f000 f96e 	bl	8009864 <__swsetup_r>
 8009588:	b1c0      	cbz	r0, 80095bc <_vfiprintf_r+0x78>
 800958a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800958c:	07dc      	lsls	r4, r3, #31
 800958e:	d50e      	bpl.n	80095ae <_vfiprintf_r+0x6a>
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	b01d      	add	sp, #116	; 0x74
 8009596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	4b7b      	ldr	r3, [pc, #492]	; (8009788 <_vfiprintf_r+0x244>)
 800959c:	429d      	cmp	r5, r3
 800959e:	d101      	bne.n	80095a4 <_vfiprintf_r+0x60>
 80095a0:	68b5      	ldr	r5, [r6, #8]
 80095a2:	e7df      	b.n	8009564 <_vfiprintf_r+0x20>
 80095a4:	4b79      	ldr	r3, [pc, #484]	; (800978c <_vfiprintf_r+0x248>)
 80095a6:	429d      	cmp	r5, r3
 80095a8:	bf08      	it	eq
 80095aa:	68f5      	ldreq	r5, [r6, #12]
 80095ac:	e7da      	b.n	8009564 <_vfiprintf_r+0x20>
 80095ae:	89ab      	ldrh	r3, [r5, #12]
 80095b0:	0598      	lsls	r0, r3, #22
 80095b2:	d4ed      	bmi.n	8009590 <_vfiprintf_r+0x4c>
 80095b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b6:	f000 fb84 	bl	8009cc2 <__retarget_lock_release_recursive>
 80095ba:	e7e9      	b.n	8009590 <_vfiprintf_r+0x4c>
 80095bc:	2300      	movs	r3, #0
 80095be:	9309      	str	r3, [sp, #36]	; 0x24
 80095c0:	2320      	movs	r3, #32
 80095c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ca:	2330      	movs	r3, #48	; 0x30
 80095cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009790 <_vfiprintf_r+0x24c>
 80095d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d4:	f04f 0901 	mov.w	r9, #1
 80095d8:	4623      	mov	r3, r4
 80095da:	469a      	mov	sl, r3
 80095dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095e0:	b10a      	cbz	r2, 80095e6 <_vfiprintf_r+0xa2>
 80095e2:	2a25      	cmp	r2, #37	; 0x25
 80095e4:	d1f9      	bne.n	80095da <_vfiprintf_r+0x96>
 80095e6:	ebba 0b04 	subs.w	fp, sl, r4
 80095ea:	d00b      	beq.n	8009604 <_vfiprintf_r+0xc0>
 80095ec:	465b      	mov	r3, fp
 80095ee:	4622      	mov	r2, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7ff ff93 	bl	800951e <__sfputs_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	f000 80aa 	beq.w	8009752 <_vfiprintf_r+0x20e>
 80095fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009600:	445a      	add	r2, fp
 8009602:	9209      	str	r2, [sp, #36]	; 0x24
 8009604:	f89a 3000 	ldrb.w	r3, [sl]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80a2 	beq.w	8009752 <_vfiprintf_r+0x20e>
 800960e:	2300      	movs	r3, #0
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009618:	f10a 0a01 	add.w	sl, sl, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	9307      	str	r3, [sp, #28]
 8009620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009624:	931a      	str	r3, [sp, #104]	; 0x68
 8009626:	4654      	mov	r4, sl
 8009628:	2205      	movs	r2, #5
 800962a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962e:	4858      	ldr	r0, [pc, #352]	; (8009790 <_vfiprintf_r+0x24c>)
 8009630:	f7f6 fdf6 	bl	8000220 <memchr>
 8009634:	9a04      	ldr	r2, [sp, #16]
 8009636:	b9d8      	cbnz	r0, 8009670 <_vfiprintf_r+0x12c>
 8009638:	06d1      	lsls	r1, r2, #27
 800963a:	bf44      	itt	mi
 800963c:	2320      	movmi	r3, #32
 800963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009642:	0713      	lsls	r3, r2, #28
 8009644:	bf44      	itt	mi
 8009646:	232b      	movmi	r3, #43	; 0x2b
 8009648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964c:	f89a 3000 	ldrb.w	r3, [sl]
 8009650:	2b2a      	cmp	r3, #42	; 0x2a
 8009652:	d015      	beq.n	8009680 <_vfiprintf_r+0x13c>
 8009654:	9a07      	ldr	r2, [sp, #28]
 8009656:	4654      	mov	r4, sl
 8009658:	2000      	movs	r0, #0
 800965a:	f04f 0c0a 	mov.w	ip, #10
 800965e:	4621      	mov	r1, r4
 8009660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009664:	3b30      	subs	r3, #48	; 0x30
 8009666:	2b09      	cmp	r3, #9
 8009668:	d94e      	bls.n	8009708 <_vfiprintf_r+0x1c4>
 800966a:	b1b0      	cbz	r0, 800969a <_vfiprintf_r+0x156>
 800966c:	9207      	str	r2, [sp, #28]
 800966e:	e014      	b.n	800969a <_vfiprintf_r+0x156>
 8009670:	eba0 0308 	sub.w	r3, r0, r8
 8009674:	fa09 f303 	lsl.w	r3, r9, r3
 8009678:	4313      	orrs	r3, r2
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	46a2      	mov	sl, r4
 800967e:	e7d2      	b.n	8009626 <_vfiprintf_r+0xe2>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d19      	adds	r1, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9103      	str	r1, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfbb      	ittet	lt
 800968c:	425b      	neglt	r3, r3
 800968e:	f042 0202 	orrlt.w	r2, r2, #2
 8009692:	9307      	strge	r3, [sp, #28]
 8009694:	9307      	strlt	r3, [sp, #28]
 8009696:	bfb8      	it	lt
 8009698:	9204      	strlt	r2, [sp, #16]
 800969a:	7823      	ldrb	r3, [r4, #0]
 800969c:	2b2e      	cmp	r3, #46	; 0x2e
 800969e:	d10c      	bne.n	80096ba <_vfiprintf_r+0x176>
 80096a0:	7863      	ldrb	r3, [r4, #1]
 80096a2:	2b2a      	cmp	r3, #42	; 0x2a
 80096a4:	d135      	bne.n	8009712 <_vfiprintf_r+0x1ce>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9203      	str	r2, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfb8      	it	lt
 80096b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b6:	3402      	adds	r4, #2
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097a0 <_vfiprintf_r+0x25c>
 80096be:	7821      	ldrb	r1, [r4, #0]
 80096c0:	2203      	movs	r2, #3
 80096c2:	4650      	mov	r0, sl
 80096c4:	f7f6 fdac 	bl	8000220 <memchr>
 80096c8:	b140      	cbz	r0, 80096dc <_vfiprintf_r+0x198>
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	eba0 000a 	sub.w	r0, r0, sl
 80096d0:	fa03 f000 	lsl.w	r0, r3, r0
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	4303      	orrs	r3, r0
 80096d8:	3401      	adds	r4, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e0:	482c      	ldr	r0, [pc, #176]	; (8009794 <_vfiprintf_r+0x250>)
 80096e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e6:	2206      	movs	r2, #6
 80096e8:	f7f6 fd9a 	bl	8000220 <memchr>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d03f      	beq.n	8009770 <_vfiprintf_r+0x22c>
 80096f0:	4b29      	ldr	r3, [pc, #164]	; (8009798 <_vfiprintf_r+0x254>)
 80096f2:	bb1b      	cbnz	r3, 800973c <_vfiprintf_r+0x1f8>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	3307      	adds	r3, #7
 80096f8:	f023 0307 	bic.w	r3, r3, #7
 80096fc:	3308      	adds	r3, #8
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	443b      	add	r3, r7
 8009704:	9309      	str	r3, [sp, #36]	; 0x24
 8009706:	e767      	b.n	80095d8 <_vfiprintf_r+0x94>
 8009708:	fb0c 3202 	mla	r2, ip, r2, r3
 800970c:	460c      	mov	r4, r1
 800970e:	2001      	movs	r0, #1
 8009710:	e7a5      	b.n	800965e <_vfiprintf_r+0x11a>
 8009712:	2300      	movs	r3, #0
 8009714:	3401      	adds	r4, #1
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	4619      	mov	r1, r3
 800971a:	f04f 0c0a 	mov.w	ip, #10
 800971e:	4620      	mov	r0, r4
 8009720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009724:	3a30      	subs	r2, #48	; 0x30
 8009726:	2a09      	cmp	r2, #9
 8009728:	d903      	bls.n	8009732 <_vfiprintf_r+0x1ee>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0c5      	beq.n	80096ba <_vfiprintf_r+0x176>
 800972e:	9105      	str	r1, [sp, #20]
 8009730:	e7c3      	b.n	80096ba <_vfiprintf_r+0x176>
 8009732:	fb0c 2101 	mla	r1, ip, r1, r2
 8009736:	4604      	mov	r4, r0
 8009738:	2301      	movs	r3, #1
 800973a:	e7f0      	b.n	800971e <_vfiprintf_r+0x1da>
 800973c:	ab03      	add	r3, sp, #12
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	462a      	mov	r2, r5
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <_vfiprintf_r+0x258>)
 8009744:	a904      	add	r1, sp, #16
 8009746:	4630      	mov	r0, r6
 8009748:	f7fd fe22 	bl	8007390 <_printf_float>
 800974c:	4607      	mov	r7, r0
 800974e:	1c78      	adds	r0, r7, #1
 8009750:	d1d6      	bne.n	8009700 <_vfiprintf_r+0x1bc>
 8009752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009754:	07d9      	lsls	r1, r3, #31
 8009756:	d405      	bmi.n	8009764 <_vfiprintf_r+0x220>
 8009758:	89ab      	ldrh	r3, [r5, #12]
 800975a:	059a      	lsls	r2, r3, #22
 800975c:	d402      	bmi.n	8009764 <_vfiprintf_r+0x220>
 800975e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009760:	f000 faaf 	bl	8009cc2 <__retarget_lock_release_recursive>
 8009764:	89ab      	ldrh	r3, [r5, #12]
 8009766:	065b      	lsls	r3, r3, #25
 8009768:	f53f af12 	bmi.w	8009590 <_vfiprintf_r+0x4c>
 800976c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800976e:	e711      	b.n	8009594 <_vfiprintf_r+0x50>
 8009770:	ab03      	add	r3, sp, #12
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	462a      	mov	r2, r5
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <_vfiprintf_r+0x258>)
 8009778:	a904      	add	r1, sp, #16
 800977a:	4630      	mov	r0, r6
 800977c:	f7fe f8ac 	bl	80078d8 <_printf_i>
 8009780:	e7e4      	b.n	800974c <_vfiprintf_r+0x208>
 8009782:	bf00      	nop
 8009784:	0800a484 	.word	0x0800a484
 8009788:	0800a4a4 	.word	0x0800a4a4
 800978c:	0800a464 	.word	0x0800a464
 8009790:	0800a30c 	.word	0x0800a30c
 8009794:	0800a316 	.word	0x0800a316
 8009798:	08007391 	.word	0x08007391
 800979c:	0800951f 	.word	0x0800951f
 80097a0:	0800a312 	.word	0x0800a312

080097a4 <__swbuf_r>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	460e      	mov	r6, r1
 80097a8:	4614      	mov	r4, r2
 80097aa:	4605      	mov	r5, r0
 80097ac:	b118      	cbz	r0, 80097b6 <__swbuf_r+0x12>
 80097ae:	6983      	ldr	r3, [r0, #24]
 80097b0:	b90b      	cbnz	r3, 80097b6 <__swbuf_r+0x12>
 80097b2:	f000 f9e7 	bl	8009b84 <__sinit>
 80097b6:	4b21      	ldr	r3, [pc, #132]	; (800983c <__swbuf_r+0x98>)
 80097b8:	429c      	cmp	r4, r3
 80097ba:	d12b      	bne.n	8009814 <__swbuf_r+0x70>
 80097bc:	686c      	ldr	r4, [r5, #4]
 80097be:	69a3      	ldr	r3, [r4, #24]
 80097c0:	60a3      	str	r3, [r4, #8]
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	071a      	lsls	r2, r3, #28
 80097c6:	d52f      	bpl.n	8009828 <__swbuf_r+0x84>
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	b36b      	cbz	r3, 8009828 <__swbuf_r+0x84>
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	6820      	ldr	r0, [r4, #0]
 80097d0:	1ac0      	subs	r0, r0, r3
 80097d2:	6963      	ldr	r3, [r4, #20]
 80097d4:	b2f6      	uxtb	r6, r6
 80097d6:	4283      	cmp	r3, r0
 80097d8:	4637      	mov	r7, r6
 80097da:	dc04      	bgt.n	80097e6 <__swbuf_r+0x42>
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 f93c 	bl	8009a5c <_fflush_r>
 80097e4:	bb30      	cbnz	r0, 8009834 <__swbuf_r+0x90>
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	6022      	str	r2, [r4, #0]
 80097f2:	701e      	strb	r6, [r3, #0]
 80097f4:	6963      	ldr	r3, [r4, #20]
 80097f6:	3001      	adds	r0, #1
 80097f8:	4283      	cmp	r3, r0
 80097fa:	d004      	beq.n	8009806 <__swbuf_r+0x62>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	07db      	lsls	r3, r3, #31
 8009800:	d506      	bpl.n	8009810 <__swbuf_r+0x6c>
 8009802:	2e0a      	cmp	r6, #10
 8009804:	d104      	bne.n	8009810 <__swbuf_r+0x6c>
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f000 f927 	bl	8009a5c <_fflush_r>
 800980e:	b988      	cbnz	r0, 8009834 <__swbuf_r+0x90>
 8009810:	4638      	mov	r0, r7
 8009812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009814:	4b0a      	ldr	r3, [pc, #40]	; (8009840 <__swbuf_r+0x9c>)
 8009816:	429c      	cmp	r4, r3
 8009818:	d101      	bne.n	800981e <__swbuf_r+0x7a>
 800981a:	68ac      	ldr	r4, [r5, #8]
 800981c:	e7cf      	b.n	80097be <__swbuf_r+0x1a>
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <__swbuf_r+0xa0>)
 8009820:	429c      	cmp	r4, r3
 8009822:	bf08      	it	eq
 8009824:	68ec      	ldreq	r4, [r5, #12]
 8009826:	e7ca      	b.n	80097be <__swbuf_r+0x1a>
 8009828:	4621      	mov	r1, r4
 800982a:	4628      	mov	r0, r5
 800982c:	f000 f81a 	bl	8009864 <__swsetup_r>
 8009830:	2800      	cmp	r0, #0
 8009832:	d0cb      	beq.n	80097cc <__swbuf_r+0x28>
 8009834:	f04f 37ff 	mov.w	r7, #4294967295
 8009838:	e7ea      	b.n	8009810 <__swbuf_r+0x6c>
 800983a:	bf00      	nop
 800983c:	0800a484 	.word	0x0800a484
 8009840:	0800a4a4 	.word	0x0800a4a4
 8009844:	0800a464 	.word	0x0800a464

08009848 <__ascii_wctomb>:
 8009848:	b149      	cbz	r1, 800985e <__ascii_wctomb+0x16>
 800984a:	2aff      	cmp	r2, #255	; 0xff
 800984c:	bf85      	ittet	hi
 800984e:	238a      	movhi	r3, #138	; 0x8a
 8009850:	6003      	strhi	r3, [r0, #0]
 8009852:	700a      	strbls	r2, [r1, #0]
 8009854:	f04f 30ff 	movhi.w	r0, #4294967295
 8009858:	bf98      	it	ls
 800985a:	2001      	movls	r0, #1
 800985c:	4770      	bx	lr
 800985e:	4608      	mov	r0, r1
 8009860:	4770      	bx	lr
	...

08009864 <__swsetup_r>:
 8009864:	4b32      	ldr	r3, [pc, #200]	; (8009930 <__swsetup_r+0xcc>)
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	681d      	ldr	r5, [r3, #0]
 800986a:	4606      	mov	r6, r0
 800986c:	460c      	mov	r4, r1
 800986e:	b125      	cbz	r5, 800987a <__swsetup_r+0x16>
 8009870:	69ab      	ldr	r3, [r5, #24]
 8009872:	b913      	cbnz	r3, 800987a <__swsetup_r+0x16>
 8009874:	4628      	mov	r0, r5
 8009876:	f000 f985 	bl	8009b84 <__sinit>
 800987a:	4b2e      	ldr	r3, [pc, #184]	; (8009934 <__swsetup_r+0xd0>)
 800987c:	429c      	cmp	r4, r3
 800987e:	d10f      	bne.n	80098a0 <__swsetup_r+0x3c>
 8009880:	686c      	ldr	r4, [r5, #4]
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009888:	0719      	lsls	r1, r3, #28
 800988a:	d42c      	bmi.n	80098e6 <__swsetup_r+0x82>
 800988c:	06dd      	lsls	r5, r3, #27
 800988e:	d411      	bmi.n	80098b4 <__swsetup_r+0x50>
 8009890:	2309      	movs	r3, #9
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	f04f 30ff 	mov.w	r0, #4294967295
 800989e:	e03e      	b.n	800991e <__swsetup_r+0xba>
 80098a0:	4b25      	ldr	r3, [pc, #148]	; (8009938 <__swsetup_r+0xd4>)
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d101      	bne.n	80098aa <__swsetup_r+0x46>
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	e7eb      	b.n	8009882 <__swsetup_r+0x1e>
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <__swsetup_r+0xd8>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	bf08      	it	eq
 80098b0:	68ec      	ldreq	r4, [r5, #12]
 80098b2:	e7e6      	b.n	8009882 <__swsetup_r+0x1e>
 80098b4:	0758      	lsls	r0, r3, #29
 80098b6:	d512      	bpl.n	80098de <__swsetup_r+0x7a>
 80098b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ba:	b141      	cbz	r1, 80098ce <__swsetup_r+0x6a>
 80098bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098c0:	4299      	cmp	r1, r3
 80098c2:	d002      	beq.n	80098ca <__swsetup_r+0x66>
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff fb6f 	bl	8008fa8 <_free_r>
 80098ca:	2300      	movs	r3, #0
 80098cc:	6363      	str	r3, [r4, #52]	; 0x34
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	2300      	movs	r3, #0
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f043 0308 	orr.w	r3, r3, #8
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	b94b      	cbnz	r3, 80098fe <__swsetup_r+0x9a>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098f4:	d003      	beq.n	80098fe <__swsetup_r+0x9a>
 80098f6:	4621      	mov	r1, r4
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 fa07 	bl	8009d0c <__smakebuf_r>
 80098fe:	89a0      	ldrh	r0, [r4, #12]
 8009900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009904:	f010 0301 	ands.w	r3, r0, #1
 8009908:	d00a      	beq.n	8009920 <__swsetup_r+0xbc>
 800990a:	2300      	movs	r3, #0
 800990c:	60a3      	str	r3, [r4, #8]
 800990e:	6963      	ldr	r3, [r4, #20]
 8009910:	425b      	negs	r3, r3
 8009912:	61a3      	str	r3, [r4, #24]
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	b943      	cbnz	r3, 800992a <__swsetup_r+0xc6>
 8009918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800991c:	d1ba      	bne.n	8009894 <__swsetup_r+0x30>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	0781      	lsls	r1, r0, #30
 8009922:	bf58      	it	pl
 8009924:	6963      	ldrpl	r3, [r4, #20]
 8009926:	60a3      	str	r3, [r4, #8]
 8009928:	e7f4      	b.n	8009914 <__swsetup_r+0xb0>
 800992a:	2000      	movs	r0, #0
 800992c:	e7f7      	b.n	800991e <__swsetup_r+0xba>
 800992e:	bf00      	nop
 8009930:	2000000c 	.word	0x2000000c
 8009934:	0800a484 	.word	0x0800a484
 8009938:	0800a4a4 	.word	0x0800a4a4
 800993c:	0800a464 	.word	0x0800a464

08009940 <abort>:
 8009940:	b508      	push	{r3, lr}
 8009942:	2006      	movs	r0, #6
 8009944:	f000 fa52 	bl	8009dec <raise>
 8009948:	2001      	movs	r0, #1
 800994a:	f7f8 fe09 	bl	8002560 <_exit>
	...

08009950 <__sflush_r>:
 8009950:	898a      	ldrh	r2, [r1, #12]
 8009952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009956:	4605      	mov	r5, r0
 8009958:	0710      	lsls	r0, r2, #28
 800995a:	460c      	mov	r4, r1
 800995c:	d458      	bmi.n	8009a10 <__sflush_r+0xc0>
 800995e:	684b      	ldr	r3, [r1, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	dc05      	bgt.n	8009970 <__sflush_r+0x20>
 8009964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009966:	2b00      	cmp	r3, #0
 8009968:	dc02      	bgt.n	8009970 <__sflush_r+0x20>
 800996a:	2000      	movs	r0, #0
 800996c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009972:	2e00      	cmp	r6, #0
 8009974:	d0f9      	beq.n	800996a <__sflush_r+0x1a>
 8009976:	2300      	movs	r3, #0
 8009978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800997c:	682f      	ldr	r7, [r5, #0]
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	d032      	beq.n	80099e8 <__sflush_r+0x98>
 8009982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	075a      	lsls	r2, r3, #29
 8009988:	d505      	bpl.n	8009996 <__sflush_r+0x46>
 800998a:	6863      	ldr	r3, [r4, #4]
 800998c:	1ac0      	subs	r0, r0, r3
 800998e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009990:	b10b      	cbz	r3, 8009996 <__sflush_r+0x46>
 8009992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009994:	1ac0      	subs	r0, r0, r3
 8009996:	2300      	movs	r3, #0
 8009998:	4602      	mov	r2, r0
 800999a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800999c:	6a21      	ldr	r1, [r4, #32]
 800999e:	4628      	mov	r0, r5
 80099a0:	47b0      	blx	r6
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	d106      	bne.n	80099b6 <__sflush_r+0x66>
 80099a8:	6829      	ldr	r1, [r5, #0]
 80099aa:	291d      	cmp	r1, #29
 80099ac:	d82c      	bhi.n	8009a08 <__sflush_r+0xb8>
 80099ae:	4a2a      	ldr	r2, [pc, #168]	; (8009a58 <__sflush_r+0x108>)
 80099b0:	40ca      	lsrs	r2, r1
 80099b2:	07d6      	lsls	r6, r2, #31
 80099b4:	d528      	bpl.n	8009a08 <__sflush_r+0xb8>
 80099b6:	2200      	movs	r2, #0
 80099b8:	6062      	str	r2, [r4, #4]
 80099ba:	04d9      	lsls	r1, r3, #19
 80099bc:	6922      	ldr	r2, [r4, #16]
 80099be:	6022      	str	r2, [r4, #0]
 80099c0:	d504      	bpl.n	80099cc <__sflush_r+0x7c>
 80099c2:	1c42      	adds	r2, r0, #1
 80099c4:	d101      	bne.n	80099ca <__sflush_r+0x7a>
 80099c6:	682b      	ldr	r3, [r5, #0]
 80099c8:	b903      	cbnz	r3, 80099cc <__sflush_r+0x7c>
 80099ca:	6560      	str	r0, [r4, #84]	; 0x54
 80099cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ce:	602f      	str	r7, [r5, #0]
 80099d0:	2900      	cmp	r1, #0
 80099d2:	d0ca      	beq.n	800996a <__sflush_r+0x1a>
 80099d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099d8:	4299      	cmp	r1, r3
 80099da:	d002      	beq.n	80099e2 <__sflush_r+0x92>
 80099dc:	4628      	mov	r0, r5
 80099de:	f7ff fae3 	bl	8008fa8 <_free_r>
 80099e2:	2000      	movs	r0, #0
 80099e4:	6360      	str	r0, [r4, #52]	; 0x34
 80099e6:	e7c1      	b.n	800996c <__sflush_r+0x1c>
 80099e8:	6a21      	ldr	r1, [r4, #32]
 80099ea:	2301      	movs	r3, #1
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b0      	blx	r6
 80099f0:	1c41      	adds	r1, r0, #1
 80099f2:	d1c7      	bne.n	8009984 <__sflush_r+0x34>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0c4      	beq.n	8009984 <__sflush_r+0x34>
 80099fa:	2b1d      	cmp	r3, #29
 80099fc:	d001      	beq.n	8009a02 <__sflush_r+0xb2>
 80099fe:	2b16      	cmp	r3, #22
 8009a00:	d101      	bne.n	8009a06 <__sflush_r+0xb6>
 8009a02:	602f      	str	r7, [r5, #0]
 8009a04:	e7b1      	b.n	800996a <__sflush_r+0x1a>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	e7ad      	b.n	800996c <__sflush_r+0x1c>
 8009a10:	690f      	ldr	r7, [r1, #16]
 8009a12:	2f00      	cmp	r7, #0
 8009a14:	d0a9      	beq.n	800996a <__sflush_r+0x1a>
 8009a16:	0793      	lsls	r3, r2, #30
 8009a18:	680e      	ldr	r6, [r1, #0]
 8009a1a:	bf08      	it	eq
 8009a1c:	694b      	ldreq	r3, [r1, #20]
 8009a1e:	600f      	str	r7, [r1, #0]
 8009a20:	bf18      	it	ne
 8009a22:	2300      	movne	r3, #0
 8009a24:	eba6 0807 	sub.w	r8, r6, r7
 8009a28:	608b      	str	r3, [r1, #8]
 8009a2a:	f1b8 0f00 	cmp.w	r8, #0
 8009a2e:	dd9c      	ble.n	800996a <__sflush_r+0x1a>
 8009a30:	6a21      	ldr	r1, [r4, #32]
 8009a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a34:	4643      	mov	r3, r8
 8009a36:	463a      	mov	r2, r7
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b0      	blx	r6
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	dc06      	bgt.n	8009a4e <__sflush_r+0xfe>
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e78e      	b.n	800996c <__sflush_r+0x1c>
 8009a4e:	4407      	add	r7, r0
 8009a50:	eba8 0800 	sub.w	r8, r8, r0
 8009a54:	e7e9      	b.n	8009a2a <__sflush_r+0xda>
 8009a56:	bf00      	nop
 8009a58:	20400001 	.word	0x20400001

08009a5c <_fflush_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	690b      	ldr	r3, [r1, #16]
 8009a60:	4605      	mov	r5, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	b913      	cbnz	r3, 8009a6c <_fflush_r+0x10>
 8009a66:	2500      	movs	r5, #0
 8009a68:	4628      	mov	r0, r5
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	b118      	cbz	r0, 8009a76 <_fflush_r+0x1a>
 8009a6e:	6983      	ldr	r3, [r0, #24]
 8009a70:	b90b      	cbnz	r3, 8009a76 <_fflush_r+0x1a>
 8009a72:	f000 f887 	bl	8009b84 <__sinit>
 8009a76:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <_fflush_r+0x6c>)
 8009a78:	429c      	cmp	r4, r3
 8009a7a:	d11b      	bne.n	8009ab4 <_fflush_r+0x58>
 8009a7c:	686c      	ldr	r4, [r5, #4]
 8009a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0ef      	beq.n	8009a66 <_fflush_r+0xa>
 8009a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a88:	07d0      	lsls	r0, r2, #31
 8009a8a:	d404      	bmi.n	8009a96 <_fflush_r+0x3a>
 8009a8c:	0599      	lsls	r1, r3, #22
 8009a8e:	d402      	bmi.n	8009a96 <_fflush_r+0x3a>
 8009a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a92:	f000 f915 	bl	8009cc0 <__retarget_lock_acquire_recursive>
 8009a96:	4628      	mov	r0, r5
 8009a98:	4621      	mov	r1, r4
 8009a9a:	f7ff ff59 	bl	8009950 <__sflush_r>
 8009a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aa0:	07da      	lsls	r2, r3, #31
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	d4e0      	bmi.n	8009a68 <_fflush_r+0xc>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	059b      	lsls	r3, r3, #22
 8009aaa:	d4dd      	bmi.n	8009a68 <_fflush_r+0xc>
 8009aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aae:	f000 f908 	bl	8009cc2 <__retarget_lock_release_recursive>
 8009ab2:	e7d9      	b.n	8009a68 <_fflush_r+0xc>
 8009ab4:	4b05      	ldr	r3, [pc, #20]	; (8009acc <_fflush_r+0x70>)
 8009ab6:	429c      	cmp	r4, r3
 8009ab8:	d101      	bne.n	8009abe <_fflush_r+0x62>
 8009aba:	68ac      	ldr	r4, [r5, #8]
 8009abc:	e7df      	b.n	8009a7e <_fflush_r+0x22>
 8009abe:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <_fflush_r+0x74>)
 8009ac0:	429c      	cmp	r4, r3
 8009ac2:	bf08      	it	eq
 8009ac4:	68ec      	ldreq	r4, [r5, #12]
 8009ac6:	e7da      	b.n	8009a7e <_fflush_r+0x22>
 8009ac8:	0800a484 	.word	0x0800a484
 8009acc:	0800a4a4 	.word	0x0800a4a4
 8009ad0:	0800a464 	.word	0x0800a464

08009ad4 <std>:
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	4604      	mov	r4, r0
 8009ada:	e9c0 3300 	strd	r3, r3, [r0]
 8009ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ae2:	6083      	str	r3, [r0, #8]
 8009ae4:	8181      	strh	r1, [r0, #12]
 8009ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ae8:	81c2      	strh	r2, [r0, #14]
 8009aea:	6183      	str	r3, [r0, #24]
 8009aec:	4619      	mov	r1, r3
 8009aee:	2208      	movs	r2, #8
 8009af0:	305c      	adds	r0, #92	; 0x5c
 8009af2:	f7fd fba5 	bl	8007240 <memset>
 8009af6:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <std+0x38>)
 8009af8:	6263      	str	r3, [r4, #36]	; 0x24
 8009afa:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <std+0x3c>)
 8009afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009afe:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <std+0x40>)
 8009b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <std+0x44>)
 8009b04:	6224      	str	r4, [r4, #32]
 8009b06:	6323      	str	r3, [r4, #48]	; 0x30
 8009b08:	bd10      	pop	{r4, pc}
 8009b0a:	bf00      	nop
 8009b0c:	08009e25 	.word	0x08009e25
 8009b10:	08009e47 	.word	0x08009e47
 8009b14:	08009e7f 	.word	0x08009e7f
 8009b18:	08009ea3 	.word	0x08009ea3

08009b1c <_cleanup_r>:
 8009b1c:	4901      	ldr	r1, [pc, #4]	; (8009b24 <_cleanup_r+0x8>)
 8009b1e:	f000 b8af 	b.w	8009c80 <_fwalk_reent>
 8009b22:	bf00      	nop
 8009b24:	08009a5d 	.word	0x08009a5d

08009b28 <__sfmoreglue>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	1e4a      	subs	r2, r1, #1
 8009b2c:	2568      	movs	r5, #104	; 0x68
 8009b2e:	4355      	muls	r5, r2
 8009b30:	460e      	mov	r6, r1
 8009b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b36:	f7ff fa87 	bl	8009048 <_malloc_r>
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	b140      	cbz	r0, 8009b50 <__sfmoreglue+0x28>
 8009b3e:	2100      	movs	r1, #0
 8009b40:	e9c0 1600 	strd	r1, r6, [r0]
 8009b44:	300c      	adds	r0, #12
 8009b46:	60a0      	str	r0, [r4, #8]
 8009b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b4c:	f7fd fb78 	bl	8007240 <memset>
 8009b50:	4620      	mov	r0, r4
 8009b52:	bd70      	pop	{r4, r5, r6, pc}

08009b54 <__sfp_lock_acquire>:
 8009b54:	4801      	ldr	r0, [pc, #4]	; (8009b5c <__sfp_lock_acquire+0x8>)
 8009b56:	f000 b8b3 	b.w	8009cc0 <__retarget_lock_acquire_recursive>
 8009b5a:	bf00      	nop
 8009b5c:	200009e8 	.word	0x200009e8

08009b60 <__sfp_lock_release>:
 8009b60:	4801      	ldr	r0, [pc, #4]	; (8009b68 <__sfp_lock_release+0x8>)
 8009b62:	f000 b8ae 	b.w	8009cc2 <__retarget_lock_release_recursive>
 8009b66:	bf00      	nop
 8009b68:	200009e8 	.word	0x200009e8

08009b6c <__sinit_lock_acquire>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	; (8009b74 <__sinit_lock_acquire+0x8>)
 8009b6e:	f000 b8a7 	b.w	8009cc0 <__retarget_lock_acquire_recursive>
 8009b72:	bf00      	nop
 8009b74:	200009e3 	.word	0x200009e3

08009b78 <__sinit_lock_release>:
 8009b78:	4801      	ldr	r0, [pc, #4]	; (8009b80 <__sinit_lock_release+0x8>)
 8009b7a:	f000 b8a2 	b.w	8009cc2 <__retarget_lock_release_recursive>
 8009b7e:	bf00      	nop
 8009b80:	200009e3 	.word	0x200009e3

08009b84 <__sinit>:
 8009b84:	b510      	push	{r4, lr}
 8009b86:	4604      	mov	r4, r0
 8009b88:	f7ff fff0 	bl	8009b6c <__sinit_lock_acquire>
 8009b8c:	69a3      	ldr	r3, [r4, #24]
 8009b8e:	b11b      	cbz	r3, 8009b98 <__sinit+0x14>
 8009b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b94:	f7ff bff0 	b.w	8009b78 <__sinit_lock_release>
 8009b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <__sinit+0x68>)
 8009ba0:	4a13      	ldr	r2, [pc, #76]	; (8009bf0 <__sinit+0x6c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	bf04      	itt	eq
 8009baa:	2301      	moveq	r3, #1
 8009bac:	61a3      	streq	r3, [r4, #24]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 f820 	bl	8009bf4 <__sfp>
 8009bb4:	6060      	str	r0, [r4, #4]
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 f81c 	bl	8009bf4 <__sfp>
 8009bbc:	60a0      	str	r0, [r4, #8]
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 f818 	bl	8009bf4 <__sfp>
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	60e0      	str	r0, [r4, #12]
 8009bc8:	2104      	movs	r1, #4
 8009bca:	6860      	ldr	r0, [r4, #4]
 8009bcc:	f7ff ff82 	bl	8009ad4 <std>
 8009bd0:	68a0      	ldr	r0, [r4, #8]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	2109      	movs	r1, #9
 8009bd6:	f7ff ff7d 	bl	8009ad4 <std>
 8009bda:	68e0      	ldr	r0, [r4, #12]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	2112      	movs	r1, #18
 8009be0:	f7ff ff78 	bl	8009ad4 <std>
 8009be4:	2301      	movs	r3, #1
 8009be6:	61a3      	str	r3, [r4, #24]
 8009be8:	e7d2      	b.n	8009b90 <__sinit+0xc>
 8009bea:	bf00      	nop
 8009bec:	0800a0e0 	.word	0x0800a0e0
 8009bf0:	08009b1d 	.word	0x08009b1d

08009bf4 <__sfp>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	4607      	mov	r7, r0
 8009bf8:	f7ff ffac 	bl	8009b54 <__sfp_lock_acquire>
 8009bfc:	4b1e      	ldr	r3, [pc, #120]	; (8009c78 <__sfp+0x84>)
 8009bfe:	681e      	ldr	r6, [r3, #0]
 8009c00:	69b3      	ldr	r3, [r6, #24]
 8009c02:	b913      	cbnz	r3, 8009c0a <__sfp+0x16>
 8009c04:	4630      	mov	r0, r6
 8009c06:	f7ff ffbd 	bl	8009b84 <__sinit>
 8009c0a:	3648      	adds	r6, #72	; 0x48
 8009c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	d503      	bpl.n	8009c1c <__sfp+0x28>
 8009c14:	6833      	ldr	r3, [r6, #0]
 8009c16:	b30b      	cbz	r3, 8009c5c <__sfp+0x68>
 8009c18:	6836      	ldr	r6, [r6, #0]
 8009c1a:	e7f7      	b.n	8009c0c <__sfp+0x18>
 8009c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c20:	b9d5      	cbnz	r5, 8009c58 <__sfp+0x64>
 8009c22:	4b16      	ldr	r3, [pc, #88]	; (8009c7c <__sfp+0x88>)
 8009c24:	60e3      	str	r3, [r4, #12]
 8009c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c2c:	f000 f847 	bl	8009cbe <__retarget_lock_init_recursive>
 8009c30:	f7ff ff96 	bl	8009b60 <__sfp_lock_release>
 8009c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c3c:	6025      	str	r5, [r4, #0]
 8009c3e:	61a5      	str	r5, [r4, #24]
 8009c40:	2208      	movs	r2, #8
 8009c42:	4629      	mov	r1, r5
 8009c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c48:	f7fd fafa 	bl	8007240 <memset>
 8009c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c54:	4620      	mov	r0, r4
 8009c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c58:	3468      	adds	r4, #104	; 0x68
 8009c5a:	e7d9      	b.n	8009c10 <__sfp+0x1c>
 8009c5c:	2104      	movs	r1, #4
 8009c5e:	4638      	mov	r0, r7
 8009c60:	f7ff ff62 	bl	8009b28 <__sfmoreglue>
 8009c64:	4604      	mov	r4, r0
 8009c66:	6030      	str	r0, [r6, #0]
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d1d5      	bne.n	8009c18 <__sfp+0x24>
 8009c6c:	f7ff ff78 	bl	8009b60 <__sfp_lock_release>
 8009c70:	230c      	movs	r3, #12
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	e7ee      	b.n	8009c54 <__sfp+0x60>
 8009c76:	bf00      	nop
 8009c78:	0800a0e0 	.word	0x0800a0e0
 8009c7c:	ffff0001 	.word	0xffff0001

08009c80 <_fwalk_reent>:
 8009c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c84:	4606      	mov	r6, r0
 8009c86:	4688      	mov	r8, r1
 8009c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c8c:	2700      	movs	r7, #0
 8009c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c92:	f1b9 0901 	subs.w	r9, r9, #1
 8009c96:	d505      	bpl.n	8009ca4 <_fwalk_reent+0x24>
 8009c98:	6824      	ldr	r4, [r4, #0]
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	d1f7      	bne.n	8009c8e <_fwalk_reent+0xe>
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ca4:	89ab      	ldrh	r3, [r5, #12]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d907      	bls.n	8009cba <_fwalk_reent+0x3a>
 8009caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	d003      	beq.n	8009cba <_fwalk_reent+0x3a>
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	47c0      	blx	r8
 8009cb8:	4307      	orrs	r7, r0
 8009cba:	3568      	adds	r5, #104	; 0x68
 8009cbc:	e7e9      	b.n	8009c92 <_fwalk_reent+0x12>

08009cbe <__retarget_lock_init_recursive>:
 8009cbe:	4770      	bx	lr

08009cc0 <__retarget_lock_acquire_recursive>:
 8009cc0:	4770      	bx	lr

08009cc2 <__retarget_lock_release_recursive>:
 8009cc2:	4770      	bx	lr

08009cc4 <__swhatbuf_r>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	460e      	mov	r6, r1
 8009cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	b096      	sub	sp, #88	; 0x58
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	461d      	mov	r5, r3
 8009cd4:	da07      	bge.n	8009ce6 <__swhatbuf_r+0x22>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	89b3      	ldrh	r3, [r6, #12]
 8009cdc:	061a      	lsls	r2, r3, #24
 8009cde:	d410      	bmi.n	8009d02 <__swhatbuf_r+0x3e>
 8009ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ce4:	e00e      	b.n	8009d04 <__swhatbuf_r+0x40>
 8009ce6:	466a      	mov	r2, sp
 8009ce8:	f000 f902 	bl	8009ef0 <_fstat_r>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	dbf2      	blt.n	8009cd6 <__swhatbuf_r+0x12>
 8009cf0:	9a01      	ldr	r2, [sp, #4]
 8009cf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cfa:	425a      	negs	r2, r3
 8009cfc:	415a      	adcs	r2, r3
 8009cfe:	602a      	str	r2, [r5, #0]
 8009d00:	e7ee      	b.n	8009ce0 <__swhatbuf_r+0x1c>
 8009d02:	2340      	movs	r3, #64	; 0x40
 8009d04:	2000      	movs	r0, #0
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	b016      	add	sp, #88	; 0x58
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}

08009d0c <__smakebuf_r>:
 8009d0c:	898b      	ldrh	r3, [r1, #12]
 8009d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d10:	079d      	lsls	r5, r3, #30
 8009d12:	4606      	mov	r6, r0
 8009d14:	460c      	mov	r4, r1
 8009d16:	d507      	bpl.n	8009d28 <__smakebuf_r+0x1c>
 8009d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	2301      	movs	r3, #1
 8009d22:	6163      	str	r3, [r4, #20]
 8009d24:	b002      	add	sp, #8
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	ab01      	add	r3, sp, #4
 8009d2a:	466a      	mov	r2, sp
 8009d2c:	f7ff ffca 	bl	8009cc4 <__swhatbuf_r>
 8009d30:	9900      	ldr	r1, [sp, #0]
 8009d32:	4605      	mov	r5, r0
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff f987 	bl	8009048 <_malloc_r>
 8009d3a:	b948      	cbnz	r0, 8009d50 <__smakebuf_r+0x44>
 8009d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d40:	059a      	lsls	r2, r3, #22
 8009d42:	d4ef      	bmi.n	8009d24 <__smakebuf_r+0x18>
 8009d44:	f023 0303 	bic.w	r3, r3, #3
 8009d48:	f043 0302 	orr.w	r3, r3, #2
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	e7e3      	b.n	8009d18 <__smakebuf_r+0xc>
 8009d50:	4b0d      	ldr	r3, [pc, #52]	; (8009d88 <__smakebuf_r+0x7c>)
 8009d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	6020      	str	r0, [r4, #0]
 8009d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	9b00      	ldr	r3, [sp, #0]
 8009d60:	6163      	str	r3, [r4, #20]
 8009d62:	9b01      	ldr	r3, [sp, #4]
 8009d64:	6120      	str	r0, [r4, #16]
 8009d66:	b15b      	cbz	r3, 8009d80 <__smakebuf_r+0x74>
 8009d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f000 f8d1 	bl	8009f14 <_isatty_r>
 8009d72:	b128      	cbz	r0, 8009d80 <__smakebuf_r+0x74>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	f043 0301 	orr.w	r3, r3, #1
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	89a0      	ldrh	r0, [r4, #12]
 8009d82:	4305      	orrs	r5, r0
 8009d84:	81a5      	strh	r5, [r4, #12]
 8009d86:	e7cd      	b.n	8009d24 <__smakebuf_r+0x18>
 8009d88:	08009b1d 	.word	0x08009b1d

08009d8c <_malloc_usable_size_r>:
 8009d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d90:	1f18      	subs	r0, r3, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bfbc      	itt	lt
 8009d96:	580b      	ldrlt	r3, [r1, r0]
 8009d98:	18c0      	addlt	r0, r0, r3
 8009d9a:	4770      	bx	lr

08009d9c <_raise_r>:
 8009d9c:	291f      	cmp	r1, #31
 8009d9e:	b538      	push	{r3, r4, r5, lr}
 8009da0:	4604      	mov	r4, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	d904      	bls.n	8009db0 <_raise_r+0x14>
 8009da6:	2316      	movs	r3, #22
 8009da8:	6003      	str	r3, [r0, #0]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009db2:	b112      	cbz	r2, 8009dba <_raise_r+0x1e>
 8009db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009db8:	b94b      	cbnz	r3, 8009dce <_raise_r+0x32>
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 f830 	bl	8009e20 <_getpid_r>
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dca:	f000 b817 	b.w	8009dfc <_kill_r>
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d00a      	beq.n	8009de8 <_raise_r+0x4c>
 8009dd2:	1c59      	adds	r1, r3, #1
 8009dd4:	d103      	bne.n	8009dde <_raise_r+0x42>
 8009dd6:	2316      	movs	r3, #22
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	2001      	movs	r0, #1
 8009ddc:	e7e7      	b.n	8009dae <_raise_r+0x12>
 8009dde:	2400      	movs	r4, #0
 8009de0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009de4:	4628      	mov	r0, r5
 8009de6:	4798      	blx	r3
 8009de8:	2000      	movs	r0, #0
 8009dea:	e7e0      	b.n	8009dae <_raise_r+0x12>

08009dec <raise>:
 8009dec:	4b02      	ldr	r3, [pc, #8]	; (8009df8 <raise+0xc>)
 8009dee:	4601      	mov	r1, r0
 8009df0:	6818      	ldr	r0, [r3, #0]
 8009df2:	f7ff bfd3 	b.w	8009d9c <_raise_r>
 8009df6:	bf00      	nop
 8009df8:	2000000c 	.word	0x2000000c

08009dfc <_kill_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	; (8009e1c <_kill_r+0x20>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	4611      	mov	r1, r2
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	f7f8 fb99 	bl	8002540 <_kill>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d102      	bne.n	8009e18 <_kill_r+0x1c>
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	b103      	cbz	r3, 8009e18 <_kill_r+0x1c>
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	bd38      	pop	{r3, r4, r5, pc}
 8009e1a:	bf00      	nop
 8009e1c:	200009dc 	.word	0x200009dc

08009e20 <_getpid_r>:
 8009e20:	f7f8 bb86 	b.w	8002530 <_getpid>

08009e24 <__sread>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	460c      	mov	r4, r1
 8009e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2c:	f000 f894 	bl	8009f58 <_read_r>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	bfab      	itete	ge
 8009e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e36:	89a3      	ldrhlt	r3, [r4, #12]
 8009e38:	181b      	addge	r3, r3, r0
 8009e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e3e:	bfac      	ite	ge
 8009e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e42:	81a3      	strhlt	r3, [r4, #12]
 8009e44:	bd10      	pop	{r4, pc}

08009e46 <__swrite>:
 8009e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4a:	461f      	mov	r7, r3
 8009e4c:	898b      	ldrh	r3, [r1, #12]
 8009e4e:	05db      	lsls	r3, r3, #23
 8009e50:	4605      	mov	r5, r0
 8009e52:	460c      	mov	r4, r1
 8009e54:	4616      	mov	r6, r2
 8009e56:	d505      	bpl.n	8009e64 <__swrite+0x1e>
 8009e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f000 f868 	bl	8009f34 <_lseek_r>
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e6e:	81a3      	strh	r3, [r4, #12]
 8009e70:	4632      	mov	r2, r6
 8009e72:	463b      	mov	r3, r7
 8009e74:	4628      	mov	r0, r5
 8009e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7a:	f000 b817 	b.w	8009eac <_write_r>

08009e7e <__sseek>:
 8009e7e:	b510      	push	{r4, lr}
 8009e80:	460c      	mov	r4, r1
 8009e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e86:	f000 f855 	bl	8009f34 <_lseek_r>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	bf15      	itete	ne
 8009e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e9a:	81a3      	strheq	r3, [r4, #12]
 8009e9c:	bf18      	it	ne
 8009e9e:	81a3      	strhne	r3, [r4, #12]
 8009ea0:	bd10      	pop	{r4, pc}

08009ea2 <__sclose>:
 8009ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea6:	f000 b813 	b.w	8009ed0 <_close_r>
	...

08009eac <_write_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d07      	ldr	r5, [pc, #28]	; (8009ecc <_write_r+0x20>)
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	602a      	str	r2, [r5, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f7f8 fb77 	bl	80025ae <_write>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_write_r+0x1e>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_write_r+0x1e>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	200009dc 	.word	0x200009dc

08009ed0 <_close_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d06      	ldr	r5, [pc, #24]	; (8009eec <_close_r+0x1c>)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	f7f8 fb83 	bl	80025e6 <_close>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_close_r+0x1a>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_close_r+0x1a>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	200009dc 	.word	0x200009dc

08009ef0 <_fstat_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d07      	ldr	r5, [pc, #28]	; (8009f10 <_fstat_r+0x20>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	4611      	mov	r1, r2
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f7f8 fb7e 	bl	80025fe <_fstat>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d102      	bne.n	8009f0c <_fstat_r+0x1c>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	b103      	cbz	r3, 8009f0c <_fstat_r+0x1c>
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
 8009f0e:	bf00      	nop
 8009f10:	200009dc 	.word	0x200009dc

08009f14 <_isatty_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d06      	ldr	r5, [pc, #24]	; (8009f30 <_isatty_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f8 fb7d 	bl	800261e <_isatty>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_isatty_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_isatty_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	200009dc 	.word	0x200009dc

08009f34 <_lseek_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	; (8009f54 <_lseek_r+0x20>)
 8009f38:	4604      	mov	r4, r0
 8009f3a:	4608      	mov	r0, r1
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	602a      	str	r2, [r5, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	f7f8 fb76 	bl	8002634 <_lseek>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_lseek_r+0x1e>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_lseek_r+0x1e>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	200009dc 	.word	0x200009dc

08009f58 <_read_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	; (8009f78 <_read_r+0x20>)
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	4608      	mov	r0, r1
 8009f60:	4611      	mov	r1, r2
 8009f62:	2200      	movs	r2, #0
 8009f64:	602a      	str	r2, [r5, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f7f8 fb04 	bl	8002574 <_read>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_read_r+0x1e>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_read_r+0x1e>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	200009dc 	.word	0x200009dc

08009f7c <_init>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr

08009f88 <_fini>:
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8a:	bf00      	nop
 8009f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8e:	bc08      	pop	{r3}
 8009f90:	469e      	mov	lr, r3
 8009f92:	4770      	bx	lr
