
f303-flash_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003940  08003940  00013940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a70  08003a70  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a70  08003a70  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a70  08003a70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  08003ae8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003ae8  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009621  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3b  00000000  00000000  000296c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201d9  00000000  00000000  0002c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0ee  00000000  00000000  0004c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0c0d  00000000  00000000  000565b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001171c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a0  00000000  00000000  00117218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003928 	.word	0x08003928

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003928 	.word	0x08003928

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <myprintf>:
extern void    FLASH_PageErase(uint32_t PageAddress);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <myprintf+0x44>)
 80002a8:	f002 ff22 	bl	80030f0 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <myprintf+0x44>)
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	4905      	ldr	r1, [pc, #20]	; (80002d4 <myprintf+0x44>)
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <myprintf+0x48>)
 80002c2:	f002 fae5 	bl	8002890 <HAL_UART_Transmit>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	2000008c 	.word	0x2000008c
 80002d8:	200001a4 	.word	0x200001a4

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b087      	sub	sp, #28
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fa6f 	bl	80007c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f823 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f8a3 	bl	8000434 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ee:	f000 f871 	bl	80003d4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint64_t numbers[2] = {1, '6'};
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <main+0x48>)
 80002f4:	463c      	mov	r4, r7
 80002f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t address =  0x0807F7FCU;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <main+0x4c>)
 80002fe:	617b      	str	r3, [r7, #20]
//	  myprintf("Could not write\n");
//  }
//
//  HAL_FLASH_Lock();
  // TODO test page transitions
  MRT_WriteDataToFlash(FLASH_TYPEPROGRAM_WORD, address, numbers, 2);
 8000300:	463a      	mov	r2, r7
 8000302:	2302      	movs	r3, #2
 8000304:	6979      	ldr	r1, [r7, #20]
 8000306:	2002      	movs	r0, #2
 8000308:	f000 f8e2 	bl	80004d0 <MRT_WriteDataToFlash>


  uint32_t *readData = (uint32_t *) address;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	613b      	str	r3, [r7, #16]

  myprintf("Yey %i and yey %i\n", *(readData), *(readData+1));
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	6819      	ldr	r1, [r3, #0]
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	3304      	adds	r3, #4
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <main+0x50>)
 800031e:	f7ff ffb7 	bl	8000290 <myprintf>

  while (1)
 8000322:	e7fe      	b.n	8000322 <main+0x46>
 8000324:	08003958 	.word	0x08003958
 8000328:	0807f7fc 	.word	0x0807f7fc
 800032c:	08003940 	.word	0x08003940

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b0a6      	sub	sp, #152	; 0x98
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fea2 	bl	8003088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2258      	movs	r2, #88	; 0x58
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fe94 	bl	8003088 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	2302      	movs	r3, #2
 8000362:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2310      	movs	r3, #16
 800036a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800036e:	2300      	movs	r3, #0
 8000370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fed1 	bl	8001120 <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000384:	f000 f86e 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038c:	2300      	movs	r3, #0
 800038e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fdd2 	bl	8001f4c <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ae:	f000 f859 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003b2:	2302      	movs	r3, #2
 80003b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fffb 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003c8:	f000 f84c 	bl	8000464 <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3798      	adds	r7, #152	; 0x98
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <MX_USART2_UART_Init+0x5c>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000418:	f002 f9ec 	bl	80027f4 <HAL_UART_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000422:	f000 f81f 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200001a4 	.word	0x200001a4
 8000430:	40004400 	.word	0x40004400

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_GPIO_Init+0x2c>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <MX_GPIO_Init+0x2c>)
 8000440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_GPIO_Init+0x2c>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <MRT_EraseFlashPage>:
#include "mrt-flash.h"

HAL_StatusTypeDef MRT_EraseFlashPage(uint32_t address) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000478:	f000 fb60 	bl	8000b3c <HAL_FLASH_Unlock>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d004      	beq.n	800048c <MRT_EraseFlashPage+0x1c>
		myprintf("Flash unlock failed, could not erase page\n");
 8000482:	4810      	ldr	r0, [pc, #64]	; (80004c4 <MRT_EraseFlashPage+0x54>)
 8000484:	f7ff ff04 	bl	8000290 <myprintf>
		return HAL_ERROR;
 8000488:	2301      	movs	r3, #1
 800048a:	e016      	b.n	80004ba <MRT_EraseFlashPage+0x4a>
	}
	uint32_t reg = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <MRT_EraseFlashPage+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = address;
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <MRT_EraseFlashPage+0x58>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages = 1;
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <MRT_EraseFlashPage+0x58>)
 800049e:	2201      	movs	r2, #1
 80004a0:	609a      	str	r2, [r3, #8]
	HAL_FLASHEx_Erase(&EraseInitStruct, &reg);
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	4619      	mov	r1, r3
 80004a8:	4807      	ldr	r0, [pc, #28]	; (80004c8 <MRT_EraseFlashPage+0x58>)
 80004aa:	f000 fc0b 	bl	8000cc4 <HAL_FLASHEx_Erase>

	if ((reg | 0xFFFFFFFF) == 0xFFFFFFFF) {
		myprintf("Page erase uwu.\n");
 80004ae:	4807      	ldr	r0, [pc, #28]	; (80004cc <MRT_EraseFlashPage+0x5c>)
 80004b0:	f7ff feee 	bl	8000290 <myprintf>
	} else {
		myprintf("Page erase failed.\n");
		return HAL_ERROR;
	}
	HAL_FLASH_Lock();
 80004b4:	f000 fb68 	bl	8000b88 <HAL_FLASH_Lock>
	return HAL_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	08003968 	.word	0x08003968
 80004c8:	2000018c 	.word	0x2000018c
 80004cc:	08003994 	.word	0x08003994

080004d0 <MRT_WriteDataToFlash>:

/*
 * Does not append, use with precaution.
 */
HAL_StatusTypeDef MRT_WriteDataToFlash(uint32_t TypeProgram, uint32_t address,
		uint64_t *data, uint32_t nbBytesToWrite) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]
	 myprintf("Flash unlock failed, could not erase page\n");
	 return HAL_ERROR;
	 }
	 */

	uint32_t currAddress = address;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	61fb      	str	r3, [r7, #28]
	uint32_t currIncrement = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]

	switch (TypeProgram) {
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d009      	beq.n	8000500 <MRT_WriteDataToFlash+0x30>
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	d81c      	bhi.n	800052c <MRT_WriteDataToFlash+0x5c>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d009      	beq.n	800050c <MRT_WriteDataToFlash+0x3c>
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	d003      	beq.n	8000506 <MRT_WriteDataToFlash+0x36>
 80004fe:	e015      	b.n	800052c <MRT_WriteDataToFlash+0x5c>
	case FLASH_TYPEPROGRAM_DOUBLEWORD:
		currIncrement += 4;
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	3304      	adds	r3, #4
 8000504:	61bb      	str	r3, [r7, #24]
	case FLASH_TYPEPROGRAM_WORD:
		currIncrement += 2;
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	3302      	adds	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
	case FLASH_TYPEPROGRAM_HALFWORD:
		currIncrement += 2;
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	3302      	adds	r3, #2
 8000510:	61bb      	str	r3, [r7, #24]
		break;
 8000512:	bf00      	nop
		myprintf("Invalid TypeProgram\n");
		return HAL_ERROR;
		break;
	}

	if (MRT_EraseFlashPage(currAddress - ((currAddress - 0x08000000U) % 0x800U)) != HAL_OK) {
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800051a:	f023 0307 	bic.w	r3, r3, #7
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ffa6 	bl	8000470 <MRT_EraseFlashPage>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d007      	beq.n	800053a <MRT_WriteDataToFlash+0x6a>
 800052a:	e004      	b.n	8000536 <MRT_WriteDataToFlash+0x66>
		myprintf("Invalid TypeProgram\n");
 800052c:	4821      	ldr	r0, [pc, #132]	; (80005b4 <MRT_WriteDataToFlash+0xe4>)
 800052e:	f7ff feaf 	bl	8000290 <myprintf>
		return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	e03a      	b.n	80005ac <MRT_WriteDataToFlash+0xdc>
		return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e038      	b.n	80005ac <MRT_WriteDataToFlash+0xdc>
	}

	for (int i = 0; i < nbBytesToWrite; i++) {
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e031      	b.n	80005a4 <MRT_WriteDataToFlash+0xd4>
		if (HAL_FLASH_Unlock() != HAL_OK) {
 8000540:	f000 fafc 	bl	8000b3c <HAL_FLASH_Unlock>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d004      	beq.n	8000554 <MRT_WriteDataToFlash+0x84>
			myprintf("Flash unlock failed, could not write to memory\n");
 800054a:	481b      	ldr	r0, [pc, #108]	; (80005b8 <MRT_WriteDataToFlash+0xe8>)
 800054c:	f7ff fea0 	bl	8000290 <myprintf>
			return HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	e02b      	b.n	80005ac <MRT_WriteDataToFlash+0xdc>
		}

		if (HAL_FLASH_Program(TypeProgram, currAddress, data[i]) != HAL_OK) {
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000560:	69f9      	ldr	r1, [r7, #28]
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f000 fa7a 	bl	8000a5c <HAL_FLASH_Program>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d004      	beq.n	8000578 <MRT_WriteDataToFlash+0xa8>
			myprintf("Could not write\n");
 800056e:	4813      	ldr	r0, [pc, #76]	; (80005bc <MRT_WriteDataToFlash+0xec>)
 8000570:	f7ff fe8e 	bl	8000290 <myprintf>
			return HAL_ERROR;
 8000574:	2301      	movs	r3, #1
 8000576:	e019      	b.n	80005ac <MRT_WriteDataToFlash+0xdc>
		}
		HAL_FLASH_Lock();
 8000578:	f000 fb06 	bl	8000b88 <HAL_FLASH_Lock>

		currAddress += currIncrement;
 800057c:	69fa      	ldr	r2, [r7, #28]
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	4413      	add	r3, r2
 8000582:	61fb      	str	r3, [r7, #28]

		if ((currAddress - 0x08000000U) % 0x800U == 0) {
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800058a:	2b00      	cmp	r3, #0
 800058c:	d107      	bne.n	800059e <MRT_WriteDataToFlash+0xce>

			if (MRT_EraseFlashPage(currAddress) != HAL_OK) {
 800058e:	69f8      	ldr	r0, [r7, #28]
 8000590:	f7ff ff6e 	bl	8000470 <MRT_EraseFlashPage>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MRT_WriteDataToFlash+0xce>
				return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e006      	b.n	80005ac <MRT_WriteDataToFlash+0xdc>
	for (int i = 0; i < nbBytesToWrite; i++) {
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d8c9      	bhi.n	8000540 <MRT_WriteDataToFlash+0x70>
			}
		}
	}

}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	080039a8 	.word	0x080039a8
 80005b8:	080039c0 	.word	0x080039c0
 80005bc:	080039f0 	.word	0x080039f0

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x44>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x44>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_MspInit+0x44>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <HAL_MspInit+0x44>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_MspInit+0x44>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <HAL_UART_MspInit+0x7c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d128      	bne.n	800067c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_UART_MspInit+0x80>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800065a:	230c      	movs	r3, #12
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800066a:	2307      	movs	r3, #7
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fbc8 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>

0800069e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>

080006aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f8ba 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f002 fc90 	bl	8003034 <__errno>
 8000714:	4603      	mov	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <_sbrk+0x64>)
 8000730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20010000 	.word	0x20010000
 8000740:	00000400 	.word	0x00000400
 8000744:	20000198 	.word	0x20000198
 8000748:	20000260 	.word	0x20000260

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ffd7 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f002 fc4f 	bl	8003040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a2:	f7ff fd9b 	bl	80002dc <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b4:	08003a78 	.word	0x08003a78
  ldr r2, =_sbss
 80007b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007bc:	20000260 	.word	0x20000260

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_Init+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <HAL_Init+0x28>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f90d 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f808 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff feee 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x54>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x58>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	fbb3 f3f1 	udiv	r3, r3, r1
 800080a:	fbb2 f3f3 	udiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f917 	bl	8000a42 <HAL_SYSTICK_Config>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00e      	b.n	800083c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d80a      	bhi.n	800083a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 f8ed 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <HAL_InitTick+0x5c>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	20000008 	.word	0x20000008
 800084c:	20000004 	.word	0x20000004

08000850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x24>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_IncTick+0x24>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	20000228 	.word	0x20000228

08000878 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;  
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000228 	.word	0x20000228

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff47 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff5c 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff8e 	bl	8000948 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb0 	bl	80009b0 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_FLASH_Program+0xd8>)
 8000a78:	7e1b      	ldrb	r3, [r3, #24]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d101      	bne.n	8000a82 <HAL_FLASH_Program+0x26>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e054      	b.n	8000b2c <HAL_FLASH_Program+0xd0>
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <HAL_FLASH_Program+0xd8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000a88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a8c:	f000 f8a8 	bl	8000be0 <FLASH_WaitForLastOperation>
 8000a90:	4603      	mov	r3, r0
 8000a92:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d144      	bne.n	8000b24 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d102      	bne.n	8000aa6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	757b      	strb	r3, [r7, #21]
 8000aa4:	e007      	b.n	8000ab6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d102      	bne.n	8000ab2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000aac:	2302      	movs	r3, #2
 8000aae:	757b      	strb	r3, [r7, #21]
 8000ab0:	e001      	b.n	8000ab6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	75bb      	strb	r3, [r7, #22]
 8000aba:	e02d      	b.n	8000b18 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000abc:	7dbb      	ldrb	r3, [r7, #22]
 8000abe:	005a      	lsls	r2, r3, #1
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	eb02 0c03 	add.w	ip, r2, r3
 8000ac6:	7dbb      	ldrb	r3, [r7, #22]
 8000ac8:	0119      	lsls	r1, r3, #4
 8000aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ace:	f1c1 0620 	rsb	r6, r1, #32
 8000ad2:	f1a1 0020 	sub.w	r0, r1, #32
 8000ad6:	fa22 f401 	lsr.w	r4, r2, r1
 8000ada:	fa03 f606 	lsl.w	r6, r3, r6
 8000ade:	4334      	orrs	r4, r6
 8000ae0:	fa23 f000 	lsr.w	r0, r3, r0
 8000ae4:	4304      	orrs	r4, r0
 8000ae6:	fa23 f501 	lsr.w	r5, r3, r1
 8000aea:	b2a3      	uxth	r3, r4
 8000aec:	4619      	mov	r1, r3
 8000aee:	4660      	mov	r0, ip
 8000af0:	f000 f85a 	bl	8000ba8 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000af4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000af8:	f000 f872 	bl	8000be0 <FLASH_WaitForLastOperation>
 8000afc:	4603      	mov	r3, r0
 8000afe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_FLASH_Program+0xdc>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_FLASH_Program+0xdc>)
 8000b06:	f023 0301 	bic.w	r3, r3, #1
 8000b0a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d107      	bne.n	8000b22 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000b12:	7dbb      	ldrb	r3, [r7, #22]
 8000b14:	3301      	adds	r3, #1
 8000b16:	75bb      	strb	r3, [r7, #22]
 8000b18:	7dba      	ldrb	r2, [r7, #22]
 8000b1a:	7d7b      	ldrb	r3, [r7, #21]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3cd      	bcc.n	8000abc <HAL_FLASH_Program+0x60>
 8000b20:	e000      	b.n	8000b24 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000b22:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_FLASH_Program+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	761a      	strb	r2, [r3, #24]

  return status;
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	371c      	adds	r7, #28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b34:	20000230 	.word	0x20000230
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_FLASH_Unlock+0x40>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00d      	beq.n	8000b6e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_FLASH_Unlock+0x40>)
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_FLASH_Unlock+0x44>)
 8000b56:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_FLASH_Unlock+0x40>)
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_FLASH_Unlock+0x48>)
 8000b5c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_FLASH_Unlock+0x40>)
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40022000 	.word	0x40022000
 8000b80:	45670123 	.word	0x45670123
 8000b84:	cdef89ab 	.word	0xcdef89ab

08000b88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_FLASH_Lock+0x1c>)
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_FLASH_Lock+0x1c>)
 8000b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40022000 	.word	0x40022000

08000ba8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <FLASH_Program_HalfWord+0x30>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <FLASH_Program_HalfWord+0x34>)
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <FLASH_Program_HalfWord+0x34>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	887a      	ldrh	r2, [r7, #2]
 8000bca:	801a      	strh	r2, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	20000230 	.word	0x20000230
 8000bdc:	40022000 	.word	0x40022000

08000be0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff fe46 	bl	8000878 <HAL_GetTick>
 8000bec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000bee:	e010      	b.n	8000c12 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf6:	d00c      	beq.n	8000c12 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <FLASH_WaitForLastOperation+0x2e>
 8000bfe:	f7ff fe3b 	bl	8000878 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d201      	bcs.n	8000c12 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e01f      	b.n	8000c52 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <FLASH_WaitForLastOperation+0x7c>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d0e8      	beq.n	8000bf0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <FLASH_WaitForLastOperation+0x7c>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	2b20      	cmp	r3, #32
 8000c28:	d102      	bne.n	8000c30 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <FLASH_WaitForLastOperation+0x7c>)
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <FLASH_WaitForLastOperation+0x7c>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	2b10      	cmp	r3, #16
 8000c3a:	d005      	beq.n	8000c48 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <FLASH_WaitForLastOperation+0x7c>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d103      	bne.n	8000c50 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000c48:	f000 f80a 	bl	8000c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40022000 	.word	0x40022000

08000c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <FLASH_SetErrorCode+0x5c>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b10      	cmp	r3, #16
 8000c74:	d109      	bne.n	8000c8a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <FLASH_SetErrorCode+0x60>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <FLASH_SetErrorCode+0x60>)
 8000c80:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <FLASH_SetErrorCode+0x5c>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d109      	bne.n	8000caa <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <FLASH_SetErrorCode+0x60>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <FLASH_SetErrorCode+0x60>)
 8000ca0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <FLASH_SetErrorCode+0x5c>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	60d3      	str	r3, [r2, #12]
}  
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40022000 	.word	0x40022000
 8000cc0:	20000230 	.word	0x20000230

08000cc4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <HAL_FLASHEx_Erase+0xcc>)
 8000cd8:	7e1b      	ldrb	r3, [r3, #24]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <HAL_FLASHEx_Erase+0x1e>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e052      	b.n	8000d88 <HAL_FLASHEx_Erase+0xc4>
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <HAL_FLASHEx_Erase+0xcc>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d115      	bne.n	8000d1c <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000cf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cf4:	f7ff ff74 	bl	8000be0 <FLASH_WaitForLastOperation>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d140      	bne.n	8000d80 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000cfe:	f000 f84b 	bl	8000d98 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d06:	f7ff ff6b 	bl	8000be0 <FLASH_WaitForLastOperation>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_FLASHEx_Erase+0xd0>)
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_FLASHEx_Erase+0xd0>)
 8000d14:	f023 0304 	bic.w	r3, r3, #4
 8000d18:	6113      	str	r3, [r2, #16]
 8000d1a:	e031      	b.n	8000d80 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d20:	f7ff ff5e 	bl	8000be0 <FLASH_WaitForLastOperation>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d12a      	bne.n	8000d80 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	e019      	b.n	8000d6e <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f000 f846 	bl	8000dcc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d44:	f7ff ff4c 	bl	8000be0 <FLASH_WaitForLastOperation>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_FLASHEx_Erase+0xd0>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_FLASHEx_Erase+0xd0>)
 8000d52:	f023 0302 	bic.w	r3, r3, #2
 8000d56:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	601a      	str	r2, [r3, #0]
            break;
 8000d64:	e00c      	b.n	8000d80 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d6c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	02da      	lsls	r2, r3, #11
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3dc      	bcc.n	8000d3a <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_FLASHEx_Erase+0xcc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	761a      	strb	r2, [r3, #24]

  return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000230 	.word	0x20000230
 8000d94:	40022000 	.word	0x40022000

08000d98 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <FLASH_MassErase+0x2c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <FLASH_MassErase+0x30>)
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <FLASH_MassErase+0x30>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <FLASH_MassErase+0x30>)
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <FLASH_MassErase+0x30>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	6113      	str	r3, [r2, #16]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000230 	.word	0x20000230
 8000dc8:	40022000 	.word	0x40022000

08000dcc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <FLASH_PageErase+0x38>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <FLASH_PageErase+0x3c>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <FLASH_PageErase+0x3c>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <FLASH_PageErase+0x3c>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <FLASH_PageErase+0x3c>)
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <FLASH_PageErase+0x3c>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df6:	6113      	str	r3, [r2, #16]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000230 	.word	0x20000230
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	e160      	b.n	80010de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8152 	beq.w	80010d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d00b      	beq.n	8000e54 <HAL_GPIO_Init+0x48>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d007      	beq.n	8000e54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e48:	2b11      	cmp	r3, #17
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b12      	cmp	r3, #18
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0xea>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d123      	bne.n	8000f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0203 	and.w	r2, r3, #3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80ac 	beq.w	80010d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f98:	4a59      	ldr	r2, [pc, #356]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fc2:	d025      	beq.n	8001010 <HAL_GPIO_Init+0x204>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4f      	ldr	r2, [pc, #316]	; (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d01f      	beq.n	800100c <HAL_GPIO_Init+0x200>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d019      	beq.n	8001008 <HAL_GPIO_Init+0x1fc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_GPIO_Init+0x300>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d013      	beq.n	8001004 <HAL_GPIO_Init+0x1f8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x304>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d00d      	beq.n	8001000 <HAL_GPIO_Init+0x1f4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <HAL_GPIO_Init+0x308>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d007      	beq.n	8000ffc <HAL_GPIO_Init+0x1f0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4a      	ldr	r2, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x30c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	e00c      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	e00a      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001000:	2304      	movs	r3, #4
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001004:	2303      	movs	r3, #3
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x206>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x206>
 8001010:	2300      	movs	r3, #0
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001022:	4937      	ldr	r1, [pc, #220]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_GPIO_Init+0x310>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_GPIO_Init+0x310>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_GPIO_Init+0x310>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800107e:	4a27      	ldr	r2, [pc, #156]	; (800111c <HAL_GPIO_Init+0x310>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_GPIO_Init+0x310>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_GPIO_Init+0x310>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_GPIO_Init+0x310>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_GPIO_Init+0x310>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f ae97 	bne.w	8000e1c <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	48001400 	.word	0x48001400
 8001118:	48001800 	.word	0x48001800
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001126:	af00      	add	r7, sp, #0
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	f000 bf01 	b.w	8001f3c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8160 	beq.w	800140a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800114a:	4bae      	ldr	r3, [pc, #696]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b04      	cmp	r3, #4
 8001154:	d00c      	beq.n	8001170 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001156:	4bab      	ldr	r3, [pc, #684]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b08      	cmp	r3, #8
 8001160:	d159      	bne.n	8001216 <HAL_RCC_OscConfig+0xf6>
 8001162:	4ba8      	ldr	r3, [pc, #672]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d152      	bne.n	8001216 <HAL_RCC_OscConfig+0xf6>
 8001170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001174:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001184:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d102      	bne.n	80011a2 <HAL_RCC_OscConfig+0x82>
 800119c:	4b99      	ldr	r3, [pc, #612]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0xae>
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80011b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011ca:	4b8e      	ldr	r3, [pc, #568]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80011d6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80011da:	fa92 f2a2 	rbit	r2, r2
 80011de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80011e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f042 0220 	orr.w	r2, r2, #32
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f002 021f 	and.w	r2, r2, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8102 	beq.w	8001408 <HAL_RCC_OscConfig+0x2e8>
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 80fc 	bne.w	8001408 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	f000 be93 	b.w	8001f3c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x110>
 8001222:	4b78      	ldr	r3, [pc, #480]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a77      	ldr	r2, [pc, #476]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e030      	b.n	8001292 <HAL_RCC_OscConfig+0x172>
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x134>
 800123a:	4b72      	ldr	r3, [pc, #456]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a71      	ldr	r2, [pc, #452]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b6f      	ldr	r3, [pc, #444]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6e      	ldr	r2, [pc, #440]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01e      	b.n	8001292 <HAL_RCC_OscConfig+0x172>
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125e:	d10c      	bne.n	800127a <HAL_RCC_OscConfig+0x15a>
 8001260:	4b68      	ldr	r3, [pc, #416]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a67      	ldr	r2, [pc, #412]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b65      	ldr	r3, [pc, #404]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a64      	ldr	r2, [pc, #400]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e00b      	b.n	8001292 <HAL_RCC_OscConfig+0x172>
 800127a:	4b62      	ldr	r3, [pc, #392]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a61      	ldr	r2, [pc, #388]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5e      	ldr	r2, [pc, #376]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800128c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d059      	beq.n	8001350 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff faec 	bl	8000878 <HAL_GetTick>
 80012a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a6:	f7ff fae7 	bl	8000878 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d902      	bls.n	80012bc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f000 be40 	b.w	8001f3c <HAL_RCC_OscConfig+0xe1c>
 80012bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80012d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d102      	bne.n	80012ee <HAL_RCC_OscConfig+0x1ce>
 80012e8:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	e015      	b.n	800131a <HAL_RCC_OscConfig+0x1fa>
 80012ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001306:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800130a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800131e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001322:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001326:	fa92 f2a2 	rbit	r2, r2
 800132a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800132e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001332:	fab2 f282 	clz	r2, r2
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	f042 0220 	orr.w	r2, r2, #32
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	f002 021f 	and.w	r2, r2, #31
 8001342:	2101      	movs	r1, #1
 8001344:	fa01 f202 	lsl.w	r2, r1, r2
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0ab      	beq.n	80012a6 <HAL_RCC_OscConfig+0x186>
 800134e:	e05c      	b.n	800140a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fa92 	bl	8000878 <HAL_GetTick>
 8001354:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001358:	e00a      	b.n	8001370 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135a:	f7ff fa8d 	bl	8000878 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d902      	bls.n	8001370 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	f000 bde6 	b.w	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001374:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001384:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x282>
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x2ae>
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80013b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_RCC_OscConfig+0x2e4>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013d2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80013d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80013da:	fa92 f2a2 	rbit	r2, r2
 80013de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80013e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	f042 0220 	orr.w	r2, r2, #32
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	f002 021f 	and.w	r2, r2, #31
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ab      	bne.n	800135a <HAL_RCC_OscConfig+0x23a>
 8001402:	e002      	b.n	800140a <HAL_RCC_OscConfig+0x2ea>
 8001404:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8170 	beq.w	80016fa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800141a:	4bd0      	ldr	r3, [pc, #832]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001426:	4bcd      	ldr	r3, [pc, #820]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d16d      	bne.n	800150e <HAL_RCC_OscConfig+0x3ee>
 8001432:	4bca      	ldr	r3, [pc, #808]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800143a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800143e:	d166      	bne.n	800150e <HAL_RCC_OscConfig+0x3ee>
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001452:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	095b      	lsrs	r3, r3, #5
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d102      	bne.n	8001470 <HAL_RCC_OscConfig+0x350>
 800146a:	4bbc      	ldr	r3, [pc, #752]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	e013      	b.n	8001498 <HAL_RCC_OscConfig+0x378>
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001488:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001494:	4bb1      	ldr	r3, [pc, #708]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	2202      	movs	r2, #2
 800149a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800149e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80014a2:	fa92 f2a2 	rbit	r2, r2
 80014a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80014aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014ae:	fab2 f282 	clz	r2, r2
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	f042 0220 	orr.w	r2, r2, #32
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	f002 021f 	and.w	r2, r2, #31
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f202 	lsl.w	r2, r1, r2
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_RCC_OscConfig+0x3ba>
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d002      	beq.n	80014da <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f000 bd31 	b.w	8001f3c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4ba0      	ldr	r3, [pc, #640]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	21f8      	movs	r1, #248	; 0xf8
 80014ea:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80014f2:	fa91 f1a1 	rbit	r1, r1
 80014f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80014fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014fe:	fab1 f181 	clz	r1, r1
 8001502:	b2c9      	uxtb	r1, r1
 8001504:	408b      	lsls	r3, r1
 8001506:	4995      	ldr	r1, [pc, #596]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150c:	e0f5      	b.n	80016fa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8085 	beq.w	8001624 <HAL_RCC_OscConfig+0x504>
 800151a:	2301      	movs	r3, #1
 800151c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800152c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800153a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	461a      	mov	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff f997 	bl	8000878 <HAL_GetTick>
 800154a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff f992 	bl	8000878 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d902      	bls.n	8001566 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	f000 bceb 	b.w	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001578:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b01      	cmp	r3, #1
 800158e:	d102      	bne.n	8001596 <HAL_RCC_OscConfig+0x476>
 8001590:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	e013      	b.n	80015be <HAL_RCC_OscConfig+0x49e>
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015ba:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	2202      	movs	r2, #2
 80015c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80015c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80015c8:	fa92 f2a2 	rbit	r2, r2
 80015cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80015d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015d4:	fab2 f282 	clz	r2, r2
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f002 021f 	and.w	r2, r2, #31
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0af      	beq.n	8001550 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	21f8      	movs	r1, #248	; 0xf8
 8001600:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001608:	fa91 f1a1 	rbit	r1, r1
 800160c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001610:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001614:	fab1 f181 	clz	r1, r1
 8001618:	b2c9      	uxtb	r1, r1
 800161a:	408b      	lsls	r3, r1
 800161c:	494f      	ldr	r1, [pc, #316]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
 8001622:	e06a      	b.n	80016fa <HAL_RCC_OscConfig+0x5da>
 8001624:	2301      	movs	r3, #1
 8001626:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001636:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	461a      	mov	r2, r3
 800164c:	2300      	movs	r3, #0
 800164e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff f912 	bl	8000878 <HAL_GetTick>
 8001654:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff f90d 	bl	8000878 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d902      	bls.n	8001670 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	f000 bc66 	b.w	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001682:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d102      	bne.n	80016a0 <HAL_RCC_OscConfig+0x580>
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	e013      	b.n	80016c8 <HAL_RCC_OscConfig+0x5a8>
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_RCC_OscConfig+0x63c>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	2202      	movs	r2, #2
 80016ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80016ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80016d2:	fa92 f2a2 	rbit	r2, r2
 80016d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80016da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016de:	fab2 f282 	clz	r2, r2
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f042 0220 	orr.w	r2, r2, #32
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	f002 021f 	and.w	r2, r2, #31
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1af      	bne.n	800165a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80da 	beq.w	80018be <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d069      	beq.n	80017e8 <HAL_RCC_OscConfig+0x6c8>
 8001714:	2301      	movs	r3, #1
 8001716:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x640>)
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	461a      	mov	r2, r3
 800173a:	2301      	movs	r3, #1
 800173c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff f89b 	bl	8000878 <HAL_GetTick>
 8001742:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e00d      	b.n	8001764 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff f896 	bl	8000878 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d905      	bls.n	8001764 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e3ef      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
 800175c:	40021000 	.word	0x40021000
 8001760:	10908120 	.word	0x10908120
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	fa93 f2a3 	rbit	r2, r3
 80017a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a8:	4ba4      	ldr	r3, [pc, #656]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80017aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017b0:	2102      	movs	r1, #2
 80017b2:	6019      	str	r1, [r3, #0]
 80017b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f1a3 	rbit	r1, r3
 80017be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017c2:	6019      	str	r1, [r3, #0]
  return result;
 80017c4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0b0      	beq.n	8001748 <HAL_RCC_OscConfig+0x628>
 80017e6:	e06a      	b.n	80018be <HAL_RCC_OscConfig+0x79e>
 80017e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017fe:	601a      	str	r2, [r3, #0]
  return result;
 8001800:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001804:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	fab3 f383 	clz	r3, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	4b8c      	ldr	r3, [pc, #560]	; (8001a40 <HAL_RCC_OscConfig+0x920>)
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	461a      	mov	r2, r3
 8001816:	2300      	movs	r3, #0
 8001818:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff f82d 	bl	8000878 <HAL_GetTick>
 800181e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001822:	e009      	b.n	8001838 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff f828 	bl	8000878 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e381      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001838:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800183c:	2202      	movs	r2, #2
 800183e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	fa93 f2a3 	rbit	r2, r3
 800184a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800187e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001888:	2102      	movs	r1, #2
 800188a:	6019      	str	r1, [r3, #0]
 800188c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f1a3 	rbit	r1, r3
 8001896:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800189a:	6019      	str	r1, [r3, #0]
  return result;
 800189c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1b2      	bne.n	8001824 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8157 	beq.w	8001b7c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d112      	bne.n	8001906 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	4a55      	ldr	r2, [pc, #340]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80018e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ea:	61d3      	str	r3, [r2, #28]
 80018ec:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	4b4f      	ldr	r3, [pc, #316]	; (8001a44 <HAL_RCC_OscConfig+0x924>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d11a      	bne.n	8001948 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001912:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x924>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_RCC_OscConfig+0x924>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191e:	f7fe ffab 	bl	8000878 <HAL_GetTick>
 8001922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001926:	e009      	b.n	800193c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7fe ffa6 	bl	8000878 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b64      	cmp	r3, #100	; 0x64
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e2ff      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x924>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ef      	beq.n	8001928 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x840>
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	e02f      	b.n	80019c0 <HAL_RCC_OscConfig+0x8a0>
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x864>
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a30      	ldr	r2, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0x8a0>
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b05      	cmp	r3, #5
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x888>
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0x8a0>
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d06a      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7fe ff55 	bl	8000878 <HAL_GetTick>
 80019ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7fe ff50 	bl	8000878 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e2a7      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
 80019ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f0:	2202      	movs	r2, #2
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a08:	2202      	movs	r2, #2
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a1a:	601a      	str	r2, [r3, #0]
  return result;
 8001a1c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	095b      	lsrs	r3, r3, #5
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d108      	bne.n	8001a48 <HAL_RCC_OscConfig+0x928>
 8001a36:	4b01      	ldr	r3, [pc, #4]	; (8001a3c <HAL_RCC_OscConfig+0x91c>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	e013      	b.n	8001a64 <HAL_RCC_OscConfig+0x944>
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	10908120 	.word	0x10908120
 8001a44:	40007000 	.word	0x40007000
 8001a48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	4bc0      	ldr	r3, [pc, #768]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a68:	2102      	movs	r1, #2
 8001a6a:	6011      	str	r1, [r2, #0]
 8001a6c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	fa92 f1a2 	rbit	r1, r2
 8001a76:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a7a:	6011      	str	r1, [r2, #0]
  return result;
 8001a7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fab2 f282 	clz	r2, r2
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f002 021f 	and.w	r2, r2, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d09a      	beq.n	80019d4 <HAL_RCC_OscConfig+0x8b4>
 8001a9e:	e063      	b.n	8001b68 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7fe feea 	bl	8000878 <HAL_GetTick>
 8001aa4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe fee5 	bl	8000878 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e23c      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001ac2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ade:	2202      	movs	r2, #2
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001af0:	601a      	str	r2, [r3, #0]
  return result;
 8001af2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001af6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x9f2>
 8001b0c:	4b95      	ldr	r3, [pc, #596]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	e00d      	b.n	8001b2e <HAL_RCC_OscConfig+0xa0e>
 8001b12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b16:	2202      	movs	r2, #2
 8001b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	4b8e      	ldr	r3, [pc, #568]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b32:	2102      	movs	r1, #2
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	fa92 f1a2 	rbit	r1, r2
 8001b40:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b44:	6011      	str	r1, [r2, #0]
  return result;
 8001b46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f002 021f 	and.w	r2, r2, #31
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1a0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b68:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b70:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a7b      	ldr	r2, [pc, #492]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 81d9 	beq.w	8001f3a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	f000 81a6 	beq.w	8001ee2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	f040 811e 	bne.w	8001dde <HAL_RCC_OscConfig+0xcbe>
 8001ba2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bba:	601a      	str	r2, [r3, #0]
  return result;
 8001bbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7fe fe4e 	bl	8000878 <HAL_GetTick>
 8001bdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7fe fe49 	bl	8000878 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1a2      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001bf6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c0e:	601a      	str	r2, [r3, #0]
  return result;
 8001c10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0xb10>
 8001c2a:	4b4e      	ldr	r3, [pc, #312]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e01b      	b.n	8001c68 <HAL_RCC_OscConfig+0xb48>
 8001c30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fa92 f1a2 	rbit	r1, r2
 8001c7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c80:	6011      	str	r1, [r2, #0]
  return result;
 8001c82:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d19e      	bne.n	8001be2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	f023 020f 	bic.w	r2, r3, #15
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	492c      	ldr	r1, [pc, #176]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a19      	ldr	r1, [r3, #32]
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	4925      	ldr	r1, [pc, #148]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cec:	601a      	str	r2, [r3, #0]
  return result;
 8001cee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cf2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	461a      	mov	r2, r3
 8001d06:	2301      	movs	r3, #1
 8001d08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fdb5 	bl	8000878 <HAL_GetTick>
 8001d0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d12:	e009      	b.n	8001d28 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe fdb0 	bl	8000878 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e109      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d40:	601a      	str	r2, [r3, #0]
  return result;
 8001d42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCC_OscConfig+0xc48>
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <HAL_RCC_OscConfig+0xc44>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	e01e      	b.n	8001da0 <HAL_RCC_OscConfig+0xc80>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_OscConfig+0xe28>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da8:	6011      	str	r1, [r2, #0]
 8001daa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	fa92 f1a2 	rbit	r1, r2
 8001db4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001db8:	6011      	str	r1, [r2, #0]
  return result;
 8001dba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d09b      	beq.n	8001d14 <HAL_RCC_OscConfig+0xbf4>
 8001ddc:	e0ad      	b.n	8001f3a <HAL_RCC_OscConfig+0xe1a>
 8001dde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001de2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fa93 f2a3 	rbit	r2, r3
 8001df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df6:	601a      	str	r2, [r3, #0]
  return result;
 8001df8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2300      	movs	r3, #0
 8001e12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fd30 	bl	8000878 <HAL_GetTick>
 8001e18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe fd2b 	bl	8000878 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e084      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
 8001e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4a:	601a      	str	r2, [r3, #0]
  return result;
 8001e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_RCC_OscConfig+0xd4c>
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <HAL_RCC_OscConfig+0xe28>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	e01b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd84>
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f107 0318 	add.w	r3, r7, #24
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_RCC_OscConfig+0xe28>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	f107 0214 	add.w	r2, r7, #20
 8001ea8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eac:	6011      	str	r1, [r2, #0]
 8001eae:	f107 0214 	add.w	r2, r7, #20
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	fa92 f1a2 	rbit	r1, r2
 8001eb8:	f107 0210 	add.w	r2, r7, #16
 8001ebc:	6011      	str	r1, [r2, #0]
  return result;
 8001ebe:	f107 0210 	add.w	r2, r7, #16
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d19e      	bne.n	8001e1e <HAL_RCC_OscConfig+0xcfe>
 8001ee0:	e02b      	b.n	8001f3a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e025      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0xe28>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_OscConfig+0xe28>)
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f04:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d111      	bne.n	8001f36 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d108      	bne.n	8001f36 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b09e      	sub	sp, #120	; 0x78
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e162      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b90      	ldr	r3, [pc, #576]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b8d      	ldr	r3, [pc, #564]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	498b      	ldr	r1, [pc, #556]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e14a      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	497f      	ldr	r1, [pc, #508]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80dc 	beq.w	8002178 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d13c      	bne.n	8002042 <HAL_RCC_ClockConfig+0xf6>
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xa6>
 8001fec:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e00f      	b.n	8002012 <HAL_RCC_ClockConfig+0xc6>
 8001ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	663b      	str	r3, [r7, #96]	; 0x60
 8002006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800200e:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002016:	65ba      	str	r2, [r7, #88]	; 0x58
 8002018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800201a:	fa92 f2a2 	rbit	r2, r2
 800201e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002022:	fab2 f282 	clz	r2, r2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f002 021f 	and.w	r2, r2, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d17b      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0f3      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d13c      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x178>
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <HAL_RCC_ClockConfig+0x128>
 800206e:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	e00f      	b.n	8002094 <HAL_RCC_ClockConfig+0x148>
 8002074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002078:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
 8002082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
 8002088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002090:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002098:	63ba      	str	r2, [r7, #56]	; 0x38
 800209a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d13a      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b2      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
 80020c4:	2302      	movs	r3, #2
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_ClockConfig+0x1a0>
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e00d      	b.n	8002108 <HAL_RCC_ClockConfig+0x1bc>
 80020ec:	2302      	movs	r3, #2
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	61ba      	str	r2, [r7, #24]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	fa92 f2a2 	rbit	r2, r2
 8002112:	617a      	str	r2, [r7, #20]
  return result;
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f002 021f 	and.w	r2, r2, #31
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e079      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	491a      	ldr	r1, [pc, #104]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fb96 	bl	8000878 <HAL_GetTick>
 800214c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fb92 	bl	8000878 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e061      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d214      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4906      	ldr	r1, [pc, #24]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e040      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	491a      	ldr	r1, [pc, #104]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ee:	f000 f829 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80021f2:	4601      	mov	r1, r0
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fc:	22f0      	movs	r2, #240	; 0xf0
 80021fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	60fa      	str	r2, [r7, #12]
  return result;
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	40d3      	lsrs	r3, r2
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x2ec>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	fa21 f303 	lsr.w	r3, r1, r3
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_RCC_ClockConfig+0x2f0>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCC_ClockConfig+0x2f4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fae4 	bl	80007f0 <HAL_InitTick>
  
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3778      	adds	r7, #120	; 0x78
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	08003a04 	.word	0x08003a04
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b08b      	sub	sp, #44	; 0x2c
 8002248:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x30>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x36>
 8002272:	e03f      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	e03f      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002280:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002284:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	607a      	str	r2, [r7, #4]
  return result;
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	40d3      	lsrs	r3, r2
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_RCC_GetSysClockFreq+0xcc>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	220f      	movs	r2, #15
 80022a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	60fa      	str	r2, [r7, #12]
  return result;
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	40d3      	lsrs	r3, r2
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022cc:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
 80022dc:	e007      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	623b      	str	r3, [r7, #32]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022f6:	623b      	str	r3, [r7, #32]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	6a3b      	ldr	r3, [r7, #32]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	372c      	adds	r7, #44	; 0x2c
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	08003a1c 	.word	0x08003a1c
 8002314:	08003a2c 	.word	0x08003a2c

08002318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_RCC_GetHCLKFreq+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000000 	.word	0x20000000

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002336:	f7ff ffef 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 800233a:	4601      	mov	r1, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002344:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002348:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	fa92 f2a2 	rbit	r2, r2
 8002350:	603a      	str	r2, [r7, #0]
  return result;
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	fab2 f282 	clz	r2, r2
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	40d3      	lsrs	r3, r2
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x40>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08003a14 	.word	0x08003a14

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800237a:	f7ff ffcd 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 800237e:	4601      	mov	r1, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002388:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800238c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	fa92 f2a2 	rbit	r2, r2
 8002394:	603a      	str	r2, [r7, #0]
  return result;
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	fab2 f282 	clz	r2, r2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	40d3      	lsrs	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08003a14 	.word	0x08003a14

080023b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b092      	sub	sp, #72	; 0x48
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80d4 	beq.w	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023dc:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10e      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a4a      	ldr	r2, [pc, #296]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	61d3      	str	r3, [r2, #28]
 80023f4:	4b48      	ldr	r3, [pc, #288]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b42      	ldr	r3, [pc, #264]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a41      	ldr	r2, [pc, #260]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7fe fa2b 	bl	8000878 <HAL_GetTick>
 8002422:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe fa27 	bl	8000878 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1d6      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800244e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8084 	beq.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002460:	429a      	cmp	r2, r3
 8002462:	d07c      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002464:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	461a      	mov	r2, r3
 800248e:	2301      	movs	r3, #1
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	461a      	mov	r2, r3
 80024b2:	2300      	movs	r3, #0
 80024b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d04b      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe f9d7 	bl	8000878 <HAL_GetTick>
 80024ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe f9d3 	bl	8000878 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e180      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80024e4:	2302      	movs	r3, #2
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	2302      	movs	r3, #2
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	61fb      	str	r3, [r7, #28]
  return result;
 80024fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d108      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002512:	4b01      	ldr	r3, [pc, #4]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	e00d      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
 8002520:	10908100 	.word	0x10908100
 8002524:	2302      	movs	r3, #2
 8002526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2202      	movs	r2, #2
 8002536:	613a      	str	r2, [r7, #16]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	fa92 f2a2 	rbit	r2, r2
 800253e:	60fa      	str	r2, [r7, #12]
  return result;
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	fab2 f282 	clz	r2, r2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0b7      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800255e:	4b95      	ldr	r3, [pc, #596]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4992      	ldr	r1, [pc, #584]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002570:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b8e      	ldr	r3, [pc, #568]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4a8d      	ldr	r2, [pc, #564]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002590:	4b88      	ldr	r3, [pc, #544]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f023 0203 	bic.w	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4985      	ldr	r1, [pc, #532]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ae:	4b81      	ldr	r3, [pc, #516]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	497e      	ldr	r1, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025cc:	4b79      	ldr	r3, [pc, #484]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	4976      	ldr	r1, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f023 0210 	bic.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	496f      	ldr	r1, [pc, #444]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	4967      	ldr	r1, [pc, #412]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f023 0220 	bic.w	r2, r3, #32
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4960      	ldr	r1, [pc, #384]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002644:	4b5b      	ldr	r3, [pc, #364]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	4958      	ldr	r1, [pc, #352]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	4951      	ldr	r1, [pc, #324]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002680:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4949      	ldr	r1, [pc, #292]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800269e:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4942      	ldr	r1, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	4933      	ldr	r1, [pc, #204]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	492b      	ldr	r1, [pc, #172]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4924      	ldr	r1, [pc, #144]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	491c      	ldr	r1, [pc, #112]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	4915      	ldr	r1, [pc, #84]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	490d      	ldr	r1, [pc, #52]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279a:	4906      	ldr	r1, [pc, #24]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00c      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027ac:	4b01      	ldr	r3, [pc, #4]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	e002      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	490b      	ldr	r1, [pc, #44]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3748      	adds	r7, #72	; 0x48
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e040      	b.n	8002888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fd fef6 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	; 0x24
 8002820:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8c0 	bl	80029b8 <UART_SetConfig>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e022      	b.n	8002888 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa8a 	bl	8002d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fb11 	bl	8002ea8 <UART_CheckIdleState>
 8002886:	4603      	mov	r3, r0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	f040 8082 	bne.w	80029ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_UART_Transmit+0x26>
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07a      	b.n	80029b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_UART_Transmit+0x38>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e073      	b.n	80029b0 <HAL_UART_Transmit+0x120>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2221      	movs	r2, #33	; 0x21
 80028dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028de:	f7fd ffcb 	bl	8000878 <HAL_GetTick>
 80028e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d108      	bne.n	8002910 <HAL_UART_Transmit+0x80>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e003      	b.n	8002918 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002920:	e02d      	b.n	800297e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fb04 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e039      	b.n	80029b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10b      	bne.n	800295a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	881a      	ldrh	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800294e:	b292      	uxth	r2, r2
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	3302      	adds	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	e008      	b.n	800296c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	b292      	uxth	r2, r2
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3301      	adds	r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1cb      	bne.n	8002922 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fad0 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e005      	b.n	80029b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4bab      	ldr	r3, [pc, #684]	; (8002c90 <UART_SetConfig+0x2d8>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a99      	ldr	r2, [pc, #612]	; (8002c94 <UART_SetConfig+0x2dc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d120      	bne.n	8002a76 <UART_SetConfig+0xbe>
 8002a34:	4b98      	ldr	r3, [pc, #608]	; (8002c98 <UART_SetConfig+0x2e0>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d817      	bhi.n	8002a70 <UART_SetConfig+0xb8>
 8002a40:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <UART_SetConfig+0x90>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a65 	.word	0x08002a65
 8002a50:	08002a6b 	.word	0x08002a6b
 8002a54:	08002a5f 	.word	0x08002a5f
 8002a58:	2301      	movs	r3, #1
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	e0b5      	b.n	8002bca <UART_SetConfig+0x212>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	77fb      	strb	r3, [r7, #31]
 8002a62:	e0b2      	b.n	8002bca <UART_SetConfig+0x212>
 8002a64:	2304      	movs	r3, #4
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e0af      	b.n	8002bca <UART_SetConfig+0x212>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e0ac      	b.n	8002bca <UART_SetConfig+0x212>
 8002a70:	2310      	movs	r3, #16
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e0a9      	b.n	8002bca <UART_SetConfig+0x212>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a88      	ldr	r2, [pc, #544]	; (8002c9c <UART_SetConfig+0x2e4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d124      	bne.n	8002aca <UART_SetConfig+0x112>
 8002a80:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <UART_SetConfig+0x2e0>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a8c:	d011      	beq.n	8002ab2 <UART_SetConfig+0xfa>
 8002a8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a92:	d817      	bhi.n	8002ac4 <UART_SetConfig+0x10c>
 8002a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a98:	d011      	beq.n	8002abe <UART_SetConfig+0x106>
 8002a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a9e:	d811      	bhi.n	8002ac4 <UART_SetConfig+0x10c>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <UART_SetConfig+0xf4>
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d006      	beq.n	8002ab8 <UART_SetConfig+0x100>
 8002aaa:	e00b      	b.n	8002ac4 <UART_SetConfig+0x10c>
 8002aac:	2300      	movs	r3, #0
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	e08b      	b.n	8002bca <UART_SetConfig+0x212>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	e088      	b.n	8002bca <UART_SetConfig+0x212>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e085      	b.n	8002bca <UART_SetConfig+0x212>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e082      	b.n	8002bca <UART_SetConfig+0x212>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	e07f      	b.n	8002bca <UART_SetConfig+0x212>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a74      	ldr	r2, [pc, #464]	; (8002ca0 <UART_SetConfig+0x2e8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d124      	bne.n	8002b1e <UART_SetConfig+0x166>
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <UART_SetConfig+0x2e0>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002adc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ae0:	d011      	beq.n	8002b06 <UART_SetConfig+0x14e>
 8002ae2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ae6:	d817      	bhi.n	8002b18 <UART_SetConfig+0x160>
 8002ae8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aec:	d011      	beq.n	8002b12 <UART_SetConfig+0x15a>
 8002aee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002af2:	d811      	bhi.n	8002b18 <UART_SetConfig+0x160>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <UART_SetConfig+0x148>
 8002af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002afc:	d006      	beq.n	8002b0c <UART_SetConfig+0x154>
 8002afe:	e00b      	b.n	8002b18 <UART_SetConfig+0x160>
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e061      	b.n	8002bca <UART_SetConfig+0x212>
 8002b06:	2302      	movs	r3, #2
 8002b08:	77fb      	strb	r3, [r7, #31]
 8002b0a:	e05e      	b.n	8002bca <UART_SetConfig+0x212>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e05b      	b.n	8002bca <UART_SetConfig+0x212>
 8002b12:	2308      	movs	r3, #8
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e058      	b.n	8002bca <UART_SetConfig+0x212>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e055      	b.n	8002bca <UART_SetConfig+0x212>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a60      	ldr	r2, [pc, #384]	; (8002ca4 <UART_SetConfig+0x2ec>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d124      	bne.n	8002b72 <UART_SetConfig+0x1ba>
 8002b28:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <UART_SetConfig+0x2e0>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b34:	d011      	beq.n	8002b5a <UART_SetConfig+0x1a2>
 8002b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b3a:	d817      	bhi.n	8002b6c <UART_SetConfig+0x1b4>
 8002b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b40:	d011      	beq.n	8002b66 <UART_SetConfig+0x1ae>
 8002b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b46:	d811      	bhi.n	8002b6c <UART_SetConfig+0x1b4>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <UART_SetConfig+0x19c>
 8002b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b50:	d006      	beq.n	8002b60 <UART_SetConfig+0x1a8>
 8002b52:	e00b      	b.n	8002b6c <UART_SetConfig+0x1b4>
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e037      	b.n	8002bca <UART_SetConfig+0x212>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e034      	b.n	8002bca <UART_SetConfig+0x212>
 8002b60:	2304      	movs	r3, #4
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e031      	b.n	8002bca <UART_SetConfig+0x212>
 8002b66:	2308      	movs	r3, #8
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e02e      	b.n	8002bca <UART_SetConfig+0x212>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e02b      	b.n	8002bca <UART_SetConfig+0x212>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <UART_SetConfig+0x2f0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d124      	bne.n	8002bc6 <UART_SetConfig+0x20e>
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <UART_SetConfig+0x2e0>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002b84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b88:	d011      	beq.n	8002bae <UART_SetConfig+0x1f6>
 8002b8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b8e:	d817      	bhi.n	8002bc0 <UART_SetConfig+0x208>
 8002b90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b94:	d011      	beq.n	8002bba <UART_SetConfig+0x202>
 8002b96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b9a:	d811      	bhi.n	8002bc0 <UART_SetConfig+0x208>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <UART_SetConfig+0x1f0>
 8002ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba4:	d006      	beq.n	8002bb4 <UART_SetConfig+0x1fc>
 8002ba6:	e00b      	b.n	8002bc0 <UART_SetConfig+0x208>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e00d      	b.n	8002bca <UART_SetConfig+0x212>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e00a      	b.n	8002bca <UART_SetConfig+0x212>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e007      	b.n	8002bca <UART_SetConfig+0x212>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e004      	b.n	8002bca <UART_SetConfig+0x212>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e001      	b.n	8002bca <UART_SetConfig+0x212>
 8002bc6:	2310      	movs	r3, #16
 8002bc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd2:	d16d      	bne.n	8002cb0 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d827      	bhi.n	8002c2a <UART_SetConfig+0x272>
 8002bda:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <UART_SetConfig+0x228>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002c05 	.word	0x08002c05
 8002be4:	08002c0d 	.word	0x08002c0d
 8002be8:	08002c15 	.word	0x08002c15
 8002bec:	08002c2b 	.word	0x08002c2b
 8002bf0:	08002c1b 	.word	0x08002c1b
 8002bf4:	08002c2b 	.word	0x08002c2b
 8002bf8:	08002c2b 	.word	0x08002c2b
 8002bfc:	08002c2b 	.word	0x08002c2b
 8002c00:	08002c23 	.word	0x08002c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7ff fb94 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002c08:	61b8      	str	r0, [r7, #24]
        break;
 8002c0a:	e013      	b.n	8002c34 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c0c:	f7ff fbb2 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8002c10:	61b8      	str	r0, [r7, #24]
        break;
 8002c12:	e00f      	b.n	8002c34 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <UART_SetConfig+0x2f4>)
 8002c16:	61bb      	str	r3, [r7, #24]
        break;
 8002c18:	e00c      	b.n	8002c34 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1a:	f7ff fb13 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002c1e:	61b8      	str	r0, [r7, #24]
        break;
 8002c20:	e008      	b.n	8002c34 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c26:	61bb      	str	r3, [r7, #24]
        break;
 8002c28:	e004      	b.n	8002c34 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	77bb      	strb	r3, [r7, #30]
        break;
 8002c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8086 	beq.w	8002d48 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	005a      	lsls	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	441a      	add	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0f      	cmp	r3, #15
 8002c58:	d916      	bls.n	8002c88 <UART_SetConfig+0x2d0>
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d212      	bcs.n	8002c88 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f023 030f 	bic.w	r3, r3, #15
 8002c6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	89fb      	ldrh	r3, [r7, #14]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	89fa      	ldrh	r2, [r7, #14]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	e05f      	b.n	8002d48 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	77bb      	strb	r3, [r7, #30]
 8002c8c:	e05c      	b.n	8002d48 <UART_SetConfig+0x390>
 8002c8e:	bf00      	nop
 8002c90:	efff69f3 	.word	0xefff69f3
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40004400 	.word	0x40004400
 8002ca0:	40004800 	.word	0x40004800
 8002ca4:	40004c00 	.word	0x40004c00
 8002ca8:	40005000 	.word	0x40005000
 8002cac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb0:	7ffb      	ldrb	r3, [r7, #31]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d827      	bhi.n	8002d06 <UART_SetConfig+0x34e>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x304>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002d07 	.word	0x08002d07
 8002ccc:	08002cf7 	.word	0x08002cf7
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d07 	.word	0x08002d07
 8002cd8:	08002d07 	.word	0x08002d07
 8002cdc:	08002cff 	.word	0x08002cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7ff fb26 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	61b8      	str	r0, [r7, #24]
        break;
 8002ce6:	e013      	b.n	8002d10 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff fb44 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8002cec:	61b8      	str	r0, [r7, #24]
        break;
 8002cee:	e00f      	b.n	8002d10 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <UART_SetConfig+0x3a8>)
 8002cf2:	61bb      	str	r3, [r7, #24]
        break;
 8002cf4:	e00c      	b.n	8002d10 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf6:	f7ff faa5 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002cfa:	61b8      	str	r0, [r7, #24]
        break;
 8002cfc:	e008      	b.n	8002d10 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d02:	61bb      	str	r3, [r7, #24]
        break;
 8002d04:	e004      	b.n	8002d10 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d018      	beq.n	8002d48 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	085a      	lsrs	r2, r3, #1
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	d908      	bls.n	8002d44 <UART_SetConfig+0x38c>
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d204      	bcs.n	8002d44 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e001      	b.n	8002d48 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d54:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01a      	beq.n	8002e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e62:	d10a      	bne.n	8002e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eb8:	f7fd fcde 	bl	8000878 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d10e      	bne.n	8002eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f82d 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e023      	b.n	8002f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d10e      	bne.n	8002f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f817 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e00d      	b.n	8002f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	e05e      	b.n	800300a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d05a      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f54:	f7fd fc90 	bl	8000878 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d302      	bcc.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11b      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e043      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d02c      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	d124      	bne.n	800300a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e00f      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4013      	ands	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	429a      	cmp	r2, r3
 8003026:	d091      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <__errno>:
 8003034:	4b01      	ldr	r3, [pc, #4]	; (800303c <__errno+0x8>)
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	2000000c 	.word	0x2000000c

08003040 <__libc_init_array>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	4d0d      	ldr	r5, [pc, #52]	; (8003078 <__libc_init_array+0x38>)
 8003044:	4c0d      	ldr	r4, [pc, #52]	; (800307c <__libc_init_array+0x3c>)
 8003046:	1b64      	subs	r4, r4, r5
 8003048:	10a4      	asrs	r4, r4, #2
 800304a:	2600      	movs	r6, #0
 800304c:	42a6      	cmp	r6, r4
 800304e:	d109      	bne.n	8003064 <__libc_init_array+0x24>
 8003050:	4d0b      	ldr	r5, [pc, #44]	; (8003080 <__libc_init_array+0x40>)
 8003052:	4c0c      	ldr	r4, [pc, #48]	; (8003084 <__libc_init_array+0x44>)
 8003054:	f000 fc68 	bl	8003928 <_init>
 8003058:	1b64      	subs	r4, r4, r5
 800305a:	10a4      	asrs	r4, r4, #2
 800305c:	2600      	movs	r6, #0
 800305e:	42a6      	cmp	r6, r4
 8003060:	d105      	bne.n	800306e <__libc_init_array+0x2e>
 8003062:	bd70      	pop	{r4, r5, r6, pc}
 8003064:	f855 3b04 	ldr.w	r3, [r5], #4
 8003068:	4798      	blx	r3
 800306a:	3601      	adds	r6, #1
 800306c:	e7ee      	b.n	800304c <__libc_init_array+0xc>
 800306e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003072:	4798      	blx	r3
 8003074:	3601      	adds	r6, #1
 8003076:	e7f2      	b.n	800305e <__libc_init_array+0x1e>
 8003078:	08003a70 	.word	0x08003a70
 800307c:	08003a70 	.word	0x08003a70
 8003080:	08003a70 	.word	0x08003a70
 8003084:	08003a74 	.word	0x08003a74

08003088 <memset>:
 8003088:	4402      	add	r2, r0
 800308a:	4603      	mov	r3, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <_vsniprintf_r>:
 8003098:	b530      	push	{r4, r5, lr}
 800309a:	1e14      	subs	r4, r2, #0
 800309c:	4605      	mov	r5, r0
 800309e:	b09b      	sub	sp, #108	; 0x6c
 80030a0:	4618      	mov	r0, r3
 80030a2:	da05      	bge.n	80030b0 <_vsniprintf_r+0x18>
 80030a4:	238b      	movs	r3, #139	; 0x8b
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	b01b      	add	sp, #108	; 0x6c
 80030ae:	bd30      	pop	{r4, r5, pc}
 80030b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80030b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80030b8:	bf14      	ite	ne
 80030ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80030be:	4623      	moveq	r3, r4
 80030c0:	9302      	str	r3, [sp, #8]
 80030c2:	9305      	str	r3, [sp, #20]
 80030c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c8:	9100      	str	r1, [sp, #0]
 80030ca:	9104      	str	r1, [sp, #16]
 80030cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80030d0:	4602      	mov	r2, r0
 80030d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030d4:	4669      	mov	r1, sp
 80030d6:	4628      	mov	r0, r5
 80030d8:	f000 f874 	bl	80031c4 <_svfiprintf_r>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	bfbc      	itt	lt
 80030e0:	238b      	movlt	r3, #139	; 0x8b
 80030e2:	602b      	strlt	r3, [r5, #0]
 80030e4:	2c00      	cmp	r4, #0
 80030e6:	d0e1      	beq.n	80030ac <_vsniprintf_r+0x14>
 80030e8:	9b00      	ldr	r3, [sp, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e7dd      	b.n	80030ac <_vsniprintf_r+0x14>

080030f0 <vsniprintf>:
 80030f0:	b507      	push	{r0, r1, r2, lr}
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	460a      	mov	r2, r1
 80030f8:	4601      	mov	r1, r0
 80030fa:	4803      	ldr	r0, [pc, #12]	; (8003108 <vsniprintf+0x18>)
 80030fc:	6800      	ldr	r0, [r0, #0]
 80030fe:	f7ff ffcb 	bl	8003098 <_vsniprintf_r>
 8003102:	b003      	add	sp, #12
 8003104:	f85d fb04 	ldr.w	pc, [sp], #4
 8003108:	2000000c 	.word	0x2000000c

0800310c <__ssputs_r>:
 800310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003110:	688e      	ldr	r6, [r1, #8]
 8003112:	429e      	cmp	r6, r3
 8003114:	4682      	mov	sl, r0
 8003116:	460c      	mov	r4, r1
 8003118:	4690      	mov	r8, r2
 800311a:	461f      	mov	r7, r3
 800311c:	d838      	bhi.n	8003190 <__ssputs_r+0x84>
 800311e:	898a      	ldrh	r2, [r1, #12]
 8003120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003124:	d032      	beq.n	800318c <__ssputs_r+0x80>
 8003126:	6825      	ldr	r5, [r4, #0]
 8003128:	6909      	ldr	r1, [r1, #16]
 800312a:	eba5 0901 	sub.w	r9, r5, r1
 800312e:	6965      	ldr	r5, [r4, #20]
 8003130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003138:	3301      	adds	r3, #1
 800313a:	444b      	add	r3, r9
 800313c:	106d      	asrs	r5, r5, #1
 800313e:	429d      	cmp	r5, r3
 8003140:	bf38      	it	cc
 8003142:	461d      	movcc	r5, r3
 8003144:	0553      	lsls	r3, r2, #21
 8003146:	d531      	bpl.n	80031ac <__ssputs_r+0xa0>
 8003148:	4629      	mov	r1, r5
 800314a:	f000 fb47 	bl	80037dc <_malloc_r>
 800314e:	4606      	mov	r6, r0
 8003150:	b950      	cbnz	r0, 8003168 <__ssputs_r+0x5c>
 8003152:	230c      	movs	r3, #12
 8003154:	f8ca 3000 	str.w	r3, [sl]
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003168:	6921      	ldr	r1, [r4, #16]
 800316a:	464a      	mov	r2, r9
 800316c:	f000 fabe 	bl	80036ec <memcpy>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317a:	81a3      	strh	r3, [r4, #12]
 800317c:	6126      	str	r6, [r4, #16]
 800317e:	6165      	str	r5, [r4, #20]
 8003180:	444e      	add	r6, r9
 8003182:	eba5 0509 	sub.w	r5, r5, r9
 8003186:	6026      	str	r6, [r4, #0]
 8003188:	60a5      	str	r5, [r4, #8]
 800318a:	463e      	mov	r6, r7
 800318c:	42be      	cmp	r6, r7
 800318e:	d900      	bls.n	8003192 <__ssputs_r+0x86>
 8003190:	463e      	mov	r6, r7
 8003192:	4632      	mov	r2, r6
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	4641      	mov	r1, r8
 8003198:	f000 fab6 	bl	8003708 <memmove>
 800319c:	68a3      	ldr	r3, [r4, #8]
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	1b9b      	subs	r3, r3, r6
 80031a2:	4432      	add	r2, r6
 80031a4:	60a3      	str	r3, [r4, #8]
 80031a6:	6022      	str	r2, [r4, #0]
 80031a8:	2000      	movs	r0, #0
 80031aa:	e7db      	b.n	8003164 <__ssputs_r+0x58>
 80031ac:	462a      	mov	r2, r5
 80031ae:	f000 fb6f 	bl	8003890 <_realloc_r>
 80031b2:	4606      	mov	r6, r0
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d1e1      	bne.n	800317c <__ssputs_r+0x70>
 80031b8:	6921      	ldr	r1, [r4, #16]
 80031ba:	4650      	mov	r0, sl
 80031bc:	f000 fabe 	bl	800373c <_free_r>
 80031c0:	e7c7      	b.n	8003152 <__ssputs_r+0x46>
	...

080031c4 <_svfiprintf_r>:
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	4698      	mov	r8, r3
 80031ca:	898b      	ldrh	r3, [r1, #12]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	b09d      	sub	sp, #116	; 0x74
 80031d0:	4607      	mov	r7, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	d50e      	bpl.n	80031f6 <_svfiprintf_r+0x32>
 80031d8:	690b      	ldr	r3, [r1, #16]
 80031da:	b963      	cbnz	r3, 80031f6 <_svfiprintf_r+0x32>
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	f000 fafd 	bl	80037dc <_malloc_r>
 80031e2:	6028      	str	r0, [r5, #0]
 80031e4:	6128      	str	r0, [r5, #16]
 80031e6:	b920      	cbnz	r0, 80031f2 <_svfiprintf_r+0x2e>
 80031e8:	230c      	movs	r3, #12
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	e0d1      	b.n	8003396 <_svfiprintf_r+0x1d2>
 80031f2:	2340      	movs	r3, #64	; 0x40
 80031f4:	616b      	str	r3, [r5, #20]
 80031f6:	2300      	movs	r3, #0
 80031f8:	9309      	str	r3, [sp, #36]	; 0x24
 80031fa:	2320      	movs	r3, #32
 80031fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003200:	f8cd 800c 	str.w	r8, [sp, #12]
 8003204:	2330      	movs	r3, #48	; 0x30
 8003206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80033b0 <_svfiprintf_r+0x1ec>
 800320a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800320e:	f04f 0901 	mov.w	r9, #1
 8003212:	4623      	mov	r3, r4
 8003214:	469a      	mov	sl, r3
 8003216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800321a:	b10a      	cbz	r2, 8003220 <_svfiprintf_r+0x5c>
 800321c:	2a25      	cmp	r2, #37	; 0x25
 800321e:	d1f9      	bne.n	8003214 <_svfiprintf_r+0x50>
 8003220:	ebba 0b04 	subs.w	fp, sl, r4
 8003224:	d00b      	beq.n	800323e <_svfiprintf_r+0x7a>
 8003226:	465b      	mov	r3, fp
 8003228:	4622      	mov	r2, r4
 800322a:	4629      	mov	r1, r5
 800322c:	4638      	mov	r0, r7
 800322e:	f7ff ff6d 	bl	800310c <__ssputs_r>
 8003232:	3001      	adds	r0, #1
 8003234:	f000 80aa 	beq.w	800338c <_svfiprintf_r+0x1c8>
 8003238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800323a:	445a      	add	r2, fp
 800323c:	9209      	str	r2, [sp, #36]	; 0x24
 800323e:	f89a 3000 	ldrb.w	r3, [sl]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80a2 	beq.w	800338c <_svfiprintf_r+0x1c8>
 8003248:	2300      	movs	r3, #0
 800324a:	f04f 32ff 	mov.w	r2, #4294967295
 800324e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003252:	f10a 0a01 	add.w	sl, sl, #1
 8003256:	9304      	str	r3, [sp, #16]
 8003258:	9307      	str	r3, [sp, #28]
 800325a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800325e:	931a      	str	r3, [sp, #104]	; 0x68
 8003260:	4654      	mov	r4, sl
 8003262:	2205      	movs	r2, #5
 8003264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003268:	4851      	ldr	r0, [pc, #324]	; (80033b0 <_svfiprintf_r+0x1ec>)
 800326a:	f7fc ffc1 	bl	80001f0 <memchr>
 800326e:	9a04      	ldr	r2, [sp, #16]
 8003270:	b9d8      	cbnz	r0, 80032aa <_svfiprintf_r+0xe6>
 8003272:	06d0      	lsls	r0, r2, #27
 8003274:	bf44      	itt	mi
 8003276:	2320      	movmi	r3, #32
 8003278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800327c:	0711      	lsls	r1, r2, #28
 800327e:	bf44      	itt	mi
 8003280:	232b      	movmi	r3, #43	; 0x2b
 8003282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003286:	f89a 3000 	ldrb.w	r3, [sl]
 800328a:	2b2a      	cmp	r3, #42	; 0x2a
 800328c:	d015      	beq.n	80032ba <_svfiprintf_r+0xf6>
 800328e:	9a07      	ldr	r2, [sp, #28]
 8003290:	4654      	mov	r4, sl
 8003292:	2000      	movs	r0, #0
 8003294:	f04f 0c0a 	mov.w	ip, #10
 8003298:	4621      	mov	r1, r4
 800329a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800329e:	3b30      	subs	r3, #48	; 0x30
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d94e      	bls.n	8003342 <_svfiprintf_r+0x17e>
 80032a4:	b1b0      	cbz	r0, 80032d4 <_svfiprintf_r+0x110>
 80032a6:	9207      	str	r2, [sp, #28]
 80032a8:	e014      	b.n	80032d4 <_svfiprintf_r+0x110>
 80032aa:	eba0 0308 	sub.w	r3, r0, r8
 80032ae:	fa09 f303 	lsl.w	r3, r9, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	9304      	str	r3, [sp, #16]
 80032b6:	46a2      	mov	sl, r4
 80032b8:	e7d2      	b.n	8003260 <_svfiprintf_r+0x9c>
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	1d19      	adds	r1, r3, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	9103      	str	r1, [sp, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bfbb      	ittet	lt
 80032c6:	425b      	neglt	r3, r3
 80032c8:	f042 0202 	orrlt.w	r2, r2, #2
 80032cc:	9307      	strge	r3, [sp, #28]
 80032ce:	9307      	strlt	r3, [sp, #28]
 80032d0:	bfb8      	it	lt
 80032d2:	9204      	strlt	r2, [sp, #16]
 80032d4:	7823      	ldrb	r3, [r4, #0]
 80032d6:	2b2e      	cmp	r3, #46	; 0x2e
 80032d8:	d10c      	bne.n	80032f4 <_svfiprintf_r+0x130>
 80032da:	7863      	ldrb	r3, [r4, #1]
 80032dc:	2b2a      	cmp	r3, #42	; 0x2a
 80032de:	d135      	bne.n	800334c <_svfiprintf_r+0x188>
 80032e0:	9b03      	ldr	r3, [sp, #12]
 80032e2:	1d1a      	adds	r2, r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	9203      	str	r2, [sp, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bfb8      	it	lt
 80032ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80032f0:	3402      	adds	r4, #2
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80033c0 <_svfiprintf_r+0x1fc>
 80032f8:	7821      	ldrb	r1, [r4, #0]
 80032fa:	2203      	movs	r2, #3
 80032fc:	4650      	mov	r0, sl
 80032fe:	f7fc ff77 	bl	80001f0 <memchr>
 8003302:	b140      	cbz	r0, 8003316 <_svfiprintf_r+0x152>
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	eba0 000a 	sub.w	r0, r0, sl
 800330a:	fa03 f000 	lsl.w	r0, r3, r0
 800330e:	9b04      	ldr	r3, [sp, #16]
 8003310:	4303      	orrs	r3, r0
 8003312:	3401      	adds	r4, #1
 8003314:	9304      	str	r3, [sp, #16]
 8003316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800331a:	4826      	ldr	r0, [pc, #152]	; (80033b4 <_svfiprintf_r+0x1f0>)
 800331c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003320:	2206      	movs	r2, #6
 8003322:	f7fc ff65 	bl	80001f0 <memchr>
 8003326:	2800      	cmp	r0, #0
 8003328:	d038      	beq.n	800339c <_svfiprintf_r+0x1d8>
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <_svfiprintf_r+0x1f4>)
 800332c:	bb1b      	cbnz	r3, 8003376 <_svfiprintf_r+0x1b2>
 800332e:	9b03      	ldr	r3, [sp, #12]
 8003330:	3307      	adds	r3, #7
 8003332:	f023 0307 	bic.w	r3, r3, #7
 8003336:	3308      	adds	r3, #8
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800333c:	4433      	add	r3, r6
 800333e:	9309      	str	r3, [sp, #36]	; 0x24
 8003340:	e767      	b.n	8003212 <_svfiprintf_r+0x4e>
 8003342:	fb0c 3202 	mla	r2, ip, r2, r3
 8003346:	460c      	mov	r4, r1
 8003348:	2001      	movs	r0, #1
 800334a:	e7a5      	b.n	8003298 <_svfiprintf_r+0xd4>
 800334c:	2300      	movs	r3, #0
 800334e:	3401      	adds	r4, #1
 8003350:	9305      	str	r3, [sp, #20]
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 0c0a 	mov.w	ip, #10
 8003358:	4620      	mov	r0, r4
 800335a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800335e:	3a30      	subs	r2, #48	; 0x30
 8003360:	2a09      	cmp	r2, #9
 8003362:	d903      	bls.n	800336c <_svfiprintf_r+0x1a8>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0c5      	beq.n	80032f4 <_svfiprintf_r+0x130>
 8003368:	9105      	str	r1, [sp, #20]
 800336a:	e7c3      	b.n	80032f4 <_svfiprintf_r+0x130>
 800336c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003370:	4604      	mov	r4, r0
 8003372:	2301      	movs	r3, #1
 8003374:	e7f0      	b.n	8003358 <_svfiprintf_r+0x194>
 8003376:	ab03      	add	r3, sp, #12
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	462a      	mov	r2, r5
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <_svfiprintf_r+0x1f8>)
 800337e:	a904      	add	r1, sp, #16
 8003380:	4638      	mov	r0, r7
 8003382:	f3af 8000 	nop.w
 8003386:	1c42      	adds	r2, r0, #1
 8003388:	4606      	mov	r6, r0
 800338a:	d1d6      	bne.n	800333a <_svfiprintf_r+0x176>
 800338c:	89ab      	ldrh	r3, [r5, #12]
 800338e:	065b      	lsls	r3, r3, #25
 8003390:	f53f af2c 	bmi.w	80031ec <_svfiprintf_r+0x28>
 8003394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003396:	b01d      	add	sp, #116	; 0x74
 8003398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339c:	ab03      	add	r3, sp, #12
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	462a      	mov	r2, r5
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <_svfiprintf_r+0x1f8>)
 80033a4:	a904      	add	r1, sp, #16
 80033a6:	4638      	mov	r0, r7
 80033a8:	f000 f87a 	bl	80034a0 <_printf_i>
 80033ac:	e7eb      	b.n	8003386 <_svfiprintf_r+0x1c2>
 80033ae:	bf00      	nop
 80033b0:	08003a3c 	.word	0x08003a3c
 80033b4:	08003a46 	.word	0x08003a46
 80033b8:	00000000 	.word	0x00000000
 80033bc:	0800310d 	.word	0x0800310d
 80033c0:	08003a42 	.word	0x08003a42

080033c4 <_printf_common>:
 80033c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c8:	4616      	mov	r6, r2
 80033ca:	4699      	mov	r9, r3
 80033cc:	688a      	ldr	r2, [r1, #8]
 80033ce:	690b      	ldr	r3, [r1, #16]
 80033d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bfb8      	it	lt
 80033d8:	4613      	movlt	r3, r2
 80033da:	6033      	str	r3, [r6, #0]
 80033dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033e0:	4607      	mov	r7, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	b10a      	cbz	r2, 80033ea <_printf_common+0x26>
 80033e6:	3301      	adds	r3, #1
 80033e8:	6033      	str	r3, [r6, #0]
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	0699      	lsls	r1, r3, #26
 80033ee:	bf42      	ittt	mi
 80033f0:	6833      	ldrmi	r3, [r6, #0]
 80033f2:	3302      	addmi	r3, #2
 80033f4:	6033      	strmi	r3, [r6, #0]
 80033f6:	6825      	ldr	r5, [r4, #0]
 80033f8:	f015 0506 	ands.w	r5, r5, #6
 80033fc:	d106      	bne.n	800340c <_printf_common+0x48>
 80033fe:	f104 0a19 	add.w	sl, r4, #25
 8003402:	68e3      	ldr	r3, [r4, #12]
 8003404:	6832      	ldr	r2, [r6, #0]
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	42ab      	cmp	r3, r5
 800340a:	dc26      	bgt.n	800345a <_printf_common+0x96>
 800340c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003410:	1e13      	subs	r3, r2, #0
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	bf18      	it	ne
 8003416:	2301      	movne	r3, #1
 8003418:	0692      	lsls	r2, r2, #26
 800341a:	d42b      	bmi.n	8003474 <_printf_common+0xb0>
 800341c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003420:	4649      	mov	r1, r9
 8003422:	4638      	mov	r0, r7
 8003424:	47c0      	blx	r8
 8003426:	3001      	adds	r0, #1
 8003428:	d01e      	beq.n	8003468 <_printf_common+0xa4>
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	68e5      	ldr	r5, [r4, #12]
 800342e:	6832      	ldr	r2, [r6, #0]
 8003430:	f003 0306 	and.w	r3, r3, #6
 8003434:	2b04      	cmp	r3, #4
 8003436:	bf08      	it	eq
 8003438:	1aad      	subeq	r5, r5, r2
 800343a:	68a3      	ldr	r3, [r4, #8]
 800343c:	6922      	ldr	r2, [r4, #16]
 800343e:	bf0c      	ite	eq
 8003440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003444:	2500      	movne	r5, #0
 8003446:	4293      	cmp	r3, r2
 8003448:	bfc4      	itt	gt
 800344a:	1a9b      	subgt	r3, r3, r2
 800344c:	18ed      	addgt	r5, r5, r3
 800344e:	2600      	movs	r6, #0
 8003450:	341a      	adds	r4, #26
 8003452:	42b5      	cmp	r5, r6
 8003454:	d11a      	bne.n	800348c <_printf_common+0xc8>
 8003456:	2000      	movs	r0, #0
 8003458:	e008      	b.n	800346c <_printf_common+0xa8>
 800345a:	2301      	movs	r3, #1
 800345c:	4652      	mov	r2, sl
 800345e:	4649      	mov	r1, r9
 8003460:	4638      	mov	r0, r7
 8003462:	47c0      	blx	r8
 8003464:	3001      	adds	r0, #1
 8003466:	d103      	bne.n	8003470 <_printf_common+0xac>
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003470:	3501      	adds	r5, #1
 8003472:	e7c6      	b.n	8003402 <_printf_common+0x3e>
 8003474:	18e1      	adds	r1, r4, r3
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	2030      	movs	r0, #48	; 0x30
 800347a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800347e:	4422      	add	r2, r4
 8003480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003488:	3302      	adds	r3, #2
 800348a:	e7c7      	b.n	800341c <_printf_common+0x58>
 800348c:	2301      	movs	r3, #1
 800348e:	4622      	mov	r2, r4
 8003490:	4649      	mov	r1, r9
 8003492:	4638      	mov	r0, r7
 8003494:	47c0      	blx	r8
 8003496:	3001      	adds	r0, #1
 8003498:	d0e6      	beq.n	8003468 <_printf_common+0xa4>
 800349a:	3601      	adds	r6, #1
 800349c:	e7d9      	b.n	8003452 <_printf_common+0x8e>
	...

080034a0 <_printf_i>:
 80034a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	460c      	mov	r4, r1
 80034a6:	4691      	mov	r9, r2
 80034a8:	7e27      	ldrb	r7, [r4, #24]
 80034aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034ac:	2f78      	cmp	r7, #120	; 0x78
 80034ae:	4680      	mov	r8, r0
 80034b0:	469a      	mov	sl, r3
 80034b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b6:	d807      	bhi.n	80034c8 <_printf_i+0x28>
 80034b8:	2f62      	cmp	r7, #98	; 0x62
 80034ba:	d80a      	bhi.n	80034d2 <_printf_i+0x32>
 80034bc:	2f00      	cmp	r7, #0
 80034be:	f000 80d8 	beq.w	8003672 <_printf_i+0x1d2>
 80034c2:	2f58      	cmp	r7, #88	; 0x58
 80034c4:	f000 80a3 	beq.w	800360e <_printf_i+0x16e>
 80034c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034d0:	e03a      	b.n	8003548 <_printf_i+0xa8>
 80034d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034d6:	2b15      	cmp	r3, #21
 80034d8:	d8f6      	bhi.n	80034c8 <_printf_i+0x28>
 80034da:	a001      	add	r0, pc, #4	; (adr r0, 80034e0 <_printf_i+0x40>)
 80034dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80034e0:	08003539 	.word	0x08003539
 80034e4:	0800354d 	.word	0x0800354d
 80034e8:	080034c9 	.word	0x080034c9
 80034ec:	080034c9 	.word	0x080034c9
 80034f0:	080034c9 	.word	0x080034c9
 80034f4:	080034c9 	.word	0x080034c9
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	080034c9 	.word	0x080034c9
 8003500:	080034c9 	.word	0x080034c9
 8003504:	080034c9 	.word	0x080034c9
 8003508:	080034c9 	.word	0x080034c9
 800350c:	08003659 	.word	0x08003659
 8003510:	0800357d 	.word	0x0800357d
 8003514:	0800363b 	.word	0x0800363b
 8003518:	080034c9 	.word	0x080034c9
 800351c:	080034c9 	.word	0x080034c9
 8003520:	0800367b 	.word	0x0800367b
 8003524:	080034c9 	.word	0x080034c9
 8003528:	0800357d 	.word	0x0800357d
 800352c:	080034c9 	.word	0x080034c9
 8003530:	080034c9 	.word	0x080034c9
 8003534:	08003643 	.word	0x08003643
 8003538:	680b      	ldr	r3, [r1, #0]
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	600a      	str	r2, [r1, #0]
 8003540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003548:	2301      	movs	r3, #1
 800354a:	e0a3      	b.n	8003694 <_printf_i+0x1f4>
 800354c:	6825      	ldr	r5, [r4, #0]
 800354e:	6808      	ldr	r0, [r1, #0]
 8003550:	062e      	lsls	r6, r5, #24
 8003552:	f100 0304 	add.w	r3, r0, #4
 8003556:	d50a      	bpl.n	800356e <_printf_i+0xce>
 8003558:	6805      	ldr	r5, [r0, #0]
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	2d00      	cmp	r5, #0
 800355e:	da03      	bge.n	8003568 <_printf_i+0xc8>
 8003560:	232d      	movs	r3, #45	; 0x2d
 8003562:	426d      	negs	r5, r5
 8003564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003568:	485e      	ldr	r0, [pc, #376]	; (80036e4 <_printf_i+0x244>)
 800356a:	230a      	movs	r3, #10
 800356c:	e019      	b.n	80035a2 <_printf_i+0x102>
 800356e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003572:	6805      	ldr	r5, [r0, #0]
 8003574:	600b      	str	r3, [r1, #0]
 8003576:	bf18      	it	ne
 8003578:	b22d      	sxthne	r5, r5
 800357a:	e7ef      	b.n	800355c <_printf_i+0xbc>
 800357c:	680b      	ldr	r3, [r1, #0]
 800357e:	6825      	ldr	r5, [r4, #0]
 8003580:	1d18      	adds	r0, r3, #4
 8003582:	6008      	str	r0, [r1, #0]
 8003584:	0628      	lsls	r0, r5, #24
 8003586:	d501      	bpl.n	800358c <_printf_i+0xec>
 8003588:	681d      	ldr	r5, [r3, #0]
 800358a:	e002      	b.n	8003592 <_printf_i+0xf2>
 800358c:	0669      	lsls	r1, r5, #25
 800358e:	d5fb      	bpl.n	8003588 <_printf_i+0xe8>
 8003590:	881d      	ldrh	r5, [r3, #0]
 8003592:	4854      	ldr	r0, [pc, #336]	; (80036e4 <_printf_i+0x244>)
 8003594:	2f6f      	cmp	r7, #111	; 0x6f
 8003596:	bf0c      	ite	eq
 8003598:	2308      	moveq	r3, #8
 800359a:	230a      	movne	r3, #10
 800359c:	2100      	movs	r1, #0
 800359e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035a2:	6866      	ldr	r6, [r4, #4]
 80035a4:	60a6      	str	r6, [r4, #8]
 80035a6:	2e00      	cmp	r6, #0
 80035a8:	bfa2      	ittt	ge
 80035aa:	6821      	ldrge	r1, [r4, #0]
 80035ac:	f021 0104 	bicge.w	r1, r1, #4
 80035b0:	6021      	strge	r1, [r4, #0]
 80035b2:	b90d      	cbnz	r5, 80035b8 <_printf_i+0x118>
 80035b4:	2e00      	cmp	r6, #0
 80035b6:	d04d      	beq.n	8003654 <_printf_i+0x1b4>
 80035b8:	4616      	mov	r6, r2
 80035ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80035be:	fb03 5711 	mls	r7, r3, r1, r5
 80035c2:	5dc7      	ldrb	r7, [r0, r7]
 80035c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035c8:	462f      	mov	r7, r5
 80035ca:	42bb      	cmp	r3, r7
 80035cc:	460d      	mov	r5, r1
 80035ce:	d9f4      	bls.n	80035ba <_printf_i+0x11a>
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d10b      	bne.n	80035ec <_printf_i+0x14c>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	07df      	lsls	r7, r3, #31
 80035d8:	d508      	bpl.n	80035ec <_printf_i+0x14c>
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	6861      	ldr	r1, [r4, #4]
 80035de:	4299      	cmp	r1, r3
 80035e0:	bfde      	ittt	le
 80035e2:	2330      	movle	r3, #48	; 0x30
 80035e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035ec:	1b92      	subs	r2, r2, r6
 80035ee:	6122      	str	r2, [r4, #16]
 80035f0:	f8cd a000 	str.w	sl, [sp]
 80035f4:	464b      	mov	r3, r9
 80035f6:	aa03      	add	r2, sp, #12
 80035f8:	4621      	mov	r1, r4
 80035fa:	4640      	mov	r0, r8
 80035fc:	f7ff fee2 	bl	80033c4 <_printf_common>
 8003600:	3001      	adds	r0, #1
 8003602:	d14c      	bne.n	800369e <_printf_i+0x1fe>
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	b004      	add	sp, #16
 800360a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360e:	4835      	ldr	r0, [pc, #212]	; (80036e4 <_printf_i+0x244>)
 8003610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	680e      	ldr	r6, [r1, #0]
 8003618:	061f      	lsls	r7, r3, #24
 800361a:	f856 5b04 	ldr.w	r5, [r6], #4
 800361e:	600e      	str	r6, [r1, #0]
 8003620:	d514      	bpl.n	800364c <_printf_i+0x1ac>
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	bf44      	itt	mi
 8003626:	f043 0320 	orrmi.w	r3, r3, #32
 800362a:	6023      	strmi	r3, [r4, #0]
 800362c:	b91d      	cbnz	r5, 8003636 <_printf_i+0x196>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f023 0320 	bic.w	r3, r3, #32
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	2310      	movs	r3, #16
 8003638:	e7b0      	b.n	800359c <_printf_i+0xfc>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	f043 0320 	orr.w	r3, r3, #32
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	2378      	movs	r3, #120	; 0x78
 8003644:	4828      	ldr	r0, [pc, #160]	; (80036e8 <_printf_i+0x248>)
 8003646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800364a:	e7e3      	b.n	8003614 <_printf_i+0x174>
 800364c:	065e      	lsls	r6, r3, #25
 800364e:	bf48      	it	mi
 8003650:	b2ad      	uxthmi	r5, r5
 8003652:	e7e6      	b.n	8003622 <_printf_i+0x182>
 8003654:	4616      	mov	r6, r2
 8003656:	e7bb      	b.n	80035d0 <_printf_i+0x130>
 8003658:	680b      	ldr	r3, [r1, #0]
 800365a:	6826      	ldr	r6, [r4, #0]
 800365c:	6960      	ldr	r0, [r4, #20]
 800365e:	1d1d      	adds	r5, r3, #4
 8003660:	600d      	str	r5, [r1, #0]
 8003662:	0635      	lsls	r5, r6, #24
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	d501      	bpl.n	800366c <_printf_i+0x1cc>
 8003668:	6018      	str	r0, [r3, #0]
 800366a:	e002      	b.n	8003672 <_printf_i+0x1d2>
 800366c:	0671      	lsls	r1, r6, #25
 800366e:	d5fb      	bpl.n	8003668 <_printf_i+0x1c8>
 8003670:	8018      	strh	r0, [r3, #0]
 8003672:	2300      	movs	r3, #0
 8003674:	6123      	str	r3, [r4, #16]
 8003676:	4616      	mov	r6, r2
 8003678:	e7ba      	b.n	80035f0 <_printf_i+0x150>
 800367a:	680b      	ldr	r3, [r1, #0]
 800367c:	1d1a      	adds	r2, r3, #4
 800367e:	600a      	str	r2, [r1, #0]
 8003680:	681e      	ldr	r6, [r3, #0]
 8003682:	6862      	ldr	r2, [r4, #4]
 8003684:	2100      	movs	r1, #0
 8003686:	4630      	mov	r0, r6
 8003688:	f7fc fdb2 	bl	80001f0 <memchr>
 800368c:	b108      	cbz	r0, 8003692 <_printf_i+0x1f2>
 800368e:	1b80      	subs	r0, r0, r6
 8003690:	6060      	str	r0, [r4, #4]
 8003692:	6863      	ldr	r3, [r4, #4]
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	2300      	movs	r3, #0
 8003698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800369c:	e7a8      	b.n	80035f0 <_printf_i+0x150>
 800369e:	6923      	ldr	r3, [r4, #16]
 80036a0:	4632      	mov	r2, r6
 80036a2:	4649      	mov	r1, r9
 80036a4:	4640      	mov	r0, r8
 80036a6:	47d0      	blx	sl
 80036a8:	3001      	adds	r0, #1
 80036aa:	d0ab      	beq.n	8003604 <_printf_i+0x164>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	079b      	lsls	r3, r3, #30
 80036b0:	d413      	bmi.n	80036da <_printf_i+0x23a>
 80036b2:	68e0      	ldr	r0, [r4, #12]
 80036b4:	9b03      	ldr	r3, [sp, #12]
 80036b6:	4298      	cmp	r0, r3
 80036b8:	bfb8      	it	lt
 80036ba:	4618      	movlt	r0, r3
 80036bc:	e7a4      	b.n	8003608 <_printf_i+0x168>
 80036be:	2301      	movs	r3, #1
 80036c0:	4632      	mov	r2, r6
 80036c2:	4649      	mov	r1, r9
 80036c4:	4640      	mov	r0, r8
 80036c6:	47d0      	blx	sl
 80036c8:	3001      	adds	r0, #1
 80036ca:	d09b      	beq.n	8003604 <_printf_i+0x164>
 80036cc:	3501      	adds	r5, #1
 80036ce:	68e3      	ldr	r3, [r4, #12]
 80036d0:	9903      	ldr	r1, [sp, #12]
 80036d2:	1a5b      	subs	r3, r3, r1
 80036d4:	42ab      	cmp	r3, r5
 80036d6:	dcf2      	bgt.n	80036be <_printf_i+0x21e>
 80036d8:	e7eb      	b.n	80036b2 <_printf_i+0x212>
 80036da:	2500      	movs	r5, #0
 80036dc:	f104 0619 	add.w	r6, r4, #25
 80036e0:	e7f5      	b.n	80036ce <_printf_i+0x22e>
 80036e2:	bf00      	nop
 80036e4:	08003a4d 	.word	0x08003a4d
 80036e8:	08003a5e 	.word	0x08003a5e

080036ec <memcpy>:
 80036ec:	440a      	add	r2, r1
 80036ee:	4291      	cmp	r1, r2
 80036f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f4:	d100      	bne.n	80036f8 <memcpy+0xc>
 80036f6:	4770      	bx	lr
 80036f8:	b510      	push	{r4, lr}
 80036fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003702:	4291      	cmp	r1, r2
 8003704:	d1f9      	bne.n	80036fa <memcpy+0xe>
 8003706:	bd10      	pop	{r4, pc}

08003708 <memmove>:
 8003708:	4288      	cmp	r0, r1
 800370a:	b510      	push	{r4, lr}
 800370c:	eb01 0402 	add.w	r4, r1, r2
 8003710:	d902      	bls.n	8003718 <memmove+0x10>
 8003712:	4284      	cmp	r4, r0
 8003714:	4623      	mov	r3, r4
 8003716:	d807      	bhi.n	8003728 <memmove+0x20>
 8003718:	1e43      	subs	r3, r0, #1
 800371a:	42a1      	cmp	r1, r4
 800371c:	d008      	beq.n	8003730 <memmove+0x28>
 800371e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003726:	e7f8      	b.n	800371a <memmove+0x12>
 8003728:	4402      	add	r2, r0
 800372a:	4601      	mov	r1, r0
 800372c:	428a      	cmp	r2, r1
 800372e:	d100      	bne.n	8003732 <memmove+0x2a>
 8003730:	bd10      	pop	{r4, pc}
 8003732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800373a:	e7f7      	b.n	800372c <memmove+0x24>

0800373c <_free_r>:
 800373c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800373e:	2900      	cmp	r1, #0
 8003740:	d048      	beq.n	80037d4 <_free_r+0x98>
 8003742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003746:	9001      	str	r0, [sp, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f1a1 0404 	sub.w	r4, r1, #4
 800374e:	bfb8      	it	lt
 8003750:	18e4      	addlt	r4, r4, r3
 8003752:	f000 f8d3 	bl	80038fc <__malloc_lock>
 8003756:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <_free_r+0x9c>)
 8003758:	9801      	ldr	r0, [sp, #4]
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	4615      	mov	r5, r2
 800375e:	b933      	cbnz	r3, 800376e <_free_r+0x32>
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6014      	str	r4, [r2, #0]
 8003764:	b003      	add	sp, #12
 8003766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800376a:	f000 b8cd 	b.w	8003908 <__malloc_unlock>
 800376e:	42a3      	cmp	r3, r4
 8003770:	d90b      	bls.n	800378a <_free_r+0x4e>
 8003772:	6821      	ldr	r1, [r4, #0]
 8003774:	1862      	adds	r2, r4, r1
 8003776:	4293      	cmp	r3, r2
 8003778:	bf04      	itt	eq
 800377a:	681a      	ldreq	r2, [r3, #0]
 800377c:	685b      	ldreq	r3, [r3, #4]
 800377e:	6063      	str	r3, [r4, #4]
 8003780:	bf04      	itt	eq
 8003782:	1852      	addeq	r2, r2, r1
 8003784:	6022      	streq	r2, [r4, #0]
 8003786:	602c      	str	r4, [r5, #0]
 8003788:	e7ec      	b.n	8003764 <_free_r+0x28>
 800378a:	461a      	mov	r2, r3
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b10b      	cbz	r3, 8003794 <_free_r+0x58>
 8003790:	42a3      	cmp	r3, r4
 8003792:	d9fa      	bls.n	800378a <_free_r+0x4e>
 8003794:	6811      	ldr	r1, [r2, #0]
 8003796:	1855      	adds	r5, r2, r1
 8003798:	42a5      	cmp	r5, r4
 800379a:	d10b      	bne.n	80037b4 <_free_r+0x78>
 800379c:	6824      	ldr	r4, [r4, #0]
 800379e:	4421      	add	r1, r4
 80037a0:	1854      	adds	r4, r2, r1
 80037a2:	42a3      	cmp	r3, r4
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	d1dd      	bne.n	8003764 <_free_r+0x28>
 80037a8:	681c      	ldr	r4, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	6053      	str	r3, [r2, #4]
 80037ae:	4421      	add	r1, r4
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	e7d7      	b.n	8003764 <_free_r+0x28>
 80037b4:	d902      	bls.n	80037bc <_free_r+0x80>
 80037b6:	230c      	movs	r3, #12
 80037b8:	6003      	str	r3, [r0, #0]
 80037ba:	e7d3      	b.n	8003764 <_free_r+0x28>
 80037bc:	6825      	ldr	r5, [r4, #0]
 80037be:	1961      	adds	r1, r4, r5
 80037c0:	428b      	cmp	r3, r1
 80037c2:	bf04      	itt	eq
 80037c4:	6819      	ldreq	r1, [r3, #0]
 80037c6:	685b      	ldreq	r3, [r3, #4]
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	bf04      	itt	eq
 80037cc:	1949      	addeq	r1, r1, r5
 80037ce:	6021      	streq	r1, [r4, #0]
 80037d0:	6054      	str	r4, [r2, #4]
 80037d2:	e7c7      	b.n	8003764 <_free_r+0x28>
 80037d4:	b003      	add	sp, #12
 80037d6:	bd30      	pop	{r4, r5, pc}
 80037d8:	2000019c 	.word	0x2000019c

080037dc <_malloc_r>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	1ccd      	adds	r5, r1, #3
 80037e0:	f025 0503 	bic.w	r5, r5, #3
 80037e4:	3508      	adds	r5, #8
 80037e6:	2d0c      	cmp	r5, #12
 80037e8:	bf38      	it	cc
 80037ea:	250c      	movcc	r5, #12
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	4606      	mov	r6, r0
 80037f0:	db01      	blt.n	80037f6 <_malloc_r+0x1a>
 80037f2:	42a9      	cmp	r1, r5
 80037f4:	d903      	bls.n	80037fe <_malloc_r+0x22>
 80037f6:	230c      	movs	r3, #12
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	2000      	movs	r0, #0
 80037fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037fe:	f000 f87d 	bl	80038fc <__malloc_lock>
 8003802:	4921      	ldr	r1, [pc, #132]	; (8003888 <_malloc_r+0xac>)
 8003804:	680a      	ldr	r2, [r1, #0]
 8003806:	4614      	mov	r4, r2
 8003808:	b99c      	cbnz	r4, 8003832 <_malloc_r+0x56>
 800380a:	4f20      	ldr	r7, [pc, #128]	; (800388c <_malloc_r+0xb0>)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b923      	cbnz	r3, 800381a <_malloc_r+0x3e>
 8003810:	4621      	mov	r1, r4
 8003812:	4630      	mov	r0, r6
 8003814:	f000 f862 	bl	80038dc <_sbrk_r>
 8003818:	6038      	str	r0, [r7, #0]
 800381a:	4629      	mov	r1, r5
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f85d 	bl	80038dc <_sbrk_r>
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d123      	bne.n	800386e <_malloc_r+0x92>
 8003826:	230c      	movs	r3, #12
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	4630      	mov	r0, r6
 800382c:	f000 f86c 	bl	8003908 <__malloc_unlock>
 8003830:	e7e3      	b.n	80037fa <_malloc_r+0x1e>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	1b5b      	subs	r3, r3, r5
 8003836:	d417      	bmi.n	8003868 <_malloc_r+0x8c>
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d903      	bls.n	8003844 <_malloc_r+0x68>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	441c      	add	r4, r3
 8003840:	6025      	str	r5, [r4, #0]
 8003842:	e004      	b.n	800384e <_malloc_r+0x72>
 8003844:	6863      	ldr	r3, [r4, #4]
 8003846:	42a2      	cmp	r2, r4
 8003848:	bf0c      	ite	eq
 800384a:	600b      	streq	r3, [r1, #0]
 800384c:	6053      	strne	r3, [r2, #4]
 800384e:	4630      	mov	r0, r6
 8003850:	f000 f85a 	bl	8003908 <__malloc_unlock>
 8003854:	f104 000b 	add.w	r0, r4, #11
 8003858:	1d23      	adds	r3, r4, #4
 800385a:	f020 0007 	bic.w	r0, r0, #7
 800385e:	1ac2      	subs	r2, r0, r3
 8003860:	d0cc      	beq.n	80037fc <_malloc_r+0x20>
 8003862:	1a1b      	subs	r3, r3, r0
 8003864:	50a3      	str	r3, [r4, r2]
 8003866:	e7c9      	b.n	80037fc <_malloc_r+0x20>
 8003868:	4622      	mov	r2, r4
 800386a:	6864      	ldr	r4, [r4, #4]
 800386c:	e7cc      	b.n	8003808 <_malloc_r+0x2c>
 800386e:	1cc4      	adds	r4, r0, #3
 8003870:	f024 0403 	bic.w	r4, r4, #3
 8003874:	42a0      	cmp	r0, r4
 8003876:	d0e3      	beq.n	8003840 <_malloc_r+0x64>
 8003878:	1a21      	subs	r1, r4, r0
 800387a:	4630      	mov	r0, r6
 800387c:	f000 f82e 	bl	80038dc <_sbrk_r>
 8003880:	3001      	adds	r0, #1
 8003882:	d1dd      	bne.n	8003840 <_malloc_r+0x64>
 8003884:	e7cf      	b.n	8003826 <_malloc_r+0x4a>
 8003886:	bf00      	nop
 8003888:	2000019c 	.word	0x2000019c
 800388c:	200001a0 	.word	0x200001a0

08003890 <_realloc_r>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	4607      	mov	r7, r0
 8003894:	4614      	mov	r4, r2
 8003896:	460e      	mov	r6, r1
 8003898:	b921      	cbnz	r1, 80038a4 <_realloc_r+0x14>
 800389a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800389e:	4611      	mov	r1, r2
 80038a0:	f7ff bf9c 	b.w	80037dc <_malloc_r>
 80038a4:	b922      	cbnz	r2, 80038b0 <_realloc_r+0x20>
 80038a6:	f7ff ff49 	bl	800373c <_free_r>
 80038aa:	4625      	mov	r5, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b0:	f000 f830 	bl	8003914 <_malloc_usable_size_r>
 80038b4:	42a0      	cmp	r0, r4
 80038b6:	d20f      	bcs.n	80038d8 <_realloc_r+0x48>
 80038b8:	4621      	mov	r1, r4
 80038ba:	4638      	mov	r0, r7
 80038bc:	f7ff ff8e 	bl	80037dc <_malloc_r>
 80038c0:	4605      	mov	r5, r0
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d0f2      	beq.n	80038ac <_realloc_r+0x1c>
 80038c6:	4631      	mov	r1, r6
 80038c8:	4622      	mov	r2, r4
 80038ca:	f7ff ff0f 	bl	80036ec <memcpy>
 80038ce:	4631      	mov	r1, r6
 80038d0:	4638      	mov	r0, r7
 80038d2:	f7ff ff33 	bl	800373c <_free_r>
 80038d6:	e7e9      	b.n	80038ac <_realloc_r+0x1c>
 80038d8:	4635      	mov	r5, r6
 80038da:	e7e7      	b.n	80038ac <_realloc_r+0x1c>

080038dc <_sbrk_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4d06      	ldr	r5, [pc, #24]	; (80038f8 <_sbrk_r+0x1c>)
 80038e0:	2300      	movs	r3, #0
 80038e2:	4604      	mov	r4, r0
 80038e4:	4608      	mov	r0, r1
 80038e6:	602b      	str	r3, [r5, #0]
 80038e8:	f7fc fefa 	bl	80006e0 <_sbrk>
 80038ec:	1c43      	adds	r3, r0, #1
 80038ee:	d102      	bne.n	80038f6 <_sbrk_r+0x1a>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	b103      	cbz	r3, 80038f6 <_sbrk_r+0x1a>
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	20000250 	.word	0x20000250

080038fc <__malloc_lock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <__malloc_lock+0x8>)
 80038fe:	f000 b811 	b.w	8003924 <__retarget_lock_acquire_recursive>
 8003902:	bf00      	nop
 8003904:	20000258 	.word	0x20000258

08003908 <__malloc_unlock>:
 8003908:	4801      	ldr	r0, [pc, #4]	; (8003910 <__malloc_unlock+0x8>)
 800390a:	f000 b80c 	b.w	8003926 <__retarget_lock_release_recursive>
 800390e:	bf00      	nop
 8003910:	20000258 	.word	0x20000258

08003914 <_malloc_usable_size_r>:
 8003914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003918:	1f18      	subs	r0, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	bfbc      	itt	lt
 800391e:	580b      	ldrlt	r3, [r1, r0]
 8003920:	18c0      	addlt	r0, r0, r3
 8003922:	4770      	bx	lr

08003924 <__retarget_lock_acquire_recursive>:
 8003924:	4770      	bx	lr

08003926 <__retarget_lock_release_recursive>:
 8003926:	4770      	bx	lr

08003928 <_init>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	bf00      	nop
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr

08003934 <_fini>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr
