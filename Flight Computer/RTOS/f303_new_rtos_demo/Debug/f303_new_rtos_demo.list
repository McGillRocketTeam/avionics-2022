
f303_new_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a224  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800a3c8  0800a3c8  0001a3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa74  0800aa74  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa74  0800aa74  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa74  0800aa74  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa74  0800aa74  0001aa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa78  0800aa78  0001aa78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aa7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00002a98  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c78  20002c78  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb3a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039f4  00000000  00000000  0003fd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  00043740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  00044c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000049ac  00000000  00000000  000460a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198ea  00000000  00000000  0004aa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae3f  00000000  00000000  0006433e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f17d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b24  00000000  00000000  0013f1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3ac 	.word	0x0800a3ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a3ac 	.word	0x0800a3ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <myprintf>:
void StartFakeSensors(void *argument);
void StartFakeTelemetry(void *argument);
void StartFakeEjection(void *argument);

/* USER CODE BEGIN PFP */
void myprintf(char* buffer) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, 100, 100);
 8000bc0:	2364      	movs	r3, #100	; 0x64
 8000bc2:	2264      	movs	r2, #100	; 0x64
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <myprintf+0x1c>)
 8000bc8:	f003 fb34 	bl	8004234 <HAL_UART_Transmit>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20002a44 	.word	0x20002a44

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fe30 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f83c 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f980 	bl	8000ee8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 f94e 	bl	8000e88 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000bec:	f000 f924 	bl	8000e38 <MX_TIM16_Init>
  MX_RTC_Init();
 8000bf0:	f000 f890 	bl	8000d14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000bf4:	480f      	ldr	r0, [pc, #60]	; (8000c34 <main+0x5c>)
 8000bf6:	f003 f85b 	bl	8003cb0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bfa:	f003 ff35 	bl	8004a68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of fakeSensors */
  fakeSensorsHandle = osThreadNew(StartFakeSensors, NULL, &fakeSensors_attributes);
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <main+0x60>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <main+0x64>)
 8000c04:	f003 ff98 	bl	8004b38 <osThreadNew>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <main+0x68>)
 8000c0c:	6013      	str	r3, [r2, #0]

  /* creation of fakeTelemetry */
  fakeTelemetryHandle = osThreadNew(StartFakeTelemetry, NULL, &fakeTelemetry_attributes);
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <main+0x6c>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <main+0x70>)
 8000c14:	f003 ff90 	bl	8004b38 <osThreadNew>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <main+0x74>)
 8000c1c:	6013      	str	r3, [r2, #0]

  /* creation of fakeEjection */
  fakeEjectionHandle = osThreadNew(StartFakeEjection, NULL, &fakeEjection_attributes);
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <main+0x78>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <main+0x7c>)
 8000c24:	f003 ff88 	bl	8004b38 <osThreadNew>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <main+0x80>)
 8000c2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c2e:	f003 ff4f 	bl	8004ad0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <main+0x5a>
 8000c34:	20002acc 	.word	0x20002acc
 8000c38:	0800a5ec 	.word	0x0800a5ec
 8000c3c:	080011b1 	.word	0x080011b1
 8000c40:	20002ac8 	.word	0x20002ac8
 8000c44:	0800a610 	.word	0x0800a610
 8000c48:	080012a5 	.word	0x080012a5
 8000c4c:	2000246c 	.word	0x2000246c
 8000c50:	0800a634 	.word	0x0800a634
 8000c54:	0800130d 	.word	0x0800130d
 8000c58:	20002468 	.word	0x20002468

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0a6      	sub	sp, #152	; 0x98
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c66:	2228      	movs	r2, #40	; 0x28
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 fda8 	bl	80077c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2258      	movs	r2, #88	; 0x58
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f006 fd9a 	bl	80077c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 f88e 	bl	8001dcc <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000cb6:	f000 fb85 	bl	80013c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 ff8f 	bl	8002bf8 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ce0:	f000 fb70 	bl	80013c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <SystemClock_Config+0xb4>)
 8000ce6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f9e5 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d04:	f000 fb5e 	bl	80013c4 <Error_Handler>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3798      	adds	r7, #152	; 0x98
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	00810002 	.word	0x00810002

08000d14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b090      	sub	sp, #64	; 0x40
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2228      	movs	r2, #40	; 0x28
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 fd43 	bl	80077c0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d3c:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <MX_RTC_Init+0x120>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d40:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d48:	227f      	movs	r2, #127	; 0x7f
 8000d4a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d4e:	22ff      	movs	r2, #255	; 0xff
 8000d50:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d64:	4832      	ldr	r0, [pc, #200]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d66:	f002 fbcd 	bl	8003504 <HAL_RTC_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d70:	f000 fb28 	bl	80013c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 8000d74:	2319      	movs	r3, #25
 8000d76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x5;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d92:	2201      	movs	r2, #1
 8000d94:	4619      	mov	r1, r3
 8000d96:	4826      	ldr	r0, [pc, #152]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000d98:	f002 fc45 	bl	8003626 <HAL_RTC_SetTime>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000da2:	f000 fb0f 	bl	80013c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000dac:	2301      	movs	r3, #1
 8000dae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481a      	ldr	r0, [pc, #104]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000dc8:	f002 fcea 	bl	80037a0 <HAL_RTC_SetDate>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000dd2:	f000 faf7 	bl	80013c4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x19;
 8000dd6:	2319      	movs	r3, #25
 8000dd8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x10;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4808      	ldr	r0, [pc, #32]	; (8000e30 <MX_RTC_Init+0x11c>)
 8000e0e:	f002 fd6e 	bl	80038ee <HAL_RTC_SetAlarm>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000e18:	f000 fad4 	bl	80013c4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	707b      	strb	r3, [r7, #1]
  sAlarm.Alarm = RTC_ALARM_B;
 8000e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	; 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20002554 	.word	0x20002554
 8000e34:	40002800 	.word	0x40002800

08000e38 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <MX_TIM16_Init+0x4c>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e44:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e48:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 14999;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e52:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000e56:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_TIM16_Init+0x48>)
 8000e6c:	f002 fec9 	bl	8003c02 <HAL_TIM_Base_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000e76:	f000 faa5 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20002acc 	.word	0x20002acc
 8000e84:	40014400 	.word	0x40014400

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <MX_USART2_UART_Init+0x5c>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000e94:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ecc:	f003 f964 	bl	8004198 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f000 fa75 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20002a44 	.word	0x20002a44
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_GPIO_Init+0x2c>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <MX_GPIO_Init+0x2c>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_GPIO_Init+0x2c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
// Callbacks
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	sprintf((char*) msg, "Alarm A callback entered\r\n");
 8000f20:	493f      	ldr	r1, [pc, #252]	; (8001020 <HAL_RTC_AlarmAEventCallback+0x108>)
 8000f22:	4840      	ldr	r0, [pc, #256]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000f24:	f007 f9e2 	bl	80082ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char const*) msg), 1000);
 8000f28:	483e      	ldr	r0, [pc, #248]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000f2a:	f7ff f959 	bl	80001e0 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	493b      	ldr	r1, [pc, #236]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000f38:	483b      	ldr	r0, [pc, #236]	; (8001028 <HAL_RTC_AlarmAEventCallback+0x110>)
 8000f3a:	f003 f97b 	bl	8004234 <HAL_UART_Transmit>
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
			__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF),
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf14      	ite	ne
 8000f4c:	2301      	movne	r3, #1
 8000f4e:	2300      	moveq	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
			__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
	sprintf((char*) msg, "alarmA flag: %d\talarmB flag: %d\r\n\n",
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4930      	ldr	r1, [pc, #192]	; (800102c <HAL_RTC_AlarmAEventCallback+0x114>)
 8000f6a:	482e      	ldr	r0, [pc, #184]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000f6c:	f007 f9be 	bl	80082ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000f70:	482c      	ldr	r0, [pc, #176]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000f72:	f7ff f935 	bl	80001e0 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	4929      	ldr	r1, [pc, #164]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <HAL_RTC_AlarmAEventCallback+0x110>)
 8000f82:	f003 f957 	bl	8004234 <HAL_UART_Transmit>
	// clear the alarm flag
		__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	22ca      	movs	r2, #202	; 0xca
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2253      	movs	r2, #83	; 0x53
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RTC_AlarmAEventCallback+0x92>
			__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8000fa8:	60da      	str	r2, [r3, #12]
		while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1ef      	bne.n	8000f98 <HAL_RTC_AlarmAEventCallback+0x80>
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_RTC_AlarmAEventCallback+0x118>)
 8000fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc6:	615a      	str	r2, [r3, #20]

		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
					__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF),
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf14      	ite	ne
 8000fd6:	2301      	movne	r3, #1
 8000fd8:	2300      	moveq	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
					__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
		sprintf((char*) msg, "alarmA flag after clear: %d\talarmB flag: %d\r\n\n",
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf14      	ite	ne
 8000fec:	2301      	movne	r3, #1
 8000fee:	2300      	moveq	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4910      	ldr	r1, [pc, #64]	; (8001034 <HAL_RTC_AlarmAEventCallback+0x11c>)
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000ff6:	f007 f979 	bl	80082ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 8000ffc:	f7ff f8f0 	bl	80001e0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	b29a      	uxth	r2, r3
 8001004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001008:	4906      	ldr	r1, [pc, #24]	; (8001024 <HAL_RTC_AlarmAEventCallback+0x10c>)
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <HAL_RTC_AlarmAEventCallback+0x110>)
 800100c:	f003 f912 	bl	8004234 <HAL_UART_Transmit>
	alarmAOccurred = 1;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_RTC_AlarmAEventCallback+0x120>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	0800a3f4 	.word	0x0800a3f4
 8001024:	20002000 	.word	0x20002000
 8001028:	20002a44 	.word	0x20002a44
 800102c:	0800a410 	.word	0x0800a410
 8001030:	40010400 	.word	0x40010400
 8001034:	0800a434 	.word	0x0800a434
 8001038:	200001fc 	.word	0x200001fc

0800103c <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	sprintf((char *)msg, "Alarm B callback entered\r\n");
 8001044:	4946      	ldr	r1, [pc, #280]	; (8001160 <HAL_RTCEx_AlarmBEventCallback+0x124>)
 8001046:	4847      	ldr	r0, [pc, #284]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8001048:	f007 f950 	bl	80082ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char const *)msg), 1000);
 800104c:	4845      	ldr	r0, [pc, #276]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 800104e:	f7ff f8c7 	bl	80001e0 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	b29a      	uxth	r2, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	4942      	ldr	r1, [pc, #264]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 800105c:	4842      	ldr	r0, [pc, #264]	; (8001168 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 800105e:	f003 f8e9 	bl	8004234 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char const *)msg), 1000);
 8001062:	4840      	ldr	r0, [pc, #256]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8001064:	f7ff f8bc 	bl	80001e0 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001070:	493c      	ldr	r1, [pc, #240]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8001072:	483d      	ldr	r0, [pc, #244]	; (8001168 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 8001074:	f003 f8de 	bl	8004234 <HAL_UART_Transmit>
		sprintf((char*) msg, "before clear attempt: alarmA flag: %d\talarmB flag: %d\r\n\n", __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF), __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf14      	ite	ne
 8001086:	2301      	movne	r3, #1
 8001088:	2300      	moveq	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4932      	ldr	r1, [pc, #200]	; (800116c <HAL_RTCEx_AlarmBEventCallback+0x130>)
 80010a4:	482f      	ldr	r0, [pc, #188]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 80010a6:	f007 f921 	bl	80082ec <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 80010aa:	482e      	ldr	r0, [pc, #184]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 80010ac:	f7ff f898 	bl	80001e0 <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b8:	492a      	ldr	r1, [pc, #168]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 80010ba:	482b      	ldr	r0, [pc, #172]	; (8001168 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 80010bc:	f003 f8ba 	bl	8004234 <HAL_UART_Transmit>

	// clear the alarm flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	22ca      	movs	r2, #202	; 0xca
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2253      	movs	r2, #83	; 0x53
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RTCEx_AlarmBEventCallback+0xa8>
		__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f462 7220 	orn	r2, r2, #640	; 0x280
 80010e2:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1ef      	bne.n	80010d2 <HAL_RTCEx_AlarmBEventCallback+0x96>
		__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_RTCEx_AlarmBEventCallback+0x134>)
 80010f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f8:	615a      	str	r2, [r3, #20]
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	22ff      	movs	r2, #255	; 0xff
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_RTCEx_AlarmBEventCallback+0x134>)
 8001104:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001108:	615a      	str	r2, [r3, #20]

	sprintf((char*) msg, "after clear attempt: alarmA flag: %d\talarmB flag: %d\r\n\n", __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF), __HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800112a:	2b00      	cmp	r3, #0
 800112c:	bf14      	ite	ne
 800112e:	2301      	movne	r3, #1
 8001130:	2300      	moveq	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	490f      	ldr	r1, [pc, #60]	; (8001174 <HAL_RTCEx_AlarmBEventCallback+0x138>)
 8001136:	480b      	ldr	r0, [pc, #44]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 8001138:	f007 f8d8 	bl	80082ec <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 800113e:	f7ff f84f 	bl	80001e0 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	4906      	ldr	r1, [pc, #24]	; (8001164 <HAL_RTCEx_AlarmBEventCallback+0x128>)
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <HAL_RTCEx_AlarmBEventCallback+0x12c>)
 800114e:	f003 f871 	bl	8004234 <HAL_UART_Transmit>
	alarmAOccurred = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_RTCEx_AlarmBEventCallback+0x13c>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]

}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800a464 	.word	0x0800a464
 8001164:	20002000 	.word	0x20002000
 8001168:	20002a44 	.word	0x20002a44
 800116c:	0800a480 	.word	0x0800a480
 8001170:	40010400 	.word	0x40010400
 8001174:	0800a4bc 	.word	0x0800a4bc
 8001178:	200001fc 	.word	0x200001fc

0800117c <pollAlarmInterruptFlag>:
//}

/*
 * polls the alarm interrupt flags and calls the appropriate callback functions.
 */
void pollAlarmInterruptFlag(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET)
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <pollAlarmInterruptFlag+0x30>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <pollAlarmInterruptFlag+0x18>
		HAL_RTC_AlarmAEventCallback(&hrtc);
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <pollAlarmInterruptFlag+0x30>)
 8001190:	f7ff fec2 	bl	8000f18 <HAL_RTC_AlarmAEventCallback>
	if (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET)
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <pollAlarmInterruptFlag+0x30>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <pollAlarmInterruptFlag+0x2c>
		HAL_RTCEx_AlarmBEventCallback(&hrtc);
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <pollAlarmInterruptFlag+0x30>)
 80011a4:	f7ff ff4a 	bl	800103c <HAL_RTCEx_AlarmBEventCallback>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20002554 	.word	0x20002554

080011b0 <StartFakeSensors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFakeSensors */
void StartFakeSensors(void *argument)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b098      	sub	sp, #96	; 0x60
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	float accels[10] = {0.0, 0.23, 120.0, 420.0, 69.42, 10.3, 20.5, 12.12, 42.42, 0.0};
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <StartFakeSensors+0xd8>)
 80011ba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80011be:	461d      	mov	r5, r3
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011cc:	e884 0003 	stmia.w	r4, {r0, r1}
		uint32_t friends[10] = {0, 1, 2, 3, 4, 5, 4, 3, 2, 1};
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <StartFakeSensors+0xdc>)
 80011d2:	f107 0408 	add.w	r4, r7, #8
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e4:	e884 0003 	stmia.w	r4, {r0, r1}
	  /* Infinite loop */
		uint32_t i = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
		char* buffer = (char*)malloc(100);
 80011ec:	2064      	movs	r0, #100	; 0x64
 80011ee:	f006 fad1 	bl	8007794 <malloc>
 80011f2:	4603      	mov	r3, r0
 80011f4:	65bb      	str	r3, [r7, #88]	; 0x58
		memset(buffer, 0, 100);
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	2100      	movs	r1, #0
 80011fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80011fc:	f006 fae0 	bl	80077c0 <memset>
	  for(;;)
	  {
		  acceleration = accels[i%10];
 8001200:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <StartFakeSensors+0xe0>)
 8001204:	fba3 2301 	umull	r2, r3, r3, r1
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1aca      	subs	r2, r1, r3
 8001214:	0093      	lsls	r3, r2, #2
 8001216:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800121a:	4413      	add	r3, r2
 800121c:	3b30      	subs	r3, #48	; 0x30
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <StartFakeSensors+0xe4>)
 8001222:	6013      	str	r3, [r2, #0]
		  numberOfFriends = friends[i%10];
 8001224:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <StartFakeSensors+0xe0>)
 8001228:	fba3 2301 	umull	r2, r3, r3, r1
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	1aca      	subs	r2, r1, r3
 8001238:	0093      	lsls	r3, r2, #2
 800123a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800123e:	4413      	add	r3, r2
 8001240:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <StartFakeSensors+0xe8>)
 8001246:	6013      	str	r3, [r2, #0]
		  sprintf(buffer, "IN Acceleration: %f\r\n", acceleration);
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <StartFakeSensors+0xe4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f983 	bl	8000558 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4911      	ldr	r1, [pc, #68]	; (800129c <StartFakeSensors+0xec>)
 8001258:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800125a:	f007 f847 	bl	80082ec <siprintf>
		  myprintf(buffer);
 800125e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001260:	f7ff fcaa 	bl	8000bb8 <myprintf>
		  sprintf(buffer, "IN Number of friends: %lu\r\n", numberOfFriends);
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <StartFakeSensors+0xe8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <StartFakeSensors+0xf0>)
 800126c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800126e:	f007 f83d 	bl	80082ec <siprintf>
		  myprintf(buffer);
 8001272:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001274:	f7ff fca0 	bl	8000bb8 <myprintf>
		  ++i;
 8001278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127a:	3301      	adds	r3, #1
 800127c:	65fb      	str	r3, [r7, #92]	; 0x5c
	    osDelay(2000);
 800127e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001282:	f003 fd03 	bl	8004c8c <osDelay>
		  acceleration = accels[i%10];
 8001286:	e7bb      	b.n	8001200 <StartFakeSensors+0x50>
 8001288:	0800a528 	.word	0x0800a528
 800128c:	0800a550 	.word	0x0800a550
 8001290:	cccccccd 	.word	0xcccccccd
 8001294:	20002bd4 	.word	0x20002bd4
 8001298:	20000200 	.word	0x20000200
 800129c:	0800a4f4 	.word	0x0800a4f4
 80012a0:	0800a50c 	.word	0x0800a50c

080012a4 <StartFakeTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeTelemetry */
void StartFakeTelemetry(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeTelemetry */
  /* Infinite loop */
	char* buffer1 = (char*)malloc(100);
 80012ac:	2064      	movs	r0, #100	; 0x64
 80012ae:	f006 fa71 	bl	8007794 <malloc>
 80012b2:	4603      	mov	r3, r0
 80012b4:	60fb      	str	r3, [r7, #12]
	memset(buffer1, 0, 100);
 80012b6:	2264      	movs	r2, #100	; 0x64
 80012b8:	2100      	movs	r1, #0
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f006 fa80 	bl	80077c0 <memset>
  for(;;)
  {
	  sprintf(buffer1, "OUT Acceleration: %f\r\n", acceleration);
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <StartFakeTelemetry+0x58>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f947 	bl	8000558 <__aeabi_f2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	490c      	ldr	r1, [pc, #48]	; (8001300 <StartFakeTelemetry+0x5c>)
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f007 f80b 	bl	80082ec <siprintf>
	  myprintf(buffer1);
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fc6e 	bl	8000bb8 <myprintf>
	  sprintf(buffer1, "OUT Number of friends: %li\r\n", numberOfFriends);
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <StartFakeTelemetry+0x60>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4909      	ldr	r1, [pc, #36]	; (8001308 <StartFakeTelemetry+0x64>)
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f007 f801 	bl	80082ec <siprintf>
	  myprintf(buffer1);
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fc64 	bl	8000bb8 <myprintf>
    osDelay(5000);
 80012f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80012f4:	f003 fcca 	bl	8004c8c <osDelay>
	  sprintf(buffer1, "OUT Acceleration: %f\r\n", acceleration);
 80012f8:	e7e2      	b.n	80012c0 <StartFakeTelemetry+0x1c>
 80012fa:	bf00      	nop
 80012fc:	20002bd4 	.word	0x20002bd4
 8001300:	0800a578 	.word	0x0800a578
 8001304:	20000200 	.word	0x20000200
 8001308:	0800a590 	.word	0x0800a590

0800130c <StartFakeEjection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeEjection */
void StartFakeEjection(void *argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeEjection */
  /* Infinite loop */
	char* buffer = (char*)malloc(100);
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f006 fa3d 	bl	8007794 <malloc>
 800131a:	4603      	mov	r3, r0
 800131c:	60fb      	str	r3, [r7, #12]
	memset(buffer, 0, 100);
 800131e:	2264      	movs	r2, #100	; 0x64
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f006 fa4c 	bl	80077c0 <memset>
  for(;;)
  {
	  if(numberOfFriends == 5)
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <StartFakeEjection+0x3c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d106      	bne.n	800133e <StartFakeEjection+0x32>
	  {
		  sprintf(buffer, "EJECT or smthg\r\n");
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <StartFakeEjection+0x40>)
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f006 ffda 	bl	80082ec <siprintf>
		  myprintf(buffer);
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff fc3d 	bl	8000bb8 <myprintf>
	  }
    osDelay(1000);
 800133e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001342:	f003 fca3 	bl	8004c8c <osDelay>
	  if(numberOfFriends == 5)
 8001346:	e7ef      	b.n	8001328 <StartFakeEjection+0x1c>
 8001348:	20000200 	.word	0x20000200
 800134c:	0800a5b0 	.word	0x0800a5b0

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001362:	f000 fa83 	bl	800186c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM16) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d11d      	bne.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x5c>
	  pollAlarmInterruptFlag();
 8001370:	f7ff ff04 	bl	800117c <pollAlarmInterruptFlag>
	  char* buffer = (char*)malloc(100);
 8001374:	2064      	movs	r0, #100	; 0x64
 8001376:	f006 fa0d 	bl	8007794 <malloc>
 800137a:	4603      	mov	r3, r0
 800137c:	60fb      	str	r3, [r7, #12]
	  memset(buffer, 0, 100);
 800137e:	2264      	movs	r2, #100	; 0x64
 8001380:	2100      	movs	r1, #0
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f006 fa1c 	bl	80077c0 <memset>
	  sprintf(buffer, "UwU\r\n");
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f006 ffae 	bl	80082ec <siprintf>
	  myprintf(buffer);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff fc11 	bl	8000bb8 <myprintf>
	  HAL_Delay(10000);
 8001396:	f242 7010 	movw	r0, #10000	; 0x2710
 800139a:	f000 fa87 	bl	80018ac <HAL_Delay>
	  sprintf(buffer, "wUw\r\n");
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f006 ffa3 	bl	80082ec <siprintf>
	  myprintf(buffer);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff fc06 	bl	8000bb8 <myprintf>
   }
  /* USER CODE END Callback 1 */
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40001000 	.word	0x40001000
 80013b8:	40014400 	.word	0x40014400
 80013bc:	0800a5c4 	.word	0x0800a5c4
 80013c0:	0800a5cc 	.word	0x0800a5cc

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_MspInit+0x4c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_MspInit+0x4c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_MspInit+0x4c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_MspInit+0x4c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_MspInit+0x4c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	210f      	movs	r1, #15
 800140a:	f06f 0001 	mvn.w	r0, #1
 800140e:	f000 fb29 	bl	8001a64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_RTC_MspInit+0x44>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d111      	bne.n	8001456 <HAL_RTC_MspInit+0x36>
 8001432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001436:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001440:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_RTC_MspInit+0x48>)
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	461a      	mov	r2, r3
 8001452:	2301      	movs	r3, #1
 8001454:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40002800 	.word	0x40002800
 8001468:	10908100 	.word	0x10908100

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_TIM_Base_MspInit+0x44>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d113      	bne.n	80014a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_TIM_Base_MspInit+0x48>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_TIM_Base_MspInit+0x48>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_TIM_Base_MspInit+0x48>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2019      	movs	r0, #25
 800149c:	f000 fae2 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014a0:	2019      	movs	r0, #25
 80014a2:	f000 fafb 	bl	8001a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40014400 	.word	0x40014400
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_UART_MspInit+0x7c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d128      	bne.n	800152c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_UART_MspInit+0x80>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <HAL_UART_MspInit+0x80>)
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_UART_MspInit+0x80>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_UART_MspInit+0x80>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_UART_MspInit+0x80>)
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	6153      	str	r3, [r2, #20]
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_UART_MspInit+0x80>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150a:	230c      	movs	r3, #12
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151a:	2307      	movs	r3, #7
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f000 fac6 	bl	8001ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40004400 	.word	0x40004400
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	2036      	movs	r0, #54	; 0x36
 8001552:	f000 fa87 	bl	8001a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001556:	2036      	movs	r0, #54	; 0x36
 8001558:	f000 faa0 	bl	8001a9c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_InitTick+0x9c>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_InitTick+0x9c>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	61d3      	str	r3, [r2, #28]
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_InitTick+0x9c>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001574:	f107 0210 	add.w	r2, r7, #16
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fd70 	bl	8003064 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001584:	f001 fd2a 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8001588:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <HAL_InitTick+0xa0>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	3b01      	subs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_InitTick+0xa4>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_InitTick+0xa8>)
 800159c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_InitTick+0xa4>)
 80015a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_InitTick+0xa4>)
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_InitTick+0xa4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_InitTick+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <HAL_InitTick+0xa4>)
 80015ba:	f002 fb22 	bl	8003c02 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <HAL_InitTick+0xa4>)
 80015c6:	f002 fb73 	bl	8003cb0 <HAL_TIM_Base_Start_IT>
 80015ca:	4603      	mov	r3, r0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3730      	adds	r7, #48	; 0x30
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	20002bd8 	.word	0x20002bd8
 80015e4:	40001000 	.word	0x40001000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800161a:	f002 fbb9 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20002acc 	.word	0x20002acc

08001628 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <TIM6_DAC_IRQHandler+0x10>)
 800162e:	f002 fbaf 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20002bd8 	.word	0x20002bd8

0800163c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	return 1;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_kill>:

int _kill(int pid, int sig)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001656:	f005 ff79 	bl	800754c <__errno>
 800165a:	4603      	mov	r3, r0
 800165c:	2216      	movs	r2, #22
 800165e:	601a      	str	r2, [r3, #0]
	return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_exit>:

void _exit (int status)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ffe7 	bl	800164c <_kill>
	while (1) {}		/* Make sure we hang here */
 800167e:	e7fe      	b.n	800167e <_exit+0x12>

08001680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001692:	f3af 8000 	nop.w
 8001696:	4601      	mov	r1, r0
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	b2ca      	uxtb	r2, r1
 80016a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf0      	blt.n	8001692 <_read+0x12>
	}

return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	e009      	b.n	80016e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60ba      	str	r2, [r7, #8]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf1      	blt.n	80016cc <_write+0x12>
	}
	return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_close>:

int _close(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171a:	605a      	str	r2, [r3, #4]
	return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_isatty>:

int _isatty(int file)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	return 1;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f005 fede 	bl	800754c <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20010000 	.word	0x20010000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	20000204 	.word	0x20000204
 80017c4:	20002c78 	.word	0x20002c78

080017c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0b      	ldr	r4, [pc, #44]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001816:	f7ff ffd7 	bl	80017c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f005 ff93 	bl	8007744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7ff f9db 	bl	8000bd8 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001824:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001830:	0800aa7c 	.word	0x0800aa7c
  ldr r2, =_sbss
 8001834:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001838:	20002c78 	.word	0x20002c78

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>
	...

08001840 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_Init+0x28>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_Init+0x28>)
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f8fc 	bl	8001a4e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	200f      	movs	r0, #15
 8001858:	f7ff fe70 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f7ff fdb8 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	20002c24 	.word	0x20002c24

08001894 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;  
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20002c24 	.word	0x20002c24

080018ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff4c 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a76:	f7ff ff61 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f7ff ffb1 	bl	80019e8 <NVIC_EncodePriority>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff80 	bl	8001994 <__NVIC_SetPriority>
}
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff54 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e160      	b.n	8001d8a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8152 	beq.w	8001d84 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d005      	beq.n	8001af8 <HAL_GPIO_Init+0x40>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d130      	bne.n	8001b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	f003 0201 	and.w	r2, r3, #1
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d017      	beq.n	8001b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d123      	bne.n	8001bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80ac 	beq.w	8001d84 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2c:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b5b      	ldr	r3, [pc, #364]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c44:	4a59      	ldr	r2, [pc, #356]	; (8001dac <HAL_GPIO_Init+0x2f4>)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c6e:	d025      	beq.n	8001cbc <HAL_GPIO_Init+0x204>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a4f      	ldr	r2, [pc, #316]	; (8001db0 <HAL_GPIO_Init+0x2f8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d01f      	beq.n	8001cb8 <HAL_GPIO_Init+0x200>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a4e      	ldr	r2, [pc, #312]	; (8001db4 <HAL_GPIO_Init+0x2fc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d019      	beq.n	8001cb4 <HAL_GPIO_Init+0x1fc>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <HAL_GPIO_Init+0x300>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_GPIO_Init+0x1f8>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_GPIO_Init+0x304>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1f4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4b      	ldr	r2, [pc, #300]	; (8001dc0 <HAL_GPIO_Init+0x308>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1f0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <HAL_GPIO_Init+0x30c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1ec>
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	e00c      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	e00a      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001ca8:	2305      	movs	r3, #5
 8001caa:	e008      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e006      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e004      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e002      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	f002 0203 	and.w	r2, r2, #3
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	4093      	lsls	r3, r2
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cce:	4937      	ldr	r1, [pc, #220]	; (8001dac <HAL_GPIO_Init+0x2f4>)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d00:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d2a:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d54:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f ae97 	bne.w	8001ac8 <HAL_GPIO_Init+0x10>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000c00 	.word	0x48000c00
 8001dbc:	48001000 	.word	0x48001000
 8001dc0:	48001400 	.word	0x48001400
 8001dc4:	48001800 	.word	0x48001800
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f000 bf01 	b.w	8002be8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8160 	beq.w	80020b6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001df6:	4bae      	ldr	r3, [pc, #696]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d00c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e02:	4bab      	ldr	r3, [pc, #684]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d159      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
 8001e0e:	4ba8      	ldr	r3, [pc, #672]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d152      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
 8001e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e20:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001e30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_OscConfig+0x82>
 8001e48:	4b99      	ldr	r3, [pc, #612]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0xae>
 8001e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e66:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e6a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e76:	4b8e      	ldr	r3, [pc, #568]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e7e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001e82:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e86:	fa92 f2a2 	rbit	r2, r2
 8001e8a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001e8e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8102 	beq.w	80020b4 <HAL_RCC_OscConfig+0x2e8>
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 80fc 	bne.w	80020b4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f000 be93 	b.w	8002be8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x110>
 8001ece:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e030      	b.n	8001f3e <HAL_RCC_OscConfig+0x172>
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x134>
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a71      	ldr	r2, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01e      	b.n	8001f3e <HAL_RCC_OscConfig+0x172>
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x15a>
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a67      	ldr	r2, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a64      	ldr	r2, [pc, #400]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e00b      	b.n	8001f3e <HAL_RCC_OscConfig+0x172>
 8001f26:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a5e      	ldr	r2, [pc, #376]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d059      	beq.n	8001ffc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fca4 	bl	8001894 <HAL_GetTick>
 8001f4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f52:	f7ff fc9f 	bl	8001894 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d902      	bls.n	8001f68 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f000 be40 	b.w	8002be8 <HAL_RCC_OscConfig+0xe1c>
 8001f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001f7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_OscConfig+0x1ce>
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1fa>
 8001f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fca:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001fce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001fda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ab      	beq.n	8001f52 <HAL_RCC_OscConfig+0x186>
 8001ffa:	e05c      	b.n	80020b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fc4a 	bl	8001894 <HAL_GetTick>
 8002000:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002006:	f7ff fc45 	bl	8001894 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d902      	bls.n	800201c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	f000 bde6 	b.w	8002be8 <HAL_RCC_OscConfig+0xe1c>
 800201c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002020:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002030:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d102      	bne.n	800204e <HAL_RCC_OscConfig+0x282>
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x2ae>
 800204e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002052:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002066:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800206a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_RCC_OscConfig+0x2e4>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002082:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002086:	fa92 f2a2 	rbit	r2, r2
 800208a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800208e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ab      	bne.n	8002006 <HAL_RCC_OscConfig+0x23a>
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_OscConfig+0x2ea>
 80020b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8170 	beq.w	80023a6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020c6:	4bd0      	ldr	r3, [pc, #832]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00c      	beq.n	80020ec <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020d2:	4bcd      	ldr	r3, [pc, #820]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d16d      	bne.n	80021ba <HAL_RCC_OscConfig+0x3ee>
 80020de:	4bca      	ldr	r3, [pc, #808]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80020e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ea:	d166      	bne.n	80021ba <HAL_RCC_OscConfig+0x3ee>
 80020ec:	2302      	movs	r3, #2
 80020ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80020fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_OscConfig+0x350>
 8002116:	4bbc      	ldr	r3, [pc, #752]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e013      	b.n	8002144 <HAL_RCC_OscConfig+0x378>
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002134:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002140:	4bb1      	ldr	r3, [pc, #708]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2202      	movs	r2, #2
 8002146:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800214a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800214e:	fa92 f2a2 	rbit	r2, r2
 8002152:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002156:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_RCC_OscConfig+0x3ba>
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d002      	beq.n	8002186 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f000 bd31 	b.w	8002be8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4ba0      	ldr	r3, [pc, #640]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	21f8      	movs	r1, #248	; 0xf8
 8002196:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800219e:	fa91 f1a1 	rbit	r1, r1
 80021a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80021a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021aa:	fab1 f181 	clz	r1, r1
 80021ae:	b2c9      	uxtb	r1, r1
 80021b0:	408b      	lsls	r3, r1
 80021b2:	4995      	ldr	r1, [pc, #596]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b8:	e0f5      	b.n	80023a6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8085 	beq.w	80022d0 <HAL_RCC_OscConfig+0x504>
 80021c6:	2301      	movs	r3, #1
 80021c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80021d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	2301      	movs	r3, #1
 80021f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7ff fb4f 	bl	8001894 <HAL_GetTick>
 80021f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff fb4a 	bl	8001894 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d902      	bls.n	8002212 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	f000 bceb 	b.w	8002be8 <HAL_RCC_OscConfig+0xe1c>
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002224:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <HAL_RCC_OscConfig+0x476>
 800223c:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e013      	b.n	800226a <HAL_RCC_OscConfig+0x49e>
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800225a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002266:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2202      	movs	r2, #2
 800226c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002270:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800227c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0af      	beq.n	80021fc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	21f8      	movs	r1, #248	; 0xf8
 80022ac:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80022b4:	fa91 f1a1 	rbit	r1, r1
 80022b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80022bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022c0:	fab1 f181 	clz	r1, r1
 80022c4:	b2c9      	uxtb	r1, r1
 80022c6:	408b      	lsls	r3, r1
 80022c8:	494f      	ldr	r1, [pc, #316]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
 80022ce:	e06a      	b.n	80023a6 <HAL_RCC_OscConfig+0x5da>
 80022d0:	2301      	movs	r3, #1
 80022d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80022e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	461a      	mov	r2, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff faca 	bl	8001894 <HAL_GetTick>
 8002300:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002306:	f7ff fac5 	bl	8001894 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d902      	bls.n	800231c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	f000 bc66 	b.w	8002be8 <HAL_RCC_OscConfig+0xe1c>
 800231c:	2302      	movs	r3, #2
 800231e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800232e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_RCC_OscConfig+0x580>
 8002346:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x5a8>
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002364:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_RCC_OscConfig+0x63c>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	2202      	movs	r2, #2
 8002376:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800237a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002386:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1af      	bne.n	8002306 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80da 	beq.w	800256a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d069      	beq.n	8002494 <HAL_RCC_OscConfig+0x6c8>
 80023c0:	2301      	movs	r3, #1
 80023c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80023d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_OscConfig+0x640>)
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	461a      	mov	r2, r3
 80023e6:	2301      	movs	r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7ff fa53 	bl	8001894 <HAL_GetTick>
 80023ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	e00d      	b.n	8002410 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff fa4e 	bl	8001894 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d905      	bls.n	8002410 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e3ef      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
 8002408:	40021000 	.word	0x40021000
 800240c:	10908120 	.word	0x10908120
 8002410:	2302      	movs	r3, #2
 8002412:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002452:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002454:	4ba4      	ldr	r3, [pc, #656]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800245c:	2102      	movs	r1, #2
 800245e:	6019      	str	r1, [r3, #0]
 8002460:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f1a3 	rbit	r1, r3
 800246a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800246e:	6019      	str	r1, [r3, #0]
  return result;
 8002470:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0b0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x628>
 8002492:	e06a      	b.n	800256a <HAL_RCC_OscConfig+0x79e>
 8002494:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024aa:	601a      	str	r2, [r3, #0]
  return result;
 80024ac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b8c      	ldr	r3, [pc, #560]	; (80026ec <HAL_RCC_OscConfig+0x920>)
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	461a      	mov	r2, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7ff f9e5 	bl	8001894 <HAL_GetTick>
 80024ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ce:	e009      	b.n	80024e4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff f9e0 	bl	8001894 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e381      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
 80024e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002500:	2202      	movs	r2, #2
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002518:	2202      	movs	r2, #2
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800252a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b6e      	ldr	r3, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 800252e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002530:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002534:	2102      	movs	r1, #2
 8002536:	6019      	str	r1, [r3, #0]
 8002538:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f1a3 	rbit	r1, r3
 8002542:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002546:	6019      	str	r1, [r3, #0]
  return result;
 8002548:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1b2      	bne.n	80024d0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8157 	beq.w	8002828 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002580:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d112      	bne.n	80025b2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b56      	ldr	r3, [pc, #344]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	4a55      	ldr	r2, [pc, #340]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002596:	61d3      	str	r3, [r2, #28]
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b4f      	ldr	r3, [pc, #316]	; (80026f0 <HAL_RCC_OscConfig+0x924>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11a      	bne.n	80025f4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x924>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4b      	ldr	r2, [pc, #300]	; (80026f0 <HAL_RCC_OscConfig+0x924>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7ff f963 	bl	8001894 <HAL_GetTick>
 80025ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	e009      	b.n	80025e8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7ff f95e 	bl	8001894 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2ff      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_OscConfig+0x924>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ef      	beq.n	80025d4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x840>
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a39      	ldr	r2, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	e02f      	b.n	800266c <HAL_RCC_OscConfig+0x8a0>
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x864>
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a33      	ldr	r2, [pc, #204]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	e01d      	b.n	800266c <HAL_RCC_OscConfig+0x8a0>
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x888>
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6213      	str	r3, [r2, #32]
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6213      	str	r3, [r2, #32]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x8a0>
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d06a      	beq.n	800274c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff f90d 	bl	8001894 <HAL_GetTick>
 800267a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7ff f908 	bl	8001894 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e2a7      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
 8002698:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f2a3 	rbit	r2, r3
 80026aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026b4:	2202      	movs	r2, #2
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026c6:	601a      	str	r2, [r3, #0]
  return result;
 80026c8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d108      	bne.n	80026f4 <HAL_RCC_OscConfig+0x928>
 80026e2:	4b01      	ldr	r3, [pc, #4]	; (80026e8 <HAL_RCC_OscConfig+0x91c>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	e013      	b.n	8002710 <HAL_RCC_OscConfig+0x944>
 80026e8:	40021000 	.word	0x40021000
 80026ec:	10908120 	.word	0x10908120
 80026f0:	40007000 	.word	0x40007000
 80026f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	4bc0      	ldr	r3, [pc, #768]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002714:	2102      	movs	r1, #2
 8002716:	6011      	str	r1, [r2, #0]
 8002718:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	fa92 f1a2 	rbit	r1, r2
 8002722:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002726:	6011      	str	r1, [r2, #0]
  return result;
 8002728:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d09a      	beq.n	8002680 <HAL_RCC_OscConfig+0x8b4>
 800274a:	e063      	b.n	8002814 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7ff f8a2 	bl	8001894 <HAL_GetTick>
 8002750:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7ff f89d 	bl	8001894 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e23c      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
 800276e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002772:	2202      	movs	r2, #2
 8002774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800278a:	2202      	movs	r2, #2
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800279c:	601a      	str	r2, [r3, #0]
  return result;
 800279e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d102      	bne.n	80027be <HAL_RCC_OscConfig+0x9f2>
 80027b8:	4b95      	ldr	r3, [pc, #596]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	e00d      	b.n	80027da <HAL_RCC_OscConfig+0xa0e>
 80027be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027c2:	2202      	movs	r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80027de:	2102      	movs	r1, #2
 80027e0:	6011      	str	r1, [r2, #0]
 80027e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	fa92 f1a2 	rbit	r1, r2
 80027ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027f0:	6011      	str	r1, [r2, #0]
  return result;
 80027f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	fab2 f282 	clz	r2, r2
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f002 021f 	and.w	r2, r2, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f202 	lsl.w	r2, r1, r2
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1a0      	bne.n	8002756 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002814:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4a7b      	ldr	r2, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002826:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 81d9 	beq.w	8002be6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002834:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	f000 81a6 	beq.w	8002b8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b02      	cmp	r3, #2
 800284a:	f040 811e 	bne.w	8002a8a <HAL_RCC_OscConfig+0xcbe>
 800284e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002852:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002866:	601a      	str	r2, [r3, #0]
  return result;
 8002868:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800286c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	461a      	mov	r2, r3
 8002880:	2300      	movs	r3, #0
 8002882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7ff f806 	bl	8001894 <HAL_GetTick>
 8002888:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	e009      	b.n	80028a2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff f801 	bl	8001894 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1a2      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
 80028a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028ba:	601a      	str	r2, [r3, #0]
  return result;
 80028bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0xb10>
 80028d6:	4b4e      	ldr	r3, [pc, #312]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e01b      	b.n	8002914 <HAL_RCC_OscConfig+0xb48>
 80028dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002918:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800291c:	6011      	str	r1, [r2, #0]
 800291e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fa92 f1a2 	rbit	r1, r2
 8002928:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800292c:	6011      	str	r1, [r2, #0]
  return result;
 800292e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f002 021f 	and.w	r2, r2, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d19e      	bne.n	800288e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f023 020f 	bic.w	r2, r3, #15
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	492c      	ldr	r1, [pc, #176]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 8002960:	4313      	orrs	r3, r2
 8002962:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a19      	ldr	r1, [r3, #32]
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	430b      	orrs	r3, r1
 800297a:	4925      	ldr	r1, [pc, #148]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
 8002980:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002998:	601a      	str	r2, [r3, #0]
  return result;
 800299a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800299e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	461a      	mov	r2, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe ff6d 	bl	8001894 <HAL_GetTick>
 80029ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029be:	e009      	b.n	80029d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe ff68 	bl	8001894 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e109      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
 80029d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fa93 f2a3 	rbit	r2, r3
 80029e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029ec:	601a      	str	r2, [r3, #0]
  return result;
 80029ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0xc48>
 8002a08:	4b01      	ldr	r3, [pc, #4]	; (8002a10 <HAL_RCC_OscConfig+0xc44>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	e01e      	b.n	8002a4c <HAL_RCC_OscConfig+0xc80>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <HAL_RCC_OscConfig+0xe28>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fa92 f1a2 	rbit	r1, r2
 8002a60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a64:	6011      	str	r1, [r2, #0]
  return result;
 8002a66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	fab2 f282 	clz	r2, r2
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	f042 0220 	orr.w	r2, r2, #32
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f002 021f 	and.w	r2, r2, #31
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d09b      	beq.n	80029c0 <HAL_RCC_OscConfig+0xbf4>
 8002a88:	e0ad      	b.n	8002be6 <HAL_RCC_OscConfig+0xe1a>
 8002a8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aa8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	461a      	mov	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fee8 	bl	8001894 <HAL_GetTick>
 8002ac4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac8:	e009      	b.n	8002ade <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fee3 	bl	8001894 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e084      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
 8002ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af6:	601a      	str	r2, [r3, #0]
  return result;
 8002af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002afc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_OscConfig+0xd4c>
 8002b12:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <HAL_RCC_OscConfig+0xe28>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e01b      	b.n	8002b50 <HAL_RCC_OscConfig+0xd84>
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f107 0320 	add.w	r3, r7, #32
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f107 0318 	add.w	r3, r7, #24
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <HAL_RCC_OscConfig+0xe28>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f107 0214 	add.w	r2, r7, #20
 8002b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b58:	6011      	str	r1, [r2, #0]
 8002b5a:	f107 0214 	add.w	r2, r7, #20
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	fa92 f1a2 	rbit	r1, r2
 8002b64:	f107 0210 	add.w	r2, r7, #16
 8002b68:	6011      	str	r1, [r2, #0]
  return result;
 8002b6a:	f107 0210 	add.w	r2, r7, #16
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	fab2 f282 	clz	r2, r2
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f002 021f 	and.w	r2, r2, #31
 8002b80:	2101      	movs	r1, #1
 8002b82:	fa01 f202 	lsl.w	r2, r1, r2
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d19e      	bne.n	8002aca <HAL_RCC_OscConfig+0xcfe>
 8002b8c:	e02b      	b.n	8002be6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e025      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCC_OscConfig+0xe28>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_OscConfig+0xe28>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bb0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d111      	bne.n	8002be2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bbe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d108      	bne.n	8002be2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b09e      	sub	sp, #120	; 0x78
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e162      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b90      	ldr	r3, [pc, #576]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	498b      	ldr	r1, [pc, #556]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b89      	ldr	r3, [pc, #548]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e14a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b82      	ldr	r3, [pc, #520]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	497f      	ldr	r1, [pc, #508]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80dc 	beq.w	8002e24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d13c      	bne.n	8002cee <HAL_RCC_ClockConfig+0xf6>
 8002c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xa6>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e00f      	b.n	8002cbe <HAL_RCC_ClockConfig+0xc6>
 8002c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	667b      	str	r3, [r7, #100]	; 0x64
 8002cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc6:	fa92 f2a2 	rbit	r2, r2
 8002cca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cce:	fab2 f282 	clz	r2, r2
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f042 0220 	orr.w	r2, r2, #32
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f002 021f 	and.w	r2, r2, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d17b      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0f3      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d13c      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x178>
 8002cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x128>
 8002d1a:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_ClockConfig+0x148>
 8002d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40
 8002d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3c:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d44:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d48:	fa92 f2a2 	rbit	r2, r2
 8002d4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f002 021f 	and.w	r2, r2, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d13a      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b2      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
 8002d70:	2302      	movs	r3, #2
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x1a0>
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e00d      	b.n	8002db4 <HAL_RCC_ClockConfig+0x1bc>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	2302      	movs	r3, #2
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2202      	movs	r2, #2
 8002db6:	61ba      	str	r2, [r7, #24]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	617a      	str	r2, [r7, #20]
  return result;
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e079      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	491a      	ldr	r1, [pc, #104]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fd4e 	bl	8001894 <HAL_GetTick>
 8002df8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fd4a 	bl	8001894 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e061      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d214      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	4906      	ldr	r1, [pc, #24]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_ClockConfig+0x25c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e040      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x2de>
 8002e54:	40022000 	.word	0x40022000
 8002e58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	491a      	ldr	r1, [pc, #104]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4912      	ldr	r1, [pc, #72]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e9a:	f000 f829 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_RCC_ClockConfig+0x2e8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea8:	22f0      	movs	r2, #240	; 0xf0
 8002eaa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	fa92 f2a2 	rbit	r2, r2
 8002eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	40d3      	lsrs	r3, r2
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x2ec>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <HAL_RCC_ClockConfig+0x2f0>)
 8002ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_RCC_ClockConfig+0x2f4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fb34 	bl	800153c <HAL_InitTick>
  
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3778      	adds	r7, #120	; 0x78
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	0800a658 	.word	0x0800a658
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b08b      	sub	sp, #44	; 0x2c
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e03f      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f22:	623b      	str	r3, [r7, #32]
      break;
 8002f24:	e03f      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	fa92 f2a2 	rbit	r2, r2
 8002f38:	607a      	str	r2, [r7, #4]
  return result;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	40d3      	lsrs	r3, r2
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	220f      	movs	r2, #15
 8002f54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	fa92 f2a2 	rbit	r2, r2
 8002f5c:	60fa      	str	r2, [r7, #12]
  return result;
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	40d3      	lsrs	r3, r2
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f78:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	e007      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	623b      	str	r3, [r7, #32]
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fa2:	623b      	str	r3, [r7, #32]
      break;
 8002fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	372c      	adds	r7, #44	; 0x2c
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	007a1200 	.word	0x007a1200
 8002fbc:	0800a670 	.word	0x0800a670
 8002fc0:	0800a680 	.word	0x0800a680

08002fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000000 	.word	0x20000000

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fe2:	f7ff ffef 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe6:	4601      	mov	r1, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	fa92 f2a2 	rbit	r2, r2
 8002ffc:	603a      	str	r2, [r7, #0]
  return result;
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	40d3      	lsrs	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_RCC_GetPCLK1Freq+0x40>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	0800a668 	.word	0x0800a668

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003026:	f7ff ffcd 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 800302a:	4601      	mov	r1, r0
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003034:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003038:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	fa92 f2a2 	rbit	r2, r2
 8003040:	603a      	str	r2, [r7, #0]
  return result;
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	fab2 f282 	clz	r2, r2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	40d3      	lsrs	r3, r2
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x40>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	0800a668 	.word	0x0800a668

08003064 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	220f      	movs	r2, #15
 8003072:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0203 	and.w	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	08db      	lsrs	r3, r3, #3
 800309e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCC_GetClockConfig+0x60>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0207 	and.w	r2, r3, #7
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b092      	sub	sp, #72	; 0x48
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80d4 	beq.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ec:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003102:	61d3      	str	r3, [r2, #28]
 8003104:	4b48      	ldr	r3, [pc, #288]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b45      	ldr	r3, [pc, #276]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b42      	ldr	r3, [pc, #264]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a41      	ldr	r2, [pc, #260]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe fbb1 	bl	8001894 <HAL_GetTick>
 8003132:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fbad 	bl	8001894 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1d6      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b38      	ldr	r3, [pc, #224]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800315e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8084 	beq.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003170:	429a      	cmp	r2, r3
 8003172:	d07c      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	461a      	mov	r2, r3
 800319e:	2301      	movs	r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	461a      	mov	r2, r3
 80031c2:	2300      	movs	r3, #0
 80031c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d04b      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fb5d 	bl	8001894 <HAL_GetTick>
 80031da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe fb59 	bl	8001894 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e180      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031f4:	2302      	movs	r3, #2
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	61fb      	str	r3, [r7, #28]
  return result;
 800320c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d108      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003222:	4b01      	ldr	r3, [pc, #4]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	e00d      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	10908100 	.word	0x10908100
 8003234:	2302      	movs	r3, #2
 8003236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	4ba0      	ldr	r3, [pc, #640]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2202      	movs	r2, #2
 8003246:	613a      	str	r2, [r7, #16]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	60fa      	str	r2, [r7, #12]
  return result;
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	fab2 f282 	clz	r2, r2
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f002 021f 	and.w	r2, r2, #31
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0b7      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800326e:	4b95      	ldr	r3, [pc, #596]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4992      	ldr	r1, [pc, #584]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b8e      	ldr	r3, [pc, #568]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a8d      	ldr	r2, [pc, #564]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a0:	4b88      	ldr	r3, [pc, #544]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f023 0203 	bic.w	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4985      	ldr	r1, [pc, #532]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032be:	4b81      	ldr	r3, [pc, #516]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	497e      	ldr	r1, [pc, #504]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032dc:	4b79      	ldr	r3, [pc, #484]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4976      	ldr	r1, [pc, #472]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032fa:	4b72      	ldr	r3, [pc, #456]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f023 0210 	bic.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	496f      	ldr	r1, [pc, #444]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	4967      	ldr	r1, [pc, #412]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f023 0220 	bic.w	r2, r3, #32
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4960      	ldr	r1, [pc, #384]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003354:	4b5b      	ldr	r3, [pc, #364]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	4958      	ldr	r1, [pc, #352]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003372:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4951      	ldr	r1, [pc, #324]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003380:	4313      	orrs	r3, r2
 8003382:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003390:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	4949      	ldr	r1, [pc, #292]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ae:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4942      	ldr	r1, [pc, #264]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033cc:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	493a      	ldr	r1, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033ea:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	4933      	ldr	r1, [pc, #204]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	492b      	ldr	r1, [pc, #172]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4924      	ldr	r1, [pc, #144]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	491c      	ldr	r1, [pc, #112]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	4915      	ldr	r1, [pc, #84]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	490d      	ldr	r1, [pc, #52]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	4906      	ldr	r1, [pc, #24]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034bc:	4b01      	ldr	r3, [pc, #4]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	e002      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d0:	490b      	ldr	r1, [pc, #44]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3748      	adds	r7, #72	; 0x48
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e083      	b.n	800361e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7f5b      	ldrb	r3, [r3, #29]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd ff7a 	bl	8001420 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	22ca      	movs	r2, #202	; 0xca
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2253      	movs	r2, #83	; 0x53
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fb13 	bl	8003b6e <RTC_EnterInitMode>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2204      	movs	r2, #4
 800355a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e05e      	b.n	800361e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800356e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003572:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68d2      	ldr	r2, [r2, #12]
 800359a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6919      	ldr	r1, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	041a      	lsls	r2, r3, #16
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10e      	bne.n	80035ec <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 faa5 	bl	8003b1e <HAL_RTC_WaitForSynchro>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2204      	movs	r2, #4
 80035e6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e018      	b.n	800361e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003626:	b590      	push	{r4, r7, lr}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	7f1b      	ldrb	r3, [r3, #28]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_RTC_SetTime+0x1c>
 800363e:	2302      	movs	r3, #2
 8003640:	e0aa      	b.n	8003798 <HAL_RTC_SetTime+0x172>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2202      	movs	r2, #2
 800364c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d126      	bne.n	80036a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2200      	movs	r2, #0
 8003666:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 faaa 	bl	8003bc6 <RTC_ByteToBcd2>
 8003672:	4603      	mov	r3, r0
 8003674:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 faa3 	bl	8003bc6 <RTC_ByteToBcd2>
 8003680:	4603      	mov	r3, r0
 8003682:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003684:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	789b      	ldrb	r3, [r3, #2]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa9b 	bl	8003bc6 <RTC_ByteToBcd2>
 8003690:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003692:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	78db      	ldrb	r3, [r3, #3]
 800369a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e018      	b.n	80036d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80036c2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80036c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	78db      	ldrb	r3, [r3, #3]
 80036ce:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	22ca      	movs	r2, #202	; 0xca
 80036da:	625a      	str	r2, [r3, #36]	; 0x24
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2253      	movs	r2, #83	; 0x53
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fa42 	bl	8003b6e <RTC_EnterInitMode>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2204      	movs	r2, #4
 80036fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e047      	b.n	8003798 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003712:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003716:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003726:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d111      	bne.n	8003782 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f9dd 	bl	8003b1e <HAL_RTC_WaitForSynchro>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	22ff      	movs	r2, #255	; 0xff
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2204      	movs	r2, #4
 8003776:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e00a      	b.n	8003798 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	22ff      	movs	r2, #255	; 0xff
 8003788:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003796:	2300      	movs	r3, #0
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}

080037a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	7f1b      	ldrb	r3, [r3, #28]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_RTC_SetDate+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e094      	b.n	80038e6 <HAL_RTC_SetDate+0x146>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2202      	movs	r2, #2
 80037c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_RTC_SetDate+0x4c>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	f023 0310 	bic.w	r3, r3, #16
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	330a      	adds	r3, #10
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11c      	bne.n	800382c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	78db      	ldrb	r3, [r3, #3]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f9e5 	bl	8003bc6 <RTC_ByteToBcd2>
 80037fc:	4603      	mov	r3, r0
 80037fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 f9de 	bl	8003bc6 <RTC_ByteToBcd2>
 800380a:	4603      	mov	r3, r0
 800380c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800380e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	789b      	ldrb	r3, [r3, #2]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f9d6 	bl	8003bc6 <RTC_ByteToBcd2>
 800381a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800381c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e00e      	b.n	800384a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	78db      	ldrb	r3, [r3, #3]
 8003830:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003838:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800383e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	22ca      	movs	r2, #202	; 0xca
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2253      	movs	r2, #83	; 0x53
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f987 	bl	8003b6e <RTC_EnterInitMode>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	22ff      	movs	r2, #255	; 0xff
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2204      	movs	r2, #4
 8003872:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e033      	b.n	80038e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800388c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800389c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f936 	bl	8003b1e <HAL_RTC_WaitForSynchro>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	22ff      	movs	r2, #255	; 0xff
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2204      	movs	r2, #4
 80038c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e00a      	b.n	80038e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80038ee:	b590      	push	{r4, r7, lr}
 80038f0:	b089      	sub	sp, #36	; 0x24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	7f1b      	ldrb	r3, [r3, #28]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_RTC_SetAlarm+0x24>
 800390e:	2302      	movs	r3, #2
 8003910:	e101      	b.n	8003b16 <HAL_RTC_SetAlarm+0x228>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2202      	movs	r2, #2
 800391c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d137      	bne.n	8003994 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2200      	movs	r2, #0
 8003936:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f942 	bl	8003bc6 <RTC_ByteToBcd2>
 8003942:	4603      	mov	r3, r0
 8003944:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	785b      	ldrb	r3, [r3, #1]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f93b 	bl	8003bc6 <RTC_ByteToBcd2>
 8003950:	4603      	mov	r3, r0
 8003952:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003954:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	789b      	ldrb	r3, [r3, #2]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f933 	bl	8003bc6 <RTC_ByteToBcd2>
 8003960:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003962:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800396c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f925 	bl	8003bc6 <RTC_ByteToBcd2>
 800397c:	4603      	mov	r3, r0
 800397e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003980:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003988:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800398e:	4313      	orrs	r3, r2
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	e023      	b.n	80039dc <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80039b4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80039ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	78db      	ldrb	r3, [r3, #3]
 80039c0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80039c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80039cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80039d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80039d8:	4313      	orrs	r3, r2
 80039da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	22ca      	movs	r2, #202	; 0xca
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2253      	movs	r2, #83	; 0x53
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a00:	d13f      	bne.n	8003a82 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a10:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a20:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003a22:	f7fd ff37 	bl	8001894 <HAL_GetTick>
 8003a26:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003a28:	e013      	b.n	8003a52 <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a2a:	f7fd ff33 	bl	8001894 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a38:	d90b      	bls.n	8003a52 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	22ff      	movs	r2, #255	; 0xff
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2203      	movs	r2, #3
 8003a46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e061      	b.n	8003b16 <HAL_RTC_SetAlarm+0x228>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0e4      	beq.n	8003a2a <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	e03e      	b.n	8003b00 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a90:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003aa2:	f7fd fef7 	bl	8001894 <HAL_GetTick>
 8003aa6:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003aa8:	e013      	b.n	8003ad2 <HAL_RTC_SetAlarm+0x1e4>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003aaa:	f7fd fef3 	bl	8001894 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab8:	d90b      	bls.n	8003ad2 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e021      	b.n	8003b16 <HAL_RTC_SetAlarm+0x228>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0e4      	beq.n	8003aaa <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	22ff      	movs	r2, #255	; 0xff
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd90      	pop	{r4, r7, pc}

08003b1e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b38:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b3a:	f7fd feab 	bl	8001894 <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b40:	e009      	b.n	8003b56 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b42:	f7fd fea7 	bl	8001894 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b50:	d901      	bls.n	8003b56 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e007      	b.n	8003b66 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ee      	beq.n	8003b42 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d119      	bne.n	8003bbc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b92:	f7fd fe7f 	bl	8001894 <HAL_GetTick>
 8003b96:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b98:	e009      	b.n	8003bae <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b9a:	f7fd fe7b 	bl	8001894 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba8:	d901      	bls.n	8003bae <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e007      	b.n	8003bbe <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003bd4:	e005      	b.n	8003be2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	3b0a      	subs	r3, #10
 8003be0:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	d8f6      	bhi.n	8003bd6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b2db      	uxtb	r3, r3
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e049      	b.n	8003ca8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7fd fc1f 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2202      	movs	r2, #2
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f000 f9ed 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e04f      	b.n	8003d68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x76>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d018      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x76>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x76>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x76>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x76>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x76>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d115      	bne.n	8003d52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d015      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d011      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	e008      	b.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e000      	b.n	8003d66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40013400 	.word	0x40013400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40015000 	.word	0x40015000
 8003d8c:	00010007 	.word	0x00010007

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f905 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8f7 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f908 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8db 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8cd 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8de 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8b1 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8a3 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f8b4 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f887 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f879 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f88a 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd fa1e 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f918 	bl	8004170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d10e      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f90b 	bl	8004184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d10e      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f838 	bl	800400a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d10e      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d107      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f06f 0220 	mvn.w	r2, #32
 8003fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8cb 	bl	800415c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a42      	ldr	r2, [pc, #264]	; (800413c <TIM_Base_SetConfig+0x11c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3f      	ldr	r2, [pc, #252]	; (8004140 <TIM_Base_SetConfig+0x120>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3e      	ldr	r2, [pc, #248]	; (8004144 <TIM_Base_SetConfig+0x124>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3d      	ldr	r2, [pc, #244]	; (8004148 <TIM_Base_SetConfig+0x128>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3c      	ldr	r2, [pc, #240]	; (800414c <TIM_Base_SetConfig+0x12c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d108      	bne.n	8004072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a31      	ldr	r2, [pc, #196]	; (800413c <TIM_Base_SetConfig+0x11c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01f      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d01b      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2e      	ldr	r2, [pc, #184]	; (8004140 <TIM_Base_SetConfig+0x120>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d017      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <TIM_Base_SetConfig+0x124>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <TIM_Base_SetConfig+0x128>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00f      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <TIM_Base_SetConfig+0x130>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00b      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <TIM_Base_SetConfig+0x134>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <TIM_Base_SetConfig+0x138>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_Base_SetConfig+0x9a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a25      	ldr	r2, [pc, #148]	; (800414c <TIM_Base_SetConfig+0x12c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <TIM_Base_SetConfig+0x11c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <TIM_Base_SetConfig+0x100>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a13      	ldr	r2, [pc, #76]	; (8004148 <TIM_Base_SetConfig+0x128>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00f      	beq.n	8004120 <TIM_Base_SetConfig+0x100>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <TIM_Base_SetConfig+0x130>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00b      	beq.n	8004120 <TIM_Base_SetConfig+0x100>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a12      	ldr	r2, [pc, #72]	; (8004154 <TIM_Base_SetConfig+0x134>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_Base_SetConfig+0x100>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a11      	ldr	r2, [pc, #68]	; (8004158 <TIM_Base_SetConfig+0x138>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_Base_SetConfig+0x100>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0c      	ldr	r2, [pc, #48]	; (800414c <TIM_Base_SetConfig+0x12c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d103      	bne.n	8004128 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	615a      	str	r2, [r3, #20]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40013400 	.word	0x40013400
 800414c:	40015000 	.word	0x40015000
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800

0800415c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e040      	b.n	800422c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd f97c 	bl	80014b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8c0 	bl	800435c <UART_SetConfig>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e022      	b.n	800422c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa8a 	bl	8004708 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fb11 	bl	800484c <UART_CheckIdleState>
 800422a:	4603      	mov	r3, r0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004248:	2b20      	cmp	r3, #32
 800424a:	f040 8082 	bne.w	8004352 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_UART_Transmit+0x26>
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07a      	b.n	8004354 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_UART_Transmit+0x38>
 8004268:	2302      	movs	r3, #2
 800426a:	e073      	b.n	8004354 <HAL_UART_Transmit+0x120>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2221      	movs	r2, #33	; 0x21
 8004280:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004282:	f7fd fb07 	bl	8001894 <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a0:	d108      	bne.n	80042b4 <HAL_UART_Transmit+0x80>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e003      	b.n	80042bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80042c4:	e02d      	b.n	8004322 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2180      	movs	r1, #128	; 0x80
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fb04 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e039      	b.n	8004354 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f2:	b292      	uxth	r2, r2
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	3302      	adds	r3, #2
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	e008      	b.n	8004310 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	b292      	uxth	r2, r2
 8004308:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3301      	adds	r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1cb      	bne.n	80042c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	2140      	movs	r1, #64	; 0x40
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fad0 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e005      	b.n	8004354 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e000      	b.n	8004354 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004352:	2302      	movs	r3, #2
  }
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4bab      	ldr	r3, [pc, #684]	; (8004634 <UART_SetConfig+0x2d8>)
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	430b      	orrs	r3, r1
 8004392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a99      	ldr	r2, [pc, #612]	; (8004638 <UART_SetConfig+0x2dc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d120      	bne.n	800441a <UART_SetConfig+0xbe>
 80043d8:	4b98      	ldr	r3, [pc, #608]	; (800463c <UART_SetConfig+0x2e0>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d817      	bhi.n	8004414 <UART_SetConfig+0xb8>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0x90>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	08004409 	.word	0x08004409
 80043f4:	0800440f 	.word	0x0800440f
 80043f8:	08004403 	.word	0x08004403
 80043fc:	2301      	movs	r3, #1
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e0b5      	b.n	800456e <UART_SetConfig+0x212>
 8004402:	2302      	movs	r3, #2
 8004404:	77fb      	strb	r3, [r7, #31]
 8004406:	e0b2      	b.n	800456e <UART_SetConfig+0x212>
 8004408:	2304      	movs	r3, #4
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e0af      	b.n	800456e <UART_SetConfig+0x212>
 800440e:	2308      	movs	r3, #8
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e0ac      	b.n	800456e <UART_SetConfig+0x212>
 8004414:	2310      	movs	r3, #16
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e0a9      	b.n	800456e <UART_SetConfig+0x212>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a88      	ldr	r2, [pc, #544]	; (8004640 <UART_SetConfig+0x2e4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d124      	bne.n	800446e <UART_SetConfig+0x112>
 8004424:	4b85      	ldr	r3, [pc, #532]	; (800463c <UART_SetConfig+0x2e0>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800442c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004430:	d011      	beq.n	8004456 <UART_SetConfig+0xfa>
 8004432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004436:	d817      	bhi.n	8004468 <UART_SetConfig+0x10c>
 8004438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800443c:	d011      	beq.n	8004462 <UART_SetConfig+0x106>
 800443e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004442:	d811      	bhi.n	8004468 <UART_SetConfig+0x10c>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <UART_SetConfig+0xf4>
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d006      	beq.n	800445c <UART_SetConfig+0x100>
 800444e:	e00b      	b.n	8004468 <UART_SetConfig+0x10c>
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e08b      	b.n	800456e <UART_SetConfig+0x212>
 8004456:	2302      	movs	r3, #2
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e088      	b.n	800456e <UART_SetConfig+0x212>
 800445c:	2304      	movs	r3, #4
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e085      	b.n	800456e <UART_SetConfig+0x212>
 8004462:	2308      	movs	r3, #8
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e082      	b.n	800456e <UART_SetConfig+0x212>
 8004468:	2310      	movs	r3, #16
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e07f      	b.n	800456e <UART_SetConfig+0x212>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a74      	ldr	r2, [pc, #464]	; (8004644 <UART_SetConfig+0x2e8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d124      	bne.n	80044c2 <UART_SetConfig+0x166>
 8004478:	4b70      	ldr	r3, [pc, #448]	; (800463c <UART_SetConfig+0x2e0>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004480:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004484:	d011      	beq.n	80044aa <UART_SetConfig+0x14e>
 8004486:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800448a:	d817      	bhi.n	80044bc <UART_SetConfig+0x160>
 800448c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004490:	d011      	beq.n	80044b6 <UART_SetConfig+0x15a>
 8004492:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004496:	d811      	bhi.n	80044bc <UART_SetConfig+0x160>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <UART_SetConfig+0x148>
 800449c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044a0:	d006      	beq.n	80044b0 <UART_SetConfig+0x154>
 80044a2:	e00b      	b.n	80044bc <UART_SetConfig+0x160>
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e061      	b.n	800456e <UART_SetConfig+0x212>
 80044aa:	2302      	movs	r3, #2
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e05e      	b.n	800456e <UART_SetConfig+0x212>
 80044b0:	2304      	movs	r3, #4
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e05b      	b.n	800456e <UART_SetConfig+0x212>
 80044b6:	2308      	movs	r3, #8
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e058      	b.n	800456e <UART_SetConfig+0x212>
 80044bc:	2310      	movs	r3, #16
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e055      	b.n	800456e <UART_SetConfig+0x212>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a60      	ldr	r2, [pc, #384]	; (8004648 <UART_SetConfig+0x2ec>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d124      	bne.n	8004516 <UART_SetConfig+0x1ba>
 80044cc:	4b5b      	ldr	r3, [pc, #364]	; (800463c <UART_SetConfig+0x2e0>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80044d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044d8:	d011      	beq.n	80044fe <UART_SetConfig+0x1a2>
 80044da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044de:	d817      	bhi.n	8004510 <UART_SetConfig+0x1b4>
 80044e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e4:	d011      	beq.n	800450a <UART_SetConfig+0x1ae>
 80044e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ea:	d811      	bhi.n	8004510 <UART_SetConfig+0x1b4>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <UART_SetConfig+0x19c>
 80044f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f4:	d006      	beq.n	8004504 <UART_SetConfig+0x1a8>
 80044f6:	e00b      	b.n	8004510 <UART_SetConfig+0x1b4>
 80044f8:	2300      	movs	r3, #0
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e037      	b.n	800456e <UART_SetConfig+0x212>
 80044fe:	2302      	movs	r3, #2
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e034      	b.n	800456e <UART_SetConfig+0x212>
 8004504:	2304      	movs	r3, #4
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e031      	b.n	800456e <UART_SetConfig+0x212>
 800450a:	2308      	movs	r3, #8
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e02e      	b.n	800456e <UART_SetConfig+0x212>
 8004510:	2310      	movs	r3, #16
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e02b      	b.n	800456e <UART_SetConfig+0x212>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a4c      	ldr	r2, [pc, #304]	; (800464c <UART_SetConfig+0x2f0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d124      	bne.n	800456a <UART_SetConfig+0x20e>
 8004520:	4b46      	ldr	r3, [pc, #280]	; (800463c <UART_SetConfig+0x2e0>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004528:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800452c:	d011      	beq.n	8004552 <UART_SetConfig+0x1f6>
 800452e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004532:	d817      	bhi.n	8004564 <UART_SetConfig+0x208>
 8004534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004538:	d011      	beq.n	800455e <UART_SetConfig+0x202>
 800453a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800453e:	d811      	bhi.n	8004564 <UART_SetConfig+0x208>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <UART_SetConfig+0x1f0>
 8004544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004548:	d006      	beq.n	8004558 <UART_SetConfig+0x1fc>
 800454a:	e00b      	b.n	8004564 <UART_SetConfig+0x208>
 800454c:	2300      	movs	r3, #0
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e00d      	b.n	800456e <UART_SetConfig+0x212>
 8004552:	2302      	movs	r3, #2
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e00a      	b.n	800456e <UART_SetConfig+0x212>
 8004558:	2304      	movs	r3, #4
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e007      	b.n	800456e <UART_SetConfig+0x212>
 800455e:	2308      	movs	r3, #8
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e004      	b.n	800456e <UART_SetConfig+0x212>
 8004564:	2310      	movs	r3, #16
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e001      	b.n	800456e <UART_SetConfig+0x212>
 800456a:	2310      	movs	r3, #16
 800456c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004576:	d16d      	bne.n	8004654 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004578:	7ffb      	ldrb	r3, [r7, #31]
 800457a:	2b08      	cmp	r3, #8
 800457c:	d827      	bhi.n	80045ce <UART_SetConfig+0x272>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <UART_SetConfig+0x228>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	080045a9 	.word	0x080045a9
 8004588:	080045b1 	.word	0x080045b1
 800458c:	080045b9 	.word	0x080045b9
 8004590:	080045cf 	.word	0x080045cf
 8004594:	080045bf 	.word	0x080045bf
 8004598:	080045cf 	.word	0x080045cf
 800459c:	080045cf 	.word	0x080045cf
 80045a0:	080045cf 	.word	0x080045cf
 80045a4:	080045c7 	.word	0x080045c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a8:	f7fe fd18 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 80045ac:	61b8      	str	r0, [r7, #24]
        break;
 80045ae:	e013      	b.n	80045d8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b0:	f7fe fd36 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 80045b4:	61b8      	str	r0, [r7, #24]
        break;
 80045b6:	e00f      	b.n	80045d8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <UART_SetConfig+0x2f4>)
 80045ba:	61bb      	str	r3, [r7, #24]
        break;
 80045bc:	e00c      	b.n	80045d8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045be:	f7fe fc97 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 80045c2:	61b8      	str	r0, [r7, #24]
        break;
 80045c4:	e008      	b.n	80045d8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ca:	61bb      	str	r3, [r7, #24]
        break;
 80045cc:	e004      	b.n	80045d8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	77bb      	strb	r3, [r7, #30]
        break;
 80045d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8086 	beq.w	80046ec <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	005a      	lsls	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	441a      	add	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d916      	bls.n	800462c <UART_SetConfig+0x2d0>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d212      	bcs.n	800462c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f023 030f 	bic.w	r3, r3, #15
 800460e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	b29b      	uxth	r3, r3
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	b29a      	uxth	r2, r3
 800461c:	89fb      	ldrh	r3, [r7, #14]
 800461e:	4313      	orrs	r3, r2
 8004620:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	89fa      	ldrh	r2, [r7, #14]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	e05f      	b.n	80046ec <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	77bb      	strb	r3, [r7, #30]
 8004630:	e05c      	b.n	80046ec <UART_SetConfig+0x390>
 8004632:	bf00      	nop
 8004634:	efff69f3 	.word	0xefff69f3
 8004638:	40013800 	.word	0x40013800
 800463c:	40021000 	.word	0x40021000
 8004640:	40004400 	.word	0x40004400
 8004644:	40004800 	.word	0x40004800
 8004648:	40004c00 	.word	0x40004c00
 800464c:	40005000 	.word	0x40005000
 8004650:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004654:	7ffb      	ldrb	r3, [r7, #31]
 8004656:	2b08      	cmp	r3, #8
 8004658:	d827      	bhi.n	80046aa <UART_SetConfig+0x34e>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <UART_SetConfig+0x304>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004685 	.word	0x08004685
 8004664:	0800468d 	.word	0x0800468d
 8004668:	08004695 	.word	0x08004695
 800466c:	080046ab 	.word	0x080046ab
 8004670:	0800469b 	.word	0x0800469b
 8004674:	080046ab 	.word	0x080046ab
 8004678:	080046ab 	.word	0x080046ab
 800467c:	080046ab 	.word	0x080046ab
 8004680:	080046a3 	.word	0x080046a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004684:	f7fe fcaa 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8004688:	61b8      	str	r0, [r7, #24]
        break;
 800468a:	e013      	b.n	80046b4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7fe fcc8 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8004690:	61b8      	str	r0, [r7, #24]
        break;
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <UART_SetConfig+0x3a8>)
 8004696:	61bb      	str	r3, [r7, #24]
        break;
 8004698:	e00c      	b.n	80046b4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469a:	f7fe fc29 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 800469e:	61b8      	str	r0, [r7, #24]
        break;
 80046a0:	e008      	b.n	80046b4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046a6:	61bb      	str	r3, [r7, #24]
        break;
 80046a8:	e004      	b.n	80046b4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	77bb      	strb	r3, [r7, #30]
        break;
 80046b2:	bf00      	nop
    }

    if (pclk != 0U)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	085a      	lsrs	r2, r3, #1
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	441a      	add	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	d908      	bls.n	80046e8 <UART_SetConfig+0x38c>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d204      	bcs.n	80046e8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e001      	b.n	80046ec <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	007a1200 	.word	0x007a1200

08004708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01a      	beq.n	800481e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004806:	d10a      	bne.n	800481e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af02      	add	r7, sp, #8
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800485c:	f7fd f81a 	bl	8001894 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b08      	cmp	r3, #8
 800486e:	d10e      	bne.n	800488e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f82d 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e023      	b.n	80048d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d10e      	bne.n	80048ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800489c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f817 	bl	80048de <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e00d      	b.n	80048d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b09c      	sub	sp, #112	; 0x70
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ee:	e0a5      	b.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	f000 80a1 	beq.w	8004a3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fc ffcb 	bl	8001894 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <UART_WaitOnFlagUntilTimeout+0x32>
 800490a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800490c:	2b00      	cmp	r3, #0
 800490e:	d13e      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800491e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004920:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004924:	667b      	str	r3, [r7, #100]	; 0x64
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004930:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004934:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800493c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e6      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	663b      	str	r3, [r7, #96]	; 0x60
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3308      	adds	r3, #8
 8004960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004962:	64ba      	str	r2, [r7, #72]	; 0x48
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e067      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d04f      	beq.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049aa:	d147      	bne.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
 80049d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	613b      	str	r3, [r7, #16]
   return(result);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a08:	623a      	str	r2, [r7, #32]
 8004a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	69f9      	ldr	r1, [r7, #28]
 8004a0e:	6a3a      	ldr	r2, [r7, #32]
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e010      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	f43f af4a 	beq.w	80048f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3770      	adds	r7, #112	; 0x70
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a6e:	f3ef 8305 	mrs	r3, IPSR
 8004a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7e:	607b      	str	r3, [r7, #4]
  return(result);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <osKernelInitialize+0x32>
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <osKernelInitialize+0x64>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d109      	bne.n	8004aa2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a92:	603b      	str	r3, [r7, #0]
  return(result);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a9a:	f06f 0305 	mvn.w	r3, #5
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e00c      	b.n	8004abc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <osKernelInitialize+0x64>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <osKernelInitialize+0x64>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e002      	b.n	8004abc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000208 	.word	0x20000208

08004ad0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad6:	f3ef 8305 	mrs	r3, IPSR
 8004ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8004adc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae6:	607b      	str	r3, [r7, #4]
  return(result);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <osKernelStart+0x32>
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <osKernelStart+0x64>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d109      	bne.n	8004b0a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004af6:	f3ef 8311 	mrs	r3, BASEPRI
 8004afa:	603b      	str	r3, [r7, #0]
  return(result);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b02:	f06f 0305 	mvn.w	r3, #5
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e00e      	b.n	8004b28 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <osKernelStart+0x64>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <osKernelStart+0x64>)
 8004b14:	2202      	movs	r2, #2
 8004b16:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004b18:	f001 f898 	bl	8005c4c <vTaskStartScheduler>
      stat = osOK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e002      	b.n	8004b28 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000208 	.word	0x20000208

08004b38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b092      	sub	sp, #72	; 0x48
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b48:	f3ef 8305 	mrs	r3, IPSR
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 8094 	bne.w	8004c7e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b56:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f040 808d 	bne.w	8004c7e <osThreadNew+0x146>
 8004b64:	4b48      	ldr	r3, [pc, #288]	; (8004c88 <osThreadNew+0x150>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d106      	bne.n	8004b7a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b70:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 8082 	bne.w	8004c7e <osThreadNew+0x146>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d07e      	beq.n	8004c7e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004b84:	2318      	movs	r3, #24
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004b88:	2300      	movs	r3, #0
 8004b8a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004b8c:	f107 031b 	add.w	r3, r7, #27
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d045      	beq.n	8004c2a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <osThreadNew+0x74>
        name = attr->name;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <osThreadNew+0x9a>
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	2b38      	cmp	r3, #56	; 0x38
 8004bc4:	d805      	bhi.n	8004bd2 <osThreadNew+0x9a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <osThreadNew+0x9e>
        return (NULL);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e054      	b.n	8004c80 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <osThreadNew+0xd4>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2bbb      	cmp	r3, #187	; 0xbb
 8004bf4:	d90a      	bls.n	8004c0c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <osThreadNew+0xd4>
        mem = 1;
 8004c06:	2301      	movs	r3, #1
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0a:	e010      	b.n	8004c2e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10c      	bne.n	8004c2e <osThreadNew+0xf6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d108      	bne.n	8004c2e <osThreadNew+0xf6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <osThreadNew+0xf6>
          mem = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c28:	e001      	b.n	8004c2e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d110      	bne.n	8004c56 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c3c:	9202      	str	r2, [sp, #8]
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fe1a 	bl	8005884 <xTaskCreateStatic>
 8004c50:	4603      	mov	r3, r0
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e013      	b.n	8004c7e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d110      	bne.n	8004c7e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fe64 	bl	800593c <xTaskCreate>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d001      	beq.n	8004c7e <osThreadNew+0x146>
          hTask = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c7e:	697b      	ldr	r3, [r7, #20]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3738      	adds	r7, #56	; 0x38
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000208 	.word	0x20000208

08004c8c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c94:	f3ef 8305 	mrs	r3, IPSR
 8004c98:	613b      	str	r3, [r7, #16]
  return(result);
 8004c9a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10f      	bne.n	8004cc0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <osDelay+0x34>
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <osDelay+0x58>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d109      	bne.n	8004cc8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <osDelay+0x3c>
    stat = osErrorISR;
 8004cc0:	f06f 0305 	mvn.w	r3, #5
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e007      	b.n	8004cd8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 ff86 	bl	8005be4 <vTaskDelay>
    }
  }

  return (stat);
 8004cd8:	697b      	ldr	r3, [r7, #20]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000208 	.word	0x20000208

08004ce8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a07      	ldr	r2, [pc, #28]	; (8004d14 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <vApplicationGetIdleTaskMemory+0x30>)
 8004cfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000020c 	.word	0x2000020c
 8004d18:	200002c8 	.word	0x200002c8

08004d1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a07      	ldr	r2, [pc, #28]	; (8004d48 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4a06      	ldr	r2, [pc, #24]	; (8004d4c <vApplicationGetTimerTaskMemory+0x30>)
 8004d32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d3a:	601a      	str	r2, [r3, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	200004c8 	.word	0x200004c8
 8004d4c:	20000584 	.word	0x20000584

08004d50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f103 0208 	add.w	r2, r3, #8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295
 8004d68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f103 0208 	add.w	r2, r3, #8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f103 0208 	add.w	r2, r3, #8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d103      	bne.n	8004e12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e00c      	b.n	8004e2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3308      	adds	r3, #8
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e002      	b.n	8004e20 <vListInsert+0x2e>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d2f6      	bcs.n	8004e1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	601a      	str	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6892      	ldr	r2, [r2, #8]
 8004e7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6852      	ldr	r2, [r2, #4]
 8004e84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d103      	bne.n	8004e98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	1e5a      	subs	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ee2:	f002 f837 	bl	8006f54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	3b01      	subs	r3, #1
 8004f14:	68f9      	ldr	r1, [r7, #12]
 8004f16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	22ff      	movs	r2, #255	; 0xff
 8004f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d114      	bne.n	8004f62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01a      	beq.n	8004f76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3310      	adds	r3, #16
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 f91f 	bl	8006188 <xTaskRemoveFromEventList>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d012      	beq.n	8004f76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <xQueueGenericReset+0xcc>)
 8004f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	e009      	b.n	8004f76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3310      	adds	r3, #16
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fef2 	bl	8004d50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3324      	adds	r3, #36	; 0x24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff feed 	bl	8004d50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f76:	f002 f81d 	bl	8006fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f7a:	2301      	movs	r3, #1
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08e      	sub	sp, #56	; 0x38
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <xQueueGenericCreateStatic+0x52>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <xQueueGenericCreateStatic+0x56>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueGenericCreateStatic+0x58>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	623b      	str	r3, [r7, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <xQueueGenericCreateStatic+0x7e>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <xQueueGenericCreateStatic+0x82>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <xQueueGenericCreateStatic+0x84>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	61fb      	str	r3, [r7, #28]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005026:	2350      	movs	r3, #80	; 0x50
 8005028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b50      	cmp	r3, #80	; 0x50
 800502e:	d00a      	beq.n	8005046 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	61bb      	str	r3, [r7, #24]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005058:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f805 	bl	8005076 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800506e:	4618      	mov	r0, r3
 8005070:	3730      	adds	r7, #48	; 0x30
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e002      	b.n	8005098 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050a4:	2101      	movs	r1, #1
 80050a6:	69b8      	ldr	r0, [r7, #24]
 80050a8:	f7ff ff06 	bl	8004eb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	; 0x38
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericSend+0x32>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <xQueueGenericSend+0x40>
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <xQueueGenericSend+0x44>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <xQueueGenericSend+0x46>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xQueueGenericSend+0x60>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d103      	bne.n	800512a <xQueueGenericSend+0x6e>
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <xQueueGenericSend+0x72>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <xQueueGenericSend+0x74>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xQueueGenericSend+0x8e>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	623b      	str	r3, [r7, #32]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800514a:	f001 f9e5 	bl	8006518 <xTaskGetSchedulerState>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <xQueueGenericSend+0x9e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <xQueueGenericSend+0xa2>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <xQueueGenericSend+0xa4>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xQueueGenericSend+0xbe>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61fb      	str	r3, [r7, #28]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800517a:	f001 feeb 	bl	8006f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <xQueueGenericSend+0xd4>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d129      	bne.n	80051e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005196:	f000 fa07 	bl	80055a8 <prvCopyDataToQueue>
 800519a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	3324      	adds	r3, #36	; 0x24
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 ffed 	bl	8006188 <xTaskRemoveFromEventList>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051b4:	4b3f      	ldr	r3, [pc, #252]	; (80052b4 <xQueueGenericSend+0x1f8>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	e00a      	b.n	80051dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051cc:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <xQueueGenericSend+0x1f8>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051dc:	f001 feea 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e063      	b.n	80052ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ea:	f001 fee3 	bl	8006fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e05c      	b.n	80052ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051f8:	f107 0314 	add.w	r3, r7, #20
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 f827 	bl	8006250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005202:	2301      	movs	r3, #1
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005206:	f001 fed5 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800520a:	f000 fd8f 	bl	8005d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800520e:	f001 fea1 	bl	8006f54 <vPortEnterCritical>
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005218:	b25b      	sxtb	r3, r3
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d103      	bne.n	8005228 <xQueueGenericSend+0x16c>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522e:	b25b      	sxtb	r3, r3
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d103      	bne.n	800523e <xQueueGenericSend+0x182>
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800523e:	f001 feb9 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005242:	1d3a      	adds	r2, r7, #4
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f001 f816 	bl	800627c <xTaskCheckForTimeOut>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d124      	bne.n	80052a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005258:	f000 fa9e 	bl	8005798 <prvIsQueueFull>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d018      	beq.n	8005294 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	3310      	adds	r3, #16
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f000 ff3c 	bl	80060e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005272:	f000 fa29 	bl	80056c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005276:	f000 fd67 	bl	8005d48 <xTaskResumeAll>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	f47f af7c 	bne.w	800517a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <xQueueGenericSend+0x1f8>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	e772      	b.n	800517a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005296:	f000 fa17 	bl	80056c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800529a:	f000 fd55 	bl	8005d48 <xTaskResumeAll>
 800529e:	e76c      	b.n	800517a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a2:	f000 fa11 	bl	80056c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052a6:	f000 fd4f 	bl	8005d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052aa:	2300      	movs	r3, #0
		}
	}
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3738      	adds	r7, #56	; 0x38
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08e      	sub	sp, #56	; 0x38
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <xQueueGenericSendFromISR+0x3c>
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <xQueueGenericSendFromISR+0x40>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <xQueueGenericSendFromISR+0x42>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	623b      	str	r3, [r7, #32]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d103      	bne.n	8005322 <xQueueGenericSendFromISR+0x6a>
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <xQueueGenericSendFromISR+0x6e>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <xQueueGenericSendFromISR+0x70>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	61fb      	str	r3, [r7, #28]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005342:	f001 fee9 	bl	8007118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005346:	f3ef 8211 	mrs	r2, BASEPRI
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	61ba      	str	r2, [r7, #24]
 800535c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800535e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <xQueueGenericSendFromISR+0xbc>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d12c      	bne.n	80053ce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005384:	f000 f910 	bl	80055a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005388:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d112      	bne.n	80053b8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	3324      	adds	r3, #36	; 0x24
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fef2 	bl	8006188 <xTaskRemoveFromEventList>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00e      	beq.n	80053c8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e007      	b.n	80053c8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053bc:	3301      	adds	r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	b25a      	sxtb	r2, r3
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053c8:	2301      	movs	r3, #1
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80053cc:	e001      	b.n	80053d2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3738      	adds	r7, #56	; 0x38
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	; 0x30
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xQueueReceive+0x30>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	623b      	str	r3, [r7, #32]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <xQueueReceive+0x3e>
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueReceive+0x42>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueReceive+0x44>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueReceive+0x5e>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61fb      	str	r3, [r7, #28]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005446:	f001 f867 	bl	8006518 <xTaskGetSchedulerState>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xQueueReceive+0x6e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueReceive+0x72>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueReceive+0x74>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueReceive+0x8e>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61bb      	str	r3, [r7, #24]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005476:	f001 fd6d 	bl	8006f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01f      	beq.n	80054c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548a:	f000 f8f7 	bl	800567c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1e5a      	subs	r2, r3, #1
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00f      	beq.n	80054be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	3310      	adds	r3, #16
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fe70 	bl	8006188 <xTaskRemoveFromEventList>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054ae:	4b3d      	ldr	r3, [pc, #244]	; (80055a4 <xQueueReceive+0x1bc>)
 80054b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054be:	f001 fd79 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e069      	b.n	800559a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054cc:	f001 fd72 	bl	8006fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e062      	b.n	800559a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054da:	f107 0310 	add.w	r3, r7, #16
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 feb6 	bl	8006250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054e8:	f001 fd64 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ec:	f000 fc1e 	bl	8005d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054f0:	f001 fd30 	bl	8006f54 <vPortEnterCritical>
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d103      	bne.n	800550a <xQueueReceive+0x122>
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005510:	b25b      	sxtb	r3, r3
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d103      	bne.n	8005520 <xQueueReceive+0x138>
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005520:	f001 fd48 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005524:	1d3a      	adds	r2, r7, #4
 8005526:	f107 0310 	add.w	r3, r7, #16
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fea5 	bl	800627c <xTaskCheckForTimeOut>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d123      	bne.n	8005580 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553a:	f000 f917 	bl	800576c <prvIsQueueEmpty>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d017      	beq.n	8005574 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	3324      	adds	r3, #36	; 0x24
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fdcb 	bl	80060e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005554:	f000 f8b8 	bl	80056c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005558:	f000 fbf6 	bl	8005d48 <xTaskResumeAll>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d189      	bne.n	8005476 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <xQueueReceive+0x1bc>)
 8005564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	e780      	b.n	8005476 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005576:	f000 f8a7 	bl	80056c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800557a:	f000 fbe5 	bl	8005d48 <xTaskResumeAll>
 800557e:	e77a      	b.n	8005476 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005582:	f000 f8a1 	bl	80056c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005586:	f000 fbdf 	bl	8005d48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800558a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800558c:	f000 f8ee 	bl	800576c <prvIsQueueEmpty>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	f43f af6f 	beq.w	8005476 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800559a:	4618      	mov	r0, r3
 800559c:	3730      	adds	r7, #48	; 0x30
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10d      	bne.n	80055e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d14d      	bne.n	800566a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 ffbe 	bl	8006554 <xTaskPriorityDisinherit>
 80055d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	e043      	b.n	800566a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d119      	bne.n	800561c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6898      	ldr	r0, [r3, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	461a      	mov	r2, r3
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	f002 f8d6 	bl	80077a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d32b      	bcc.n	800566a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	e026      	b.n	800566a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68d8      	ldr	r0, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	461a      	mov	r2, r3
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	f002 f8bc 	bl	80077a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	425b      	negs	r3, r3
 8005636:	441a      	add	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d207      	bcs.n	8005658 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	425b      	negs	r3, r3
 8005652:	441a      	add	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d105      	bne.n	800566a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3b01      	subs	r3, #1
 8005668:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005672:	697b      	ldr	r3, [r7, #20]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	441a      	add	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d303      	bcc.n	80056b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68d9      	ldr	r1, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	461a      	mov	r2, r3
 80056ba:	6838      	ldr	r0, [r7, #0]
 80056bc:	f002 f872 	bl	80077a4 <memcpy>
	}
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056d0:	f001 fc40 	bl	8006f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056dc:	e011      	b.n	8005702 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d012      	beq.n	800570c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3324      	adds	r3, #36	; 0x24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fd4c 	bl	8006188 <xTaskRemoveFromEventList>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056f6:	f000 fe23 	bl	8006340 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	dce9      	bgt.n	80056de <prvUnlockQueue+0x16>
 800570a:	e000      	b.n	800570e <prvUnlockQueue+0x46>
					break;
 800570c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	22ff      	movs	r2, #255	; 0xff
 8005712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005716:	f001 fc4d 	bl	8006fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800571a:	f001 fc1b 	bl	8006f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005724:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005726:	e011      	b.n	800574c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3310      	adds	r3, #16
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fd27 	bl	8006188 <xTaskRemoveFromEventList>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005740:	f000 fdfe 	bl	8006340 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	3b01      	subs	r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800574c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005750:	2b00      	cmp	r3, #0
 8005752:	dce9      	bgt.n	8005728 <prvUnlockQueue+0x60>
 8005754:	e000      	b.n	8005758 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005756:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	22ff      	movs	r2, #255	; 0xff
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005760:	f001 fc28 	bl	8006fb4 <vPortExitCritical>
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005774:	f001 fbee 	bl	8006f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e001      	b.n	800578a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800578a:	f001 fc13 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057a0:	f001 fbd8 	bl	8006f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d102      	bne.n	80057b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e001      	b.n	80057ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ba:	f001 fbfb 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 80057be:	68fb      	ldr	r3, [r7, #12]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e014      	b.n	8005802 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057d8:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <vQueueAddToRegistry+0x50>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057e4:	490c      	ldr	r1, [pc, #48]	; (8005818 <vQueueAddToRegistry+0x50>)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057ee:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <vQueueAddToRegistry+0x50>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057fa:	e006      	b.n	800580a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b07      	cmp	r3, #7
 8005806:	d9e7      	bls.n	80057d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20002c28 	.word	0x20002c28

0800581c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800582c:	f001 fb92 	bl	8006f54 <vPortEnterCritical>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005836:	b25b      	sxtb	r3, r3
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d103      	bne.n	8005846 <vQueueWaitForMessageRestricted+0x2a>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584c:	b25b      	sxtb	r3, r3
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d103      	bne.n	800585c <vQueueWaitForMessageRestricted+0x40>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585c:	f001 fbaa 	bl	8006fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	3324      	adds	r3, #36	; 0x24
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fc5d 	bl	8006130 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005876:	6978      	ldr	r0, [r7, #20]
 8005878:	f7ff ff26 	bl	80056c8 <prvUnlockQueue>
	}
 800587c:	bf00      	nop
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08e      	sub	sp, #56	; 0x38
 8005888:	af04      	add	r7, sp, #16
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	623b      	str	r3, [r7, #32]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xTaskCreateStatic+0x46>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61fb      	str	r3, [r7, #28]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058ca:	23bc      	movs	r3, #188	; 0xbc
 80058cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2bbc      	cmp	r3, #188	; 0xbc
 80058d2:	d00a      	beq.n	80058ea <xTaskCreateStatic+0x66>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	61bb      	str	r3, [r7, #24]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01e      	beq.n	800592e <xTaskCreateStatic+0xaa>
 80058f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01b      	beq.n	800592e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	2202      	movs	r2, #2
 8005904:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005908:	2300      	movs	r3, #0
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f851 	bl	80059c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005928:	f000 f8ec 	bl	8005b04 <prvAddNewTaskToReadyList>
 800592c:	e001      	b.n	8005932 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005932:	697b      	ldr	r3, [r7, #20]
	}
 8005934:	4618      	mov	r0, r3
 8005936:	3728      	adds	r7, #40	; 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af04      	add	r7, sp, #16
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800594c:	88fb      	ldrh	r3, [r7, #6]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4618      	mov	r0, r3
 8005952:	f001 fc21 	bl	8007198 <pvPortMalloc>
 8005956:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800595e:	20bc      	movs	r0, #188	; 0xbc
 8005960:	f001 fc1a 	bl	8007198 <pvPortMalloc>
 8005964:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
 8005972:	e005      	b.n	8005980 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005974:	6978      	ldr	r0, [r7, #20]
 8005976:	f001 fcd3 	bl	8007320 <vPortFree>
 800597a:	e001      	b.n	8005980 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d017      	beq.n	80059b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	2300      	movs	r3, #0
 8005992:	9303      	str	r3, [sp, #12]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	9302      	str	r3, [sp, #8]
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f80f 	bl	80059c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059aa:	69f8      	ldr	r0, [r7, #28]
 80059ac:	f000 f8aa 	bl	8005b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059b0:	2301      	movs	r3, #1
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e002      	b.n	80059bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059bc:	69bb      	ldr	r3, [r7, #24]
	}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	461a      	mov	r2, r3
 80059e0:	21a5      	movs	r1, #165	; 0xa5
 80059e2:	f001 feed 	bl	80077c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059f0:	3b01      	subs	r3, #1
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	617b      	str	r3, [r7, #20]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	e012      	b.n	8005a4c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	7819      	ldrb	r1, [r3, #0]
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	3334      	adds	r3, #52	; 0x34
 8005a36:	460a      	mov	r2, r1
 8005a38:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d006      	beq.n	8005a54 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d9e9      	bls.n	8005a26 <prvInitialiseNewTask+0x5e>
 8005a52:	e000      	b.n	8005a56 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005a54:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2b37      	cmp	r3, #55	; 0x37
 8005a62:	d901      	bls.n	8005a68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a64:	2337      	movs	r3, #55	; 0x37
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2200      	movs	r2, #0
 8005a78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff f986 	bl	8004d90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	3318      	adds	r3, #24
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff f981 	bl	8004d90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	3354      	adds	r3, #84	; 0x54
 8005ab8:	2260      	movs	r2, #96	; 0x60
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fe7f 	bl	80077c0 <memset>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	4a0c      	ldr	r2, [pc, #48]	; (8005af8 <prvInitialiseNewTask+0x130>)
 8005ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <prvInitialiseNewTask+0x134>)
 8005acc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <prvInitialiseNewTask+0x138>)
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	69b8      	ldr	r0, [r7, #24]
 8005ada:	f001 f90f 	bl	8006cfc <pxPortInitialiseStack>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005af0:	bf00      	nop
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	0800a6b0 	.word	0x0800a6b0
 8005afc:	0800a6d0 	.word	0x0800a6d0
 8005b00:	0800a690 	.word	0x0800a690

08005b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b0c:	f001 fa22 	bl	8006f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b10:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <prvAddNewTaskToReadyList+0xc4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <prvAddNewTaskToReadyList+0xc4>)
 8005b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b1a:	4b2c      	ldr	r3, [pc, #176]	; (8005bcc <prvAddNewTaskToReadyList+0xc8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b22:	4a2a      	ldr	r2, [pc, #168]	; (8005bcc <prvAddNewTaskToReadyList+0xc8>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <prvAddNewTaskToReadyList+0xc4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d110      	bne.n	8005b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b30:	f000 fc2a 	bl	8006388 <prvInitialiseTaskLists>
 8005b34:	e00d      	b.n	8005b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b36:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <prvAddNewTaskToReadyList+0xcc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b3e:	4b23      	ldr	r3, [pc, #140]	; (8005bcc <prvAddNewTaskToReadyList+0xc8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d802      	bhi.n	8005b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <prvAddNewTaskToReadyList+0xc8>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <prvAddNewTaskToReadyList+0xd0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	4a1e      	ldr	r2, [pc, #120]	; (8005bd4 <prvAddNewTaskToReadyList+0xd0>)
 8005b5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	; (8005bd4 <prvAddNewTaskToReadyList+0xd0>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <prvAddNewTaskToReadyList+0xd4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d903      	bls.n	8005b78 <prvAddNewTaskToReadyList+0x74>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <prvAddNewTaskToReadyList+0xd4>)
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <prvAddNewTaskToReadyList+0xd8>)
 8005b86:	441a      	add	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f7ff f90b 	bl	8004daa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b94:	f001 fa0e 	bl	8006fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <prvAddNewTaskToReadyList+0xcc>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00e      	beq.n	8005bbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <prvAddNewTaskToReadyList+0xc8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d207      	bcs.n	8005bbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <prvAddNewTaskToReadyList+0xdc>)
 8005bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000e58 	.word	0x20000e58
 8005bcc:	20000984 	.word	0x20000984
 8005bd0:	20000e64 	.word	0x20000e64
 8005bd4:	20000e74 	.word	0x20000e74
 8005bd8:	20000e60 	.word	0x20000e60
 8005bdc:	20000988 	.word	0x20000988
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d017      	beq.n	8005c26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bf6:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <vTaskDelay+0x60>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <vTaskDelay+0x30>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	60bb      	str	r3, [r7, #8]
}
 8005c10:	bf00      	nop
 8005c12:	e7fe      	b.n	8005c12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c14:	f000 f88a 	bl	8005d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c18:	2100      	movs	r1, #0
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fd08 	bl	8006630 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c20:	f000 f892 	bl	8005d48 <xTaskResumeAll>
 8005c24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d107      	bne.n	8005c3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <vTaskDelay+0x64>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000e80 	.word	0x20000e80
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c5a:	463a      	mov	r2, r7
 8005c5c:	1d39      	adds	r1, r7, #4
 8005c5e:	f107 0308 	add.w	r3, r7, #8
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff f840 	bl	8004ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	9202      	str	r2, [sp, #8]
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	2300      	movs	r3, #0
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	460a      	mov	r2, r1
 8005c7a:	4924      	ldr	r1, [pc, #144]	; (8005d0c <vTaskStartScheduler+0xc0>)
 8005c7c:	4824      	ldr	r0, [pc, #144]	; (8005d10 <vTaskStartScheduler+0xc4>)
 8005c7e:	f7ff fe01 	bl	8005884 <xTaskCreateStatic>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <vTaskStartScheduler+0xc8>)
 8005c86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c88:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <vTaskStartScheduler+0xc8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c90:	2301      	movs	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e001      	b.n	8005c9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d102      	bne.n	8005ca6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ca0:	f000 fd1a 	bl	80066d8 <xTimerCreateTimerTask>
 8005ca4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d11b      	bne.n	8005ce4 <vTaskStartScheduler+0x98>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	613b      	str	r3, [r7, #16]
}
 8005cbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cc0:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <vTaskStartScheduler+0xcc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3354      	adds	r3, #84	; 0x54
 8005cc6:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <vTaskStartScheduler+0xd0>)
 8005cc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <vTaskStartScheduler+0xd4>)
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cd2:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <vTaskStartScheduler+0xd8>)
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <vTaskStartScheduler+0xdc>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cde:	f001 f897 	bl	8006e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ce2:	e00e      	b.n	8005d02 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d10a      	bne.n	8005d02 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60fb      	str	r3, [r7, #12]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <vTaskStartScheduler+0xb4>
}
 8005d02:	bf00      	nop
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	0800a5d4 	.word	0x0800a5d4
 8005d10:	08006359 	.word	0x08006359
 8005d14:	20000e7c 	.word	0x20000e7c
 8005d18:	20000984 	.word	0x20000984
 8005d1c:	20000010 	.word	0x20000010
 8005d20:	20000e78 	.word	0x20000e78
 8005d24:	20000e64 	.word	0x20000e64
 8005d28:	20000e5c 	.word	0x20000e5c

08005d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d30:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <vTaskSuspendAll+0x18>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	4a03      	ldr	r2, [pc, #12]	; (8005d44 <vTaskSuspendAll+0x18>)
 8005d38:	6013      	str	r3, [r2, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20000e80 	.word	0x20000e80

08005d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d56:	4b42      	ldr	r3, [pc, #264]	; (8005e60 <xTaskResumeAll+0x118>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	603b      	str	r3, [r7, #0]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d74:	f001 f8ee 	bl	8006f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d78:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <xTaskResumeAll+0x118>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	4a38      	ldr	r2, [pc, #224]	; (8005e60 <xTaskResumeAll+0x118>)
 8005d80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d82:	4b37      	ldr	r3, [pc, #220]	; (8005e60 <xTaskResumeAll+0x118>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d162      	bne.n	8005e50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d8a:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <xTaskResumeAll+0x11c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d05e      	beq.n	8005e50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d92:	e02f      	b.n	8005df4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d94:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <xTaskResumeAll+0x120>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3318      	adds	r3, #24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff f85f 	bl	8004e64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff f85a 	bl	8004e64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <xTaskResumeAll+0x124>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d903      	bls.n	8005dc4 <xTaskResumeAll+0x7c>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	4a2a      	ldr	r2, [pc, #168]	; (8005e6c <xTaskResumeAll+0x124>)
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <xTaskResumeAll+0x128>)
 8005dd2:	441a      	add	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f7fe ffe5 	bl	8004daa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4b23      	ldr	r3, [pc, #140]	; (8005e74 <xTaskResumeAll+0x12c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005dee:	4b22      	ldr	r3, [pc, #136]	; (8005e78 <xTaskResumeAll+0x130>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df4:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <xTaskResumeAll+0x120>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1cb      	bne.n	8005d94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e02:	f000 fb63 	bl	80064cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e06:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <xTaskResumeAll+0x134>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e12:	f000 f847 	bl	8005ea4 <xTaskIncrementTick>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <xTaskResumeAll+0x130>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f1      	bne.n	8005e12 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <xTaskResumeAll+0x134>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e34:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <xTaskResumeAll+0x130>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d009      	beq.n	8005e50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e40:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <xTaskResumeAll+0x138>)
 8005e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e50:	f001 f8b0 	bl	8006fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8005e54:	68bb      	ldr	r3, [r7, #8]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000e80 	.word	0x20000e80
 8005e64:	20000e58 	.word	0x20000e58
 8005e68:	20000e18 	.word	0x20000e18
 8005e6c:	20000e60 	.word	0x20000e60
 8005e70:	20000988 	.word	0x20000988
 8005e74:	20000984 	.word	0x20000984
 8005e78:	20000e6c 	.word	0x20000e6c
 8005e7c:	20000e68 	.word	0x20000e68
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <xTaskGetTickCount+0x1c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e90:	687b      	ldr	r3, [r7, #4]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000e5c 	.word	0x20000e5c

08005ea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eae:	4b51      	ldr	r3, [pc, #324]	; (8005ff4 <xTaskIncrementTick+0x150>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f040 808e 	bne.w	8005fd4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005eb8:	4b4f      	ldr	r3, [pc, #316]	; (8005ff8 <xTaskIncrementTick+0x154>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ec0:	4a4d      	ldr	r2, [pc, #308]	; (8005ff8 <xTaskIncrementTick+0x154>)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d120      	bne.n	8005f0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ecc:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <xTaskIncrementTick+0x158>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <xTaskIncrementTick+0x48>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	603b      	str	r3, [r7, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <xTaskIncrementTick+0x46>
 8005eec:	4b43      	ldr	r3, [pc, #268]	; (8005ffc <xTaskIncrementTick+0x158>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	4b43      	ldr	r3, [pc, #268]	; (8006000 <xTaskIncrementTick+0x15c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a41      	ldr	r2, [pc, #260]	; (8005ffc <xTaskIncrementTick+0x158>)
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	4a41      	ldr	r2, [pc, #260]	; (8006000 <xTaskIncrementTick+0x15c>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b40      	ldr	r3, [pc, #256]	; (8006004 <xTaskIncrementTick+0x160>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	4a3f      	ldr	r2, [pc, #252]	; (8006004 <xTaskIncrementTick+0x160>)
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	f000 fadf 	bl	80064cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f0e:	4b3e      	ldr	r3, [pc, #248]	; (8006008 <xTaskIncrementTick+0x164>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d34e      	bcc.n	8005fb6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f18:	4b38      	ldr	r3, [pc, #224]	; (8005ffc <xTaskIncrementTick+0x158>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <xTaskIncrementTick+0x82>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xTaskIncrementTick+0x84>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f2c:	4b36      	ldr	r3, [pc, #216]	; (8006008 <xTaskIncrementTick+0x164>)
 8005f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f32:	601a      	str	r2, [r3, #0]
					break;
 8005f34:	e03f      	b.n	8005fb6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f36:	4b31      	ldr	r3, [pc, #196]	; (8005ffc <xTaskIncrementTick+0x158>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d203      	bcs.n	8005f56 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f4e:	4a2e      	ldr	r2, [pc, #184]	; (8006008 <xTaskIncrementTick+0x164>)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6013      	str	r3, [r2, #0]
						break;
 8005f54:	e02f      	b.n	8005fb6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe ff82 	bl	8004e64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe ff79 	bl	8004e64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	4b25      	ldr	r3, [pc, #148]	; (800600c <xTaskIncrementTick+0x168>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d903      	bls.n	8005f86 <xTaskIncrementTick+0xe2>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	4a22      	ldr	r2, [pc, #136]	; (800600c <xTaskIncrementTick+0x168>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <xTaskIncrementTick+0x16c>)
 8005f94:	441a      	add	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7fe ff04 	bl	8004daa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <xTaskIncrementTick+0x170>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d3b3      	bcc.n	8005f18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fb4:	e7b0      	b.n	8005f18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fb6:	4b17      	ldr	r3, [pc, #92]	; (8006014 <xTaskIncrementTick+0x170>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4914      	ldr	r1, [pc, #80]	; (8006010 <xTaskIncrementTick+0x16c>)
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d907      	bls.n	8005fde <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e004      	b.n	8005fde <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <xTaskIncrementTick+0x174>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4a0f      	ldr	r2, [pc, #60]	; (8006018 <xTaskIncrementTick+0x174>)
 8005fdc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fde:	4b0f      	ldr	r3, [pc, #60]	; (800601c <xTaskIncrementTick+0x178>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fea:	697b      	ldr	r3, [r7, #20]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	20000e80 	.word	0x20000e80
 8005ff8:	20000e5c 	.word	0x20000e5c
 8005ffc:	20000e10 	.word	0x20000e10
 8006000:	20000e14 	.word	0x20000e14
 8006004:	20000e70 	.word	0x20000e70
 8006008:	20000e78 	.word	0x20000e78
 800600c:	20000e60 	.word	0x20000e60
 8006010:	20000988 	.word	0x20000988
 8006014:	20000984 	.word	0x20000984
 8006018:	20000e68 	.word	0x20000e68
 800601c:	20000e6c 	.word	0x20000e6c

08006020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006026:	4b2a      	ldr	r3, [pc, #168]	; (80060d0 <vTaskSwitchContext+0xb0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800602e:	4b29      	ldr	r3, [pc, #164]	; (80060d4 <vTaskSwitchContext+0xb4>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006034:	e046      	b.n	80060c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006036:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <vTaskSwitchContext+0xb4>)
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800603c:	4b26      	ldr	r3, [pc, #152]	; (80060d8 <vTaskSwitchContext+0xb8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e010      	b.n	8006066 <vTaskSwitchContext+0x46>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <vTaskSwitchContext+0x40>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	607b      	str	r3, [r7, #4]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <vTaskSwitchContext+0x3e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3b01      	subs	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	491d      	ldr	r1, [pc, #116]	; (80060dc <vTaskSwitchContext+0xbc>)
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0e4      	beq.n	8006044 <vTaskSwitchContext+0x24>
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4a15      	ldr	r2, [pc, #84]	; (80060dc <vTaskSwitchContext+0xbc>)
 8006086:	4413      	add	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	3308      	adds	r3, #8
 800609c:	429a      	cmp	r2, r3
 800609e:	d104      	bne.n	80060aa <vTaskSwitchContext+0x8a>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a0b      	ldr	r2, [pc, #44]	; (80060e0 <vTaskSwitchContext+0xc0>)
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	4a08      	ldr	r2, [pc, #32]	; (80060d8 <vTaskSwitchContext+0xb8>)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <vTaskSwitchContext+0xc0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3354      	adds	r3, #84	; 0x54
 80060c0:	4a08      	ldr	r2, [pc, #32]	; (80060e4 <vTaskSwitchContext+0xc4>)
 80060c2:	6013      	str	r3, [r2, #0]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20000e80 	.word	0x20000e80
 80060d4:	20000e6c 	.word	0x20000e6c
 80060d8:	20000e60 	.word	0x20000e60
 80060dc:	20000988 	.word	0x20000988
 80060e0:	20000984 	.word	0x20000984
 80060e4:	20000010 	.word	0x20000010

080060e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60fb      	str	r3, [r7, #12]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <vTaskPlaceOnEventList+0x44>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3318      	adds	r3, #24
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fe fe6b 	bl	8004df2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800611c:	2101      	movs	r1, #1
 800611e:	6838      	ldr	r0, [r7, #0]
 8006120:	f000 fa86 	bl	8006630 <prvAddCurrentTaskToDelayedList>
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000984 	.word	0x20000984

08006130 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	617b      	str	r3, [r7, #20]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <vTaskPlaceOnEventListRestricted+0x54>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3318      	adds	r3, #24
 800615e:	4619      	mov	r1, r3
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7fe fe22 	bl	8004daa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800616c:	f04f 33ff 	mov.w	r3, #4294967295
 8006170:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	68b8      	ldr	r0, [r7, #8]
 8006176:	f000 fa5b 	bl	8006630 <prvAddCurrentTaskToDelayedList>
	}
 800617a:	bf00      	nop
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000984 	.word	0x20000984

08006188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60fb      	str	r3, [r7, #12]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3318      	adds	r3, #24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fe53 	bl	8004e64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061be:	4b1e      	ldr	r3, [pc, #120]	; (8006238 <xTaskRemoveFromEventList+0xb0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d11d      	bne.n	8006202 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fe4a 	bl	8004e64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	4b19      	ldr	r3, [pc, #100]	; (800623c <xTaskRemoveFromEventList+0xb4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d903      	bls.n	80061e4 <xTaskRemoveFromEventList+0x5c>
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	4a16      	ldr	r2, [pc, #88]	; (800623c <xTaskRemoveFromEventList+0xb4>)
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4a13      	ldr	r2, [pc, #76]	; (8006240 <xTaskRemoveFromEventList+0xb8>)
 80061f2:	441a      	add	r2, r3
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f7fe fdd5 	bl	8004daa <vListInsertEnd>
 8006200:	e005      	b.n	800620e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	3318      	adds	r3, #24
 8006206:	4619      	mov	r1, r3
 8006208:	480e      	ldr	r0, [pc, #56]	; (8006244 <xTaskRemoveFromEventList+0xbc>)
 800620a:	f7fe fdce 	bl	8004daa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006212:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <xTaskRemoveFromEventList+0xc0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	429a      	cmp	r2, r3
 800621a:	d905      	bls.n	8006228 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <xTaskRemoveFromEventList+0xc4>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e001      	b.n	800622c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800622c:	697b      	ldr	r3, [r7, #20]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000e80 	.word	0x20000e80
 800623c:	20000e60 	.word	0x20000e60
 8006240:	20000988 	.word	0x20000988
 8006244:	20000e18 	.word	0x20000e18
 8006248:	20000984 	.word	0x20000984
 800624c:	20000e6c 	.word	0x20000e6c

08006250 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <vTaskInternalSetTimeOutState+0x24>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <vTaskInternalSetTimeOutState+0x28>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	605a      	str	r2, [r3, #4]
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	20000e70 	.word	0x20000e70
 8006278:	20000e5c 	.word	0x20000e5c

0800627c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	613b      	str	r3, [r7, #16]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062be:	f000 fe49 	bl	8006f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062c2:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <xTaskCheckForTimeOut+0xbc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d102      	bne.n	80062e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e023      	b.n	800632a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b15      	ldr	r3, [pc, #84]	; (800633c <xTaskCheckForTimeOut+0xc0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d007      	beq.n	80062fe <xTaskCheckForTimeOut+0x82>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d302      	bcc.n	80062fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062f8:	2301      	movs	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e015      	b.n	800632a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	429a      	cmp	r2, r3
 8006306:	d20b      	bcs.n	8006320 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ff9b 	bl	8006250 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	e004      	b.n	800632a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006326:	2301      	movs	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800632a:	f000 fe43 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 800632e:	69fb      	ldr	r3, [r7, #28]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20000e5c 	.word	0x20000e5c
 800633c:	20000e70 	.word	0x20000e70

08006340 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006344:	4b03      	ldr	r3, [pc, #12]	; (8006354 <vTaskMissedYield+0x14>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	20000e6c 	.word	0x20000e6c

08006358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006360:	f000 f852 	bl	8006408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <prvIdleTask+0x28>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d9f9      	bls.n	8006360 <prvIdleTask+0x8>
			{
				taskYIELD();
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <prvIdleTask+0x2c>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800637c:	e7f0      	b.n	8006360 <prvIdleTask+0x8>
 800637e:	bf00      	nop
 8006380:	20000988 	.word	0x20000988
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	e00c      	b.n	80063ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4a12      	ldr	r2, [pc, #72]	; (80063e8 <prvInitialiseTaskLists+0x60>)
 80063a0:	4413      	add	r3, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fcd4 	bl	8004d50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3301      	adds	r3, #1
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b37      	cmp	r3, #55	; 0x37
 80063b2:	d9ef      	bls.n	8006394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063b4:	480d      	ldr	r0, [pc, #52]	; (80063ec <prvInitialiseTaskLists+0x64>)
 80063b6:	f7fe fccb 	bl	8004d50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063ba:	480d      	ldr	r0, [pc, #52]	; (80063f0 <prvInitialiseTaskLists+0x68>)
 80063bc:	f7fe fcc8 	bl	8004d50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063c0:	480c      	ldr	r0, [pc, #48]	; (80063f4 <prvInitialiseTaskLists+0x6c>)
 80063c2:	f7fe fcc5 	bl	8004d50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063c6:	480c      	ldr	r0, [pc, #48]	; (80063f8 <prvInitialiseTaskLists+0x70>)
 80063c8:	f7fe fcc2 	bl	8004d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063cc:	480b      	ldr	r0, [pc, #44]	; (80063fc <prvInitialiseTaskLists+0x74>)
 80063ce:	f7fe fcbf 	bl	8004d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <prvInitialiseTaskLists+0x78>)
 80063d4:	4a05      	ldr	r2, [pc, #20]	; (80063ec <prvInitialiseTaskLists+0x64>)
 80063d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <prvInitialiseTaskLists+0x7c>)
 80063da:	4a05      	ldr	r2, [pc, #20]	; (80063f0 <prvInitialiseTaskLists+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000988 	.word	0x20000988
 80063ec:	20000de8 	.word	0x20000de8
 80063f0:	20000dfc 	.word	0x20000dfc
 80063f4:	20000e18 	.word	0x20000e18
 80063f8:	20000e2c 	.word	0x20000e2c
 80063fc:	20000e44 	.word	0x20000e44
 8006400:	20000e10 	.word	0x20000e10
 8006404:	20000e14 	.word	0x20000e14

08006408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800640e:	e019      	b.n	8006444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006410:	f000 fda0 	bl	8006f54 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006414:	4b10      	ldr	r3, [pc, #64]	; (8006458 <prvCheckTasksWaitingTermination+0x50>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fd1f 	bl	8004e64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <prvCheckTasksWaitingTermination+0x54>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3b01      	subs	r3, #1
 800642c:	4a0b      	ldr	r2, [pc, #44]	; (800645c <prvCheckTasksWaitingTermination+0x54>)
 800642e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <prvCheckTasksWaitingTermination+0x58>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3b01      	subs	r3, #1
 8006436:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <prvCheckTasksWaitingTermination+0x58>)
 8006438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800643a:	f000 fdbb 	bl	8006fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f810 	bl	8006464 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <prvCheckTasksWaitingTermination+0x58>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e1      	bne.n	8006410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000e2c 	.word	0x20000e2c
 800645c:	20000e58 	.word	0x20000e58
 8006460:	20000e40 	.word	0x20000e40

08006464 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3354      	adds	r3, #84	; 0x54
 8006470:	4618      	mov	r0, r3
 8006472:	f001 fecf 	bl	8008214 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800647c:	2b00      	cmp	r3, #0
 800647e:	d108      	bne.n	8006492 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	4618      	mov	r0, r3
 8006486:	f000 ff4b 	bl	8007320 <vPortFree>
				vPortFree( pxTCB );
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 ff48 	bl	8007320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006490:	e018      	b.n	80064c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006498:	2b01      	cmp	r3, #1
 800649a:	d103      	bne.n	80064a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ff3f 	bl	8007320 <vPortFree>
	}
 80064a2:	e00f      	b.n	80064c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d00a      	beq.n	80064c4 <prvDeleteTCB+0x60>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <prvDeleteTCB+0x5e>
	}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d2:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <prvResetNextTaskUnblockTime+0x44>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <prvResetNextTaskUnblockTime+0x14>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <prvResetNextTaskUnblockTime+0x16>
 80064e0:	2300      	movs	r3, #0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <prvResetNextTaskUnblockTime+0x48>)
 80064e8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064ee:	e008      	b.n	8006502 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <prvResetNextTaskUnblockTime+0x44>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4a05      	ldr	r2, [pc, #20]	; (8006514 <prvResetNextTaskUnblockTime+0x48>)
 8006500:	6013      	str	r3, [r2, #0]
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000e10 	.word	0x20000e10
 8006514:	20000e78 	.word	0x20000e78

08006518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <xTaskGetSchedulerState+0x34>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006526:	2301      	movs	r3, #1
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	e008      	b.n	800653e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800652c:	4b08      	ldr	r3, [pc, #32]	; (8006550 <xTaskGetSchedulerState+0x38>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006534:	2302      	movs	r3, #2
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	e001      	b.n	800653e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800653a:	2300      	movs	r3, #0
 800653c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800653e:	687b      	ldr	r3, [r7, #4]
	}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	20000e64 	.word	0x20000e64
 8006550:	20000e80 	.word	0x20000e80

08006554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d056      	beq.n	8006618 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800656a:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <xTaskPriorityDisinherit+0xd0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	429a      	cmp	r2, r3
 8006572:	d00a      	beq.n	800658a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60bb      	str	r3, [r7, #8]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	1e5a      	subs	r2, r3, #1
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d02c      	beq.n	8006618 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d128      	bne.n	8006618 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3304      	adds	r3, #4
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe fc4a 	bl	8004e64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <xTaskPriorityDisinherit+0xd4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d903      	bls.n	80065f8 <xTaskPriorityDisinherit+0xa4>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <xTaskPriorityDisinherit+0xd4>)
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4a09      	ldr	r2, [pc, #36]	; (800662c <xTaskPriorityDisinherit+0xd8>)
 8006606:	441a      	add	r2, r3
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	3304      	adds	r3, #4
 800660c:	4619      	mov	r1, r3
 800660e:	4610      	mov	r0, r2
 8006610:	f7fe fbcb 	bl	8004daa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006614:	2301      	movs	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006618:	697b      	ldr	r3, [r7, #20]
	}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000984 	.word	0x20000984
 8006628:	20000e60 	.word	0x20000e60
 800662c:	20000988 	.word	0x20000988

08006630 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800663a:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006640:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fc0c 	bl	8004e64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d10a      	bne.n	800666a <prvAddCurrentTaskToDelayedList+0x3a>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800665a:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4819      	ldr	r0, [pc, #100]	; (80066c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006664:	f7fe fba1 	bl	8004daa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006668:	e026      	b.n	80066b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4413      	add	r3, r2
 8006670:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	429a      	cmp	r2, r3
 8006680:	d209      	bcs.n	8006696 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006682:	4b12      	ldr	r3, [pc, #72]	; (80066cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fe fbaf 	bl	8004df2 <vListInsert>
}
 8006694:	e010      	b.n	80066b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006696:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f7fe fba5 	bl	8004df2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d202      	bcs.n	80066b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066b2:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6013      	str	r3, [r2, #0]
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000e5c 	.word	0x20000e5c
 80066c4:	20000984 	.word	0x20000984
 80066c8:	20000e44 	.word	0x20000e44
 80066cc:	20000e14 	.word	0x20000e14
 80066d0:	20000e10 	.word	0x20000e10
 80066d4:	20000e78 	.word	0x20000e78

080066d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066e2:	f000 facb 	bl	8006c7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066e6:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <xTimerCreateTimerTask+0x80>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d021      	beq.n	8006732 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066f6:	1d3a      	adds	r2, r7, #4
 80066f8:	f107 0108 	add.w	r1, r7, #8
 80066fc:	f107 030c 	add.w	r3, r7, #12
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe fb0b 	bl	8004d1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	9202      	str	r2, [sp, #8]
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	2302      	movs	r3, #2
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	460a      	mov	r2, r1
 8006718:	4910      	ldr	r1, [pc, #64]	; (800675c <xTimerCreateTimerTask+0x84>)
 800671a:	4811      	ldr	r0, [pc, #68]	; (8006760 <xTimerCreateTimerTask+0x88>)
 800671c:	f7ff f8b2 	bl	8005884 <xTaskCreateStatic>
 8006720:	4603      	mov	r3, r0
 8006722:	4a10      	ldr	r2, [pc, #64]	; (8006764 <xTimerCreateTimerTask+0x8c>)
 8006724:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006726:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <xTimerCreateTimerTask+0x8c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800672e:	2301      	movs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	613b      	str	r3, [r7, #16]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800674e:	697b      	ldr	r3, [r7, #20]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000eb4 	.word	0x20000eb4
 800675c:	0800a5dc 	.word	0x0800a5dc
 8006760:	08006885 	.word	0x08006885
 8006764:	20000eb8 	.word	0x20000eb8

08006768 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006776:	2300      	movs	r3, #0
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	623b      	str	r3, [r7, #32]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <xTimerGenericCommand+0x98>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d02a      	beq.n	80067f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	dc18      	bgt.n	80067e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067b0:	f7ff feb2 	bl	8006518 <xTaskGetSchedulerState>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d109      	bne.n	80067ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <xTimerGenericCommand+0x98>)
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	f107 0110 	add.w	r1, r7, #16
 80067c2:	2300      	movs	r3, #0
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	f7fe fc79 	bl	80050bc <xQueueGenericSend>
 80067ca:	6278      	str	r0, [r7, #36]	; 0x24
 80067cc:	e012      	b.n	80067f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <xTimerGenericCommand+0x98>)
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f107 0110 	add.w	r1, r7, #16
 80067d6:	2300      	movs	r3, #0
 80067d8:	2200      	movs	r2, #0
 80067da:	f7fe fc6f 	bl	80050bc <xQueueGenericSend>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24
 80067e0:	e008      	b.n	80067f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067e2:	4b07      	ldr	r3, [pc, #28]	; (8006800 <xTimerGenericCommand+0x98>)
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f107 0110 	add.w	r1, r7, #16
 80067ea:	2300      	movs	r3, #0
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	f7fe fd63 	bl	80052b8 <xQueueGenericSendFromISR>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3728      	adds	r7, #40	; 0x28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000eb4 	.word	0x20000eb4

08006804 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800680e:	4b1c      	ldr	r3, [pc, #112]	; (8006880 <prvProcessExpiredTimer+0x7c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3304      	adds	r3, #4
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fb21 	bl	8004e64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d122      	bne.n	8006870 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	18d1      	adds	r1, r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	6978      	ldr	r0, [r7, #20]
 8006838:	f000 f8c8 	bl	80069cc <prvInsertTimerInActiveList>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006842:	2300      	movs	r3, #0
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	2300      	movs	r3, #0
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	2100      	movs	r1, #0
 800684c:	6978      	ldr	r0, [r7, #20]
 800684e:	f7ff ff8b 	bl	8006768 <xTimerGenericCommand>
 8006852:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	60fb      	str	r3, [r7, #12]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	4798      	blx	r3
}
 8006878:	bf00      	nop
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20000eac 	.word	0x20000eac

08006884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	4618      	mov	r0, r3
 8006892:	f000 f857 	bl	8006944 <prvGetNextExpireTime>
 8006896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4619      	mov	r1, r3
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f803 	bl	80068a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068a2:	f000 f8d5 	bl	8006a50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068a6:	e7f1      	b.n	800688c <prvTimerTask+0x8>

080068a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068b2:	f7ff fa3b 	bl	8005d2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068b6:	f107 0308 	add.w	r3, r7, #8
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f866 	bl	800698c <prvSampleTimeNow>
 80068c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d130      	bne.n	800692a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <prvProcessTimerOrBlockTask+0x3c>
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d806      	bhi.n	80068e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068d6:	f7ff fa37 	bl	8005d48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff ff91 	bl	8006804 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068e2:	e024      	b.n	800692e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <prvProcessTimerOrBlockTask+0x90>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068fc:	4b0f      	ldr	r3, [pc, #60]	; (800693c <prvProcessTimerOrBlockTask+0x94>)
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4619      	mov	r1, r3
 800690a:	f7fe ff87 	bl	800581c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800690e:	f7ff fa1b 	bl	8005d48 <xTaskResumeAll>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006918:	4b09      	ldr	r3, [pc, #36]	; (8006940 <prvProcessTimerOrBlockTask+0x98>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
}
 8006928:	e001      	b.n	800692e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800692a:	f7ff fa0d 	bl	8005d48 <xTaskResumeAll>
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000eb0 	.word	0x20000eb0
 800693c:	20000eb4 	.word	0x20000eb4
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800694c:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <prvGetNextExpireTime+0x44>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <prvGetNextExpireTime+0x44>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e001      	b.n	800697a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800697a:	68fb      	ldr	r3, [r7, #12]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000eac 	.word	0x20000eac

0800698c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006994:	f7ff fa76 	bl	8005e84 <xTaskGetTickCount>
 8006998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <prvSampleTimeNow+0x3c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d205      	bcs.n	80069b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069a4:	f000 f908 	bl	8006bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069b6:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <prvSampleTimeNow+0x3c>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069bc:	68fb      	ldr	r3, [r7, #12]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000ebc 	.word	0x20000ebc

080069cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d812      	bhi.n	8006a18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d302      	bcc.n	8006a06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e01b      	b.n	8006a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <prvInsertTimerInActiveList+0x7c>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f7fe f9ee 	bl	8004df2 <vListInsert>
 8006a16:	e012      	b.n	8006a3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d206      	bcs.n	8006a2e <prvInsertTimerInActiveList+0x62>
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e007      	b.n	8006a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <prvInsertTimerInActiveList+0x80>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f7fe f9da 	bl	8004df2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a3e:	697b      	ldr	r3, [r7, #20]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20000eb0 	.word	0x20000eb0
 8006a4c:	20000eac 	.word	0x20000eac

08006a50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a56:	e09d      	b.n	8006b94 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	da18      	bge.n	8006a90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a5e:	1d3b      	adds	r3, r7, #4
 8006a60:	3304      	adds	r3, #4
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61fb      	str	r3, [r7, #28]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a86:	6850      	ldr	r0, [r2, #4]
 8006a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a8a:	6892      	ldr	r2, [r2, #8]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	db7d      	blt.n	8006b92 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe f9dc 	bl	8004e64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aac:	463b      	mov	r3, r7
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff ff6c 	bl	800698c <prvSampleTimeNow>
 8006ab4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b09      	cmp	r3, #9
 8006aba:	d86b      	bhi.n	8006b94 <prvProcessReceivedCommands+0x144>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <prvProcessReceivedCommands+0x74>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006aed 	.word	0x08006aed
 8006ac8:	08006aed 	.word	0x08006aed
 8006acc:	08006aed 	.word	0x08006aed
 8006ad0:	08006b95 	.word	0x08006b95
 8006ad4:	08006b49 	.word	0x08006b49
 8006ad8:	08006b81 	.word	0x08006b81
 8006adc:	08006aed 	.word	0x08006aed
 8006ae0:	08006aed 	.word	0x08006aed
 8006ae4:	08006b95 	.word	0x08006b95
 8006ae8:	08006b49 	.word	0x08006b49
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	18d1      	adds	r1, r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006afa:	f7ff ff67 	bl	80069cc <prvInsertTimerInActiveList>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d047      	beq.n	8006b94 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d13f      	bne.n	8006b94 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	441a      	add	r2, r3
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	2300      	movs	r3, #0
 8006b22:	2100      	movs	r1, #0
 8006b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b26:	f7ff fe1f 	bl	8006768 <xTimerGenericCommand>
 8006b2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d130      	bne.n	8006b94 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	61bb      	str	r3, [r7, #24]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	617b      	str	r3, [r7, #20]
}
 8006b68:	bf00      	nop
 8006b6a:	e7fe      	b.n	8006b6a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	18d1      	adds	r1, r2, r3
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b7a:	f7ff ff27 	bl	80069cc <prvInsertTimerInActiveList>
					break;
 8006b7e:	e009      	b.n	8006b94 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	f000 fbc8 	bl	8007320 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b90:	e000      	b.n	8006b94 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <prvProcessReceivedCommands+0x164>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1d39      	adds	r1, r7, #4
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fc23 	bl	80053e8 <xQueueReceive>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f47f af57 	bne.w	8006a58 <prvProcessReceivedCommands+0x8>
	}
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	3730      	adds	r7, #48	; 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000eb4 	.word	0x20000eb4

08006bb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bbe:	e045      	b.n	8006c4c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bc0:	4b2c      	ldr	r3, [pc, #176]	; (8006c74 <prvSwitchTimerLists+0xbc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bca:	4b2a      	ldr	r3, [pc, #168]	; (8006c74 <prvSwitchTimerLists+0xbc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe f943 	bl	8004e64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d12e      	bne.n	8006c4c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d90e      	bls.n	8006c1e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c0c:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <prvSwitchTimerLists+0xbc>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4619      	mov	r1, r3
 8006c16:	4610      	mov	r0, r2
 8006c18:	f7fe f8eb 	bl	8004df2 <vListInsert>
 8006c1c:	e016      	b.n	8006c4c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	2300      	movs	r3, #0
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	2100      	movs	r1, #0
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff fd9d 	bl	8006768 <xTimerGenericCommand>
 8006c2e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	603b      	str	r3, [r7, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <prvSwitchTimerLists+0xbc>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1b4      	bne.n	8006bc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c56:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <prvSwitchTimerLists+0xbc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a04      	ldr	r2, [pc, #16]	; (8006c74 <prvSwitchTimerLists+0xbc>)
 8006c62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c64:	4a04      	ldr	r2, [pc, #16]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6013      	str	r3, [r2, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000eac 	.word	0x20000eac
 8006c78:	20000eb0 	.word	0x20000eb0

08006c7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c82:	f000 f967 	bl	8006f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c86:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <prvCheckForValidListAndQueue+0x60>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d120      	bne.n	8006cd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c8e:	4814      	ldr	r0, [pc, #80]	; (8006ce0 <prvCheckForValidListAndQueue+0x64>)
 8006c90:	f7fe f85e 	bl	8004d50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c94:	4813      	ldr	r0, [pc, #76]	; (8006ce4 <prvCheckForValidListAndQueue+0x68>)
 8006c96:	f7fe f85b 	bl	8004d50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c9a:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <prvCheckForValidListAndQueue+0x6c>)
 8006c9c:	4a10      	ldr	r2, [pc, #64]	; (8006ce0 <prvCheckForValidListAndQueue+0x64>)
 8006c9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ca0:	4b12      	ldr	r3, [pc, #72]	; (8006cec <prvCheckForValidListAndQueue+0x70>)
 8006ca2:	4a10      	ldr	r2, [pc, #64]	; (8006ce4 <prvCheckForValidListAndQueue+0x68>)
 8006ca4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <prvCheckForValidListAndQueue+0x74>)
 8006cac:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <prvCheckForValidListAndQueue+0x78>)
 8006cae:	2110      	movs	r1, #16
 8006cb0:	200a      	movs	r0, #10
 8006cb2:	f7fe f969 	bl	8004f88 <xQueueGenericCreateStatic>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <prvCheckForValidListAndQueue+0x60>)
 8006cba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cbc:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <prvCheckForValidListAndQueue+0x60>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <prvCheckForValidListAndQueue+0x60>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	490b      	ldr	r1, [pc, #44]	; (8006cf8 <prvCheckForValidListAndQueue+0x7c>)
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fd7c 	bl	80057c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cd0:	f000 f970 	bl	8006fb4 <vPortExitCritical>
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000eb4 	.word	0x20000eb4
 8006ce0:	20000e84 	.word	0x20000e84
 8006ce4:	20000e98 	.word	0x20000e98
 8006ce8:	20000eac 	.word	0x20000eac
 8006cec:	20000eb0 	.word	0x20000eb0
 8006cf0:	20000f60 	.word	0x20000f60
 8006cf4:	20000ec0 	.word	0x20000ec0
 8006cf8:	0800a5e4 	.word	0x0800a5e4

08006cfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3b04      	subs	r3, #4
 8006d0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3b04      	subs	r3, #4
 8006d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f023 0201 	bic.w	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d2c:	4a0c      	ldr	r2, [pc, #48]	; (8006d60 <pxPortInitialiseStack+0x64>)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3b14      	subs	r3, #20
 8006d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b04      	subs	r3, #4
 8006d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f06f 0202 	mvn.w	r2, #2
 8006d4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3b20      	subs	r3, #32
 8006d50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	08006d65 	.word	0x08006d65

08006d64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d6e:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <prvTaskExitError+0x54>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d00a      	beq.n	8006d8e <prvTaskExitError+0x2a>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	60fb      	str	r3, [r7, #12]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <prvTaskExitError+0x28>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
}
 8006da0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006da2:	bf00      	nop
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0fc      	beq.n	8006da4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	2000000c 	.word	0x2000000c
 8006dbc:	00000000 	.word	0x00000000

08006dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <pxCurrentTCBConst2>)
 8006dc2:	6819      	ldr	r1, [r3, #0]
 8006dc4:	6808      	ldr	r0, [r1, #0]
 8006dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dca:	f380 8809 	msr	PSP, r0
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8811 	msr	BASEPRI, r0
 8006dda:	4770      	bx	lr
 8006ddc:	f3af 8000 	nop.w

08006de0 <pxCurrentTCBConst2>:
 8006de0:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop

08006de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006de8:	4808      	ldr	r0, [pc, #32]	; (8006e0c <prvPortStartFirstTask+0x24>)
 8006dea:	6800      	ldr	r0, [r0, #0]
 8006dec:	6800      	ldr	r0, [r0, #0]
 8006dee:	f380 8808 	msr	MSP, r0
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f380 8814 	msr	CONTROL, r0
 8006dfa:	b662      	cpsie	i
 8006dfc:	b661      	cpsie	f
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	df00      	svc	0
 8006e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e0a:	bf00      	nop
 8006e0c:	e000ed08 	.word	0xe000ed08

08006e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e16:	4b46      	ldr	r3, [pc, #280]	; (8006f30 <xPortStartScheduler+0x120>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a46      	ldr	r2, [pc, #280]	; (8006f34 <xPortStartScheduler+0x124>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10a      	bne.n	8006e36 <xPortStartScheduler+0x26>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e36:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <xPortStartScheduler+0x120>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a3f      	ldr	r2, [pc, #252]	; (8006f38 <xPortStartScheduler+0x128>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d10a      	bne.n	8006e56 <xPortStartScheduler+0x46>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	60fb      	str	r3, [r7, #12]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e56:	4b39      	ldr	r3, [pc, #228]	; (8006f3c <xPortStartScheduler+0x12c>)
 8006e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b31      	ldr	r3, [pc, #196]	; (8006f40 <xPortStartScheduler+0x130>)
 8006e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e7e:	4b31      	ldr	r3, [pc, #196]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e80:	2207      	movs	r2, #7
 8006e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e84:	e009      	b.n	8006e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	4a2d      	ldr	r2, [pc, #180]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b80      	cmp	r3, #128	; 0x80
 8006ea4:	d0ef      	beq.n	8006e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ea6:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f1c3 0307 	rsb	r3, r3, #7
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d00a      	beq.n	8006ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60bb      	str	r3, [r7, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ec8:	4b1e      	ldr	r3, [pc, #120]	; (8006f44 <xPortStartScheduler+0x134>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eda:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <xPortStartScheduler+0x134>)
 8006edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ee6:	4b18      	ldr	r3, [pc, #96]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <xPortStartScheduler+0x138>)
 8006eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006efe:	f000 f8dd 	bl	80070bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <xPortStartScheduler+0x13c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f08:	f000 f8fc 	bl	8007104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <xPortStartScheduler+0x140>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <xPortStartScheduler+0x140>)
 8006f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f18:	f7ff ff66 	bl	8006de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f1c:	f7ff f880 	bl	8006020 <vTaskSwitchContext>
	prvTaskExitError();
 8006f20:	f7ff ff20 	bl	8006d64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	e000ed00 	.word	0xe000ed00
 8006f34:	410fc271 	.word	0x410fc271
 8006f38:	410fc270 	.word	0x410fc270
 8006f3c:	e000e400 	.word	0xe000e400
 8006f40:	20000fb0 	.word	0x20000fb0
 8006f44:	20000fb4 	.word	0x20000fb4
 8006f48:	e000ed20 	.word	0xe000ed20
 8006f4c:	2000000c 	.word	0x2000000c
 8006f50:	e000ef34 	.word	0xe000ef34

08006f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	607b      	str	r3, [r7, #4]
}
 8006f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <vPortEnterCritical+0x58>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <vPortEnterCritical+0x58>)
 8006f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <vPortEnterCritical+0x58>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10f      	bne.n	8006fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <vPortEnterCritical+0x5c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	603b      	str	r3, [r7, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <vPortEnterCritical+0x4a>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	2000000c 	.word	0x2000000c
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <vPortExitCritical+0x50>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <vPortExitCritical+0x24>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	607b      	str	r3, [r7, #4]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <vPortExitCritical+0x50>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	4a09      	ldr	r2, [pc, #36]	; (8007004 <vPortExitCritical+0x50>)
 8006fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <vPortExitCritical+0x50>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <vPortExitCritical+0x42>
 8006fea:	2300      	movs	r3, #0
 8006fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
}
 8006ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	2000000c 	.word	0x2000000c
	...

08007010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007010:	f3ef 8009 	mrs	r0, PSP
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4b15      	ldr	r3, [pc, #84]	; (8007070 <pxCurrentTCBConst>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f01e 0f10 	tst.w	lr, #16
 8007020:	bf08      	it	eq
 8007022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	6010      	str	r0, [r2, #0]
 800702c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007034:	f380 8811 	msr	BASEPRI, r0
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f7fe ffee 	bl	8006020 <vTaskSwitchContext>
 8007044:	f04f 0000 	mov.w	r0, #0
 8007048:	f380 8811 	msr	BASEPRI, r0
 800704c:	bc09      	pop	{r0, r3}
 800704e:	6819      	ldr	r1, [r3, #0]
 8007050:	6808      	ldr	r0, [r1, #0]
 8007052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007056:	f01e 0f10 	tst.w	lr, #16
 800705a:	bf08      	it	eq
 800705c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007060:	f380 8809 	msr	PSP, r0
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst>:
 8007070:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
}
 8007090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007092:	f7fe ff07 	bl	8005ea4 <xTaskIncrementTick>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <SysTick_Handler+0x40>)
 800709e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	2300      	movs	r3, #0
 80070a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f383 8811 	msr	BASEPRI, r3
}
 80070ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070c6:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <vPortSetupTimerInterrupt+0x38>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <vPortSetupTimerInterrupt+0x3c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <vPortSetupTimerInterrupt+0x40>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	4a09      	ldr	r2, [pc, #36]	; (8007100 <vPortSetupTimerInterrupt+0x44>)
 80070da:	3b01      	subs	r3, #1
 80070dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070de:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	e000e010 	.word	0xe000e010
 80070f4:	e000e018 	.word	0xe000e018
 80070f8:	20000000 	.word	0x20000000
 80070fc:	10624dd3 	.word	0x10624dd3
 8007100:	e000e014 	.word	0xe000e014

08007104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007114 <vPortEnableVFP+0x10>
 8007108:	6801      	ldr	r1, [r0, #0]
 800710a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800710e:	6001      	str	r1, [r0, #0]
 8007110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007112:	bf00      	nop
 8007114:	e000ed88 	.word	0xe000ed88

08007118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800711e:	f3ef 8305 	mrs	r3, IPSR
 8007122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d914      	bls.n	8007154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800712a:	4a17      	ldr	r2, [pc, #92]	; (8007188 <vPortValidateInterruptPriority+0x70>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007134:	4b15      	ldr	r3, [pc, #84]	; (800718c <vPortValidateInterruptPriority+0x74>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	429a      	cmp	r2, r3
 800713c:	d20a      	bcs.n	8007154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	607b      	str	r3, [r7, #4]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007154:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <vPortValidateInterruptPriority+0x78>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <vPortValidateInterruptPriority+0x7c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d90a      	bls.n	800717a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	603b      	str	r3, [r7, #0]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <vPortValidateInterruptPriority+0x60>
	}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	e000e3f0 	.word	0xe000e3f0
 800718c:	20000fb0 	.word	0x20000fb0
 8007190:	e000ed0c 	.word	0xe000ed0c
 8007194:	20000fb4 	.word	0x20000fb4

08007198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071a4:	f7fe fdc2 	bl	8005d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071a8:	4b58      	ldr	r3, [pc, #352]	; (800730c <pvPortMalloc+0x174>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071b0:	f000 f910 	bl	80073d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071b4:	4b56      	ldr	r3, [pc, #344]	; (8007310 <pvPortMalloc+0x178>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 808e 	bne.w	80072de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01d      	beq.n	8007204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071c8:	2208      	movs	r2, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d014      	beq.n	8007204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f023 0307 	bic.w	r3, r3, #7
 80071e0:	3308      	adds	r3, #8
 80071e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <pvPortMalloc+0x6c>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	617b      	str	r3, [r7, #20]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d069      	beq.n	80072de <pvPortMalloc+0x146>
 800720a:	4b42      	ldr	r3, [pc, #264]	; (8007314 <pvPortMalloc+0x17c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d864      	bhi.n	80072de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007214:	4b40      	ldr	r3, [pc, #256]	; (8007318 <pvPortMalloc+0x180>)
 8007216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007218:	4b3f      	ldr	r3, [pc, #252]	; (8007318 <pvPortMalloc+0x180>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800721e:	e004      	b.n	800722a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d903      	bls.n	800723c <pvPortMalloc+0xa4>
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f1      	bne.n	8007220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800723c:	4b33      	ldr	r3, [pc, #204]	; (800730c <pvPortMalloc+0x174>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007242:	429a      	cmp	r2, r3
 8007244:	d04b      	beq.n	80072de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2208      	movs	r2, #8
 800724c:	4413      	add	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	2308      	movs	r3, #8
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	429a      	cmp	r2, r3
 8007266:	d91f      	bls.n	80072a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <pvPortMalloc+0xf8>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	613b      	str	r3, [r7, #16]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	1ad2      	subs	r2, r2, r3
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072a2:	69b8      	ldr	r0, [r7, #24]
 80072a4:	f000 f8f8 	bl	8007498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072a8:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <pvPortMalloc+0x17c>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	4a18      	ldr	r2, [pc, #96]	; (8007314 <pvPortMalloc+0x17c>)
 80072b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072b6:	4b17      	ldr	r3, [pc, #92]	; (8007314 <pvPortMalloc+0x17c>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b18      	ldr	r3, [pc, #96]	; (800731c <pvPortMalloc+0x184>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d203      	bcs.n	80072ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <pvPortMalloc+0x17c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a15      	ldr	r2, [pc, #84]	; (800731c <pvPortMalloc+0x184>)
 80072c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	4b10      	ldr	r3, [pc, #64]	; (8007310 <pvPortMalloc+0x178>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072de:	f7fe fd33 	bl	8005d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <pvPortMalloc+0x16a>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	60fb      	str	r3, [r7, #12]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <pvPortMalloc+0x168>
	return pvReturn;
 8007302:	69fb      	ldr	r3, [r7, #28]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3728      	adds	r7, #40	; 0x28
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20001bc0 	.word	0x20001bc0
 8007310:	20001bcc 	.word	0x20001bcc
 8007314:	20001bc4 	.word	0x20001bc4
 8007318:	20001bb8 	.word	0x20001bb8
 800731c:	20001bc8 	.word	0x20001bc8

08007320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d048      	beq.n	80073c4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007332:	2308      	movs	r3, #8
 8007334:	425b      	negs	r3, r3
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	4b21      	ldr	r3, [pc, #132]	; (80073cc <vPortFree+0xac>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4013      	ands	r3, r2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <vPortFree+0x44>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60fb      	str	r3, [r7, #12]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <vPortFree+0x62>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60bb      	str	r3, [r7, #8]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	4b11      	ldr	r3, [pc, #68]	; (80073cc <vPortFree+0xac>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d019      	beq.n	80073c4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d115      	bne.n	80073c4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <vPortFree+0xac>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073a8:	f7fe fcc0 	bl	8005d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <vPortFree+0xb0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4413      	add	r3, r2
 80073b6:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <vPortFree+0xb0>)
 80073b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f000 f86c 	bl	8007498 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073c0:	f7fe fcc2 	bl	8005d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073c4:	bf00      	nop
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20001bcc 	.word	0x20001bcc
 80073d0:	20001bc4 	.word	0x20001bc4

080073d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073e0:	4b27      	ldr	r3, [pc, #156]	; (8007480 <prvHeapInit+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00c      	beq.n	8007408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3307      	adds	r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <prvHeapInit+0xac>)
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <prvHeapInit+0xb0>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007412:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <prvHeapInit+0xb0>)
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007420:	2208      	movs	r2, #8
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0307 	bic.w	r3, r3, #7
 800742e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a15      	ldr	r2, [pc, #84]	; (8007488 <prvHeapInit+0xb4>)
 8007434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007436:	4b14      	ldr	r3, [pc, #80]	; (8007488 <prvHeapInit+0xb4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800743e:	4b12      	ldr	r3, [pc, #72]	; (8007488 <prvHeapInit+0xb4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvHeapInit+0xb4>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <prvHeapInit+0xb8>)
 8007462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a09      	ldr	r2, [pc, #36]	; (8007490 <prvHeapInit+0xbc>)
 800746a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <prvHeapInit+0xc0>)
 800746e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000fb8 	.word	0x20000fb8
 8007484:	20001bb8 	.word	0x20001bb8
 8007488:	20001bc0 	.word	0x20001bc0
 800748c:	20001bc8 	.word	0x20001bc8
 8007490:	20001bc4 	.word	0x20001bc4
 8007494:	20001bcc 	.word	0x20001bcc

08007498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074a0:	4b28      	ldr	r3, [pc, #160]	; (8007544 <prvInsertBlockIntoFreeList+0xac>)
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e002      	b.n	80074ac <prvInsertBlockIntoFreeList+0x14>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d8f7      	bhi.n	80074a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d108      	bne.n	80074da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	441a      	add	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d118      	bne.n	8007520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d00d      	beq.n	8007516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	441a      	add	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e008      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e003      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	d002      	beq.n	8007536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20001bb8 	.word	0x20001bb8
 8007548:	20001bc0 	.word	0x20001bc0

0800754c <__errno>:
 800754c:	4b01      	ldr	r3, [pc, #4]	; (8007554 <__errno+0x8>)
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20000010 	.word	0x20000010

08007558 <std>:
 8007558:	2300      	movs	r3, #0
 800755a:	b510      	push	{r4, lr}
 800755c:	4604      	mov	r4, r0
 800755e:	e9c0 3300 	strd	r3, r3, [r0]
 8007562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007566:	6083      	str	r3, [r0, #8]
 8007568:	8181      	strh	r1, [r0, #12]
 800756a:	6643      	str	r3, [r0, #100]	; 0x64
 800756c:	81c2      	strh	r2, [r0, #14]
 800756e:	6183      	str	r3, [r0, #24]
 8007570:	4619      	mov	r1, r3
 8007572:	2208      	movs	r2, #8
 8007574:	305c      	adds	r0, #92	; 0x5c
 8007576:	f000 f923 	bl	80077c0 <memset>
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <std+0x38>)
 800757c:	6263      	str	r3, [r4, #36]	; 0x24
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <std+0x3c>)
 8007580:	62a3      	str	r3, [r4, #40]	; 0x28
 8007582:	4b05      	ldr	r3, [pc, #20]	; (8007598 <std+0x40>)
 8007584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <std+0x44>)
 8007588:	6224      	str	r4, [r4, #32]
 800758a:	6323      	str	r3, [r4, #48]	; 0x30
 800758c:	bd10      	pop	{r4, pc}
 800758e:	bf00      	nop
 8007590:	0800832d 	.word	0x0800832d
 8007594:	0800834f 	.word	0x0800834f
 8007598:	08008387 	.word	0x08008387
 800759c:	080083ab 	.word	0x080083ab

080075a0 <_cleanup_r>:
 80075a0:	4901      	ldr	r1, [pc, #4]	; (80075a8 <_cleanup_r+0x8>)
 80075a2:	f000 b8af 	b.w	8007704 <_fwalk_reent>
 80075a6:	bf00      	nop
 80075a8:	080091f5 	.word	0x080091f5

080075ac <__sfmoreglue>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	1e4a      	subs	r2, r1, #1
 80075b0:	2568      	movs	r5, #104	; 0x68
 80075b2:	4355      	muls	r5, r2
 80075b4:	460e      	mov	r6, r1
 80075b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075ba:	f000 f959 	bl	8007870 <_malloc_r>
 80075be:	4604      	mov	r4, r0
 80075c0:	b140      	cbz	r0, 80075d4 <__sfmoreglue+0x28>
 80075c2:	2100      	movs	r1, #0
 80075c4:	e9c0 1600 	strd	r1, r6, [r0]
 80075c8:	300c      	adds	r0, #12
 80075ca:	60a0      	str	r0, [r4, #8]
 80075cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075d0:	f000 f8f6 	bl	80077c0 <memset>
 80075d4:	4620      	mov	r0, r4
 80075d6:	bd70      	pop	{r4, r5, r6, pc}

080075d8 <__sfp_lock_acquire>:
 80075d8:	4801      	ldr	r0, [pc, #4]	; (80075e0 <__sfp_lock_acquire+0x8>)
 80075da:	f000 b8d8 	b.w	800778e <__retarget_lock_acquire_recursive>
 80075de:	bf00      	nop
 80075e0:	20002c70 	.word	0x20002c70

080075e4 <__sfp_lock_release>:
 80075e4:	4801      	ldr	r0, [pc, #4]	; (80075ec <__sfp_lock_release+0x8>)
 80075e6:	f000 b8d3 	b.w	8007790 <__retarget_lock_release_recursive>
 80075ea:	bf00      	nop
 80075ec:	20002c70 	.word	0x20002c70

080075f0 <__sinit_lock_acquire>:
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <__sinit_lock_acquire+0x8>)
 80075f2:	f000 b8cc 	b.w	800778e <__retarget_lock_acquire_recursive>
 80075f6:	bf00      	nop
 80075f8:	20002c6b 	.word	0x20002c6b

080075fc <__sinit_lock_release>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__sinit_lock_release+0x8>)
 80075fe:	f000 b8c7 	b.w	8007790 <__retarget_lock_release_recursive>
 8007602:	bf00      	nop
 8007604:	20002c6b 	.word	0x20002c6b

08007608 <__sinit>:
 8007608:	b510      	push	{r4, lr}
 800760a:	4604      	mov	r4, r0
 800760c:	f7ff fff0 	bl	80075f0 <__sinit_lock_acquire>
 8007610:	69a3      	ldr	r3, [r4, #24]
 8007612:	b11b      	cbz	r3, 800761c <__sinit+0x14>
 8007614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007618:	f7ff bff0 	b.w	80075fc <__sinit_lock_release>
 800761c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007620:	6523      	str	r3, [r4, #80]	; 0x50
 8007622:	4b13      	ldr	r3, [pc, #76]	; (8007670 <__sinit+0x68>)
 8007624:	4a13      	ldr	r2, [pc, #76]	; (8007674 <__sinit+0x6c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	62a2      	str	r2, [r4, #40]	; 0x28
 800762a:	42a3      	cmp	r3, r4
 800762c:	bf04      	itt	eq
 800762e:	2301      	moveq	r3, #1
 8007630:	61a3      	streq	r3, [r4, #24]
 8007632:	4620      	mov	r0, r4
 8007634:	f000 f820 	bl	8007678 <__sfp>
 8007638:	6060      	str	r0, [r4, #4]
 800763a:	4620      	mov	r0, r4
 800763c:	f000 f81c 	bl	8007678 <__sfp>
 8007640:	60a0      	str	r0, [r4, #8]
 8007642:	4620      	mov	r0, r4
 8007644:	f000 f818 	bl	8007678 <__sfp>
 8007648:	2200      	movs	r2, #0
 800764a:	60e0      	str	r0, [r4, #12]
 800764c:	2104      	movs	r1, #4
 800764e:	6860      	ldr	r0, [r4, #4]
 8007650:	f7ff ff82 	bl	8007558 <std>
 8007654:	68a0      	ldr	r0, [r4, #8]
 8007656:	2201      	movs	r2, #1
 8007658:	2109      	movs	r1, #9
 800765a:	f7ff ff7d 	bl	8007558 <std>
 800765e:	68e0      	ldr	r0, [r4, #12]
 8007660:	2202      	movs	r2, #2
 8007662:	2112      	movs	r1, #18
 8007664:	f7ff ff78 	bl	8007558 <std>
 8007668:	2301      	movs	r3, #1
 800766a:	61a3      	str	r3, [r4, #24]
 800766c:	e7d2      	b.n	8007614 <__sinit+0xc>
 800766e:	bf00      	nop
 8007670:	0800a6f0 	.word	0x0800a6f0
 8007674:	080075a1 	.word	0x080075a1

08007678 <__sfp>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	4607      	mov	r7, r0
 800767c:	f7ff ffac 	bl	80075d8 <__sfp_lock_acquire>
 8007680:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <__sfp+0x84>)
 8007682:	681e      	ldr	r6, [r3, #0]
 8007684:	69b3      	ldr	r3, [r6, #24]
 8007686:	b913      	cbnz	r3, 800768e <__sfp+0x16>
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff ffbd 	bl	8007608 <__sinit>
 800768e:	3648      	adds	r6, #72	; 0x48
 8007690:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007694:	3b01      	subs	r3, #1
 8007696:	d503      	bpl.n	80076a0 <__sfp+0x28>
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	b30b      	cbz	r3, 80076e0 <__sfp+0x68>
 800769c:	6836      	ldr	r6, [r6, #0]
 800769e:	e7f7      	b.n	8007690 <__sfp+0x18>
 80076a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076a4:	b9d5      	cbnz	r5, 80076dc <__sfp+0x64>
 80076a6:	4b16      	ldr	r3, [pc, #88]	; (8007700 <__sfp+0x88>)
 80076a8:	60e3      	str	r3, [r4, #12]
 80076aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076ae:	6665      	str	r5, [r4, #100]	; 0x64
 80076b0:	f000 f86c 	bl	800778c <__retarget_lock_init_recursive>
 80076b4:	f7ff ff96 	bl	80075e4 <__sfp_lock_release>
 80076b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076c0:	6025      	str	r5, [r4, #0]
 80076c2:	61a5      	str	r5, [r4, #24]
 80076c4:	2208      	movs	r2, #8
 80076c6:	4629      	mov	r1, r5
 80076c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076cc:	f000 f878 	bl	80077c0 <memset>
 80076d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076d8:	4620      	mov	r0, r4
 80076da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076dc:	3468      	adds	r4, #104	; 0x68
 80076de:	e7d9      	b.n	8007694 <__sfp+0x1c>
 80076e0:	2104      	movs	r1, #4
 80076e2:	4638      	mov	r0, r7
 80076e4:	f7ff ff62 	bl	80075ac <__sfmoreglue>
 80076e8:	4604      	mov	r4, r0
 80076ea:	6030      	str	r0, [r6, #0]
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1d5      	bne.n	800769c <__sfp+0x24>
 80076f0:	f7ff ff78 	bl	80075e4 <__sfp_lock_release>
 80076f4:	230c      	movs	r3, #12
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	e7ee      	b.n	80076d8 <__sfp+0x60>
 80076fa:	bf00      	nop
 80076fc:	0800a6f0 	.word	0x0800a6f0
 8007700:	ffff0001 	.word	0xffff0001

08007704 <_fwalk_reent>:
 8007704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007708:	4606      	mov	r6, r0
 800770a:	4688      	mov	r8, r1
 800770c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007710:	2700      	movs	r7, #0
 8007712:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007716:	f1b9 0901 	subs.w	r9, r9, #1
 800771a:	d505      	bpl.n	8007728 <_fwalk_reent+0x24>
 800771c:	6824      	ldr	r4, [r4, #0]
 800771e:	2c00      	cmp	r4, #0
 8007720:	d1f7      	bne.n	8007712 <_fwalk_reent+0xe>
 8007722:	4638      	mov	r0, r7
 8007724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007728:	89ab      	ldrh	r3, [r5, #12]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d907      	bls.n	800773e <_fwalk_reent+0x3a>
 800772e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007732:	3301      	adds	r3, #1
 8007734:	d003      	beq.n	800773e <_fwalk_reent+0x3a>
 8007736:	4629      	mov	r1, r5
 8007738:	4630      	mov	r0, r6
 800773a:	47c0      	blx	r8
 800773c:	4307      	orrs	r7, r0
 800773e:	3568      	adds	r5, #104	; 0x68
 8007740:	e7e9      	b.n	8007716 <_fwalk_reent+0x12>
	...

08007744 <__libc_init_array>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4d0d      	ldr	r5, [pc, #52]	; (800777c <__libc_init_array+0x38>)
 8007748:	4c0d      	ldr	r4, [pc, #52]	; (8007780 <__libc_init_array+0x3c>)
 800774a:	1b64      	subs	r4, r4, r5
 800774c:	10a4      	asrs	r4, r4, #2
 800774e:	2600      	movs	r6, #0
 8007750:	42a6      	cmp	r6, r4
 8007752:	d109      	bne.n	8007768 <__libc_init_array+0x24>
 8007754:	4d0b      	ldr	r5, [pc, #44]	; (8007784 <__libc_init_array+0x40>)
 8007756:	4c0c      	ldr	r4, [pc, #48]	; (8007788 <__libc_init_array+0x44>)
 8007758:	f002 fe28 	bl	800a3ac <_init>
 800775c:	1b64      	subs	r4, r4, r5
 800775e:	10a4      	asrs	r4, r4, #2
 8007760:	2600      	movs	r6, #0
 8007762:	42a6      	cmp	r6, r4
 8007764:	d105      	bne.n	8007772 <__libc_init_array+0x2e>
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	f855 3b04 	ldr.w	r3, [r5], #4
 800776c:	4798      	blx	r3
 800776e:	3601      	adds	r6, #1
 8007770:	e7ee      	b.n	8007750 <__libc_init_array+0xc>
 8007772:	f855 3b04 	ldr.w	r3, [r5], #4
 8007776:	4798      	blx	r3
 8007778:	3601      	adds	r6, #1
 800777a:	e7f2      	b.n	8007762 <__libc_init_array+0x1e>
 800777c:	0800aa74 	.word	0x0800aa74
 8007780:	0800aa74 	.word	0x0800aa74
 8007784:	0800aa74 	.word	0x0800aa74
 8007788:	0800aa78 	.word	0x0800aa78

0800778c <__retarget_lock_init_recursive>:
 800778c:	4770      	bx	lr

0800778e <__retarget_lock_acquire_recursive>:
 800778e:	4770      	bx	lr

08007790 <__retarget_lock_release_recursive>:
 8007790:	4770      	bx	lr
	...

08007794 <malloc>:
 8007794:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <malloc+0xc>)
 8007796:	4601      	mov	r1, r0
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	f000 b869 	b.w	8007870 <_malloc_r>
 800779e:	bf00      	nop
 80077a0:	20000010 	.word	0x20000010

080077a4 <memcpy>:
 80077a4:	440a      	add	r2, r1
 80077a6:	4291      	cmp	r1, r2
 80077a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ac:	d100      	bne.n	80077b0 <memcpy+0xc>
 80077ae:	4770      	bx	lr
 80077b0:	b510      	push	{r4, lr}
 80077b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ba:	4291      	cmp	r1, r2
 80077bc:	d1f9      	bne.n	80077b2 <memcpy+0xe>
 80077be:	bd10      	pop	{r4, pc}

080077c0 <memset>:
 80077c0:	4402      	add	r2, r0
 80077c2:	4603      	mov	r3, r0
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d100      	bne.n	80077ca <memset+0xa>
 80077c8:	4770      	bx	lr
 80077ca:	f803 1b01 	strb.w	r1, [r3], #1
 80077ce:	e7f9      	b.n	80077c4 <memset+0x4>

080077d0 <_free_r>:
 80077d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d2:	2900      	cmp	r1, #0
 80077d4:	d048      	beq.n	8007868 <_free_r+0x98>
 80077d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077da:	9001      	str	r0, [sp, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f1a1 0404 	sub.w	r4, r1, #4
 80077e2:	bfb8      	it	lt
 80077e4:	18e4      	addlt	r4, r4, r3
 80077e6:	f001 fd57 	bl	8009298 <__malloc_lock>
 80077ea:	4a20      	ldr	r2, [pc, #128]	; (800786c <_free_r+0x9c>)
 80077ec:	9801      	ldr	r0, [sp, #4]
 80077ee:	6813      	ldr	r3, [r2, #0]
 80077f0:	4615      	mov	r5, r2
 80077f2:	b933      	cbnz	r3, 8007802 <_free_r+0x32>
 80077f4:	6063      	str	r3, [r4, #4]
 80077f6:	6014      	str	r4, [r2, #0]
 80077f8:	b003      	add	sp, #12
 80077fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077fe:	f001 bd51 	b.w	80092a4 <__malloc_unlock>
 8007802:	42a3      	cmp	r3, r4
 8007804:	d90b      	bls.n	800781e <_free_r+0x4e>
 8007806:	6821      	ldr	r1, [r4, #0]
 8007808:	1862      	adds	r2, r4, r1
 800780a:	4293      	cmp	r3, r2
 800780c:	bf04      	itt	eq
 800780e:	681a      	ldreq	r2, [r3, #0]
 8007810:	685b      	ldreq	r3, [r3, #4]
 8007812:	6063      	str	r3, [r4, #4]
 8007814:	bf04      	itt	eq
 8007816:	1852      	addeq	r2, r2, r1
 8007818:	6022      	streq	r2, [r4, #0]
 800781a:	602c      	str	r4, [r5, #0]
 800781c:	e7ec      	b.n	80077f8 <_free_r+0x28>
 800781e:	461a      	mov	r2, r3
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b10b      	cbz	r3, 8007828 <_free_r+0x58>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d9fa      	bls.n	800781e <_free_r+0x4e>
 8007828:	6811      	ldr	r1, [r2, #0]
 800782a:	1855      	adds	r5, r2, r1
 800782c:	42a5      	cmp	r5, r4
 800782e:	d10b      	bne.n	8007848 <_free_r+0x78>
 8007830:	6824      	ldr	r4, [r4, #0]
 8007832:	4421      	add	r1, r4
 8007834:	1854      	adds	r4, r2, r1
 8007836:	42a3      	cmp	r3, r4
 8007838:	6011      	str	r1, [r2, #0]
 800783a:	d1dd      	bne.n	80077f8 <_free_r+0x28>
 800783c:	681c      	ldr	r4, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	6053      	str	r3, [r2, #4]
 8007842:	4421      	add	r1, r4
 8007844:	6011      	str	r1, [r2, #0]
 8007846:	e7d7      	b.n	80077f8 <_free_r+0x28>
 8007848:	d902      	bls.n	8007850 <_free_r+0x80>
 800784a:	230c      	movs	r3, #12
 800784c:	6003      	str	r3, [r0, #0]
 800784e:	e7d3      	b.n	80077f8 <_free_r+0x28>
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	1961      	adds	r1, r4, r5
 8007854:	428b      	cmp	r3, r1
 8007856:	bf04      	itt	eq
 8007858:	6819      	ldreq	r1, [r3, #0]
 800785a:	685b      	ldreq	r3, [r3, #4]
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	bf04      	itt	eq
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	6054      	str	r4, [r2, #4]
 8007866:	e7c7      	b.n	80077f8 <_free_r+0x28>
 8007868:	b003      	add	sp, #12
 800786a:	bd30      	pop	{r4, r5, pc}
 800786c:	20001bd0 	.word	0x20001bd0

08007870 <_malloc_r>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	1ccd      	adds	r5, r1, #3
 8007874:	f025 0503 	bic.w	r5, r5, #3
 8007878:	3508      	adds	r5, #8
 800787a:	2d0c      	cmp	r5, #12
 800787c:	bf38      	it	cc
 800787e:	250c      	movcc	r5, #12
 8007880:	2d00      	cmp	r5, #0
 8007882:	4606      	mov	r6, r0
 8007884:	db01      	blt.n	800788a <_malloc_r+0x1a>
 8007886:	42a9      	cmp	r1, r5
 8007888:	d903      	bls.n	8007892 <_malloc_r+0x22>
 800788a:	230c      	movs	r3, #12
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	2000      	movs	r0, #0
 8007890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007892:	f001 fd01 	bl	8009298 <__malloc_lock>
 8007896:	4921      	ldr	r1, [pc, #132]	; (800791c <_malloc_r+0xac>)
 8007898:	680a      	ldr	r2, [r1, #0]
 800789a:	4614      	mov	r4, r2
 800789c:	b99c      	cbnz	r4, 80078c6 <_malloc_r+0x56>
 800789e:	4f20      	ldr	r7, [pc, #128]	; (8007920 <_malloc_r+0xb0>)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	b923      	cbnz	r3, 80078ae <_malloc_r+0x3e>
 80078a4:	4621      	mov	r1, r4
 80078a6:	4630      	mov	r0, r6
 80078a8:	f000 fd10 	bl	80082cc <_sbrk_r>
 80078ac:	6038      	str	r0, [r7, #0]
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 fd0b 	bl	80082cc <_sbrk_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d123      	bne.n	8007902 <_malloc_r+0x92>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	4630      	mov	r0, r6
 80078c0:	f001 fcf0 	bl	80092a4 <__malloc_unlock>
 80078c4:	e7e3      	b.n	800788e <_malloc_r+0x1e>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	1b5b      	subs	r3, r3, r5
 80078ca:	d417      	bmi.n	80078fc <_malloc_r+0x8c>
 80078cc:	2b0b      	cmp	r3, #11
 80078ce:	d903      	bls.n	80078d8 <_malloc_r+0x68>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	441c      	add	r4, r3
 80078d4:	6025      	str	r5, [r4, #0]
 80078d6:	e004      	b.n	80078e2 <_malloc_r+0x72>
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	42a2      	cmp	r2, r4
 80078dc:	bf0c      	ite	eq
 80078de:	600b      	streq	r3, [r1, #0]
 80078e0:	6053      	strne	r3, [r2, #4]
 80078e2:	4630      	mov	r0, r6
 80078e4:	f001 fcde 	bl	80092a4 <__malloc_unlock>
 80078e8:	f104 000b 	add.w	r0, r4, #11
 80078ec:	1d23      	adds	r3, r4, #4
 80078ee:	f020 0007 	bic.w	r0, r0, #7
 80078f2:	1ac2      	subs	r2, r0, r3
 80078f4:	d0cc      	beq.n	8007890 <_malloc_r+0x20>
 80078f6:	1a1b      	subs	r3, r3, r0
 80078f8:	50a3      	str	r3, [r4, r2]
 80078fa:	e7c9      	b.n	8007890 <_malloc_r+0x20>
 80078fc:	4622      	mov	r2, r4
 80078fe:	6864      	ldr	r4, [r4, #4]
 8007900:	e7cc      	b.n	800789c <_malloc_r+0x2c>
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d0e3      	beq.n	80078d4 <_malloc_r+0x64>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4630      	mov	r0, r6
 8007910:	f000 fcdc 	bl	80082cc <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d1dd      	bne.n	80078d4 <_malloc_r+0x64>
 8007918:	e7cf      	b.n	80078ba <_malloc_r+0x4a>
 800791a:	bf00      	nop
 800791c:	20001bd0 	.word	0x20001bd0
 8007920:	20001bd4 	.word	0x20001bd4

08007924 <__cvt>:
 8007924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	ec55 4b10 	vmov	r4, r5, d0
 800792c:	2d00      	cmp	r5, #0
 800792e:	460e      	mov	r6, r1
 8007930:	4619      	mov	r1, r3
 8007932:	462b      	mov	r3, r5
 8007934:	bfbb      	ittet	lt
 8007936:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800793a:	461d      	movlt	r5, r3
 800793c:	2300      	movge	r3, #0
 800793e:	232d      	movlt	r3, #45	; 0x2d
 8007940:	700b      	strb	r3, [r1, #0]
 8007942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007944:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007948:	4691      	mov	r9, r2
 800794a:	f023 0820 	bic.w	r8, r3, #32
 800794e:	bfbc      	itt	lt
 8007950:	4622      	movlt	r2, r4
 8007952:	4614      	movlt	r4, r2
 8007954:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007958:	d005      	beq.n	8007966 <__cvt+0x42>
 800795a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800795e:	d100      	bne.n	8007962 <__cvt+0x3e>
 8007960:	3601      	adds	r6, #1
 8007962:	2102      	movs	r1, #2
 8007964:	e000      	b.n	8007968 <__cvt+0x44>
 8007966:	2103      	movs	r1, #3
 8007968:	ab03      	add	r3, sp, #12
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	ab02      	add	r3, sp, #8
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	ec45 4b10 	vmov	d0, r4, r5
 8007974:	4653      	mov	r3, sl
 8007976:	4632      	mov	r2, r6
 8007978:	f000 fdca 	bl	8008510 <_dtoa_r>
 800797c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007980:	4607      	mov	r7, r0
 8007982:	d102      	bne.n	800798a <__cvt+0x66>
 8007984:	f019 0f01 	tst.w	r9, #1
 8007988:	d022      	beq.n	80079d0 <__cvt+0xac>
 800798a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800798e:	eb07 0906 	add.w	r9, r7, r6
 8007992:	d110      	bne.n	80079b6 <__cvt+0x92>
 8007994:	783b      	ldrb	r3, [r7, #0]
 8007996:	2b30      	cmp	r3, #48	; 0x30
 8007998:	d10a      	bne.n	80079b0 <__cvt+0x8c>
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f9 f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a6:	b918      	cbnz	r0, 80079b0 <__cvt+0x8c>
 80079a8:	f1c6 0601 	rsb	r6, r6, #1
 80079ac:	f8ca 6000 	str.w	r6, [sl]
 80079b0:	f8da 3000 	ldr.w	r3, [sl]
 80079b4:	4499      	add	r9, r3
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	f7f9 f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80079c2:	b108      	cbz	r0, 80079c8 <__cvt+0xa4>
 80079c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80079c8:	2230      	movs	r2, #48	; 0x30
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	454b      	cmp	r3, r9
 80079ce:	d307      	bcc.n	80079e0 <__cvt+0xbc>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079d4:	1bdb      	subs	r3, r3, r7
 80079d6:	4638      	mov	r0, r7
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	b004      	add	sp, #16
 80079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e0:	1c59      	adds	r1, r3, #1
 80079e2:	9103      	str	r1, [sp, #12]
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e7f0      	b.n	80079ca <__cvt+0xa6>

080079e8 <__exponent>:
 80079e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ea:	4603      	mov	r3, r0
 80079ec:	2900      	cmp	r1, #0
 80079ee:	bfb8      	it	lt
 80079f0:	4249      	neglt	r1, r1
 80079f2:	f803 2b02 	strb.w	r2, [r3], #2
 80079f6:	bfb4      	ite	lt
 80079f8:	222d      	movlt	r2, #45	; 0x2d
 80079fa:	222b      	movge	r2, #43	; 0x2b
 80079fc:	2909      	cmp	r1, #9
 80079fe:	7042      	strb	r2, [r0, #1]
 8007a00:	dd2a      	ble.n	8007a58 <__exponent+0x70>
 8007a02:	f10d 0407 	add.w	r4, sp, #7
 8007a06:	46a4      	mov	ip, r4
 8007a08:	270a      	movs	r7, #10
 8007a0a:	46a6      	mov	lr, r4
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a12:	fb07 1516 	mls	r5, r7, r6, r1
 8007a16:	3530      	adds	r5, #48	; 0x30
 8007a18:	2a63      	cmp	r2, #99	; 0x63
 8007a1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a22:	4631      	mov	r1, r6
 8007a24:	dcf1      	bgt.n	8007a0a <__exponent+0x22>
 8007a26:	3130      	adds	r1, #48	; 0x30
 8007a28:	f1ae 0502 	sub.w	r5, lr, #2
 8007a2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a30:	1c44      	adds	r4, r0, #1
 8007a32:	4629      	mov	r1, r5
 8007a34:	4561      	cmp	r1, ip
 8007a36:	d30a      	bcc.n	8007a4e <__exponent+0x66>
 8007a38:	f10d 0209 	add.w	r2, sp, #9
 8007a3c:	eba2 020e 	sub.w	r2, r2, lr
 8007a40:	4565      	cmp	r5, ip
 8007a42:	bf88      	it	hi
 8007a44:	2200      	movhi	r2, #0
 8007a46:	4413      	add	r3, r2
 8007a48:	1a18      	subs	r0, r3, r0
 8007a4a:	b003      	add	sp, #12
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a56:	e7ed      	b.n	8007a34 <__exponent+0x4c>
 8007a58:	2330      	movs	r3, #48	; 0x30
 8007a5a:	3130      	adds	r1, #48	; 0x30
 8007a5c:	7083      	strb	r3, [r0, #2]
 8007a5e:	70c1      	strb	r1, [r0, #3]
 8007a60:	1d03      	adds	r3, r0, #4
 8007a62:	e7f1      	b.n	8007a48 <__exponent+0x60>

08007a64 <_printf_float>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	ed2d 8b02 	vpush	{d8}
 8007a6c:	b08d      	sub	sp, #52	; 0x34
 8007a6e:	460c      	mov	r4, r1
 8007a70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a74:	4616      	mov	r6, r2
 8007a76:	461f      	mov	r7, r3
 8007a78:	4605      	mov	r5, r0
 8007a7a:	f001 fbf7 	bl	800926c <_localeconv_r>
 8007a7e:	f8d0 a000 	ldr.w	sl, [r0]
 8007a82:	4650      	mov	r0, sl
 8007a84:	f7f8 fbac 	bl	80001e0 <strlen>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	9305      	str	r3, [sp, #20]
 8007a90:	f8d8 3000 	ldr.w	r3, [r8]
 8007a94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a98:	3307      	adds	r3, #7
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	f103 0208 	add.w	r2, r3, #8
 8007aa2:	f8c8 2000 	str.w	r2, [r8]
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007aae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ab6:	9307      	str	r3, [sp, #28]
 8007ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007abc:	ee08 0a10 	vmov	s16, r0
 8007ac0:	4b9f      	ldr	r3, [pc, #636]	; (8007d40 <_printf_float+0x2dc>)
 8007ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	f7f9 f837 	bl	8000b3c <__aeabi_dcmpun>
 8007ace:	bb88      	cbnz	r0, 8007b34 <_printf_float+0xd0>
 8007ad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ad4:	4b9a      	ldr	r3, [pc, #616]	; (8007d40 <_printf_float+0x2dc>)
 8007ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ada:	f7f9 f811 	bl	8000b00 <__aeabi_dcmple>
 8007ade:	bb48      	cbnz	r0, 8007b34 <_printf_float+0xd0>
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f9 f800 	bl	8000aec <__aeabi_dcmplt>
 8007aec:	b110      	cbz	r0, 8007af4 <_printf_float+0x90>
 8007aee:	232d      	movs	r3, #45	; 0x2d
 8007af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af4:	4b93      	ldr	r3, [pc, #588]	; (8007d44 <_printf_float+0x2e0>)
 8007af6:	4894      	ldr	r0, [pc, #592]	; (8007d48 <_printf_float+0x2e4>)
 8007af8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007afc:	bf94      	ite	ls
 8007afe:	4698      	movls	r8, r3
 8007b00:	4680      	movhi	r8, r0
 8007b02:	2303      	movs	r3, #3
 8007b04:	6123      	str	r3, [r4, #16]
 8007b06:	9b05      	ldr	r3, [sp, #20]
 8007b08:	f023 0204 	bic.w	r2, r3, #4
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	f04f 0900 	mov.w	r9, #0
 8007b12:	9700      	str	r7, [sp, #0]
 8007b14:	4633      	mov	r3, r6
 8007b16:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f9d8 	bl	8007ed0 <_printf_common>
 8007b20:	3001      	adds	r0, #1
 8007b22:	f040 8090 	bne.w	8007c46 <_printf_float+0x1e2>
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2a:	b00d      	add	sp, #52	; 0x34
 8007b2c:	ecbd 8b02 	vpop	{d8}
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b34:	4642      	mov	r2, r8
 8007b36:	464b      	mov	r3, r9
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 fffe 	bl	8000b3c <__aeabi_dcmpun>
 8007b40:	b140      	cbz	r0, 8007b54 <_printf_float+0xf0>
 8007b42:	464b      	mov	r3, r9
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfbc      	itt	lt
 8007b48:	232d      	movlt	r3, #45	; 0x2d
 8007b4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b4e:	487f      	ldr	r0, [pc, #508]	; (8007d4c <_printf_float+0x2e8>)
 8007b50:	4b7f      	ldr	r3, [pc, #508]	; (8007d50 <_printf_float+0x2ec>)
 8007b52:	e7d1      	b.n	8007af8 <_printf_float+0x94>
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b5a:	9206      	str	r2, [sp, #24]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	d13f      	bne.n	8007be0 <_printf_float+0x17c>
 8007b60:	2306      	movs	r3, #6
 8007b62:	6063      	str	r3, [r4, #4]
 8007b64:	9b05      	ldr	r3, [sp, #20]
 8007b66:	6861      	ldr	r1, [r4, #4]
 8007b68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	ab0a      	add	r3, sp, #40	; 0x28
 8007b72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b76:	ab09      	add	r3, sp, #36	; 0x24
 8007b78:	ec49 8b10 	vmov	d0, r8, r9
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b84:	4628      	mov	r0, r5
 8007b86:	f7ff fecd 	bl	8007924 <__cvt>
 8007b8a:	9b06      	ldr	r3, [sp, #24]
 8007b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b8e:	2b47      	cmp	r3, #71	; 0x47
 8007b90:	4680      	mov	r8, r0
 8007b92:	d108      	bne.n	8007ba6 <_printf_float+0x142>
 8007b94:	1cc8      	adds	r0, r1, #3
 8007b96:	db02      	blt.n	8007b9e <_printf_float+0x13a>
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	dd41      	ble.n	8007c22 <_printf_float+0x1be>
 8007b9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007ba2:	fa5f fb8b 	uxtb.w	fp, fp
 8007ba6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007baa:	d820      	bhi.n	8007bee <_printf_float+0x18a>
 8007bac:	3901      	subs	r1, #1
 8007bae:	465a      	mov	r2, fp
 8007bb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8007bb6:	f7ff ff17 	bl	80079e8 <__exponent>
 8007bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bbc:	1813      	adds	r3, r2, r0
 8007bbe:	2a01      	cmp	r2, #1
 8007bc0:	4681      	mov	r9, r0
 8007bc2:	6123      	str	r3, [r4, #16]
 8007bc4:	dc02      	bgt.n	8007bcc <_printf_float+0x168>
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	07d2      	lsls	r2, r2, #31
 8007bca:	d501      	bpl.n	8007bd0 <_printf_float+0x16c>
 8007bcc:	3301      	adds	r3, #1
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d09c      	beq.n	8007b12 <_printf_float+0xae>
 8007bd8:	232d      	movs	r3, #45	; 0x2d
 8007bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bde:	e798      	b.n	8007b12 <_printf_float+0xae>
 8007be0:	9a06      	ldr	r2, [sp, #24]
 8007be2:	2a47      	cmp	r2, #71	; 0x47
 8007be4:	d1be      	bne.n	8007b64 <_printf_float+0x100>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1bc      	bne.n	8007b64 <_printf_float+0x100>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7b9      	b.n	8007b62 <_printf_float+0xfe>
 8007bee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007bf2:	d118      	bne.n	8007c26 <_printf_float+0x1c2>
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	6863      	ldr	r3, [r4, #4]
 8007bf8:	dd0b      	ble.n	8007c12 <_printf_float+0x1ae>
 8007bfa:	6121      	str	r1, [r4, #16]
 8007bfc:	b913      	cbnz	r3, 8007c04 <_printf_float+0x1a0>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	07d0      	lsls	r0, r2, #31
 8007c02:	d502      	bpl.n	8007c0a <_printf_float+0x1a6>
 8007c04:	3301      	adds	r3, #1
 8007c06:	440b      	add	r3, r1
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c0c:	f04f 0900 	mov.w	r9, #0
 8007c10:	e7de      	b.n	8007bd0 <_printf_float+0x16c>
 8007c12:	b913      	cbnz	r3, 8007c1a <_printf_float+0x1b6>
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	07d2      	lsls	r2, r2, #31
 8007c18:	d501      	bpl.n	8007c1e <_printf_float+0x1ba>
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	e7f4      	b.n	8007c08 <_printf_float+0x1a4>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e7f2      	b.n	8007c08 <_printf_float+0x1a4>
 8007c22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	4299      	cmp	r1, r3
 8007c2a:	db05      	blt.n	8007c38 <_printf_float+0x1d4>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	6121      	str	r1, [r4, #16]
 8007c30:	07d8      	lsls	r0, r3, #31
 8007c32:	d5ea      	bpl.n	8007c0a <_printf_float+0x1a6>
 8007c34:	1c4b      	adds	r3, r1, #1
 8007c36:	e7e7      	b.n	8007c08 <_printf_float+0x1a4>
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	bfd4      	ite	le
 8007c3c:	f1c1 0202 	rsble	r2, r1, #2
 8007c40:	2201      	movgt	r2, #1
 8007c42:	4413      	add	r3, r2
 8007c44:	e7e0      	b.n	8007c08 <_printf_float+0x1a4>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	055a      	lsls	r2, r3, #21
 8007c4a:	d407      	bmi.n	8007c5c <_printf_float+0x1f8>
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	4642      	mov	r2, r8
 8007c50:	4631      	mov	r1, r6
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	d12c      	bne.n	8007cb4 <_printf_float+0x250>
 8007c5a:	e764      	b.n	8007b26 <_printf_float+0xc2>
 8007c5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c60:	f240 80e0 	bls.w	8007e24 <_printf_float+0x3c0>
 8007c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f7f8 ff34 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d034      	beq.n	8007cde <_printf_float+0x27a>
 8007c74:	4a37      	ldr	r2, [pc, #220]	; (8007d54 <_printf_float+0x2f0>)
 8007c76:	2301      	movs	r3, #1
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f af51 	beq.w	8007b26 <_printf_float+0xc2>
 8007c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	db02      	blt.n	8007c92 <_printf_float+0x22e>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	07d8      	lsls	r0, r3, #31
 8007c90:	d510      	bpl.n	8007cb4 <_printf_float+0x250>
 8007c92:	ee18 3a10 	vmov	r3, s16
 8007c96:	4652      	mov	r2, sl
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f af41 	beq.w	8007b26 <_printf_float+0xc2>
 8007ca4:	f04f 0800 	mov.w	r8, #0
 8007ca8:	f104 091a 	add.w	r9, r4, #26
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	4543      	cmp	r3, r8
 8007cb2:	dc09      	bgt.n	8007cc8 <_printf_float+0x264>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	079b      	lsls	r3, r3, #30
 8007cb8:	f100 8105 	bmi.w	8007ec6 <_printf_float+0x462>
 8007cbc:	68e0      	ldr	r0, [r4, #12]
 8007cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc0:	4298      	cmp	r0, r3
 8007cc2:	bfb8      	it	lt
 8007cc4:	4618      	movlt	r0, r3
 8007cc6:	e730      	b.n	8007b2a <_printf_float+0xc6>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	464a      	mov	r2, r9
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b8      	blx	r7
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	f43f af27 	beq.w	8007b26 <_printf_float+0xc2>
 8007cd8:	f108 0801 	add.w	r8, r8, #1
 8007cdc:	e7e6      	b.n	8007cac <_printf_float+0x248>
 8007cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc39      	bgt.n	8007d58 <_printf_float+0x2f4>
 8007ce4:	4a1b      	ldr	r2, [pc, #108]	; (8007d54 <_printf_float+0x2f0>)
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f af19 	beq.w	8007b26 <_printf_float+0xc2>
 8007cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	d102      	bne.n	8007d02 <_printf_float+0x29e>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	d5d8      	bpl.n	8007cb4 <_printf_float+0x250>
 8007d02:	ee18 3a10 	vmov	r3, s16
 8007d06:	4652      	mov	r2, sl
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af09 	beq.w	8007b26 <_printf_float+0xc2>
 8007d14:	f04f 0900 	mov.w	r9, #0
 8007d18:	f104 0a1a 	add.w	sl, r4, #26
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	425b      	negs	r3, r3
 8007d20:	454b      	cmp	r3, r9
 8007d22:	dc01      	bgt.n	8007d28 <_printf_float+0x2c4>
 8007d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d26:	e792      	b.n	8007c4e <_printf_float+0x1ea>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b8      	blx	r7
 8007d32:	3001      	adds	r0, #1
 8007d34:	f43f aef7 	beq.w	8007b26 <_printf_float+0xc2>
 8007d38:	f109 0901 	add.w	r9, r9, #1
 8007d3c:	e7ee      	b.n	8007d1c <_printf_float+0x2b8>
 8007d3e:	bf00      	nop
 8007d40:	7fefffff 	.word	0x7fefffff
 8007d44:	0800a6f4 	.word	0x0800a6f4
 8007d48:	0800a6f8 	.word	0x0800a6f8
 8007d4c:	0800a700 	.word	0x0800a700
 8007d50:	0800a6fc 	.word	0x0800a6fc
 8007d54:	0800a704 	.word	0x0800a704
 8007d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	bfa8      	it	ge
 8007d60:	461a      	movge	r2, r3
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	4691      	mov	r9, r2
 8007d66:	dc37      	bgt.n	8007dd8 <_printf_float+0x374>
 8007d68:	f04f 0b00 	mov.w	fp, #0
 8007d6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d70:	f104 021a 	add.w	r2, r4, #26
 8007d74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d76:	9305      	str	r3, [sp, #20]
 8007d78:	eba3 0309 	sub.w	r3, r3, r9
 8007d7c:	455b      	cmp	r3, fp
 8007d7e:	dc33      	bgt.n	8007de8 <_printf_float+0x384>
 8007d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d84:	429a      	cmp	r2, r3
 8007d86:	db3b      	blt.n	8007e00 <_printf_float+0x39c>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	07da      	lsls	r2, r3, #31
 8007d8c:	d438      	bmi.n	8007e00 <_printf_float+0x39c>
 8007d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	eba2 0901 	sub.w	r9, r2, r1
 8007d9a:	4599      	cmp	r9, r3
 8007d9c:	bfa8      	it	ge
 8007d9e:	4699      	movge	r9, r3
 8007da0:	f1b9 0f00 	cmp.w	r9, #0
 8007da4:	dc35      	bgt.n	8007e12 <_printf_float+0x3ae>
 8007da6:	f04f 0800 	mov.w	r8, #0
 8007daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dae:	f104 0a1a 	add.w	sl, r4, #26
 8007db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	eba3 0309 	sub.w	r3, r3, r9
 8007dbc:	4543      	cmp	r3, r8
 8007dbe:	f77f af79 	ble.w	8007cb4 <_printf_float+0x250>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f43f aeaa 	beq.w	8007b26 <_printf_float+0xc2>
 8007dd2:	f108 0801 	add.w	r8, r8, #1
 8007dd6:	e7ec      	b.n	8007db2 <_printf_float+0x34e>
 8007dd8:	4613      	mov	r3, r2
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4642      	mov	r2, r8
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	d1c0      	bne.n	8007d68 <_printf_float+0x304>
 8007de6:	e69e      	b.n	8007b26 <_printf_float+0xc2>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	9205      	str	r2, [sp, #20]
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f ae97 	beq.w	8007b26 <_printf_float+0xc2>
 8007df8:	9a05      	ldr	r2, [sp, #20]
 8007dfa:	f10b 0b01 	add.w	fp, fp, #1
 8007dfe:	e7b9      	b.n	8007d74 <_printf_float+0x310>
 8007e00:	ee18 3a10 	vmov	r3, s16
 8007e04:	4652      	mov	r2, sl
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1be      	bne.n	8007d8e <_printf_float+0x32a>
 8007e10:	e689      	b.n	8007b26 <_printf_float+0xc2>
 8007e12:	9a05      	ldr	r2, [sp, #20]
 8007e14:	464b      	mov	r3, r9
 8007e16:	4442      	add	r2, r8
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d1c1      	bne.n	8007da6 <_printf_float+0x342>
 8007e22:	e680      	b.n	8007b26 <_printf_float+0xc2>
 8007e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e26:	2a01      	cmp	r2, #1
 8007e28:	dc01      	bgt.n	8007e2e <_printf_float+0x3ca>
 8007e2a:	07db      	lsls	r3, r3, #31
 8007e2c:	d538      	bpl.n	8007ea0 <_printf_float+0x43c>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4642      	mov	r2, r8
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b8      	blx	r7
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f43f ae74 	beq.w	8007b26 <_printf_float+0xc2>
 8007e3e:	ee18 3a10 	vmov	r3, s16
 8007e42:	4652      	mov	r2, sl
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f ae6b 	beq.w	8007b26 <_printf_float+0xc2>
 8007e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e54:	2200      	movs	r2, #0
 8007e56:	2300      	movs	r3, #0
 8007e58:	f7f8 fe3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e5c:	b9d8      	cbnz	r0, 8007e96 <_printf_float+0x432>
 8007e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e60:	f108 0201 	add.w	r2, r8, #1
 8007e64:	3b01      	subs	r3, #1
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d10e      	bne.n	8007e8e <_printf_float+0x42a>
 8007e70:	e659      	b.n	8007b26 <_printf_float+0xc2>
 8007e72:	2301      	movs	r3, #1
 8007e74:	4652      	mov	r2, sl
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f43f ae52 	beq.w	8007b26 <_printf_float+0xc2>
 8007e82:	f108 0801 	add.w	r8, r8, #1
 8007e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	4543      	cmp	r3, r8
 8007e8c:	dcf1      	bgt.n	8007e72 <_printf_float+0x40e>
 8007e8e:	464b      	mov	r3, r9
 8007e90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e94:	e6dc      	b.n	8007c50 <_printf_float+0x1ec>
 8007e96:	f04f 0800 	mov.w	r8, #0
 8007e9a:	f104 0a1a 	add.w	sl, r4, #26
 8007e9e:	e7f2      	b.n	8007e86 <_printf_float+0x422>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	e7df      	b.n	8007e66 <_printf_float+0x402>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	464a      	mov	r2, r9
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b8      	blx	r7
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	f43f ae38 	beq.w	8007b26 <_printf_float+0xc2>
 8007eb6:	f108 0801 	add.w	r8, r8, #1
 8007eba:	68e3      	ldr	r3, [r4, #12]
 8007ebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ebe:	1a5b      	subs	r3, r3, r1
 8007ec0:	4543      	cmp	r3, r8
 8007ec2:	dcf0      	bgt.n	8007ea6 <_printf_float+0x442>
 8007ec4:	e6fa      	b.n	8007cbc <_printf_float+0x258>
 8007ec6:	f04f 0800 	mov.w	r8, #0
 8007eca:	f104 0919 	add.w	r9, r4, #25
 8007ece:	e7f4      	b.n	8007eba <_printf_float+0x456>

08007ed0 <_printf_common>:
 8007ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	4616      	mov	r6, r2
 8007ed6:	4699      	mov	r9, r3
 8007ed8:	688a      	ldr	r2, [r1, #8]
 8007eda:	690b      	ldr	r3, [r1, #16]
 8007edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	bfb8      	it	lt
 8007ee4:	4613      	movlt	r3, r2
 8007ee6:	6033      	str	r3, [r6, #0]
 8007ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007eec:	4607      	mov	r7, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b10a      	cbz	r2, 8007ef6 <_printf_common+0x26>
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	0699      	lsls	r1, r3, #26
 8007efa:	bf42      	ittt	mi
 8007efc:	6833      	ldrmi	r3, [r6, #0]
 8007efe:	3302      	addmi	r3, #2
 8007f00:	6033      	strmi	r3, [r6, #0]
 8007f02:	6825      	ldr	r5, [r4, #0]
 8007f04:	f015 0506 	ands.w	r5, r5, #6
 8007f08:	d106      	bne.n	8007f18 <_printf_common+0x48>
 8007f0a:	f104 0a19 	add.w	sl, r4, #25
 8007f0e:	68e3      	ldr	r3, [r4, #12]
 8007f10:	6832      	ldr	r2, [r6, #0]
 8007f12:	1a9b      	subs	r3, r3, r2
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	dc26      	bgt.n	8007f66 <_printf_common+0x96>
 8007f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f1c:	1e13      	subs	r3, r2, #0
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	bf18      	it	ne
 8007f22:	2301      	movne	r3, #1
 8007f24:	0692      	lsls	r2, r2, #26
 8007f26:	d42b      	bmi.n	8007f80 <_printf_common+0xb0>
 8007f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	4638      	mov	r0, r7
 8007f30:	47c0      	blx	r8
 8007f32:	3001      	adds	r0, #1
 8007f34:	d01e      	beq.n	8007f74 <_printf_common+0xa4>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	68e5      	ldr	r5, [r4, #12]
 8007f3a:	6832      	ldr	r2, [r6, #0]
 8007f3c:	f003 0306 	and.w	r3, r3, #6
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	bf08      	it	eq
 8007f44:	1aad      	subeq	r5, r5, r2
 8007f46:	68a3      	ldr	r3, [r4, #8]
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	bf0c      	ite	eq
 8007f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f50:	2500      	movne	r5, #0
 8007f52:	4293      	cmp	r3, r2
 8007f54:	bfc4      	itt	gt
 8007f56:	1a9b      	subgt	r3, r3, r2
 8007f58:	18ed      	addgt	r5, r5, r3
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	341a      	adds	r4, #26
 8007f5e:	42b5      	cmp	r5, r6
 8007f60:	d11a      	bne.n	8007f98 <_printf_common+0xc8>
 8007f62:	2000      	movs	r0, #0
 8007f64:	e008      	b.n	8007f78 <_printf_common+0xa8>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4652      	mov	r2, sl
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	47c0      	blx	r8
 8007f70:	3001      	adds	r0, #1
 8007f72:	d103      	bne.n	8007f7c <_printf_common+0xac>
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	e7c6      	b.n	8007f0e <_printf_common+0x3e>
 8007f80:	18e1      	adds	r1, r4, r3
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	2030      	movs	r0, #48	; 0x30
 8007f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f8a:	4422      	add	r2, r4
 8007f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f94:	3302      	adds	r3, #2
 8007f96:	e7c7      	b.n	8007f28 <_printf_common+0x58>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	47c0      	blx	r8
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d0e6      	beq.n	8007f74 <_printf_common+0xa4>
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7d9      	b.n	8007f5e <_printf_common+0x8e>
	...

08007fac <_printf_i>:
 8007fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	4691      	mov	r9, r2
 8007fb4:	7e27      	ldrb	r7, [r4, #24]
 8007fb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fb8:	2f78      	cmp	r7, #120	; 0x78
 8007fba:	4680      	mov	r8, r0
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fc2:	d807      	bhi.n	8007fd4 <_printf_i+0x28>
 8007fc4:	2f62      	cmp	r7, #98	; 0x62
 8007fc6:	d80a      	bhi.n	8007fde <_printf_i+0x32>
 8007fc8:	2f00      	cmp	r7, #0
 8007fca:	f000 80d8 	beq.w	800817e <_printf_i+0x1d2>
 8007fce:	2f58      	cmp	r7, #88	; 0x58
 8007fd0:	f000 80a3 	beq.w	800811a <_printf_i+0x16e>
 8007fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fdc:	e03a      	b.n	8008054 <_printf_i+0xa8>
 8007fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fe2:	2b15      	cmp	r3, #21
 8007fe4:	d8f6      	bhi.n	8007fd4 <_printf_i+0x28>
 8007fe6:	a001      	add	r0, pc, #4	; (adr r0, 8007fec <_printf_i+0x40>)
 8007fe8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007fec:	08008045 	.word	0x08008045
 8007ff0:	08008059 	.word	0x08008059
 8007ff4:	08007fd5 	.word	0x08007fd5
 8007ff8:	08007fd5 	.word	0x08007fd5
 8007ffc:	08007fd5 	.word	0x08007fd5
 8008000:	08007fd5 	.word	0x08007fd5
 8008004:	08008059 	.word	0x08008059
 8008008:	08007fd5 	.word	0x08007fd5
 800800c:	08007fd5 	.word	0x08007fd5
 8008010:	08007fd5 	.word	0x08007fd5
 8008014:	08007fd5 	.word	0x08007fd5
 8008018:	08008165 	.word	0x08008165
 800801c:	08008089 	.word	0x08008089
 8008020:	08008147 	.word	0x08008147
 8008024:	08007fd5 	.word	0x08007fd5
 8008028:	08007fd5 	.word	0x08007fd5
 800802c:	08008187 	.word	0x08008187
 8008030:	08007fd5 	.word	0x08007fd5
 8008034:	08008089 	.word	0x08008089
 8008038:	08007fd5 	.word	0x08007fd5
 800803c:	08007fd5 	.word	0x08007fd5
 8008040:	0800814f 	.word	0x0800814f
 8008044:	680b      	ldr	r3, [r1, #0]
 8008046:	1d1a      	adds	r2, r3, #4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	600a      	str	r2, [r1, #0]
 800804c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008054:	2301      	movs	r3, #1
 8008056:	e0a3      	b.n	80081a0 <_printf_i+0x1f4>
 8008058:	6825      	ldr	r5, [r4, #0]
 800805a:	6808      	ldr	r0, [r1, #0]
 800805c:	062e      	lsls	r6, r5, #24
 800805e:	f100 0304 	add.w	r3, r0, #4
 8008062:	d50a      	bpl.n	800807a <_printf_i+0xce>
 8008064:	6805      	ldr	r5, [r0, #0]
 8008066:	600b      	str	r3, [r1, #0]
 8008068:	2d00      	cmp	r5, #0
 800806a:	da03      	bge.n	8008074 <_printf_i+0xc8>
 800806c:	232d      	movs	r3, #45	; 0x2d
 800806e:	426d      	negs	r5, r5
 8008070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008074:	485e      	ldr	r0, [pc, #376]	; (80081f0 <_printf_i+0x244>)
 8008076:	230a      	movs	r3, #10
 8008078:	e019      	b.n	80080ae <_printf_i+0x102>
 800807a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800807e:	6805      	ldr	r5, [r0, #0]
 8008080:	600b      	str	r3, [r1, #0]
 8008082:	bf18      	it	ne
 8008084:	b22d      	sxthne	r5, r5
 8008086:	e7ef      	b.n	8008068 <_printf_i+0xbc>
 8008088:	680b      	ldr	r3, [r1, #0]
 800808a:	6825      	ldr	r5, [r4, #0]
 800808c:	1d18      	adds	r0, r3, #4
 800808e:	6008      	str	r0, [r1, #0]
 8008090:	0628      	lsls	r0, r5, #24
 8008092:	d501      	bpl.n	8008098 <_printf_i+0xec>
 8008094:	681d      	ldr	r5, [r3, #0]
 8008096:	e002      	b.n	800809e <_printf_i+0xf2>
 8008098:	0669      	lsls	r1, r5, #25
 800809a:	d5fb      	bpl.n	8008094 <_printf_i+0xe8>
 800809c:	881d      	ldrh	r5, [r3, #0]
 800809e:	4854      	ldr	r0, [pc, #336]	; (80081f0 <_printf_i+0x244>)
 80080a0:	2f6f      	cmp	r7, #111	; 0x6f
 80080a2:	bf0c      	ite	eq
 80080a4:	2308      	moveq	r3, #8
 80080a6:	230a      	movne	r3, #10
 80080a8:	2100      	movs	r1, #0
 80080aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080ae:	6866      	ldr	r6, [r4, #4]
 80080b0:	60a6      	str	r6, [r4, #8]
 80080b2:	2e00      	cmp	r6, #0
 80080b4:	bfa2      	ittt	ge
 80080b6:	6821      	ldrge	r1, [r4, #0]
 80080b8:	f021 0104 	bicge.w	r1, r1, #4
 80080bc:	6021      	strge	r1, [r4, #0]
 80080be:	b90d      	cbnz	r5, 80080c4 <_printf_i+0x118>
 80080c0:	2e00      	cmp	r6, #0
 80080c2:	d04d      	beq.n	8008160 <_printf_i+0x1b4>
 80080c4:	4616      	mov	r6, r2
 80080c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80080ca:	fb03 5711 	mls	r7, r3, r1, r5
 80080ce:	5dc7      	ldrb	r7, [r0, r7]
 80080d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080d4:	462f      	mov	r7, r5
 80080d6:	42bb      	cmp	r3, r7
 80080d8:	460d      	mov	r5, r1
 80080da:	d9f4      	bls.n	80080c6 <_printf_i+0x11a>
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d10b      	bne.n	80080f8 <_printf_i+0x14c>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	07df      	lsls	r7, r3, #31
 80080e4:	d508      	bpl.n	80080f8 <_printf_i+0x14c>
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	6861      	ldr	r1, [r4, #4]
 80080ea:	4299      	cmp	r1, r3
 80080ec:	bfde      	ittt	le
 80080ee:	2330      	movle	r3, #48	; 0x30
 80080f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080f8:	1b92      	subs	r2, r2, r6
 80080fa:	6122      	str	r2, [r4, #16]
 80080fc:	f8cd a000 	str.w	sl, [sp]
 8008100:	464b      	mov	r3, r9
 8008102:	aa03      	add	r2, sp, #12
 8008104:	4621      	mov	r1, r4
 8008106:	4640      	mov	r0, r8
 8008108:	f7ff fee2 	bl	8007ed0 <_printf_common>
 800810c:	3001      	adds	r0, #1
 800810e:	d14c      	bne.n	80081aa <_printf_i+0x1fe>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	b004      	add	sp, #16
 8008116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811a:	4835      	ldr	r0, [pc, #212]	; (80081f0 <_printf_i+0x244>)
 800811c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	680e      	ldr	r6, [r1, #0]
 8008124:	061f      	lsls	r7, r3, #24
 8008126:	f856 5b04 	ldr.w	r5, [r6], #4
 800812a:	600e      	str	r6, [r1, #0]
 800812c:	d514      	bpl.n	8008158 <_printf_i+0x1ac>
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	bf44      	itt	mi
 8008132:	f043 0320 	orrmi.w	r3, r3, #32
 8008136:	6023      	strmi	r3, [r4, #0]
 8008138:	b91d      	cbnz	r5, 8008142 <_printf_i+0x196>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	f023 0320 	bic.w	r3, r3, #32
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	2310      	movs	r3, #16
 8008144:	e7b0      	b.n	80080a8 <_printf_i+0xfc>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	f043 0320 	orr.w	r3, r3, #32
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	2378      	movs	r3, #120	; 0x78
 8008150:	4828      	ldr	r0, [pc, #160]	; (80081f4 <_printf_i+0x248>)
 8008152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008156:	e7e3      	b.n	8008120 <_printf_i+0x174>
 8008158:	065e      	lsls	r6, r3, #25
 800815a:	bf48      	it	mi
 800815c:	b2ad      	uxthmi	r5, r5
 800815e:	e7e6      	b.n	800812e <_printf_i+0x182>
 8008160:	4616      	mov	r6, r2
 8008162:	e7bb      	b.n	80080dc <_printf_i+0x130>
 8008164:	680b      	ldr	r3, [r1, #0]
 8008166:	6826      	ldr	r6, [r4, #0]
 8008168:	6960      	ldr	r0, [r4, #20]
 800816a:	1d1d      	adds	r5, r3, #4
 800816c:	600d      	str	r5, [r1, #0]
 800816e:	0635      	lsls	r5, r6, #24
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	d501      	bpl.n	8008178 <_printf_i+0x1cc>
 8008174:	6018      	str	r0, [r3, #0]
 8008176:	e002      	b.n	800817e <_printf_i+0x1d2>
 8008178:	0671      	lsls	r1, r6, #25
 800817a:	d5fb      	bpl.n	8008174 <_printf_i+0x1c8>
 800817c:	8018      	strh	r0, [r3, #0]
 800817e:	2300      	movs	r3, #0
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	4616      	mov	r6, r2
 8008184:	e7ba      	b.n	80080fc <_printf_i+0x150>
 8008186:	680b      	ldr	r3, [r1, #0]
 8008188:	1d1a      	adds	r2, r3, #4
 800818a:	600a      	str	r2, [r1, #0]
 800818c:	681e      	ldr	r6, [r3, #0]
 800818e:	6862      	ldr	r2, [r4, #4]
 8008190:	2100      	movs	r1, #0
 8008192:	4630      	mov	r0, r6
 8008194:	f7f8 f82c 	bl	80001f0 <memchr>
 8008198:	b108      	cbz	r0, 800819e <_printf_i+0x1f2>
 800819a:	1b80      	subs	r0, r0, r6
 800819c:	6060      	str	r0, [r4, #4]
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	2300      	movs	r3, #0
 80081a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a8:	e7a8      	b.n	80080fc <_printf_i+0x150>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	4632      	mov	r2, r6
 80081ae:	4649      	mov	r1, r9
 80081b0:	4640      	mov	r0, r8
 80081b2:	47d0      	blx	sl
 80081b4:	3001      	adds	r0, #1
 80081b6:	d0ab      	beq.n	8008110 <_printf_i+0x164>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	079b      	lsls	r3, r3, #30
 80081bc:	d413      	bmi.n	80081e6 <_printf_i+0x23a>
 80081be:	68e0      	ldr	r0, [r4, #12]
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	4298      	cmp	r0, r3
 80081c4:	bfb8      	it	lt
 80081c6:	4618      	movlt	r0, r3
 80081c8:	e7a4      	b.n	8008114 <_printf_i+0x168>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4632      	mov	r2, r6
 80081ce:	4649      	mov	r1, r9
 80081d0:	4640      	mov	r0, r8
 80081d2:	47d0      	blx	sl
 80081d4:	3001      	adds	r0, #1
 80081d6:	d09b      	beq.n	8008110 <_printf_i+0x164>
 80081d8:	3501      	adds	r5, #1
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	9903      	ldr	r1, [sp, #12]
 80081de:	1a5b      	subs	r3, r3, r1
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	dcf2      	bgt.n	80081ca <_printf_i+0x21e>
 80081e4:	e7eb      	b.n	80081be <_printf_i+0x212>
 80081e6:	2500      	movs	r5, #0
 80081e8:	f104 0619 	add.w	r6, r4, #25
 80081ec:	e7f5      	b.n	80081da <_printf_i+0x22e>
 80081ee:	bf00      	nop
 80081f0:	0800a706 	.word	0x0800a706
 80081f4:	0800a717 	.word	0x0800a717

080081f8 <cleanup_glue>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	460c      	mov	r4, r1
 80081fc:	6809      	ldr	r1, [r1, #0]
 80081fe:	4605      	mov	r5, r0
 8008200:	b109      	cbz	r1, 8008206 <cleanup_glue+0xe>
 8008202:	f7ff fff9 	bl	80081f8 <cleanup_glue>
 8008206:	4621      	mov	r1, r4
 8008208:	4628      	mov	r0, r5
 800820a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800820e:	f7ff badf 	b.w	80077d0 <_free_r>
	...

08008214 <_reclaim_reent>:
 8008214:	4b2c      	ldr	r3, [pc, #176]	; (80082c8 <_reclaim_reent+0xb4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4283      	cmp	r3, r0
 800821a:	b570      	push	{r4, r5, r6, lr}
 800821c:	4604      	mov	r4, r0
 800821e:	d051      	beq.n	80082c4 <_reclaim_reent+0xb0>
 8008220:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008222:	b143      	cbz	r3, 8008236 <_reclaim_reent+0x22>
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d14a      	bne.n	80082c0 <_reclaim_reent+0xac>
 800822a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822c:	6819      	ldr	r1, [r3, #0]
 800822e:	b111      	cbz	r1, 8008236 <_reclaim_reent+0x22>
 8008230:	4620      	mov	r0, r4
 8008232:	f7ff facd 	bl	80077d0 <_free_r>
 8008236:	6961      	ldr	r1, [r4, #20]
 8008238:	b111      	cbz	r1, 8008240 <_reclaim_reent+0x2c>
 800823a:	4620      	mov	r0, r4
 800823c:	f7ff fac8 	bl	80077d0 <_free_r>
 8008240:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008242:	b111      	cbz	r1, 800824a <_reclaim_reent+0x36>
 8008244:	4620      	mov	r0, r4
 8008246:	f7ff fac3 	bl	80077d0 <_free_r>
 800824a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800824c:	b111      	cbz	r1, 8008254 <_reclaim_reent+0x40>
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff fabe 	bl	80077d0 <_free_r>
 8008254:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008256:	b111      	cbz	r1, 800825e <_reclaim_reent+0x4a>
 8008258:	4620      	mov	r0, r4
 800825a:	f7ff fab9 	bl	80077d0 <_free_r>
 800825e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008260:	b111      	cbz	r1, 8008268 <_reclaim_reent+0x54>
 8008262:	4620      	mov	r0, r4
 8008264:	f7ff fab4 	bl	80077d0 <_free_r>
 8008268:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800826a:	b111      	cbz	r1, 8008272 <_reclaim_reent+0x5e>
 800826c:	4620      	mov	r0, r4
 800826e:	f7ff faaf 	bl	80077d0 <_free_r>
 8008272:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008274:	b111      	cbz	r1, 800827c <_reclaim_reent+0x68>
 8008276:	4620      	mov	r0, r4
 8008278:	f7ff faaa 	bl	80077d0 <_free_r>
 800827c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800827e:	b111      	cbz	r1, 8008286 <_reclaim_reent+0x72>
 8008280:	4620      	mov	r0, r4
 8008282:	f7ff faa5 	bl	80077d0 <_free_r>
 8008286:	69a3      	ldr	r3, [r4, #24]
 8008288:	b1e3      	cbz	r3, 80082c4 <_reclaim_reent+0xb0>
 800828a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800828c:	4620      	mov	r0, r4
 800828e:	4798      	blx	r3
 8008290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008292:	b1b9      	cbz	r1, 80082c4 <_reclaim_reent+0xb0>
 8008294:	4620      	mov	r0, r4
 8008296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800829a:	f7ff bfad 	b.w	80081f8 <cleanup_glue>
 800829e:	5949      	ldr	r1, [r1, r5]
 80082a0:	b941      	cbnz	r1, 80082b4 <_reclaim_reent+0xa0>
 80082a2:	3504      	adds	r5, #4
 80082a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a6:	2d80      	cmp	r5, #128	; 0x80
 80082a8:	68d9      	ldr	r1, [r3, #12]
 80082aa:	d1f8      	bne.n	800829e <_reclaim_reent+0x8a>
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7ff fa8f 	bl	80077d0 <_free_r>
 80082b2:	e7ba      	b.n	800822a <_reclaim_reent+0x16>
 80082b4:	680e      	ldr	r6, [r1, #0]
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff fa8a 	bl	80077d0 <_free_r>
 80082bc:	4631      	mov	r1, r6
 80082be:	e7ef      	b.n	80082a0 <_reclaim_reent+0x8c>
 80082c0:	2500      	movs	r5, #0
 80082c2:	e7ef      	b.n	80082a4 <_reclaim_reent+0x90>
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
 80082c6:	bf00      	nop
 80082c8:	20000010 	.word	0x20000010

080082cc <_sbrk_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_sbrk_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7f9 fa40 	bl	800175c <_sbrk>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_sbrk_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_sbrk_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20002c74 	.word	0x20002c74

080082ec <siprintf>:
 80082ec:	b40e      	push	{r1, r2, r3}
 80082ee:	b500      	push	{lr}
 80082f0:	b09c      	sub	sp, #112	; 0x70
 80082f2:	ab1d      	add	r3, sp, #116	; 0x74
 80082f4:	9002      	str	r0, [sp, #8]
 80082f6:	9006      	str	r0, [sp, #24]
 80082f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082fc:	4809      	ldr	r0, [pc, #36]	; (8008324 <siprintf+0x38>)
 80082fe:	9107      	str	r1, [sp, #28]
 8008300:	9104      	str	r1, [sp, #16]
 8008302:	4909      	ldr	r1, [pc, #36]	; (8008328 <siprintf+0x3c>)
 8008304:	f853 2b04 	ldr.w	r2, [r3], #4
 8008308:	9105      	str	r1, [sp, #20]
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	a902      	add	r1, sp, #8
 8008310:	f001 fbb6 	bl	8009a80 <_svfiprintf_r>
 8008314:	9b02      	ldr	r3, [sp, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	b01c      	add	sp, #112	; 0x70
 800831c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008320:	b003      	add	sp, #12
 8008322:	4770      	bx	lr
 8008324:	20000010 	.word	0x20000010
 8008328:	ffff0208 	.word	0xffff0208

0800832c <__sread>:
 800832c:	b510      	push	{r4, lr}
 800832e:	460c      	mov	r4, r1
 8008330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008334:	f001 fca4 	bl	8009c80 <_read_r>
 8008338:	2800      	cmp	r0, #0
 800833a:	bfab      	itete	ge
 800833c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800833e:	89a3      	ldrhlt	r3, [r4, #12]
 8008340:	181b      	addge	r3, r3, r0
 8008342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008346:	bfac      	ite	ge
 8008348:	6563      	strge	r3, [r4, #84]	; 0x54
 800834a:	81a3      	strhlt	r3, [r4, #12]
 800834c:	bd10      	pop	{r4, pc}

0800834e <__swrite>:
 800834e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008352:	461f      	mov	r7, r3
 8008354:	898b      	ldrh	r3, [r1, #12]
 8008356:	05db      	lsls	r3, r3, #23
 8008358:	4605      	mov	r5, r0
 800835a:	460c      	mov	r4, r1
 800835c:	4616      	mov	r6, r2
 800835e:	d505      	bpl.n	800836c <__swrite+0x1e>
 8008360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008364:	2302      	movs	r3, #2
 8008366:	2200      	movs	r2, #0
 8008368:	f000 ff84 	bl	8009274 <_lseek_r>
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008376:	81a3      	strh	r3, [r4, #12]
 8008378:	4632      	mov	r2, r6
 800837a:	463b      	mov	r3, r7
 800837c:	4628      	mov	r0, r5
 800837e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008382:	f000 b817 	b.w	80083b4 <_write_r>

08008386 <__sseek>:
 8008386:	b510      	push	{r4, lr}
 8008388:	460c      	mov	r4, r1
 800838a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838e:	f000 ff71 	bl	8009274 <_lseek_r>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	bf15      	itete	ne
 8008398:	6560      	strne	r0, [r4, #84]	; 0x54
 800839a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800839e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083a2:	81a3      	strheq	r3, [r4, #12]
 80083a4:	bf18      	it	ne
 80083a6:	81a3      	strhne	r3, [r4, #12]
 80083a8:	bd10      	pop	{r4, pc}

080083aa <__sclose>:
 80083aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ae:	f000 b813 	b.w	80083d8 <_close_r>
	...

080083b4 <_write_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d07      	ldr	r5, [pc, #28]	; (80083d4 <_write_r+0x20>)
 80083b8:	4604      	mov	r4, r0
 80083ba:	4608      	mov	r0, r1
 80083bc:	4611      	mov	r1, r2
 80083be:	2200      	movs	r2, #0
 80083c0:	602a      	str	r2, [r5, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f7f9 f979 	bl	80016ba <_write>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_write_r+0x1e>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_write_r+0x1e>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20002c74 	.word	0x20002c74

080083d8 <_close_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d06      	ldr	r5, [pc, #24]	; (80083f4 <_close_r+0x1c>)
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	f7f9 f985 	bl	80016f2 <_close>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_close_r+0x1a>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_close_r+0x1a>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	20002c74 	.word	0x20002c74

080083f8 <quorem>:
 80083f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	6903      	ldr	r3, [r0, #16]
 80083fe:	690c      	ldr	r4, [r1, #16]
 8008400:	42a3      	cmp	r3, r4
 8008402:	4607      	mov	r7, r0
 8008404:	f2c0 8081 	blt.w	800850a <quorem+0x112>
 8008408:	3c01      	subs	r4, #1
 800840a:	f101 0814 	add.w	r8, r1, #20
 800840e:	f100 0514 	add.w	r5, r0, #20
 8008412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800841c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008420:	3301      	adds	r3, #1
 8008422:	429a      	cmp	r2, r3
 8008424:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008428:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800842c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008430:	d331      	bcc.n	8008496 <quorem+0x9e>
 8008432:	f04f 0e00 	mov.w	lr, #0
 8008436:	4640      	mov	r0, r8
 8008438:	46ac      	mov	ip, r5
 800843a:	46f2      	mov	sl, lr
 800843c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008440:	b293      	uxth	r3, r2
 8008442:	fb06 e303 	mla	r3, r6, r3, lr
 8008446:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800844a:	b29b      	uxth	r3, r3
 800844c:	ebaa 0303 	sub.w	r3, sl, r3
 8008450:	0c12      	lsrs	r2, r2, #16
 8008452:	f8dc a000 	ldr.w	sl, [ip]
 8008456:	fb06 e202 	mla	r2, r6, r2, lr
 800845a:	fa13 f38a 	uxtah	r3, r3, sl
 800845e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008462:	fa1f fa82 	uxth.w	sl, r2
 8008466:	f8dc 2000 	ldr.w	r2, [ip]
 800846a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800846e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008472:	b29b      	uxth	r3, r3
 8008474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008478:	4581      	cmp	r9, r0
 800847a:	f84c 3b04 	str.w	r3, [ip], #4
 800847e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008482:	d2db      	bcs.n	800843c <quorem+0x44>
 8008484:	f855 300b 	ldr.w	r3, [r5, fp]
 8008488:	b92b      	cbnz	r3, 8008496 <quorem+0x9e>
 800848a:	9b01      	ldr	r3, [sp, #4]
 800848c:	3b04      	subs	r3, #4
 800848e:	429d      	cmp	r5, r3
 8008490:	461a      	mov	r2, r3
 8008492:	d32e      	bcc.n	80084f2 <quorem+0xfa>
 8008494:	613c      	str	r4, [r7, #16]
 8008496:	4638      	mov	r0, r7
 8008498:	f001 f988 	bl	80097ac <__mcmp>
 800849c:	2800      	cmp	r0, #0
 800849e:	db24      	blt.n	80084ea <quorem+0xf2>
 80084a0:	3601      	adds	r6, #1
 80084a2:	4628      	mov	r0, r5
 80084a4:	f04f 0c00 	mov.w	ip, #0
 80084a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80084ac:	f8d0 e000 	ldr.w	lr, [r0]
 80084b0:	b293      	uxth	r3, r2
 80084b2:	ebac 0303 	sub.w	r3, ip, r3
 80084b6:	0c12      	lsrs	r2, r2, #16
 80084b8:	fa13 f38e 	uxtah	r3, r3, lr
 80084bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084ca:	45c1      	cmp	r9, r8
 80084cc:	f840 3b04 	str.w	r3, [r0], #4
 80084d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084d4:	d2e8      	bcs.n	80084a8 <quorem+0xb0>
 80084d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084de:	b922      	cbnz	r2, 80084ea <quorem+0xf2>
 80084e0:	3b04      	subs	r3, #4
 80084e2:	429d      	cmp	r5, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	d30a      	bcc.n	80084fe <quorem+0x106>
 80084e8:	613c      	str	r4, [r7, #16]
 80084ea:	4630      	mov	r0, r6
 80084ec:	b003      	add	sp, #12
 80084ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	3b04      	subs	r3, #4
 80084f6:	2a00      	cmp	r2, #0
 80084f8:	d1cc      	bne.n	8008494 <quorem+0x9c>
 80084fa:	3c01      	subs	r4, #1
 80084fc:	e7c7      	b.n	800848e <quorem+0x96>
 80084fe:	6812      	ldr	r2, [r2, #0]
 8008500:	3b04      	subs	r3, #4
 8008502:	2a00      	cmp	r2, #0
 8008504:	d1f0      	bne.n	80084e8 <quorem+0xf0>
 8008506:	3c01      	subs	r4, #1
 8008508:	e7eb      	b.n	80084e2 <quorem+0xea>
 800850a:	2000      	movs	r0, #0
 800850c:	e7ee      	b.n	80084ec <quorem+0xf4>
	...

08008510 <_dtoa_r>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	ed2d 8b02 	vpush	{d8}
 8008518:	ec57 6b10 	vmov	r6, r7, d0
 800851c:	b095      	sub	sp, #84	; 0x54
 800851e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008520:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008524:	9105      	str	r1, [sp, #20]
 8008526:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800852a:	4604      	mov	r4, r0
 800852c:	9209      	str	r2, [sp, #36]	; 0x24
 800852e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008530:	b975      	cbnz	r5, 8008550 <_dtoa_r+0x40>
 8008532:	2010      	movs	r0, #16
 8008534:	f7ff f92e 	bl	8007794 <malloc>
 8008538:	4602      	mov	r2, r0
 800853a:	6260      	str	r0, [r4, #36]	; 0x24
 800853c:	b920      	cbnz	r0, 8008548 <_dtoa_r+0x38>
 800853e:	4bb2      	ldr	r3, [pc, #712]	; (8008808 <_dtoa_r+0x2f8>)
 8008540:	21ea      	movs	r1, #234	; 0xea
 8008542:	48b2      	ldr	r0, [pc, #712]	; (800880c <_dtoa_r+0x2fc>)
 8008544:	f001 fbae 	bl	8009ca4 <__assert_func>
 8008548:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800854c:	6005      	str	r5, [r0, #0]
 800854e:	60c5      	str	r5, [r0, #12]
 8008550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	b151      	cbz	r1, 800856c <_dtoa_r+0x5c>
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	604a      	str	r2, [r1, #4]
 800855a:	2301      	movs	r3, #1
 800855c:	4093      	lsls	r3, r2
 800855e:	608b      	str	r3, [r1, #8]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fee5 	bl	8009330 <_Bfree>
 8008566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	1e3b      	subs	r3, r7, #0
 800856e:	bfb9      	ittee	lt
 8008570:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008574:	9303      	strlt	r3, [sp, #12]
 8008576:	2300      	movge	r3, #0
 8008578:	f8c8 3000 	strge.w	r3, [r8]
 800857c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008580:	4ba3      	ldr	r3, [pc, #652]	; (8008810 <_dtoa_r+0x300>)
 8008582:	bfbc      	itt	lt
 8008584:	2201      	movlt	r2, #1
 8008586:	f8c8 2000 	strlt.w	r2, [r8]
 800858a:	ea33 0309 	bics.w	r3, r3, r9
 800858e:	d11b      	bne.n	80085c8 <_dtoa_r+0xb8>
 8008590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008592:	f242 730f 	movw	r3, #9999	; 0x270f
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800859c:	4333      	orrs	r3, r6
 800859e:	f000 857a 	beq.w	8009096 <_dtoa_r+0xb86>
 80085a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085a4:	b963      	cbnz	r3, 80085c0 <_dtoa_r+0xb0>
 80085a6:	4b9b      	ldr	r3, [pc, #620]	; (8008814 <_dtoa_r+0x304>)
 80085a8:	e024      	b.n	80085f4 <_dtoa_r+0xe4>
 80085aa:	4b9b      	ldr	r3, [pc, #620]	; (8008818 <_dtoa_r+0x308>)
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	9800      	ldr	r0, [sp, #0]
 80085b6:	b015      	add	sp, #84	; 0x54
 80085b8:	ecbd 8b02 	vpop	{d8}
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	4b94      	ldr	r3, [pc, #592]	; (8008814 <_dtoa_r+0x304>)
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	3303      	adds	r3, #3
 80085c6:	e7f3      	b.n	80085b0 <_dtoa_r+0xa0>
 80085c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085cc:	2200      	movs	r2, #0
 80085ce:	ec51 0b17 	vmov	r0, r1, d7
 80085d2:	2300      	movs	r3, #0
 80085d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80085d8:	f7f8 fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80085dc:	4680      	mov	r8, r0
 80085de:	b158      	cbz	r0, 80085f8 <_dtoa_r+0xe8>
 80085e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085e2:	2301      	movs	r3, #1
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8551 	beq.w	8009090 <_dtoa_r+0xb80>
 80085ee:	488b      	ldr	r0, [pc, #556]	; (800881c <_dtoa_r+0x30c>)
 80085f0:	6018      	str	r0, [r3, #0]
 80085f2:	1e43      	subs	r3, r0, #1
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	e7dd      	b.n	80085b4 <_dtoa_r+0xa4>
 80085f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80085fc:	aa12      	add	r2, sp, #72	; 0x48
 80085fe:	a913      	add	r1, sp, #76	; 0x4c
 8008600:	4620      	mov	r0, r4
 8008602:	f001 f977 	bl	80098f4 <__d2b>
 8008606:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800860a:	4683      	mov	fp, r0
 800860c:	2d00      	cmp	r5, #0
 800860e:	d07c      	beq.n	800870a <_dtoa_r+0x1fa>
 8008610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008612:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800861a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800861e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008622:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800862a:	4b7d      	ldr	r3, [pc, #500]	; (8008820 <_dtoa_r+0x310>)
 800862c:	2200      	movs	r2, #0
 800862e:	4630      	mov	r0, r6
 8008630:	4639      	mov	r1, r7
 8008632:	f7f7 fe31 	bl	8000298 <__aeabi_dsub>
 8008636:	a36e      	add	r3, pc, #440	; (adr r3, 80087f0 <_dtoa_r+0x2e0>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 ffe4 	bl	8000608 <__aeabi_dmul>
 8008640:	a36d      	add	r3, pc, #436	; (adr r3, 80087f8 <_dtoa_r+0x2e8>)
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f7f7 fe29 	bl	800029c <__adddf3>
 800864a:	4606      	mov	r6, r0
 800864c:	4628      	mov	r0, r5
 800864e:	460f      	mov	r7, r1
 8008650:	f7f7 ff70 	bl	8000534 <__aeabi_i2d>
 8008654:	a36a      	add	r3, pc, #424	; (adr r3, 8008800 <_dtoa_r+0x2f0>)
 8008656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865a:	f7f7 ffd5 	bl	8000608 <__aeabi_dmul>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	4630      	mov	r0, r6
 8008664:	4639      	mov	r1, r7
 8008666:	f7f7 fe19 	bl	800029c <__adddf3>
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	f7f8 fa7b 	bl	8000b68 <__aeabi_d2iz>
 8008672:	2200      	movs	r2, #0
 8008674:	4682      	mov	sl, r0
 8008676:	2300      	movs	r3, #0
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f8 fa36 	bl	8000aec <__aeabi_dcmplt>
 8008680:	b148      	cbz	r0, 8008696 <_dtoa_r+0x186>
 8008682:	4650      	mov	r0, sl
 8008684:	f7f7 ff56 	bl	8000534 <__aeabi_i2d>
 8008688:	4632      	mov	r2, r6
 800868a:	463b      	mov	r3, r7
 800868c:	f7f8 fa24 	bl	8000ad8 <__aeabi_dcmpeq>
 8008690:	b908      	cbnz	r0, 8008696 <_dtoa_r+0x186>
 8008692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008696:	f1ba 0f16 	cmp.w	sl, #22
 800869a:	d854      	bhi.n	8008746 <_dtoa_r+0x236>
 800869c:	4b61      	ldr	r3, [pc, #388]	; (8008824 <_dtoa_r+0x314>)
 800869e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086aa:	f7f8 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d04b      	beq.n	800874a <_dtoa_r+0x23a>
 80086b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086b6:	2300      	movs	r3, #0
 80086b8:	930e      	str	r3, [sp, #56]	; 0x38
 80086ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086bc:	1b5d      	subs	r5, r3, r5
 80086be:	1e6b      	subs	r3, r5, #1
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	bf43      	ittte	mi
 80086c4:	2300      	movmi	r3, #0
 80086c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80086ca:	9304      	strmi	r3, [sp, #16]
 80086cc:	f04f 0800 	movpl.w	r8, #0
 80086d0:	f1ba 0f00 	cmp.w	sl, #0
 80086d4:	db3b      	blt.n	800874e <_dtoa_r+0x23e>
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80086dc:	4453      	add	r3, sl
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	2300      	movs	r3, #0
 80086e2:	9306      	str	r3, [sp, #24]
 80086e4:	9b05      	ldr	r3, [sp, #20]
 80086e6:	2b09      	cmp	r3, #9
 80086e8:	d869      	bhi.n	80087be <_dtoa_r+0x2ae>
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	bfc4      	itt	gt
 80086ee:	3b04      	subgt	r3, #4
 80086f0:	9305      	strgt	r3, [sp, #20]
 80086f2:	9b05      	ldr	r3, [sp, #20]
 80086f4:	f1a3 0302 	sub.w	r3, r3, #2
 80086f8:	bfcc      	ite	gt
 80086fa:	2500      	movgt	r5, #0
 80086fc:	2501      	movle	r5, #1
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d869      	bhi.n	80087d6 <_dtoa_r+0x2c6>
 8008702:	e8df f003 	tbb	[pc, r3]
 8008706:	4e2c      	.short	0x4e2c
 8008708:	5a4c      	.short	0x5a4c
 800870a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800870e:	441d      	add	r5, r3
 8008710:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008714:	2b20      	cmp	r3, #32
 8008716:	bfc1      	itttt	gt
 8008718:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800871c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008720:	fa09 f303 	lslgt.w	r3, r9, r3
 8008724:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008728:	bfda      	itte	le
 800872a:	f1c3 0320 	rsble	r3, r3, #32
 800872e:	fa06 f003 	lslle.w	r0, r6, r3
 8008732:	4318      	orrgt	r0, r3
 8008734:	f7f7 feee 	bl	8000514 <__aeabi_ui2d>
 8008738:	2301      	movs	r3, #1
 800873a:	4606      	mov	r6, r0
 800873c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008740:	3d01      	subs	r5, #1
 8008742:	9310      	str	r3, [sp, #64]	; 0x40
 8008744:	e771      	b.n	800862a <_dtoa_r+0x11a>
 8008746:	2301      	movs	r3, #1
 8008748:	e7b6      	b.n	80086b8 <_dtoa_r+0x1a8>
 800874a:	900e      	str	r0, [sp, #56]	; 0x38
 800874c:	e7b5      	b.n	80086ba <_dtoa_r+0x1aa>
 800874e:	f1ca 0300 	rsb	r3, sl, #0
 8008752:	9306      	str	r3, [sp, #24]
 8008754:	2300      	movs	r3, #0
 8008756:	eba8 080a 	sub.w	r8, r8, sl
 800875a:	930d      	str	r3, [sp, #52]	; 0x34
 800875c:	e7c2      	b.n	80086e4 <_dtoa_r+0x1d4>
 800875e:	2300      	movs	r3, #0
 8008760:	9308      	str	r3, [sp, #32]
 8008762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	dc39      	bgt.n	80087dc <_dtoa_r+0x2cc>
 8008768:	f04f 0901 	mov.w	r9, #1
 800876c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008770:	464b      	mov	r3, r9
 8008772:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008776:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008778:	2200      	movs	r2, #0
 800877a:	6042      	str	r2, [r0, #4]
 800877c:	2204      	movs	r2, #4
 800877e:	f102 0614 	add.w	r6, r2, #20
 8008782:	429e      	cmp	r6, r3
 8008784:	6841      	ldr	r1, [r0, #4]
 8008786:	d92f      	bls.n	80087e8 <_dtoa_r+0x2d8>
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fd91 	bl	80092b0 <_Balloc>
 800878e:	9000      	str	r0, [sp, #0]
 8008790:	2800      	cmp	r0, #0
 8008792:	d14b      	bne.n	800882c <_dtoa_r+0x31c>
 8008794:	4b24      	ldr	r3, [pc, #144]	; (8008828 <_dtoa_r+0x318>)
 8008796:	4602      	mov	r2, r0
 8008798:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800879c:	e6d1      	b.n	8008542 <_dtoa_r+0x32>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7de      	b.n	8008760 <_dtoa_r+0x250>
 80087a2:	2300      	movs	r3, #0
 80087a4:	9308      	str	r3, [sp, #32]
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	eb0a 0903 	add.w	r9, sl, r3
 80087ac:	f109 0301 	add.w	r3, r9, #1
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	bfb8      	it	lt
 80087b6:	2301      	movlt	r3, #1
 80087b8:	e7dd      	b.n	8008776 <_dtoa_r+0x266>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e7f2      	b.n	80087a4 <_dtoa_r+0x294>
 80087be:	2501      	movs	r5, #1
 80087c0:	2300      	movs	r3, #0
 80087c2:	9305      	str	r3, [sp, #20]
 80087c4:	9508      	str	r5, [sp, #32]
 80087c6:	f04f 39ff 	mov.w	r9, #4294967295
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80087d0:	2312      	movs	r3, #18
 80087d2:	9209      	str	r2, [sp, #36]	; 0x24
 80087d4:	e7cf      	b.n	8008776 <_dtoa_r+0x266>
 80087d6:	2301      	movs	r3, #1
 80087d8:	9308      	str	r3, [sp, #32]
 80087da:	e7f4      	b.n	80087c6 <_dtoa_r+0x2b6>
 80087dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80087e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80087e4:	464b      	mov	r3, r9
 80087e6:	e7c6      	b.n	8008776 <_dtoa_r+0x266>
 80087e8:	3101      	adds	r1, #1
 80087ea:	6041      	str	r1, [r0, #4]
 80087ec:	0052      	lsls	r2, r2, #1
 80087ee:	e7c6      	b.n	800877e <_dtoa_r+0x26e>
 80087f0:	636f4361 	.word	0x636f4361
 80087f4:	3fd287a7 	.word	0x3fd287a7
 80087f8:	8b60c8b3 	.word	0x8b60c8b3
 80087fc:	3fc68a28 	.word	0x3fc68a28
 8008800:	509f79fb 	.word	0x509f79fb
 8008804:	3fd34413 	.word	0x3fd34413
 8008808:	0800a735 	.word	0x0800a735
 800880c:	0800a74c 	.word	0x0800a74c
 8008810:	7ff00000 	.word	0x7ff00000
 8008814:	0800a731 	.word	0x0800a731
 8008818:	0800a728 	.word	0x0800a728
 800881c:	0800a705 	.word	0x0800a705
 8008820:	3ff80000 	.word	0x3ff80000
 8008824:	0800a848 	.word	0x0800a848
 8008828:	0800a7ab 	.word	0x0800a7ab
 800882c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800882e:	9a00      	ldr	r2, [sp, #0]
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	9b01      	ldr	r3, [sp, #4]
 8008834:	2b0e      	cmp	r3, #14
 8008836:	f200 80ad 	bhi.w	8008994 <_dtoa_r+0x484>
 800883a:	2d00      	cmp	r5, #0
 800883c:	f000 80aa 	beq.w	8008994 <_dtoa_r+0x484>
 8008840:	f1ba 0f00 	cmp.w	sl, #0
 8008844:	dd36      	ble.n	80088b4 <_dtoa_r+0x3a4>
 8008846:	4ac3      	ldr	r2, [pc, #780]	; (8008b54 <_dtoa_r+0x644>)
 8008848:	f00a 030f 	and.w	r3, sl, #15
 800884c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008850:	ed93 7b00 	vldr	d7, [r3]
 8008854:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008858:	ea4f 172a 	mov.w	r7, sl, asr #4
 800885c:	eeb0 8a47 	vmov.f32	s16, s14
 8008860:	eef0 8a67 	vmov.f32	s17, s15
 8008864:	d016      	beq.n	8008894 <_dtoa_r+0x384>
 8008866:	4bbc      	ldr	r3, [pc, #752]	; (8008b58 <_dtoa_r+0x648>)
 8008868:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800886c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008870:	f7f7 fff4 	bl	800085c <__aeabi_ddiv>
 8008874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008878:	f007 070f 	and.w	r7, r7, #15
 800887c:	2503      	movs	r5, #3
 800887e:	4eb6      	ldr	r6, [pc, #728]	; (8008b58 <_dtoa_r+0x648>)
 8008880:	b957      	cbnz	r7, 8008898 <_dtoa_r+0x388>
 8008882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008886:	ec53 2b18 	vmov	r2, r3, d8
 800888a:	f7f7 ffe7 	bl	800085c <__aeabi_ddiv>
 800888e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008892:	e029      	b.n	80088e8 <_dtoa_r+0x3d8>
 8008894:	2502      	movs	r5, #2
 8008896:	e7f2      	b.n	800887e <_dtoa_r+0x36e>
 8008898:	07f9      	lsls	r1, r7, #31
 800889a:	d508      	bpl.n	80088ae <_dtoa_r+0x39e>
 800889c:	ec51 0b18 	vmov	r0, r1, d8
 80088a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088a4:	f7f7 feb0 	bl	8000608 <__aeabi_dmul>
 80088a8:	ec41 0b18 	vmov	d8, r0, r1
 80088ac:	3501      	adds	r5, #1
 80088ae:	107f      	asrs	r7, r7, #1
 80088b0:	3608      	adds	r6, #8
 80088b2:	e7e5      	b.n	8008880 <_dtoa_r+0x370>
 80088b4:	f000 80a6 	beq.w	8008a04 <_dtoa_r+0x4f4>
 80088b8:	f1ca 0600 	rsb	r6, sl, #0
 80088bc:	4ba5      	ldr	r3, [pc, #660]	; (8008b54 <_dtoa_r+0x644>)
 80088be:	4fa6      	ldr	r7, [pc, #664]	; (8008b58 <_dtoa_r+0x648>)
 80088c0:	f006 020f 	and.w	r2, r6, #15
 80088c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088d0:	f7f7 fe9a 	bl	8000608 <__aeabi_dmul>
 80088d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d8:	1136      	asrs	r6, r6, #4
 80088da:	2300      	movs	r3, #0
 80088dc:	2502      	movs	r5, #2
 80088de:	2e00      	cmp	r6, #0
 80088e0:	f040 8085 	bne.w	80089ee <_dtoa_r+0x4de>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1d2      	bne.n	800888e <_dtoa_r+0x37e>
 80088e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 808c 	beq.w	8008a08 <_dtoa_r+0x4f8>
 80088f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088f4:	4b99      	ldr	r3, [pc, #612]	; (8008b5c <_dtoa_r+0x64c>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	f7f8 f8f6 	bl	8000aec <__aeabi_dcmplt>
 8008900:	2800      	cmp	r0, #0
 8008902:	f000 8081 	beq.w	8008a08 <_dtoa_r+0x4f8>
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d07d      	beq.n	8008a08 <_dtoa_r+0x4f8>
 800890c:	f1b9 0f00 	cmp.w	r9, #0
 8008910:	dd3c      	ble.n	800898c <_dtoa_r+0x47c>
 8008912:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	2200      	movs	r2, #0
 800891a:	4b91      	ldr	r3, [pc, #580]	; (8008b60 <_dtoa_r+0x650>)
 800891c:	4630      	mov	r0, r6
 800891e:	4639      	mov	r1, r7
 8008920:	f7f7 fe72 	bl	8000608 <__aeabi_dmul>
 8008924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008928:	3501      	adds	r5, #1
 800892a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800892e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008932:	4628      	mov	r0, r5
 8008934:	f7f7 fdfe 	bl	8000534 <__aeabi_i2d>
 8008938:	4632      	mov	r2, r6
 800893a:	463b      	mov	r3, r7
 800893c:	f7f7 fe64 	bl	8000608 <__aeabi_dmul>
 8008940:	4b88      	ldr	r3, [pc, #544]	; (8008b64 <_dtoa_r+0x654>)
 8008942:	2200      	movs	r2, #0
 8008944:	f7f7 fcaa 	bl	800029c <__adddf3>
 8008948:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800894c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008954:	2b00      	cmp	r3, #0
 8008956:	d15c      	bne.n	8008a12 <_dtoa_r+0x502>
 8008958:	4b83      	ldr	r3, [pc, #524]	; (8008b68 <_dtoa_r+0x658>)
 800895a:	2200      	movs	r2, #0
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 fc9a 	bl	8000298 <__aeabi_dsub>
 8008964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008968:	4606      	mov	r6, r0
 800896a:	460f      	mov	r7, r1
 800896c:	f7f8 f8dc 	bl	8000b28 <__aeabi_dcmpgt>
 8008970:	2800      	cmp	r0, #0
 8008972:	f040 8296 	bne.w	8008ea2 <_dtoa_r+0x992>
 8008976:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800897a:	4630      	mov	r0, r6
 800897c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008980:	4639      	mov	r1, r7
 8008982:	f7f8 f8b3 	bl	8000aec <__aeabi_dcmplt>
 8008986:	2800      	cmp	r0, #0
 8008988:	f040 8288 	bne.w	8008e9c <_dtoa_r+0x98c>
 800898c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008990:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008996:	2b00      	cmp	r3, #0
 8008998:	f2c0 8158 	blt.w	8008c4c <_dtoa_r+0x73c>
 800899c:	f1ba 0f0e 	cmp.w	sl, #14
 80089a0:	f300 8154 	bgt.w	8008c4c <_dtoa_r+0x73c>
 80089a4:	4b6b      	ldr	r3, [pc, #428]	; (8008b54 <_dtoa_r+0x644>)
 80089a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f280 80e3 	bge.w	8008b7c <_dtoa_r+0x66c>
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f300 80df 	bgt.w	8008b7c <_dtoa_r+0x66c>
 80089be:	f040 826d 	bne.w	8008e9c <_dtoa_r+0x98c>
 80089c2:	4b69      	ldr	r3, [pc, #420]	; (8008b68 <_dtoa_r+0x658>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	4640      	mov	r0, r8
 80089c8:	4649      	mov	r1, r9
 80089ca:	f7f7 fe1d 	bl	8000608 <__aeabi_dmul>
 80089ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089d2:	f7f8 f89f 	bl	8000b14 <__aeabi_dcmpge>
 80089d6:	9e01      	ldr	r6, [sp, #4]
 80089d8:	4637      	mov	r7, r6
 80089da:	2800      	cmp	r0, #0
 80089dc:	f040 8243 	bne.w	8008e66 <_dtoa_r+0x956>
 80089e0:	9d00      	ldr	r5, [sp, #0]
 80089e2:	2331      	movs	r3, #49	; 0x31
 80089e4:	f805 3b01 	strb.w	r3, [r5], #1
 80089e8:	f10a 0a01 	add.w	sl, sl, #1
 80089ec:	e23f      	b.n	8008e6e <_dtoa_r+0x95e>
 80089ee:	07f2      	lsls	r2, r6, #31
 80089f0:	d505      	bpl.n	80089fe <_dtoa_r+0x4ee>
 80089f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f6:	f7f7 fe07 	bl	8000608 <__aeabi_dmul>
 80089fa:	3501      	adds	r5, #1
 80089fc:	2301      	movs	r3, #1
 80089fe:	1076      	asrs	r6, r6, #1
 8008a00:	3708      	adds	r7, #8
 8008a02:	e76c      	b.n	80088de <_dtoa_r+0x3ce>
 8008a04:	2502      	movs	r5, #2
 8008a06:	e76f      	b.n	80088e8 <_dtoa_r+0x3d8>
 8008a08:	9b01      	ldr	r3, [sp, #4]
 8008a0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a10:	e78d      	b.n	800892e <_dtoa_r+0x41e>
 8008a12:	9900      	ldr	r1, [sp, #0]
 8008a14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a18:	4b4e      	ldr	r3, [pc, #312]	; (8008b54 <_dtoa_r+0x644>)
 8008a1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a1e:	4401      	add	r1, r0
 8008a20:	9102      	str	r1, [sp, #8]
 8008a22:	9908      	ldr	r1, [sp, #32]
 8008a24:	eeb0 8a47 	vmov.f32	s16, s14
 8008a28:	eef0 8a67 	vmov.f32	s17, s15
 8008a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a34:	2900      	cmp	r1, #0
 8008a36:	d045      	beq.n	8008ac4 <_dtoa_r+0x5b4>
 8008a38:	494c      	ldr	r1, [pc, #304]	; (8008b6c <_dtoa_r+0x65c>)
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	f7f7 ff0e 	bl	800085c <__aeabi_ddiv>
 8008a40:	ec53 2b18 	vmov	r2, r3, d8
 8008a44:	f7f7 fc28 	bl	8000298 <__aeabi_dsub>
 8008a48:	9d00      	ldr	r5, [sp, #0]
 8008a4a:	ec41 0b18 	vmov	d8, r0, r1
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7f8 f889 	bl	8000b68 <__aeabi_d2iz>
 8008a56:	900c      	str	r0, [sp, #48]	; 0x30
 8008a58:	f7f7 fd6c 	bl	8000534 <__aeabi_i2d>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fc18 	bl	8000298 <__aeabi_dsub>
 8008a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a6a:	3330      	adds	r3, #48	; 0x30
 8008a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8008a70:	ec53 2b18 	vmov	r2, r3, d8
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	f7f8 f838 	bl	8000aec <__aeabi_dcmplt>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d165      	bne.n	8008b4c <_dtoa_r+0x63c>
 8008a80:	4632      	mov	r2, r6
 8008a82:	463b      	mov	r3, r7
 8008a84:	4935      	ldr	r1, [pc, #212]	; (8008b5c <_dtoa_r+0x64c>)
 8008a86:	2000      	movs	r0, #0
 8008a88:	f7f7 fc06 	bl	8000298 <__aeabi_dsub>
 8008a8c:	ec53 2b18 	vmov	r2, r3, d8
 8008a90:	f7f8 f82c 	bl	8000aec <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f040 80b9 	bne.w	8008c0c <_dtoa_r+0x6fc>
 8008a9a:	9b02      	ldr	r3, [sp, #8]
 8008a9c:	429d      	cmp	r5, r3
 8008a9e:	f43f af75 	beq.w	800898c <_dtoa_r+0x47c>
 8008aa2:	4b2f      	ldr	r3, [pc, #188]	; (8008b60 <_dtoa_r+0x650>)
 8008aa4:	ec51 0b18 	vmov	r0, r1, d8
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f7f7 fdad 	bl	8000608 <__aeabi_dmul>
 8008aae:	4b2c      	ldr	r3, [pc, #176]	; (8008b60 <_dtoa_r+0x650>)
 8008ab0:	ec41 0b18 	vmov	d8, r0, r1
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	4639      	mov	r1, r7
 8008aba:	f7f7 fda5 	bl	8000608 <__aeabi_dmul>
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460f      	mov	r7, r1
 8008ac2:	e7c4      	b.n	8008a4e <_dtoa_r+0x53e>
 8008ac4:	ec51 0b17 	vmov	r0, r1, d7
 8008ac8:	f7f7 fd9e 	bl	8000608 <__aeabi_dmul>
 8008acc:	9b02      	ldr	r3, [sp, #8]
 8008ace:	9d00      	ldr	r5, [sp, #0]
 8008ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ad2:	ec41 0b18 	vmov	d8, r0, r1
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7f8 f845 	bl	8000b68 <__aeabi_d2iz>
 8008ade:	9011      	str	r0, [sp, #68]	; 0x44
 8008ae0:	f7f7 fd28 	bl	8000534 <__aeabi_i2d>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4630      	mov	r0, r6
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f7 fbd4 	bl	8000298 <__aeabi_dsub>
 8008af0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008af2:	3330      	adds	r3, #48	; 0x30
 8008af4:	f805 3b01 	strb.w	r3, [r5], #1
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	429d      	cmp	r5, r3
 8008afc:	4606      	mov	r6, r0
 8008afe:	460f      	mov	r7, r1
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	d134      	bne.n	8008b70 <_dtoa_r+0x660>
 8008b06:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <_dtoa_r+0x65c>)
 8008b08:	ec51 0b18 	vmov	r0, r1, d8
 8008b0c:	f7f7 fbc6 	bl	800029c <__adddf3>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f8 f806 	bl	8000b28 <__aeabi_dcmpgt>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d175      	bne.n	8008c0c <_dtoa_r+0x6fc>
 8008b20:	ec53 2b18 	vmov	r2, r3, d8
 8008b24:	4911      	ldr	r1, [pc, #68]	; (8008b6c <_dtoa_r+0x65c>)
 8008b26:	2000      	movs	r0, #0
 8008b28:	f7f7 fbb6 	bl	8000298 <__aeabi_dsub>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 ffda 	bl	8000aec <__aeabi_dcmplt>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	f43f af27 	beq.w	800898c <_dtoa_r+0x47c>
 8008b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b40:	1e6b      	subs	r3, r5, #1
 8008b42:	930c      	str	r3, [sp, #48]	; 0x30
 8008b44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b48:	2b30      	cmp	r3, #48	; 0x30
 8008b4a:	d0f8      	beq.n	8008b3e <_dtoa_r+0x62e>
 8008b4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b50:	e04a      	b.n	8008be8 <_dtoa_r+0x6d8>
 8008b52:	bf00      	nop
 8008b54:	0800a848 	.word	0x0800a848
 8008b58:	0800a820 	.word	0x0800a820
 8008b5c:	3ff00000 	.word	0x3ff00000
 8008b60:	40240000 	.word	0x40240000
 8008b64:	401c0000 	.word	0x401c0000
 8008b68:	40140000 	.word	0x40140000
 8008b6c:	3fe00000 	.word	0x3fe00000
 8008b70:	4baf      	ldr	r3, [pc, #700]	; (8008e30 <_dtoa_r+0x920>)
 8008b72:	f7f7 fd49 	bl	8000608 <__aeabi_dmul>
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	e7ac      	b.n	8008ad6 <_dtoa_r+0x5c6>
 8008b7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b80:	9d00      	ldr	r5, [sp, #0]
 8008b82:	4642      	mov	r2, r8
 8008b84:	464b      	mov	r3, r9
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	f7f7 fe67 	bl	800085c <__aeabi_ddiv>
 8008b8e:	f7f7 ffeb 	bl	8000b68 <__aeabi_d2iz>
 8008b92:	9002      	str	r0, [sp, #8]
 8008b94:	f7f7 fcce 	bl	8000534 <__aeabi_i2d>
 8008b98:	4642      	mov	r2, r8
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	f7f7 fd34 	bl	8000608 <__aeabi_dmul>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f7f7 fb76 	bl	8000298 <__aeabi_dsub>
 8008bac:	9e02      	ldr	r6, [sp, #8]
 8008bae:	9f01      	ldr	r7, [sp, #4]
 8008bb0:	3630      	adds	r6, #48	; 0x30
 8008bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8008bb6:	9e00      	ldr	r6, [sp, #0]
 8008bb8:	1bae      	subs	r6, r5, r6
 8008bba:	42b7      	cmp	r7, r6
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	d137      	bne.n	8008c32 <_dtoa_r+0x722>
 8008bc2:	f7f7 fb6b 	bl	800029c <__adddf3>
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	464b      	mov	r3, r9
 8008bca:	4606      	mov	r6, r0
 8008bcc:	460f      	mov	r7, r1
 8008bce:	f7f7 ffab 	bl	8000b28 <__aeabi_dcmpgt>
 8008bd2:	b9c8      	cbnz	r0, 8008c08 <_dtoa_r+0x6f8>
 8008bd4:	4642      	mov	r2, r8
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	4630      	mov	r0, r6
 8008bda:	4639      	mov	r1, r7
 8008bdc:	f7f7 ff7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008be0:	b110      	cbz	r0, 8008be8 <_dtoa_r+0x6d8>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	07d9      	lsls	r1, r3, #31
 8008be6:	d40f      	bmi.n	8008c08 <_dtoa_r+0x6f8>
 8008be8:	4620      	mov	r0, r4
 8008bea:	4659      	mov	r1, fp
 8008bec:	f000 fba0 	bl	8009330 <_Bfree>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	702b      	strb	r3, [r5, #0]
 8008bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bf6:	f10a 0001 	add.w	r0, sl, #1
 8008bfa:	6018      	str	r0, [r3, #0]
 8008bfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f43f acd8 	beq.w	80085b4 <_dtoa_r+0xa4>
 8008c04:	601d      	str	r5, [r3, #0]
 8008c06:	e4d5      	b.n	80085b4 <_dtoa_r+0xa4>
 8008c08:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c0c:	462b      	mov	r3, r5
 8008c0e:	461d      	mov	r5, r3
 8008c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c14:	2a39      	cmp	r2, #57	; 0x39
 8008c16:	d108      	bne.n	8008c2a <_dtoa_r+0x71a>
 8008c18:	9a00      	ldr	r2, [sp, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d1f7      	bne.n	8008c0e <_dtoa_r+0x6fe>
 8008c1e:	9a07      	ldr	r2, [sp, #28]
 8008c20:	9900      	ldr	r1, [sp, #0]
 8008c22:	3201      	adds	r2, #1
 8008c24:	9207      	str	r2, [sp, #28]
 8008c26:	2230      	movs	r2, #48	; 0x30
 8008c28:	700a      	strb	r2, [r1, #0]
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	3201      	adds	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	e78c      	b.n	8008b4c <_dtoa_r+0x63c>
 8008c32:	4b7f      	ldr	r3, [pc, #508]	; (8008e30 <_dtoa_r+0x920>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	f7f7 fce7 	bl	8000608 <__aeabi_dmul>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4606      	mov	r6, r0
 8008c40:	460f      	mov	r7, r1
 8008c42:	f7f7 ff49 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d09b      	beq.n	8008b82 <_dtoa_r+0x672>
 8008c4a:	e7cd      	b.n	8008be8 <_dtoa_r+0x6d8>
 8008c4c:	9a08      	ldr	r2, [sp, #32]
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	f000 80c4 	beq.w	8008ddc <_dtoa_r+0x8cc>
 8008c54:	9a05      	ldr	r2, [sp, #20]
 8008c56:	2a01      	cmp	r2, #1
 8008c58:	f300 80a8 	bgt.w	8008dac <_dtoa_r+0x89c>
 8008c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	f000 80a0 	beq.w	8008da4 <_dtoa_r+0x894>
 8008c64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c68:	9e06      	ldr	r6, [sp, #24]
 8008c6a:	4645      	mov	r5, r8
 8008c6c:	9a04      	ldr	r2, [sp, #16]
 8008c6e:	2101      	movs	r1, #1
 8008c70:	441a      	add	r2, r3
 8008c72:	4620      	mov	r0, r4
 8008c74:	4498      	add	r8, r3
 8008c76:	9204      	str	r2, [sp, #16]
 8008c78:	f000 fc16 	bl	80094a8 <__i2b>
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	dd0b      	ble.n	8008c9a <_dtoa_r+0x78a>
 8008c82:	9b04      	ldr	r3, [sp, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dd08      	ble.n	8008c9a <_dtoa_r+0x78a>
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	9a04      	ldr	r2, [sp, #16]
 8008c8c:	bfa8      	it	ge
 8008c8e:	462b      	movge	r3, r5
 8008c90:	eba8 0803 	sub.w	r8, r8, r3
 8008c94:	1aed      	subs	r5, r5, r3
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	9b06      	ldr	r3, [sp, #24]
 8008c9c:	b1fb      	cbz	r3, 8008cde <_dtoa_r+0x7ce>
 8008c9e:	9b08      	ldr	r3, [sp, #32]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 809f 	beq.w	8008de4 <_dtoa_r+0x8d4>
 8008ca6:	2e00      	cmp	r6, #0
 8008ca8:	dd11      	ble.n	8008cce <_dtoa_r+0x7be>
 8008caa:	4639      	mov	r1, r7
 8008cac:	4632      	mov	r2, r6
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fcb6 	bl	8009620 <__pow5mult>
 8008cb4:	465a      	mov	r2, fp
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4607      	mov	r7, r0
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 fc0a 	bl	80094d4 <__multiply>
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	9007      	str	r0, [sp, #28]
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fb33 	bl	8009330 <_Bfree>
 8008cca:	9b07      	ldr	r3, [sp, #28]
 8008ccc:	469b      	mov	fp, r3
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	1b9a      	subs	r2, r3, r6
 8008cd2:	d004      	beq.n	8008cde <_dtoa_r+0x7ce>
 8008cd4:	4659      	mov	r1, fp
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 fca2 	bl	8009620 <__pow5mult>
 8008cdc:	4683      	mov	fp, r0
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fbe1 	bl	80094a8 <__i2b>
 8008ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	4606      	mov	r6, r0
 8008cec:	dd7c      	ble.n	8008de8 <_dtoa_r+0x8d8>
 8008cee:	461a      	mov	r2, r3
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fc94 	bl	8009620 <__pow5mult>
 8008cf8:	9b05      	ldr	r3, [sp, #20]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	dd76      	ble.n	8008dee <_dtoa_r+0x8de>
 8008d00:	2300      	movs	r3, #0
 8008d02:	9306      	str	r3, [sp, #24]
 8008d04:	6933      	ldr	r3, [r6, #16]
 8008d06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d0a:	6918      	ldr	r0, [r3, #16]
 8008d0c:	f000 fb7c 	bl	8009408 <__hi0bits>
 8008d10:	f1c0 0020 	rsb	r0, r0, #32
 8008d14:	9b04      	ldr	r3, [sp, #16]
 8008d16:	4418      	add	r0, r3
 8008d18:	f010 001f 	ands.w	r0, r0, #31
 8008d1c:	f000 8086 	beq.w	8008e2c <_dtoa_r+0x91c>
 8008d20:	f1c0 0320 	rsb	r3, r0, #32
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	dd7f      	ble.n	8008e28 <_dtoa_r+0x918>
 8008d28:	f1c0 001c 	rsb	r0, r0, #28
 8008d2c:	9b04      	ldr	r3, [sp, #16]
 8008d2e:	4403      	add	r3, r0
 8008d30:	4480      	add	r8, r0
 8008d32:	4405      	add	r5, r0
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	f1b8 0f00 	cmp.w	r8, #0
 8008d3a:	dd05      	ble.n	8008d48 <_dtoa_r+0x838>
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	4642      	mov	r2, r8
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fcc7 	bl	80096d4 <__lshift>
 8008d46:	4683      	mov	fp, r0
 8008d48:	9b04      	ldr	r3, [sp, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	dd05      	ble.n	8008d5a <_dtoa_r+0x84a>
 8008d4e:	4631      	mov	r1, r6
 8008d50:	461a      	mov	r2, r3
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fcbe 	bl	80096d4 <__lshift>
 8008d58:	4606      	mov	r6, r0
 8008d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d069      	beq.n	8008e34 <_dtoa_r+0x924>
 8008d60:	4631      	mov	r1, r6
 8008d62:	4658      	mov	r0, fp
 8008d64:	f000 fd22 	bl	80097ac <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	da63      	bge.n	8008e34 <_dtoa_r+0x924>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4659      	mov	r1, fp
 8008d70:	220a      	movs	r2, #10
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fafe 	bl	8009374 <__multadd>
 8008d78:	9b08      	ldr	r3, [sp, #32]
 8008d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d7e:	4683      	mov	fp, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 818f 	beq.w	80090a4 <_dtoa_r+0xb94>
 8008d86:	4639      	mov	r1, r7
 8008d88:	2300      	movs	r3, #0
 8008d8a:	220a      	movs	r2, #10
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 faf1 	bl	8009374 <__multadd>
 8008d92:	f1b9 0f00 	cmp.w	r9, #0
 8008d96:	4607      	mov	r7, r0
 8008d98:	f300 808e 	bgt.w	8008eb8 <_dtoa_r+0x9a8>
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	dc50      	bgt.n	8008e44 <_dtoa_r+0x934>
 8008da2:	e089      	b.n	8008eb8 <_dtoa_r+0x9a8>
 8008da4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008daa:	e75d      	b.n	8008c68 <_dtoa_r+0x758>
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	1e5e      	subs	r6, r3, #1
 8008db0:	9b06      	ldr	r3, [sp, #24]
 8008db2:	42b3      	cmp	r3, r6
 8008db4:	bfbf      	itttt	lt
 8008db6:	9b06      	ldrlt	r3, [sp, #24]
 8008db8:	9606      	strlt	r6, [sp, #24]
 8008dba:	1af2      	sublt	r2, r6, r3
 8008dbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008dbe:	bfb6      	itet	lt
 8008dc0:	189b      	addlt	r3, r3, r2
 8008dc2:	1b9e      	subge	r6, r3, r6
 8008dc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	bfb8      	it	lt
 8008dca:	2600      	movlt	r6, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfb5      	itete	lt
 8008dd0:	eba8 0503 	sublt.w	r5, r8, r3
 8008dd4:	9b01      	ldrge	r3, [sp, #4]
 8008dd6:	2300      	movlt	r3, #0
 8008dd8:	4645      	movge	r5, r8
 8008dda:	e747      	b.n	8008c6c <_dtoa_r+0x75c>
 8008ddc:	9e06      	ldr	r6, [sp, #24]
 8008dde:	9f08      	ldr	r7, [sp, #32]
 8008de0:	4645      	mov	r5, r8
 8008de2:	e74c      	b.n	8008c7e <_dtoa_r+0x76e>
 8008de4:	9a06      	ldr	r2, [sp, #24]
 8008de6:	e775      	b.n	8008cd4 <_dtoa_r+0x7c4>
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	dc18      	bgt.n	8008e20 <_dtoa_r+0x910>
 8008dee:	9b02      	ldr	r3, [sp, #8]
 8008df0:	b9b3      	cbnz	r3, 8008e20 <_dtoa_r+0x910>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008df8:	b9a3      	cbnz	r3, 8008e24 <_dtoa_r+0x914>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e00:	0d1b      	lsrs	r3, r3, #20
 8008e02:	051b      	lsls	r3, r3, #20
 8008e04:	b12b      	cbz	r3, 8008e12 <_dtoa_r+0x902>
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	f108 0801 	add.w	r8, r8, #1
 8008e10:	2301      	movs	r3, #1
 8008e12:	9306      	str	r3, [sp, #24]
 8008e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f47f af74 	bne.w	8008d04 <_dtoa_r+0x7f4>
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	e779      	b.n	8008d14 <_dtoa_r+0x804>
 8008e20:	2300      	movs	r3, #0
 8008e22:	e7f6      	b.n	8008e12 <_dtoa_r+0x902>
 8008e24:	9b02      	ldr	r3, [sp, #8]
 8008e26:	e7f4      	b.n	8008e12 <_dtoa_r+0x902>
 8008e28:	d085      	beq.n	8008d36 <_dtoa_r+0x826>
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	301c      	adds	r0, #28
 8008e2e:	e77d      	b.n	8008d2c <_dtoa_r+0x81c>
 8008e30:	40240000 	.word	0x40240000
 8008e34:	9b01      	ldr	r3, [sp, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dc38      	bgt.n	8008eac <_dtoa_r+0x99c>
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	dd35      	ble.n	8008eac <_dtoa_r+0x99c>
 8008e40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008e44:	f1b9 0f00 	cmp.w	r9, #0
 8008e48:	d10d      	bne.n	8008e66 <_dtoa_r+0x956>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	2205      	movs	r2, #5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fa8f 	bl	8009374 <__multadd>
 8008e56:	4601      	mov	r1, r0
 8008e58:	4606      	mov	r6, r0
 8008e5a:	4658      	mov	r0, fp
 8008e5c:	f000 fca6 	bl	80097ac <__mcmp>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	f73f adbd 	bgt.w	80089e0 <_dtoa_r+0x4d0>
 8008e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e68:	9d00      	ldr	r5, [sp, #0]
 8008e6a:	ea6f 0a03 	mvn.w	sl, r3
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	4631      	mov	r1, r6
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 fa5b 	bl	8009330 <_Bfree>
 8008e7a:	2f00      	cmp	r7, #0
 8008e7c:	f43f aeb4 	beq.w	8008be8 <_dtoa_r+0x6d8>
 8008e80:	f1b8 0f00 	cmp.w	r8, #0
 8008e84:	d005      	beq.n	8008e92 <_dtoa_r+0x982>
 8008e86:	45b8      	cmp	r8, r7
 8008e88:	d003      	beq.n	8008e92 <_dtoa_r+0x982>
 8008e8a:	4641      	mov	r1, r8
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fa4f 	bl	8009330 <_Bfree>
 8008e92:	4639      	mov	r1, r7
 8008e94:	4620      	mov	r0, r4
 8008e96:	f000 fa4b 	bl	8009330 <_Bfree>
 8008e9a:	e6a5      	b.n	8008be8 <_dtoa_r+0x6d8>
 8008e9c:	2600      	movs	r6, #0
 8008e9e:	4637      	mov	r7, r6
 8008ea0:	e7e1      	b.n	8008e66 <_dtoa_r+0x956>
 8008ea2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008ea4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ea8:	4637      	mov	r7, r6
 8008eaa:	e599      	b.n	80089e0 <_dtoa_r+0x4d0>
 8008eac:	9b08      	ldr	r3, [sp, #32]
 8008eae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80fd 	beq.w	80090b2 <_dtoa_r+0xba2>
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	dd05      	ble.n	8008ec8 <_dtoa_r+0x9b8>
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	462a      	mov	r2, r5
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fc07 	bl	80096d4 <__lshift>
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	9b06      	ldr	r3, [sp, #24]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d05c      	beq.n	8008f88 <_dtoa_r+0xa78>
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f000 f9ed 	bl	80092b0 <_Balloc>
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	b928      	cbnz	r0, 8008ee6 <_dtoa_r+0x9d6>
 8008eda:	4b80      	ldr	r3, [pc, #512]	; (80090dc <_dtoa_r+0xbcc>)
 8008edc:	4602      	mov	r2, r0
 8008ede:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ee2:	f7ff bb2e 	b.w	8008542 <_dtoa_r+0x32>
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	3202      	adds	r2, #2
 8008eea:	0092      	lsls	r2, r2, #2
 8008eec:	f107 010c 	add.w	r1, r7, #12
 8008ef0:	300c      	adds	r0, #12
 8008ef2:	f7fe fc57 	bl	80077a4 <memcpy>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fbea 	bl	80096d4 <__lshift>
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	3301      	adds	r3, #1
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	9b00      	ldr	r3, [sp, #0]
 8008f08:	444b      	add	r3, r9
 8008f0a:	9307      	str	r3, [sp, #28]
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	46b8      	mov	r8, r7
 8008f14:	9306      	str	r3, [sp, #24]
 8008f16:	4607      	mov	r7, r0
 8008f18:	9b01      	ldr	r3, [sp, #4]
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	4658      	mov	r0, fp
 8008f20:	9302      	str	r3, [sp, #8]
 8008f22:	f7ff fa69 	bl	80083f8 <quorem>
 8008f26:	4603      	mov	r3, r0
 8008f28:	3330      	adds	r3, #48	; 0x30
 8008f2a:	9004      	str	r0, [sp, #16]
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	4658      	mov	r0, fp
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	f000 fc3b 	bl	80097ac <__mcmp>
 8008f36:	463a      	mov	r2, r7
 8008f38:	4681      	mov	r9, r0
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fc51 	bl	80097e4 <__mdiff>
 8008f42:	68c2      	ldr	r2, [r0, #12]
 8008f44:	9b08      	ldr	r3, [sp, #32]
 8008f46:	4605      	mov	r5, r0
 8008f48:	bb02      	cbnz	r2, 8008f8c <_dtoa_r+0xa7c>
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4658      	mov	r0, fp
 8008f4e:	f000 fc2d 	bl	80097ac <__mcmp>
 8008f52:	9b08      	ldr	r3, [sp, #32]
 8008f54:	4602      	mov	r2, r0
 8008f56:	4629      	mov	r1, r5
 8008f58:	4620      	mov	r0, r4
 8008f5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008f5e:	f000 f9e7 	bl	8009330 <_Bfree>
 8008f62:	9b05      	ldr	r3, [sp, #20]
 8008f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f66:	9d01      	ldr	r5, [sp, #4]
 8008f68:	ea43 0102 	orr.w	r1, r3, r2
 8008f6c:	9b06      	ldr	r3, [sp, #24]
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	9b08      	ldr	r3, [sp, #32]
 8008f72:	d10d      	bne.n	8008f90 <_dtoa_r+0xa80>
 8008f74:	2b39      	cmp	r3, #57	; 0x39
 8008f76:	d029      	beq.n	8008fcc <_dtoa_r+0xabc>
 8008f78:	f1b9 0f00 	cmp.w	r9, #0
 8008f7c:	dd01      	ble.n	8008f82 <_dtoa_r+0xa72>
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	3331      	adds	r3, #49	; 0x31
 8008f82:	9a02      	ldr	r2, [sp, #8]
 8008f84:	7013      	strb	r3, [r2, #0]
 8008f86:	e774      	b.n	8008e72 <_dtoa_r+0x962>
 8008f88:	4638      	mov	r0, r7
 8008f8a:	e7b9      	b.n	8008f00 <_dtoa_r+0x9f0>
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	e7e2      	b.n	8008f56 <_dtoa_r+0xa46>
 8008f90:	f1b9 0f00 	cmp.w	r9, #0
 8008f94:	db06      	blt.n	8008fa4 <_dtoa_r+0xa94>
 8008f96:	9905      	ldr	r1, [sp, #20]
 8008f98:	ea41 0909 	orr.w	r9, r1, r9
 8008f9c:	9906      	ldr	r1, [sp, #24]
 8008f9e:	ea59 0101 	orrs.w	r1, r9, r1
 8008fa2:	d120      	bne.n	8008fe6 <_dtoa_r+0xad6>
 8008fa4:	2a00      	cmp	r2, #0
 8008fa6:	ddec      	ble.n	8008f82 <_dtoa_r+0xa72>
 8008fa8:	4659      	mov	r1, fp
 8008faa:	2201      	movs	r2, #1
 8008fac:	4620      	mov	r0, r4
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	f000 fb90 	bl	80096d4 <__lshift>
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4683      	mov	fp, r0
 8008fb8:	f000 fbf8 	bl	80097ac <__mcmp>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	9b01      	ldr	r3, [sp, #4]
 8008fc0:	dc02      	bgt.n	8008fc8 <_dtoa_r+0xab8>
 8008fc2:	d1de      	bne.n	8008f82 <_dtoa_r+0xa72>
 8008fc4:	07da      	lsls	r2, r3, #31
 8008fc6:	d5dc      	bpl.n	8008f82 <_dtoa_r+0xa72>
 8008fc8:	2b39      	cmp	r3, #57	; 0x39
 8008fca:	d1d8      	bne.n	8008f7e <_dtoa_r+0xa6e>
 8008fcc:	9a02      	ldr	r2, [sp, #8]
 8008fce:	2339      	movs	r3, #57	; 0x39
 8008fd0:	7013      	strb	r3, [r2, #0]
 8008fd2:	462b      	mov	r3, r5
 8008fd4:	461d      	mov	r5, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008fdc:	2a39      	cmp	r2, #57	; 0x39
 8008fde:	d050      	beq.n	8009082 <_dtoa_r+0xb72>
 8008fe0:	3201      	adds	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]
 8008fe4:	e745      	b.n	8008e72 <_dtoa_r+0x962>
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	dd03      	ble.n	8008ff2 <_dtoa_r+0xae2>
 8008fea:	2b39      	cmp	r3, #57	; 0x39
 8008fec:	d0ee      	beq.n	8008fcc <_dtoa_r+0xabc>
 8008fee:	3301      	adds	r3, #1
 8008ff0:	e7c7      	b.n	8008f82 <_dtoa_r+0xa72>
 8008ff2:	9a01      	ldr	r2, [sp, #4]
 8008ff4:	9907      	ldr	r1, [sp, #28]
 8008ff6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ffa:	428a      	cmp	r2, r1
 8008ffc:	d02a      	beq.n	8009054 <_dtoa_r+0xb44>
 8008ffe:	4659      	mov	r1, fp
 8009000:	2300      	movs	r3, #0
 8009002:	220a      	movs	r2, #10
 8009004:	4620      	mov	r0, r4
 8009006:	f000 f9b5 	bl	8009374 <__multadd>
 800900a:	45b8      	cmp	r8, r7
 800900c:	4683      	mov	fp, r0
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	f04f 020a 	mov.w	r2, #10
 8009016:	4641      	mov	r1, r8
 8009018:	4620      	mov	r0, r4
 800901a:	d107      	bne.n	800902c <_dtoa_r+0xb1c>
 800901c:	f000 f9aa 	bl	8009374 <__multadd>
 8009020:	4680      	mov	r8, r0
 8009022:	4607      	mov	r7, r0
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	3301      	adds	r3, #1
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	e775      	b.n	8008f18 <_dtoa_r+0xa08>
 800902c:	f000 f9a2 	bl	8009374 <__multadd>
 8009030:	4639      	mov	r1, r7
 8009032:	4680      	mov	r8, r0
 8009034:	2300      	movs	r3, #0
 8009036:	220a      	movs	r2, #10
 8009038:	4620      	mov	r0, r4
 800903a:	f000 f99b 	bl	8009374 <__multadd>
 800903e:	4607      	mov	r7, r0
 8009040:	e7f0      	b.n	8009024 <_dtoa_r+0xb14>
 8009042:	f1b9 0f00 	cmp.w	r9, #0
 8009046:	9a00      	ldr	r2, [sp, #0]
 8009048:	bfcc      	ite	gt
 800904a:	464d      	movgt	r5, r9
 800904c:	2501      	movle	r5, #1
 800904e:	4415      	add	r5, r2
 8009050:	f04f 0800 	mov.w	r8, #0
 8009054:	4659      	mov	r1, fp
 8009056:	2201      	movs	r2, #1
 8009058:	4620      	mov	r0, r4
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	f000 fb3a 	bl	80096d4 <__lshift>
 8009060:	4631      	mov	r1, r6
 8009062:	4683      	mov	fp, r0
 8009064:	f000 fba2 	bl	80097ac <__mcmp>
 8009068:	2800      	cmp	r0, #0
 800906a:	dcb2      	bgt.n	8008fd2 <_dtoa_r+0xac2>
 800906c:	d102      	bne.n	8009074 <_dtoa_r+0xb64>
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	07db      	lsls	r3, r3, #31
 8009072:	d4ae      	bmi.n	8008fd2 <_dtoa_r+0xac2>
 8009074:	462b      	mov	r3, r5
 8009076:	461d      	mov	r5, r3
 8009078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800907c:	2a30      	cmp	r2, #48	; 0x30
 800907e:	d0fa      	beq.n	8009076 <_dtoa_r+0xb66>
 8009080:	e6f7      	b.n	8008e72 <_dtoa_r+0x962>
 8009082:	9a00      	ldr	r2, [sp, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d1a5      	bne.n	8008fd4 <_dtoa_r+0xac4>
 8009088:	f10a 0a01 	add.w	sl, sl, #1
 800908c:	2331      	movs	r3, #49	; 0x31
 800908e:	e779      	b.n	8008f84 <_dtoa_r+0xa74>
 8009090:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <_dtoa_r+0xbd0>)
 8009092:	f7ff baaf 	b.w	80085f4 <_dtoa_r+0xe4>
 8009096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009098:	2b00      	cmp	r3, #0
 800909a:	f47f aa86 	bne.w	80085aa <_dtoa_r+0x9a>
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <_dtoa_r+0xbd4>)
 80090a0:	f7ff baa8 	b.w	80085f4 <_dtoa_r+0xe4>
 80090a4:	f1b9 0f00 	cmp.w	r9, #0
 80090a8:	dc03      	bgt.n	80090b2 <_dtoa_r+0xba2>
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	f73f aec9 	bgt.w	8008e44 <_dtoa_r+0x934>
 80090b2:	9d00      	ldr	r5, [sp, #0]
 80090b4:	4631      	mov	r1, r6
 80090b6:	4658      	mov	r0, fp
 80090b8:	f7ff f99e 	bl	80083f8 <quorem>
 80090bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80090c0:	f805 3b01 	strb.w	r3, [r5], #1
 80090c4:	9a00      	ldr	r2, [sp, #0]
 80090c6:	1aaa      	subs	r2, r5, r2
 80090c8:	4591      	cmp	r9, r2
 80090ca:	ddba      	ble.n	8009042 <_dtoa_r+0xb32>
 80090cc:	4659      	mov	r1, fp
 80090ce:	2300      	movs	r3, #0
 80090d0:	220a      	movs	r2, #10
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f94e 	bl	8009374 <__multadd>
 80090d8:	4683      	mov	fp, r0
 80090da:	e7eb      	b.n	80090b4 <_dtoa_r+0xba4>
 80090dc:	0800a7ab 	.word	0x0800a7ab
 80090e0:	0800a704 	.word	0x0800a704
 80090e4:	0800a728 	.word	0x0800a728

080090e8 <__sflush_r>:
 80090e8:	898a      	ldrh	r2, [r1, #12]
 80090ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ee:	4605      	mov	r5, r0
 80090f0:	0710      	lsls	r0, r2, #28
 80090f2:	460c      	mov	r4, r1
 80090f4:	d458      	bmi.n	80091a8 <__sflush_r+0xc0>
 80090f6:	684b      	ldr	r3, [r1, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	dc05      	bgt.n	8009108 <__sflush_r+0x20>
 80090fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dc02      	bgt.n	8009108 <__sflush_r+0x20>
 8009102:	2000      	movs	r0, #0
 8009104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800910a:	2e00      	cmp	r6, #0
 800910c:	d0f9      	beq.n	8009102 <__sflush_r+0x1a>
 800910e:	2300      	movs	r3, #0
 8009110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009114:	682f      	ldr	r7, [r5, #0]
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	d032      	beq.n	8009180 <__sflush_r+0x98>
 800911a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	075a      	lsls	r2, r3, #29
 8009120:	d505      	bpl.n	800912e <__sflush_r+0x46>
 8009122:	6863      	ldr	r3, [r4, #4]
 8009124:	1ac0      	subs	r0, r0, r3
 8009126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009128:	b10b      	cbz	r3, 800912e <__sflush_r+0x46>
 800912a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800912c:	1ac0      	subs	r0, r0, r3
 800912e:	2300      	movs	r3, #0
 8009130:	4602      	mov	r2, r0
 8009132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009134:	6a21      	ldr	r1, [r4, #32]
 8009136:	4628      	mov	r0, r5
 8009138:	47b0      	blx	r6
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	d106      	bne.n	800914e <__sflush_r+0x66>
 8009140:	6829      	ldr	r1, [r5, #0]
 8009142:	291d      	cmp	r1, #29
 8009144:	d82c      	bhi.n	80091a0 <__sflush_r+0xb8>
 8009146:	4a2a      	ldr	r2, [pc, #168]	; (80091f0 <__sflush_r+0x108>)
 8009148:	40ca      	lsrs	r2, r1
 800914a:	07d6      	lsls	r6, r2, #31
 800914c:	d528      	bpl.n	80091a0 <__sflush_r+0xb8>
 800914e:	2200      	movs	r2, #0
 8009150:	6062      	str	r2, [r4, #4]
 8009152:	04d9      	lsls	r1, r3, #19
 8009154:	6922      	ldr	r2, [r4, #16]
 8009156:	6022      	str	r2, [r4, #0]
 8009158:	d504      	bpl.n	8009164 <__sflush_r+0x7c>
 800915a:	1c42      	adds	r2, r0, #1
 800915c:	d101      	bne.n	8009162 <__sflush_r+0x7a>
 800915e:	682b      	ldr	r3, [r5, #0]
 8009160:	b903      	cbnz	r3, 8009164 <__sflush_r+0x7c>
 8009162:	6560      	str	r0, [r4, #84]	; 0x54
 8009164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009166:	602f      	str	r7, [r5, #0]
 8009168:	2900      	cmp	r1, #0
 800916a:	d0ca      	beq.n	8009102 <__sflush_r+0x1a>
 800916c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009170:	4299      	cmp	r1, r3
 8009172:	d002      	beq.n	800917a <__sflush_r+0x92>
 8009174:	4628      	mov	r0, r5
 8009176:	f7fe fb2b 	bl	80077d0 <_free_r>
 800917a:	2000      	movs	r0, #0
 800917c:	6360      	str	r0, [r4, #52]	; 0x34
 800917e:	e7c1      	b.n	8009104 <__sflush_r+0x1c>
 8009180:	6a21      	ldr	r1, [r4, #32]
 8009182:	2301      	movs	r3, #1
 8009184:	4628      	mov	r0, r5
 8009186:	47b0      	blx	r6
 8009188:	1c41      	adds	r1, r0, #1
 800918a:	d1c7      	bne.n	800911c <__sflush_r+0x34>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0c4      	beq.n	800911c <__sflush_r+0x34>
 8009192:	2b1d      	cmp	r3, #29
 8009194:	d001      	beq.n	800919a <__sflush_r+0xb2>
 8009196:	2b16      	cmp	r3, #22
 8009198:	d101      	bne.n	800919e <__sflush_r+0xb6>
 800919a:	602f      	str	r7, [r5, #0]
 800919c:	e7b1      	b.n	8009102 <__sflush_r+0x1a>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	e7ad      	b.n	8009104 <__sflush_r+0x1c>
 80091a8:	690f      	ldr	r7, [r1, #16]
 80091aa:	2f00      	cmp	r7, #0
 80091ac:	d0a9      	beq.n	8009102 <__sflush_r+0x1a>
 80091ae:	0793      	lsls	r3, r2, #30
 80091b0:	680e      	ldr	r6, [r1, #0]
 80091b2:	bf08      	it	eq
 80091b4:	694b      	ldreq	r3, [r1, #20]
 80091b6:	600f      	str	r7, [r1, #0]
 80091b8:	bf18      	it	ne
 80091ba:	2300      	movne	r3, #0
 80091bc:	eba6 0807 	sub.w	r8, r6, r7
 80091c0:	608b      	str	r3, [r1, #8]
 80091c2:	f1b8 0f00 	cmp.w	r8, #0
 80091c6:	dd9c      	ble.n	8009102 <__sflush_r+0x1a>
 80091c8:	6a21      	ldr	r1, [r4, #32]
 80091ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091cc:	4643      	mov	r3, r8
 80091ce:	463a      	mov	r2, r7
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b0      	blx	r6
 80091d4:	2800      	cmp	r0, #0
 80091d6:	dc06      	bgt.n	80091e6 <__sflush_r+0xfe>
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	e78e      	b.n	8009104 <__sflush_r+0x1c>
 80091e6:	4407      	add	r7, r0
 80091e8:	eba8 0800 	sub.w	r8, r8, r0
 80091ec:	e7e9      	b.n	80091c2 <__sflush_r+0xda>
 80091ee:	bf00      	nop
 80091f0:	20400001 	.word	0x20400001

080091f4 <_fflush_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	690b      	ldr	r3, [r1, #16]
 80091f8:	4605      	mov	r5, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	b913      	cbnz	r3, 8009204 <_fflush_r+0x10>
 80091fe:	2500      	movs	r5, #0
 8009200:	4628      	mov	r0, r5
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	b118      	cbz	r0, 800920e <_fflush_r+0x1a>
 8009206:	6983      	ldr	r3, [r0, #24]
 8009208:	b90b      	cbnz	r3, 800920e <_fflush_r+0x1a>
 800920a:	f7fe f9fd 	bl	8007608 <__sinit>
 800920e:	4b14      	ldr	r3, [pc, #80]	; (8009260 <_fflush_r+0x6c>)
 8009210:	429c      	cmp	r4, r3
 8009212:	d11b      	bne.n	800924c <_fflush_r+0x58>
 8009214:	686c      	ldr	r4, [r5, #4]
 8009216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0ef      	beq.n	80091fe <_fflush_r+0xa>
 800921e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009220:	07d0      	lsls	r0, r2, #31
 8009222:	d404      	bmi.n	800922e <_fflush_r+0x3a>
 8009224:	0599      	lsls	r1, r3, #22
 8009226:	d402      	bmi.n	800922e <_fflush_r+0x3a>
 8009228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800922a:	f7fe fab0 	bl	800778e <__retarget_lock_acquire_recursive>
 800922e:	4628      	mov	r0, r5
 8009230:	4621      	mov	r1, r4
 8009232:	f7ff ff59 	bl	80090e8 <__sflush_r>
 8009236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009238:	07da      	lsls	r2, r3, #31
 800923a:	4605      	mov	r5, r0
 800923c:	d4e0      	bmi.n	8009200 <_fflush_r+0xc>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	059b      	lsls	r3, r3, #22
 8009242:	d4dd      	bmi.n	8009200 <_fflush_r+0xc>
 8009244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009246:	f7fe faa3 	bl	8007790 <__retarget_lock_release_recursive>
 800924a:	e7d9      	b.n	8009200 <_fflush_r+0xc>
 800924c:	4b05      	ldr	r3, [pc, #20]	; (8009264 <_fflush_r+0x70>)
 800924e:	429c      	cmp	r4, r3
 8009250:	d101      	bne.n	8009256 <_fflush_r+0x62>
 8009252:	68ac      	ldr	r4, [r5, #8]
 8009254:	e7df      	b.n	8009216 <_fflush_r+0x22>
 8009256:	4b04      	ldr	r3, [pc, #16]	; (8009268 <_fflush_r+0x74>)
 8009258:	429c      	cmp	r4, r3
 800925a:	bf08      	it	eq
 800925c:	68ec      	ldreq	r4, [r5, #12]
 800925e:	e7da      	b.n	8009216 <_fflush_r+0x22>
 8009260:	0800a6b0 	.word	0x0800a6b0
 8009264:	0800a6d0 	.word	0x0800a6d0
 8009268:	0800a690 	.word	0x0800a690

0800926c <_localeconv_r>:
 800926c:	4800      	ldr	r0, [pc, #0]	; (8009270 <_localeconv_r+0x4>)
 800926e:	4770      	bx	lr
 8009270:	20000164 	.word	0x20000164

08009274 <_lseek_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	; (8009294 <_lseek_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f8 fa5c 	bl	8001740 <_lseek>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_lseek_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_lseek_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20002c74 	.word	0x20002c74

08009298 <__malloc_lock>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__malloc_lock+0x8>)
 800929a:	f7fe ba78 	b.w	800778e <__retarget_lock_acquire_recursive>
 800929e:	bf00      	nop
 80092a0:	20002c6c 	.word	0x20002c6c

080092a4 <__malloc_unlock>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__malloc_unlock+0x8>)
 80092a6:	f7fe ba73 	b.w	8007790 <__retarget_lock_release_recursive>
 80092aa:	bf00      	nop
 80092ac:	20002c6c 	.word	0x20002c6c

080092b0 <_Balloc>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092b4:	4604      	mov	r4, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	b976      	cbnz	r6, 80092d8 <_Balloc+0x28>
 80092ba:	2010      	movs	r0, #16
 80092bc:	f7fe fa6a 	bl	8007794 <malloc>
 80092c0:	4602      	mov	r2, r0
 80092c2:	6260      	str	r0, [r4, #36]	; 0x24
 80092c4:	b920      	cbnz	r0, 80092d0 <_Balloc+0x20>
 80092c6:	4b18      	ldr	r3, [pc, #96]	; (8009328 <_Balloc+0x78>)
 80092c8:	4818      	ldr	r0, [pc, #96]	; (800932c <_Balloc+0x7c>)
 80092ca:	2166      	movs	r1, #102	; 0x66
 80092cc:	f000 fcea 	bl	8009ca4 <__assert_func>
 80092d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d4:	6006      	str	r6, [r0, #0]
 80092d6:	60c6      	str	r6, [r0, #12]
 80092d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092da:	68f3      	ldr	r3, [r6, #12]
 80092dc:	b183      	cbz	r3, 8009300 <_Balloc+0x50>
 80092de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092e6:	b9b8      	cbnz	r0, 8009318 <_Balloc+0x68>
 80092e8:	2101      	movs	r1, #1
 80092ea:	fa01 f605 	lsl.w	r6, r1, r5
 80092ee:	1d72      	adds	r2, r6, #5
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fb5a 	bl	80099ac <_calloc_r>
 80092f8:	b160      	cbz	r0, 8009314 <_Balloc+0x64>
 80092fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092fe:	e00e      	b.n	800931e <_Balloc+0x6e>
 8009300:	2221      	movs	r2, #33	; 0x21
 8009302:	2104      	movs	r1, #4
 8009304:	4620      	mov	r0, r4
 8009306:	f000 fb51 	bl	80099ac <_calloc_r>
 800930a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800930c:	60f0      	str	r0, [r6, #12]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e4      	bne.n	80092de <_Balloc+0x2e>
 8009314:	2000      	movs	r0, #0
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	6802      	ldr	r2, [r0, #0]
 800931a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800931e:	2300      	movs	r3, #0
 8009320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009324:	e7f7      	b.n	8009316 <_Balloc+0x66>
 8009326:	bf00      	nop
 8009328:	0800a735 	.word	0x0800a735
 800932c:	0800a7bc 	.word	0x0800a7bc

08009330 <_Bfree>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009334:	4605      	mov	r5, r0
 8009336:	460c      	mov	r4, r1
 8009338:	b976      	cbnz	r6, 8009358 <_Bfree+0x28>
 800933a:	2010      	movs	r0, #16
 800933c:	f7fe fa2a 	bl	8007794 <malloc>
 8009340:	4602      	mov	r2, r0
 8009342:	6268      	str	r0, [r5, #36]	; 0x24
 8009344:	b920      	cbnz	r0, 8009350 <_Bfree+0x20>
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <_Bfree+0x3c>)
 8009348:	4809      	ldr	r0, [pc, #36]	; (8009370 <_Bfree+0x40>)
 800934a:	218a      	movs	r1, #138	; 0x8a
 800934c:	f000 fcaa 	bl	8009ca4 <__assert_func>
 8009350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009354:	6006      	str	r6, [r0, #0]
 8009356:	60c6      	str	r6, [r0, #12]
 8009358:	b13c      	cbz	r4, 800936a <_Bfree+0x3a>
 800935a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800935c:	6862      	ldr	r2, [r4, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009364:	6021      	str	r1, [r4, #0]
 8009366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	0800a735 	.word	0x0800a735
 8009370:	0800a7bc 	.word	0x0800a7bc

08009374 <__multadd>:
 8009374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009378:	690e      	ldr	r6, [r1, #16]
 800937a:	4607      	mov	r7, r0
 800937c:	4698      	mov	r8, r3
 800937e:	460c      	mov	r4, r1
 8009380:	f101 0014 	add.w	r0, r1, #20
 8009384:	2300      	movs	r3, #0
 8009386:	6805      	ldr	r5, [r0, #0]
 8009388:	b2a9      	uxth	r1, r5
 800938a:	fb02 8101 	mla	r1, r2, r1, r8
 800938e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009392:	0c2d      	lsrs	r5, r5, #16
 8009394:	fb02 c505 	mla	r5, r2, r5, ip
 8009398:	b289      	uxth	r1, r1
 800939a:	3301      	adds	r3, #1
 800939c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80093a0:	429e      	cmp	r6, r3
 80093a2:	f840 1b04 	str.w	r1, [r0], #4
 80093a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80093aa:	dcec      	bgt.n	8009386 <__multadd+0x12>
 80093ac:	f1b8 0f00 	cmp.w	r8, #0
 80093b0:	d022      	beq.n	80093f8 <__multadd+0x84>
 80093b2:	68a3      	ldr	r3, [r4, #8]
 80093b4:	42b3      	cmp	r3, r6
 80093b6:	dc19      	bgt.n	80093ec <__multadd+0x78>
 80093b8:	6861      	ldr	r1, [r4, #4]
 80093ba:	4638      	mov	r0, r7
 80093bc:	3101      	adds	r1, #1
 80093be:	f7ff ff77 	bl	80092b0 <_Balloc>
 80093c2:	4605      	mov	r5, r0
 80093c4:	b928      	cbnz	r0, 80093d2 <__multadd+0x5e>
 80093c6:	4602      	mov	r2, r0
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <__multadd+0x8c>)
 80093ca:	480e      	ldr	r0, [pc, #56]	; (8009404 <__multadd+0x90>)
 80093cc:	21b5      	movs	r1, #181	; 0xb5
 80093ce:	f000 fc69 	bl	8009ca4 <__assert_func>
 80093d2:	6922      	ldr	r2, [r4, #16]
 80093d4:	3202      	adds	r2, #2
 80093d6:	f104 010c 	add.w	r1, r4, #12
 80093da:	0092      	lsls	r2, r2, #2
 80093dc:	300c      	adds	r0, #12
 80093de:	f7fe f9e1 	bl	80077a4 <memcpy>
 80093e2:	4621      	mov	r1, r4
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7ff ffa3 	bl	8009330 <_Bfree>
 80093ea:	462c      	mov	r4, r5
 80093ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80093f0:	3601      	adds	r6, #1
 80093f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80093f6:	6126      	str	r6, [r4, #16]
 80093f8:	4620      	mov	r0, r4
 80093fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093fe:	bf00      	nop
 8009400:	0800a7ab 	.word	0x0800a7ab
 8009404:	0800a7bc 	.word	0x0800a7bc

08009408 <__hi0bits>:
 8009408:	0c03      	lsrs	r3, r0, #16
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	b9d3      	cbnz	r3, 8009444 <__hi0bits+0x3c>
 800940e:	0400      	lsls	r0, r0, #16
 8009410:	2310      	movs	r3, #16
 8009412:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009416:	bf04      	itt	eq
 8009418:	0200      	lsleq	r0, r0, #8
 800941a:	3308      	addeq	r3, #8
 800941c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009420:	bf04      	itt	eq
 8009422:	0100      	lsleq	r0, r0, #4
 8009424:	3304      	addeq	r3, #4
 8009426:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800942a:	bf04      	itt	eq
 800942c:	0080      	lsleq	r0, r0, #2
 800942e:	3302      	addeq	r3, #2
 8009430:	2800      	cmp	r0, #0
 8009432:	db05      	blt.n	8009440 <__hi0bits+0x38>
 8009434:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009438:	f103 0301 	add.w	r3, r3, #1
 800943c:	bf08      	it	eq
 800943e:	2320      	moveq	r3, #32
 8009440:	4618      	mov	r0, r3
 8009442:	4770      	bx	lr
 8009444:	2300      	movs	r3, #0
 8009446:	e7e4      	b.n	8009412 <__hi0bits+0xa>

08009448 <__lo0bits>:
 8009448:	6803      	ldr	r3, [r0, #0]
 800944a:	f013 0207 	ands.w	r2, r3, #7
 800944e:	4601      	mov	r1, r0
 8009450:	d00b      	beq.n	800946a <__lo0bits+0x22>
 8009452:	07da      	lsls	r2, r3, #31
 8009454:	d424      	bmi.n	80094a0 <__lo0bits+0x58>
 8009456:	0798      	lsls	r0, r3, #30
 8009458:	bf49      	itett	mi
 800945a:	085b      	lsrmi	r3, r3, #1
 800945c:	089b      	lsrpl	r3, r3, #2
 800945e:	2001      	movmi	r0, #1
 8009460:	600b      	strmi	r3, [r1, #0]
 8009462:	bf5c      	itt	pl
 8009464:	600b      	strpl	r3, [r1, #0]
 8009466:	2002      	movpl	r0, #2
 8009468:	4770      	bx	lr
 800946a:	b298      	uxth	r0, r3
 800946c:	b9b0      	cbnz	r0, 800949c <__lo0bits+0x54>
 800946e:	0c1b      	lsrs	r3, r3, #16
 8009470:	2010      	movs	r0, #16
 8009472:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009476:	bf04      	itt	eq
 8009478:	0a1b      	lsreq	r3, r3, #8
 800947a:	3008      	addeq	r0, #8
 800947c:	071a      	lsls	r2, r3, #28
 800947e:	bf04      	itt	eq
 8009480:	091b      	lsreq	r3, r3, #4
 8009482:	3004      	addeq	r0, #4
 8009484:	079a      	lsls	r2, r3, #30
 8009486:	bf04      	itt	eq
 8009488:	089b      	lsreq	r3, r3, #2
 800948a:	3002      	addeq	r0, #2
 800948c:	07da      	lsls	r2, r3, #31
 800948e:	d403      	bmi.n	8009498 <__lo0bits+0x50>
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	f100 0001 	add.w	r0, r0, #1
 8009496:	d005      	beq.n	80094a4 <__lo0bits+0x5c>
 8009498:	600b      	str	r3, [r1, #0]
 800949a:	4770      	bx	lr
 800949c:	4610      	mov	r0, r2
 800949e:	e7e8      	b.n	8009472 <__lo0bits+0x2a>
 80094a0:	2000      	movs	r0, #0
 80094a2:	4770      	bx	lr
 80094a4:	2020      	movs	r0, #32
 80094a6:	4770      	bx	lr

080094a8 <__i2b>:
 80094a8:	b510      	push	{r4, lr}
 80094aa:	460c      	mov	r4, r1
 80094ac:	2101      	movs	r1, #1
 80094ae:	f7ff feff 	bl	80092b0 <_Balloc>
 80094b2:	4602      	mov	r2, r0
 80094b4:	b928      	cbnz	r0, 80094c2 <__i2b+0x1a>
 80094b6:	4b05      	ldr	r3, [pc, #20]	; (80094cc <__i2b+0x24>)
 80094b8:	4805      	ldr	r0, [pc, #20]	; (80094d0 <__i2b+0x28>)
 80094ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094be:	f000 fbf1 	bl	8009ca4 <__assert_func>
 80094c2:	2301      	movs	r3, #1
 80094c4:	6144      	str	r4, [r0, #20]
 80094c6:	6103      	str	r3, [r0, #16]
 80094c8:	bd10      	pop	{r4, pc}
 80094ca:	bf00      	nop
 80094cc:	0800a7ab 	.word	0x0800a7ab
 80094d0:	0800a7bc 	.word	0x0800a7bc

080094d4 <__multiply>:
 80094d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d8:	4614      	mov	r4, r2
 80094da:	690a      	ldr	r2, [r1, #16]
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	429a      	cmp	r2, r3
 80094e0:	bfb8      	it	lt
 80094e2:	460b      	movlt	r3, r1
 80094e4:	460d      	mov	r5, r1
 80094e6:	bfbc      	itt	lt
 80094e8:	4625      	movlt	r5, r4
 80094ea:	461c      	movlt	r4, r3
 80094ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80094f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80094f4:	68ab      	ldr	r3, [r5, #8]
 80094f6:	6869      	ldr	r1, [r5, #4]
 80094f8:	eb0a 0709 	add.w	r7, sl, r9
 80094fc:	42bb      	cmp	r3, r7
 80094fe:	b085      	sub	sp, #20
 8009500:	bfb8      	it	lt
 8009502:	3101      	addlt	r1, #1
 8009504:	f7ff fed4 	bl	80092b0 <_Balloc>
 8009508:	b930      	cbnz	r0, 8009518 <__multiply+0x44>
 800950a:	4602      	mov	r2, r0
 800950c:	4b42      	ldr	r3, [pc, #264]	; (8009618 <__multiply+0x144>)
 800950e:	4843      	ldr	r0, [pc, #268]	; (800961c <__multiply+0x148>)
 8009510:	f240 115d 	movw	r1, #349	; 0x15d
 8009514:	f000 fbc6 	bl	8009ca4 <__assert_func>
 8009518:	f100 0614 	add.w	r6, r0, #20
 800951c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009520:	4633      	mov	r3, r6
 8009522:	2200      	movs	r2, #0
 8009524:	4543      	cmp	r3, r8
 8009526:	d31e      	bcc.n	8009566 <__multiply+0x92>
 8009528:	f105 0c14 	add.w	ip, r5, #20
 800952c:	f104 0314 	add.w	r3, r4, #20
 8009530:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009534:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009538:	9202      	str	r2, [sp, #8]
 800953a:	ebac 0205 	sub.w	r2, ip, r5
 800953e:	3a15      	subs	r2, #21
 8009540:	f022 0203 	bic.w	r2, r2, #3
 8009544:	3204      	adds	r2, #4
 8009546:	f105 0115 	add.w	r1, r5, #21
 800954a:	458c      	cmp	ip, r1
 800954c:	bf38      	it	cc
 800954e:	2204      	movcc	r2, #4
 8009550:	9201      	str	r2, [sp, #4]
 8009552:	9a02      	ldr	r2, [sp, #8]
 8009554:	9303      	str	r3, [sp, #12]
 8009556:	429a      	cmp	r2, r3
 8009558:	d808      	bhi.n	800956c <__multiply+0x98>
 800955a:	2f00      	cmp	r7, #0
 800955c:	dc55      	bgt.n	800960a <__multiply+0x136>
 800955e:	6107      	str	r7, [r0, #16]
 8009560:	b005      	add	sp, #20
 8009562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009566:	f843 2b04 	str.w	r2, [r3], #4
 800956a:	e7db      	b.n	8009524 <__multiply+0x50>
 800956c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009570:	f1ba 0f00 	cmp.w	sl, #0
 8009574:	d020      	beq.n	80095b8 <__multiply+0xe4>
 8009576:	f105 0e14 	add.w	lr, r5, #20
 800957a:	46b1      	mov	r9, r6
 800957c:	2200      	movs	r2, #0
 800957e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009582:	f8d9 b000 	ldr.w	fp, [r9]
 8009586:	b2a1      	uxth	r1, r4
 8009588:	fa1f fb8b 	uxth.w	fp, fp
 800958c:	fb0a b101 	mla	r1, sl, r1, fp
 8009590:	4411      	add	r1, r2
 8009592:	f8d9 2000 	ldr.w	r2, [r9]
 8009596:	0c24      	lsrs	r4, r4, #16
 8009598:	0c12      	lsrs	r2, r2, #16
 800959a:	fb0a 2404 	mla	r4, sl, r4, r2
 800959e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80095a2:	b289      	uxth	r1, r1
 80095a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095a8:	45f4      	cmp	ip, lr
 80095aa:	f849 1b04 	str.w	r1, [r9], #4
 80095ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80095b2:	d8e4      	bhi.n	800957e <__multiply+0xaa>
 80095b4:	9901      	ldr	r1, [sp, #4]
 80095b6:	5072      	str	r2, [r6, r1]
 80095b8:	9a03      	ldr	r2, [sp, #12]
 80095ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095be:	3304      	adds	r3, #4
 80095c0:	f1b9 0f00 	cmp.w	r9, #0
 80095c4:	d01f      	beq.n	8009606 <__multiply+0x132>
 80095c6:	6834      	ldr	r4, [r6, #0]
 80095c8:	f105 0114 	add.w	r1, r5, #20
 80095cc:	46b6      	mov	lr, r6
 80095ce:	f04f 0a00 	mov.w	sl, #0
 80095d2:	880a      	ldrh	r2, [r1, #0]
 80095d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80095d8:	fb09 b202 	mla	r2, r9, r2, fp
 80095dc:	4492      	add	sl, r2
 80095de:	b2a4      	uxth	r4, r4
 80095e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80095e4:	f84e 4b04 	str.w	r4, [lr], #4
 80095e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80095ec:	f8be 2000 	ldrh.w	r2, [lr]
 80095f0:	0c24      	lsrs	r4, r4, #16
 80095f2:	fb09 2404 	mla	r4, r9, r4, r2
 80095f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80095fa:	458c      	cmp	ip, r1
 80095fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009600:	d8e7      	bhi.n	80095d2 <__multiply+0xfe>
 8009602:	9a01      	ldr	r2, [sp, #4]
 8009604:	50b4      	str	r4, [r6, r2]
 8009606:	3604      	adds	r6, #4
 8009608:	e7a3      	b.n	8009552 <__multiply+0x7e>
 800960a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1a5      	bne.n	800955e <__multiply+0x8a>
 8009612:	3f01      	subs	r7, #1
 8009614:	e7a1      	b.n	800955a <__multiply+0x86>
 8009616:	bf00      	nop
 8009618:	0800a7ab 	.word	0x0800a7ab
 800961c:	0800a7bc 	.word	0x0800a7bc

08009620 <__pow5mult>:
 8009620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009624:	4615      	mov	r5, r2
 8009626:	f012 0203 	ands.w	r2, r2, #3
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	d007      	beq.n	8009640 <__pow5mult+0x20>
 8009630:	4c25      	ldr	r4, [pc, #148]	; (80096c8 <__pow5mult+0xa8>)
 8009632:	3a01      	subs	r2, #1
 8009634:	2300      	movs	r3, #0
 8009636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800963a:	f7ff fe9b 	bl	8009374 <__multadd>
 800963e:	4607      	mov	r7, r0
 8009640:	10ad      	asrs	r5, r5, #2
 8009642:	d03d      	beq.n	80096c0 <__pow5mult+0xa0>
 8009644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009646:	b97c      	cbnz	r4, 8009668 <__pow5mult+0x48>
 8009648:	2010      	movs	r0, #16
 800964a:	f7fe f8a3 	bl	8007794 <malloc>
 800964e:	4602      	mov	r2, r0
 8009650:	6270      	str	r0, [r6, #36]	; 0x24
 8009652:	b928      	cbnz	r0, 8009660 <__pow5mult+0x40>
 8009654:	4b1d      	ldr	r3, [pc, #116]	; (80096cc <__pow5mult+0xac>)
 8009656:	481e      	ldr	r0, [pc, #120]	; (80096d0 <__pow5mult+0xb0>)
 8009658:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800965c:	f000 fb22 	bl	8009ca4 <__assert_func>
 8009660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009664:	6004      	str	r4, [r0, #0]
 8009666:	60c4      	str	r4, [r0, #12]
 8009668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800966c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009670:	b94c      	cbnz	r4, 8009686 <__pow5mult+0x66>
 8009672:	f240 2171 	movw	r1, #625	; 0x271
 8009676:	4630      	mov	r0, r6
 8009678:	f7ff ff16 	bl	80094a8 <__i2b>
 800967c:	2300      	movs	r3, #0
 800967e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009682:	4604      	mov	r4, r0
 8009684:	6003      	str	r3, [r0, #0]
 8009686:	f04f 0900 	mov.w	r9, #0
 800968a:	07eb      	lsls	r3, r5, #31
 800968c:	d50a      	bpl.n	80096a4 <__pow5mult+0x84>
 800968e:	4639      	mov	r1, r7
 8009690:	4622      	mov	r2, r4
 8009692:	4630      	mov	r0, r6
 8009694:	f7ff ff1e 	bl	80094d4 <__multiply>
 8009698:	4639      	mov	r1, r7
 800969a:	4680      	mov	r8, r0
 800969c:	4630      	mov	r0, r6
 800969e:	f7ff fe47 	bl	8009330 <_Bfree>
 80096a2:	4647      	mov	r7, r8
 80096a4:	106d      	asrs	r5, r5, #1
 80096a6:	d00b      	beq.n	80096c0 <__pow5mult+0xa0>
 80096a8:	6820      	ldr	r0, [r4, #0]
 80096aa:	b938      	cbnz	r0, 80096bc <__pow5mult+0x9c>
 80096ac:	4622      	mov	r2, r4
 80096ae:	4621      	mov	r1, r4
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff ff0f 	bl	80094d4 <__multiply>
 80096b6:	6020      	str	r0, [r4, #0]
 80096b8:	f8c0 9000 	str.w	r9, [r0]
 80096bc:	4604      	mov	r4, r0
 80096be:	e7e4      	b.n	800968a <__pow5mult+0x6a>
 80096c0:	4638      	mov	r0, r7
 80096c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c6:	bf00      	nop
 80096c8:	0800a910 	.word	0x0800a910
 80096cc:	0800a735 	.word	0x0800a735
 80096d0:	0800a7bc 	.word	0x0800a7bc

080096d4 <__lshift>:
 80096d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d8:	460c      	mov	r4, r1
 80096da:	6849      	ldr	r1, [r1, #4]
 80096dc:	6923      	ldr	r3, [r4, #16]
 80096de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096e2:	68a3      	ldr	r3, [r4, #8]
 80096e4:	4607      	mov	r7, r0
 80096e6:	4691      	mov	r9, r2
 80096e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096ec:	f108 0601 	add.w	r6, r8, #1
 80096f0:	42b3      	cmp	r3, r6
 80096f2:	db0b      	blt.n	800970c <__lshift+0x38>
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff fddb 	bl	80092b0 <_Balloc>
 80096fa:	4605      	mov	r5, r0
 80096fc:	b948      	cbnz	r0, 8009712 <__lshift+0x3e>
 80096fe:	4602      	mov	r2, r0
 8009700:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <__lshift+0xd0>)
 8009702:	4829      	ldr	r0, [pc, #164]	; (80097a8 <__lshift+0xd4>)
 8009704:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009708:	f000 facc 	bl	8009ca4 <__assert_func>
 800970c:	3101      	adds	r1, #1
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	e7ee      	b.n	80096f0 <__lshift+0x1c>
 8009712:	2300      	movs	r3, #0
 8009714:	f100 0114 	add.w	r1, r0, #20
 8009718:	f100 0210 	add.w	r2, r0, #16
 800971c:	4618      	mov	r0, r3
 800971e:	4553      	cmp	r3, sl
 8009720:	db33      	blt.n	800978a <__lshift+0xb6>
 8009722:	6920      	ldr	r0, [r4, #16]
 8009724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009728:	f104 0314 	add.w	r3, r4, #20
 800972c:	f019 091f 	ands.w	r9, r9, #31
 8009730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009734:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009738:	d02b      	beq.n	8009792 <__lshift+0xbe>
 800973a:	f1c9 0e20 	rsb	lr, r9, #32
 800973e:	468a      	mov	sl, r1
 8009740:	2200      	movs	r2, #0
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	fa00 f009 	lsl.w	r0, r0, r9
 8009748:	4302      	orrs	r2, r0
 800974a:	f84a 2b04 	str.w	r2, [sl], #4
 800974e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009752:	459c      	cmp	ip, r3
 8009754:	fa22 f20e 	lsr.w	r2, r2, lr
 8009758:	d8f3      	bhi.n	8009742 <__lshift+0x6e>
 800975a:	ebac 0304 	sub.w	r3, ip, r4
 800975e:	3b15      	subs	r3, #21
 8009760:	f023 0303 	bic.w	r3, r3, #3
 8009764:	3304      	adds	r3, #4
 8009766:	f104 0015 	add.w	r0, r4, #21
 800976a:	4584      	cmp	ip, r0
 800976c:	bf38      	it	cc
 800976e:	2304      	movcc	r3, #4
 8009770:	50ca      	str	r2, [r1, r3]
 8009772:	b10a      	cbz	r2, 8009778 <__lshift+0xa4>
 8009774:	f108 0602 	add.w	r6, r8, #2
 8009778:	3e01      	subs	r6, #1
 800977a:	4638      	mov	r0, r7
 800977c:	612e      	str	r6, [r5, #16]
 800977e:	4621      	mov	r1, r4
 8009780:	f7ff fdd6 	bl	8009330 <_Bfree>
 8009784:	4628      	mov	r0, r5
 8009786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978a:	f842 0f04 	str.w	r0, [r2, #4]!
 800978e:	3301      	adds	r3, #1
 8009790:	e7c5      	b.n	800971e <__lshift+0x4a>
 8009792:	3904      	subs	r1, #4
 8009794:	f853 2b04 	ldr.w	r2, [r3], #4
 8009798:	f841 2f04 	str.w	r2, [r1, #4]!
 800979c:	459c      	cmp	ip, r3
 800979e:	d8f9      	bhi.n	8009794 <__lshift+0xc0>
 80097a0:	e7ea      	b.n	8009778 <__lshift+0xa4>
 80097a2:	bf00      	nop
 80097a4:	0800a7ab 	.word	0x0800a7ab
 80097a8:	0800a7bc 	.word	0x0800a7bc

080097ac <__mcmp>:
 80097ac:	b530      	push	{r4, r5, lr}
 80097ae:	6902      	ldr	r2, [r0, #16]
 80097b0:	690c      	ldr	r4, [r1, #16]
 80097b2:	1b12      	subs	r2, r2, r4
 80097b4:	d10e      	bne.n	80097d4 <__mcmp+0x28>
 80097b6:	f100 0314 	add.w	r3, r0, #20
 80097ba:	3114      	adds	r1, #20
 80097bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097cc:	42a5      	cmp	r5, r4
 80097ce:	d003      	beq.n	80097d8 <__mcmp+0x2c>
 80097d0:	d305      	bcc.n	80097de <__mcmp+0x32>
 80097d2:	2201      	movs	r2, #1
 80097d4:	4610      	mov	r0, r2
 80097d6:	bd30      	pop	{r4, r5, pc}
 80097d8:	4283      	cmp	r3, r0
 80097da:	d3f3      	bcc.n	80097c4 <__mcmp+0x18>
 80097dc:	e7fa      	b.n	80097d4 <__mcmp+0x28>
 80097de:	f04f 32ff 	mov.w	r2, #4294967295
 80097e2:	e7f7      	b.n	80097d4 <__mcmp+0x28>

080097e4 <__mdiff>:
 80097e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	460c      	mov	r4, r1
 80097ea:	4606      	mov	r6, r0
 80097ec:	4611      	mov	r1, r2
 80097ee:	4620      	mov	r0, r4
 80097f0:	4617      	mov	r7, r2
 80097f2:	f7ff ffdb 	bl	80097ac <__mcmp>
 80097f6:	1e05      	subs	r5, r0, #0
 80097f8:	d110      	bne.n	800981c <__mdiff+0x38>
 80097fa:	4629      	mov	r1, r5
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff fd57 	bl	80092b0 <_Balloc>
 8009802:	b930      	cbnz	r0, 8009812 <__mdiff+0x2e>
 8009804:	4b39      	ldr	r3, [pc, #228]	; (80098ec <__mdiff+0x108>)
 8009806:	4602      	mov	r2, r0
 8009808:	f240 2132 	movw	r1, #562	; 0x232
 800980c:	4838      	ldr	r0, [pc, #224]	; (80098f0 <__mdiff+0x10c>)
 800980e:	f000 fa49 	bl	8009ca4 <__assert_func>
 8009812:	2301      	movs	r3, #1
 8009814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981c:	bfa4      	itt	ge
 800981e:	463b      	movge	r3, r7
 8009820:	4627      	movge	r7, r4
 8009822:	4630      	mov	r0, r6
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	bfa6      	itte	ge
 8009828:	461c      	movge	r4, r3
 800982a:	2500      	movge	r5, #0
 800982c:	2501      	movlt	r5, #1
 800982e:	f7ff fd3f 	bl	80092b0 <_Balloc>
 8009832:	b920      	cbnz	r0, 800983e <__mdiff+0x5a>
 8009834:	4b2d      	ldr	r3, [pc, #180]	; (80098ec <__mdiff+0x108>)
 8009836:	4602      	mov	r2, r0
 8009838:	f44f 7110 	mov.w	r1, #576	; 0x240
 800983c:	e7e6      	b.n	800980c <__mdiff+0x28>
 800983e:	693e      	ldr	r6, [r7, #16]
 8009840:	60c5      	str	r5, [r0, #12]
 8009842:	6925      	ldr	r5, [r4, #16]
 8009844:	f107 0114 	add.w	r1, r7, #20
 8009848:	f104 0914 	add.w	r9, r4, #20
 800984c:	f100 0e14 	add.w	lr, r0, #20
 8009850:	f107 0210 	add.w	r2, r7, #16
 8009854:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009858:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800985c:	46f2      	mov	sl, lr
 800985e:	2700      	movs	r7, #0
 8009860:	f859 3b04 	ldr.w	r3, [r9], #4
 8009864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009868:	fa1f f883 	uxth.w	r8, r3
 800986c:	fa17 f78b 	uxtah	r7, r7, fp
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	eba7 0808 	sub.w	r8, r7, r8
 8009876:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800987a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800987e:	fa1f f888 	uxth.w	r8, r8
 8009882:	141f      	asrs	r7, r3, #16
 8009884:	454d      	cmp	r5, r9
 8009886:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800988a:	f84a 3b04 	str.w	r3, [sl], #4
 800988e:	d8e7      	bhi.n	8009860 <__mdiff+0x7c>
 8009890:	1b2b      	subs	r3, r5, r4
 8009892:	3b15      	subs	r3, #21
 8009894:	f023 0303 	bic.w	r3, r3, #3
 8009898:	3304      	adds	r3, #4
 800989a:	3415      	adds	r4, #21
 800989c:	42a5      	cmp	r5, r4
 800989e:	bf38      	it	cc
 80098a0:	2304      	movcc	r3, #4
 80098a2:	4419      	add	r1, r3
 80098a4:	4473      	add	r3, lr
 80098a6:	469e      	mov	lr, r3
 80098a8:	460d      	mov	r5, r1
 80098aa:	4565      	cmp	r5, ip
 80098ac:	d30e      	bcc.n	80098cc <__mdiff+0xe8>
 80098ae:	f10c 0203 	add.w	r2, ip, #3
 80098b2:	1a52      	subs	r2, r2, r1
 80098b4:	f022 0203 	bic.w	r2, r2, #3
 80098b8:	3903      	subs	r1, #3
 80098ba:	458c      	cmp	ip, r1
 80098bc:	bf38      	it	cc
 80098be:	2200      	movcc	r2, #0
 80098c0:	441a      	add	r2, r3
 80098c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098c6:	b17b      	cbz	r3, 80098e8 <__mdiff+0x104>
 80098c8:	6106      	str	r6, [r0, #16]
 80098ca:	e7a5      	b.n	8009818 <__mdiff+0x34>
 80098cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80098d0:	fa17 f488 	uxtah	r4, r7, r8
 80098d4:	1422      	asrs	r2, r4, #16
 80098d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80098da:	b2a4      	uxth	r4, r4
 80098dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80098e0:	f84e 4b04 	str.w	r4, [lr], #4
 80098e4:	1417      	asrs	r7, r2, #16
 80098e6:	e7e0      	b.n	80098aa <__mdiff+0xc6>
 80098e8:	3e01      	subs	r6, #1
 80098ea:	e7ea      	b.n	80098c2 <__mdiff+0xde>
 80098ec:	0800a7ab 	.word	0x0800a7ab
 80098f0:	0800a7bc 	.word	0x0800a7bc

080098f4 <__d2b>:
 80098f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	4689      	mov	r9, r1
 80098fa:	2101      	movs	r1, #1
 80098fc:	ec57 6b10 	vmov	r6, r7, d0
 8009900:	4690      	mov	r8, r2
 8009902:	f7ff fcd5 	bl	80092b0 <_Balloc>
 8009906:	4604      	mov	r4, r0
 8009908:	b930      	cbnz	r0, 8009918 <__d2b+0x24>
 800990a:	4602      	mov	r2, r0
 800990c:	4b25      	ldr	r3, [pc, #148]	; (80099a4 <__d2b+0xb0>)
 800990e:	4826      	ldr	r0, [pc, #152]	; (80099a8 <__d2b+0xb4>)
 8009910:	f240 310a 	movw	r1, #778	; 0x30a
 8009914:	f000 f9c6 	bl	8009ca4 <__assert_func>
 8009918:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800991c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009920:	bb35      	cbnz	r5, 8009970 <__d2b+0x7c>
 8009922:	2e00      	cmp	r6, #0
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	d028      	beq.n	800997a <__d2b+0x86>
 8009928:	4668      	mov	r0, sp
 800992a:	9600      	str	r6, [sp, #0]
 800992c:	f7ff fd8c 	bl	8009448 <__lo0bits>
 8009930:	9900      	ldr	r1, [sp, #0]
 8009932:	b300      	cbz	r0, 8009976 <__d2b+0x82>
 8009934:	9a01      	ldr	r2, [sp, #4]
 8009936:	f1c0 0320 	rsb	r3, r0, #32
 800993a:	fa02 f303 	lsl.w	r3, r2, r3
 800993e:	430b      	orrs	r3, r1
 8009940:	40c2      	lsrs	r2, r0
 8009942:	6163      	str	r3, [r4, #20]
 8009944:	9201      	str	r2, [sp, #4]
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	61a3      	str	r3, [r4, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	bf14      	ite	ne
 800994e:	2202      	movne	r2, #2
 8009950:	2201      	moveq	r2, #1
 8009952:	6122      	str	r2, [r4, #16]
 8009954:	b1d5      	cbz	r5, 800998c <__d2b+0x98>
 8009956:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800995a:	4405      	add	r5, r0
 800995c:	f8c9 5000 	str.w	r5, [r9]
 8009960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009964:	f8c8 0000 	str.w	r0, [r8]
 8009968:	4620      	mov	r0, r4
 800996a:	b003      	add	sp, #12
 800996c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009974:	e7d5      	b.n	8009922 <__d2b+0x2e>
 8009976:	6161      	str	r1, [r4, #20]
 8009978:	e7e5      	b.n	8009946 <__d2b+0x52>
 800997a:	a801      	add	r0, sp, #4
 800997c:	f7ff fd64 	bl	8009448 <__lo0bits>
 8009980:	9b01      	ldr	r3, [sp, #4]
 8009982:	6163      	str	r3, [r4, #20]
 8009984:	2201      	movs	r2, #1
 8009986:	6122      	str	r2, [r4, #16]
 8009988:	3020      	adds	r0, #32
 800998a:	e7e3      	b.n	8009954 <__d2b+0x60>
 800998c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009994:	f8c9 0000 	str.w	r0, [r9]
 8009998:	6918      	ldr	r0, [r3, #16]
 800999a:	f7ff fd35 	bl	8009408 <__hi0bits>
 800999e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099a2:	e7df      	b.n	8009964 <__d2b+0x70>
 80099a4:	0800a7ab 	.word	0x0800a7ab
 80099a8:	0800a7bc 	.word	0x0800a7bc

080099ac <_calloc_r>:
 80099ac:	b513      	push	{r0, r1, r4, lr}
 80099ae:	434a      	muls	r2, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	9201      	str	r2, [sp, #4]
 80099b4:	f7fd ff5c 	bl	8007870 <_malloc_r>
 80099b8:	4604      	mov	r4, r0
 80099ba:	b118      	cbz	r0, 80099c4 <_calloc_r+0x18>
 80099bc:	9a01      	ldr	r2, [sp, #4]
 80099be:	2100      	movs	r1, #0
 80099c0:	f7fd fefe 	bl	80077c0 <memset>
 80099c4:	4620      	mov	r0, r4
 80099c6:	b002      	add	sp, #8
 80099c8:	bd10      	pop	{r4, pc}

080099ca <__ssputs_r>:
 80099ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ce:	688e      	ldr	r6, [r1, #8]
 80099d0:	429e      	cmp	r6, r3
 80099d2:	4682      	mov	sl, r0
 80099d4:	460c      	mov	r4, r1
 80099d6:	4690      	mov	r8, r2
 80099d8:	461f      	mov	r7, r3
 80099da:	d838      	bhi.n	8009a4e <__ssputs_r+0x84>
 80099dc:	898a      	ldrh	r2, [r1, #12]
 80099de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099e2:	d032      	beq.n	8009a4a <__ssputs_r+0x80>
 80099e4:	6825      	ldr	r5, [r4, #0]
 80099e6:	6909      	ldr	r1, [r1, #16]
 80099e8:	eba5 0901 	sub.w	r9, r5, r1
 80099ec:	6965      	ldr	r5, [r4, #20]
 80099ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099f6:	3301      	adds	r3, #1
 80099f8:	444b      	add	r3, r9
 80099fa:	106d      	asrs	r5, r5, #1
 80099fc:	429d      	cmp	r5, r3
 80099fe:	bf38      	it	cc
 8009a00:	461d      	movcc	r5, r3
 8009a02:	0553      	lsls	r3, r2, #21
 8009a04:	d531      	bpl.n	8009a6a <__ssputs_r+0xa0>
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7fd ff32 	bl	8007870 <_malloc_r>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	b950      	cbnz	r0, 8009a26 <__ssputs_r+0x5c>
 8009a10:	230c      	movs	r3, #12
 8009a12:	f8ca 3000 	str.w	r3, [sl]
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a26:	6921      	ldr	r1, [r4, #16]
 8009a28:	464a      	mov	r2, r9
 8009a2a:	f7fd febb 	bl	80077a4 <memcpy>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	6126      	str	r6, [r4, #16]
 8009a3c:	6165      	str	r5, [r4, #20]
 8009a3e:	444e      	add	r6, r9
 8009a40:	eba5 0509 	sub.w	r5, r5, r9
 8009a44:	6026      	str	r6, [r4, #0]
 8009a46:	60a5      	str	r5, [r4, #8]
 8009a48:	463e      	mov	r6, r7
 8009a4a:	42be      	cmp	r6, r7
 8009a4c:	d900      	bls.n	8009a50 <__ssputs_r+0x86>
 8009a4e:	463e      	mov	r6, r7
 8009a50:	4632      	mov	r2, r6
 8009a52:	6820      	ldr	r0, [r4, #0]
 8009a54:	4641      	mov	r1, r8
 8009a56:	f000 f967 	bl	8009d28 <memmove>
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	6822      	ldr	r2, [r4, #0]
 8009a5e:	1b9b      	subs	r3, r3, r6
 8009a60:	4432      	add	r2, r6
 8009a62:	60a3      	str	r3, [r4, #8]
 8009a64:	6022      	str	r2, [r4, #0]
 8009a66:	2000      	movs	r0, #0
 8009a68:	e7db      	b.n	8009a22 <__ssputs_r+0x58>
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	f000 f976 	bl	8009d5c <_realloc_r>
 8009a70:	4606      	mov	r6, r0
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d1e1      	bne.n	8009a3a <__ssputs_r+0x70>
 8009a76:	6921      	ldr	r1, [r4, #16]
 8009a78:	4650      	mov	r0, sl
 8009a7a:	f7fd fea9 	bl	80077d0 <_free_r>
 8009a7e:	e7c7      	b.n	8009a10 <__ssputs_r+0x46>

08009a80 <_svfiprintf_r>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4698      	mov	r8, r3
 8009a86:	898b      	ldrh	r3, [r1, #12]
 8009a88:	061b      	lsls	r3, r3, #24
 8009a8a:	b09d      	sub	sp, #116	; 0x74
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	460d      	mov	r5, r1
 8009a90:	4614      	mov	r4, r2
 8009a92:	d50e      	bpl.n	8009ab2 <_svfiprintf_r+0x32>
 8009a94:	690b      	ldr	r3, [r1, #16]
 8009a96:	b963      	cbnz	r3, 8009ab2 <_svfiprintf_r+0x32>
 8009a98:	2140      	movs	r1, #64	; 0x40
 8009a9a:	f7fd fee9 	bl	8007870 <_malloc_r>
 8009a9e:	6028      	str	r0, [r5, #0]
 8009aa0:	6128      	str	r0, [r5, #16]
 8009aa2:	b920      	cbnz	r0, 8009aae <_svfiprintf_r+0x2e>
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	e0d1      	b.n	8009c52 <_svfiprintf_r+0x1d2>
 8009aae:	2340      	movs	r3, #64	; 0x40
 8009ab0:	616b      	str	r3, [r5, #20]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab6:	2320      	movs	r3, #32
 8009ab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009abc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac0:	2330      	movs	r3, #48	; 0x30
 8009ac2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c6c <_svfiprintf_r+0x1ec>
 8009ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aca:	f04f 0901 	mov.w	r9, #1
 8009ace:	4623      	mov	r3, r4
 8009ad0:	469a      	mov	sl, r3
 8009ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad6:	b10a      	cbz	r2, 8009adc <_svfiprintf_r+0x5c>
 8009ad8:	2a25      	cmp	r2, #37	; 0x25
 8009ada:	d1f9      	bne.n	8009ad0 <_svfiprintf_r+0x50>
 8009adc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae0:	d00b      	beq.n	8009afa <_svfiprintf_r+0x7a>
 8009ae2:	465b      	mov	r3, fp
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7ff ff6e 	bl	80099ca <__ssputs_r>
 8009aee:	3001      	adds	r0, #1
 8009af0:	f000 80aa 	beq.w	8009c48 <_svfiprintf_r+0x1c8>
 8009af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af6:	445a      	add	r2, fp
 8009af8:	9209      	str	r2, [sp, #36]	; 0x24
 8009afa:	f89a 3000 	ldrb.w	r3, [sl]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 80a2 	beq.w	8009c48 <_svfiprintf_r+0x1c8>
 8009b04:	2300      	movs	r3, #0
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b0e:	f10a 0a01 	add.w	sl, sl, #1
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	9307      	str	r3, [sp, #28]
 8009b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b1c:	4654      	mov	r4, sl
 8009b1e:	2205      	movs	r2, #5
 8009b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b24:	4851      	ldr	r0, [pc, #324]	; (8009c6c <_svfiprintf_r+0x1ec>)
 8009b26:	f7f6 fb63 	bl	80001f0 <memchr>
 8009b2a:	9a04      	ldr	r2, [sp, #16]
 8009b2c:	b9d8      	cbnz	r0, 8009b66 <_svfiprintf_r+0xe6>
 8009b2e:	06d0      	lsls	r0, r2, #27
 8009b30:	bf44      	itt	mi
 8009b32:	2320      	movmi	r3, #32
 8009b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b38:	0711      	lsls	r1, r2, #28
 8009b3a:	bf44      	itt	mi
 8009b3c:	232b      	movmi	r3, #43	; 0x2b
 8009b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b42:	f89a 3000 	ldrb.w	r3, [sl]
 8009b46:	2b2a      	cmp	r3, #42	; 0x2a
 8009b48:	d015      	beq.n	8009b76 <_svfiprintf_r+0xf6>
 8009b4a:	9a07      	ldr	r2, [sp, #28]
 8009b4c:	4654      	mov	r4, sl
 8009b4e:	2000      	movs	r0, #0
 8009b50:	f04f 0c0a 	mov.w	ip, #10
 8009b54:	4621      	mov	r1, r4
 8009b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b5a:	3b30      	subs	r3, #48	; 0x30
 8009b5c:	2b09      	cmp	r3, #9
 8009b5e:	d94e      	bls.n	8009bfe <_svfiprintf_r+0x17e>
 8009b60:	b1b0      	cbz	r0, 8009b90 <_svfiprintf_r+0x110>
 8009b62:	9207      	str	r2, [sp, #28]
 8009b64:	e014      	b.n	8009b90 <_svfiprintf_r+0x110>
 8009b66:	eba0 0308 	sub.w	r3, r0, r8
 8009b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	46a2      	mov	sl, r4
 8009b74:	e7d2      	b.n	8009b1c <_svfiprintf_r+0x9c>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	1d19      	adds	r1, r3, #4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	9103      	str	r1, [sp, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bfbb      	ittet	lt
 8009b82:	425b      	neglt	r3, r3
 8009b84:	f042 0202 	orrlt.w	r2, r2, #2
 8009b88:	9307      	strge	r3, [sp, #28]
 8009b8a:	9307      	strlt	r3, [sp, #28]
 8009b8c:	bfb8      	it	lt
 8009b8e:	9204      	strlt	r2, [sp, #16]
 8009b90:	7823      	ldrb	r3, [r4, #0]
 8009b92:	2b2e      	cmp	r3, #46	; 0x2e
 8009b94:	d10c      	bne.n	8009bb0 <_svfiprintf_r+0x130>
 8009b96:	7863      	ldrb	r3, [r4, #1]
 8009b98:	2b2a      	cmp	r3, #42	; 0x2a
 8009b9a:	d135      	bne.n	8009c08 <_svfiprintf_r+0x188>
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	1d1a      	adds	r2, r3, #4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	9203      	str	r2, [sp, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bfb8      	it	lt
 8009ba8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bac:	3402      	adds	r4, #2
 8009bae:	9305      	str	r3, [sp, #20]
 8009bb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c7c <_svfiprintf_r+0x1fc>
 8009bb4:	7821      	ldrb	r1, [r4, #0]
 8009bb6:	2203      	movs	r2, #3
 8009bb8:	4650      	mov	r0, sl
 8009bba:	f7f6 fb19 	bl	80001f0 <memchr>
 8009bbe:	b140      	cbz	r0, 8009bd2 <_svfiprintf_r+0x152>
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	eba0 000a 	sub.w	r0, r0, sl
 8009bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	4303      	orrs	r3, r0
 8009bce:	3401      	adds	r4, #1
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd6:	4826      	ldr	r0, [pc, #152]	; (8009c70 <_svfiprintf_r+0x1f0>)
 8009bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bdc:	2206      	movs	r2, #6
 8009bde:	f7f6 fb07 	bl	80001f0 <memchr>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d038      	beq.n	8009c58 <_svfiprintf_r+0x1d8>
 8009be6:	4b23      	ldr	r3, [pc, #140]	; (8009c74 <_svfiprintf_r+0x1f4>)
 8009be8:	bb1b      	cbnz	r3, 8009c32 <_svfiprintf_r+0x1b2>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	3307      	adds	r3, #7
 8009bee:	f023 0307 	bic.w	r3, r3, #7
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf8:	4433      	add	r3, r6
 8009bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfc:	e767      	b.n	8009ace <_svfiprintf_r+0x4e>
 8009bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c02:	460c      	mov	r4, r1
 8009c04:	2001      	movs	r0, #1
 8009c06:	e7a5      	b.n	8009b54 <_svfiprintf_r+0xd4>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	3401      	adds	r4, #1
 8009c0c:	9305      	str	r3, [sp, #20]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f04f 0c0a 	mov.w	ip, #10
 8009c14:	4620      	mov	r0, r4
 8009c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1a:	3a30      	subs	r2, #48	; 0x30
 8009c1c:	2a09      	cmp	r2, #9
 8009c1e:	d903      	bls.n	8009c28 <_svfiprintf_r+0x1a8>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0c5      	beq.n	8009bb0 <_svfiprintf_r+0x130>
 8009c24:	9105      	str	r1, [sp, #20]
 8009c26:	e7c3      	b.n	8009bb0 <_svfiprintf_r+0x130>
 8009c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e7f0      	b.n	8009c14 <_svfiprintf_r+0x194>
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	462a      	mov	r2, r5
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <_svfiprintf_r+0x1f8>)
 8009c3a:	a904      	add	r1, sp, #16
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7fd ff11 	bl	8007a64 <_printf_float>
 8009c42:	1c42      	adds	r2, r0, #1
 8009c44:	4606      	mov	r6, r0
 8009c46:	d1d6      	bne.n	8009bf6 <_svfiprintf_r+0x176>
 8009c48:	89ab      	ldrh	r3, [r5, #12]
 8009c4a:	065b      	lsls	r3, r3, #25
 8009c4c:	f53f af2c 	bmi.w	8009aa8 <_svfiprintf_r+0x28>
 8009c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c52:	b01d      	add	sp, #116	; 0x74
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	ab03      	add	r3, sp, #12
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <_svfiprintf_r+0x1f8>)
 8009c60:	a904      	add	r1, sp, #16
 8009c62:	4638      	mov	r0, r7
 8009c64:	f7fe f9a2 	bl	8007fac <_printf_i>
 8009c68:	e7eb      	b.n	8009c42 <_svfiprintf_r+0x1c2>
 8009c6a:	bf00      	nop
 8009c6c:	0800a91c 	.word	0x0800a91c
 8009c70:	0800a926 	.word	0x0800a926
 8009c74:	08007a65 	.word	0x08007a65
 8009c78:	080099cb 	.word	0x080099cb
 8009c7c:	0800a922 	.word	0x0800a922

08009c80 <_read_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	; (8009ca0 <_read_r+0x20>)
 8009c84:	4604      	mov	r4, r0
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f7f7 fcf6 	bl	8001680 <_read>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_read_r+0x1e>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_read_r+0x1e>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20002c74 	.word	0x20002c74

08009ca4 <__assert_func>:
 8009ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ca6:	4614      	mov	r4, r2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <__assert_func+0x2c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4605      	mov	r5, r0
 8009cb0:	68d8      	ldr	r0, [r3, #12]
 8009cb2:	b14c      	cbz	r4, 8009cc8 <__assert_func+0x24>
 8009cb4:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <__assert_func+0x30>)
 8009cb6:	9100      	str	r1, [sp, #0]
 8009cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cbc:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <__assert_func+0x34>)
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f000 f80e 	bl	8009ce0 <fiprintf>
 8009cc4:	f000 fa98 	bl	800a1f8 <abort>
 8009cc8:	4b04      	ldr	r3, [pc, #16]	; (8009cdc <__assert_func+0x38>)
 8009cca:	461c      	mov	r4, r3
 8009ccc:	e7f3      	b.n	8009cb6 <__assert_func+0x12>
 8009cce:	bf00      	nop
 8009cd0:	20000010 	.word	0x20000010
 8009cd4:	0800a92d 	.word	0x0800a92d
 8009cd8:	0800a93a 	.word	0x0800a93a
 8009cdc:	0800a968 	.word	0x0800a968

08009ce0 <fiprintf>:
 8009ce0:	b40e      	push	{r1, r2, r3}
 8009ce2:	b503      	push	{r0, r1, lr}
 8009ce4:	4601      	mov	r1, r0
 8009ce6:	ab03      	add	r3, sp, #12
 8009ce8:	4805      	ldr	r0, [pc, #20]	; (8009d00 <fiprintf+0x20>)
 8009cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cee:	6800      	ldr	r0, [r0, #0]
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	f000 f883 	bl	8009dfc <_vfiprintf_r>
 8009cf6:	b002      	add	sp, #8
 8009cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cfc:	b003      	add	sp, #12
 8009cfe:	4770      	bx	lr
 8009d00:	20000010 	.word	0x20000010

08009d04 <__ascii_mbtowc>:
 8009d04:	b082      	sub	sp, #8
 8009d06:	b901      	cbnz	r1, 8009d0a <__ascii_mbtowc+0x6>
 8009d08:	a901      	add	r1, sp, #4
 8009d0a:	b142      	cbz	r2, 8009d1e <__ascii_mbtowc+0x1a>
 8009d0c:	b14b      	cbz	r3, 8009d22 <__ascii_mbtowc+0x1e>
 8009d0e:	7813      	ldrb	r3, [r2, #0]
 8009d10:	600b      	str	r3, [r1, #0]
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	1e10      	subs	r0, r2, #0
 8009d16:	bf18      	it	ne
 8009d18:	2001      	movne	r0, #1
 8009d1a:	b002      	add	sp, #8
 8009d1c:	4770      	bx	lr
 8009d1e:	4610      	mov	r0, r2
 8009d20:	e7fb      	b.n	8009d1a <__ascii_mbtowc+0x16>
 8009d22:	f06f 0001 	mvn.w	r0, #1
 8009d26:	e7f8      	b.n	8009d1a <__ascii_mbtowc+0x16>

08009d28 <memmove>:
 8009d28:	4288      	cmp	r0, r1
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	eb01 0402 	add.w	r4, r1, r2
 8009d30:	d902      	bls.n	8009d38 <memmove+0x10>
 8009d32:	4284      	cmp	r4, r0
 8009d34:	4623      	mov	r3, r4
 8009d36:	d807      	bhi.n	8009d48 <memmove+0x20>
 8009d38:	1e43      	subs	r3, r0, #1
 8009d3a:	42a1      	cmp	r1, r4
 8009d3c:	d008      	beq.n	8009d50 <memmove+0x28>
 8009d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d46:	e7f8      	b.n	8009d3a <memmove+0x12>
 8009d48:	4402      	add	r2, r0
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	428a      	cmp	r2, r1
 8009d4e:	d100      	bne.n	8009d52 <memmove+0x2a>
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d5a:	e7f7      	b.n	8009d4c <memmove+0x24>

08009d5c <_realloc_r>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	4607      	mov	r7, r0
 8009d60:	4614      	mov	r4, r2
 8009d62:	460e      	mov	r6, r1
 8009d64:	b921      	cbnz	r1, 8009d70 <_realloc_r+0x14>
 8009d66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	f7fd bd80 	b.w	8007870 <_malloc_r>
 8009d70:	b922      	cbnz	r2, 8009d7c <_realloc_r+0x20>
 8009d72:	f7fd fd2d 	bl	80077d0 <_free_r>
 8009d76:	4625      	mov	r5, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7c:	f000 faa8 	bl	800a2d0 <_malloc_usable_size_r>
 8009d80:	42a0      	cmp	r0, r4
 8009d82:	d20f      	bcs.n	8009da4 <_realloc_r+0x48>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4638      	mov	r0, r7
 8009d88:	f7fd fd72 	bl	8007870 <_malloc_r>
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d0f2      	beq.n	8009d78 <_realloc_r+0x1c>
 8009d92:	4631      	mov	r1, r6
 8009d94:	4622      	mov	r2, r4
 8009d96:	f7fd fd05 	bl	80077a4 <memcpy>
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f7fd fd17 	bl	80077d0 <_free_r>
 8009da2:	e7e9      	b.n	8009d78 <_realloc_r+0x1c>
 8009da4:	4635      	mov	r5, r6
 8009da6:	e7e7      	b.n	8009d78 <_realloc_r+0x1c>

08009da8 <__sfputc_r>:
 8009da8:	6893      	ldr	r3, [r2, #8]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	b410      	push	{r4}
 8009db0:	6093      	str	r3, [r2, #8]
 8009db2:	da08      	bge.n	8009dc6 <__sfputc_r+0x1e>
 8009db4:	6994      	ldr	r4, [r2, #24]
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	db01      	blt.n	8009dbe <__sfputc_r+0x16>
 8009dba:	290a      	cmp	r1, #10
 8009dbc:	d103      	bne.n	8009dc6 <__sfputc_r+0x1e>
 8009dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dc2:	f000 b94b 	b.w	800a05c <__swbuf_r>
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	1c58      	adds	r0, r3, #1
 8009dca:	6010      	str	r0, [r2, #0]
 8009dcc:	7019      	strb	r1, [r3, #0]
 8009dce:	4608      	mov	r0, r1
 8009dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <__sfputs_r>:
 8009dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd8:	4606      	mov	r6, r0
 8009dda:	460f      	mov	r7, r1
 8009ddc:	4614      	mov	r4, r2
 8009dde:	18d5      	adds	r5, r2, r3
 8009de0:	42ac      	cmp	r4, r5
 8009de2:	d101      	bne.n	8009de8 <__sfputs_r+0x12>
 8009de4:	2000      	movs	r0, #0
 8009de6:	e007      	b.n	8009df8 <__sfputs_r+0x22>
 8009de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dec:	463a      	mov	r2, r7
 8009dee:	4630      	mov	r0, r6
 8009df0:	f7ff ffda 	bl	8009da8 <__sfputc_r>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d1f3      	bne.n	8009de0 <__sfputs_r+0xa>
 8009df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dfc <_vfiprintf_r>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	460d      	mov	r5, r1
 8009e02:	b09d      	sub	sp, #116	; 0x74
 8009e04:	4614      	mov	r4, r2
 8009e06:	4698      	mov	r8, r3
 8009e08:	4606      	mov	r6, r0
 8009e0a:	b118      	cbz	r0, 8009e14 <_vfiprintf_r+0x18>
 8009e0c:	6983      	ldr	r3, [r0, #24]
 8009e0e:	b90b      	cbnz	r3, 8009e14 <_vfiprintf_r+0x18>
 8009e10:	f7fd fbfa 	bl	8007608 <__sinit>
 8009e14:	4b89      	ldr	r3, [pc, #548]	; (800a03c <_vfiprintf_r+0x240>)
 8009e16:	429d      	cmp	r5, r3
 8009e18:	d11b      	bne.n	8009e52 <_vfiprintf_r+0x56>
 8009e1a:	6875      	ldr	r5, [r6, #4]
 8009e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e1e:	07d9      	lsls	r1, r3, #31
 8009e20:	d405      	bmi.n	8009e2e <_vfiprintf_r+0x32>
 8009e22:	89ab      	ldrh	r3, [r5, #12]
 8009e24:	059a      	lsls	r2, r3, #22
 8009e26:	d402      	bmi.n	8009e2e <_vfiprintf_r+0x32>
 8009e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e2a:	f7fd fcb0 	bl	800778e <__retarget_lock_acquire_recursive>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	071b      	lsls	r3, r3, #28
 8009e32:	d501      	bpl.n	8009e38 <_vfiprintf_r+0x3c>
 8009e34:	692b      	ldr	r3, [r5, #16]
 8009e36:	b9eb      	cbnz	r3, 8009e74 <_vfiprintf_r+0x78>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f000 f96e 	bl	800a11c <__swsetup_r>
 8009e40:	b1c0      	cbz	r0, 8009e74 <_vfiprintf_r+0x78>
 8009e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e44:	07dc      	lsls	r4, r3, #31
 8009e46:	d50e      	bpl.n	8009e66 <_vfiprintf_r+0x6a>
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4c:	b01d      	add	sp, #116	; 0x74
 8009e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e52:	4b7b      	ldr	r3, [pc, #492]	; (800a040 <_vfiprintf_r+0x244>)
 8009e54:	429d      	cmp	r5, r3
 8009e56:	d101      	bne.n	8009e5c <_vfiprintf_r+0x60>
 8009e58:	68b5      	ldr	r5, [r6, #8]
 8009e5a:	e7df      	b.n	8009e1c <_vfiprintf_r+0x20>
 8009e5c:	4b79      	ldr	r3, [pc, #484]	; (800a044 <_vfiprintf_r+0x248>)
 8009e5e:	429d      	cmp	r5, r3
 8009e60:	bf08      	it	eq
 8009e62:	68f5      	ldreq	r5, [r6, #12]
 8009e64:	e7da      	b.n	8009e1c <_vfiprintf_r+0x20>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	0598      	lsls	r0, r3, #22
 8009e6a:	d4ed      	bmi.n	8009e48 <_vfiprintf_r+0x4c>
 8009e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e6e:	f7fd fc8f 	bl	8007790 <__retarget_lock_release_recursive>
 8009e72:	e7e9      	b.n	8009e48 <_vfiprintf_r+0x4c>
 8009e74:	2300      	movs	r3, #0
 8009e76:	9309      	str	r3, [sp, #36]	; 0x24
 8009e78:	2320      	movs	r3, #32
 8009e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e82:	2330      	movs	r3, #48	; 0x30
 8009e84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a048 <_vfiprintf_r+0x24c>
 8009e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e8c:	f04f 0901 	mov.w	r9, #1
 8009e90:	4623      	mov	r3, r4
 8009e92:	469a      	mov	sl, r3
 8009e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e98:	b10a      	cbz	r2, 8009e9e <_vfiprintf_r+0xa2>
 8009e9a:	2a25      	cmp	r2, #37	; 0x25
 8009e9c:	d1f9      	bne.n	8009e92 <_vfiprintf_r+0x96>
 8009e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8009ea2:	d00b      	beq.n	8009ebc <_vfiprintf_r+0xc0>
 8009ea4:	465b      	mov	r3, fp
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff ff93 	bl	8009dd6 <__sfputs_r>
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	f000 80aa 	beq.w	800a00a <_vfiprintf_r+0x20e>
 8009eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb8:	445a      	add	r2, fp
 8009eba:	9209      	str	r2, [sp, #36]	; 0x24
 8009ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 80a2 	beq.w	800a00a <_vfiprintf_r+0x20e>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed0:	f10a 0a01 	add.w	sl, sl, #1
 8009ed4:	9304      	str	r3, [sp, #16]
 8009ed6:	9307      	str	r3, [sp, #28]
 8009ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009edc:	931a      	str	r3, [sp, #104]	; 0x68
 8009ede:	4654      	mov	r4, sl
 8009ee0:	2205      	movs	r2, #5
 8009ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee6:	4858      	ldr	r0, [pc, #352]	; (800a048 <_vfiprintf_r+0x24c>)
 8009ee8:	f7f6 f982 	bl	80001f0 <memchr>
 8009eec:	9a04      	ldr	r2, [sp, #16]
 8009eee:	b9d8      	cbnz	r0, 8009f28 <_vfiprintf_r+0x12c>
 8009ef0:	06d1      	lsls	r1, r2, #27
 8009ef2:	bf44      	itt	mi
 8009ef4:	2320      	movmi	r3, #32
 8009ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009efa:	0713      	lsls	r3, r2, #28
 8009efc:	bf44      	itt	mi
 8009efe:	232b      	movmi	r3, #43	; 0x2b
 8009f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f04:	f89a 3000 	ldrb.w	r3, [sl]
 8009f08:	2b2a      	cmp	r3, #42	; 0x2a
 8009f0a:	d015      	beq.n	8009f38 <_vfiprintf_r+0x13c>
 8009f0c:	9a07      	ldr	r2, [sp, #28]
 8009f0e:	4654      	mov	r4, sl
 8009f10:	2000      	movs	r0, #0
 8009f12:	f04f 0c0a 	mov.w	ip, #10
 8009f16:	4621      	mov	r1, r4
 8009f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f1c:	3b30      	subs	r3, #48	; 0x30
 8009f1e:	2b09      	cmp	r3, #9
 8009f20:	d94e      	bls.n	8009fc0 <_vfiprintf_r+0x1c4>
 8009f22:	b1b0      	cbz	r0, 8009f52 <_vfiprintf_r+0x156>
 8009f24:	9207      	str	r2, [sp, #28]
 8009f26:	e014      	b.n	8009f52 <_vfiprintf_r+0x156>
 8009f28:	eba0 0308 	sub.w	r3, r0, r8
 8009f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	46a2      	mov	sl, r4
 8009f36:	e7d2      	b.n	8009ede <_vfiprintf_r+0xe2>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	1d19      	adds	r1, r3, #4
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	9103      	str	r1, [sp, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bfbb      	ittet	lt
 8009f44:	425b      	neglt	r3, r3
 8009f46:	f042 0202 	orrlt.w	r2, r2, #2
 8009f4a:	9307      	strge	r3, [sp, #28]
 8009f4c:	9307      	strlt	r3, [sp, #28]
 8009f4e:	bfb8      	it	lt
 8009f50:	9204      	strlt	r2, [sp, #16]
 8009f52:	7823      	ldrb	r3, [r4, #0]
 8009f54:	2b2e      	cmp	r3, #46	; 0x2e
 8009f56:	d10c      	bne.n	8009f72 <_vfiprintf_r+0x176>
 8009f58:	7863      	ldrb	r3, [r4, #1]
 8009f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f5c:	d135      	bne.n	8009fca <_vfiprintf_r+0x1ce>
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	1d1a      	adds	r2, r3, #4
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	9203      	str	r2, [sp, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bfb8      	it	lt
 8009f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f6e:	3402      	adds	r4, #2
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a058 <_vfiprintf_r+0x25c>
 8009f76:	7821      	ldrb	r1, [r4, #0]
 8009f78:	2203      	movs	r2, #3
 8009f7a:	4650      	mov	r0, sl
 8009f7c:	f7f6 f938 	bl	80001f0 <memchr>
 8009f80:	b140      	cbz	r0, 8009f94 <_vfiprintf_r+0x198>
 8009f82:	2340      	movs	r3, #64	; 0x40
 8009f84:	eba0 000a 	sub.w	r0, r0, sl
 8009f88:	fa03 f000 	lsl.w	r0, r3, r0
 8009f8c:	9b04      	ldr	r3, [sp, #16]
 8009f8e:	4303      	orrs	r3, r0
 8009f90:	3401      	adds	r4, #1
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f98:	482c      	ldr	r0, [pc, #176]	; (800a04c <_vfiprintf_r+0x250>)
 8009f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f9e:	2206      	movs	r2, #6
 8009fa0:	f7f6 f926 	bl	80001f0 <memchr>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d03f      	beq.n	800a028 <_vfiprintf_r+0x22c>
 8009fa8:	4b29      	ldr	r3, [pc, #164]	; (800a050 <_vfiprintf_r+0x254>)
 8009faa:	bb1b      	cbnz	r3, 8009ff4 <_vfiprintf_r+0x1f8>
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	3307      	adds	r3, #7
 8009fb0:	f023 0307 	bic.w	r3, r3, #7
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	9303      	str	r3, [sp, #12]
 8009fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fba:	443b      	add	r3, r7
 8009fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fbe:	e767      	b.n	8009e90 <_vfiprintf_r+0x94>
 8009fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	e7a5      	b.n	8009f16 <_vfiprintf_r+0x11a>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	3401      	adds	r4, #1
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f04f 0c0a 	mov.w	ip, #10
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fdc:	3a30      	subs	r2, #48	; 0x30
 8009fde:	2a09      	cmp	r2, #9
 8009fe0:	d903      	bls.n	8009fea <_vfiprintf_r+0x1ee>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0c5      	beq.n	8009f72 <_vfiprintf_r+0x176>
 8009fe6:	9105      	str	r1, [sp, #20]
 8009fe8:	e7c3      	b.n	8009f72 <_vfiprintf_r+0x176>
 8009fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fee:	4604      	mov	r4, r0
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e7f0      	b.n	8009fd6 <_vfiprintf_r+0x1da>
 8009ff4:	ab03      	add	r3, sp, #12
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4b16      	ldr	r3, [pc, #88]	; (800a054 <_vfiprintf_r+0x258>)
 8009ffc:	a904      	add	r1, sp, #16
 8009ffe:	4630      	mov	r0, r6
 800a000:	f7fd fd30 	bl	8007a64 <_printf_float>
 800a004:	4607      	mov	r7, r0
 800a006:	1c78      	adds	r0, r7, #1
 800a008:	d1d6      	bne.n	8009fb8 <_vfiprintf_r+0x1bc>
 800a00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a00c:	07d9      	lsls	r1, r3, #31
 800a00e:	d405      	bmi.n	800a01c <_vfiprintf_r+0x220>
 800a010:	89ab      	ldrh	r3, [r5, #12]
 800a012:	059a      	lsls	r2, r3, #22
 800a014:	d402      	bmi.n	800a01c <_vfiprintf_r+0x220>
 800a016:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a018:	f7fd fbba 	bl	8007790 <__retarget_lock_release_recursive>
 800a01c:	89ab      	ldrh	r3, [r5, #12]
 800a01e:	065b      	lsls	r3, r3, #25
 800a020:	f53f af12 	bmi.w	8009e48 <_vfiprintf_r+0x4c>
 800a024:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a026:	e711      	b.n	8009e4c <_vfiprintf_r+0x50>
 800a028:	ab03      	add	r3, sp, #12
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	462a      	mov	r2, r5
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <_vfiprintf_r+0x258>)
 800a030:	a904      	add	r1, sp, #16
 800a032:	4630      	mov	r0, r6
 800a034:	f7fd ffba 	bl	8007fac <_printf_i>
 800a038:	e7e4      	b.n	800a004 <_vfiprintf_r+0x208>
 800a03a:	bf00      	nop
 800a03c:	0800a6b0 	.word	0x0800a6b0
 800a040:	0800a6d0 	.word	0x0800a6d0
 800a044:	0800a690 	.word	0x0800a690
 800a048:	0800a91c 	.word	0x0800a91c
 800a04c:	0800a926 	.word	0x0800a926
 800a050:	08007a65 	.word	0x08007a65
 800a054:	08009dd7 	.word	0x08009dd7
 800a058:	0800a922 	.word	0x0800a922

0800a05c <__swbuf_r>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	460e      	mov	r6, r1
 800a060:	4614      	mov	r4, r2
 800a062:	4605      	mov	r5, r0
 800a064:	b118      	cbz	r0, 800a06e <__swbuf_r+0x12>
 800a066:	6983      	ldr	r3, [r0, #24]
 800a068:	b90b      	cbnz	r3, 800a06e <__swbuf_r+0x12>
 800a06a:	f7fd facd 	bl	8007608 <__sinit>
 800a06e:	4b21      	ldr	r3, [pc, #132]	; (800a0f4 <__swbuf_r+0x98>)
 800a070:	429c      	cmp	r4, r3
 800a072:	d12b      	bne.n	800a0cc <__swbuf_r+0x70>
 800a074:	686c      	ldr	r4, [r5, #4]
 800a076:	69a3      	ldr	r3, [r4, #24]
 800a078:	60a3      	str	r3, [r4, #8]
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	071a      	lsls	r2, r3, #28
 800a07e:	d52f      	bpl.n	800a0e0 <__swbuf_r+0x84>
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	b36b      	cbz	r3, 800a0e0 <__swbuf_r+0x84>
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	6820      	ldr	r0, [r4, #0]
 800a088:	1ac0      	subs	r0, r0, r3
 800a08a:	6963      	ldr	r3, [r4, #20]
 800a08c:	b2f6      	uxtb	r6, r6
 800a08e:	4283      	cmp	r3, r0
 800a090:	4637      	mov	r7, r6
 800a092:	dc04      	bgt.n	800a09e <__swbuf_r+0x42>
 800a094:	4621      	mov	r1, r4
 800a096:	4628      	mov	r0, r5
 800a098:	f7ff f8ac 	bl	80091f4 <_fflush_r>
 800a09c:	bb30      	cbnz	r0, 800a0ec <__swbuf_r+0x90>
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	60a3      	str	r3, [r4, #8]
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	6022      	str	r2, [r4, #0]
 800a0aa:	701e      	strb	r6, [r3, #0]
 800a0ac:	6963      	ldr	r3, [r4, #20]
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	4283      	cmp	r3, r0
 800a0b2:	d004      	beq.n	800a0be <__swbuf_r+0x62>
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	07db      	lsls	r3, r3, #31
 800a0b8:	d506      	bpl.n	800a0c8 <__swbuf_r+0x6c>
 800a0ba:	2e0a      	cmp	r6, #10
 800a0bc:	d104      	bne.n	800a0c8 <__swbuf_r+0x6c>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f7ff f897 	bl	80091f4 <_fflush_r>
 800a0c6:	b988      	cbnz	r0, 800a0ec <__swbuf_r+0x90>
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <__swbuf_r+0x9c>)
 800a0ce:	429c      	cmp	r4, r3
 800a0d0:	d101      	bne.n	800a0d6 <__swbuf_r+0x7a>
 800a0d2:	68ac      	ldr	r4, [r5, #8]
 800a0d4:	e7cf      	b.n	800a076 <__swbuf_r+0x1a>
 800a0d6:	4b09      	ldr	r3, [pc, #36]	; (800a0fc <__swbuf_r+0xa0>)
 800a0d8:	429c      	cmp	r4, r3
 800a0da:	bf08      	it	eq
 800a0dc:	68ec      	ldreq	r4, [r5, #12]
 800a0de:	e7ca      	b.n	800a076 <__swbuf_r+0x1a>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f81a 	bl	800a11c <__swsetup_r>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d0cb      	beq.n	800a084 <__swbuf_r+0x28>
 800a0ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a0f0:	e7ea      	b.n	800a0c8 <__swbuf_r+0x6c>
 800a0f2:	bf00      	nop
 800a0f4:	0800a6b0 	.word	0x0800a6b0
 800a0f8:	0800a6d0 	.word	0x0800a6d0
 800a0fc:	0800a690 	.word	0x0800a690

0800a100 <__ascii_wctomb>:
 800a100:	b149      	cbz	r1, 800a116 <__ascii_wctomb+0x16>
 800a102:	2aff      	cmp	r2, #255	; 0xff
 800a104:	bf85      	ittet	hi
 800a106:	238a      	movhi	r3, #138	; 0x8a
 800a108:	6003      	strhi	r3, [r0, #0]
 800a10a:	700a      	strbls	r2, [r1, #0]
 800a10c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a110:	bf98      	it	ls
 800a112:	2001      	movls	r0, #1
 800a114:	4770      	bx	lr
 800a116:	4608      	mov	r0, r1
 800a118:	4770      	bx	lr
	...

0800a11c <__swsetup_r>:
 800a11c:	4b32      	ldr	r3, [pc, #200]	; (800a1e8 <__swsetup_r+0xcc>)
 800a11e:	b570      	push	{r4, r5, r6, lr}
 800a120:	681d      	ldr	r5, [r3, #0]
 800a122:	4606      	mov	r6, r0
 800a124:	460c      	mov	r4, r1
 800a126:	b125      	cbz	r5, 800a132 <__swsetup_r+0x16>
 800a128:	69ab      	ldr	r3, [r5, #24]
 800a12a:	b913      	cbnz	r3, 800a132 <__swsetup_r+0x16>
 800a12c:	4628      	mov	r0, r5
 800a12e:	f7fd fa6b 	bl	8007608 <__sinit>
 800a132:	4b2e      	ldr	r3, [pc, #184]	; (800a1ec <__swsetup_r+0xd0>)
 800a134:	429c      	cmp	r4, r3
 800a136:	d10f      	bne.n	800a158 <__swsetup_r+0x3c>
 800a138:	686c      	ldr	r4, [r5, #4]
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a140:	0719      	lsls	r1, r3, #28
 800a142:	d42c      	bmi.n	800a19e <__swsetup_r+0x82>
 800a144:	06dd      	lsls	r5, r3, #27
 800a146:	d411      	bmi.n	800a16c <__swsetup_r+0x50>
 800a148:	2309      	movs	r3, #9
 800a14a:	6033      	str	r3, [r6, #0]
 800a14c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a150:	81a3      	strh	r3, [r4, #12]
 800a152:	f04f 30ff 	mov.w	r0, #4294967295
 800a156:	e03e      	b.n	800a1d6 <__swsetup_r+0xba>
 800a158:	4b25      	ldr	r3, [pc, #148]	; (800a1f0 <__swsetup_r+0xd4>)
 800a15a:	429c      	cmp	r4, r3
 800a15c:	d101      	bne.n	800a162 <__swsetup_r+0x46>
 800a15e:	68ac      	ldr	r4, [r5, #8]
 800a160:	e7eb      	b.n	800a13a <__swsetup_r+0x1e>
 800a162:	4b24      	ldr	r3, [pc, #144]	; (800a1f4 <__swsetup_r+0xd8>)
 800a164:	429c      	cmp	r4, r3
 800a166:	bf08      	it	eq
 800a168:	68ec      	ldreq	r4, [r5, #12]
 800a16a:	e7e6      	b.n	800a13a <__swsetup_r+0x1e>
 800a16c:	0758      	lsls	r0, r3, #29
 800a16e:	d512      	bpl.n	800a196 <__swsetup_r+0x7a>
 800a170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a172:	b141      	cbz	r1, 800a186 <__swsetup_r+0x6a>
 800a174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a178:	4299      	cmp	r1, r3
 800a17a:	d002      	beq.n	800a182 <__swsetup_r+0x66>
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7fd fb27 	bl	80077d0 <_free_r>
 800a182:	2300      	movs	r3, #0
 800a184:	6363      	str	r3, [r4, #52]	; 0x34
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	2300      	movs	r3, #0
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	f043 0308 	orr.w	r3, r3, #8
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	b94b      	cbnz	r3, 800a1b6 <__swsetup_r+0x9a>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ac:	d003      	beq.n	800a1b6 <__swsetup_r+0x9a>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f000 f84d 	bl	800a250 <__smakebuf_r>
 800a1b6:	89a0      	ldrh	r0, [r4, #12]
 800a1b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1bc:	f010 0301 	ands.w	r3, r0, #1
 800a1c0:	d00a      	beq.n	800a1d8 <__swsetup_r+0xbc>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60a3      	str	r3, [r4, #8]
 800a1c6:	6963      	ldr	r3, [r4, #20]
 800a1c8:	425b      	negs	r3, r3
 800a1ca:	61a3      	str	r3, [r4, #24]
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	b943      	cbnz	r3, 800a1e2 <__swsetup_r+0xc6>
 800a1d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1d4:	d1ba      	bne.n	800a14c <__swsetup_r+0x30>
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	0781      	lsls	r1, r0, #30
 800a1da:	bf58      	it	pl
 800a1dc:	6963      	ldrpl	r3, [r4, #20]
 800a1de:	60a3      	str	r3, [r4, #8]
 800a1e0:	e7f4      	b.n	800a1cc <__swsetup_r+0xb0>
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	e7f7      	b.n	800a1d6 <__swsetup_r+0xba>
 800a1e6:	bf00      	nop
 800a1e8:	20000010 	.word	0x20000010
 800a1ec:	0800a6b0 	.word	0x0800a6b0
 800a1f0:	0800a6d0 	.word	0x0800a6d0
 800a1f4:	0800a690 	.word	0x0800a690

0800a1f8 <abort>:
 800a1f8:	b508      	push	{r3, lr}
 800a1fa:	2006      	movs	r0, #6
 800a1fc:	f000 f898 	bl	800a330 <raise>
 800a200:	2001      	movs	r0, #1
 800a202:	f7f7 fa33 	bl	800166c <_exit>

0800a206 <__swhatbuf_r>:
 800a206:	b570      	push	{r4, r5, r6, lr}
 800a208:	460e      	mov	r6, r1
 800a20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20e:	2900      	cmp	r1, #0
 800a210:	b096      	sub	sp, #88	; 0x58
 800a212:	4614      	mov	r4, r2
 800a214:	461d      	mov	r5, r3
 800a216:	da07      	bge.n	800a228 <__swhatbuf_r+0x22>
 800a218:	2300      	movs	r3, #0
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	89b3      	ldrh	r3, [r6, #12]
 800a21e:	061a      	lsls	r2, r3, #24
 800a220:	d410      	bmi.n	800a244 <__swhatbuf_r+0x3e>
 800a222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a226:	e00e      	b.n	800a246 <__swhatbuf_r+0x40>
 800a228:	466a      	mov	r2, sp
 800a22a:	f000 f89d 	bl	800a368 <_fstat_r>
 800a22e:	2800      	cmp	r0, #0
 800a230:	dbf2      	blt.n	800a218 <__swhatbuf_r+0x12>
 800a232:	9a01      	ldr	r2, [sp, #4]
 800a234:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a238:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a23c:	425a      	negs	r2, r3
 800a23e:	415a      	adcs	r2, r3
 800a240:	602a      	str	r2, [r5, #0]
 800a242:	e7ee      	b.n	800a222 <__swhatbuf_r+0x1c>
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	2000      	movs	r0, #0
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	b016      	add	sp, #88	; 0x58
 800a24c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a250 <__smakebuf_r>:
 800a250:	898b      	ldrh	r3, [r1, #12]
 800a252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a254:	079d      	lsls	r5, r3, #30
 800a256:	4606      	mov	r6, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	d507      	bpl.n	800a26c <__smakebuf_r+0x1c>
 800a25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	6123      	str	r3, [r4, #16]
 800a264:	2301      	movs	r3, #1
 800a266:	6163      	str	r3, [r4, #20]
 800a268:	b002      	add	sp, #8
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	ab01      	add	r3, sp, #4
 800a26e:	466a      	mov	r2, sp
 800a270:	f7ff ffc9 	bl	800a206 <__swhatbuf_r>
 800a274:	9900      	ldr	r1, [sp, #0]
 800a276:	4605      	mov	r5, r0
 800a278:	4630      	mov	r0, r6
 800a27a:	f7fd faf9 	bl	8007870 <_malloc_r>
 800a27e:	b948      	cbnz	r0, 800a294 <__smakebuf_r+0x44>
 800a280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a284:	059a      	lsls	r2, r3, #22
 800a286:	d4ef      	bmi.n	800a268 <__smakebuf_r+0x18>
 800a288:	f023 0303 	bic.w	r3, r3, #3
 800a28c:	f043 0302 	orr.w	r3, r3, #2
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	e7e3      	b.n	800a25c <__smakebuf_r+0xc>
 800a294:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <__smakebuf_r+0x7c>)
 800a296:	62b3      	str	r3, [r6, #40]	; 0x28
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	6020      	str	r0, [r4, #0]
 800a29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	9b00      	ldr	r3, [sp, #0]
 800a2a4:	6163      	str	r3, [r4, #20]
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	6120      	str	r0, [r4, #16]
 800a2aa:	b15b      	cbz	r3, 800a2c4 <__smakebuf_r+0x74>
 800a2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 f86b 	bl	800a38c <_isatty_r>
 800a2b6:	b128      	cbz	r0, 800a2c4 <__smakebuf_r+0x74>
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	f023 0303 	bic.w	r3, r3, #3
 800a2be:	f043 0301 	orr.w	r3, r3, #1
 800a2c2:	81a3      	strh	r3, [r4, #12]
 800a2c4:	89a0      	ldrh	r0, [r4, #12]
 800a2c6:	4305      	orrs	r5, r0
 800a2c8:	81a5      	strh	r5, [r4, #12]
 800a2ca:	e7cd      	b.n	800a268 <__smakebuf_r+0x18>
 800a2cc:	080075a1 	.word	0x080075a1

0800a2d0 <_malloc_usable_size_r>:
 800a2d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d4:	1f18      	subs	r0, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	bfbc      	itt	lt
 800a2da:	580b      	ldrlt	r3, [r1, r0]
 800a2dc:	18c0      	addlt	r0, r0, r3
 800a2de:	4770      	bx	lr

0800a2e0 <_raise_r>:
 800a2e0:	291f      	cmp	r1, #31
 800a2e2:	b538      	push	{r3, r4, r5, lr}
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	d904      	bls.n	800a2f4 <_raise_r+0x14>
 800a2ea:	2316      	movs	r3, #22
 800a2ec:	6003      	str	r3, [r0, #0]
 800a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2f6:	b112      	cbz	r2, 800a2fe <_raise_r+0x1e>
 800a2f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2fc:	b94b      	cbnz	r3, 800a312 <_raise_r+0x32>
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 f830 	bl	800a364 <_getpid_r>
 800a304:	462a      	mov	r2, r5
 800a306:	4601      	mov	r1, r0
 800a308:	4620      	mov	r0, r4
 800a30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a30e:	f000 b817 	b.w	800a340 <_kill_r>
 800a312:	2b01      	cmp	r3, #1
 800a314:	d00a      	beq.n	800a32c <_raise_r+0x4c>
 800a316:	1c59      	adds	r1, r3, #1
 800a318:	d103      	bne.n	800a322 <_raise_r+0x42>
 800a31a:	2316      	movs	r3, #22
 800a31c:	6003      	str	r3, [r0, #0]
 800a31e:	2001      	movs	r0, #1
 800a320:	e7e7      	b.n	800a2f2 <_raise_r+0x12>
 800a322:	2400      	movs	r4, #0
 800a324:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a328:	4628      	mov	r0, r5
 800a32a:	4798      	blx	r3
 800a32c:	2000      	movs	r0, #0
 800a32e:	e7e0      	b.n	800a2f2 <_raise_r+0x12>

0800a330 <raise>:
 800a330:	4b02      	ldr	r3, [pc, #8]	; (800a33c <raise+0xc>)
 800a332:	4601      	mov	r1, r0
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	f7ff bfd3 	b.w	800a2e0 <_raise_r>
 800a33a:	bf00      	nop
 800a33c:	20000010 	.word	0x20000010

0800a340 <_kill_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d07      	ldr	r5, [pc, #28]	; (800a360 <_kill_r+0x20>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	4611      	mov	r1, r2
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	f7f7 f97d 	bl	800164c <_kill>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	d102      	bne.n	800a35c <_kill_r+0x1c>
 800a356:	682b      	ldr	r3, [r5, #0]
 800a358:	b103      	cbz	r3, 800a35c <_kill_r+0x1c>
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	bd38      	pop	{r3, r4, r5, pc}
 800a35e:	bf00      	nop
 800a360:	20002c74 	.word	0x20002c74

0800a364 <_getpid_r>:
 800a364:	f7f7 b96a 	b.w	800163c <_getpid>

0800a368 <_fstat_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	; (800a388 <_fstat_r+0x20>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f7f7 f9c8 	bl	800170a <_fstat>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d102      	bne.n	800a384 <_fstat_r+0x1c>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b103      	cbz	r3, 800a384 <_fstat_r+0x1c>
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	20002c74 	.word	0x20002c74

0800a38c <_isatty_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d06      	ldr	r5, [pc, #24]	; (800a3a8 <_isatty_r+0x1c>)
 800a390:	2300      	movs	r3, #0
 800a392:	4604      	mov	r4, r0
 800a394:	4608      	mov	r0, r1
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	f7f7 f9c7 	bl	800172a <_isatty>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_isatty_r+0x1a>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_isatty_r+0x1a>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20002c74 	.word	0x20002c74

0800a3ac <_init>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	bf00      	nop
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_fini>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	bf00      	nop
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr
