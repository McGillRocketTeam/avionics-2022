
f303_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  0800e390  0800e390  0001e390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb34  0800eb34  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800eb34  0800eb34  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eb34  0800eb34  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb34  0800eb34  0001eb34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb38  0800eb38  0001eb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800eb3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e84  200001e4  0800ed20  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006068  0800ed20  00026068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034acf  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000479b  00000000  00000000  00054ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024e8  00000000  00000000  00059480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002350  00000000  00000000  0005b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006552  00000000  00000000  0005dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023959  00000000  00000000  0006420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df710  00000000  00000000  00087b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b6b0  00000000  00000000  001672c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e378 	.word	0x0800e378

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800e378 	.word	0x0800e378

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <GPS_Poll>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8000d10:	2364      	movs	r3, #100	; 0x64
 8000d12:	82fb      	strh	r3, [r7, #22]
	uint16_t loop_count = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	83fb      	strh	r3, [r7, #30]
	int done = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
	while(loop_count < max_loop_count && !done){
 8000d1c:	e042      	b.n	8000da4 <GPS_Poll+0xa0>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	2201      	movs	r2, #1
 8000d22:	4926      	ldr	r1, [pc, #152]	; (8000dbc <GPS_Poll+0xb8>)
 8000d24:	4826      	ldr	r0, [pc, #152]	; (8000dc0 <GPS_Poll+0xbc>)
 8000d26:	f005 f85d 	bl	8005de4 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <GPS_Poll+0xb8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b0a      	cmp	r3, #10
 8000d30:	d00f      	beq.n	8000d52 <GPS_Poll+0x4e>
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <GPS_Poll+0xc0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b63      	cmp	r3, #99	; 0x63
 8000d38:	d80b      	bhi.n	8000d52 <GPS_Poll+0x4e>
			rx_buffer[rx_index++] = rx_current;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <GPS_Poll+0xc0>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	b2d1      	uxtb	r1, r2
 8000d42:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <GPS_Poll+0xc0>)
 8000d44:	7011      	strb	r1, [r2, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <GPS_Poll+0xb8>)
 8000d4a:	7819      	ldrb	r1, [r3, #0]
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <GPS_Poll+0xc4>)
 8000d4e:	5499      	strb	r1, [r3, r2]
 8000d50:	e021      	b.n	8000d96 <GPS_Poll+0x92>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8000d52:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <GPS_Poll+0xc4>)
 8000d54:	f000 f83c 	bl	8000dd0 <GPS_validate>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d013      	beq.n	8000d86 <GPS_Poll+0x82>
				if(GPS_parse((char*) rx_buffer)){
 8000d5e:	481a      	ldr	r0, [pc, #104]	; (8000dc8 <GPS_Poll+0xc4>)
 8000d60:	f000 f898 	bl	8000e94 <GPS_parse>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00d      	beq.n	8000d86 <GPS_Poll+0x82>
					*latitude = GPS.dec_latitude;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <GPS_Poll+0xc8>)
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <GPS_Poll+0xc8>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <GPS_Poll+0xc8>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
					done = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
				}
			}
			rx_index = 0;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <GPS_Poll+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8000d8c:	2264      	movs	r2, #100	; 0x64
 8000d8e:	2100      	movs	r1, #0
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <GPS_Poll+0xc4>)
 8000d92:	f008 fb2d 	bl	80093f0 <memset>
		}
		__HAL_UART_CLEAR_FLAG(GPS_USART, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <GPS_Poll+0xbc>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	621a      	str	r2, [r3, #32]
		loop_count++;
 8000d9e:	8bfb      	ldrh	r3, [r7, #30]
 8000da0:	3301      	adds	r3, #1
 8000da2:	83fb      	strh	r3, [r7, #30]
	while(loop_count < max_loop_count && !done){
 8000da4:	8bfa      	ldrh	r2, [r7, #30]
 8000da6:	8afb      	ldrh	r3, [r7, #22]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d202      	bcs.n	8000db2 <GPS_Poll+0xae>
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0b5      	beq.n	8000d1e <GPS_Poll+0x1a>
	}

}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000200 	.word	0x20000200
 8000dc0:	20004cbc 	.word	0x20004cbc
 8000dc4:	20000201 	.word	0x20000201
 8000dc8:	20001c6c 	.word	0x20001c6c
 8000dcc:	20001c14 	.word	0x20001c14

08000dd0 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b24      	cmp	r3, #36	; 0x24
 8000dea:	d103      	bne.n	8000df4 <GPS_validate+0x24>
        i++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8000df2:	e00c      	b.n	8000e0e <GPS_validate+0x3e>
        return 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e047      	b.n	8000e88 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4053      	eors	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        i++;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d008      	beq.n	8000e2c <GPS_validate+0x5c>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b2a      	cmp	r3, #42	; 0x2a
 8000e24:	d002      	beq.n	8000e2c <GPS_validate+0x5c>
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2b4a      	cmp	r3, #74	; 0x4a
 8000e2a:	dde5      	ble.n	8000df8 <GPS_validate+0x28>
    }

    if(i >= 75){
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2b4a      	cmp	r3, #74	; 0x4a
 8000e30:	dd01      	ble.n	8000e36 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8000e32:	2300      	movs	r3, #0
 8000e34:	e028      	b.n	8000e88 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e40:	d119      	bne.n	8000e76 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3302      	adds	r3, #2
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	490a      	ldr	r1, [pc, #40]	; (8000e90 <GPS_validate+0xc0>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f009 fa6e 	bl	800a348 <siprintf>
    return((checkcalcstr[0] == check[0])
 8000e6c:	7a3a      	ldrb	r2, [r7, #8]
 8000e6e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d108      	bne.n	8000e86 <GPS_validate+0xb6>
 8000e74:	e001      	b.n	8000e7a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8000e76:	2300      	movs	r3, #0
 8000e78:	e006      	b.n	8000e88 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8000e7a:	7a7a      	ldrb	r2, [r7, #9]
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d101      	bne.n	8000e86 <GPS_validate+0xb6>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <GPS_validate+0xb8>
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	0800e390 	.word	0x0800e390

08000e94 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af08      	add	r7, sp, #32
 8000e9a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8000e9c:	2206      	movs	r2, #6
 8000e9e:	496d      	ldr	r1, [pc, #436]	; (8001054 <GPS_parse+0x1c0>)
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f009 fae2 	bl	800a46a <strncmp>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d139      	bne.n	8000f20 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8000eac:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <GPS_parse+0x1c4>)
 8000eae:	9307      	str	r3, [sp, #28]
 8000eb0:	4b6a      	ldr	r3, [pc, #424]	; (800105c <GPS_parse+0x1c8>)
 8000eb2:	9306      	str	r3, [sp, #24]
 8000eb4:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <GPS_parse+0x1cc>)
 8000eb6:	9305      	str	r3, [sp, #20]
 8000eb8:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <GPS_parse+0x1d0>)
 8000eba:	9304      	str	r3, [sp, #16]
 8000ebc:	4b6a      	ldr	r3, [pc, #424]	; (8001068 <GPS_parse+0x1d4>)
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	4b6a      	ldr	r3, [pc, #424]	; (800106c <GPS_parse+0x1d8>)
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	4b6a      	ldr	r3, [pc, #424]	; (8001070 <GPS_parse+0x1dc>)
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	4b6a      	ldr	r3, [pc, #424]	; (8001074 <GPS_parse+0x1e0>)
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4b6a      	ldr	r3, [pc, #424]	; (8001078 <GPS_parse+0x1e4>)
 8000ece:	4a6b      	ldr	r2, [pc, #428]	; (800107c <GPS_parse+0x1e8>)
 8000ed0:	496b      	ldr	r1, [pc, #428]	; (8001080 <GPS_parse+0x1ec>)
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f009 fa58 	bl	800a388 <siscanf>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f340 80b5 	ble.w	800104a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8000ee0:	4b68      	ldr	r3, [pc, #416]	; (8001084 <GPS_parse+0x1f0>)
 8000ee2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ee6:	4b67      	ldr	r3, [pc, #412]	; (8001084 <GPS_parse+0x1f0>)
 8000ee8:	7e1b      	ldrb	r3, [r3, #24]
 8000eea:	4618      	mov	r0, r3
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	f000 f8ec 	bl	80010cc <GPS_nmea_to_dec>
 8000ef4:	eef0 7a40 	vmov.f32	s15, s0
 8000ef8:	4b62      	ldr	r3, [pc, #392]	; (8001084 <GPS_parse+0x1f0>)
 8000efa:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8000efe:	4b61      	ldr	r3, [pc, #388]	; (8001084 <GPS_parse+0x1f0>)
 8000f00:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f04:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <GPS_parse+0x1f0>)
 8000f06:	7e5b      	ldrb	r3, [r3, #25]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0e:	f000 f8dd 	bl	80010cc <GPS_nmea_to_dec>
 8000f12:	eef0 7a40 	vmov.f32	s15, s0
 8000f16:	4b5b      	ldr	r3, [pc, #364]	; (8001084 <GPS_parse+0x1f0>)
 8000f18:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e095      	b.n	800104c <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8000f20:	2206      	movs	r2, #6
 8000f22:	4959      	ldr	r1, [pc, #356]	; (8001088 <GPS_parse+0x1f4>)
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f009 faa0 	bl	800a46a <strncmp>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d134      	bne.n	8000f9a <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <GPS_parse+0x1f8>)
 8000f32:	9305      	str	r3, [sp, #20]
 8000f34:	4b56      	ldr	r3, [pc, #344]	; (8001090 <GPS_parse+0x1fc>)
 8000f36:	9304      	str	r3, [sp, #16]
 8000f38:	4b56      	ldr	r3, [pc, #344]	; (8001094 <GPS_parse+0x200>)
 8000f3a:	9303      	str	r3, [sp, #12]
 8000f3c:	4b4b      	ldr	r3, [pc, #300]	; (800106c <GPS_parse+0x1d8>)
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <GPS_parse+0x1dc>)
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <GPS_parse+0x1e0>)
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <GPS_parse+0x1e4>)
 8000f4a:	4a4c      	ldr	r2, [pc, #304]	; (800107c <GPS_parse+0x1e8>)
 8000f4c:	4952      	ldr	r1, [pc, #328]	; (8001098 <GPS_parse+0x204>)
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f009 fa1a 	bl	800a388 <siscanf>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	dd77      	ble.n	800104a <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <GPS_parse+0x1f0>)
 8000f5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f60:	4b48      	ldr	r3, [pc, #288]	; (8001084 <GPS_parse+0x1f0>)
 8000f62:	7e1b      	ldrb	r3, [r3, #24]
 8000f64:	4618      	mov	r0, r3
 8000f66:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6a:	f000 f8af 	bl	80010cc <GPS_nmea_to_dec>
 8000f6e:	eef0 7a40 	vmov.f32	s15, s0
 8000f72:	4b44      	ldr	r3, [pc, #272]	; (8001084 <GPS_parse+0x1f0>)
 8000f74:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8000f78:	4b42      	ldr	r3, [pc, #264]	; (8001084 <GPS_parse+0x1f0>)
 8000f7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f7e:	4b41      	ldr	r3, [pc, #260]	; (8001084 <GPS_parse+0x1f0>)
 8000f80:	7e5b      	ldrb	r3, [r3, #25]
 8000f82:	4618      	mov	r0, r3
 8000f84:	eeb0 0a67 	vmov.f32	s0, s15
 8000f88:	f000 f8a0 	bl	80010cc <GPS_nmea_to_dec>
 8000f8c:	eef0 7a40 	vmov.f32	s15, s0
 8000f90:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <GPS_parse+0x1f0>)
 8000f92:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e058      	b.n	800104c <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8000f9a:	2206      	movs	r2, #6
 8000f9c:	493f      	ldr	r1, [pc, #252]	; (800109c <GPS_parse+0x208>)
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f009 fa63 	bl	800a46a <strncmp>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d130      	bne.n	800100c <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <GPS_parse+0x20c>)
 8000fac:	9303      	str	r3, [sp, #12]
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <GPS_parse+0x1e8>)
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <GPS_parse+0x1d8>)
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <GPS_parse+0x1dc>)
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <GPS_parse+0x1e0>)
 8000fbc:	4a2e      	ldr	r2, [pc, #184]	; (8001078 <GPS_parse+0x1e4>)
 8000fbe:	4939      	ldr	r1, [pc, #228]	; (80010a4 <GPS_parse+0x210>)
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f009 f9e1 	bl	800a388 <siscanf>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dd3e      	ble.n	800104a <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <GPS_parse+0x1f0>)
 8000fce:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <GPS_parse+0x1f0>)
 8000fd4:	7e1b      	ldrb	r3, [r3, #24]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fdc:	f000 f876 	bl	80010cc <GPS_nmea_to_dec>
 8000fe0:	eef0 7a40 	vmov.f32	s15, s0
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <GPS_parse+0x1f0>)
 8000fe6:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <GPS_parse+0x1f0>)
 8000fec:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <GPS_parse+0x1f0>)
 8000ff2:	7e5b      	ldrb	r3, [r3, #25]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffa:	f000 f867 	bl	80010cc <GPS_nmea_to_dec>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <GPS_parse+0x1f0>)
 8001004:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8001008:	2301      	movs	r3, #1
 800100a:	e01f      	b.n	800104c <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 800100c:	2206      	movs	r2, #6
 800100e:	4926      	ldr	r1, [pc, #152]	; (80010a8 <GPS_parse+0x214>)
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f009 fa2a 	bl	800a46a <strncmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d116      	bne.n	800104a <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <GPS_parse+0x218>)
 800101e:	9305      	str	r3, [sp, #20]
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <GPS_parse+0x21c>)
 8001022:	9304      	str	r3, [sp, #16]
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <GPS_parse+0x220>)
 8001026:	9303      	str	r3, [sp, #12]
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <GPS_parse+0x200>)
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <GPS_parse+0x224>)
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <GPS_parse+0x228>)
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <GPS_parse+0x22c>)
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <GPS_parse+0x230>)
 8001038:	4923      	ldr	r1, [pc, #140]	; (80010c8 <GPS_parse+0x234>)
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f009 f9a4 	bl	800a388 <siscanf>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	dd01      	ble.n	800104a <GPS_parse+0x1b6>
            return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <GPS_parse+0x1b8>
    }
    return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	0800e398 	.word	0x0800e398
 8001058:	20001c40 	.word	0x20001c40
 800105c:	20001c3c 	.word	0x20001c3c
 8001060:	20001c38 	.word	0x20001c38
 8001064:	20001c34 	.word	0x20001c34
 8001068:	20001c30 	.word	0x20001c30
 800106c:	20001c2d 	.word	0x20001c2d
 8001070:	20001c20 	.word	0x20001c20
 8001074:	20001c2c 	.word	0x20001c2c
 8001078:	20001c24 	.word	0x20001c24
 800107c:	20001c28 	.word	0x20001c28
 8001080:	0800e3a0 	.word	0x0800e3a0
 8001084:	20001c14 	.word	0x20001c14
 8001088:	0800e3c8 	.word	0x0800e3c8
 800108c:	20001c4c 	.word	0x20001c4c
 8001090:	20001c48 	.word	0x20001c48
 8001094:	20001c44 	.word	0x20001c44
 8001098:	0800e3d0 	.word	0x0800e3d0
 800109c:	0800e3f0 	.word	0x0800e3f0
 80010a0:	20001c50 	.word	0x20001c50
 80010a4:	0800e3f8 	.word	0x0800e3f8
 80010a8:	0800e414 	.word	0x0800e414
 80010ac:	20001c68 	.word	0x20001c68
 80010b0:	20001c64 	.word	0x20001c64
 80010b4:	20001c61 	.word	0x20001c61
 80010b8:	20001c60 	.word	0x20001c60
 80010bc:	20001c5c 	.word	0x20001c5c
 80010c0:	20001c58 	.word	0x20001c58
 80010c4:	20001c54 	.word	0x20001c54
 80010c8:	0800e41c 	.word	0x0800e41c

080010cc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010d6:	4603      	mov	r3, r0
 80010d8:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80010da:	ed97 7a01 	vldr	s14, [r7, #4]
 80010de:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001160 <GPS_nmea_to_dec+0x94>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ea:	ee17 3a90 	vmov	r3, s15
 80010ee:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2264      	movs	r2, #100	; 0x64
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	ed97 7a01 	vldr	s14, [r7, #4]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 800110c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001110:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001164 <GPS_nmea_to_dec+0x98>
 8001114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001118:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	ed97 7a02 	vldr	s14, [r7, #8]
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2b53      	cmp	r3, #83	; 0x53
 8001136:	d002      	beq.n	800113e <GPS_nmea_to_dec+0x72>
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b57      	cmp	r3, #87	; 0x57
 800113c:	d105      	bne.n	800114a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800113e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001142:	eef1 7a67 	vneg.f32	s15, s15
 8001146:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	ee07 3a90 	vmov	s15, r3
}
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	42c80000 	.word	0x42c80000
 8001164:	42700000 	.word	0x42700000

08001168 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	461a      	mov	r2, r3
 8001174:	460b      	mov	r3, r1
 8001176:	72fb      	strb	r3, [r7, #11]
 8001178:	4613      	mov	r3, r2
 800117a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685c      	ldr	r4, [r3, #4]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6898      	ldr	r0, [r3, #8]
 8001184:	893b      	ldrh	r3, [r7, #8]
 8001186:	7af9      	ldrb	r1, [r7, #11]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	47a0      	blx	r4
 800118c:	6178      	str	r0, [r7, #20]
  return ret;
 800118e:	697b      	ldr	r3, [r7, #20]
}
 8001190:	4618      	mov	r0, r3
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}

08001198 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
 80011a8:	4613      	mov	r3, r2
 80011aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681c      	ldr	r4, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6898      	ldr	r0, [r3, #8]
 80011b4:	893b      	ldrh	r3, [r7, #8]
 80011b6:	7af9      	ldrb	r1, [r7, #11]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	47a0      	blx	r4
 80011bc:	6178      	str	r0, [r7, #20]
  return ret;
 80011be:	697b      	ldr	r3, [r7, #20]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}

080011c8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011f4 <lps22hh_from_lsb_to_hpa+0x2c>
 80011de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	49800000 	.word	0x49800000

080011f8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001228 <lps22hh_from_lsb_to_celsius+0x30>
 8001212:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001216:	eef0 7a66 	vmov.f32	s15, s13
}
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	42c80000 	.word	0x42c80000

0800122c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	2301      	movs	r3, #1
 800123e:	2110      	movs	r1, #16
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff91 	bl	8001168 <lps22hh_read_reg>
 8001246:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	7a3b      	ldrb	r3, [r7, #8]
 8001258:	f362 0341 	bfi	r3, r2, #1, #1
 800125c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800125e:	f107 0208 	add.w	r2, r7, #8
 8001262:	2301      	movs	r3, #1
 8001264:	2110      	movs	r1, #16
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff96 	bl	8001198 <lps22hh_write_reg>
 800126c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8001284:	f107 0210 	add.w	r2, r7, #16
 8001288:	2301      	movs	r3, #1
 800128a:	2110      	movs	r1, #16
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff6b 	bl	8001168 <lps22hh_read_reg>
 8001292:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d107      	bne.n	80012aa <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	2301      	movs	r3, #1
 80012a0:	2111      	movs	r1, #17
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff60 	bl	8001168 <lps22hh_read_reg>
 80012a8:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10f      	bne.n	80012d0 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	7c3b      	ldrb	r3, [r7, #16]
 80012ba:	f362 1306 	bfi	r3, r2, #4, #3
 80012be:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80012c0:	f107 0210 	add.w	r2, r7, #16
 80012c4:	2301      	movs	r3, #1
 80012c6:	2110      	movs	r1, #16
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff65 	bl	8001198 <lps22hh_write_reg>
 80012ce:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d119      	bne.n	800130a <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	7b3b      	ldrb	r3, [r7, #12]
 80012e2:	f362 0341 	bfi	r3, r2, #1, #1
 80012e6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	f362 0300 	bfi	r3, r2, #0, #1
 80012f8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	2301      	movs	r3, #1
 8001300:	2111      	movs	r1, #17
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff48 	bl	8001198 <lps22hh_write_reg>
 8001308:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 800130a:	697b      	ldr	r3, [r7, #20]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800131e:	f107 0208 	add.w	r2, r7, #8
 8001322:	2303      	movs	r3, #3
 8001324:	2128      	movs	r1, #40	; 0x28
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff1e 	bl	8001168 <lps22hh_read_reg>
 800132c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	461a      	mov	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	7a7a      	ldrb	r2, [r7, #9]
 800133e:	441a      	add	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	7a3a      	ldrb	r2, [r7, #8]
 800134c:	441a      	add	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	021a      	lsls	r2, r3, #8
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]
  return ret;
 800135c:	68fb      	ldr	r3, [r7, #12]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8001370:	f107 0208 	add.w	r2, r7, #8
 8001374:	2302      	movs	r3, #2
 8001376:	212b      	movs	r1, #43	; 0x2b
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fef5 	bl	8001168 <lps22hh_read_reg>
 800137e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8001380:	7a7b      	ldrb	r3, [r7, #9]
 8001382:	b21a      	sxth	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	b29b      	uxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b29a      	uxth	r2, r3
 8001394:	7a3b      	ldrb	r3, [r7, #8]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4413      	add	r3, r2
 800139a:	b29b      	uxth	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	801a      	strh	r2, [r3, #0]
  return ret;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80013b6:	2301      	movs	r3, #1
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	210f      	movs	r1, #15
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fed3 	bl	8001168 <lps22hh_read_reg>
 80013c2:	60f8      	str	r0, [r7, #12]
  return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	2301      	movs	r3, #1
 80013e0:	2111      	movs	r1, #17
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fec0 	bl	8001168 <lps22hh_read_reg>
 80013e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10f      	bne.n	8001410 <lps22hh_reset_set+0x42>
    reg.swreset = val;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	7a3b      	ldrb	r3, [r7, #8]
 80013fa:	f362 0382 	bfi	r3, r2, #2, #1
 80013fe:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001400:	f107 0208 	add.w	r2, r7, #8
 8001404:	2301      	movs	r3, #1
 8001406:	2111      	movs	r1, #17
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fec5 	bl	8001198 <lps22hh_write_reg>
 800140e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001410:	68fb      	ldr	r3, [r7, #12]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001424:	f107 0208 	add.w	r2, r7, #8
 8001428:	2301      	movs	r3, #1
 800142a:	2111      	movs	r1, #17
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fe9b 	bl	8001168 <lps22hh_read_reg>
 8001432:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001434:	7a3b      	ldrb	r3, [r7, #8]
 8001436:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	701a      	strb	r2, [r3, #0]
  return ret;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	461a      	mov	r2, r3
 8001458:	460b      	mov	r3, r1
 800145a:	72fb      	strb	r3, [r7, #11]
 800145c:	4613      	mov	r3, r2
 800145e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685c      	ldr	r4, [r3, #4]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6898      	ldr	r0, [r3, #8]
 8001468:	893b      	ldrh	r3, [r7, #8]
 800146a:	7af9      	ldrb	r1, [r7, #11]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	47a0      	blx	r4
 8001470:	6178      	str	r0, [r7, #20]
  return ret;
 8001472:	697b      	ldr	r3, [r7, #20]
}
 8001474:	4618      	mov	r0, r3
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}

0800147c <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	461a      	mov	r2, r3
 8001488:	460b      	mov	r3, r1
 800148a:	72fb      	strb	r3, [r7, #11]
 800148c:	4613      	mov	r3, r2
 800148e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681c      	ldr	r4, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6898      	ldr	r0, [r3, #8]
 8001498:	893b      	ldrh	r3, [r7, #8]
 800149a:	7af9      	ldrb	r1, [r7, #11]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	47a0      	blx	r4
 80014a0:	6178      	str	r0, [r7, #20]
  return ret;
 80014a2:	697b      	ldr	r3, [r7, #20]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd90      	pop	{r4, r7, pc}

080014ac <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014d8 <lsm6dsr_from_fs2g_to_mg+0x2c>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	3d79db23 	.word	0x3d79db23

080014dc <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001508 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80014f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	428c0000 	.word	0x428c0000

0800150c <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001518:	f107 0208 	add.w	r2, r7, #8
 800151c:	2301      	movs	r3, #1
 800151e:	2110      	movs	r1, #16
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff93 	bl	800144c <lsm6dsr_read_reg>
 8001526:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <lsm6dsr_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	b2da      	uxtb	r2, r3
 8001536:	7a3b      	ldrb	r3, [r7, #8]
 8001538:	f362 0383 	bfi	r3, r2, #2, #2
 800153c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800153e:	f107 0208 	add.w	r2, r7, #8
 8001542:	2301      	movs	r3, #1
 8001544:	2110      	movs	r1, #16
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff98 	bl	800147c <lsm6dsr_write_reg>
 800154c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fc18 	bl	8001da4 <lsm6dsr_fsm_enable_get>
 8001574:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 80c4 	bne.w	8001706 <lsm6dsr_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800157e:	7b3b      	ldrb	r3, [r7, #12]
 8001580:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001584:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001586:	7b3b      	ldrb	r3, [r7, #12]
 8001588:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800158c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800158e:	4313      	orrs	r3, r2
 8001590:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001598:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800159a:	4313      	orrs	r3, r2
 800159c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80015a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80015be:	4313      	orrs	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015c8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80015d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80015da:	7b7b      	ldrb	r3, [r7, #13]
 80015dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80015e0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80015ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80015f2:	7b7b      	ldrb	r3, [r7, #13]
 80015f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001604:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001606:	4313      	orrs	r3, r2
 8001608:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800160a:	7b7b      	ldrb	r3, [r7, #13]
 800160c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001610:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001612:	4313      	orrs	r3, r2
 8001614:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800161c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800161e:	4313      	orrs	r3, r2
 8001620:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001628:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800162a:	4313      	orrs	r3, r2
 800162c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001634:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001636:	4313      	orrs	r3, r2
 8001638:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800163a:	2b01      	cmp	r3, #1
 800163c:	d163      	bne.n	8001706 <lsm6dsr_xl_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800163e:	f107 030b 	add.w	r3, r7, #11
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fbd9 	bl	8001dfc <lsm6dsr_fsm_data_rate_get>
 800164a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d159      	bne.n	8001706 <lsm6dsr_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d853      	bhi.n	8001700 <lsm6dsr_xl_data_rate_set+0x1a8>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <lsm6dsr_xl_data_rate_set+0x108>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001671 	.word	0x08001671
 8001664:	08001683 	.word	0x08001683
 8001668:	080016a1 	.word	0x080016a1
 800166c:	080016cb 	.word	0x080016cb
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <lsm6dsr_xl_data_rate_set+0x124>
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8001676:	2301      	movs	r3, #1
 8001678:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800167a:	e045      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	75fb      	strb	r3, [r7, #23]
            break;
 8001680:	e042      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <lsm6dsr_xl_data_rate_set+0x136>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8001688:	2302      	movs	r3, #2
 800168a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800168c:	e03c      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d102      	bne.n	800169a <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8001694:	2302      	movs	r3, #2
 8001696:	75fb      	strb	r3, [r7, #23]
            break;
 8001698:	e036      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	75fb      	strb	r3, [r7, #23]
            break;
 800169e:	e033      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <lsm6dsr_xl_data_rate_set+0x154>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80016a6:	2303      	movs	r3, #3
 80016a8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80016aa:	e02d      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d102      	bne.n	80016b8 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80016b2:	2303      	movs	r3, #3
 80016b4:	75fb      	strb	r3, [r7, #23]
            break;
 80016b6:	e027      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d102      	bne.n	80016c4 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80016be:	2303      	movs	r3, #3
 80016c0:	75fb      	strb	r3, [r7, #23]
            break;
 80016c2:	e021      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	75fb      	strb	r3, [r7, #23]
            break;
 80016c8:	e01e      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <lsm6dsr_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80016d0:	2304      	movs	r3, #4
 80016d2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80016d4:	e018      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d102      	bne.n	80016e2 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80016dc:	2304      	movs	r3, #4
 80016de:	75fb      	strb	r3, [r7, #23]
            break;
 80016e0:	e012      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d102      	bne.n	80016ee <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80016e8:	2304      	movs	r3, #4
 80016ea:	75fb      	strb	r3, [r7, #23]
            break;
 80016ec:	e00c      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz) {
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d102      	bne.n	80016fa <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80016f4:	2304      	movs	r3, #4
 80016f6:	75fb      	strb	r3, [r7, #23]
            break;
 80016f8:	e006      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	75fb      	strb	r3, [r7, #23]
            break;
 80016fe:	e003      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	75fb      	strb	r3, [r7, #23]
            break;
 8001704:	e000      	b.n	8001708 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8001706:	bf00      	nop
    }
  }

  if (ret == 0) {
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <lsm6dsr_xl_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800170e:	f107 0208 	add.w	r2, r7, #8
 8001712:	2301      	movs	r3, #1
 8001714:	2110      	movs	r1, #16
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fe98 	bl	800144c <lsm6dsr_read_reg>
 800171c:	6138      	str	r0, [r7, #16]
                           1);
  }

  if (ret == 0) {
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10f      	bne.n	8001744 <lsm6dsr_xl_data_rate_set+0x1ec>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	b2da      	uxtb	r2, r3
 800172c:	7a3b      	ldrb	r3, [r7, #8]
 800172e:	f362 1307 	bfi	r3, r2, #4, #4
 8001732:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8001734:	f107 0208 	add.w	r2, r7, #8
 8001738:	2301      	movs	r3, #1
 800173a:	2110      	movs	r1, #16
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fe9d 	bl	800147c <lsm6dsr_write_reg>
 8001742:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001744:	693b      	ldr	r3, [r7, #16]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop

08001750 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800175c:	f107 0208 	add.w	r2, r7, #8
 8001760:	2301      	movs	r3, #1
 8001762:	2111      	movs	r1, #17
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe71 	bl	800144c <lsm6dsr_read_reg>
 800176a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10f      	bne.n	8001792 <lsm6dsr_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	b2da      	uxtb	r2, r3
 800177a:	7a3b      	ldrb	r3, [r7, #8]
 800177c:	f362 0303 	bfi	r3, r2, #0, #4
 8001780:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001782:	f107 0208 	add.w	r2, r7, #8
 8001786:	2301      	movs	r3, #1
 8001788:	2111      	movs	r1, #17
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fe76 	bl	800147c <lsm6dsr_write_reg>
 8001790:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 faf6 	bl	8001da4 <lsm6dsr_fsm_enable_get>
 80017b8:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 80c4 	bne.w	800194a <lsm6dsr_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80017c2:	7b3b      	ldrb	r3, [r7, #12]
 80017c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80017ca:	7b3b      	ldrb	r3, [r7, #12]
 80017cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017d0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80017d6:	7b3b      	ldrb	r3, [r7, #12]
 80017d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80017de:	4313      	orrs	r3, r2
 80017e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80017e2:	7b3b      	ldrb	r3, [r7, #12]
 80017e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80017ee:	7b3b      	ldrb	r3, [r7, #12]
 80017f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80017fa:	7b3b      	ldrb	r3, [r7, #12]
 80017fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001800:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001802:	4313      	orrs	r3, r2
 8001804:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001806:	7b3b      	ldrb	r3, [r7, #12]
 8001808:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800180c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800180e:	4313      	orrs	r3, r2
 8001810:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001812:	7b3b      	ldrb	r3, [r7, #12]
 8001814:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001818:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800181a:	4313      	orrs	r3, r2
 800181c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800181e:	7b7b      	ldrb	r3, [r7, #13]
 8001820:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001824:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001826:	4313      	orrs	r3, r2
 8001828:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800182a:	7b7b      	ldrb	r3, [r7, #13]
 800182c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001830:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001832:	4313      	orrs	r3, r2
 8001834:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800183c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800183e:	4313      	orrs	r3, r2
 8001840:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001842:	7b7b      	ldrb	r3, [r7, #13]
 8001844:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001848:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800184a:	4313      	orrs	r3, r2
 800184c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800184e:	7b7b      	ldrb	r3, [r7, #13]
 8001850:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001854:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001856:	4313      	orrs	r3, r2
 8001858:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001860:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001862:	4313      	orrs	r3, r2
 8001864:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001866:	7b7b      	ldrb	r3, [r7, #13]
 8001868:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800186c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800186e:	4313      	orrs	r3, r2
 8001870:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8001872:	7b7b      	ldrb	r3, [r7, #13]
 8001874:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001878:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800187a:	4313      	orrs	r3, r2
 800187c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800187e:	2b01      	cmp	r3, #1
 8001880:	d163      	bne.n	800194a <lsm6dsr_gy_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8001882:	f107 030b 	add.w	r3, r7, #11
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fab7 	bl	8001dfc <lsm6dsr_fsm_data_rate_get>
 800188e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d159      	bne.n	800194a <lsm6dsr_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d853      	bhi.n	8001944 <lsm6dsr_gy_data_rate_set+0x1a8>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <lsm6dsr_gy_data_rate_set+0x108>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018c7 	.word	0x080018c7
 80018ac:	080018e5 	.word	0x080018e5
 80018b0:	0800190f 	.word	0x0800190f
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF) {
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <lsm6dsr_gy_data_rate_set+0x124>
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80018be:	e045      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	75fb      	strb	r3, [r7, #23]
            break;
 80018c4:	e042      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <lsm6dsr_gy_data_rate_set+0x136>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80018cc:	2302      	movs	r3, #2
 80018ce:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80018d0:	e03c      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d102      	bne.n	80018de <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80018d8:	2302      	movs	r3, #2
 80018da:	75fb      	strb	r3, [r7, #23]
            break;
 80018dc:	e036      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	75fb      	strb	r3, [r7, #23]
            break;
 80018e2:	e033      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <lsm6dsr_gy_data_rate_set+0x154>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80018ea:	2303      	movs	r3, #3
 80018ec:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80018ee:	e02d      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d102      	bne.n	80018fc <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80018f6:	2303      	movs	r3, #3
 80018f8:	75fb      	strb	r3, [r7, #23]
            break;
 80018fa:	e027      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d102      	bne.n	8001908 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8001902:	2303      	movs	r3, #3
 8001904:	75fb      	strb	r3, [r7, #23]
            break;
 8001906:	e021      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	75fb      	strb	r3, [r7, #23]
            break;
 800190c:	e01e      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <lsm6dsr_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8001914:	2304      	movs	r3, #4
 8001916:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8001918:	e018      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d102      	bne.n	8001926 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8001920:	2304      	movs	r3, #4
 8001922:	75fb      	strb	r3, [r7, #23]
            break;
 8001924:	e012      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d102      	bne.n	8001932 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800192c:	2304      	movs	r3, #4
 800192e:	75fb      	strb	r3, [r7, #23]
            break;
 8001930:	e00c      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz) {
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d102      	bne.n	800193e <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8001938:	2304      	movs	r3, #4
 800193a:	75fb      	strb	r3, [r7, #23]
            break;
 800193c:	e006      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	75fb      	strb	r3, [r7, #23]
            break;
 8001942:	e003      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	75fb      	strb	r3, [r7, #23]
            break;
 8001948:	e000      	b.n	800194c <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800194a:	bf00      	nop
    }
  }

  if (ret == 0) {
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d107      	bne.n	8001962 <lsm6dsr_gy_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001952:	f107 0208 	add.w	r2, r7, #8
 8001956:	2301      	movs	r3, #1
 8001958:	2111      	movs	r1, #17
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fd76 	bl	800144c <lsm6dsr_read_reg>
 8001960:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10f      	bne.n	8001988 <lsm6dsr_gy_data_rate_set+0x1ec>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	b2da      	uxtb	r2, r3
 8001970:	7a3b      	ldrb	r3, [r7, #8]
 8001972:	f362 1307 	bfi	r3, r2, #4, #4
 8001976:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	2301      	movs	r3, #1
 800197e:	2111      	movs	r1, #17
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fd7b 	bl	800147c <lsm6dsr_write_reg>
 8001986:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop

08001994 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019a0:	f107 0208 	add.w	r2, r7, #8
 80019a4:	2301      	movs	r3, #1
 80019a6:	2112      	movs	r1, #18
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fd4f 	bl	800144c <lsm6dsr_read_reg>
 80019ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <lsm6dsr_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	7a3b      	ldrb	r3, [r7, #8]
 80019c0:	f362 1386 	bfi	r3, r2, #6, #1
 80019c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019c6:	f107 0208 	add.w	r2, r7, #8
 80019ca:	2301      	movs	r3, #1
 80019cc:	2112      	movs	r1, #18
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fd54 	bl	800147c <lsm6dsr_write_reg>
 80019d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80019ea:	f107 0208 	add.w	r2, r7, #8
 80019ee:	2301      	movs	r3, #1
 80019f0:	211e      	movs	r1, #30
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fd2a 	bl	800144c <lsm6dsr_read_reg>
 80019f8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80019fa:	7a3b      	ldrb	r3, [r7, #8]
 80019fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	701a      	strb	r2, [r3, #0]
  return ret;
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8001a1c:	f107 0208 	add.w	r2, r7, #8
 8001a20:	2301      	movs	r3, #1
 8001a22:	211e      	movs	r1, #30
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fd11 	bl	800144c <lsm6dsr_read_reg>
 8001a2a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001a2c:	7a3b      	ldrb	r3, [r7, #8]
 8001a2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	701a      	strb	r2, [r3, #0]
  return ret;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8001a4e:	f107 020c 	add.w	r2, r7, #12
 8001a52:	2306      	movs	r3, #6
 8001a54:	2122      	movs	r1, #34	; 0x22
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fcf8 	bl	800144c <lsm6dsr_read_reg>
 8001a5c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a5e:	7b7b      	ldrb	r3, [r7, #13]
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	7b3b      	ldrb	r3, [r7, #12]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3302      	adds	r3, #2
 8001a86:	b212      	sxth	r2, r2
 8001a88:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	7bbb      	ldrb	r3, [r7, #14]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	b212      	sxth	r2, r2
 8001aa6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001aa8:	7c7a      	ldrb	r2, [r7, #17]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3304      	adds	r3, #4
 8001aae:	b212      	sxth	r2, r2
 8001ab0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	7c3b      	ldrb	r3, [r7, #16]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	3304      	adds	r3, #4
 8001acc:	b212      	sxth	r2, r2
 8001ace:	801a      	strh	r2, [r3, #0]
  return ret;
 8001ad0:	697b      	ldr	r3, [r7, #20]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8001ae4:	f107 020c 	add.w	r2, r7, #12
 8001ae8:	2306      	movs	r3, #6
 8001aea:	2128      	movs	r1, #40	; 0x28
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fcad 	bl	800144c <lsm6dsr_read_reg>
 8001af2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001af4:	7b7b      	ldrb	r3, [r7, #13]
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	7b3b      	ldrb	r3, [r7, #12]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b21a      	sxth	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	b212      	sxth	r2, r2
 8001b1e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	3302      	adds	r3, #2
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	b212      	sxth	r2, r2
 8001b3c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001b3e:	7c7a      	ldrb	r2, [r7, #17]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	3304      	adds	r3, #4
 8001b44:	b212      	sxth	r2, r2
 8001b46:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	7c3b      	ldrb	r3, [r7, #16]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	3304      	adds	r3, #4
 8001b62:	b212      	sxth	r2, r2
 8001b64:	801a      	strh	r2, [r3, #0]
  return ret;
 8001b66:	697b      	ldr	r3, [r7, #20]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8001b7c:	f107 0208 	add.w	r2, r7, #8
 8001b80:	2301      	movs	r3, #1
 8001b82:	2101      	movs	r1, #1
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fc61 	bl	800144c <lsm6dsr_read_reg>
 8001b8a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10f      	bne.n	8001bb2 <lsm6dsr_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	7a3b      	ldrb	r3, [r7, #8]
 8001b9c:	f362 1387 	bfi	r3, r2, #6, #2
 8001ba0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8001ba2:	f107 0208 	add.w	r2, r7, #8
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	2101      	movs	r1, #1
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fc66 	bl	800147c <lsm6dsr_write_reg>
 8001bb0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	210f      	movs	r1, #15
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fc3d 	bl	800144c <lsm6dsr_read_reg>
 8001bd2:	60f8      	str	r0, [r7, #12]
  return ret;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001bea:	f107 0208 	add.w	r2, r7, #8
 8001bee:	2301      	movs	r3, #1
 8001bf0:	2112      	movs	r1, #18
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fc2a 	bl	800144c <lsm6dsr_read_reg>
 8001bf8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10f      	bne.n	8001c20 <lsm6dsr_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	7a3b      	ldrb	r3, [r7, #8]
 8001c0a:	f362 0300 	bfi	r3, r2, #0, #1
 8001c0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c10:	f107 0208 	add.w	r2, r7, #8
 8001c14:	2301      	movs	r3, #1
 8001c16:	2112      	movs	r1, #18
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fc2f 	bl	800147c <lsm6dsr_write_reg>
 8001c1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c34:	f107 0208 	add.w	r2, r7, #8
 8001c38:	2301      	movs	r3, #1
 8001c3a:	2112      	movs	r1, #18
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fc05 	bl	800144c <lsm6dsr_read_reg>
 8001c42:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001c44:	7a3b      	ldrb	r3, [r7, #8]
 8001c46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	701a      	strb	r2, [r3, #0]
  return ret;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001c68:	f107 0208 	add.w	r2, r7, #8
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	2110      	movs	r1, #16
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fbeb 	bl	800144c <lsm6dsr_read_reg>
 8001c76:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <lsm6dsr_xl_filter_lp2_set+0x42>
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	7a3b      	ldrb	r3, [r7, #8]
 8001c88:	f362 0341 	bfi	r3, r2, #1, #1
 8001c8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8001c8e:	f107 0208 	add.w	r2, r7, #8
 8001c92:	2301      	movs	r3, #1
 8001c94:	2110      	movs	r1, #16
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fbf0 	bl	800147c <lsm6dsr_write_reg>
 8001c9c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl,
 8001cb4:	f107 0208 	add.w	r2, r7, #8
 8001cb8:	2301      	movs	r3, #1
 8001cba:	2117      	movs	r1, #23
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fbc5 	bl	800144c <lsm6dsr_read_reg>
 8001cc2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d121      	bne.n	8001d0e <lsm6dsr_xl_hp_path_on_out_set+0x66>
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	f362 0382 	bfi	r3, r2, #2, #1
 8001cda:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	7a3b      	ldrb	r3, [r7, #8]
 8001ce8:	f362 1304 	bfi	r3, r2, #4, #1
 8001cec:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	7a3b      	ldrb	r3, [r7, #8]
 8001cf8:	f362 1347 	bfi	r3, r2, #5, #3
 8001cfc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	2301      	movs	r3, #1
 8001d04:	2117      	movs	r1, #23
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fbb8 	bl	800147c <lsm6dsr_write_reg>
 8001d0c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 8001d24:	f107 0210 	add.w	r2, r7, #16
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2118      	movs	r1, #24
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fb8d 	bl	800144c <lsm6dsr_read_reg>
 8001d32:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d111      	bne.n	8001d5e <lsm6dsr_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	09db      	lsrs	r3, r3, #7
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	7c3b      	ldrb	r3, [r7, #16]
 8001d48:	f362 0341 	bfi	r3, r2, #1, #1
 8001d4c:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8001d4e:	f107 0210 	add.w	r2, r7, #16
 8001d52:	2301      	movs	r3, #1
 8001d54:	2118      	movs	r1, #24
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fb90 	bl	800147c <lsm6dsr_write_reg>
 8001d5c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0) {
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <lsm6dsr_i3c_disable_set+0x5c>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8001d64:	f107 020c 	add.w	r2, r7, #12
 8001d68:	2301      	movs	r3, #1
 8001d6a:	2162      	movs	r1, #98	; 0x62
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fb6d 	bl	800144c <lsm6dsr_read_reg>
 8001d72:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <lsm6dsr_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	7b3b      	ldrb	r3, [r7, #12]
 8001d84:	f362 03c4 	bfi	r3, r2, #3, #2
 8001d88:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8001d8a:	f107 020c 	add.w	r2, r7, #12
 8001d8e:	2301      	movs	r3, #1
 8001d90:	2162      	movs	r1, #98	; 0x62
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fb72 	bl	800147c <lsm6dsr_write_reg>
 8001d98:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001d9a:	697b      	ldr	r3, [r7, #20]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001dae:	2102      	movs	r1, #2
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fedd 	bl	8001b70 <lsm6dsr_mem_bank_set>
 8001db6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <lsm6dsr_fsm_enable_get+0x28>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8001dbe:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	2146      	movs	r1, #70	; 0x46
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fb41 	bl	800144c <lsm6dsr_read_reg>
 8001dca:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <lsm6dsr_fsm_enable_get+0x3e>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	2147      	movs	r1, #71	; 0x47
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fb36 	bl	800144c <lsm6dsr_read_reg>
 8001de0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <lsm6dsr_fsm_enable_get+0x4e>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001de8:	2100      	movs	r1, #0
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fec0 	bl	8001b70 <lsm6dsr_mem_bank_set>
 8001df0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001e06:	2102      	movs	r1, #2
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff feb1 	bl	8001b70 <lsm6dsr_mem_bank_set>
 8001e0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d107      	bne.n	8001e26 <lsm6dsr_fsm_data_rate_get+0x2a>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8001e16:	f107 0208 	add.w	r2, r7, #8
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	215f      	movs	r1, #95	; 0x5f
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fb14 	bl	800144c <lsm6dsr_read_reg>
 8001e24:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <lsm6dsr_fsm_data_rate_get+0x3a>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fe9e 	bl	8001b70 <lsm6dsr_mem_bank_set>
 8001e34:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 8001e36:	7a3b      	ldrb	r3, [r7, #8]
 8001e38:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d81a      	bhi.n	8001e78 <lsm6dsr_fsm_data_rate_get+0x7c>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e61 	.word	0x08001e61
 8001e50:	08001e69 	.word	0x08001e69
 8001e54:	08001e71 	.word	0x08001e71
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
      break;
 8001e5e:	e00f      	b.n	8001e80 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
      break;
 8001e66:	e00b      	b.n	8001e80 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	701a      	strb	r2, [r3, #0]
      break;
 8001e6e:	e007      	b.n	8001e80 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2203      	movs	r2, #3
 8001e74:	701a      	strb	r2, [r3, #0]
      break;
 8001e76:	e003      	b.n	8001e80 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
      break;
 8001e7e:	bf00      	nop
  }

  return ret;
 8001e80:	68fb      	ldr	r3, [r7, #12]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop

08001e8c <myprintf>:

	int len = strlen(buffer);
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, len, -1);
}
*/
void myprintf(char* buffer) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, 100, 100);
 8001e94:	2364      	movs	r3, #100	; 0x64
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <myprintf+0x1c>)
 8001e9c:	f003 ff0e 	bl	8005cbc <HAL_UART_Transmit>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20005e6c 	.word	0x20005e6c

08001eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb2:	f000 fffb 	bl	8002eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb6:	f000 f85d 	bl	8001f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eba:	f000 f951 	bl	8002160 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ebe:	f000 f91f 	bl	8002100 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ec2:	f000 f8ad 	bl	8002020 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ec6:	f000 f8eb 	bl	80020a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  dev_ctx_lsm = lsm6dsr_init();
 8001eca:	4c1c      	ldr	r4, [pc, #112]	; (8001f3c <main+0x90>)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fb72 	bl	80025b8 <lsm6dsr_init>
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8001ede:	4c18      	ldr	r4, [pc, #96]	; (8001f40 <main+0x94>)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fc62 	bl	80027ac <lps22hh_init>
 8001ee8:	463b      	mov	r3, r7
 8001eea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ef2:	f004 fbcf 	bl	8006694 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of fakeEjection */
  fakeEjectionHandle = osThreadNew(StartFakeEjection, NULL, &fakeEjection_attributes);
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <main+0x98>)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4813      	ldr	r0, [pc, #76]	; (8001f48 <main+0x9c>)
 8001efc:	f004 fc32 	bl	8006764 <osThreadNew>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <main+0xa0>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* creation of fakeSensors */
  fakeSensorsHandle = osThreadNew(StartFakeSensors, NULL, &fakeSensors_attributes);
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <main+0xa4>)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4812      	ldr	r0, [pc, #72]	; (8001f54 <main+0xa8>)
 8001f0c:	f004 fc2a 	bl	8006764 <osThreadNew>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <main+0xac>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* creation of fakeTelemetry */
  fakeTelemetryHandle = osThreadNew(StartFakeTelemetry, NULL, &fakeTelemetry_attributes);
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <main+0xb0>)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4811      	ldr	r0, [pc, #68]	; (8001f60 <main+0xb4>)
 8001f1c:	f004 fc22 	bl	8006764 <osThreadNew>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <main+0xb8>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(GPS_rtos, NULL, &GPS_attributes);
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <main+0xbc>)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4810      	ldr	r0, [pc, #64]	; (8001f6c <main+0xc0>)
 8001f2c:	f004 fc1a 	bl	8006764 <osThreadNew>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <main+0xc4>)
 8001f34:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f36:	f004 fbe1 	bl	80066fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <main+0x8e>
 8001f3c:	20005ef0 	.word	0x20005ef0
 8001f40:	20005efc 	.word	0x20005efc
 8001f44:	0800e5a4 	.word	0x0800e5a4
 8001f48:	080021c1 	.word	0x080021c1
 8001f4c:	20004d40 	.word	0x20004d40
 8001f50:	0800e5c8 	.word	0x0800e5c8
 8001f54:	08002211 	.word	0x08002211
 8001f58:	20005f08 	.word	0x20005f08
 8001f5c:	0800e5ec 	.word	0x0800e5ec
 8001f60:	0800237d 	.word	0x0800237d
 8001f64:	20004d44 	.word	0x20004d44
 8001f68:	0800e610 	.word	0x0800e610
 8001f6c:	08002501 	.word	0x08002501
 8001f70:	20002c70 	.word	0x20002c70

08001f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0a6      	sub	sp, #152	; 0x98
 8001f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f7e:	2228      	movs	r2, #40	; 0x28
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f007 fa34 	bl	80093f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2258      	movs	r2, #88	; 0x58
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f007 fa26 	bl	80093f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fac:	2310      	movs	r3, #16
 8001fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 ffbd 	bl	8003f3c <HAL_RCC_OscConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001fc8:	f000 faf0 	bl	80025ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fcc:	230f      	movs	r3, #15
 8001fce:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fe0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 febe 	bl	8004d68 <HAL_RCC_ClockConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ff2:	f000 fadb 	bl	80025ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001ff6:	2323      	movs	r3, #35	; 0x23
 8001ff8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4618      	mov	r0, r3
 800200a:	f003 f915 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002014:	f000 faca 	bl	80025ac <Error_Handler>
  }
}
 8002018:	bf00      	nop
 800201a:	3798      	adds	r7, #152	; 0x98
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_I2C1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <MX_I2C1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_I2C1_Init+0x74>)
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <MX_I2C1_Init+0x7c>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_I2C1_Init+0x74>)
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_I2C1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C1_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C1_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MX_I2C1_Init+0x74>)
 800205c:	f001 f9ec 	bl	8003438 <HAL_I2C_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002066:	f000 faa1 	bl	80025ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <MX_I2C1_Init+0x74>)
 800206e:	f001 fecd 	bl	8003e0c <HAL_I2CEx_ConfigAnalogFilter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002078:	f000 fa98 	bl	80025ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_I2C1_Init+0x74>)
 8002080:	f001 ff0f 	bl	8003ea2 <HAL_I2CEx_ConfigDigitalFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 fa8f 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20002c74 	.word	0x20002c74
 8002098:	40005400 	.word	0x40005400
 800209c:	2000090e 	.word	0x2000090e

080020a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <MX_USART1_UART_Init+0x5c>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART1_UART_Init+0x58>)
 80020e4:	f003 fd9c 	bl	8005c20 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80020ee:	f000 fa5d 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20004cbc 	.word	0x20004cbc
 80020fc:	40013800 	.word	0x40013800

08002100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <MX_USART2_UART_Init+0x5c>)
 8002108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800210c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART2_UART_Init+0x58>)
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART2_UART_Init+0x58>)
 8002144:	f003 fd6c 	bl	8005c20 <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800214e:	f000 fa2d 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20005e6c 	.word	0x20005e6c
 800215c:	40004400 	.word	0x40004400

08002160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MX_GPIO_Init+0x5c>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <MX_GPIO_Init+0x5c>)
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	6153      	str	r3, [r2, #20]
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_GPIO_Init+0x5c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_GPIO_Init+0x5c>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <MX_GPIO_Init+0x5c>)
 8002184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002188:	6153      	str	r3, [r2, #20]
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_GPIO_Init+0x5c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_GPIO_Init+0x5c>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <MX_GPIO_Init+0x5c>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6153      	str	r3, [r2, #20]
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_GPIO_Init+0x5c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <StartFakeEjection>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFakeEjection */
void StartFakeEjection(void *argument)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char* buffer = (char*)malloc(100);
 80021c8:	2064      	movs	r0, #100	; 0x64
 80021ca:	f007 f8fb 	bl	80093c4 <malloc>
 80021ce:	4603      	mov	r3, r0
 80021d0:	60fb      	str	r3, [r7, #12]
	memset(buffer, 0, 100);
 80021d2:	2264      	movs	r2, #100	; 0x64
 80021d4:	2100      	movs	r1, #0
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f007 f90a 	bl	80093f0 <memset>
  for(;;)
  {
	  if(temperature > 30)
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <StartFakeEjection+0x48>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	dd06      	ble.n	80021fe <StartFakeEjection+0x3e>
	  {
		  sprintf(buffer, "EJECT or smthg\r\n");
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <StartFakeEjection+0x4c>)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f008 f8a8 	bl	800a348 <siprintf>
		  myprintf(buffer);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff fe47 	bl	8001e8c <myprintf>
	  }
    osDelay(1000);
 80021fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002202:	f004 fb59 	bl	80068b8 <osDelay>
	  if(temperature > 30)
 8002206:	e7e9      	b.n	80021dc <StartFakeEjection+0x1c>
 8002208:	20000220 	.word	0x20000220
 800220c:	0800e46c 	.word	0x0800e46c

08002210 <StartFakeSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeSensors */
void StartFakeSensors(void *argument)
{
 8002210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002214:	b088      	sub	sp, #32
 8002216:	af04      	add	r7, sp, #16
 8002218:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeSensors */
  /* Infinite loop */
	uint32_t i = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
	char* buffer = (char*)malloc(100);
 800221e:	2064      	movs	r0, #100	; 0x64
 8002220:	f007 f8d0 	bl	80093c4 <malloc>
 8002224:	4603      	mov	r3, r0
 8002226:	60bb      	str	r3, [r7, #8]
	memset(buffer, 0, 100);
 8002228:	2264      	movs	r2, #100	; 0x64
 800222a:	2100      	movs	r1, #0
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	f007 f8df 	bl	80093f0 <memset>
  for(;;)
  {
	  get_pressure(dev_ctx_lps, &pressure);
 8002232:	4a48      	ldr	r2, [pc, #288]	; (8002354 <StartFakeSensors+0x144>)
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <StartFakeSensors+0x148>)
 8002236:	ca07      	ldmia	r2, {r0, r1, r2}
 8002238:	f000 fb06 	bl	8002848 <get_pressure>
	  get_temperature(dev_ctx_lps,  &temperature);
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <StartFakeSensors+0x144>)
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <StartFakeSensors+0x14c>)
 8002240:	ca07      	ldmia	r2, {r0, r1, r2}
 8002242:	f000 fb2d 	bl	80028a0 <get_temperature>
	  get_acceleration(dev_ctx_lsm, acceleration);
 8002246:	4a46      	ldr	r2, [pc, #280]	; (8002360 <StartFakeSensors+0x150>)
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <StartFakeSensors+0x154>)
 800224a:	ca07      	ldmia	r2, {r0, r1, r2}
 800224c:	f000 fa22 	bl	8002694 <get_acceleration>
	  get_angvelocity(dev_ctx_lsm, angular_rate);
 8002250:	4a43      	ldr	r2, [pc, #268]	; (8002360 <StartFakeSensors+0x150>)
 8002252:	4b45      	ldr	r3, [pc, #276]	; (8002368 <StartFakeSensors+0x158>)
 8002254:	ca07      	ldmia	r2, {r0, r1, r2}
 8002256:	f000 fa63 	bl	8002720 <get_angvelocity>
	  sprintf(buffer, "IN acceleration: %f,%f,%f\r\n", acceleration[0], acceleration[1], acceleration[2]);
 800225a:	4b42      	ldr	r3, [pc, #264]	; (8002364 <StartFakeSensors+0x154>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f97a 	bl	8000558 <__aeabi_f2d>
 8002264:	4680      	mov	r8, r0
 8002266:	4689      	mov	r9, r1
 8002268:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <StartFakeSensors+0x154>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f973 	bl	8000558 <__aeabi_f2d>
 8002272:	4604      	mov	r4, r0
 8002274:	460d      	mov	r5, r1
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <StartFakeSensors+0x154>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f96c 	bl	8000558 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002288:	e9cd 4500 	strd	r4, r5, [sp]
 800228c:	4642      	mov	r2, r8
 800228e:	464b      	mov	r3, r9
 8002290:	4936      	ldr	r1, [pc, #216]	; (800236c <StartFakeSensors+0x15c>)
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f008 f858 	bl	800a348 <siprintf>
	  myprintf(buffer);
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f7ff fdf7 	bl	8001e8c <myprintf>
	  memset(buffer, 0, 100);
 800229e:	2264      	movs	r2, #100	; 0x64
 80022a0:	2100      	movs	r1, #0
 80022a2:	68b8      	ldr	r0, [r7, #8]
 80022a4:	f007 f8a4 	bl	80093f0 <memset>
	  sprintf(buffer, "IN angular_rate: %f,%f,%f\r\n", angular_rate[0], angular_rate[1], angular_rate[2]);
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <StartFakeSensors+0x158>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f953 	bl	8000558 <__aeabi_f2d>
 80022b2:	4680      	mov	r8, r0
 80022b4:	4689      	mov	r9, r1
 80022b6:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <StartFakeSensors+0x158>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f94c 	bl	8000558 <__aeabi_f2d>
 80022c0:	4604      	mov	r4, r0
 80022c2:	460d      	mov	r5, r1
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <StartFakeSensors+0x158>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f945 	bl	8000558 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022d6:	e9cd 4500 	strd	r4, r5, [sp]
 80022da:	4642      	mov	r2, r8
 80022dc:	464b      	mov	r3, r9
 80022de:	4924      	ldr	r1, [pc, #144]	; (8002370 <StartFakeSensors+0x160>)
 80022e0:	68b8      	ldr	r0, [r7, #8]
 80022e2:	f008 f831 	bl	800a348 <siprintf>
	  myprintf(buffer);
 80022e6:	68b8      	ldr	r0, [r7, #8]
 80022e8:	f7ff fdd0 	bl	8001e8c <myprintf>
	  memset(buffer, 0, 100);
 80022ec:	2264      	movs	r2, #100	; 0x64
 80022ee:	2100      	movs	r1, #0
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f007 f87d 	bl	80093f0 <memset>
	  sprintf(buffer, "IN pressure: %f\r\n", pressure);
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <StartFakeSensors+0x148>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f92c 	bl	8000558 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	491b      	ldr	r1, [pc, #108]	; (8002374 <StartFakeSensors+0x164>)
 8002306:	68b8      	ldr	r0, [r7, #8]
 8002308:	f008 f81e 	bl	800a348 <siprintf>
	  myprintf(buffer);
 800230c:	68b8      	ldr	r0, [r7, #8]
 800230e:	f7ff fdbd 	bl	8001e8c <myprintf>
	  memset(buffer, 0, 100);
 8002312:	2264      	movs	r2, #100	; 0x64
 8002314:	2100      	movs	r1, #0
 8002316:	68b8      	ldr	r0, [r7, #8]
 8002318:	f007 f86a 	bl	80093f0 <memset>
	  sprintf(buffer, "IN temperature: %f\r\n", temperature);
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <StartFakeSensors+0x14c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f919 	bl	8000558 <__aeabi_f2d>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4913      	ldr	r1, [pc, #76]	; (8002378 <StartFakeSensors+0x168>)
 800232c:	68b8      	ldr	r0, [r7, #8]
 800232e:	f008 f80b 	bl	800a348 <siprintf>
	  myprintf(buffer);
 8002332:	68b8      	ldr	r0, [r7, #8]
 8002334:	f7ff fdaa 	bl	8001e8c <myprintf>
	  memset(buffer, 0, 100);
 8002338:	2264      	movs	r2, #100	; 0x64
 800233a:	2100      	movs	r1, #0
 800233c:	68b8      	ldr	r0, [r7, #8]
 800233e:	f007 f857 	bl	80093f0 <memset>
	  ++i;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3301      	adds	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
    osDelay(1000);
 8002348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800234c:	f004 fab4 	bl	80068b8 <osDelay>
	  get_pressure(dev_ctx_lps, &pressure);
 8002350:	e76f      	b.n	8002232 <StartFakeSensors+0x22>
 8002352:	bf00      	nop
 8002354:	20005efc 	.word	0x20005efc
 8002358:	2000021c 	.word	0x2000021c
 800235c:	20000220 	.word	0x20000220
 8002360:	20005ef0 	.word	0x20005ef0
 8002364:	20000204 	.word	0x20000204
 8002368:	20000210 	.word	0x20000210
 800236c:	0800e480 	.word	0x0800e480
 8002370:	0800e49c 	.word	0x0800e49c
 8002374:	0800e4b8 	.word	0x0800e4b8
 8002378:	0800e4cc 	.word	0x0800e4cc

0800237c <StartFakeTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeTelemetry */
void StartFakeTelemetry(void *argument)
{
 800237c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002380:	b088      	sub	sp, #32
 8002382:	af04      	add	r7, sp, #16
 8002384:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeTelemetry */
  /* Infinite loop */
	char* buffer1 = (char*)malloc(100);
 8002386:	2064      	movs	r0, #100	; 0x64
 8002388:	f007 f81c 	bl	80093c4 <malloc>
 800238c:	4603      	mov	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]
	memset(buffer1, 0, 100);
 8002390:	2264      	movs	r2, #100	; 0x64
 8002392:	2100      	movs	r1, #0
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f007 f82b 	bl	80093f0 <memset>
  for(;;)
  {
	  sprintf(buffer1, "OUT GPS: %f, %f, %f\r\n", latitude, longitude, time);
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <StartFakeTelemetry+0x154>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f8da 	bl	8000558 <__aeabi_f2d>
 80023a4:	4680      	mov	r8, r0
 80023a6:	4689      	mov	r9, r1
 80023a8:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <StartFakeTelemetry+0x158>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8d3 	bl	8000558 <__aeabi_f2d>
 80023b2:	4604      	mov	r4, r0
 80023b4:	460d      	mov	r5, r1
 80023b6:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <StartFakeTelemetry+0x15c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8cc 	bl	8000558 <__aeabi_f2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023c8:	e9cd 4500 	strd	r4, r5, [sp]
 80023cc:	4642      	mov	r2, r8
 80023ce:	464b      	mov	r3, r9
 80023d0:	4942      	ldr	r1, [pc, #264]	; (80024dc <StartFakeTelemetry+0x160>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f007 ffb8 	bl	800a348 <siprintf>
	  myprintf(buffer1);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff fd57 	bl	8001e8c <myprintf>
	  sprintf(buffer1, "OUT acceleration: %f,%f,%f\r\n", acceleration[0], acceleration[1], acceleration[2]);
 80023de:	4b40      	ldr	r3, [pc, #256]	; (80024e0 <StartFakeTelemetry+0x164>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f8b8 	bl	8000558 <__aeabi_f2d>
 80023e8:	4680      	mov	r8, r0
 80023ea:	4689      	mov	r9, r1
 80023ec:	4b3c      	ldr	r3, [pc, #240]	; (80024e0 <StartFakeTelemetry+0x164>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f8b1 	bl	8000558 <__aeabi_f2d>
 80023f6:	4604      	mov	r4, r0
 80023f8:	460d      	mov	r5, r1
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <StartFakeTelemetry+0x164>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f8aa 	bl	8000558 <__aeabi_f2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800240c:	e9cd 4500 	strd	r4, r5, [sp]
 8002410:	4642      	mov	r2, r8
 8002412:	464b      	mov	r3, r9
 8002414:	4933      	ldr	r1, [pc, #204]	; (80024e4 <StartFakeTelemetry+0x168>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f007 ff96 	bl	800a348 <siprintf>
	  myprintf(buffer1);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fd35 	bl	8001e8c <myprintf>
	  memset(buffer1, 0, 100);
 8002422:	2264      	movs	r2, #100	; 0x64
 8002424:	2100      	movs	r1, #0
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f006 ffe2 	bl	80093f0 <memset>
	  sprintf(buffer1, "OUT angular_rate: %f,%f,%f\r\n", angular_rate[0], angular_rate[1], angular_rate[2]);
 800242c:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <StartFakeTelemetry+0x16c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f891 	bl	8000558 <__aeabi_f2d>
 8002436:	4680      	mov	r8, r0
 8002438:	4689      	mov	r9, r1
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <StartFakeTelemetry+0x16c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f88a 	bl	8000558 <__aeabi_f2d>
 8002444:	4604      	mov	r4, r0
 8002446:	460d      	mov	r5, r1
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <StartFakeTelemetry+0x16c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f883 	bl	8000558 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800245a:	e9cd 4500 	strd	r4, r5, [sp]
 800245e:	4642      	mov	r2, r8
 8002460:	464b      	mov	r3, r9
 8002462:	4922      	ldr	r1, [pc, #136]	; (80024ec <StartFakeTelemetry+0x170>)
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f007 ff6f 	bl	800a348 <siprintf>
	  myprintf(buffer1);
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7ff fd0e 	bl	8001e8c <myprintf>
	  memset(buffer1, 0, 100);
 8002470:	2264      	movs	r2, #100	; 0x64
 8002472:	2100      	movs	r1, #0
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f006 ffbb 	bl	80093f0 <memset>
	  sprintf(buffer1, "OUT pressure: %f\r\n", pressure);
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <StartFakeTelemetry+0x174>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f86a 	bl	8000558 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	491a      	ldr	r1, [pc, #104]	; (80024f4 <StartFakeTelemetry+0x178>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f007 ff5c 	bl	800a348 <siprintf>
	  myprintf(buffer1);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff fcfb 	bl	8001e8c <myprintf>
	  memset(buffer1, 0, 100);
 8002496:	2264      	movs	r2, #100	; 0x64
 8002498:	2100      	movs	r1, #0
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f006 ffa8 	bl	80093f0 <memset>
	  sprintf(buffer1, "OUT temperature: %f\r\n", temperature);
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <StartFakeTelemetry+0x17c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f857 	bl	8000558 <__aeabi_f2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4913      	ldr	r1, [pc, #76]	; (80024fc <StartFakeTelemetry+0x180>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f007 ff49 	bl	800a348 <siprintf>
	  myprintf(buffer1);
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff fce8 	bl	8001e8c <myprintf>
	  memset(buffer1, 0, 100);
 80024bc:	2264      	movs	r2, #100	; 0x64
 80024be:	2100      	movs	r1, #0
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f006 ff95 	bl	80093f0 <memset>
    osDelay(5000);
 80024c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80024ca:	f004 f9f5 	bl	80068b8 <osDelay>
	  sprintf(buffer1, "OUT GPS: %f, %f, %f\r\n", latitude, longitude, time);
 80024ce:	e764      	b.n	800239a <StartFakeTelemetry+0x1e>
 80024d0:	20004ec8 	.word	0x20004ec8
 80024d4:	20004e04 	.word	0x20004e04
 80024d8:	20004e08 	.word	0x20004e08
 80024dc:	0800e4e4 	.word	0x0800e4e4
 80024e0:	20000204 	.word	0x20000204
 80024e4:	0800e4fc 	.word	0x0800e4fc
 80024e8:	20000210 	.word	0x20000210
 80024ec:	0800e51c 	.word	0x0800e51c
 80024f0:	2000021c 	.word	0x2000021c
 80024f4:	0800e53c 	.word	0x0800e53c
 80024f8:	20000220 	.word	0x20000220
 80024fc:	0800e550 	.word	0x0800e550

08002500 <GPS_rtos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS_rtos */
void GPS_rtos(void *argument)
{
 8002500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002504:	b088      	sub	sp, #32
 8002506:	af04      	add	r7, sp, #16
 8002508:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPS_rtos */
  /* Infinite loop */
	char* buffer = (char*)malloc(100);
 800250a:	2064      	movs	r0, #100	; 0x64
 800250c:	f006 ff5a 	bl	80093c4 <malloc>
 8002510:	4603      	mov	r3, r0
 8002512:	60fb      	str	r3, [r7, #12]
	memset(buffer, 0, 100);
 8002514:	2264      	movs	r2, #100	; 0x64
 8002516:	2100      	movs	r1, #0
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f006 ff69 	bl	80093f0 <memset>
  for(;;)
  {
	  GPS_Poll(&latitude, &longitude, &time);
 800251e:	4a16      	ldr	r2, [pc, #88]	; (8002578 <GPS_rtos+0x78>)
 8002520:	4916      	ldr	r1, [pc, #88]	; (800257c <GPS_rtos+0x7c>)
 8002522:	4817      	ldr	r0, [pc, #92]	; (8002580 <GPS_rtos+0x80>)
 8002524:	f7fe fbee 	bl	8000d04 <GPS_Poll>
	  sprintf(buffer, "IN GPS: %f, %f, %f\r\n", latitude, longitude, time);
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <GPS_rtos+0x80>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f813 	bl	8000558 <__aeabi_f2d>
 8002532:	4680      	mov	r8, r0
 8002534:	4689      	mov	r9, r1
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <GPS_rtos+0x7c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f80c 	bl	8000558 <__aeabi_f2d>
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <GPS_rtos+0x78>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f805 	bl	8000558 <__aeabi_f2d>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002556:	e9cd 4500 	strd	r4, r5, [sp]
 800255a:	4642      	mov	r2, r8
 800255c:	464b      	mov	r3, r9
 800255e:	4909      	ldr	r1, [pc, #36]	; (8002584 <GPS_rtos+0x84>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f007 fef1 	bl	800a348 <siprintf>
	  myprintf(buffer);
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff fc90 	bl	8001e8c <myprintf>
	  osDelay(1000);
 800256c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002570:	f004 f9a2 	bl	80068b8 <osDelay>
	  GPS_Poll(&latitude, &longitude, &time);
 8002574:	e7d3      	b.n	800251e <GPS_rtos+0x1e>
 8002576:	bf00      	nop
 8002578:	20004e08 	.word	0x20004e08
 800257c:	20004e04 	.word	0x20004e04
 8002580:	20004ec8 	.word	0x20004ec8
 8002584:	0800e568 	.word	0x0800e568

08002588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800259a:	f000 fc9d 	bl	8002ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40001000 	.word	0x40001000

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <Error_Handler+0x8>
	...

080025b8 <lsm6dsr_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSR Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsr_init(void){
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsr;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsr.write_reg = lsm6dsr_write;
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <lsm6dsr_init+0xc8>)
 80025c2:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsr.read_reg = lsm6dsr_read;
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <lsm6dsr_init+0xcc>)
 80025c6:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsr.handle = &hi2c1;
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <lsm6dsr_init+0xd0>)
 80025ca:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80025cc:	200a      	movs	r0, #10
 80025ce:	f000 fa09 	bl	80029e4 <platform_delay>

	/* Check device ID */
	lsm6dsr_device_id_get(&dev_ctx_lsm6dsr, &whoamI_lsm6dsr);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	492d      	ldr	r1, [pc, #180]	; (800268c <lsm6dsr_init+0xd4>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff faef 	bl	8001bbc <lsm6dsr_device_id_get>

	if (whoamI_lsm6dsr != LSM6DSR_ID){
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <lsm6dsr_init+0xd4>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b6b      	cmp	r3, #107	; 0x6b
 80025e4:	d000      	beq.n	80025e8 <lsm6dsr_init+0x30>
		while (1);
 80025e6:	e7fe      	b.n	80025e6 <lsm6dsr_init+0x2e>
	}

	/* Restore default configuration */
	lsm6dsr_reset_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	2101      	movs	r1, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff faf5 	bl	8001bde <lsm6dsr_reset_set>

	do {
	lsm6dsr_reset_get(&dev_ctx_lsm6dsr, &rst_lsm6dsr);
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	4925      	ldr	r1, [pc, #148]	; (8002690 <lsm6dsr_init+0xd8>)
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fb15 	bl	8001c2a <lsm6dsr_reset_get>
	} while (rst_lsm6dsr);
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <lsm6dsr_init+0xd8>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f5      	bne.n	80025f4 <lsm6dsr_init+0x3c>

	/* Disable I3C interface */
	lsm6dsr_i3c_disable_set(&dev_ctx_lsm6dsr, LSM6DSR_I3C_DISABLE);
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fb82 	bl	8001d18 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f9ba 	bl	8001994 <lsm6dsr_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&dev_ctx_lsm6dsr, LSM6DSR_XL_ODR_12Hz5);
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	2101      	movs	r1, #1
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe ff96 	bl	8001558 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&dev_ctx_lsm6dsr, LSM6DSR_GY_ODR_12Hz5);
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f8b2 	bl	800179c <lsm6dsr_gy_data_rate_set>

	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&dev_ctx_lsm6dsr, LSM6DSR_2g);
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe ff64 	bl	800150c <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&dev_ctx_lsm6dsr, LSM6DSR_2000dps);
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	210c      	movs	r1, #12
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f880 	bl	8001750 <lsm6dsr_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&dev_ctx_lsm6dsr, LSM6DSR_LP_ODR_DIV_100);
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2104      	movs	r1, #4
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fb26 	bl	8001ca8 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&dev_ctx_lsm6dsr, PROPERTY_ENABLE);
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fafa 	bl	8001c5c <lsm6dsr_xl_filter_lp2_set>

	return dev_ctx_lsm6dsr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	461c      	mov	r4, r3
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	080028fd 	.word	0x080028fd
 8002684:	08002937 	.word	0x08002937
 8002688:	20002c74 	.word	0x20002c74
 800268c:	20000234 	.word	0x20000234
 8002690:	20000235 	.word	0x20000235

08002694 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsr, float *acceleration_mg){
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	1d3c      	adds	r4, r7, #4
 800269c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026a0:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsr_xl_flag_data_ready_get(&dev_ctx_lsm6dsr, &reg);
 80026a2:	f107 0217 	add.w	r2, r7, #23
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f998 	bl	80019e0 <lsm6dsr_xl_flag_data_ready_get>

	if (reg) {
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02d      	beq.n	8002712 <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80026b6:	2206      	movs	r2, #6
 80026b8:	2100      	movs	r1, #0
 80026ba:	4818      	ldr	r0, [pc, #96]	; (800271c <get_acceleration+0x88>)
 80026bc:	f006 fe98 	bl	80093f0 <memset>
	  lsm6dsr_acceleration_raw_get(&dev_ctx_lsm6dsr, data_raw_acceleration);
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4916      	ldr	r1, [pc, #88]	; (800271c <get_acceleration+0x88>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fa08 	bl	8001ada <lsm6dsr_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <get_acceleration+0x88>)
 80026cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe feeb 	bl	80014ac <lsm6dsr_from_fs2g_to_mg>
 80026d6:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <get_acceleration+0x88>)
 80026e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	1d1c      	adds	r4, r3, #4
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7fe fede 	bl	80014ac <lsm6dsr_from_fs2g_to_mg>
 80026f0:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 80026f4:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <get_acceleration+0x88>)
 80026fa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f103 0408 	add.w	r4, r3, #8
		lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8002704:	4610      	mov	r0, r2
 8002706:	f7fe fed1 	bl	80014ac <lsm6dsr_from_fs2g_to_mg>
 800270a:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 800270e:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	20000224 	.word	0x20000224

08002720 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsr, float *angular_rate_mdps){
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	1d3c      	adds	r4, r7, #4
 8002728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800272c:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsr_gy_flag_data_ready_get(&dev_ctx_lsm6dsr, &reg);
 800272e:	f107 0217 	add.w	r2, r7, #23
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f96b 	bl	8001a12 <lsm6dsr_gy_flag_data_ready_get>

	if (reg) {
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d02d      	beq.n	800279e <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002742:	2206      	movs	r2, #6
 8002744:	2100      	movs	r1, #0
 8002746:	4818      	ldr	r0, [pc, #96]	; (80027a8 <get_angvelocity+0x88>)
 8002748:	f006 fe52 	bl	80093f0 <memset>
	  lsm6dsr_angular_rate_raw_get(&dev_ctx_lsm6dsr, data_raw_angular_rate);
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	4916      	ldr	r1, [pc, #88]	; (80027a8 <get_angvelocity+0x88>)
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff f977 	bl	8001a44 <lsm6dsr_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <get_angvelocity+0x88>)
 8002758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe febd 	bl	80014dc <lsm6dsr_from_fs2000dps_to_mdps>
 8002762:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <get_angvelocity+0x88>)
 800276e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	1d1c      	adds	r4, r3, #4
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8002776:	4610      	mov	r0, r2
 8002778:	f7fe feb0 	bl	80014dc <lsm6dsr_from_fs2000dps_to_mdps>
 800277c:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8002780:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <get_angvelocity+0x88>)
 8002786:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f103 0408 	add.w	r4, r3, #8
		lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8002790:	4610      	mov	r0, r2
 8002792:	f7fe fea3 	bl	80014dc <lsm6dsr_from_fs2000dps_to_mdps>
 8002796:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 800279a:	edc4 7a00 	vstr	s15, [r4]
	}
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000022c 	.word	0x2000022c

080027ac <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <lps22hh_init+0x88>)
 80027b6:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 80027b8:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <lps22hh_init+0x8c>)
 80027ba:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &hi2c1;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <lps22hh_init+0x90>)
 80027be:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80027c0:	200a      	movs	r0, #10
 80027c2:	f000 f90f 	bl	80029e4 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <lps22hh_init+0x94>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	491b      	ldr	r1, [pc, #108]	; (8002840 <lps22hh_init+0x94>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fdea 	bl	80013ac <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <lps22hh_init+0x94>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2bb3      	cmp	r3, #179	; 0xb3
 80027de:	d000      	beq.n	80027e2 <lps22hh_init+0x36>
		while (1); /*manage here device not found */
 80027e0:	e7fe      	b.n	80027e0 <lps22hh_init+0x34>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	2101      	movs	r1, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fdf0 	bl	80013ce <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	4914      	ldr	r1, [pc, #80]	; (8002844 <lps22hh_init+0x98>)
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fe10 	bl	800141a <lps22hh_reset_get>
	} while (rst_lps22hh);
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <lps22hh_init+0x98>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f5      	bne.n	80027ee <lps22hh_init+0x42>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fd0f 	bl	800122c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_10_Hz_LOW_NOISE);
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	2112      	movs	r1, #18
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fd2f 	bl	8001278 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	461c      	mov	r4, r3
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	bf00      	nop
 8002834:	08002971 	.word	0x08002971
 8002838:	080029ab 	.word	0x080029ab
 800283c:	20002c74 	.word	0x20002c74
 8002840:	2000023c 	.word	0x2000023c
 8002844:	2000023d 	.word	0x2000023d

08002848 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	1d3c      	adds	r4, r7, #4
 8002850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002854:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8002856:	f107 0214 	add.w	r2, r7, #20
 800285a:	1d38      	adds	r0, r7, #4
 800285c:	2301      	movs	r3, #1
 800285e:	2127      	movs	r1, #39	; 0x27
 8002860:	f7fe fc82 	bl	8001168 <lps22hh_read_reg>

	if (reg.status.p_da) {
 8002864:	7d3b      	ldrb	r3, [r7, #20]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d011      	beq.n	8002894 <get_pressure+0x4c>
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <get_pressure+0x54>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	4908      	ldr	r1, [pc, #32]	; (800289c <get_pressure+0x54>)
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fd4a 	bl	8001314 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <get_pressure+0x54>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fc9f 	bl	80011c8 <lps22hh_from_lsb_to_hpa>
 800288a:	eef0 7a40 	vmov.f32	s15, s0
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}
 800289c:	20000238 	.word	0x20000238

080028a0 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	1d3c      	adds	r4, r7, #4
 80028a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028ac:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80028ae:	f107 0214 	add.w	r2, r7, #20
 80028b2:	1d38      	adds	r0, r7, #4
 80028b4:	2301      	movs	r3, #1
 80028b6:	2127      	movs	r1, #39	; 0x27
 80028b8:	f7fe fc56 	bl	8001168 <lps22hh_read_reg>

	if (reg.status.t_da) {
 80028bc:	7d3b      	ldrb	r3, [r7, #20]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d012      	beq.n	80028ee <get_temperature+0x4e>
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <get_temperature+0x58>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4909      	ldr	r1, [pc, #36]	; (80028f8 <get_temperature+0x58>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fd47 	bl	8001366 <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <get_temperature+0x58>)
 80028da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fc8a 	bl	80011f8 <lps22hh_from_lsb_to_celsius>
 80028e4:	eef0 7a40 	vmov.f32	s15, s0
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000232 	.word	0x20000232

080028fc <lsm6dsr_write>:
 *
 */
static int32_t lsm6dsr_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af04      	add	r7, sp, #16
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	461a      	mov	r2, r3
 8002908:	460b      	mov	r3, r1
 800290a:	72fb      	strb	r3, [r7, #11]
 800290c:	4613      	mov	r3, r2
 800290e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg,
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	b29a      	uxth	r2, r3
 8002914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	893b      	ldrh	r3, [r7, #8]
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	21d5      	movs	r1, #213	; 0xd5
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fe16 	bl	8003558 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <lsm6dsr_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsr_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b088      	sub	sp, #32
 800293a:	af04      	add	r7, sp, #16
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	460b      	mov	r3, r1
 8002944:	72fb      	strb	r3, [r7, #11]
 8002946:	4613      	mov	r3, r2
 8002948:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800294a:	7afb      	ldrb	r3, [r7, #11]
 800294c:	b29a      	uxth	r2, r3
 800294e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	893b      	ldrh	r3, [r7, #8]
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	21d5      	movs	r1, #213	; 0xd5
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 ff0d 	bl	8003780 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af04      	add	r7, sp, #16
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	460b      	mov	r3, r1
 800297e:	72fb      	strb	r3, [r7, #11]
 8002980:	4613      	mov	r3, r2
 8002982:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	b29a      	uxth	r2, r3
 8002988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298c:	9302      	str	r3, [sp, #8]
 800298e:	893b      	ldrh	r3, [r7, #8]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2301      	movs	r3, #1
 8002998:	21bb      	movs	r1, #187	; 0xbb
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fddc 	bl	8003558 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af04      	add	r7, sp, #16
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	461a      	mov	r2, r3
 80029b6:	460b      	mov	r3, r1
 80029b8:	72fb      	strb	r3, [r7, #11]
 80029ba:	4613      	mov	r3, r2
 80029bc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c6:	9302      	str	r3, [sp, #8]
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2301      	movs	r3, #1
 80029d2:	21bb      	movs	r1, #187	; 0xbb
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fed3 	bl	8003780 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fa93 	bl	8002f18 <HAL_Delay>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_MspInit+0x4c>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_MspInit+0x4c>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6193      	str	r3, [r2, #24]
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_MspInit+0x4c>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_MspInit+0x4c>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_MspInit+0x4c>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	61d3      	str	r3, [r2, #28]
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_MspInit+0x4c>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	210f      	movs	r1, #15
 8002a36:	f06f 0001 	mvn.w	r0, #1
 8002a3a:	f000 fb49 	bl	80030d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_I2C_MspInit+0x7c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d127      	bne.n	8002abe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_I2C_MspInit+0x80>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4a16      	ldr	r2, [pc, #88]	; (8002acc <HAL_I2C_MspInit+0x80>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6153      	str	r3, [r2, #20]
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_I2C_MspInit+0x80>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a86:	23c0      	movs	r3, #192	; 0xc0
 8002a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8a:	2312      	movs	r3, #18
 8002a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a96:	2304      	movs	r3, #4
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <HAL_I2C_MspInit+0x84>)
 8002aa2:	f000 fb3f 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_I2C_MspInit+0x80>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_I2C_MspInit+0x80>)
 8002aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab0:	61d3      	str	r3, [r2, #28]
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_I2C_MspInit+0x80>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40005400 	.word	0x40005400
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	48000400 	.word	0x48000400

08002ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_UART_MspInit+0xd8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d128      	bne.n	8002b48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b00:	6193      	str	r3, [r2, #24]
 8002b02:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b18:	6153      	str	r3, [r2, #20]
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b26:	2330      	movs	r3, #48	; 0x30
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b36:	2307      	movs	r3, #7
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	481c      	ldr	r0, [pc, #112]	; (8002bb4 <HAL_UART_MspInit+0xe0>)
 8002b42:	f000 faef 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b46:	e02d      	b.n	8002ba4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	; (8002bb8 <HAL_UART_MspInit+0xe4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d128      	bne.n	8002ba4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	6153      	str	r3, [r2, #20]
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_UART_MspInit+0xdc>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b82:	230c      	movs	r3, #12
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b92:	2307      	movs	r3, #7
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba0:	f000 fac0 	bl	8003124 <HAL_GPIO_Init>
}
 8002ba4:	bf00      	nop
 8002ba6:	3730      	adds	r7, #48	; 0x30
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	48000800 	.word	0x48000800
 8002bb8:	40004400 	.word	0x40004400

08002bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	2036      	movs	r0, #54	; 0x36
 8002bd2:	f000 fa7d 	bl	80030d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bd6:	2036      	movs	r0, #54	; 0x36
 8002bd8:	f000 fa96 	bl	8003108 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_InitTick+0x9c>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_InitTick+0x9c>)
 8002be2:	f043 0310 	orr.w	r3, r3, #16
 8002be6:	61d3      	str	r3, [r2, #28]
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_InitTick+0x9c>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bf4:	f107 0210 	add.w	r2, r7, #16
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fae8 	bl	80051d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c04:	f002 faa2 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8002c08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <HAL_InitTick+0xa0>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	3b01      	subs	r3, #1
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c26:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c38:	4809      	ldr	r0, [pc, #36]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c3a:	f002 fd1b 	bl	8005674 <HAL_TIM_Base_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c46:	f002 fd77 	bl	8005738 <HAL_TIM_Base_Start_IT>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	e000      	b.n	8002c50 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	20005fc8 	.word	0x20005fc8
 8002c64:	40001000 	.word	0x40001000

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <NMI_Handler+0x4>

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <TIM6_DAC_IRQHandler+0x10>)
 8002c9a:	f002 fdbd 	bl	8005818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20005fc8 	.word	0x20005fc8

08002ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	return 1;
 8002cac:	2301      	movs	r3, #1
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_kill>:

int _kill(int pid, int sig)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cc2:	f006 fa5b 	bl	800917c <__errno>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2216      	movs	r2, #22
 8002cca:	601a      	str	r2, [r3, #0]
	return -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_exit>:

void _exit (int status)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ffe7 	bl	8002cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cea:	e7fe      	b.n	8002cea <_exit+0x12>

08002cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e00a      	b.n	8002d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cfe:	f3af 8000 	nop.w
 8002d02:	4601      	mov	r1, r0
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	60ba      	str	r2, [r7, #8]
 8002d0a:	b2ca      	uxtb	r2, r1
 8002d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbf0      	blt.n	8002cfe <_read+0x12>
	}

return len;
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e009      	b.n	8002d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbf1      	blt.n	8002d38 <_write+0x12>
	}
	return len;
 8002d54:	687b      	ldr	r3, [r7, #4]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_close>:

int _close(int file)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
	return -1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d86:	605a      	str	r2, [r3, #4]
	return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <_isatty>:

int _isatty(int file)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <_sbrk+0x5c>)
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <_sbrk+0x60>)
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <_sbrk+0x64>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <_sbrk+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002df8:	f006 f9c0 	bl	800917c <__errno>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	220c      	movs	r2, #12
 8002e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e06:	e009      	b.n	8002e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <_sbrk+0x64>)
 8002e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20010000 	.word	0x20010000
 8002e28:	00000400 	.word	0x00000400
 8002e2c:	20000240 	.word	0x20000240
 8002e30:	20006068 	.word	0x20006068

08002e34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <SystemInit+0x20>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <SystemInit+0x20>)
 8002e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e5e:	490e      	ldr	r1, [pc, #56]	; (8002e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <LoopForever+0xe>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e74:	4c0b      	ldr	r4, [pc, #44]	; (8002ea4 <LoopForever+0x16>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e82:	f7ff ffd7 	bl	8002e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e86:	f006 fa75 	bl	8009374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e8a:	f7ff f80f 	bl	8001eac <main>

08002e8e <LoopForever>:

LoopForever:
    b LoopForever
 8002e8e:	e7fe      	b.n	8002e8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e98:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e9c:	0800eb3c 	.word	0x0800eb3c
  ldr r2, =_sbss
 8002ea0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002ea4:	20006068 	.word	0x20006068

08002ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ea8:	e7fe      	b.n	8002ea8 <ADC1_2_IRQHandler>
	...

08002eac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_Init+0x28>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_Init+0x28>)
 8002eb6:	f043 0310 	orr.w	r3, r3, #16
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f000 f8fc 	bl	80030ba <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7ff fe7a 	bl	8002bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec8:	f7ff fd98 	bl	80029fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40022000 	.word	0x40022000

08002ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_IncTick+0x20>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_IncTick+0x24>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_IncTick+0x24>)
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	20006014 	.word	0x20006014

08002f00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return uwTick;  
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <HAL_GetTick+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20006014 	.word	0x20006014

08002f18 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff ffee 	bl	8002f00 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f30:	d005      	beq.n	8002f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_Delay+0x44>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f3e:	bf00      	nop
 8002f40:	f7ff ffde 	bl	8002f00 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d8f7      	bhi.n	8002f40 <HAL_Delay+0x28>
  {
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000008 	.word	0x20000008

08002f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f92:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	60d3      	str	r3, [r2, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 0307 	and.w	r3, r3, #7
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0b      	blt.n	8002fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4907      	ldr	r1, [pc, #28]	; (8002ffc <__NVIC_EnableIRQ+0x38>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db0a      	blt.n	800302a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	490c      	ldr	r1, [pc, #48]	; (800304c <__NVIC_SetPriority+0x4c>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	440b      	add	r3, r1
 8003024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003028:	e00a      	b.n	8003040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	; (8003050 <__NVIC_SetPriority+0x50>)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	440b      	add	r3, r1
 800303e:	761a      	strb	r2, [r3, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	bf28      	it	cs
 8003072:	2304      	movcs	r3, #4
 8003074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3304      	adds	r3, #4
 800307a:	2b06      	cmp	r3, #6
 800307c:	d902      	bls.n	8003084 <NVIC_EncodePriority+0x30>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3b03      	subs	r3, #3
 8003082:	e000      	b.n	8003086 <NVIC_EncodePriority+0x32>
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	4313      	orrs	r3, r2
         );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff4c 	bl	8002f60 <__NVIC_SetPriorityGrouping>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e2:	f7ff ff61 	bl	8002fa8 <__NVIC_GetPriorityGrouping>
 80030e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f7ff ffb1 	bl	8003054 <NVIC_EncodePriority>
 80030f2:	4602      	mov	r2, r0
 80030f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff80 	bl	8003000 <__NVIC_SetPriority>
}
 8003100:	bf00      	nop
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff54 	bl	8002fc4 <__NVIC_EnableIRQ>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	e160      	b.n	80033f6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8152 	beq.w	80033f0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d005      	beq.n	8003164 <HAL_GPIO_Init+0x40>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d130      	bne.n	80031c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800319a:	2201      	movs	r2, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0201 	and.w	r2, r3, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d017      	beq.n	8003202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d123      	bne.n	8003256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80ac 	beq.w	80033f0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003298:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4a5d      	ldr	r2, [pc, #372]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6193      	str	r3, [r2, #24]
 80032a4:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b0:	4a59      	ldr	r2, [pc, #356]	; (8003418 <HAL_GPIO_Init+0x2f4>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032da:	d025      	beq.n	8003328 <HAL_GPIO_Init+0x204>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a4f      	ldr	r2, [pc, #316]	; (800341c <HAL_GPIO_Init+0x2f8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d01f      	beq.n	8003324 <HAL_GPIO_Init+0x200>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a4e      	ldr	r2, [pc, #312]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d019      	beq.n	8003320 <HAL_GPIO_Init+0x1fc>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a4d      	ldr	r2, [pc, #308]	; (8003424 <HAL_GPIO_Init+0x300>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_GPIO_Init+0x1f8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a4c      	ldr	r2, [pc, #304]	; (8003428 <HAL_GPIO_Init+0x304>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00d      	beq.n	8003318 <HAL_GPIO_Init+0x1f4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a4b      	ldr	r2, [pc, #300]	; (800342c <HAL_GPIO_Init+0x308>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <HAL_GPIO_Init+0x1f0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <HAL_GPIO_Init+0x30c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_GPIO_Init+0x1ec>
 800330c:	2306      	movs	r3, #6
 800330e:	e00c      	b.n	800332a <HAL_GPIO_Init+0x206>
 8003310:	2307      	movs	r3, #7
 8003312:	e00a      	b.n	800332a <HAL_GPIO_Init+0x206>
 8003314:	2305      	movs	r3, #5
 8003316:	e008      	b.n	800332a <HAL_GPIO_Init+0x206>
 8003318:	2304      	movs	r3, #4
 800331a:	e006      	b.n	800332a <HAL_GPIO_Init+0x206>
 800331c:	2303      	movs	r3, #3
 800331e:	e004      	b.n	800332a <HAL_GPIO_Init+0x206>
 8003320:	2302      	movs	r3, #2
 8003322:	e002      	b.n	800332a <HAL_GPIO_Init+0x206>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_GPIO_Init+0x206>
 8003328:	2300      	movs	r3, #0
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	f002 0203 	and.w	r2, r2, #3
 8003330:	0092      	lsls	r2, r2, #2
 8003332:	4093      	lsls	r3, r2
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800333a:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_GPIO_Init+0x2f4>)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003348:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_GPIO_Init+0x310>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800336c:	4a31      	ldr	r2, [pc, #196]	; (8003434 <HAL_GPIO_Init+0x310>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_GPIO_Init+0x310>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003396:	4a27      	ldr	r2, [pc, #156]	; (8003434 <HAL_GPIO_Init+0x310>)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_GPIO_Init+0x310>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_GPIO_Init+0x310>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_GPIO_Init+0x310>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033ea:	4a12      	ldr	r2, [pc, #72]	; (8003434 <HAL_GPIO_Init+0x310>)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3301      	adds	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	f47f ae97 	bne.w	8003134 <HAL_GPIO_Init+0x10>
  }
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40021000 	.word	0x40021000
 8003418:	40010000 	.word	0x40010000
 800341c:	48000400 	.word	0x48000400
 8003420:	48000800 	.word	0x48000800
 8003424:	48000c00 	.word	0x48000c00
 8003428:	48001000 	.word	0x48001000
 800342c:	48001400 	.word	0x48001400
 8003430:	48001800 	.word	0x48001800
 8003434:	40010400 	.word	0x40010400

08003438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e081      	b.n	800354e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff faf4 	bl	8002a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e006      	b.n	80034c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d104      	bne.n	80034d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	460b      	mov	r3, r1
 800356c:	813b      	strh	r3, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 80f9 	bne.w	8003772 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_I2C_Mem_Write+0x34>
 8003586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003592:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0ed      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Mem_Write+0x4e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0e6      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ae:	f7ff fca7 	bl	8002f00 <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2319      	movs	r3, #25
 80035ba:	2201      	movs	r2, #1
 80035bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fac3 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0d1      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035f8:	88f8      	ldrh	r0, [r7, #6]
 80035fa:	893a      	ldrh	r2, [r7, #8]
 80035fc:	8979      	ldrh	r1, [r7, #10]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	4603      	mov	r3, r0
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f9d3 	bl	80039b4 <I2C_RequestMemoryWrite>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0a9      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2bff      	cmp	r3, #255	; 0xff
 8003628:	d90e      	bls.n	8003648 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	b2da      	uxtb	r2, r3
 8003636:	8979      	ldrh	r1, [r7, #10]
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fbb5 	bl	8003db0 <I2C_TransferConfig>
 8003646:	e00f      	b.n	8003668 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	b2da      	uxtb	r2, r3
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fba4 	bl	8003db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 faad 	bl	8003bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e07b      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d034      	beq.n	8003720 <HAL_I2C_Mem_Write+0x1c8>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d130      	bne.n	8003720 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	2200      	movs	r2, #0
 80036c6:	2180      	movs	r1, #128	; 0x80
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fa3f 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e04d      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2bff      	cmp	r3, #255	; 0xff
 80036e0:	d90e      	bls.n	8003700 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	22ff      	movs	r2, #255	; 0xff
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fb59 	bl	8003db0 <I2C_TransferConfig>
 80036fe:	e00f      	b.n	8003720 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	b2da      	uxtb	r2, r3
 8003710:	8979      	ldrh	r1, [r7, #10]
 8003712:	2300      	movs	r3, #0
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fb48 	bl	8003db0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d19e      	bne.n	8003668 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa8c 	bl	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e01a      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2220      	movs	r2, #32
 8003744:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_I2C_Mem_Write+0x224>)
 8003752:	400b      	ands	r3, r1
 8003754:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	fe00e800 	.word	0xfe00e800

08003780 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	461a      	mov	r2, r3
 800378e:	4603      	mov	r3, r0
 8003790:	817b      	strh	r3, [r7, #10]
 8003792:	460b      	mov	r3, r1
 8003794:	813b      	strh	r3, [r7, #8]
 8003796:	4613      	mov	r3, r2
 8003798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	f040 80fd 	bne.w	80039a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x34>
 80037ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0f1      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Mem_Read+0x4e>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e0ea      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037d6:	f7ff fb93 	bl	8002f00 <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2319      	movs	r3, #25
 80037e2:	2201      	movs	r2, #1
 80037e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f9af 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0d5      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2222      	movs	r2, #34	; 0x22
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2240      	movs	r2, #64	; 0x40
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a3a      	ldr	r2, [r7, #32]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003820:	88f8      	ldrh	r0, [r7, #6]
 8003822:	893a      	ldrh	r2, [r7, #8]
 8003824:	8979      	ldrh	r1, [r7, #10]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4603      	mov	r3, r0
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f913 	bl	8003a5c <I2C_RequestMemoryRead>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0ad      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2bff      	cmp	r3, #255	; 0xff
 8003850:	d90e      	bls.n	8003870 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	22ff      	movs	r2, #255	; 0xff
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	b2da      	uxtb	r2, r3
 800385e:	8979      	ldrh	r1, [r7, #10]
 8003860:	4b52      	ldr	r3, [pc, #328]	; (80039ac <HAL_I2C_Mem_Read+0x22c>)
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 faa1 	bl	8003db0 <I2C_TransferConfig>
 800386e:	e00f      	b.n	8003890 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	b2da      	uxtb	r2, r3
 8003880:	8979      	ldrh	r1, [r7, #10]
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_I2C_Mem_Read+0x22c>)
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa90 	bl	8003db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	2200      	movs	r2, #0
 8003898:	2104      	movs	r1, #4
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f956 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07c      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d034      	beq.n	8003950 <HAL_I2C_Mem_Read+0x1d0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d130      	bne.n	8003950 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f927 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e04d      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2bff      	cmp	r3, #255	; 0xff
 8003910:	d90e      	bls.n	8003930 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	b2da      	uxtb	r2, r3
 800391e:	8979      	ldrh	r1, [r7, #10]
 8003920:	2300      	movs	r3, #0
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa41 	bl	8003db0 <I2C_TransferConfig>
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	b2da      	uxtb	r2, r3
 8003940:	8979      	ldrh	r1, [r7, #10]
 8003942:	2300      	movs	r3, #0
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa30 	bl	8003db0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d19a      	bne.n	8003890 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f974 	bl	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e01a      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2220      	movs	r2, #32
 8003974:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_I2C_Mem_Read+0x230>)
 8003982:	400b      	ands	r3, r1
 8003984:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	80002400 	.word	0x80002400
 80039b0:	fe00e800 	.word	0xfe00e800

080039b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	817b      	strh	r3, [r7, #10]
 80039c6:	460b      	mov	r3, r1
 80039c8:	813b      	strh	r3, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	8979      	ldrh	r1, [r7, #10]
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <I2C_RequestMemoryWrite+0xa4>)
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f9e7 	bl	8003db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f8f0 	bl	8003bcc <I2C_WaitOnTXISFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e02c      	b.n	8003a50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039fc:	893b      	ldrh	r3, [r7, #8]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28
 8003a06:	e015      	b.n	8003a34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a08:	893b      	ldrh	r3, [r7, #8]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	69b9      	ldr	r1, [r7, #24]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f8d6 	bl	8003bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e012      	b.n	8003a50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2a:	893b      	ldrh	r3, [r7, #8]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f884 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	80002000 	.word	0x80002000

08003a5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	4608      	mov	r0, r1
 8003a66:	4611      	mov	r1, r2
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	817b      	strh	r3, [r7, #10]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	813b      	strh	r3, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	8979      	ldrh	r1, [r7, #10]
 8003a7c:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <I2C_RequestMemoryRead+0xa4>)
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f994 	bl	8003db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f89d 	bl	8003bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e02c      	b.n	8003af6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d105      	bne.n	8003aae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003aac:	e015      	b.n	8003ada <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aae:	893b      	ldrh	r3, [r7, #8]
 8003ab0:	0a1b      	lsrs	r3, r3, #8
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f883 	bl	8003bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e012      	b.n	8003af6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad0:	893b      	ldrh	r3, [r7, #8]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2140      	movs	r1, #64	; 0x40
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f831 	bl	8003b4c <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	80002000 	.word	0x80002000

08003b04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d103      	bne.n	8003b22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d007      	beq.n	8003b40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	619a      	str	r2, [r3, #24]
  }
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5c:	e022      	b.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b64:	d01e      	beq.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7ff f9cb 	bl	8002f00 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d113      	bne.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e00f      	b.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d0cd      	beq.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bd8:	e02c      	b.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f870 	bl	8003cc4 <I2C_IsAcknowledgeFailed>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e02a      	b.n	8003c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf4:	d01e      	beq.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7ff f983 	bl	8002f00 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d113      	bne.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e007      	b.n	8003c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d1cb      	bne.n	8003bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c58:	e028      	b.n	8003cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f830 	bl	8003cc4 <I2C_IsAcknowledgeFailed>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e026      	b.n	8003cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7ff f947 	bl	8002f00 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d113      	bne.n	8003cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e007      	b.n	8003cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d1cf      	bne.n	8003c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d161      	bne.n	8003da2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cec:	d02b      	beq.n	8003d46 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cfc:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cfe:	e022      	b.n	8003d46 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d06:	d01e      	beq.n	8003d46 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d08:	f7ff f8fa 	bl	8002f00 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <I2C_IsAcknowledgeFailed+0x5a>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e02e      	b.n	8003da4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d1d5      	bne.n	8003d00 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2220      	movs	r2, #32
 8003d62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fecd 	bl	8003b04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <I2C_IsAcknowledgeFailed+0xe8>)
 8003d76:	400b      	ands	r3, r1
 8003d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f043 0204 	orr.w	r2, r3, #4
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	fe00e800 	.word	0xfe00e800

08003db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	0d5b      	lsrs	r3, r3, #21
 8003dcc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <I2C_TransferConfig+0x58>)
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	ea02 0103 	and.w	r1, r2, r3
 8003dda:	897b      	ldrh	r3, [r7, #10]
 8003ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003de0:	7a7b      	ldrb	r3, [r7, #9]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	03ff63ff 	.word	0x03ff63ff

08003e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d138      	bne.n	8003e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e032      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d139      	bne.n	8003f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e033      	b.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2224      	movs	r2, #36	; 0x24
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f000 bf01 	b.w	8004d58 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8160 	beq.w	8004226 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f66:	4bae      	ldr	r3, [pc, #696]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d00c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f72:	4bab      	ldr	r3, [pc, #684]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d159      	bne.n	8004032 <HAL_RCC_OscConfig+0xf6>
 8003f7e:	4ba8      	ldr	r3, [pc, #672]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8a:	d152      	bne.n	8004032 <HAL_RCC_OscConfig+0xf6>
 8003f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fa0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d102      	bne.n	8003fbe <HAL_RCC_OscConfig+0x82>
 8003fb8:	4b99      	ldr	r3, [pc, #612]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	e015      	b.n	8003fea <HAL_RCC_OscConfig+0xae>
 8003fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003fda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003fe6:	4b8e      	ldr	r3, [pc, #568]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003ff2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003ff6:	fa92 f2a2 	rbit	r2, r2
 8003ffa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003ffe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004002:	fab2 f282 	clz	r2, r2
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	f042 0220 	orr.w	r2, r2, #32
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	f002 021f 	and.w	r2, r2, #31
 8004012:	2101      	movs	r1, #1
 8004014:	fa01 f202 	lsl.w	r2, r1, r2
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8102 	beq.w	8004224 <HAL_RCC_OscConfig+0x2e8>
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 80fc 	bne.w	8004224 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f000 be93 	b.w	8004d58 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d106      	bne.n	800404c <HAL_RCC_OscConfig+0x110>
 800403e:	4b78      	ldr	r3, [pc, #480]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a77      	ldr	r2, [pc, #476]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e030      	b.n	80040ae <HAL_RCC_OscConfig+0x172>
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x134>
 8004056:	4b72      	ldr	r3, [pc, #456]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a71      	ldr	r2, [pc, #452]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 800405c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b6f      	ldr	r3, [pc, #444]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6e      	ldr	r2, [pc, #440]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e01e      	b.n	80040ae <HAL_RCC_OscConfig+0x172>
 8004070:	1d3b      	adds	r3, r7, #4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407a:	d10c      	bne.n	8004096 <HAL_RCC_OscConfig+0x15a>
 800407c:	4b68      	ldr	r3, [pc, #416]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a67      	ldr	r2, [pc, #412]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a64      	ldr	r2, [pc, #400]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 800408e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	e00b      	b.n	80040ae <HAL_RCC_OscConfig+0x172>
 8004096:	4b62      	ldr	r3, [pc, #392]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a61      	ldr	r2, [pc, #388]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 800409c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b5f      	ldr	r3, [pc, #380]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a5e      	ldr	r2, [pc, #376]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 80040a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d059      	beq.n	800416c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe ff22 	bl	8002f00 <HAL_GetTick>
 80040bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c2:	f7fe ff1d 	bl	8002f00 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d902      	bls.n	80040d8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	f000 be40 	b.w	8004d58 <HAL_RCC_OscConfig+0xe1c>
 80040d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80040ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d102      	bne.n	800410a <HAL_RCC_OscConfig+0x1ce>
 8004104:	4b46      	ldr	r3, [pc, #280]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x1fa>
 800410a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800411e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004122:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004126:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800413a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800413e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004142:	fa92 f2a2 	rbit	r2, r2
 8004146:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800414a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800414e:	fab2 f282 	clz	r2, r2
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	f042 0220 	orr.w	r2, r2, #32
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	f002 021f 	and.w	r2, r2, #31
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ab      	beq.n	80040c2 <HAL_RCC_OscConfig+0x186>
 800416a:	e05c      	b.n	8004226 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe fec8 	bl	8002f00 <HAL_GetTick>
 8004170:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004174:	e00a      	b.n	800418c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004176:	f7fe fec3 	bl	8002f00 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d902      	bls.n	800418c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	f000 bde6 	b.w	8004d58 <HAL_RCC_OscConfig+0xe1c>
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80041a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d102      	bne.n	80041be <HAL_RCC_OscConfig+0x282>
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	e015      	b.n	80041ea <HAL_RCC_OscConfig+0x2ae>
 80041be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80041d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80041da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_RCC_OscConfig+0x2e4>)
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80041f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80041f6:	fa92 f2a2 	rbit	r2, r2
 80041fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80041fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004202:	fab2 f282 	clz	r2, r2
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	f042 0220 	orr.w	r2, r2, #32
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f002 021f 	and.w	r2, r2, #31
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f202 	lsl.w	r2, r1, r2
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ab      	bne.n	8004176 <HAL_RCC_OscConfig+0x23a>
 800421e:	e002      	b.n	8004226 <HAL_RCC_OscConfig+0x2ea>
 8004220:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8170 	beq.w	8004516 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004236:	4bd0      	ldr	r3, [pc, #832]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004242:	4bcd      	ldr	r3, [pc, #820]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d16d      	bne.n	800432a <HAL_RCC_OscConfig+0x3ee>
 800424e:	4bca      	ldr	r3, [pc, #808]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d166      	bne.n	800432a <HAL_RCC_OscConfig+0x3ee>
 800425c:	2302      	movs	r3, #2
 800425e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800426e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d102      	bne.n	800428c <HAL_RCC_OscConfig+0x350>
 8004286:	4bbc      	ldr	r3, [pc, #752]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	e013      	b.n	80042b4 <HAL_RCC_OscConfig+0x378>
 800428c:	2302      	movs	r3, #2
 800428e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800429e:	2302      	movs	r3, #2
 80042a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80042a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80042b0:	4bb1      	ldr	r3, [pc, #708]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2202      	movs	r2, #2
 80042b6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80042ba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80042be:	fa92 f2a2 	rbit	r2, r2
 80042c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80042c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80042ca:	fab2 f282 	clz	r2, r2
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	f042 0220 	orr.w	r2, r2, #32
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	f002 021f 	and.w	r2, r2, #31
 80042da:	2101      	movs	r1, #1
 80042dc:	fa01 f202 	lsl.w	r2, r1, r2
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_RCC_OscConfig+0x3ba>
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d002      	beq.n	80042f6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f000 bd31 	b.w	8004d58 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f6:	4ba0      	ldr	r3, [pc, #640]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	21f8      	movs	r1, #248	; 0xf8
 8004306:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800430e:	fa91 f1a1 	rbit	r1, r1
 8004312:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004316:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800431a:	fab1 f181 	clz	r1, r1
 800431e:	b2c9      	uxtb	r1, r1
 8004320:	408b      	lsls	r3, r1
 8004322:	4995      	ldr	r1, [pc, #596]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004328:	e0f5      	b.n	8004516 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8085 	beq.w	8004440 <HAL_RCC_OscConfig+0x504>
 8004336:	2301      	movs	r3, #1
 8004338:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004348:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004356:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	461a      	mov	r2, r3
 800435e:	2301      	movs	r3, #1
 8004360:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fe fdcd 	bl	8002f00 <HAL_GetTick>
 8004366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436c:	f7fe fdc8 	bl	8002f00 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d902      	bls.n	8004382 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	f000 bceb 	b.w	8004d58 <HAL_RCC_OscConfig+0xe1c>
 8004382:	2302      	movs	r3, #2
 8004384:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004394:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_OscConfig+0x476>
 80043ac:	4b72      	ldr	r3, [pc, #456]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	e013      	b.n	80043da <HAL_RCC_OscConfig+0x49e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80043c4:	2302      	movs	r3, #2
 80043c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80043ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80043d6:	4b68      	ldr	r3, [pc, #416]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	2202      	movs	r2, #2
 80043dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80043e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80043e4:	fa92 f2a2 	rbit	r2, r2
 80043e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80043ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	f002 021f 	and.w	r2, r2, #31
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f202 	lsl.w	r2, r1, r2
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0af      	beq.n	800436c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b5a      	ldr	r3, [pc, #360]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	21f8      	movs	r1, #248	; 0xf8
 800441c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004424:	fa91 f1a1 	rbit	r1, r1
 8004428:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800442c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004430:	fab1 f181 	clz	r1, r1
 8004434:	b2c9      	uxtb	r1, r1
 8004436:	408b      	lsls	r3, r1
 8004438:	494f      	ldr	r1, [pc, #316]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
 800443e:	e06a      	b.n	8004516 <HAL_RCC_OscConfig+0x5da>
 8004440:	2301      	movs	r3, #1
 8004442:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004452:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	461a      	mov	r2, r3
 8004468:	2300      	movs	r3, #0
 800446a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fe fd48 	bl	8002f00 <HAL_GetTick>
 8004470:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004476:	f7fe fd43 	bl	8002f00 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d902      	bls.n	800448c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	f000 bc66 	b.w	8004d58 <HAL_RCC_OscConfig+0xe1c>
 800448c:	2302      	movs	r3, #2
 800448e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800449e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_RCC_OscConfig+0x580>
 80044b6:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	e013      	b.n	80044e4 <HAL_RCC_OscConfig+0x5a8>
 80044bc:	2302      	movs	r3, #2
 80044be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80044ce:	2302      	movs	r3, #2
 80044d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80044d8:	fa93 f3a3 	rbit	r3, r3
 80044dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <HAL_RCC_OscConfig+0x63c>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	2202      	movs	r2, #2
 80044e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80044ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80044ee:	fa92 f2a2 	rbit	r2, r2
 80044f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80044f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f042 0220 	orr.w	r2, r2, #32
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	f002 021f 	and.w	r2, r2, #31
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f202 	lsl.w	r2, r1, r2
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1af      	bne.n	8004476 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80da 	beq.w	80046da <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d069      	beq.n	8004604 <HAL_RCC_OscConfig+0x6c8>
 8004530:	2301      	movs	r3, #1
 8004532:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004542:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x640>)
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	461a      	mov	r2, r3
 8004556:	2301      	movs	r3, #1
 8004558:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe fcd1 	bl	8002f00 <HAL_GetTick>
 800455e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	e00d      	b.n	8004580 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004564:	f7fe fccc 	bl	8002f00 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d905      	bls.n	8004580 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e3ef      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
 8004578:	40021000 	.word	0x40021000
 800457c:	10908120 	.word	0x10908120
 8004580:	2302      	movs	r3, #2
 8004582:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458a:	fa93 f2a3 	rbit	r2, r3
 800458e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004598:	2202      	movs	r2, #2
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	fa93 f2a3 	rbit	r2, r3
 80045a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80045b0:	2202      	movs	r2, #2
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80045c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c4:	4ba4      	ldr	r3, [pc, #656]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80045c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80045cc:	2102      	movs	r1, #2
 80045ce:	6019      	str	r1, [r3, #0]
 80045d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	fa93 f1a3 	rbit	r1, r3
 80045da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80045de:	6019      	str	r1, [r3, #0]
  return result;
 80045e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2101      	movs	r1, #1
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0b0      	beq.n	8004564 <HAL_RCC_OscConfig+0x628>
 8004602:	e06a      	b.n	80046da <HAL_RCC_OscConfig+0x79e>
 8004604:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	fa93 f2a3 	rbit	r2, r3
 8004616:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800461a:	601a      	str	r2, [r3, #0]
  return result;
 800461c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004620:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	4b8c      	ldr	r3, [pc, #560]	; (800485c <HAL_RCC_OscConfig+0x920>)
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fe fc63 	bl	8002f00 <HAL_GetTick>
 800463a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463e:	e009      	b.n	8004654 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004640:	f7fe fc5e 	bl	8002f00 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e381      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
 8004654:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004658:	2202      	movs	r2, #2
 800465a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	fa93 f2a3 	rbit	r2, r3
 8004666:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fa93 f2a3 	rbit	r2, r3
 800467e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	fa93 f2a3 	rbit	r2, r3
 8004696:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800469a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469c:	4b6e      	ldr	r3, [pc, #440]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 800469e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80046a4:	2102      	movs	r1, #2
 80046a6:	6019      	str	r1, [r3, #0]
 80046a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	fa93 f1a3 	rbit	r1, r3
 80046b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80046b6:	6019      	str	r1, [r3, #0]
  return result;
 80046b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2101      	movs	r1, #1
 80046d0:	fa01 f303 	lsl.w	r3, r1, r3
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1b2      	bne.n	8004640 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8157 	beq.w	8004998 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f0:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d112      	bne.n	8004722 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fc:	4b56      	ldr	r3, [pc, #344]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4a55      	ldr	r2, [pc, #340]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004706:	61d3      	str	r3, [r2, #28]
 8004708:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004722:	4b4f      	ldr	r3, [pc, #316]	; (8004860 <HAL_RCC_OscConfig+0x924>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11a      	bne.n	8004764 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472e:	4b4c      	ldr	r3, [pc, #304]	; (8004860 <HAL_RCC_OscConfig+0x924>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a4b      	ldr	r2, [pc, #300]	; (8004860 <HAL_RCC_OscConfig+0x924>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fe fbe1 	bl	8002f00 <HAL_GetTick>
 800473e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	e009      	b.n	8004758 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004744:	f7fe fbdc 	bl	8002f00 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e2ff      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b41      	ldr	r3, [pc, #260]	; (8004860 <HAL_RCC_OscConfig+0x924>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0ef      	beq.n	8004744 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d106      	bne.n	800477c <HAL_RCC_OscConfig+0x840>
 800476e:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4a39      	ldr	r2, [pc, #228]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	6213      	str	r3, [r2, #32]
 800477a:	e02f      	b.n	80047dc <HAL_RCC_OscConfig+0x8a0>
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x864>
 8004786:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a33      	ldr	r2, [pc, #204]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a30      	ldr	r2, [pc, #192]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
 800479e:	e01d      	b.n	80047dc <HAL_RCC_OscConfig+0x8a0>
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x888>
 80047aa:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	6213      	str	r3, [r2, #32]
 80047b6:	4b28      	ldr	r3, [pc, #160]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4a27      	ldr	r2, [pc, #156]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6213      	str	r3, [r2, #32]
 80047c2:	e00b      	b.n	80047dc <HAL_RCC_OscConfig+0x8a0>
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4a23      	ldr	r2, [pc, #140]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	6213      	str	r3, [r2, #32]
 80047d0:	4b21      	ldr	r3, [pc, #132]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 80047d6:	f023 0304 	bic.w	r3, r3, #4
 80047da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d06a      	beq.n	80048bc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e6:	f7fe fb8b 	bl	8002f00 <HAL_GetTick>
 80047ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fe fb86 	bl	8002f00 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e2a7      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
 8004808:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800480c:	2202      	movs	r2, #2
 800480e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	fa93 f2a3 	rbit	r2, r3
 800481a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004824:	2202      	movs	r2, #2
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	fa93 f2a3 	rbit	r2, r3
 8004832:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004836:	601a      	str	r2, [r3, #0]
  return result;
 8004838:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800483c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d108      	bne.n	8004864 <HAL_RCC_OscConfig+0x928>
 8004852:	4b01      	ldr	r3, [pc, #4]	; (8004858 <HAL_RCC_OscConfig+0x91c>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	e013      	b.n	8004880 <HAL_RCC_OscConfig+0x944>
 8004858:	40021000 	.word	0x40021000
 800485c:	10908120 	.word	0x10908120
 8004860:	40007000 	.word	0x40007000
 8004864:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004868:	2202      	movs	r2, #2
 800486a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	fa93 f2a3 	rbit	r2, r3
 8004876:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	4bc0      	ldr	r3, [pc, #768]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004884:	2102      	movs	r1, #2
 8004886:	6011      	str	r1, [r2, #0]
 8004888:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	fa92 f1a2 	rbit	r1, r2
 8004892:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004896:	6011      	str	r1, [r2, #0]
  return result;
 8004898:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	fab2 f282 	clz	r2, r2
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	f002 021f 	and.w	r2, r2, #31
 80048ae:	2101      	movs	r1, #1
 80048b0:	fa01 f202 	lsl.w	r2, r1, r2
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d09a      	beq.n	80047f0 <HAL_RCC_OscConfig+0x8b4>
 80048ba:	e063      	b.n	8004984 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fe fb20 	bl	8002f00 <HAL_GetTick>
 80048c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c4:	e00b      	b.n	80048de <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fe fb1b 	bl	8002f00 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e23c      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
 80048de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048e2:	2202      	movs	r2, #2
 80048e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f2a3 	rbit	r2, r3
 80048f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80048fa:	2202      	movs	r2, #2
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fa93 f2a3 	rbit	r2, r3
 8004908:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800490c:	601a      	str	r2, [r3, #0]
  return result;
 800490e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004912:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004914:	fab3 f383 	clz	r3, r3
 8004918:	b2db      	uxtb	r3, r3
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f043 0302 	orr.w	r3, r3, #2
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d102      	bne.n	800492e <HAL_RCC_OscConfig+0x9f2>
 8004928:	4b95      	ldr	r3, [pc, #596]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	e00d      	b.n	800494a <HAL_RCC_OscConfig+0xa0e>
 800492e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004932:	2202      	movs	r2, #2
 8004934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	fa93 f2a3 	rbit	r2, r3
 8004940:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	4b8e      	ldr	r3, [pc, #568]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800494e:	2102      	movs	r1, #2
 8004950:	6011      	str	r1, [r2, #0]
 8004952:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	fa92 f1a2 	rbit	r1, r2
 800495c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004960:	6011      	str	r1, [r2, #0]
  return result;
 8004962:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	fab2 f282 	clz	r2, r2
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	f002 021f 	and.w	r2, r2, #31
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f202 	lsl.w	r2, r1, r2
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1a0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004984:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498c:	4b7c      	ldr	r3, [pc, #496]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	4a7b      	ldr	r2, [pc, #492]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004998:	1d3b      	adds	r3, r7, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 81d9 	beq.w	8004d56 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a4:	4b76      	ldr	r3, [pc, #472]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	f000 81a6 	beq.w	8004cfe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	f040 811e 	bne.w	8004bfa <HAL_RCC_OscConfig+0xcbe>
 80049be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80049c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049d6:	601a      	str	r2, [r3, #0]
  return result;
 80049d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	461a      	mov	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fe fa84 	bl	8002f00 <HAL_GetTick>
 80049f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fc:	e009      	b.n	8004a12 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fe fa7f 	bl	8002f00 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1a2      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
 8004a12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	fa93 f2a3 	rbit	r2, r3
 8004a26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a2a:	601a      	str	r2, [r3, #0]
  return result;
 8004a2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d102      	bne.n	8004a4c <HAL_RCC_OscConfig+0xb10>
 8004a46:	4b4e      	ldr	r3, [pc, #312]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	e01b      	b.n	8004a84 <HAL_RCC_OscConfig+0xb48>
 8004a4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	fa93 f2a3 	rbit	r2, r3
 8004a60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	fa93 f2a3 	rbit	r2, r3
 8004a7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004a88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a8c:	6011      	str	r1, [r2, #0]
 8004a8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	fa92 f1a2 	rbit	r1, r2
 8004a98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004a9c:	6011      	str	r1, [r2, #0]
  return result;
 8004a9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	fab2 f282 	clz	r2, r2
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	f042 0220 	orr.w	r2, r2, #32
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	f002 021f 	and.w	r2, r2, #31
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d19e      	bne.n	80049fe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac0:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	f023 020f 	bic.w	r2, r3, #15
 8004ac8:	1d3b      	adds	r3, r7, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	492c      	ldr	r1, [pc, #176]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004ad4:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a19      	ldr	r1, [r3, #32]
 8004ae2:	1d3b      	adds	r3, r7, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	4925      	ldr	r1, [pc, #148]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]
 8004af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	fa93 f2a3 	rbit	r2, r3
 8004b04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b08:	601a      	str	r2, [r3, #0]
  return result;
 8004b0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b0e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	461a      	mov	r2, r3
 8004b22:	2301      	movs	r3, #1
 8004b24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fe f9eb 	bl	8002f00 <HAL_GetTick>
 8004b2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b2e:	e009      	b.n	8004b44 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fe f9e6 	bl	8002f00 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e109      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
 8004b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	fa93 f2a3 	rbit	r2, r3
 8004b58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b5c:	601a      	str	r2, [r3, #0]
  return result;
 8004b5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d105      	bne.n	8004b84 <HAL_RCC_OscConfig+0xc48>
 8004b78:	4b01      	ldr	r3, [pc, #4]	; (8004b80 <HAL_RCC_OscConfig+0xc44>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	e01e      	b.n	8004bbc <HAL_RCC_OscConfig+0xc80>
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	fa93 f2a3 	rbit	r2, r3
 8004b98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCC_OscConfig+0xe28>)
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	fa92 f1a2 	rbit	r1, r2
 8004bd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004bd4:	6011      	str	r1, [r2, #0]
  return result;
 8004bd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	fab2 f282 	clz	r2, r2
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	f042 0220 	orr.w	r2, r2, #32
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	f002 021f 	and.w	r2, r2, #31
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d09b      	beq.n	8004b30 <HAL_RCC_OscConfig+0xbf4>
 8004bf8:	e0ad      	b.n	8004d56 <HAL_RCC_OscConfig+0xe1a>
 8004bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	fa93 f2a3 	rbit	r2, r3
 8004c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c12:	601a      	str	r2, [r3, #0]
  return result;
 8004c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe f966 	bl	8002f00 <HAL_GetTick>
 8004c34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c38:	e009      	b.n	8004c4e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fe f961 	bl	8002f00 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e084      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
 8004c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	fa93 f2a3 	rbit	r2, r3
 8004c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c66:	601a      	str	r2, [r3, #0]
  return result;
 8004c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d102      	bne.n	8004c88 <HAL_RCC_OscConfig+0xd4c>
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCC_OscConfig+0xe28>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	e01b      	b.n	8004cc0 <HAL_RCC_OscConfig+0xd84>
 8004c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	fa93 f2a3 	rbit	r2, r3
 8004c9c:	f107 0320 	add.w	r3, r7, #32
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	f107 031c 	add.w	r3, r7, #28
 8004ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f107 031c 	add.w	r3, r7, #28
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	fa93 f2a3 	rbit	r2, r3
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <HAL_RCC_OscConfig+0xe28>)
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f107 0214 	add.w	r2, r7, #20
 8004cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cc8:	6011      	str	r1, [r2, #0]
 8004cca:	f107 0214 	add.w	r2, r7, #20
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	fa92 f1a2 	rbit	r1, r2
 8004cd4:	f107 0210 	add.w	r2, r7, #16
 8004cd8:	6011      	str	r1, [r2, #0]
  return result;
 8004cda:	f107 0210 	add.w	r2, r7, #16
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	fab2 f282 	clz	r2, r2
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	f042 0220 	orr.w	r2, r2, #32
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	f002 021f 	and.w	r2, r2, #31
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d19e      	bne.n	8004c3a <HAL_RCC_OscConfig+0xcfe>
 8004cfc:	e02b      	b.n	8004d56 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e025      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d0c:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <HAL_RCC_OscConfig+0xe28>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCC_OscConfig+0xe28>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d20:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d111      	bne.n	8004d52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004d2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d108      	bne.n	8004d52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d44:	f003 020f 	and.w	r2, r3, #15
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000

08004d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b09e      	sub	sp, #120	; 0x78
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e162      	b.n	8005046 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d80:	4b90      	ldr	r3, [pc, #576]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d910      	bls.n	8004db0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b8d      	ldr	r3, [pc, #564]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 0207 	bic.w	r2, r3, #7
 8004d96:	498b      	ldr	r1, [pc, #556]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b89      	ldr	r3, [pc, #548]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e14a      	b.n	8005046 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4b82      	ldr	r3, [pc, #520]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	497f      	ldr	r1, [pc, #508]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80dc 	beq.w	8004f94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d13c      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xf6>
 8004de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004de8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df4:	fab3 f383 	clz	r3, r3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d102      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xa6>
 8004e08:	4b6f      	ldr	r3, [pc, #444]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	e00f      	b.n	8004e2e <HAL_RCC_ClockConfig+0xc6>
 8004e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e20:	663b      	str	r3, [r7, #96]	; 0x60
 8004e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e2a:	4b67      	ldr	r3, [pc, #412]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e32:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e36:	fa92 f2a2 	rbit	r2, r2
 8004e3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e3e:	fab2 f282 	clz	r2, r2
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	f042 0220 	orr.w	r2, r2, #32
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	f002 021f 	and.w	r2, r2, #31
 8004e4e:	2101      	movs	r1, #1
 8004e50:	fa01 f202 	lsl.w	r2, r1, r2
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d17b      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0f3      	b.n	8005046 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d13c      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x178>
 8004e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d102      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x128>
 8004e8a:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	e00f      	b.n	8004eb0 <HAL_RCC_ClockConfig+0x148>
 8004e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea6:	fa93 f3a3 	rbit	r3, r3
 8004eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eac:	4b46      	ldr	r3, [pc, #280]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8004eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb8:	fa92 f2a2 	rbit	r2, r2
 8004ebc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec0:	fab2 f282 	clz	r2, r2
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	f042 0220 	orr.w	r2, r2, #32
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f002 021f 	and.w	r2, r2, #31
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d13a      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b2      	b.n	8005046 <HAL_RCC_ClockConfig+0x2de>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	fa93 f3a3 	rbit	r3, r3
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d102      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x1a0>
 8004f02:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	e00d      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1bc>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
 8004f14:	2302      	movs	r3, #2
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	fa93 f3a3 	rbit	r3, r3
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2202      	movs	r2, #2
 8004f26:	61ba      	str	r2, [r7, #24]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	fa92 f2a2 	rbit	r2, r2
 8004f2e:	617a      	str	r2, [r7, #20]
  return result;
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	fab2 f282 	clz	r2, r2
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	f042 0220 	orr.w	r2, r2, #32
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	f002 021f 	and.w	r2, r2, #31
 8004f42:	2101      	movs	r1, #1
 8004f44:	fa01 f202 	lsl.w	r2, r1, r2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e079      	b.n	8005046 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f52:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f023 0203 	bic.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	491a      	ldr	r1, [pc, #104]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f64:	f7fd ffcc 	bl	8002f00 <HAL_GetTick>
 8004f68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6c:	f7fd ffc8 	bl	8002f00 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e061      	b.n	8005046 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <HAL_RCC_ClockConfig+0x260>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 020c 	and.w	r2, r3, #12
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1eb      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d214      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 0207 	bic.w	r2, r3, #7
 8004faa:	4906      	ldr	r1, [pc, #24]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <HAL_RCC_ClockConfig+0x25c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e040      	b.n	8005046 <HAL_RCC_ClockConfig+0x2de>
 8004fc4:	40022000 	.word	0x40022000
 8004fc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <HAL_RCC_ClockConfig+0x2e8>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	491a      	ldr	r1, [pc, #104]	; (8005050 <HAL_RCC_ClockConfig+0x2e8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_RCC_ClockConfig+0x2e8>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4912      	ldr	r1, [pc, #72]	; (8005050 <HAL_RCC_ClockConfig+0x2e8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800500a:	f000 f829 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 800500e:	4601      	mov	r1, r0
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <HAL_RCC_ClockConfig+0x2e8>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005018:	22f0      	movs	r2, #240	; 0xf0
 800501a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	fa92 f2a2 	rbit	r2, r2
 8005022:	60fa      	str	r2, [r7, #12]
  return result;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	fab2 f282 	clz	r2, r2
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	40d3      	lsrs	r3, r2
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <HAL_RCC_ClockConfig+0x2ec>)
 8005030:	5cd3      	ldrb	r3, [r2, r3]
 8005032:	fa21 f303 	lsr.w	r3, r1, r3
 8005036:	4a08      	ldr	r2, [pc, #32]	; (8005058 <HAL_RCC_ClockConfig+0x2f0>)
 8005038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800503a:	4b08      	ldr	r3, [pc, #32]	; (800505c <HAL_RCC_ClockConfig+0x2f4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd fdbc 	bl	8002bbc <HAL_InitTick>
  
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3778      	adds	r7, #120	; 0x78
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	0800e634 	.word	0x0800e634
 8005058:	20000000 	.word	0x20000000
 800505c:	20000004 	.word	0x20000004

08005060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005060:	b480      	push	{r7}
 8005062:	b08b      	sub	sp, #44	; 0x2c
 8005064:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800507a:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_RCC_GetSysClockFreq+0xc4>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b04      	cmp	r3, #4
 8005088:	d002      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x30>
 800508a:	2b08      	cmp	r3, #8
 800508c:	d003      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x36>
 800508e:	e03f      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005090:	4b25      	ldr	r3, [pc, #148]	; (8005128 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005092:	623b      	str	r3, [r7, #32]
      break;
 8005094:	e03f      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800509c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80050a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	fa92 f2a2 	rbit	r2, r2
 80050a8:	607a      	str	r2, [r7, #4]
  return result;
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	fab2 f282 	clz	r2, r2
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	40d3      	lsrs	r3, r2
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_RCC_GetSysClockFreq+0xcc>)
 80050b6:	5cd3      	ldrb	r3, [r2, r3]
 80050b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80050ba:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	220f      	movs	r2, #15
 80050c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	fa92 f2a2 	rbit	r2, r2
 80050cc:	60fa      	str	r2, [r7, #12]
  return result;
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	fab2 f282 	clz	r2, r2
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	40d3      	lsrs	r3, r2
 80050d8:	4a15      	ldr	r2, [pc, #84]	; (8005130 <HAL_RCC_GetSysClockFreq+0xd0>)
 80050da:	5cd3      	ldrb	r3, [r2, r3]
 80050dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050e8:	4a0f      	ldr	r2, [pc, #60]	; (8005128 <HAL_RCC_GetSysClockFreq+0xc8>)
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
 80050f8:	e007      	b.n	800510a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050fa:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <HAL_RCC_GetSysClockFreq+0xc8>)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	fb02 f303 	mul.w	r3, r2, r3
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	623b      	str	r3, [r7, #32]
      break;
 800510e:	e002      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005112:	623b      	str	r3, [r7, #32]
      break;
 8005114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005116:	6a3b      	ldr	r3, [r7, #32]
}
 8005118:	4618      	mov	r0, r3
 800511a:	372c      	adds	r7, #44	; 0x2c
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40021000 	.word	0x40021000
 8005128:	007a1200 	.word	0x007a1200
 800512c:	0800e64c 	.word	0x0800e64c
 8005130:	0800e65c 	.word	0x0800e65c

08005134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <HAL_RCC_GetHCLKFreq+0x14>)
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000000 	.word	0x20000000

0800514c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005152:	f7ff ffef 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005156:	4601      	mov	r1, r0
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005160:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005164:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	fa92 f2a2 	rbit	r2, r2
 800516c:	603a      	str	r2, [r7, #0]
  return result;
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	fab2 f282 	clz	r2, r2
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	40d3      	lsrs	r3, r2
 8005178:	4a04      	ldr	r2, [pc, #16]	; (800518c <HAL_RCC_GetPCLK1Freq+0x40>)
 800517a:	5cd3      	ldrb	r3, [r2, r3]
 800517c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000
 800518c:	0800e644 	.word	0x0800e644

08005190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005196:	f7ff ffcd 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 800519a:	4601      	mov	r1, r0
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80051a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80051a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	fa92 f2a2 	rbit	r2, r2
 80051b0:	603a      	str	r2, [r7, #0]
  return result;
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	fab2 f282 	clz	r2, r2
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	40d3      	lsrs	r3, r2
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80051be:	5cd3      	ldrb	r3, [r2, r3]
 80051c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40021000 	.word	0x40021000
 80051d0:	0800e644 	.word	0x0800e644

080051d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	220f      	movs	r2, #15
 80051e2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f003 0203 	and.w	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	08db      	lsrs	r3, r3, #3
 800520e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005216:	4b07      	ldr	r3, [pc, #28]	; (8005234 <HAL_RCC_GetClockConfig+0x60>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0207 	and.w	r2, r3, #7
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	601a      	str	r2, [r3, #0]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	40022000 	.word	0x40022000

08005238 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b092      	sub	sp, #72	; 0x48
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005248:	2300      	movs	r3, #0
 800524a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80d4 	beq.w	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525c:	4b4e      	ldr	r3, [pc, #312]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10e      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005268:	4b4b      	ldr	r3, [pc, #300]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	4a4a      	ldr	r2, [pc, #296]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005272:	61d3      	str	r3, [r2, #28]
 8005274:	4b48      	ldr	r3, [pc, #288]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005286:	4b45      	ldr	r3, [pc, #276]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d118      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005292:	4b42      	ldr	r3, [pc, #264]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a41      	ldr	r2, [pc, #260]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529e:	f7fd fe2f 	bl	8002f00 <HAL_GetTick>
 80052a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a4:	e008      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7fd fe2b 	bl	8002f00 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b64      	cmp	r3, #100	; 0x64
 80052b2:	d901      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e1d6      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	4b38      	ldr	r3, [pc, #224]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8084 	beq.w	80053de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d07c      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052e4:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052fe:	fab3 f383 	clz	r3, r3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	461a      	mov	r2, r3
 800530e:	2301      	movs	r3, #1
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005316:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005322:	fab3 f383 	clz	r3, r3
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	461a      	mov	r2, r3
 8005332:	2300      	movs	r3, #0
 8005334:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005336:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800533c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d04b      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005346:	f7fd fddb 	bl	8002f00 <HAL_GetTick>
 800534a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fd fdd7 	bl	8002f00 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	; 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e180      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005364:	2302      	movs	r3, #2
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	fa93 f3a3 	rbit	r3, r3
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
 8005370:	2302      	movs	r3, #2
 8005372:	623b      	str	r3, [r7, #32]
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	61fb      	str	r3, [r7, #28]
  return result;
 800537c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d108      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005392:	4b01      	ldr	r3, [pc, #4]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	e00d      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005398:	40021000 	.word	0x40021000
 800539c:	40007000 	.word	0x40007000
 80053a0:	10908100 	.word	0x10908100
 80053a4:	2302      	movs	r3, #2
 80053a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	fa93 f3a3 	rbit	r3, r3
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	4ba0      	ldr	r3, [pc, #640]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2202      	movs	r2, #2
 80053b6:	613a      	str	r2, [r7, #16]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	fa92 f2a2 	rbit	r2, r2
 80053be:	60fa      	str	r2, [r7, #12]
  return result;
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	fab2 f282 	clz	r2, r2
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	f002 021f 	and.w	r2, r2, #31
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f202 	lsl.w	r2, r1, r2
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0b7      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80053de:	4b95      	ldr	r3, [pc, #596]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4992      	ldr	r1, [pc, #584]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f8:	4b8e      	ldr	r3, [pc, #568]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4a8d      	ldr	r2, [pc, #564]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005402:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005410:	4b88      	ldr	r3, [pc, #544]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	f023 0203 	bic.w	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	4985      	ldr	r1, [pc, #532]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800542e:	4b81      	ldr	r3, [pc, #516]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	497e      	ldr	r1, [pc, #504]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800544c:	4b79      	ldr	r3, [pc, #484]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	4976      	ldr	r1, [pc, #472]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800546a:	4b72      	ldr	r3, [pc, #456]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	f023 0210 	bic.w	r2, r3, #16
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	496f      	ldr	r1, [pc, #444]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005478:	4313      	orrs	r3, r2
 800547a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005488:	4b6a      	ldr	r3, [pc, #424]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	4967      	ldr	r1, [pc, #412]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d008      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a6:	4b63      	ldr	r3, [pc, #396]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	f023 0220 	bic.w	r2, r3, #32
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	4960      	ldr	r1, [pc, #384]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c4:	4b5b      	ldr	r3, [pc, #364]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	4958      	ldr	r1, [pc, #352]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054e2:	4b54      	ldr	r3, [pc, #336]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	4951      	ldr	r1, [pc, #324]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005500:	4b4c      	ldr	r3, [pc, #304]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4949      	ldr	r1, [pc, #292]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800550e:	4313      	orrs	r3, r2
 8005510:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800551e:	4b45      	ldr	r3, [pc, #276]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	4942      	ldr	r1, [pc, #264]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800553c:	4b3d      	ldr	r3, [pc, #244]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	493a      	ldr	r1, [pc, #232]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800554a:	4313      	orrs	r3, r2
 800554c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d008      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800555a:	4b36      	ldr	r3, [pc, #216]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	4933      	ldr	r1, [pc, #204]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005578:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	492b      	ldr	r1, [pc, #172]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005596:	4b27      	ldr	r3, [pc, #156]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	4924      	ldr	r1, [pc, #144]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80055b4:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	491c      	ldr	r1, [pc, #112]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80055d2:	4b18      	ldr	r3, [pc, #96]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	4915      	ldr	r1, [pc, #84]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80055f0:	4b10      	ldr	r3, [pc, #64]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fc:	490d      	ldr	r1, [pc, #52]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	4906      	ldr	r1, [pc, #24]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800562c:	4b01      	ldr	r3, [pc, #4]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	e002      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000
 8005638:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005640:	490b      	ldr	r1, [pc, #44]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005642:	4313      	orrs	r3, r2
 8005644:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565e:	4904      	ldr	r1, [pc, #16]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005660:	4313      	orrs	r3, r2
 8005662:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3748      	adds	r7, #72	; 0x48
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000

08005674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e049      	b.n	800571a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f841 	bl	8005722 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f000 f9f8 	bl	8005aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d001      	beq.n	8005750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e04f      	b.n	80057f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <HAL_TIM_Base_Start_IT+0xc4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01d      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0x76>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d018      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0x76>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <HAL_TIM_Base_Start_IT+0xc8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0x76>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_TIM_Base_Start_IT+0xcc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0x76>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_TIM_Base_Start_IT+0xd0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d009      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0x76>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_TIM_Base_Start_IT+0xd4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_TIM_Base_Start_IT+0x76>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_TIM_Base_Start_IT+0xd8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d115      	bne.n	80057da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <HAL_TIM_Base_Start_IT+0xdc>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b06      	cmp	r3, #6
 80057be:	d015      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0xb4>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c6:	d011      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d8:	e008      	b.n	80057ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e000      	b.n	80057ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40013400 	.word	0x40013400
 800580c:	40014000 	.word	0x40014000
 8005810:	40015000 	.word	0x40015000
 8005814:	00010007 	.word	0x00010007

08005818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d122      	bne.n	8005874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b02      	cmp	r3, #2
 800583a:	d11b      	bne.n	8005874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0202 	mvn.w	r2, #2
 8005844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f905 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 8005860:	e005      	b.n	800586e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8f7 	bl	8005a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f908 	bl	8005a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b04      	cmp	r3, #4
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0204 	mvn.w	r2, #4
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8db 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f8cd 	bl	8005a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8de 	bl	8005a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0208 	mvn.w	r2, #8
 80058ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2204      	movs	r2, #4
 80058f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8b1 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8a3 	bl	8005a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f8b4 	bl	8005a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b10      	cmp	r3, #16
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b10      	cmp	r3, #16
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0210 	mvn.w	r2, #16
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2208      	movs	r2, #8
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f887 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f879 	bl	8005a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f88a 	bl	8005a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0201 	mvn.w	r2, #1
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fdf6 	bl	8002588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d10e      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f918 	bl	8005bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d10e      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d107      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f90b 	bl	8005c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d10e      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d107      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f838 	bl	8005a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d10e      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d107      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0220 	mvn.w	r2, #32
 8005a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f8cb 	bl	8005be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a42      	ldr	r2, [pc, #264]	; (8005bc4 <TIM_Base_SetConfig+0x11c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac6:	d00f      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a3f      	ldr	r2, [pc, #252]	; (8005bc8 <TIM_Base_SetConfig+0x120>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3e      	ldr	r2, [pc, #248]	; (8005bcc <TIM_Base_SetConfig+0x124>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <TIM_Base_SetConfig+0x128>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3c      	ldr	r2, [pc, #240]	; (8005bd4 <TIM_Base_SetConfig+0x12c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d108      	bne.n	8005afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a31      	ldr	r2, [pc, #196]	; (8005bc4 <TIM_Base_SetConfig+0x11c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01f      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b08:	d01b      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <TIM_Base_SetConfig+0x120>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d017      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2d      	ldr	r2, [pc, #180]	; (8005bcc <TIM_Base_SetConfig+0x124>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2c      	ldr	r2, [pc, #176]	; (8005bd0 <TIM_Base_SetConfig+0x128>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00f      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2c      	ldr	r2, [pc, #176]	; (8005bd8 <TIM_Base_SetConfig+0x130>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2b      	ldr	r2, [pc, #172]	; (8005bdc <TIM_Base_SetConfig+0x134>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d007      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2a      	ldr	r2, [pc, #168]	; (8005be0 <TIM_Base_SetConfig+0x138>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a25      	ldr	r2, [pc, #148]	; (8005bd4 <TIM_Base_SetConfig+0x12c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d108      	bne.n	8005b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a12      	ldr	r2, [pc, #72]	; (8005bc4 <TIM_Base_SetConfig+0x11c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d013      	beq.n	8005ba8 <TIM_Base_SetConfig+0x100>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <TIM_Base_SetConfig+0x128>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <TIM_Base_SetConfig+0x100>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <TIM_Base_SetConfig+0x130>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_Base_SetConfig+0x100>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <TIM_Base_SetConfig+0x134>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_Base_SetConfig+0x100>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <TIM_Base_SetConfig+0x138>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0x100>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	; (8005bd4 <TIM_Base_SetConfig+0x12c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40015000 	.word	0x40015000
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800

08005be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e040      	b.n	8005cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fc ff46 	bl	8002ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2224      	movs	r2, #36	; 0x24
 8005c4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f992 	bl	8005f88 <UART_SetConfig>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e022      	b.n	8005cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fb5c 	bl	8006334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fbe3 	bl	8006478 <UART_CheckIdleState>
 8005cb2:	4603      	mov	r3, r0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	f040 8082 	bne.w	8005dda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_UART_Transmit+0x26>
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07a      	b.n	8005ddc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_UART_Transmit+0x38>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e073      	b.n	8005ddc <HAL_UART_Transmit+0x120>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2221      	movs	r2, #33	; 0x21
 8005d08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d0a:	f7fd f8f9 	bl	8002f00 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d108      	bne.n	8005d3c <HAL_UART_Transmit+0x80>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e003      	b.n	8005d44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d4c:	e02d      	b.n	8005daa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fbd6 	bl	800650a <UART_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e039      	b.n	8005ddc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d7a:	b292      	uxth	r2, r2
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	3302      	adds	r3, #2
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	e008      	b.n	8005d98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	b292      	uxth	r2, r2
 8005d90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1cb      	bne.n	8005d4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2140      	movs	r1, #64	; 0x40
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fba2 	bl	800650a <UART_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e005      	b.n	8005ddc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	f040 80bf 	bne.w	8005f7c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_UART_Receive+0x26>
 8005e04:	88fb      	ldrh	r3, [r7, #6]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0b7      	b.n	8005f7e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Receive+0x38>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e0b0      	b.n	8005f7e <HAL_UART_Receive+0x19a>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2222      	movs	r2, #34	; 0x22
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e38:	f7fd f862 	bl	8002f00 <HAL_GetTick>
 8005e3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d10e      	bne.n	8005e76 <HAL_UART_Receive+0x92>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_UART_Receive+0x88>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e6a:	e02d      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	22ff      	movs	r2, #255	; 0xff
 8005e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e74:	e028      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <HAL_UART_Receive+0xb6>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <HAL_UART_Receive+0xac>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	22ff      	movs	r2, #255	; 0xff
 8005e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e8e:	e01b      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	227f      	movs	r2, #127	; 0x7f
 8005e94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e98:	e016      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea2:	d10d      	bne.n	8005ec0 <HAL_UART_Receive+0xdc>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <HAL_UART_Receive+0xd2>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	227f      	movs	r2, #127	; 0x7f
 8005eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb4:	e008      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	223f      	movs	r2, #63	; 0x3f
 8005eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ebe:	e003      	b.n	8005ec8 <HAL_UART_Receive+0xe4>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ece:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d108      	bne.n	8005eec <HAL_UART_Receive+0x108>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e003      	b.n	8005ef4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005efc:	e033      	b.n	8005f66 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2120      	movs	r1, #32
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fafe 	bl	800650a <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e032      	b.n	8005f7e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10c      	bne.n	8005f38 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	8a7b      	ldrh	r3, [r7, #18]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	3302      	adds	r3, #2
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	e00d      	b.n	8005f54 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	8a7b      	ldrh	r3, [r7, #18]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	4013      	ands	r3, r2
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1c5      	bne.n	8005efe <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e000      	b.n	8005f7e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4bab      	ldr	r3, [pc, #684]	; (8006260 <UART_SetConfig+0x2d8>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	6979      	ldr	r1, [r7, #20]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a99      	ldr	r2, [pc, #612]	; (8006264 <UART_SetConfig+0x2dc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d120      	bne.n	8006046 <UART_SetConfig+0xbe>
 8006004:	4b98      	ldr	r3, [pc, #608]	; (8006268 <UART_SetConfig+0x2e0>)
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	2b03      	cmp	r3, #3
 800600e:	d817      	bhi.n	8006040 <UART_SetConfig+0xb8>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x90>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	08006029 	.word	0x08006029
 800601c:	08006035 	.word	0x08006035
 8006020:	0800603b 	.word	0x0800603b
 8006024:	0800602f 	.word	0x0800602f
 8006028:	2301      	movs	r3, #1
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e0b5      	b.n	800619a <UART_SetConfig+0x212>
 800602e:	2302      	movs	r3, #2
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e0b2      	b.n	800619a <UART_SetConfig+0x212>
 8006034:	2304      	movs	r3, #4
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e0af      	b.n	800619a <UART_SetConfig+0x212>
 800603a:	2308      	movs	r3, #8
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e0ac      	b.n	800619a <UART_SetConfig+0x212>
 8006040:	2310      	movs	r3, #16
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e0a9      	b.n	800619a <UART_SetConfig+0x212>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a88      	ldr	r2, [pc, #544]	; (800626c <UART_SetConfig+0x2e4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d124      	bne.n	800609a <UART_SetConfig+0x112>
 8006050:	4b85      	ldr	r3, [pc, #532]	; (8006268 <UART_SetConfig+0x2e0>)
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800605c:	d011      	beq.n	8006082 <UART_SetConfig+0xfa>
 800605e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006062:	d817      	bhi.n	8006094 <UART_SetConfig+0x10c>
 8006064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006068:	d011      	beq.n	800608e <UART_SetConfig+0x106>
 800606a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800606e:	d811      	bhi.n	8006094 <UART_SetConfig+0x10c>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <UART_SetConfig+0xf4>
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006078:	d006      	beq.n	8006088 <UART_SetConfig+0x100>
 800607a:	e00b      	b.n	8006094 <UART_SetConfig+0x10c>
 800607c:	2300      	movs	r3, #0
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e08b      	b.n	800619a <UART_SetConfig+0x212>
 8006082:	2302      	movs	r3, #2
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e088      	b.n	800619a <UART_SetConfig+0x212>
 8006088:	2304      	movs	r3, #4
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e085      	b.n	800619a <UART_SetConfig+0x212>
 800608e:	2308      	movs	r3, #8
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e082      	b.n	800619a <UART_SetConfig+0x212>
 8006094:	2310      	movs	r3, #16
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e07f      	b.n	800619a <UART_SetConfig+0x212>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a74      	ldr	r2, [pc, #464]	; (8006270 <UART_SetConfig+0x2e8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d124      	bne.n	80060ee <UART_SetConfig+0x166>
 80060a4:	4b70      	ldr	r3, [pc, #448]	; (8006268 <UART_SetConfig+0x2e0>)
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060b0:	d011      	beq.n	80060d6 <UART_SetConfig+0x14e>
 80060b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060b6:	d817      	bhi.n	80060e8 <UART_SetConfig+0x160>
 80060b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060bc:	d011      	beq.n	80060e2 <UART_SetConfig+0x15a>
 80060be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060c2:	d811      	bhi.n	80060e8 <UART_SetConfig+0x160>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <UART_SetConfig+0x148>
 80060c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060cc:	d006      	beq.n	80060dc <UART_SetConfig+0x154>
 80060ce:	e00b      	b.n	80060e8 <UART_SetConfig+0x160>
 80060d0:	2300      	movs	r3, #0
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e061      	b.n	800619a <UART_SetConfig+0x212>
 80060d6:	2302      	movs	r3, #2
 80060d8:	77fb      	strb	r3, [r7, #31]
 80060da:	e05e      	b.n	800619a <UART_SetConfig+0x212>
 80060dc:	2304      	movs	r3, #4
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e05b      	b.n	800619a <UART_SetConfig+0x212>
 80060e2:	2308      	movs	r3, #8
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e058      	b.n	800619a <UART_SetConfig+0x212>
 80060e8:	2310      	movs	r3, #16
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e055      	b.n	800619a <UART_SetConfig+0x212>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a60      	ldr	r2, [pc, #384]	; (8006274 <UART_SetConfig+0x2ec>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d124      	bne.n	8006142 <UART_SetConfig+0x1ba>
 80060f8:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <UART_SetConfig+0x2e0>)
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006104:	d011      	beq.n	800612a <UART_SetConfig+0x1a2>
 8006106:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800610a:	d817      	bhi.n	800613c <UART_SetConfig+0x1b4>
 800610c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006110:	d011      	beq.n	8006136 <UART_SetConfig+0x1ae>
 8006112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006116:	d811      	bhi.n	800613c <UART_SetConfig+0x1b4>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <UART_SetConfig+0x19c>
 800611c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006120:	d006      	beq.n	8006130 <UART_SetConfig+0x1a8>
 8006122:	e00b      	b.n	800613c <UART_SetConfig+0x1b4>
 8006124:	2300      	movs	r3, #0
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e037      	b.n	800619a <UART_SetConfig+0x212>
 800612a:	2302      	movs	r3, #2
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e034      	b.n	800619a <UART_SetConfig+0x212>
 8006130:	2304      	movs	r3, #4
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e031      	b.n	800619a <UART_SetConfig+0x212>
 8006136:	2308      	movs	r3, #8
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e02e      	b.n	800619a <UART_SetConfig+0x212>
 800613c:	2310      	movs	r3, #16
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e02b      	b.n	800619a <UART_SetConfig+0x212>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4c      	ldr	r2, [pc, #304]	; (8006278 <UART_SetConfig+0x2f0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d124      	bne.n	8006196 <UART_SetConfig+0x20e>
 800614c:	4b46      	ldr	r3, [pc, #280]	; (8006268 <UART_SetConfig+0x2e0>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006158:	d011      	beq.n	800617e <UART_SetConfig+0x1f6>
 800615a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800615e:	d817      	bhi.n	8006190 <UART_SetConfig+0x208>
 8006160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006164:	d011      	beq.n	800618a <UART_SetConfig+0x202>
 8006166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800616a:	d811      	bhi.n	8006190 <UART_SetConfig+0x208>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <UART_SetConfig+0x1f0>
 8006170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006174:	d006      	beq.n	8006184 <UART_SetConfig+0x1fc>
 8006176:	e00b      	b.n	8006190 <UART_SetConfig+0x208>
 8006178:	2300      	movs	r3, #0
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e00d      	b.n	800619a <UART_SetConfig+0x212>
 800617e:	2302      	movs	r3, #2
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e00a      	b.n	800619a <UART_SetConfig+0x212>
 8006184:	2304      	movs	r3, #4
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e007      	b.n	800619a <UART_SetConfig+0x212>
 800618a:	2308      	movs	r3, #8
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e004      	b.n	800619a <UART_SetConfig+0x212>
 8006190:	2310      	movs	r3, #16
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e001      	b.n	800619a <UART_SetConfig+0x212>
 8006196:	2310      	movs	r3, #16
 8006198:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a2:	d16d      	bne.n	8006280 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d827      	bhi.n	80061fa <UART_SetConfig+0x272>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0x228>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	080061fb 	.word	0x080061fb
 80061c0:	080061eb 	.word	0x080061eb
 80061c4:	080061fb 	.word	0x080061fb
 80061c8:	080061fb 	.word	0x080061fb
 80061cc:	080061fb 	.word	0x080061fb
 80061d0:	080061f3 	.word	0x080061f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d4:	f7fe ffba 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80061d8:	61b8      	str	r0, [r7, #24]
        break;
 80061da:	e013      	b.n	8006204 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061dc:	f7fe ffd8 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 80061e0:	61b8      	str	r0, [r7, #24]
        break;
 80061e2:	e00f      	b.n	8006204 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <UART_SetConfig+0x2f4>)
 80061e6:	61bb      	str	r3, [r7, #24]
        break;
 80061e8:	e00c      	b.n	8006204 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ea:	f7fe ff39 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 80061ee:	61b8      	str	r0, [r7, #24]
        break;
 80061f0:	e008      	b.n	8006204 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f6:	61bb      	str	r3, [r7, #24]
        break;
 80061f8:	e004      	b.n	8006204 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	77bb      	strb	r3, [r7, #30]
        break;
 8006202:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8086 	beq.w	8006318 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	005a      	lsls	r2, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	441a      	add	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	b29b      	uxth	r3, r3
 8006222:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b0f      	cmp	r3, #15
 8006228:	d916      	bls.n	8006258 <UART_SetConfig+0x2d0>
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d212      	bcs.n	8006258 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f023 030f 	bic.w	r3, r3, #15
 800623a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	b29b      	uxth	r3, r3
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	b29a      	uxth	r2, r3
 8006248:	89fb      	ldrh	r3, [r7, #14]
 800624a:	4313      	orrs	r3, r2
 800624c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	89fa      	ldrh	r2, [r7, #14]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e05f      	b.n	8006318 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	77bb      	strb	r3, [r7, #30]
 800625c:	e05c      	b.n	8006318 <UART_SetConfig+0x390>
 800625e:	bf00      	nop
 8006260:	efff69f3 	.word	0xefff69f3
 8006264:	40013800 	.word	0x40013800
 8006268:	40021000 	.word	0x40021000
 800626c:	40004400 	.word	0x40004400
 8006270:	40004800 	.word	0x40004800
 8006274:	40004c00 	.word	0x40004c00
 8006278:	40005000 	.word	0x40005000
 800627c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006280:	7ffb      	ldrb	r3, [r7, #31]
 8006282:	2b08      	cmp	r3, #8
 8006284:	d827      	bhi.n	80062d6 <UART_SetConfig+0x34e>
 8006286:	a201      	add	r2, pc, #4	; (adr r2, 800628c <UART_SetConfig+0x304>)
 8006288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062c1 	.word	0x080062c1
 8006298:	080062d7 	.word	0x080062d7
 800629c:	080062c7 	.word	0x080062c7
 80062a0:	080062d7 	.word	0x080062d7
 80062a4:	080062d7 	.word	0x080062d7
 80062a8:	080062d7 	.word	0x080062d7
 80062ac:	080062cf 	.word	0x080062cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b0:	f7fe ff4c 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80062b4:	61b8      	str	r0, [r7, #24]
        break;
 80062b6:	e013      	b.n	80062e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fe ff6a 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 80062bc:	61b8      	str	r0, [r7, #24]
        break;
 80062be:	e00f      	b.n	80062e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c0:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <UART_SetConfig+0x3a8>)
 80062c2:	61bb      	str	r3, [r7, #24]
        break;
 80062c4:	e00c      	b.n	80062e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c6:	f7fe fecb 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 80062ca:	61b8      	str	r0, [r7, #24]
        break;
 80062cc:	e008      	b.n	80062e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d2:	61bb      	str	r3, [r7, #24]
        break;
 80062d4:	e004      	b.n	80062e0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	77bb      	strb	r3, [r7, #30]
        break;
 80062de:	bf00      	nop
    }

    if (pclk != 0U)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d018      	beq.n	8006318 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	085a      	lsrs	r2, r3, #1
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	441a      	add	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	d908      	bls.n	8006314 <UART_SetConfig+0x38c>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006308:	d204      	bcs.n	8006314 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	60da      	str	r2, [r3, #12]
 8006312:	e001      	b.n	8006318 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006324:	7fbb      	ldrb	r3, [r7, #30]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	007a1200 	.word	0x007a1200

08006334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01a      	beq.n	800644a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006432:	d10a      	bne.n	800644a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006488:	f7fc fd3a 	bl	8002f00 <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b08      	cmp	r3, #8
 800649a:	d10e      	bne.n	80064ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f82d 	bl	800650a <UART_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e023      	b.n	8006502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d10e      	bne.n	80064e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f817 	bl	800650a <UART_WaitOnFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00d      	b.n	8006502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b09c      	sub	sp, #112	; 0x70
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	603b      	str	r3, [r7, #0]
 8006516:	4613      	mov	r3, r2
 8006518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651a:	e0a5      	b.n	8006668 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006522:	f000 80a1 	beq.w	8006668 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7fc fceb 	bl	8002f00 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <UART_WaitOnFlagUntilTimeout+0x32>
 8006536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006538:	2b00      	cmp	r3, #0
 800653a:	d13e      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800654a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006550:	667b      	str	r3, [r7, #100]	; 0x64
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800655a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800655c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e6      	bne.n	800653c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	663b      	str	r3, [r7, #96]	; 0x60
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800658e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800659c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e5      	bne.n	800656e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e067      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d04f      	beq.n	8006668 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d6:	d147      	bne.n	8006668 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
 8006602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	613b      	str	r3, [r7, #16]
   return(result);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	66bb      	str	r3, [r7, #104]	; 0x68
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006634:	623a      	str	r2, [r7, #32]
 8006636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	69f9      	ldr	r1, [r7, #28]
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	61bb      	str	r3, [r7, #24]
   return(result);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e010      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4013      	ands	r3, r2
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	bf0c      	ite	eq
 8006678:	2301      	moveq	r3, #1
 800667a:	2300      	movne	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	429a      	cmp	r2, r3
 8006684:	f43f af4a 	beq.w	800651c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3770      	adds	r7, #112	; 0x70
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669a:	f3ef 8305 	mrs	r3, IPSR
 800669e:	60bb      	str	r3, [r7, #8]
  return(result);
 80066a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10f      	bne.n	80066c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a6:	f3ef 8310 	mrs	r3, PRIMASK
 80066aa:	607b      	str	r3, [r7, #4]
  return(result);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <osKernelInitialize+0x32>
 80066b2:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <osKernelInitialize+0x64>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d109      	bne.n	80066ce <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066ba:	f3ef 8311 	mrs	r3, BASEPRI
 80066be:	603b      	str	r3, [r7, #0]
  return(result);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80066c6:	f06f 0305 	mvn.w	r3, #5
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	e00c      	b.n	80066e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066ce:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <osKernelInitialize+0x64>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80066d6:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <osKernelInitialize+0x64>)
 80066d8:	2201      	movs	r2, #1
 80066da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e002      	b.n	80066e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80066e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80066e8:	68fb      	ldr	r3, [r7, #12]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000244 	.word	0x20000244

080066fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006702:	f3ef 8305 	mrs	r3, IPSR
 8006706:	60bb      	str	r3, [r7, #8]
  return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10f      	bne.n	800672e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800670e:	f3ef 8310 	mrs	r3, PRIMASK
 8006712:	607b      	str	r3, [r7, #4]
  return(result);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <osKernelStart+0x32>
 800671a:	4b11      	ldr	r3, [pc, #68]	; (8006760 <osKernelStart+0x64>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d109      	bne.n	8006736 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006722:	f3ef 8311 	mrs	r3, BASEPRI
 8006726:	603b      	str	r3, [r7, #0]
  return(result);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <osKernelStart+0x3a>
    stat = osErrorISR;
 800672e:	f06f 0305 	mvn.w	r3, #5
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e00e      	b.n	8006754 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006736:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <osKernelStart+0x64>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d107      	bne.n	800674e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800673e:	4b08      	ldr	r3, [pc, #32]	; (8006760 <osKernelStart+0x64>)
 8006740:	2202      	movs	r2, #2
 8006742:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006744:	f001 f898 	bl	8007878 <vTaskStartScheduler>
      stat = osOK;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	e002      	b.n	8006754 <osKernelStart+0x58>
    } else {
      stat = osError;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006752:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006754:	68fb      	ldr	r3, [r7, #12]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000244 	.word	0x20000244

08006764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b092      	sub	sp, #72	; 0x48
 8006768:	af04      	add	r7, sp, #16
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006774:	f3ef 8305 	mrs	r3, IPSR
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 8094 	bne.w	80068aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006782:	f3ef 8310 	mrs	r3, PRIMASK
 8006786:	623b      	str	r3, [r7, #32]
  return(result);
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 808d 	bne.w	80068aa <osThreadNew+0x146>
 8006790:	4b48      	ldr	r3, [pc, #288]	; (80068b4 <osThreadNew+0x150>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d106      	bne.n	80067a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006798:	f3ef 8311 	mrs	r3, BASEPRI
 800679c:	61fb      	str	r3, [r7, #28]
  return(result);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f040 8082 	bne.w	80068aa <osThreadNew+0x146>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d07e      	beq.n	80068aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80067b0:	2318      	movs	r3, #24
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80067b4:	2300      	movs	r3, #0
 80067b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80067b8:	f107 031b 	add.w	r3, r7, #27
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d045      	beq.n	8006856 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <osThreadNew+0x74>
        name = attr->name;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <osThreadNew+0x9a>
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2b38      	cmp	r3, #56	; 0x38
 80067f0:	d805      	bhi.n	80067fe <osThreadNew+0x9a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <osThreadNew+0x9e>
        return (NULL);
 80067fe:	2300      	movs	r3, #0
 8006800:	e054      	b.n	80068ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <osThreadNew+0xd4>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2bbb      	cmp	r3, #187	; 0xbb
 8006820:	d90a      	bls.n	8006838 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <osThreadNew+0xd4>
        mem = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
 8006836:	e010      	b.n	800685a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10c      	bne.n	800685a <osThreadNew+0xf6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d108      	bne.n	800685a <osThreadNew+0xf6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <osThreadNew+0xf6>
          mem = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
 8006854:	e001      	b.n	800685a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2b01      	cmp	r3, #1
 800685e:	d110      	bne.n	8006882 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006868:	9202      	str	r2, [sp, #8]
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006874:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fe1a 	bl	80074b0 <xTaskCreateStatic>
 800687c:	4603      	mov	r3, r0
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	e013      	b.n	80068aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	b29a      	uxth	r2, r3
 800688c:	f107 0314 	add.w	r3, r7, #20
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fe64 	bl	8007568 <xTaskCreate>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d001      	beq.n	80068aa <osThreadNew+0x146>
          hTask = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068aa:	697b      	ldr	r3, [r7, #20]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3738      	adds	r7, #56	; 0x38
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000244 	.word	0x20000244

080068b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c0:	f3ef 8305 	mrs	r3, IPSR
 80068c4:	613b      	str	r3, [r7, #16]
  return(result);
 80068c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10f      	bne.n	80068ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068cc:	f3ef 8310 	mrs	r3, PRIMASK
 80068d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <osDelay+0x34>
 80068d8:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <osDelay+0x58>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d109      	bne.n	80068f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068e0:	f3ef 8311 	mrs	r3, BASEPRI
 80068e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <osDelay+0x3c>
    stat = osErrorISR;
 80068ec:	f06f 0305 	mvn.w	r3, #5
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	e007      	b.n	8006904 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <osDelay+0x4c>
      vTaskDelay(ticks);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 ff86 	bl	8007810 <vTaskDelay>
    }
  }

  return (stat);
 8006904:	697b      	ldr	r3, [r7, #20]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000244 	.word	0x20000244

08006914 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a07      	ldr	r2, [pc, #28]	; (8006940 <vApplicationGetIdleTaskMemory+0x2c>)
 8006924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4a06      	ldr	r2, [pc, #24]	; (8006944 <vApplicationGetIdleTaskMemory+0x30>)
 800692a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2280      	movs	r2, #128	; 0x80
 8006930:	601a      	str	r2, [r3, #0]
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000248 	.word	0x20000248
 8006944:	20000304 	.word	0x20000304

08006948 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a07      	ldr	r2, [pc, #28]	; (8006974 <vApplicationGetTimerTaskMemory+0x2c>)
 8006958:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4a06      	ldr	r2, [pc, #24]	; (8006978 <vApplicationGetTimerTaskMemory+0x30>)
 800695e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006966:	601a      	str	r2, [r3, #0]
}
 8006968:	bf00      	nop
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000504 	.word	0x20000504
 8006978:	200005c0 	.word	0x200005c0

0800697c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f103 0208 	add.w	r2, r3, #8
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006994:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f103 0208 	add.w	r2, r3, #8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f103 0208 	add.w	r2, r3, #8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a34:	d103      	bne.n	8006a3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e00c      	b.n	8006a58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3308      	adds	r3, #8
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e002      	b.n	8006a4c <vListInsert+0x2e>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d2f6      	bcs.n	8006a46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6892      	ldr	r2, [r2, #8]
 8006aa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6852      	ldr	r2, [r2, #4]
 8006ab0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d103      	bne.n	8006ac4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	1e5a      	subs	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b0e:	f002 f839 	bl	8008b84 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	441a      	add	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	68f9      	ldr	r1, [r7, #12]
 8006b42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	22ff      	movs	r2, #255	; 0xff
 8006b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d114      	bne.n	8006b8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01a      	beq.n	8006ba2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3310      	adds	r3, #16
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 f91f 	bl	8007db4 <xTaskRemoveFromEventList>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d012      	beq.n	8006ba2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <xQueueGenericReset+0xcc>)
 8006b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	e009      	b.n	8006ba2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3310      	adds	r3, #16
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fef2 	bl	800697c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3324      	adds	r3, #36	; 0x24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff feed 	bl	800697c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ba2:	f002 f81f 	bl	8008be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ba6:	2301      	movs	r3, #1
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08e      	sub	sp, #56	; 0x38
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <xQueueGenericCreateStatic+0x52>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <xQueueGenericCreateStatic+0x56>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <xQueueGenericCreateStatic+0x58>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	623b      	str	r3, [r7, #32]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <xQueueGenericCreateStatic+0x7e>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <xQueueGenericCreateStatic+0x82>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <xQueueGenericCreateStatic+0x84>
 8006c36:	2300      	movs	r3, #0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	61fb      	str	r3, [r7, #28]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c52:	2350      	movs	r3, #80	; 0x50
 8006c54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b50      	cmp	r3, #80	; 0x50
 8006c5a:	d00a      	beq.n	8006c72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61bb      	str	r3, [r7, #24]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00d      	beq.n	8006c98 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f805 	bl	8006ca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3730      	adds	r7, #48	; 0x30
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	69b8      	ldr	r0, [r7, #24]
 8006cd4:	f7ff ff06 	bl	8006ae4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	78fa      	ldrb	r2, [r7, #3]
 8006cdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08e      	sub	sp, #56	; 0x38
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <xQueueGenericSend+0x32>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <xQueueGenericSend+0x40>
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <xQueueGenericSend+0x44>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <xQueueGenericSend+0x46>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <xQueueGenericSend+0x60>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d103      	bne.n	8006d56 <xQueueGenericSend+0x6e>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <xQueueGenericSend+0x72>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <xQueueGenericSend+0x74>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	623b      	str	r3, [r7, #32]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d76:	f001 f9e5 	bl	8008144 <xTaskGetSchedulerState>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <xQueueGenericSend+0x9e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <xQueueGenericSend+0xa2>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueGenericSend+0xa4>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	61fb      	str	r3, [r7, #28]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da6:	f001 feed 	bl	8008b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d302      	bcc.n	8006dbc <xQueueGenericSend+0xd4>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d129      	bne.n	8006e10 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc2:	f000 fa07 	bl	80071d4 <prvCopyDataToQueue>
 8006dc6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	3324      	adds	r3, #36	; 0x24
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 ffed 	bl	8007db4 <xTaskRemoveFromEventList>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d013      	beq.n	8006e08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b3f      	ldr	r3, [pc, #252]	; (8006ee0 <xQueueGenericSend+0x1f8>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	e00a      	b.n	8006e08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006df8:	4b39      	ldr	r3, [pc, #228]	; (8006ee0 <xQueueGenericSend+0x1f8>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e08:	f001 feec 	bl	8008be4 <vPortExitCritical>
				return pdPASS;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e063      	b.n	8006ed8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d103      	bne.n	8006e1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e16:	f001 fee5 	bl	8008be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e05c      	b.n	8006ed8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e24:	f107 0314 	add.w	r3, r7, #20
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f827 	bl	8007e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e32:	f001 fed7 	bl	8008be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e36:	f000 fd8f 	bl	8007958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e3a:	f001 fea3 	bl	8008b84 <vPortEnterCritical>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e44:	b25b      	sxtb	r3, r3
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e4a:	d103      	bne.n	8006e54 <xQueueGenericSend+0x16c>
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e5a:	b25b      	sxtb	r3, r3
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e60:	d103      	bne.n	8006e6a <xQueueGenericSend+0x182>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6a:	f001 febb 	bl	8008be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e6e:	1d3a      	adds	r2, r7, #4
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f816 	bl	8007ea8 <xTaskCheckForTimeOut>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d124      	bne.n	8006ecc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e84:	f000 fa9e 	bl	80073c4 <prvIsQueueFull>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d018      	beq.n	8006ec0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	3310      	adds	r3, #16
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 ff3c 	bl	8007d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9e:	f000 fa29 	bl	80072f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ea2:	f000 fd67 	bl	8007974 <xTaskResumeAll>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f47f af7c 	bne.w	8006da6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006eae:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <xQueueGenericSend+0x1f8>)
 8006eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	e772      	b.n	8006da6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ec2:	f000 fa17 	bl	80072f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ec6:	f000 fd55 	bl	8007974 <xTaskResumeAll>
 8006eca:	e76c      	b.n	8006da6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ece:	f000 fa11 	bl	80072f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ed2:	f000 fd4f 	bl	8007974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ed6:	2300      	movs	r3, #0
		}
	}
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3738      	adds	r7, #56	; 0x38
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08e      	sub	sp, #56	; 0x38
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d103      	bne.n	8006f20 <xQueueGenericSendFromISR+0x3c>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <xQueueGenericSendFromISR+0x40>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <xQueueGenericSendFromISR+0x42>
 8006f24:	2300      	movs	r3, #0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	623b      	str	r3, [r7, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d103      	bne.n	8006f4e <xQueueGenericSendFromISR+0x6a>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <xQueueGenericSendFromISR+0x6e>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueGenericSendFromISR+0x70>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61fb      	str	r3, [r7, #28]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f6e:	f001 feeb 	bl	8008d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f72:	f3ef 8211 	mrs	r2, BASEPRI
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	61ba      	str	r2, [r7, #24]
 8006f88:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <xQueueGenericSendFromISR+0xbc>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d12c      	bne.n	8006ffa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb0:	f000 f910 	bl	80071d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fbc:	d112      	bne.n	8006fe4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d016      	beq.n	8006ff4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	3324      	adds	r3, #36	; 0x24
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fef2 	bl	8007db4 <xTaskRemoveFromEventList>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00e      	beq.n	8006ff4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e007      	b.n	8006ff4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	b25a      	sxtb	r2, r3
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ff8:	e001      	b.n	8006ffe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007008:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800700c:	4618      	mov	r0, r3
 800700e:	3738      	adds	r7, #56	; 0x38
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08c      	sub	sp, #48	; 0x30
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007020:	2300      	movs	r3, #0
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <xQueueReceive+0x30>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	623b      	str	r3, [r7, #32]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d103      	bne.n	8007052 <xQueueReceive+0x3e>
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <xQueueReceive+0x42>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueReceive+0x44>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xQueueReceive+0x5e>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	61fb      	str	r3, [r7, #28]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007072:	f001 f867 	bl	8008144 <xTaskGetSchedulerState>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <xQueueReceive+0x6e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <xQueueReceive+0x72>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <xQueueReceive+0x74>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <xQueueReceive+0x8e>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	61bb      	str	r3, [r7, #24]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80070a2:	f001 fd6f 	bl	8008b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01f      	beq.n	80070f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b6:	f000 f8f7 	bl	80072a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00f      	beq.n	80070ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	3310      	adds	r3, #16
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fe70 	bl	8007db4 <xTaskRemoveFromEventList>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070da:	4b3d      	ldr	r3, [pc, #244]	; (80071d0 <xQueueReceive+0x1bc>)
 80070dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070ea:	f001 fd7b 	bl	8008be4 <vPortExitCritical>
				return pdPASS;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e069      	b.n	80071c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070f8:	f001 fd74 	bl	8008be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070fc:	2300      	movs	r3, #0
 80070fe:	e062      	b.n	80071c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007106:	f107 0310 	add.w	r3, r7, #16
 800710a:	4618      	mov	r0, r3
 800710c:	f000 feb6 	bl	8007e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007110:	2301      	movs	r3, #1
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007114:	f001 fd66 	bl	8008be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007118:	f000 fc1e 	bl	8007958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800711c:	f001 fd32 	bl	8008b84 <vPortEnterCritical>
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007126:	b25b      	sxtb	r3, r3
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712c:	d103      	bne.n	8007136 <xQueueReceive+0x122>
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800713c:	b25b      	sxtb	r3, r3
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007142:	d103      	bne.n	800714c <xQueueReceive+0x138>
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800714c:	f001 fd4a 	bl	8008be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007150:	1d3a      	adds	r2, r7, #4
 8007152:	f107 0310 	add.w	r3, r7, #16
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fea5 	bl	8007ea8 <xTaskCheckForTimeOut>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d123      	bne.n	80071ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007166:	f000 f917 	bl	8007398 <prvIsQueueEmpty>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d017      	beq.n	80071a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4611      	mov	r1, r2
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fdcb 	bl	8007d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007180:	f000 f8b8 	bl	80072f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007184:	f000 fbf6 	bl	8007974 <xTaskResumeAll>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d189      	bne.n	80070a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800718e:	4b10      	ldr	r3, [pc, #64]	; (80071d0 <xQueueReceive+0x1bc>)
 8007190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	e780      	b.n	80070a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a2:	f000 f8a7 	bl	80072f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071a6:	f000 fbe5 	bl	8007974 <xTaskResumeAll>
 80071aa:	e77a      	b.n	80070a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ae:	f000 f8a1 	bl	80072f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071b2:	f000 fbdf 	bl	8007974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b8:	f000 f8ee 	bl	8007398 <prvIsQueueEmpty>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f43f af6f 	beq.w	80070a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3730      	adds	r7, #48	; 0x30
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000ed04 	.word	0xe000ed04

080071d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10d      	bne.n	800720e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d14d      	bne.n	8007296 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 ffbe 	bl	8008180 <xTaskPriorityDisinherit>
 8007204:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	e043      	b.n	8007296 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d119      	bne.n	8007248 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6898      	ldr	r0, [r3, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	461a      	mov	r2, r3
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	f002 f8d8 	bl	80093d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	441a      	add	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d32b      	bcc.n	8007296 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	609a      	str	r2, [r3, #8]
 8007246:	e026      	b.n	8007296 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68d8      	ldr	r0, [r3, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	461a      	mov	r2, r3
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	f002 f8be 	bl	80093d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	425b      	negs	r3, r3
 8007262:	441a      	add	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d207      	bcs.n	8007284 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727c:	425b      	negs	r3, r3
 800727e:	441a      	add	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d105      	bne.n	8007296 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	3b01      	subs	r3, #1
 8007294:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800729e:	697b      	ldr	r3, [r7, #20]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d018      	beq.n	80072ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	441a      	add	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d303      	bcc.n	80072dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68d9      	ldr	r1, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	461a      	mov	r2, r3
 80072e6:	6838      	ldr	r0, [r7, #0]
 80072e8:	f002 f874 	bl	80093d4 <memcpy>
	}
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072fc:	f001 fc42 	bl	8008b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007308:	e011      	b.n	800732e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	d012      	beq.n	8007338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3324      	adds	r3, #36	; 0x24
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fd4c 	bl	8007db4 <xTaskRemoveFromEventList>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007322:	f000 fe23 	bl	8007f6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	3b01      	subs	r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800732e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007332:	2b00      	cmp	r3, #0
 8007334:	dce9      	bgt.n	800730a <prvUnlockQueue+0x16>
 8007336:	e000      	b.n	800733a <prvUnlockQueue+0x46>
					break;
 8007338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	22ff      	movs	r2, #255	; 0xff
 800733e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007342:	f001 fc4f 	bl	8008be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007346:	f001 fc1d 	bl	8008b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007352:	e011      	b.n	8007378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d012      	beq.n	8007382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3310      	adds	r3, #16
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fd27 	bl	8007db4 <xTaskRemoveFromEventList>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800736c:	f000 fdfe 	bl	8007f6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	3b01      	subs	r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800737c:	2b00      	cmp	r3, #0
 800737e:	dce9      	bgt.n	8007354 <prvUnlockQueue+0x60>
 8007380:	e000      	b.n	8007384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	22ff      	movs	r2, #255	; 0xff
 8007388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800738c:	f001 fc2a 	bl	8008be4 <vPortExitCritical>
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073a0:	f001 fbf0 	bl	8008b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e001      	b.n	80073b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073b6:	f001 fc15 	bl	8008be4 <vPortExitCritical>

	return xReturn;
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073cc:	f001 fbda 	bl	8008b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d8:	429a      	cmp	r2, r3
 80073da:	d102      	bne.n	80073e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	e001      	b.n	80073e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073e6:	f001 fbfd 	bl	8008be4 <vPortExitCritical>

	return xReturn;
 80073ea:	68fb      	ldr	r3, [r7, #12]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e014      	b.n	800742e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007404:	4a0f      	ldr	r2, [pc, #60]	; (8007444 <vQueueAddToRegistry+0x50>)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007410:	490c      	ldr	r1, [pc, #48]	; (8007444 <vQueueAddToRegistry+0x50>)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800741a:	4a0a      	ldr	r2, [pc, #40]	; (8007444 <vQueueAddToRegistry+0x50>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	4413      	add	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007426:	e006      	b.n	8007436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b07      	cmp	r3, #7
 8007432:	d9e7      	bls.n	8007404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20006018 	.word	0x20006018

08007448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007458:	f001 fb94 	bl	8008b84 <vPortEnterCritical>
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007462:	b25b      	sxtb	r3, r3
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007468:	d103      	bne.n	8007472 <vQueueWaitForMessageRestricted+0x2a>
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007478:	b25b      	sxtb	r3, r3
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800747e:	d103      	bne.n	8007488 <vQueueWaitForMessageRestricted+0x40>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007488:	f001 fbac 	bl	8008be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	3324      	adds	r3, #36	; 0x24
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fc5d 	bl	8007d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074a2:	6978      	ldr	r0, [r7, #20]
 80074a4:	f7ff ff26 	bl	80072f4 <prvUnlockQueue>
	}
 80074a8:	bf00      	nop
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08e      	sub	sp, #56	; 0x38
 80074b4:	af04      	add	r7, sp, #16
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <xTaskCreateStatic+0x2a>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	623b      	str	r3, [r7, #32]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	61fb      	str	r3, [r7, #28]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074f6:	23bc      	movs	r3, #188	; 0xbc
 80074f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2bbc      	cmp	r3, #188	; 0xbc
 80074fe:	d00a      	beq.n	8007516 <xTaskCreateStatic+0x66>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	61bb      	str	r3, [r7, #24]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01e      	beq.n	800755a <xTaskCreateStatic+0xaa>
 800751c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01b      	beq.n	800755a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800752a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	2202      	movs	r2, #2
 8007530:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007534:	2300      	movs	r3, #0
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	9302      	str	r3, [sp, #8]
 800753c:	f107 0314 	add.w	r3, r7, #20
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f851 	bl	80075f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007554:	f000 f8ec 	bl	8007730 <prvAddNewTaskToReadyList>
 8007558:	e001      	b.n	800755e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800755e:	697b      	ldr	r3, [r7, #20]
	}
 8007560:	4618      	mov	r0, r3
 8007562:	3728      	adds	r7, #40	; 0x28
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08c      	sub	sp, #48	; 0x30
 800756c:	af04      	add	r7, sp, #16
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fc23 	bl	8008dc8 <pvPortMalloc>
 8007582:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00e      	beq.n	80075a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800758a:	20bc      	movs	r0, #188	; 0xbc
 800758c:	f001 fc1c 	bl	8008dc8 <pvPortMalloc>
 8007590:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
 800759e:	e005      	b.n	80075ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075a0:	6978      	ldr	r0, [r7, #20]
 80075a2:	f001 fcd5 	bl	8008f50 <vPortFree>
 80075a6:	e001      	b.n	80075ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d017      	beq.n	80075e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075ba:	88fa      	ldrh	r2, [r7, #6]
 80075bc:	2300      	movs	r3, #0
 80075be:	9303      	str	r3, [sp, #12]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f80f 	bl	80075f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075d6:	69f8      	ldr	r0, [r7, #28]
 80075d8:	f000 f8aa 	bl	8007730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075dc:	2301      	movs	r3, #1
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	e002      	b.n	80075e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075e8:	69bb      	ldr	r3, [r7, #24]
	}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	461a      	mov	r2, r3
 800760c:	21a5      	movs	r1, #165	; 0xa5
 800760e:	f001 feef 	bl	80093f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800761c:	3b01      	subs	r3, #1
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	617b      	str	r3, [r7, #20]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	e012      	b.n	8007678 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	7819      	ldrb	r1, [r3, #0]
 800765a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	3334      	adds	r3, #52	; 0x34
 8007662:	460a      	mov	r2, r1
 8007664:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	4413      	add	r3, r2
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d006      	beq.n	8007680 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	3301      	adds	r3, #1
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d9e9      	bls.n	8007652 <prvInitialiseNewTask+0x5e>
 800767e:	e000      	b.n	8007682 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007680:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	2b37      	cmp	r3, #55	; 0x37
 800768e:	d901      	bls.n	8007694 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007690:	2337      	movs	r3, #55	; 0x37
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007698:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800769e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	2200      	movs	r2, #0
 80076a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	3304      	adds	r3, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff f986 	bl	80069bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	3318      	adds	r3, #24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff f981 	bl	80069bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	3354      	adds	r3, #84	; 0x54
 80076e4:	2260      	movs	r2, #96	; 0x60
 80076e6:	2100      	movs	r1, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 fe81 	bl	80093f0 <memset>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	4a0c      	ldr	r2, [pc, #48]	; (8007724 <prvInitialiseNewTask+0x130>)
 80076f2:	659a      	str	r2, [r3, #88]	; 0x58
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <prvInitialiseNewTask+0x134>)
 80076f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	4a0b      	ldr	r2, [pc, #44]	; (800772c <prvInitialiseNewTask+0x138>)
 80076fe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	69b8      	ldr	r0, [r7, #24]
 8007706:	f001 f90f 	bl	8008928 <pxPortInitialiseStack>
 800770a:	4602      	mov	r2, r0
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800771c:	bf00      	nop
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	0800e68c 	.word	0x0800e68c
 8007728:	0800e6ac 	.word	0x0800e6ac
 800772c:	0800e66c 	.word	0x0800e66c

08007730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007738:	f001 fa24 	bl	8008b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800773c:	4b2d      	ldr	r3, [pc, #180]	; (80077f4 <prvAddNewTaskToReadyList+0xc4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	4a2c      	ldr	r2, [pc, #176]	; (80077f4 <prvAddNewTaskToReadyList+0xc4>)
 8007744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007746:	4b2c      	ldr	r3, [pc, #176]	; (80077f8 <prvAddNewTaskToReadyList+0xc8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800774e:	4a2a      	ldr	r2, [pc, #168]	; (80077f8 <prvAddNewTaskToReadyList+0xc8>)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007754:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <prvAddNewTaskToReadyList+0xc4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d110      	bne.n	800777e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800775c:	f000 fc2a 	bl	8007fb4 <prvInitialiseTaskLists>
 8007760:	e00d      	b.n	800777e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007762:	4b26      	ldr	r3, [pc, #152]	; (80077fc <prvAddNewTaskToReadyList+0xcc>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800776a:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <prvAddNewTaskToReadyList+0xc8>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	429a      	cmp	r2, r3
 8007776:	d802      	bhi.n	800777e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007778:	4a1f      	ldr	r2, [pc, #124]	; (80077f8 <prvAddNewTaskToReadyList+0xc8>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800777e:	4b20      	ldr	r3, [pc, #128]	; (8007800 <prvAddNewTaskToReadyList+0xd0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	4a1e      	ldr	r2, [pc, #120]	; (8007800 <prvAddNewTaskToReadyList+0xd0>)
 8007786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007788:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <prvAddNewTaskToReadyList+0xd0>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <prvAddNewTaskToReadyList+0xd4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d903      	bls.n	80077a4 <prvAddNewTaskToReadyList+0x74>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	4a18      	ldr	r2, [pc, #96]	; (8007804 <prvAddNewTaskToReadyList+0xd4>)
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4a15      	ldr	r2, [pc, #84]	; (8007808 <prvAddNewTaskToReadyList+0xd8>)
 80077b2:	441a      	add	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7ff f90b 	bl	80069d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077c0:	f001 fa10 	bl	8008be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077c4:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <prvAddNewTaskToReadyList+0xcc>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00e      	beq.n	80077ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077cc:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <prvAddNewTaskToReadyList+0xc8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d207      	bcs.n	80077ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077da:	4b0c      	ldr	r3, [pc, #48]	; (800780c <prvAddNewTaskToReadyList+0xdc>)
 80077dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000e94 	.word	0x20000e94
 80077f8:	200009c0 	.word	0x200009c0
 80077fc:	20000ea0 	.word	0x20000ea0
 8007800:	20000eb0 	.word	0x20000eb0
 8007804:	20000e9c 	.word	0x20000e9c
 8007808:	200009c4 	.word	0x200009c4
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d017      	beq.n	8007852 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007822:	4b13      	ldr	r3, [pc, #76]	; (8007870 <vTaskDelay+0x60>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <vTaskDelay+0x30>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	60bb      	str	r3, [r7, #8]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007840:	f000 f88a 	bl	8007958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fd08 	bl	800825c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800784c:	f000 f892 	bl	8007974 <xTaskResumeAll>
 8007850:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d107      	bne.n	8007868 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <vTaskDelay+0x64>)
 800785a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20000ebc 	.word	0x20000ebc
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007886:	463a      	mov	r2, r7
 8007888:	1d39      	adds	r1, r7, #4
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff f840 	bl	8006914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	9202      	str	r2, [sp, #8]
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	2300      	movs	r3, #0
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	460a      	mov	r2, r1
 80078a6:	4924      	ldr	r1, [pc, #144]	; (8007938 <vTaskStartScheduler+0xc0>)
 80078a8:	4824      	ldr	r0, [pc, #144]	; (800793c <vTaskStartScheduler+0xc4>)
 80078aa:	f7ff fe01 	bl	80074b0 <xTaskCreateStatic>
 80078ae:	4603      	mov	r3, r0
 80078b0:	4a23      	ldr	r2, [pc, #140]	; (8007940 <vTaskStartScheduler+0xc8>)
 80078b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078b4:	4b22      	ldr	r3, [pc, #136]	; (8007940 <vTaskStartScheduler+0xc8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078bc:	2301      	movs	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	e001      	b.n	80078c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d102      	bne.n	80078d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078cc:	f000 fd1a 	bl	8008304 <xTimerCreateTimerTask>
 80078d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d11b      	bne.n	8007910 <vTaskStartScheduler+0x98>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	613b      	str	r3, [r7, #16]
}
 80078ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <vTaskStartScheduler+0xcc>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3354      	adds	r3, #84	; 0x54
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <vTaskStartScheduler+0xd0>)
 80078f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078f6:	4b15      	ldr	r3, [pc, #84]	; (800794c <vTaskStartScheduler+0xd4>)
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078fe:	4b14      	ldr	r3, [pc, #80]	; (8007950 <vTaskStartScheduler+0xd8>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007904:	4b13      	ldr	r3, [pc, #76]	; (8007954 <vTaskStartScheduler+0xdc>)
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800790a:	f001 f899 	bl	8008a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800790e:	e00e      	b.n	800792e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007916:	d10a      	bne.n	800792e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <vTaskStartScheduler+0xb4>
}
 800792e:	bf00      	nop
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	0800e580 	.word	0x0800e580
 800793c:	08007f85 	.word	0x08007f85
 8007940:	20000eb8 	.word	0x20000eb8
 8007944:	200009c0 	.word	0x200009c0
 8007948:	20000010 	.word	0x20000010
 800794c:	20000eb4 	.word	0x20000eb4
 8007950:	20000ea0 	.word	0x20000ea0
 8007954:	20000e98 	.word	0x20000e98

08007958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <vTaskSuspendAll+0x18>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	4a03      	ldr	r2, [pc, #12]	; (8007970 <vTaskSuspendAll+0x18>)
 8007964:	6013      	str	r3, [r2, #0]
}
 8007966:	bf00      	nop
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20000ebc 	.word	0x20000ebc

08007974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007982:	4b42      	ldr	r3, [pc, #264]	; (8007a8c <xTaskResumeAll+0x118>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10a      	bne.n	80079a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	603b      	str	r3, [r7, #0]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079a0:	f001 f8f0 	bl	8008b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079a4:	4b39      	ldr	r3, [pc, #228]	; (8007a8c <xTaskResumeAll+0x118>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	4a38      	ldr	r2, [pc, #224]	; (8007a8c <xTaskResumeAll+0x118>)
 80079ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <xTaskResumeAll+0x118>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d162      	bne.n	8007a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079b6:	4b36      	ldr	r3, [pc, #216]	; (8007a90 <xTaskResumeAll+0x11c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d05e      	beq.n	8007a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079be:	e02f      	b.n	8007a20 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80079c0:	4b34      	ldr	r3, [pc, #208]	; (8007a94 <xTaskResumeAll+0x120>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3318      	adds	r3, #24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff f85f 	bl	8006a90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff f85a 	bl	8006a90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	4b2d      	ldr	r3, [pc, #180]	; (8007a98 <xTaskResumeAll+0x124>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d903      	bls.n	80079f0 <xTaskResumeAll+0x7c>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <xTaskResumeAll+0x124>)
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <xTaskResumeAll+0x128>)
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	4610      	mov	r0, r2
 8007a08:	f7fe ffe5 	bl	80069d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <xTaskResumeAll+0x12c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d302      	bcc.n	8007a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a1a:	4b22      	ldr	r3, [pc, #136]	; (8007aa4 <xTaskResumeAll+0x130>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a20:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <xTaskResumeAll+0x120>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1cb      	bne.n	80079c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a2e:	f000 fb63 	bl	80080f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a32:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <xTaskResumeAll+0x134>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d010      	beq.n	8007a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a3e:	f000 f847 	bl	8007ad0 <xTaskIncrementTick>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a48:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <xTaskResumeAll+0x130>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f1      	bne.n	8007a3e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007a5a:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <xTaskResumeAll+0x134>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a60:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <xTaskResumeAll+0x130>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a6c:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <xTaskResumeAll+0x138>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a7c:	f001 f8b2 	bl	8008be4 <vPortExitCritical>

	return xAlreadyYielded;
 8007a80:	68bb      	ldr	r3, [r7, #8]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000ebc 	.word	0x20000ebc
 8007a90:	20000e94 	.word	0x20000e94
 8007a94:	20000e54 	.word	0x20000e54
 8007a98:	20000e9c 	.word	0x20000e9c
 8007a9c:	200009c4 	.word	0x200009c4
 8007aa0:	200009c0 	.word	0x200009c0
 8007aa4:	20000ea8 	.word	0x20000ea8
 8007aa8:	20000ea4 	.word	0x20000ea4
 8007aac:	e000ed04 	.word	0xe000ed04

08007ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <xTaskGetTickCount+0x1c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007abc:	687b      	ldr	r3, [r7, #4]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000e98 	.word	0x20000e98

08007ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ada:	4b51      	ldr	r3, [pc, #324]	; (8007c20 <xTaskIncrementTick+0x150>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 808e 	bne.w	8007c00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ae4:	4b4f      	ldr	r3, [pc, #316]	; (8007c24 <xTaskIncrementTick+0x154>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007aec:	4a4d      	ldr	r2, [pc, #308]	; (8007c24 <xTaskIncrementTick+0x154>)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d120      	bne.n	8007b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007af8:	4b4b      	ldr	r3, [pc, #300]	; (8007c28 <xTaskIncrementTick+0x158>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	603b      	str	r3, [r7, #0]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <xTaskIncrementTick+0x46>
 8007b18:	4b43      	ldr	r3, [pc, #268]	; (8007c28 <xTaskIncrementTick+0x158>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	4b43      	ldr	r3, [pc, #268]	; (8007c2c <xTaskIncrementTick+0x15c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a41      	ldr	r2, [pc, #260]	; (8007c28 <xTaskIncrementTick+0x158>)
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	4a41      	ldr	r2, [pc, #260]	; (8007c2c <xTaskIncrementTick+0x15c>)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <xTaskIncrementTick+0x160>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	4a3f      	ldr	r2, [pc, #252]	; (8007c30 <xTaskIncrementTick+0x160>)
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	f000 fadf 	bl	80080f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b3a:	4b3e      	ldr	r3, [pc, #248]	; (8007c34 <xTaskIncrementTick+0x164>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d34e      	bcc.n	8007be2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b44:	4b38      	ldr	r3, [pc, #224]	; (8007c28 <xTaskIncrementTick+0x158>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <xTaskIncrementTick+0x82>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <xTaskIncrementTick+0x84>
 8007b52:	2300      	movs	r3, #0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d004      	beq.n	8007b62 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b58:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <xTaskIncrementTick+0x164>)
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b5e:	601a      	str	r2, [r3, #0]
					break;
 8007b60:	e03f      	b.n	8007be2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b62:	4b31      	ldr	r3, [pc, #196]	; (8007c28 <xTaskIncrementTick+0x158>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d203      	bcs.n	8007b82 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b7a:	4a2e      	ldr	r2, [pc, #184]	; (8007c34 <xTaskIncrementTick+0x164>)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6013      	str	r3, [r2, #0]
						break;
 8007b80:	e02f      	b.n	8007be2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe ff82 	bl	8006a90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	3318      	adds	r3, #24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe ff79 	bl	8006a90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba2:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <xTaskIncrementTick+0x168>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d903      	bls.n	8007bb2 <xTaskIncrementTick+0xe2>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a22      	ldr	r2, [pc, #136]	; (8007c38 <xTaskIncrementTick+0x168>)
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4a1f      	ldr	r2, [pc, #124]	; (8007c3c <xTaskIncrementTick+0x16c>)
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7fe ff04 	bl	80069d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <xTaskIncrementTick+0x170>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d3b3      	bcc.n	8007b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be0:	e7b0      	b.n	8007b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007be2:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <xTaskIncrementTick+0x170>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4914      	ldr	r1, [pc, #80]	; (8007c3c <xTaskIncrementTick+0x16c>)
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d907      	bls.n	8007c0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	e004      	b.n	8007c0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c00:	4b10      	ldr	r3, [pc, #64]	; (8007c44 <xTaskIncrementTick+0x174>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	4a0f      	ldr	r2, [pc, #60]	; (8007c44 <xTaskIncrementTick+0x174>)
 8007c08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <xTaskIncrementTick+0x178>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c16:	697b      	ldr	r3, [r7, #20]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20000ebc 	.word	0x20000ebc
 8007c24:	20000e98 	.word	0x20000e98
 8007c28:	20000e4c 	.word	0x20000e4c
 8007c2c:	20000e50 	.word	0x20000e50
 8007c30:	20000eac 	.word	0x20000eac
 8007c34:	20000eb4 	.word	0x20000eb4
 8007c38:	20000e9c 	.word	0x20000e9c
 8007c3c:	200009c4 	.word	0x200009c4
 8007c40:	200009c0 	.word	0x200009c0
 8007c44:	20000ea4 	.word	0x20000ea4
 8007c48:	20000ea8 	.word	0x20000ea8

08007c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c52:	4b2a      	ldr	r3, [pc, #168]	; (8007cfc <vTaskSwitchContext+0xb0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c5a:	4b29      	ldr	r3, [pc, #164]	; (8007d00 <vTaskSwitchContext+0xb4>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c60:	e046      	b.n	8007cf0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007c62:	4b27      	ldr	r3, [pc, #156]	; (8007d00 <vTaskSwitchContext+0xb4>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007c68:	4b26      	ldr	r3, [pc, #152]	; (8007d04 <vTaskSwitchContext+0xb8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e010      	b.n	8007c92 <vTaskSwitchContext+0x46>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <vTaskSwitchContext+0x40>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	607b      	str	r3, [r7, #4]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <vTaskSwitchContext+0x3e>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	491d      	ldr	r1, [pc, #116]	; (8007d08 <vTaskSwitchContext+0xbc>)
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0e4      	beq.n	8007c70 <vTaskSwitchContext+0x24>
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <vTaskSwitchContext+0xbc>)
 8007cb2:	4413      	add	r3, r2
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	605a      	str	r2, [r3, #4]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d104      	bne.n	8007cd6 <vTaskSwitchContext+0x8a>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <vTaskSwitchContext+0xc0>)
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <vTaskSwitchContext+0xb8>)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <vTaskSwitchContext+0xc0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3354      	adds	r3, #84	; 0x54
 8007cec:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <vTaskSwitchContext+0xc4>)
 8007cee:	6013      	str	r3, [r2, #0]
}
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20000ebc 	.word	0x20000ebc
 8007d00:	20000ea8 	.word	0x20000ea8
 8007d04:	20000e9c 	.word	0x20000e9c
 8007d08:	200009c4 	.word	0x200009c4
 8007d0c:	200009c0 	.word	0x200009c0
 8007d10:	20000010 	.word	0x20000010

08007d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	60fb      	str	r3, [r7, #12]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <vTaskPlaceOnEventList+0x44>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3318      	adds	r3, #24
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fe fe6b 	bl	8006a1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d48:	2101      	movs	r1, #1
 8007d4a:	6838      	ldr	r0, [r7, #0]
 8007d4c:	f000 fa86 	bl	800825c <prvAddCurrentTaskToDelayedList>
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200009c0 	.word	0x200009c0

08007d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	617b      	str	r3, [r7, #20]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3318      	adds	r3, #24
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7fe fe22 	bl	80069d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	68b8      	ldr	r0, [r7, #8]
 8007da2:	f000 fa5b 	bl	800825c <prvAddCurrentTaskToDelayedList>
	}
 8007da6:	bf00      	nop
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	200009c0 	.word	0x200009c0

08007db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	60fb      	str	r3, [r7, #12]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3318      	adds	r3, #24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fe53 	bl	8006a90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dea:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <xTaskRemoveFromEventList+0xb0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d11d      	bne.n	8007e2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fe4a 	bl	8006a90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <xTaskRemoveFromEventList+0xb4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d903      	bls.n	8007e10 <xTaskRemoveFromEventList+0x5c>
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a16      	ldr	r2, [pc, #88]	; (8007e68 <xTaskRemoveFromEventList+0xb4>)
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4a13      	ldr	r2, [pc, #76]	; (8007e6c <xTaskRemoveFromEventList+0xb8>)
 8007e1e:	441a      	add	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fdd5 	bl	80069d6 <vListInsertEnd>
 8007e2c:	e005      	b.n	8007e3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3318      	adds	r3, #24
 8007e32:	4619      	mov	r1, r3
 8007e34:	480e      	ldr	r0, [pc, #56]	; (8007e70 <xTaskRemoveFromEventList+0xbc>)
 8007e36:	f7fe fdce 	bl	80069d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <xTaskRemoveFromEventList+0xc0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d905      	bls.n	8007e54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <xTaskRemoveFromEventList+0xc4>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	e001      	b.n	8007e58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007e58:	697b      	ldr	r3, [r7, #20]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000ebc 	.word	0x20000ebc
 8007e68:	20000e9c 	.word	0x20000e9c
 8007e6c:	200009c4 	.word	0x200009c4
 8007e70:	20000e54 	.word	0x20000e54
 8007e74:	200009c0 	.word	0x200009c0
 8007e78:	20000ea8 	.word	0x20000ea8

08007e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e84:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <vTaskInternalSetTimeOutState+0x24>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <vTaskInternalSetTimeOutState+0x28>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20000eac 	.word	0x20000eac
 8007ea4:	20000e98 	.word	0x20000e98

08007ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	613b      	str	r3, [r7, #16]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10a      	bne.n	8007eea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007eea:	f000 fe4b 	bl	8008b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <xTaskCheckForTimeOut+0xbc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f06:	d102      	bne.n	8007f0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e023      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <xTaskCheckForTimeOut+0xc0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d007      	beq.n	8007f2a <xTaskCheckForTimeOut+0x82>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	e015      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d20b      	bcs.n	8007f4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ff9b 	bl	8007e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	e004      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f56:	f000 fe45 	bl	8008be4 <vPortExitCritical>

	return xReturn;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000e98 	.word	0x20000e98
 8007f68:	20000eac 	.word	0x20000eac

08007f6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f70:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <vTaskMissedYield+0x14>)
 8007f72:	2201      	movs	r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
}
 8007f76:	bf00      	nop
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20000ea8 	.word	0x20000ea8

08007f84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f8c:	f000 f852 	bl	8008034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <prvIdleTask+0x28>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d9f9      	bls.n	8007f8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <prvIdleTask+0x2c>)
 8007f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fa8:	e7f0      	b.n	8007f8c <prvIdleTask+0x8>
 8007faa:	bf00      	nop
 8007fac:	200009c4 	.word	0x200009c4
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]
 8007fbe:	e00c      	b.n	8007fda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4a12      	ldr	r2, [pc, #72]	; (8008014 <prvInitialiseTaskLists+0x60>)
 8007fcc:	4413      	add	r3, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fcd4 	bl	800697c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	607b      	str	r3, [r7, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b37      	cmp	r3, #55	; 0x37
 8007fde:	d9ef      	bls.n	8007fc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fe0:	480d      	ldr	r0, [pc, #52]	; (8008018 <prvInitialiseTaskLists+0x64>)
 8007fe2:	f7fe fccb 	bl	800697c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fe6:	480d      	ldr	r0, [pc, #52]	; (800801c <prvInitialiseTaskLists+0x68>)
 8007fe8:	f7fe fcc8 	bl	800697c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fec:	480c      	ldr	r0, [pc, #48]	; (8008020 <prvInitialiseTaskLists+0x6c>)
 8007fee:	f7fe fcc5 	bl	800697c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ff2:	480c      	ldr	r0, [pc, #48]	; (8008024 <prvInitialiseTaskLists+0x70>)
 8007ff4:	f7fe fcc2 	bl	800697c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ff8:	480b      	ldr	r0, [pc, #44]	; (8008028 <prvInitialiseTaskLists+0x74>)
 8007ffa:	f7fe fcbf 	bl	800697c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	; (800802c <prvInitialiseTaskLists+0x78>)
 8008000:	4a05      	ldr	r2, [pc, #20]	; (8008018 <prvInitialiseTaskLists+0x64>)
 8008002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <prvInitialiseTaskLists+0x7c>)
 8008006:	4a05      	ldr	r2, [pc, #20]	; (800801c <prvInitialiseTaskLists+0x68>)
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200009c4 	.word	0x200009c4
 8008018:	20000e24 	.word	0x20000e24
 800801c:	20000e38 	.word	0x20000e38
 8008020:	20000e54 	.word	0x20000e54
 8008024:	20000e68 	.word	0x20000e68
 8008028:	20000e80 	.word	0x20000e80
 800802c:	20000e4c 	.word	0x20000e4c
 8008030:	20000e50 	.word	0x20000e50

08008034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800803a:	e019      	b.n	8008070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800803c:	f000 fda2 	bl	8008b84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008040:	4b10      	ldr	r3, [pc, #64]	; (8008084 <prvCheckTasksWaitingTermination+0x50>)
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fd1f 	bl	8006a90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008052:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <prvCheckTasksWaitingTermination+0x54>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3b01      	subs	r3, #1
 8008058:	4a0b      	ldr	r2, [pc, #44]	; (8008088 <prvCheckTasksWaitingTermination+0x54>)
 800805a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3b01      	subs	r3, #1
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 8008064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008066:	f000 fdbd 	bl	8008be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f810 	bl	8008090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e1      	bne.n	800803c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000e68 	.word	0x20000e68
 8008088:	20000e94 	.word	0x20000e94
 800808c:	20000e7c 	.word	0x20000e7c

08008090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3354      	adds	r3, #84	; 0x54
 800809c:	4618      	mov	r0, r3
 800809e:	f002 f8e1 	bl	800a264 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 ff4d 	bl	8008f50 <vPortFree>
				vPortFree( pxTCB );
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 ff4a 	bl	8008f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080bc:	e018      	b.n	80080f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d103      	bne.n	80080d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 ff41 	bl	8008f50 <vPortFree>
	}
 80080ce:	e00f      	b.n	80080f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d00a      	beq.n	80080f0 <prvDeleteTCB+0x60>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	60fb      	str	r3, [r7, #12]
}
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <prvDeleteTCB+0x5e>
	}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <prvResetNextTaskUnblockTime+0x44>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <prvResetNextTaskUnblockTime+0x14>
 8008108:	2301      	movs	r3, #1
 800810a:	e000      	b.n	800810e <prvResetNextTaskUnblockTime+0x16>
 800810c:	2300      	movs	r3, #0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008112:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <prvResetNextTaskUnblockTime+0x48>)
 8008114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008118:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800811a:	e008      	b.n	800812e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800811c:	4b07      	ldr	r3, [pc, #28]	; (800813c <prvResetNextTaskUnblockTime+0x44>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	4a05      	ldr	r2, [pc, #20]	; (8008140 <prvResetNextTaskUnblockTime+0x48>)
 800812c:	6013      	str	r3, [r2, #0]
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	20000e4c 	.word	0x20000e4c
 8008140:	20000eb4 	.word	0x20000eb4

08008144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800814a:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <xTaskGetSchedulerState+0x34>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d102      	bne.n	8008158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008152:	2301      	movs	r3, #1
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	e008      	b.n	800816a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008158:	4b08      	ldr	r3, [pc, #32]	; (800817c <xTaskGetSchedulerState+0x38>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008160:	2302      	movs	r3, #2
 8008162:	607b      	str	r3, [r7, #4]
 8008164:	e001      	b.n	800816a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008166:	2300      	movs	r3, #0
 8008168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800816a:	687b      	ldr	r3, [r7, #4]
	}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	20000ea0 	.word	0x20000ea0
 800817c:	20000ebc 	.word	0x20000ebc

08008180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800818c:	2300      	movs	r3, #0
 800818e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d056      	beq.n	8008244 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008196:	4b2e      	ldr	r3, [pc, #184]	; (8008250 <xTaskPriorityDisinherit+0xd0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	429a      	cmp	r2, r3
 800819e:	d00a      	beq.n	80081b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	60bb      	str	r3, [r7, #8]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d8:	1e5a      	subs	r2, r3, #1
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d02c      	beq.n	8008244 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d128      	bne.n	8008244 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fc4a 	bl	8006a90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <xTaskPriorityDisinherit+0xd4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d903      	bls.n	8008224 <xTaskPriorityDisinherit+0xa4>
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4a0c      	ldr	r2, [pc, #48]	; (8008254 <xTaskPriorityDisinherit+0xd4>)
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4a09      	ldr	r2, [pc, #36]	; (8008258 <xTaskPriorityDisinherit+0xd8>)
 8008232:	441a      	add	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fe fbcb 	bl	80069d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008244:	697b      	ldr	r3, [r7, #20]
	}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	200009c0 	.word	0x200009c0
 8008254:	20000e9c 	.word	0x20000e9c
 8008258:	200009c4 	.word	0x200009c4

0800825c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008266:	4b21      	ldr	r3, [pc, #132]	; (80082ec <prvAddCurrentTaskToDelayedList+0x90>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826c:	4b20      	ldr	r3, [pc, #128]	; (80082f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fc0c 	bl	8006a90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800827e:	d10a      	bne.n	8008296 <prvAddCurrentTaskToDelayedList+0x3a>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008286:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3304      	adds	r3, #4
 800828c:	4619      	mov	r1, r3
 800828e:	4819      	ldr	r0, [pc, #100]	; (80082f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008290:	f7fe fba1 	bl	80069d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008294:	e026      	b.n	80082e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4413      	add	r3, r2
 800829c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800829e:	4b14      	ldr	r3, [pc, #80]	; (80082f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d209      	bcs.n	80082c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fe fbaf 	bl	8006a1e <vListInsert>
}
 80082c0:	e010      	b.n	80082e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c2:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fe fba5 	bl	8006a1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082d4:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d202      	bcs.n	80082e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082de:	4a08      	ldr	r2, [pc, #32]	; (8008300 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6013      	str	r3, [r2, #0]
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000e98 	.word	0x20000e98
 80082f0:	200009c0 	.word	0x200009c0
 80082f4:	20000e80 	.word	0x20000e80
 80082f8:	20000e50 	.word	0x20000e50
 80082fc:	20000e4c 	.word	0x20000e4c
 8008300:	20000eb4 	.word	0x20000eb4

08008304 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800830e:	f000 facb 	bl	80088a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <xTimerCreateTimerTask+0x80>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d021      	beq.n	800835e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008322:	1d3a      	adds	r2, r7, #4
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fb0b 	bl	8006948 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	9202      	str	r2, [sp, #8]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	2302      	movs	r3, #2
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	2300      	movs	r3, #0
 8008342:	460a      	mov	r2, r1
 8008344:	4910      	ldr	r1, [pc, #64]	; (8008388 <xTimerCreateTimerTask+0x84>)
 8008346:	4811      	ldr	r0, [pc, #68]	; (800838c <xTimerCreateTimerTask+0x88>)
 8008348:	f7ff f8b2 	bl	80074b0 <xTaskCreateStatic>
 800834c:	4603      	mov	r3, r0
 800834e:	4a10      	ldr	r2, [pc, #64]	; (8008390 <xTimerCreateTimerTask+0x8c>)
 8008350:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008352:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <xTimerCreateTimerTask+0x8c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800835a:	2301      	movs	r3, #1
 800835c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	613b      	str	r3, [r7, #16]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800837a:	697b      	ldr	r3, [r7, #20]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000ef0 	.word	0x20000ef0
 8008388:	0800e588 	.word	0x0800e588
 800838c:	080084b1 	.word	0x080084b1
 8008390:	20000ef4 	.word	0x20000ef4

08008394 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08a      	sub	sp, #40	; 0x28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10a      	bne.n	80083c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	623b      	str	r3, [r7, #32]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083c2:	4b1a      	ldr	r3, [pc, #104]	; (800842c <xTimerGenericCommand+0x98>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d02a      	beq.n	8008420 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b05      	cmp	r3, #5
 80083da:	dc18      	bgt.n	800840e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083dc:	f7ff feb2 	bl	8008144 <xTaskGetSchedulerState>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d109      	bne.n	80083fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <xTimerGenericCommand+0x98>)
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f107 0110 	add.w	r1, r7, #16
 80083ee:	2300      	movs	r3, #0
 80083f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f2:	f7fe fc79 	bl	8006ce8 <xQueueGenericSend>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
 80083f8:	e012      	b.n	8008420 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	2200      	movs	r2, #0
 8008406:	f7fe fc6f 	bl	8006ce8 <xQueueGenericSend>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
 800840c:	e008      	b.n	8008420 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800840e:	4b07      	ldr	r3, [pc, #28]	; (800842c <xTimerGenericCommand+0x98>)
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f107 0110 	add.w	r1, r7, #16
 8008416:	2300      	movs	r3, #0
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	f7fe fd63 	bl	8006ee4 <xQueueGenericSendFromISR>
 800841e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008422:	4618      	mov	r0, r3
 8008424:	3728      	adds	r7, #40	; 0x28
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000ef0 	.word	0x20000ef0

08008430 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af02      	add	r7, sp, #8
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800843a:	4b1c      	ldr	r3, [pc, #112]	; (80084ac <prvProcessExpiredTimer+0x7c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe fb21 	bl	8006a90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d122      	bne.n	800849c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	18d1      	adds	r1, r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	6978      	ldr	r0, [r7, #20]
 8008464:	f000 f8c8 	bl	80085f8 <prvInsertTimerInActiveList>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d016      	beq.n	800849c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800846e:	2300      	movs	r3, #0
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	2100      	movs	r1, #0
 8008478:	6978      	ldr	r0, [r7, #20]
 800847a:	f7ff ff8b 	bl	8008394 <xTimerGenericCommand>
 800847e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10a      	bne.n	800849c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	60fb      	str	r3, [r7, #12]
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	6978      	ldr	r0, [r7, #20]
 80084a2:	4798      	blx	r3
}
 80084a4:	bf00      	nop
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000ee8 	.word	0x20000ee8

080084b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f857 	bl	8008570 <prvGetNextExpireTime>
 80084c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4619      	mov	r1, r3
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f803 	bl	80084d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084ce:	f000 f8d5 	bl	800867c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d2:	e7f1      	b.n	80084b8 <prvTimerTask+0x8>

080084d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084de:	f7ff fa3b 	bl	8007958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e2:	f107 0308 	add.w	r3, r7, #8
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f866 	bl	80085b8 <prvSampleTimeNow>
 80084ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d130      	bne.n	8008556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <prvProcessTimerOrBlockTask+0x3c>
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d806      	bhi.n	8008510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008502:	f7ff fa37 	bl	8007974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff ff91 	bl	8008430 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800850e:	e024      	b.n	800855a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <prvProcessTimerOrBlockTask+0x90>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	bf0c      	ite	eq
 8008520:	2301      	moveq	r3, #1
 8008522:	2300      	movne	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008528:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <prvProcessTimerOrBlockTask+0x94>)
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	f7fe ff87 	bl	8007448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800853a:	f7ff fa1b 	bl	8007974 <xTaskResumeAll>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008544:	4b09      	ldr	r3, [pc, #36]	; (800856c <prvProcessTimerOrBlockTask+0x98>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
}
 8008554:	e001      	b.n	800855a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008556:	f7ff fa0d 	bl	8007974 <xTaskResumeAll>
}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20000eec 	.word	0x20000eec
 8008568:	20000ef0 	.word	0x20000ef0
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008578:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <prvGetNextExpireTime+0x44>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf0c      	ite	eq
 8008582:	2301      	moveq	r3, #1
 8008584:	2300      	movne	r3, #0
 8008586:	b2db      	uxtb	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d105      	bne.n	80085a2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008596:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <prvGetNextExpireTime+0x44>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e001      	b.n	80085a6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a6:	68fb      	ldr	r3, [r7, #12]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	20000ee8 	.word	0x20000ee8

080085b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c0:	f7ff fa76 	bl	8007ab0 <xTaskGetTickCount>
 80085c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <prvSampleTimeNow+0x3c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d205      	bcs.n	80085dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085d0:	f000 f908 	bl	80087e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e002      	b.n	80085e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e2:	4a04      	ldr	r2, [pc, #16]	; (80085f4 <prvSampleTimeNow+0x3c>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000ef8 	.word	0x20000ef8

080085f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d812      	bhi.n	8008644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e01b      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008632:	4b10      	ldr	r3, [pc, #64]	; (8008674 <prvInsertTimerInActiveList+0x7c>)
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7fe f9ee 	bl	8006a1e <vListInsert>
 8008642:	e012      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d206      	bcs.n	800865a <prvInsertTimerInActiveList+0x62>
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d302      	bcc.n	800865a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	e007      	b.n	800866a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <prvInsertTimerInActiveList+0x80>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3304      	adds	r3, #4
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7fe f9da 	bl	8006a1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866a:	697b      	ldr	r3, [r7, #20]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000eec 	.word	0x20000eec
 8008678:	20000ee8 	.word	0x20000ee8

0800867c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08e      	sub	sp, #56	; 0x38
 8008680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008682:	e09d      	b.n	80087c0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	da18      	bge.n	80086bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800868a:	1d3b      	adds	r3, r7, #4
 800868c:	3304      	adds	r3, #4
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	61fb      	str	r3, [r7, #28]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b2:	6850      	ldr	r0, [r2, #4]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	6892      	ldr	r2, [r2, #8]
 80086b8:	4611      	mov	r1, r2
 80086ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	db7d      	blt.n	80087be <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	3304      	adds	r3, #4
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe f9dc 	bl	8006a90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086d8:	463b      	mov	r3, r7
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff ff6c 	bl	80085b8 <prvSampleTimeNow>
 80086e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d86b      	bhi.n	80087c0 <prvProcessReceivedCommands+0x144>
 80086e8:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <prvProcessReceivedCommands+0x74>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008719 	.word	0x08008719
 80086f8:	08008719 	.word	0x08008719
 80086fc:	080087c1 	.word	0x080087c1
 8008700:	08008775 	.word	0x08008775
 8008704:	080087ad 	.word	0x080087ad
 8008708:	08008719 	.word	0x08008719
 800870c:	08008719 	.word	0x08008719
 8008710:	080087c1 	.word	0x080087c1
 8008714:	08008775 	.word	0x08008775
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	18d1      	adds	r1, r2, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008726:	f7ff ff67 	bl	80085f8 <prvInsertTimerInActiveList>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d047      	beq.n	80087c0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008736:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d13f      	bne.n	80087c0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	441a      	add	r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	2300      	movs	r3, #0
 800874e:	2100      	movs	r1, #0
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f7ff fe1f 	bl	8008394 <xTimerGenericCommand>
 8008756:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d130      	bne.n	80087c0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	61bb      	str	r3, [r7, #24]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	617b      	str	r3, [r7, #20]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	18d1      	adds	r1, r2, r3
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a6:	f7ff ff27 	bl	80085f8 <prvInsertTimerInActiveList>
					break;
 80087aa:	e009      	b.n	80087c0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d104      	bne.n	80087c0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80087b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b8:	f000 fbca 	bl	8008f50 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087bc:	e000      	b.n	80087c0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087be:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <prvProcessReceivedCommands+0x164>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	1d39      	adds	r1, r7, #4
 80087c6:	2200      	movs	r2, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe fc23 	bl	8007014 <xQueueReceive>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f47f af57 	bne.w	8008684 <prvProcessReceivedCommands+0x8>
	}
}
 80087d6:	bf00      	nop
 80087d8:	bf00      	nop
 80087da:	3730      	adds	r7, #48	; 0x30
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000ef0 	.word	0x20000ef0

080087e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087ea:	e045      	b.n	8008878 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087ec:	4b2c      	ldr	r3, [pc, #176]	; (80088a0 <prvSwitchTimerLists+0xbc>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f6:	4b2a      	ldr	r3, [pc, #168]	; (80088a0 <prvSwitchTimerLists+0xbc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3304      	adds	r3, #4
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe f943 	bl	8006a90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d12e      	bne.n	8008878 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	d90e      	bls.n	800884a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008838:	4b19      	ldr	r3, [pc, #100]	; (80088a0 <prvSwitchTimerLists+0xbc>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3304      	adds	r3, #4
 8008840:	4619      	mov	r1, r3
 8008842:	4610      	mov	r0, r2
 8008844:	f7fe f8eb 	bl	8006a1e <vListInsert>
 8008848:	e016      	b.n	8008878 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800884a:	2300      	movs	r3, #0
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	2300      	movs	r3, #0
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	2100      	movs	r1, #0
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff fd9d 	bl	8008394 <xTimerGenericCommand>
 800885a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	603b      	str	r3, [r7, #0]
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008878:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <prvSwitchTimerLists+0xbc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1b4      	bne.n	80087ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <prvSwitchTimerLists+0xbc>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <prvSwitchTimerLists+0xc0>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a04      	ldr	r2, [pc, #16]	; (80088a0 <prvSwitchTimerLists+0xbc>)
 800888e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008890:	4a04      	ldr	r2, [pc, #16]	; (80088a4 <prvSwitchTimerLists+0xc0>)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	6013      	str	r3, [r2, #0]
}
 8008896:	bf00      	nop
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20000ee8 	.word	0x20000ee8
 80088a4:	20000eec 	.word	0x20000eec

080088a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ae:	f000 f969 	bl	8008b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d120      	bne.n	80088fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ba:	4814      	ldr	r0, [pc, #80]	; (800890c <prvCheckForValidListAndQueue+0x64>)
 80088bc:	f7fe f85e 	bl	800697c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088c0:	4813      	ldr	r0, [pc, #76]	; (8008910 <prvCheckForValidListAndQueue+0x68>)
 80088c2:	f7fe f85b 	bl	800697c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088c6:	4b13      	ldr	r3, [pc, #76]	; (8008914 <prvCheckForValidListAndQueue+0x6c>)
 80088c8:	4a10      	ldr	r2, [pc, #64]	; (800890c <prvCheckForValidListAndQueue+0x64>)
 80088ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088cc:	4b12      	ldr	r3, [pc, #72]	; (8008918 <prvCheckForValidListAndQueue+0x70>)
 80088ce:	4a10      	ldr	r2, [pc, #64]	; (8008910 <prvCheckForValidListAndQueue+0x68>)
 80088d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088d2:	2300      	movs	r3, #0
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	4b11      	ldr	r3, [pc, #68]	; (800891c <prvCheckForValidListAndQueue+0x74>)
 80088d8:	4a11      	ldr	r2, [pc, #68]	; (8008920 <prvCheckForValidListAndQueue+0x78>)
 80088da:	2110      	movs	r1, #16
 80088dc:	200a      	movs	r0, #10
 80088de:	f7fe f969 	bl	8006bb4 <xQueueGenericCreateStatic>
 80088e2:	4603      	mov	r3, r0
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <prvCheckForValidListAndQueue+0x60>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	490b      	ldr	r1, [pc, #44]	; (8008924 <prvCheckForValidListAndQueue+0x7c>)
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fd7c 	bl	80073f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088fc:	f000 f972 	bl	8008be4 <vPortExitCritical>
}
 8008900:	bf00      	nop
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20000ef0 	.word	0x20000ef0
 800890c:	20000ec0 	.word	0x20000ec0
 8008910:	20000ed4 	.word	0x20000ed4
 8008914:	20000ee8 	.word	0x20000ee8
 8008918:	20000eec 	.word	0x20000eec
 800891c:	20000f9c 	.word	0x20000f9c
 8008920:	20000efc 	.word	0x20000efc
 8008924:	0800e590 	.word	0x0800e590

08008928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3b04      	subs	r3, #4
 8008938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b04      	subs	r3, #4
 8008946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b04      	subs	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008958:	4a0c      	ldr	r2, [pc, #48]	; (800898c <pxPortInitialiseStack+0x64>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b14      	subs	r3, #20
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b04      	subs	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f06f 0202 	mvn.w	r2, #2
 8008976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b20      	subs	r3, #32
 800897c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	08008991 	.word	0x08008991

08008990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800899a:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <prvTaskExitError+0x54>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a2:	d00a      	beq.n	80089ba <prvTaskExitError+0x2a>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60fb      	str	r3, [r7, #12]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <prvTaskExitError+0x28>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	60bb      	str	r3, [r7, #8]
}
 80089cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ce:	bf00      	nop
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0fc      	beq.n	80089d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	2000000c 	.word	0x2000000c
	...

080089f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <pxCurrentTCBConst2>)
 80089f2:	6819      	ldr	r1, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fa:	f380 8809 	msr	PSP, r0
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	4770      	bx	lr
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst2>:
 8008a10:	200009c0 	.word	0x200009c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a18:	4808      	ldr	r0, [pc, #32]	; (8008a3c <prvPortStartFirstTask+0x24>)
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f380 8808 	msr	MSP, r0
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8814 	msr	CONTROL, r0
 8008a2a:	b662      	cpsie	i
 8008a2c:	b661      	cpsie	f
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	df00      	svc	0
 8008a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a3a:	bf00      	nop
 8008a3c:	e000ed08 	.word	0xe000ed08

08008a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a46:	4b46      	ldr	r3, [pc, #280]	; (8008b60 <xPortStartScheduler+0x120>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a46      	ldr	r2, [pc, #280]	; (8008b64 <xPortStartScheduler+0x124>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d10a      	bne.n	8008a66 <xPortStartScheduler+0x26>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	613b      	str	r3, [r7, #16]
}
 8008a62:	bf00      	nop
 8008a64:	e7fe      	b.n	8008a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a66:	4b3e      	ldr	r3, [pc, #248]	; (8008b60 <xPortStartScheduler+0x120>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a3f      	ldr	r2, [pc, #252]	; (8008b68 <xPortStartScheduler+0x128>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10a      	bne.n	8008a86 <xPortStartScheduler+0x46>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a86:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <xPortStartScheduler+0x12c>)
 8008a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	22ff      	movs	r2, #255	; 0xff
 8008a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	4b31      	ldr	r3, [pc, #196]	; (8008b70 <xPortStartScheduler+0x130>)
 8008aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aae:	4b31      	ldr	r3, [pc, #196]	; (8008b74 <xPortStartScheduler+0x134>)
 8008ab0:	2207      	movs	r2, #7
 8008ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ab4:	e009      	b.n	8008aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ab6:	4b2f      	ldr	r3, [pc, #188]	; (8008b74 <xPortStartScheduler+0x134>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	4a2d      	ldr	r2, [pc, #180]	; (8008b74 <xPortStartScheduler+0x134>)
 8008abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d0ef      	beq.n	8008ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ad6:	4b27      	ldr	r3, [pc, #156]	; (8008b74 <xPortStartScheduler+0x134>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f1c3 0307 	rsb	r3, r3, #7
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d00a      	beq.n	8008af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60bb      	str	r3, [r7, #8]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008af8:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <xPortStartScheduler+0x134>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	021b      	lsls	r3, r3, #8
 8008afe:	4a1d      	ldr	r2, [pc, #116]	; (8008b74 <xPortStartScheduler+0x134>)
 8008b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b02:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <xPortStartScheduler+0x134>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	; (8008b74 <xPortStartScheduler+0x134>)
 8008b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b16:	4b18      	ldr	r3, [pc, #96]	; (8008b78 <xPortStartScheduler+0x138>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a17      	ldr	r2, [pc, #92]	; (8008b78 <xPortStartScheduler+0x138>)
 8008b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b22:	4b15      	ldr	r3, [pc, #84]	; (8008b78 <xPortStartScheduler+0x138>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a14      	ldr	r2, [pc, #80]	; (8008b78 <xPortStartScheduler+0x138>)
 8008b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b2e:	f000 f8dd 	bl	8008cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b32:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <xPortStartScheduler+0x13c>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b38:	f000 f8fc 	bl	8008d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b3c:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <xPortStartScheduler+0x140>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0f      	ldr	r2, [pc, #60]	; (8008b80 <xPortStartScheduler+0x140>)
 8008b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b48:	f7ff ff66 	bl	8008a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b4c:	f7ff f87e 	bl	8007c4c <vTaskSwitchContext>
	prvTaskExitError();
 8008b50:	f7ff ff1e 	bl	8008990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	e000ed00 	.word	0xe000ed00
 8008b64:	410fc271 	.word	0x410fc271
 8008b68:	410fc270 	.word	0x410fc270
 8008b6c:	e000e400 	.word	0xe000e400
 8008b70:	20000fec 	.word	0x20000fec
 8008b74:	20000ff0 	.word	0x20000ff0
 8008b78:	e000ed20 	.word	0xe000ed20
 8008b7c:	2000000c 	.word	0x2000000c
 8008b80:	e000ef34 	.word	0xe000ef34

08008b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	607b      	str	r3, [r7, #4]
}
 8008b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b9e:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <vPortEnterCritical+0x58>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	4a0d      	ldr	r2, [pc, #52]	; (8008bdc <vPortEnterCritical+0x58>)
 8008ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ba8:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <vPortEnterCritical+0x58>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d10f      	bne.n	8008bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <vPortEnterCritical+0x5c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	603b      	str	r3, [r7, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	e7fe      	b.n	8008bce <vPortEnterCritical+0x4a>
	}
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	2000000c 	.word	0x2000000c
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bea:	4b12      	ldr	r3, [pc, #72]	; (8008c34 <vPortExitCritical+0x50>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <vPortExitCritical+0x24>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	607b      	str	r3, [r7, #4]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c08:	4b0a      	ldr	r3, [pc, #40]	; (8008c34 <vPortExitCritical+0x50>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4a09      	ldr	r2, [pc, #36]	; (8008c34 <vPortExitCritical+0x50>)
 8008c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c12:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <vPortExitCritical+0x50>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d105      	bne.n	8008c26 <vPortExitCritical+0x42>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	f383 8811 	msr	BASEPRI, r3
}
 8008c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	2000000c 	.word	0x2000000c
	...

08008c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c40:	f3ef 8009 	mrs	r0, PSP
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <pxCurrentTCBConst>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	f01e 0f10 	tst.w	lr, #16
 8008c50:	bf08      	it	eq
 8008c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5a:	6010      	str	r0, [r2, #0]
 8008c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c64:	f380 8811 	msr	BASEPRI, r0
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f7fe ffec 	bl	8007c4c <vTaskSwitchContext>
 8008c74:	f04f 0000 	mov.w	r0, #0
 8008c78:	f380 8811 	msr	BASEPRI, r0
 8008c7c:	bc09      	pop	{r0, r3}
 8008c7e:	6819      	ldr	r1, [r3, #0]
 8008c80:	6808      	ldr	r0, [r1, #0]
 8008c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c86:	f01e 0f10 	tst.w	lr, #16
 8008c8a:	bf08      	it	eq
 8008c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c90:	f380 8809 	msr	PSP, r0
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	f3af 8000 	nop.w

08008ca0 <pxCurrentTCBConst>:
 8008ca0:	200009c0 	.word	0x200009c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop

08008ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	607b      	str	r3, [r7, #4]
}
 8008cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cc2:	f7fe ff05 	bl	8007ad0 <xTaskIncrementTick>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ccc:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <SysTick_Handler+0x40>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f383 8811 	msr	BASEPRI, r3
}
 8008cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <vPortSetupTimerInterrupt+0x34>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cf6:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <vPortSetupTimerInterrupt+0x38>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <vPortSetupTimerInterrupt+0x3c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a0a      	ldr	r2, [pc, #40]	; (8008d2c <vPortSetupTimerInterrupt+0x40>)
 8008d02:	fba2 2303 	umull	r2, r3, r2, r3
 8008d06:	099b      	lsrs	r3, r3, #6
 8008d08:	4a09      	ldr	r2, [pc, #36]	; (8008d30 <vPortSetupTimerInterrupt+0x44>)
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d0e:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <vPortSetupTimerInterrupt+0x34>)
 8008d10:	2207      	movs	r2, #7
 8008d12:	601a      	str	r2, [r3, #0]
}
 8008d14:	bf00      	nop
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	e000e010 	.word	0xe000e010
 8008d24:	e000e018 	.word	0xe000e018
 8008d28:	20000000 	.word	0x20000000
 8008d2c:	10624dd3 	.word	0x10624dd3
 8008d30:	e000e014 	.word	0xe000e014

08008d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d44 <vPortEnableVFP+0x10>
 8008d38:	6801      	ldr	r1, [r0, #0]
 8008d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d3e:	6001      	str	r1, [r0, #0]
 8008d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d42:	bf00      	nop
 8008d44:	e000ed88 	.word	0xe000ed88

08008d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d4e:	f3ef 8305 	mrs	r3, IPSR
 8008d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b0f      	cmp	r3, #15
 8008d58:	d914      	bls.n	8008d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d5a:	4a17      	ldr	r2, [pc, #92]	; (8008db8 <vPortValidateInterruptPriority+0x70>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d64:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <vPortValidateInterruptPriority+0x74>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	7afa      	ldrb	r2, [r7, #11]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d20a      	bcs.n	8008d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	607b      	str	r3, [r7, #4]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d84:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <vPortValidateInterruptPriority+0x78>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <vPortValidateInterruptPriority+0x7c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d90a      	bls.n	8008daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	603b      	str	r3, [r7, #0]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <vPortValidateInterruptPriority+0x60>
	}
 8008daa:	bf00      	nop
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	e000e3f0 	.word	0xe000e3f0
 8008dbc:	20000fec 	.word	0x20000fec
 8008dc0:	e000ed0c 	.word	0xe000ed0c
 8008dc4:	20000ff0 	.word	0x20000ff0

08008dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	; 0x28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dd4:	f7fe fdc0 	bl	8007958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dd8:	4b58      	ldr	r3, [pc, #352]	; (8008f3c <pvPortMalloc+0x174>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008de0:	f000 f910 	bl	8009004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008de4:	4b56      	ldr	r3, [pc, #344]	; (8008f40 <pvPortMalloc+0x178>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4013      	ands	r3, r2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f040 808e 	bne.w	8008f0e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01d      	beq.n	8008e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008df8:	2208      	movs	r2, #8
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d014      	beq.n	8008e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f023 0307 	bic.w	r3, r3, #7
 8008e10:	3308      	adds	r3, #8
 8008e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <pvPortMalloc+0x6c>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	617b      	str	r3, [r7, #20]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d069      	beq.n	8008f0e <pvPortMalloc+0x146>
 8008e3a:	4b42      	ldr	r3, [pc, #264]	; (8008f44 <pvPortMalloc+0x17c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d864      	bhi.n	8008f0e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e44:	4b40      	ldr	r3, [pc, #256]	; (8008f48 <pvPortMalloc+0x180>)
 8008e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e48:	4b3f      	ldr	r3, [pc, #252]	; (8008f48 <pvPortMalloc+0x180>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e4e:	e004      	b.n	8008e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d903      	bls.n	8008e6c <pvPortMalloc+0xa4>
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f1      	bne.n	8008e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e6c:	4b33      	ldr	r3, [pc, #204]	; (8008f3c <pvPortMalloc+0x174>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d04b      	beq.n	8008f0e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2208      	movs	r2, #8
 8008e7c:	4413      	add	r3, r2
 8008e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	1ad2      	subs	r2, r2, r3
 8008e90:	2308      	movs	r3, #8
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d91f      	bls.n	8008ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	613b      	str	r3, [r7, #16]
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ed2:	69b8      	ldr	r0, [r7, #24]
 8008ed4:	f000 f8f8 	bl	80090c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ed8:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <pvPortMalloc+0x17c>)
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	4a18      	ldr	r2, [pc, #96]	; (8008f44 <pvPortMalloc+0x17c>)
 8008ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ee6:	4b17      	ldr	r3, [pc, #92]	; (8008f44 <pvPortMalloc+0x17c>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b18      	ldr	r3, [pc, #96]	; (8008f4c <pvPortMalloc+0x184>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d203      	bcs.n	8008efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ef2:	4b14      	ldr	r3, [pc, #80]	; (8008f44 <pvPortMalloc+0x17c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <pvPortMalloc+0x184>)
 8008ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <pvPortMalloc+0x178>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f0e:	f7fe fd31 	bl	8007974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <pvPortMalloc+0x16a>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	60fb      	str	r3, [r7, #12]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <pvPortMalloc+0x168>
	return pvReturn;
 8008f32:	69fb      	ldr	r3, [r7, #28]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3728      	adds	r7, #40	; 0x28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20001bfc 	.word	0x20001bfc
 8008f40:	20001c08 	.word	0x20001c08
 8008f44:	20001c00 	.word	0x20001c00
 8008f48:	20001bf4 	.word	0x20001bf4
 8008f4c:	20001c04 	.word	0x20001c04

08008f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d048      	beq.n	8008ff4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f62:	2308      	movs	r3, #8
 8008f64:	425b      	negs	r3, r3
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4413      	add	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	4b21      	ldr	r3, [pc, #132]	; (8008ffc <vPortFree+0xac>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <vPortFree+0x44>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60fb      	str	r3, [r7, #12]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <vPortFree+0x62>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	60bb      	str	r3, [r7, #8]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <vPortFree+0xac>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d019      	beq.n	8008ff4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d115      	bne.n	8008ff4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <vPortFree+0xac>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fd8:	f7fe fcbe 	bl	8007958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <vPortFree+0xb0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4a06      	ldr	r2, [pc, #24]	; (8009000 <vPortFree+0xb0>)
 8008fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fea:	6938      	ldr	r0, [r7, #16]
 8008fec:	f000 f86c 	bl	80090c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ff0:	f7fe fcc0 	bl	8007974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20001c08 	.word	0x20001c08
 8009000:	20001c00 	.word	0x20001c00

08009004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800900a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800900e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009010:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <prvHeapInit+0xac>)
 8009012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00c      	beq.n	8009038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <prvHeapInit+0xac>)
 8009034:	4413      	add	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <prvHeapInit+0xb0>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009042:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <prvHeapInit+0xb0>)
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009050:	2208      	movs	r2, #8
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <prvHeapInit+0xb4>)
 8009064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <prvHeapInit+0xb4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800906e:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <prvHeapInit+0xb4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <prvHeapInit+0xb4>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <prvHeapInit+0xb8>)
 8009092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <prvHeapInit+0xbc>)
 800909a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <prvHeapInit+0xc0>)
 800909e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	20000ff4 	.word	0x20000ff4
 80090b4:	20001bf4 	.word	0x20001bf4
 80090b8:	20001bfc 	.word	0x20001bfc
 80090bc:	20001c04 	.word	0x20001c04
 80090c0:	20001c00 	.word	0x20001c00
 80090c4:	20001c08 	.word	0x20001c08

080090c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090d0:	4b28      	ldr	r3, [pc, #160]	; (8009174 <prvInsertBlockIntoFreeList+0xac>)
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <prvInsertBlockIntoFreeList+0x14>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d8f7      	bhi.n	80090d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4413      	add	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d108      	bne.n	800910a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	441a      	add	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d118      	bne.n	8009150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d00d      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e008      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e003      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d002      	beq.n	8009166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20001bf4 	.word	0x20001bf4
 8009178:	20001bfc 	.word	0x20001bfc

0800917c <__errno>:
 800917c:	4b01      	ldr	r3, [pc, #4]	; (8009184 <__errno+0x8>)
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000010 	.word	0x20000010

08009188 <std>:
 8009188:	2300      	movs	r3, #0
 800918a:	b510      	push	{r4, lr}
 800918c:	4604      	mov	r4, r0
 800918e:	e9c0 3300 	strd	r3, r3, [r0]
 8009192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009196:	6083      	str	r3, [r0, #8]
 8009198:	8181      	strh	r1, [r0, #12]
 800919a:	6643      	str	r3, [r0, #100]	; 0x64
 800919c:	81c2      	strh	r2, [r0, #14]
 800919e:	6183      	str	r3, [r0, #24]
 80091a0:	4619      	mov	r1, r3
 80091a2:	2208      	movs	r2, #8
 80091a4:	305c      	adds	r0, #92	; 0x5c
 80091a6:	f000 f923 	bl	80093f0 <memset>
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <std+0x38>)
 80091ac:	6263      	str	r3, [r4, #36]	; 0x24
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <std+0x3c>)
 80091b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <std+0x40>)
 80091b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <std+0x44>)
 80091b8:	6224      	str	r4, [r4, #32]
 80091ba:	6323      	str	r3, [r4, #48]	; 0x30
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	bf00      	nop
 80091c0:	0800a3e1 	.word	0x0800a3e1
 80091c4:	0800a407 	.word	0x0800a407
 80091c8:	0800a43f 	.word	0x0800a43f
 80091cc:	0800a463 	.word	0x0800a463

080091d0 <_cleanup_r>:
 80091d0:	4901      	ldr	r1, [pc, #4]	; (80091d8 <_cleanup_r+0x8>)
 80091d2:	f000 b8af 	b.w	8009334 <_fwalk_reent>
 80091d6:	bf00      	nop
 80091d8:	0800c035 	.word	0x0800c035

080091dc <__sfmoreglue>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	1e4a      	subs	r2, r1, #1
 80091e0:	2568      	movs	r5, #104	; 0x68
 80091e2:	4355      	muls	r5, r2
 80091e4:	460e      	mov	r6, r1
 80091e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ea:	f000 f959 	bl	80094a0 <_malloc_r>
 80091ee:	4604      	mov	r4, r0
 80091f0:	b140      	cbz	r0, 8009204 <__sfmoreglue+0x28>
 80091f2:	2100      	movs	r1, #0
 80091f4:	e9c0 1600 	strd	r1, r6, [r0]
 80091f8:	300c      	adds	r0, #12
 80091fa:	60a0      	str	r0, [r4, #8]
 80091fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009200:	f000 f8f6 	bl	80093f0 <memset>
 8009204:	4620      	mov	r0, r4
 8009206:	bd70      	pop	{r4, r5, r6, pc}

08009208 <__sfp_lock_acquire>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__sfp_lock_acquire+0x8>)
 800920a:	f000 b8d8 	b.w	80093be <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	20006060 	.word	0x20006060

08009214 <__sfp_lock_release>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sfp_lock_release+0x8>)
 8009216:	f000 b8d3 	b.w	80093c0 <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	20006060 	.word	0x20006060

08009220 <__sinit_lock_acquire>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__sinit_lock_acquire+0x8>)
 8009222:	f000 b8cc 	b.w	80093be <__retarget_lock_acquire_recursive>
 8009226:	bf00      	nop
 8009228:	2000605b 	.word	0x2000605b

0800922c <__sinit_lock_release>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sinit_lock_release+0x8>)
 800922e:	f000 b8c7 	b.w	80093c0 <__retarget_lock_release_recursive>
 8009232:	bf00      	nop
 8009234:	2000605b 	.word	0x2000605b

08009238 <__sinit>:
 8009238:	b510      	push	{r4, lr}
 800923a:	4604      	mov	r4, r0
 800923c:	f7ff fff0 	bl	8009220 <__sinit_lock_acquire>
 8009240:	69a3      	ldr	r3, [r4, #24]
 8009242:	b11b      	cbz	r3, 800924c <__sinit+0x14>
 8009244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009248:	f7ff bff0 	b.w	800922c <__sinit_lock_release>
 800924c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009250:	6523      	str	r3, [r4, #80]	; 0x50
 8009252:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <__sinit+0x68>)
 8009254:	4a13      	ldr	r2, [pc, #76]	; (80092a4 <__sinit+0x6c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	62a2      	str	r2, [r4, #40]	; 0x28
 800925a:	42a3      	cmp	r3, r4
 800925c:	bf04      	itt	eq
 800925e:	2301      	moveq	r3, #1
 8009260:	61a3      	streq	r3, [r4, #24]
 8009262:	4620      	mov	r0, r4
 8009264:	f000 f820 	bl	80092a8 <__sfp>
 8009268:	6060      	str	r0, [r4, #4]
 800926a:	4620      	mov	r0, r4
 800926c:	f000 f81c 	bl	80092a8 <__sfp>
 8009270:	60a0      	str	r0, [r4, #8]
 8009272:	4620      	mov	r0, r4
 8009274:	f000 f818 	bl	80092a8 <__sfp>
 8009278:	2200      	movs	r2, #0
 800927a:	60e0      	str	r0, [r4, #12]
 800927c:	2104      	movs	r1, #4
 800927e:	6860      	ldr	r0, [r4, #4]
 8009280:	f7ff ff82 	bl	8009188 <std>
 8009284:	68a0      	ldr	r0, [r4, #8]
 8009286:	2201      	movs	r2, #1
 8009288:	2109      	movs	r1, #9
 800928a:	f7ff ff7d 	bl	8009188 <std>
 800928e:	68e0      	ldr	r0, [r4, #12]
 8009290:	2202      	movs	r2, #2
 8009292:	2112      	movs	r1, #18
 8009294:	f7ff ff78 	bl	8009188 <std>
 8009298:	2301      	movs	r3, #1
 800929a:	61a3      	str	r3, [r4, #24]
 800929c:	e7d2      	b.n	8009244 <__sinit+0xc>
 800929e:	bf00      	nop
 80092a0:	0800e6cc 	.word	0x0800e6cc
 80092a4:	080091d1 	.word	0x080091d1

080092a8 <__sfp>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	4607      	mov	r7, r0
 80092ac:	f7ff ffac 	bl	8009208 <__sfp_lock_acquire>
 80092b0:	4b1e      	ldr	r3, [pc, #120]	; (800932c <__sfp+0x84>)
 80092b2:	681e      	ldr	r6, [r3, #0]
 80092b4:	69b3      	ldr	r3, [r6, #24]
 80092b6:	b913      	cbnz	r3, 80092be <__sfp+0x16>
 80092b8:	4630      	mov	r0, r6
 80092ba:	f7ff ffbd 	bl	8009238 <__sinit>
 80092be:	3648      	adds	r6, #72	; 0x48
 80092c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	d503      	bpl.n	80092d0 <__sfp+0x28>
 80092c8:	6833      	ldr	r3, [r6, #0]
 80092ca:	b30b      	cbz	r3, 8009310 <__sfp+0x68>
 80092cc:	6836      	ldr	r6, [r6, #0]
 80092ce:	e7f7      	b.n	80092c0 <__sfp+0x18>
 80092d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092d4:	b9d5      	cbnz	r5, 800930c <__sfp+0x64>
 80092d6:	4b16      	ldr	r3, [pc, #88]	; (8009330 <__sfp+0x88>)
 80092d8:	60e3      	str	r3, [r4, #12]
 80092da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092de:	6665      	str	r5, [r4, #100]	; 0x64
 80092e0:	f000 f86c 	bl	80093bc <__retarget_lock_init_recursive>
 80092e4:	f7ff ff96 	bl	8009214 <__sfp_lock_release>
 80092e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092f0:	6025      	str	r5, [r4, #0]
 80092f2:	61a5      	str	r5, [r4, #24]
 80092f4:	2208      	movs	r2, #8
 80092f6:	4629      	mov	r1, r5
 80092f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092fc:	f000 f878 	bl	80093f0 <memset>
 8009300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009308:	4620      	mov	r0, r4
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930c:	3468      	adds	r4, #104	; 0x68
 800930e:	e7d9      	b.n	80092c4 <__sfp+0x1c>
 8009310:	2104      	movs	r1, #4
 8009312:	4638      	mov	r0, r7
 8009314:	f7ff ff62 	bl	80091dc <__sfmoreglue>
 8009318:	4604      	mov	r4, r0
 800931a:	6030      	str	r0, [r6, #0]
 800931c:	2800      	cmp	r0, #0
 800931e:	d1d5      	bne.n	80092cc <__sfp+0x24>
 8009320:	f7ff ff78 	bl	8009214 <__sfp_lock_release>
 8009324:	230c      	movs	r3, #12
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	e7ee      	b.n	8009308 <__sfp+0x60>
 800932a:	bf00      	nop
 800932c:	0800e6cc 	.word	0x0800e6cc
 8009330:	ffff0001 	.word	0xffff0001

08009334 <_fwalk_reent>:
 8009334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009338:	4606      	mov	r6, r0
 800933a:	4688      	mov	r8, r1
 800933c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009340:	2700      	movs	r7, #0
 8009342:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009346:	f1b9 0901 	subs.w	r9, r9, #1
 800934a:	d505      	bpl.n	8009358 <_fwalk_reent+0x24>
 800934c:	6824      	ldr	r4, [r4, #0]
 800934e:	2c00      	cmp	r4, #0
 8009350:	d1f7      	bne.n	8009342 <_fwalk_reent+0xe>
 8009352:	4638      	mov	r0, r7
 8009354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009358:	89ab      	ldrh	r3, [r5, #12]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d907      	bls.n	800936e <_fwalk_reent+0x3a>
 800935e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009362:	3301      	adds	r3, #1
 8009364:	d003      	beq.n	800936e <_fwalk_reent+0x3a>
 8009366:	4629      	mov	r1, r5
 8009368:	4630      	mov	r0, r6
 800936a:	47c0      	blx	r8
 800936c:	4307      	orrs	r7, r0
 800936e:	3568      	adds	r5, #104	; 0x68
 8009370:	e7e9      	b.n	8009346 <_fwalk_reent+0x12>
	...

08009374 <__libc_init_array>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	4d0d      	ldr	r5, [pc, #52]	; (80093ac <__libc_init_array+0x38>)
 8009378:	4c0d      	ldr	r4, [pc, #52]	; (80093b0 <__libc_init_array+0x3c>)
 800937a:	1b64      	subs	r4, r4, r5
 800937c:	10a4      	asrs	r4, r4, #2
 800937e:	2600      	movs	r6, #0
 8009380:	42a6      	cmp	r6, r4
 8009382:	d109      	bne.n	8009398 <__libc_init_array+0x24>
 8009384:	4d0b      	ldr	r5, [pc, #44]	; (80093b4 <__libc_init_array+0x40>)
 8009386:	4c0c      	ldr	r4, [pc, #48]	; (80093b8 <__libc_init_array+0x44>)
 8009388:	f004 fff6 	bl	800e378 <_init>
 800938c:	1b64      	subs	r4, r4, r5
 800938e:	10a4      	asrs	r4, r4, #2
 8009390:	2600      	movs	r6, #0
 8009392:	42a6      	cmp	r6, r4
 8009394:	d105      	bne.n	80093a2 <__libc_init_array+0x2e>
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	f855 3b04 	ldr.w	r3, [r5], #4
 800939c:	4798      	blx	r3
 800939e:	3601      	adds	r6, #1
 80093a0:	e7ee      	b.n	8009380 <__libc_init_array+0xc>
 80093a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a6:	4798      	blx	r3
 80093a8:	3601      	adds	r6, #1
 80093aa:	e7f2      	b.n	8009392 <__libc_init_array+0x1e>
 80093ac:	0800eb34 	.word	0x0800eb34
 80093b0:	0800eb34 	.word	0x0800eb34
 80093b4:	0800eb34 	.word	0x0800eb34
 80093b8:	0800eb38 	.word	0x0800eb38

080093bc <__retarget_lock_init_recursive>:
 80093bc:	4770      	bx	lr

080093be <__retarget_lock_acquire_recursive>:
 80093be:	4770      	bx	lr

080093c0 <__retarget_lock_release_recursive>:
 80093c0:	4770      	bx	lr
	...

080093c4 <malloc>:
 80093c4:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <malloc+0xc>)
 80093c6:	4601      	mov	r1, r0
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	f000 b869 	b.w	80094a0 <_malloc_r>
 80093ce:	bf00      	nop
 80093d0:	20000010 	.word	0x20000010

080093d4 <memcpy>:
 80093d4:	440a      	add	r2, r1
 80093d6:	4291      	cmp	r1, r2
 80093d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093dc:	d100      	bne.n	80093e0 <memcpy+0xc>
 80093de:	4770      	bx	lr
 80093e0:	b510      	push	{r4, lr}
 80093e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ea:	4291      	cmp	r1, r2
 80093ec:	d1f9      	bne.n	80093e2 <memcpy+0xe>
 80093ee:	bd10      	pop	{r4, pc}

080093f0 <memset>:
 80093f0:	4402      	add	r2, r0
 80093f2:	4603      	mov	r3, r0
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d100      	bne.n	80093fa <memset+0xa>
 80093f8:	4770      	bx	lr
 80093fa:	f803 1b01 	strb.w	r1, [r3], #1
 80093fe:	e7f9      	b.n	80093f4 <memset+0x4>

08009400 <_free_r>:
 8009400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009402:	2900      	cmp	r1, #0
 8009404:	d048      	beq.n	8009498 <_free_r+0x98>
 8009406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800940a:	9001      	str	r0, [sp, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f1a1 0404 	sub.w	r4, r1, #4
 8009412:	bfb8      	it	lt
 8009414:	18e4      	addlt	r4, r4, r3
 8009416:	f003 f9e1 	bl	800c7dc <__malloc_lock>
 800941a:	4a20      	ldr	r2, [pc, #128]	; (800949c <_free_r+0x9c>)
 800941c:	9801      	ldr	r0, [sp, #4]
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	4615      	mov	r5, r2
 8009422:	b933      	cbnz	r3, 8009432 <_free_r+0x32>
 8009424:	6063      	str	r3, [r4, #4]
 8009426:	6014      	str	r4, [r2, #0]
 8009428:	b003      	add	sp, #12
 800942a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800942e:	f003 b9db 	b.w	800c7e8 <__malloc_unlock>
 8009432:	42a3      	cmp	r3, r4
 8009434:	d90b      	bls.n	800944e <_free_r+0x4e>
 8009436:	6821      	ldr	r1, [r4, #0]
 8009438:	1862      	adds	r2, r4, r1
 800943a:	4293      	cmp	r3, r2
 800943c:	bf04      	itt	eq
 800943e:	681a      	ldreq	r2, [r3, #0]
 8009440:	685b      	ldreq	r3, [r3, #4]
 8009442:	6063      	str	r3, [r4, #4]
 8009444:	bf04      	itt	eq
 8009446:	1852      	addeq	r2, r2, r1
 8009448:	6022      	streq	r2, [r4, #0]
 800944a:	602c      	str	r4, [r5, #0]
 800944c:	e7ec      	b.n	8009428 <_free_r+0x28>
 800944e:	461a      	mov	r2, r3
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	b10b      	cbz	r3, 8009458 <_free_r+0x58>
 8009454:	42a3      	cmp	r3, r4
 8009456:	d9fa      	bls.n	800944e <_free_r+0x4e>
 8009458:	6811      	ldr	r1, [r2, #0]
 800945a:	1855      	adds	r5, r2, r1
 800945c:	42a5      	cmp	r5, r4
 800945e:	d10b      	bne.n	8009478 <_free_r+0x78>
 8009460:	6824      	ldr	r4, [r4, #0]
 8009462:	4421      	add	r1, r4
 8009464:	1854      	adds	r4, r2, r1
 8009466:	42a3      	cmp	r3, r4
 8009468:	6011      	str	r1, [r2, #0]
 800946a:	d1dd      	bne.n	8009428 <_free_r+0x28>
 800946c:	681c      	ldr	r4, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	6053      	str	r3, [r2, #4]
 8009472:	4421      	add	r1, r4
 8009474:	6011      	str	r1, [r2, #0]
 8009476:	e7d7      	b.n	8009428 <_free_r+0x28>
 8009478:	d902      	bls.n	8009480 <_free_r+0x80>
 800947a:	230c      	movs	r3, #12
 800947c:	6003      	str	r3, [r0, #0]
 800947e:	e7d3      	b.n	8009428 <_free_r+0x28>
 8009480:	6825      	ldr	r5, [r4, #0]
 8009482:	1961      	adds	r1, r4, r5
 8009484:	428b      	cmp	r3, r1
 8009486:	bf04      	itt	eq
 8009488:	6819      	ldreq	r1, [r3, #0]
 800948a:	685b      	ldreq	r3, [r3, #4]
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	bf04      	itt	eq
 8009490:	1949      	addeq	r1, r1, r5
 8009492:	6021      	streq	r1, [r4, #0]
 8009494:	6054      	str	r4, [r2, #4]
 8009496:	e7c7      	b.n	8009428 <_free_r+0x28>
 8009498:	b003      	add	sp, #12
 800949a:	bd30      	pop	{r4, r5, pc}
 800949c:	20001c0c 	.word	0x20001c0c

080094a0 <_malloc_r>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	1ccd      	adds	r5, r1, #3
 80094a4:	f025 0503 	bic.w	r5, r5, #3
 80094a8:	3508      	adds	r5, #8
 80094aa:	2d0c      	cmp	r5, #12
 80094ac:	bf38      	it	cc
 80094ae:	250c      	movcc	r5, #12
 80094b0:	2d00      	cmp	r5, #0
 80094b2:	4606      	mov	r6, r0
 80094b4:	db01      	blt.n	80094ba <_malloc_r+0x1a>
 80094b6:	42a9      	cmp	r1, r5
 80094b8:	d903      	bls.n	80094c2 <_malloc_r+0x22>
 80094ba:	230c      	movs	r3, #12
 80094bc:	6033      	str	r3, [r6, #0]
 80094be:	2000      	movs	r0, #0
 80094c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c2:	f003 f98b 	bl	800c7dc <__malloc_lock>
 80094c6:	4921      	ldr	r1, [pc, #132]	; (800954c <_malloc_r+0xac>)
 80094c8:	680a      	ldr	r2, [r1, #0]
 80094ca:	4614      	mov	r4, r2
 80094cc:	b99c      	cbnz	r4, 80094f6 <_malloc_r+0x56>
 80094ce:	4f20      	ldr	r7, [pc, #128]	; (8009550 <_malloc_r+0xb0>)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	b923      	cbnz	r3, 80094de <_malloc_r+0x3e>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 ff20 	bl	800a31c <_sbrk_r>
 80094dc:	6038      	str	r0, [r7, #0]
 80094de:	4629      	mov	r1, r5
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 ff1b 	bl	800a31c <_sbrk_r>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	d123      	bne.n	8009532 <_malloc_r+0x92>
 80094ea:	230c      	movs	r3, #12
 80094ec:	6033      	str	r3, [r6, #0]
 80094ee:	4630      	mov	r0, r6
 80094f0:	f003 f97a 	bl	800c7e8 <__malloc_unlock>
 80094f4:	e7e3      	b.n	80094be <_malloc_r+0x1e>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	1b5b      	subs	r3, r3, r5
 80094fa:	d417      	bmi.n	800952c <_malloc_r+0x8c>
 80094fc:	2b0b      	cmp	r3, #11
 80094fe:	d903      	bls.n	8009508 <_malloc_r+0x68>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	441c      	add	r4, r3
 8009504:	6025      	str	r5, [r4, #0]
 8009506:	e004      	b.n	8009512 <_malloc_r+0x72>
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	42a2      	cmp	r2, r4
 800950c:	bf0c      	ite	eq
 800950e:	600b      	streq	r3, [r1, #0]
 8009510:	6053      	strne	r3, [r2, #4]
 8009512:	4630      	mov	r0, r6
 8009514:	f003 f968 	bl	800c7e8 <__malloc_unlock>
 8009518:	f104 000b 	add.w	r0, r4, #11
 800951c:	1d23      	adds	r3, r4, #4
 800951e:	f020 0007 	bic.w	r0, r0, #7
 8009522:	1ac2      	subs	r2, r0, r3
 8009524:	d0cc      	beq.n	80094c0 <_malloc_r+0x20>
 8009526:	1a1b      	subs	r3, r3, r0
 8009528:	50a3      	str	r3, [r4, r2]
 800952a:	e7c9      	b.n	80094c0 <_malloc_r+0x20>
 800952c:	4622      	mov	r2, r4
 800952e:	6864      	ldr	r4, [r4, #4]
 8009530:	e7cc      	b.n	80094cc <_malloc_r+0x2c>
 8009532:	1cc4      	adds	r4, r0, #3
 8009534:	f024 0403 	bic.w	r4, r4, #3
 8009538:	42a0      	cmp	r0, r4
 800953a:	d0e3      	beq.n	8009504 <_malloc_r+0x64>
 800953c:	1a21      	subs	r1, r4, r0
 800953e:	4630      	mov	r0, r6
 8009540:	f000 feec 	bl	800a31c <_sbrk_r>
 8009544:	3001      	adds	r0, #1
 8009546:	d1dd      	bne.n	8009504 <_malloc_r+0x64>
 8009548:	e7cf      	b.n	80094ea <_malloc_r+0x4a>
 800954a:	bf00      	nop
 800954c:	20001c0c 	.word	0x20001c0c
 8009550:	20001c10 	.word	0x20001c10

08009554 <__cvt>:
 8009554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	ec55 4b10 	vmov	r4, r5, d0
 800955c:	2d00      	cmp	r5, #0
 800955e:	460e      	mov	r6, r1
 8009560:	4619      	mov	r1, r3
 8009562:	462b      	mov	r3, r5
 8009564:	bfbb      	ittet	lt
 8009566:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800956a:	461d      	movlt	r5, r3
 800956c:	2300      	movge	r3, #0
 800956e:	232d      	movlt	r3, #45	; 0x2d
 8009570:	700b      	strb	r3, [r1, #0]
 8009572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009574:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009578:	4691      	mov	r9, r2
 800957a:	f023 0820 	bic.w	r8, r3, #32
 800957e:	bfbc      	itt	lt
 8009580:	4622      	movlt	r2, r4
 8009582:	4614      	movlt	r4, r2
 8009584:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009588:	d005      	beq.n	8009596 <__cvt+0x42>
 800958a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800958e:	d100      	bne.n	8009592 <__cvt+0x3e>
 8009590:	3601      	adds	r6, #1
 8009592:	2102      	movs	r1, #2
 8009594:	e000      	b.n	8009598 <__cvt+0x44>
 8009596:	2103      	movs	r1, #3
 8009598:	ab03      	add	r3, sp, #12
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	ab02      	add	r3, sp, #8
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	ec45 4b10 	vmov	d0, r4, r5
 80095a4:	4653      	mov	r3, sl
 80095a6:	4632      	mov	r2, r6
 80095a8:	f001 fed2 	bl	800b350 <_dtoa_r>
 80095ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095b0:	4607      	mov	r7, r0
 80095b2:	d102      	bne.n	80095ba <__cvt+0x66>
 80095b4:	f019 0f01 	tst.w	r9, #1
 80095b8:	d022      	beq.n	8009600 <__cvt+0xac>
 80095ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095be:	eb07 0906 	add.w	r9, r7, r6
 80095c2:	d110      	bne.n	80095e6 <__cvt+0x92>
 80095c4:	783b      	ldrb	r3, [r7, #0]
 80095c6:	2b30      	cmp	r3, #48	; 0x30
 80095c8:	d10a      	bne.n	80095e0 <__cvt+0x8c>
 80095ca:	2200      	movs	r2, #0
 80095cc:	2300      	movs	r3, #0
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f7 fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80095d6:	b918      	cbnz	r0, 80095e0 <__cvt+0x8c>
 80095d8:	f1c6 0601 	rsb	r6, r6, #1
 80095dc:	f8ca 6000 	str.w	r6, [sl]
 80095e0:	f8da 3000 	ldr.w	r3, [sl]
 80095e4:	4499      	add	r9, r3
 80095e6:	2200      	movs	r2, #0
 80095e8:	2300      	movs	r3, #0
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	f7f7 fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 80095f2:	b108      	cbz	r0, 80095f8 <__cvt+0xa4>
 80095f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80095f8:	2230      	movs	r2, #48	; 0x30
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	454b      	cmp	r3, r9
 80095fe:	d307      	bcc.n	8009610 <__cvt+0xbc>
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009604:	1bdb      	subs	r3, r3, r7
 8009606:	4638      	mov	r0, r7
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	b004      	add	sp, #16
 800960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009610:	1c59      	adds	r1, r3, #1
 8009612:	9103      	str	r1, [sp, #12]
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e7f0      	b.n	80095fa <__cvt+0xa6>

08009618 <__exponent>:
 8009618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800961a:	4603      	mov	r3, r0
 800961c:	2900      	cmp	r1, #0
 800961e:	bfb8      	it	lt
 8009620:	4249      	neglt	r1, r1
 8009622:	f803 2b02 	strb.w	r2, [r3], #2
 8009626:	bfb4      	ite	lt
 8009628:	222d      	movlt	r2, #45	; 0x2d
 800962a:	222b      	movge	r2, #43	; 0x2b
 800962c:	2909      	cmp	r1, #9
 800962e:	7042      	strb	r2, [r0, #1]
 8009630:	dd2a      	ble.n	8009688 <__exponent+0x70>
 8009632:	f10d 0407 	add.w	r4, sp, #7
 8009636:	46a4      	mov	ip, r4
 8009638:	270a      	movs	r7, #10
 800963a:	46a6      	mov	lr, r4
 800963c:	460a      	mov	r2, r1
 800963e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009642:	fb07 1516 	mls	r5, r7, r6, r1
 8009646:	3530      	adds	r5, #48	; 0x30
 8009648:	2a63      	cmp	r2, #99	; 0x63
 800964a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800964e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009652:	4631      	mov	r1, r6
 8009654:	dcf1      	bgt.n	800963a <__exponent+0x22>
 8009656:	3130      	adds	r1, #48	; 0x30
 8009658:	f1ae 0502 	sub.w	r5, lr, #2
 800965c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009660:	1c44      	adds	r4, r0, #1
 8009662:	4629      	mov	r1, r5
 8009664:	4561      	cmp	r1, ip
 8009666:	d30a      	bcc.n	800967e <__exponent+0x66>
 8009668:	f10d 0209 	add.w	r2, sp, #9
 800966c:	eba2 020e 	sub.w	r2, r2, lr
 8009670:	4565      	cmp	r5, ip
 8009672:	bf88      	it	hi
 8009674:	2200      	movhi	r2, #0
 8009676:	4413      	add	r3, r2
 8009678:	1a18      	subs	r0, r3, r0
 800967a:	b003      	add	sp, #12
 800967c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009682:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009686:	e7ed      	b.n	8009664 <__exponent+0x4c>
 8009688:	2330      	movs	r3, #48	; 0x30
 800968a:	3130      	adds	r1, #48	; 0x30
 800968c:	7083      	strb	r3, [r0, #2]
 800968e:	70c1      	strb	r1, [r0, #3]
 8009690:	1d03      	adds	r3, r0, #4
 8009692:	e7f1      	b.n	8009678 <__exponent+0x60>

08009694 <_printf_float>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	ed2d 8b02 	vpush	{d8}
 800969c:	b08d      	sub	sp, #52	; 0x34
 800969e:	460c      	mov	r4, r1
 80096a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096a4:	4616      	mov	r6, r2
 80096a6:	461f      	mov	r7, r3
 80096a8:	4605      	mov	r5, r0
 80096aa:	f003 f86f 	bl	800c78c <_localeconv_r>
 80096ae:	f8d0 a000 	ldr.w	sl, [r0]
 80096b2:	4650      	mov	r0, sl
 80096b4:	f7f6 fd94 	bl	80001e0 <strlen>
 80096b8:	2300      	movs	r3, #0
 80096ba:	930a      	str	r3, [sp, #40]	; 0x28
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	9305      	str	r3, [sp, #20]
 80096c0:	f8d8 3000 	ldr.w	r3, [r8]
 80096c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096c8:	3307      	adds	r3, #7
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	f103 0208 	add.w	r2, r3, #8
 80096d2:	f8c8 2000 	str.w	r2, [r8]
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80096e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096e6:	9307      	str	r3, [sp, #28]
 80096e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80096ec:	ee08 0a10 	vmov	s16, r0
 80096f0:	4b9f      	ldr	r3, [pc, #636]	; (8009970 <_printf_float+0x2dc>)
 80096f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096fa:	f7f7 fa1f 	bl	8000b3c <__aeabi_dcmpun>
 80096fe:	bb88      	cbnz	r0, 8009764 <_printf_float+0xd0>
 8009700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009704:	4b9a      	ldr	r3, [pc, #616]	; (8009970 <_printf_float+0x2dc>)
 8009706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800970a:	f7f7 f9f9 	bl	8000b00 <__aeabi_dcmple>
 800970e:	bb48      	cbnz	r0, 8009764 <_printf_float+0xd0>
 8009710:	2200      	movs	r2, #0
 8009712:	2300      	movs	r3, #0
 8009714:	4640      	mov	r0, r8
 8009716:	4649      	mov	r1, r9
 8009718:	f7f7 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800971c:	b110      	cbz	r0, 8009724 <_printf_float+0x90>
 800971e:	232d      	movs	r3, #45	; 0x2d
 8009720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009724:	4b93      	ldr	r3, [pc, #588]	; (8009974 <_printf_float+0x2e0>)
 8009726:	4894      	ldr	r0, [pc, #592]	; (8009978 <_printf_float+0x2e4>)
 8009728:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800972c:	bf94      	ite	ls
 800972e:	4698      	movls	r8, r3
 8009730:	4680      	movhi	r8, r0
 8009732:	2303      	movs	r3, #3
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	9b05      	ldr	r3, [sp, #20]
 8009738:	f023 0204 	bic.w	r2, r3, #4
 800973c:	6022      	str	r2, [r4, #0]
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	9700      	str	r7, [sp, #0]
 8009744:	4633      	mov	r3, r6
 8009746:	aa0b      	add	r2, sp, #44	; 0x2c
 8009748:	4621      	mov	r1, r4
 800974a:	4628      	mov	r0, r5
 800974c:	f000 f9d8 	bl	8009b00 <_printf_common>
 8009750:	3001      	adds	r0, #1
 8009752:	f040 8090 	bne.w	8009876 <_printf_float+0x1e2>
 8009756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800975a:	b00d      	add	sp, #52	; 0x34
 800975c:	ecbd 8b02 	vpop	{d8}
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	4642      	mov	r2, r8
 8009766:	464b      	mov	r3, r9
 8009768:	4640      	mov	r0, r8
 800976a:	4649      	mov	r1, r9
 800976c:	f7f7 f9e6 	bl	8000b3c <__aeabi_dcmpun>
 8009770:	b140      	cbz	r0, 8009784 <_printf_float+0xf0>
 8009772:	464b      	mov	r3, r9
 8009774:	2b00      	cmp	r3, #0
 8009776:	bfbc      	itt	lt
 8009778:	232d      	movlt	r3, #45	; 0x2d
 800977a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800977e:	487f      	ldr	r0, [pc, #508]	; (800997c <_printf_float+0x2e8>)
 8009780:	4b7f      	ldr	r3, [pc, #508]	; (8009980 <_printf_float+0x2ec>)
 8009782:	e7d1      	b.n	8009728 <_printf_float+0x94>
 8009784:	6863      	ldr	r3, [r4, #4]
 8009786:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800978a:	9206      	str	r2, [sp, #24]
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	d13f      	bne.n	8009810 <_printf_float+0x17c>
 8009790:	2306      	movs	r3, #6
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	9b05      	ldr	r3, [sp, #20]
 8009796:	6861      	ldr	r1, [r4, #4]
 8009798:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800979c:	2300      	movs	r3, #0
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	ab0a      	add	r3, sp, #40	; 0x28
 80097a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097a6:	ab09      	add	r3, sp, #36	; 0x24
 80097a8:	ec49 8b10 	vmov	d0, r8, r9
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	6022      	str	r2, [r4, #0]
 80097b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097b4:	4628      	mov	r0, r5
 80097b6:	f7ff fecd 	bl	8009554 <__cvt>
 80097ba:	9b06      	ldr	r3, [sp, #24]
 80097bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097be:	2b47      	cmp	r3, #71	; 0x47
 80097c0:	4680      	mov	r8, r0
 80097c2:	d108      	bne.n	80097d6 <_printf_float+0x142>
 80097c4:	1cc8      	adds	r0, r1, #3
 80097c6:	db02      	blt.n	80097ce <_printf_float+0x13a>
 80097c8:	6863      	ldr	r3, [r4, #4]
 80097ca:	4299      	cmp	r1, r3
 80097cc:	dd41      	ble.n	8009852 <_printf_float+0x1be>
 80097ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80097d2:	fa5f fb8b 	uxtb.w	fp, fp
 80097d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097da:	d820      	bhi.n	800981e <_printf_float+0x18a>
 80097dc:	3901      	subs	r1, #1
 80097de:	465a      	mov	r2, fp
 80097e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097e4:	9109      	str	r1, [sp, #36]	; 0x24
 80097e6:	f7ff ff17 	bl	8009618 <__exponent>
 80097ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ec:	1813      	adds	r3, r2, r0
 80097ee:	2a01      	cmp	r2, #1
 80097f0:	4681      	mov	r9, r0
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	dc02      	bgt.n	80097fc <_printf_float+0x168>
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	07d2      	lsls	r2, r2, #31
 80097fa:	d501      	bpl.n	8009800 <_printf_float+0x16c>
 80097fc:	3301      	adds	r3, #1
 80097fe:	6123      	str	r3, [r4, #16]
 8009800:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009804:	2b00      	cmp	r3, #0
 8009806:	d09c      	beq.n	8009742 <_printf_float+0xae>
 8009808:	232d      	movs	r3, #45	; 0x2d
 800980a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800980e:	e798      	b.n	8009742 <_printf_float+0xae>
 8009810:	9a06      	ldr	r2, [sp, #24]
 8009812:	2a47      	cmp	r2, #71	; 0x47
 8009814:	d1be      	bne.n	8009794 <_printf_float+0x100>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1bc      	bne.n	8009794 <_printf_float+0x100>
 800981a:	2301      	movs	r3, #1
 800981c:	e7b9      	b.n	8009792 <_printf_float+0xfe>
 800981e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009822:	d118      	bne.n	8009856 <_printf_float+0x1c2>
 8009824:	2900      	cmp	r1, #0
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	dd0b      	ble.n	8009842 <_printf_float+0x1ae>
 800982a:	6121      	str	r1, [r4, #16]
 800982c:	b913      	cbnz	r3, 8009834 <_printf_float+0x1a0>
 800982e:	6822      	ldr	r2, [r4, #0]
 8009830:	07d0      	lsls	r0, r2, #31
 8009832:	d502      	bpl.n	800983a <_printf_float+0x1a6>
 8009834:	3301      	adds	r3, #1
 8009836:	440b      	add	r3, r1
 8009838:	6123      	str	r3, [r4, #16]
 800983a:	65a1      	str	r1, [r4, #88]	; 0x58
 800983c:	f04f 0900 	mov.w	r9, #0
 8009840:	e7de      	b.n	8009800 <_printf_float+0x16c>
 8009842:	b913      	cbnz	r3, 800984a <_printf_float+0x1b6>
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	07d2      	lsls	r2, r2, #31
 8009848:	d501      	bpl.n	800984e <_printf_float+0x1ba>
 800984a:	3302      	adds	r3, #2
 800984c:	e7f4      	b.n	8009838 <_printf_float+0x1a4>
 800984e:	2301      	movs	r3, #1
 8009850:	e7f2      	b.n	8009838 <_printf_float+0x1a4>
 8009852:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009858:	4299      	cmp	r1, r3
 800985a:	db05      	blt.n	8009868 <_printf_float+0x1d4>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	6121      	str	r1, [r4, #16]
 8009860:	07d8      	lsls	r0, r3, #31
 8009862:	d5ea      	bpl.n	800983a <_printf_float+0x1a6>
 8009864:	1c4b      	adds	r3, r1, #1
 8009866:	e7e7      	b.n	8009838 <_printf_float+0x1a4>
 8009868:	2900      	cmp	r1, #0
 800986a:	bfd4      	ite	le
 800986c:	f1c1 0202 	rsble	r2, r1, #2
 8009870:	2201      	movgt	r2, #1
 8009872:	4413      	add	r3, r2
 8009874:	e7e0      	b.n	8009838 <_printf_float+0x1a4>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	055a      	lsls	r2, r3, #21
 800987a:	d407      	bmi.n	800988c <_printf_float+0x1f8>
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	4642      	mov	r2, r8
 8009880:	4631      	mov	r1, r6
 8009882:	4628      	mov	r0, r5
 8009884:	47b8      	blx	r7
 8009886:	3001      	adds	r0, #1
 8009888:	d12c      	bne.n	80098e4 <_printf_float+0x250>
 800988a:	e764      	b.n	8009756 <_printf_float+0xc2>
 800988c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009890:	f240 80e0 	bls.w	8009a54 <_printf_float+0x3c0>
 8009894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	f7f7 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d034      	beq.n	800990e <_printf_float+0x27a>
 80098a4:	4a37      	ldr	r2, [pc, #220]	; (8009984 <_printf_float+0x2f0>)
 80098a6:	2301      	movs	r3, #1
 80098a8:	4631      	mov	r1, r6
 80098aa:	4628      	mov	r0, r5
 80098ac:	47b8      	blx	r7
 80098ae:	3001      	adds	r0, #1
 80098b0:	f43f af51 	beq.w	8009756 <_printf_float+0xc2>
 80098b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098b8:	429a      	cmp	r2, r3
 80098ba:	db02      	blt.n	80098c2 <_printf_float+0x22e>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	07d8      	lsls	r0, r3, #31
 80098c0:	d510      	bpl.n	80098e4 <_printf_float+0x250>
 80098c2:	ee18 3a10 	vmov	r3, s16
 80098c6:	4652      	mov	r2, sl
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b8      	blx	r7
 80098ce:	3001      	adds	r0, #1
 80098d0:	f43f af41 	beq.w	8009756 <_printf_float+0xc2>
 80098d4:	f04f 0800 	mov.w	r8, #0
 80098d8:	f104 091a 	add.w	r9, r4, #26
 80098dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098de:	3b01      	subs	r3, #1
 80098e0:	4543      	cmp	r3, r8
 80098e2:	dc09      	bgt.n	80098f8 <_printf_float+0x264>
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	079b      	lsls	r3, r3, #30
 80098e8:	f100 8105 	bmi.w	8009af6 <_printf_float+0x462>
 80098ec:	68e0      	ldr	r0, [r4, #12]
 80098ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098f0:	4298      	cmp	r0, r3
 80098f2:	bfb8      	it	lt
 80098f4:	4618      	movlt	r0, r3
 80098f6:	e730      	b.n	800975a <_printf_float+0xc6>
 80098f8:	2301      	movs	r3, #1
 80098fa:	464a      	mov	r2, r9
 80098fc:	4631      	mov	r1, r6
 80098fe:	4628      	mov	r0, r5
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	f43f af27 	beq.w	8009756 <_printf_float+0xc2>
 8009908:	f108 0801 	add.w	r8, r8, #1
 800990c:	e7e6      	b.n	80098dc <_printf_float+0x248>
 800990e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009910:	2b00      	cmp	r3, #0
 8009912:	dc39      	bgt.n	8009988 <_printf_float+0x2f4>
 8009914:	4a1b      	ldr	r2, [pc, #108]	; (8009984 <_printf_float+0x2f0>)
 8009916:	2301      	movs	r3, #1
 8009918:	4631      	mov	r1, r6
 800991a:	4628      	mov	r0, r5
 800991c:	47b8      	blx	r7
 800991e:	3001      	adds	r0, #1
 8009920:	f43f af19 	beq.w	8009756 <_printf_float+0xc2>
 8009924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009928:	4313      	orrs	r3, r2
 800992a:	d102      	bne.n	8009932 <_printf_float+0x29e>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	07d9      	lsls	r1, r3, #31
 8009930:	d5d8      	bpl.n	80098e4 <_printf_float+0x250>
 8009932:	ee18 3a10 	vmov	r3, s16
 8009936:	4652      	mov	r2, sl
 8009938:	4631      	mov	r1, r6
 800993a:	4628      	mov	r0, r5
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	f43f af09 	beq.w	8009756 <_printf_float+0xc2>
 8009944:	f04f 0900 	mov.w	r9, #0
 8009948:	f104 0a1a 	add.w	sl, r4, #26
 800994c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994e:	425b      	negs	r3, r3
 8009950:	454b      	cmp	r3, r9
 8009952:	dc01      	bgt.n	8009958 <_printf_float+0x2c4>
 8009954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009956:	e792      	b.n	800987e <_printf_float+0x1ea>
 8009958:	2301      	movs	r3, #1
 800995a:	4652      	mov	r2, sl
 800995c:	4631      	mov	r1, r6
 800995e:	4628      	mov	r0, r5
 8009960:	47b8      	blx	r7
 8009962:	3001      	adds	r0, #1
 8009964:	f43f aef7 	beq.w	8009756 <_printf_float+0xc2>
 8009968:	f109 0901 	add.w	r9, r9, #1
 800996c:	e7ee      	b.n	800994c <_printf_float+0x2b8>
 800996e:	bf00      	nop
 8009970:	7fefffff 	.word	0x7fefffff
 8009974:	0800e6d0 	.word	0x0800e6d0
 8009978:	0800e6d4 	.word	0x0800e6d4
 800997c:	0800e6dc 	.word	0x0800e6dc
 8009980:	0800e6d8 	.word	0x0800e6d8
 8009984:	0800eae1 	.word	0x0800eae1
 8009988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800998a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800998c:	429a      	cmp	r2, r3
 800998e:	bfa8      	it	ge
 8009990:	461a      	movge	r2, r3
 8009992:	2a00      	cmp	r2, #0
 8009994:	4691      	mov	r9, r2
 8009996:	dc37      	bgt.n	8009a08 <_printf_float+0x374>
 8009998:	f04f 0b00 	mov.w	fp, #0
 800999c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099a0:	f104 021a 	add.w	r2, r4, #26
 80099a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099a6:	9305      	str	r3, [sp, #20]
 80099a8:	eba3 0309 	sub.w	r3, r3, r9
 80099ac:	455b      	cmp	r3, fp
 80099ae:	dc33      	bgt.n	8009a18 <_printf_float+0x384>
 80099b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099b4:	429a      	cmp	r2, r3
 80099b6:	db3b      	blt.n	8009a30 <_printf_float+0x39c>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	07da      	lsls	r2, r3, #31
 80099bc:	d438      	bmi.n	8009a30 <_printf_float+0x39c>
 80099be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099c0:	9b05      	ldr	r3, [sp, #20]
 80099c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	eba2 0901 	sub.w	r9, r2, r1
 80099ca:	4599      	cmp	r9, r3
 80099cc:	bfa8      	it	ge
 80099ce:	4699      	movge	r9, r3
 80099d0:	f1b9 0f00 	cmp.w	r9, #0
 80099d4:	dc35      	bgt.n	8009a42 <_printf_float+0x3ae>
 80099d6:	f04f 0800 	mov.w	r8, #0
 80099da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099de:	f104 0a1a 	add.w	sl, r4, #26
 80099e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099e6:	1a9b      	subs	r3, r3, r2
 80099e8:	eba3 0309 	sub.w	r3, r3, r9
 80099ec:	4543      	cmp	r3, r8
 80099ee:	f77f af79 	ble.w	80098e4 <_printf_float+0x250>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4652      	mov	r2, sl
 80099f6:	4631      	mov	r1, r6
 80099f8:	4628      	mov	r0, r5
 80099fa:	47b8      	blx	r7
 80099fc:	3001      	adds	r0, #1
 80099fe:	f43f aeaa 	beq.w	8009756 <_printf_float+0xc2>
 8009a02:	f108 0801 	add.w	r8, r8, #1
 8009a06:	e7ec      	b.n	80099e2 <_printf_float+0x34e>
 8009a08:	4613      	mov	r3, r2
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4642      	mov	r2, r8
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	d1c0      	bne.n	8009998 <_printf_float+0x304>
 8009a16:	e69e      	b.n	8009756 <_printf_float+0xc2>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	9205      	str	r2, [sp, #20]
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f ae97 	beq.w	8009756 <_printf_float+0xc2>
 8009a28:	9a05      	ldr	r2, [sp, #20]
 8009a2a:	f10b 0b01 	add.w	fp, fp, #1
 8009a2e:	e7b9      	b.n	80099a4 <_printf_float+0x310>
 8009a30:	ee18 3a10 	vmov	r3, s16
 8009a34:	4652      	mov	r2, sl
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d1be      	bne.n	80099be <_printf_float+0x32a>
 8009a40:	e689      	b.n	8009756 <_printf_float+0xc2>
 8009a42:	9a05      	ldr	r2, [sp, #20]
 8009a44:	464b      	mov	r3, r9
 8009a46:	4442      	add	r2, r8
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d1c1      	bne.n	80099d6 <_printf_float+0x342>
 8009a52:	e680      	b.n	8009756 <_printf_float+0xc2>
 8009a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a56:	2a01      	cmp	r2, #1
 8009a58:	dc01      	bgt.n	8009a5e <_printf_float+0x3ca>
 8009a5a:	07db      	lsls	r3, r3, #31
 8009a5c:	d538      	bpl.n	8009ad0 <_printf_float+0x43c>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4642      	mov	r2, r8
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f ae74 	beq.w	8009756 <_printf_float+0xc2>
 8009a6e:	ee18 3a10 	vmov	r3, s16
 8009a72:	4652      	mov	r2, sl
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f ae6b 	beq.w	8009756 <_printf_float+0xc2>
 8009a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a84:	2200      	movs	r2, #0
 8009a86:	2300      	movs	r3, #0
 8009a88:	f7f7 f826 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a8c:	b9d8      	cbnz	r0, 8009ac6 <_printf_float+0x432>
 8009a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a90:	f108 0201 	add.w	r2, r8, #1
 8009a94:	3b01      	subs	r3, #1
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b8      	blx	r7
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d10e      	bne.n	8009abe <_printf_float+0x42a>
 8009aa0:	e659      	b.n	8009756 <_printf_float+0xc2>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	f43f ae52 	beq.w	8009756 <_printf_float+0xc2>
 8009ab2:	f108 0801 	add.w	r8, r8, #1
 8009ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	4543      	cmp	r3, r8
 8009abc:	dcf1      	bgt.n	8009aa2 <_printf_float+0x40e>
 8009abe:	464b      	mov	r3, r9
 8009ac0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ac4:	e6dc      	b.n	8009880 <_printf_float+0x1ec>
 8009ac6:	f04f 0800 	mov.w	r8, #0
 8009aca:	f104 0a1a 	add.w	sl, r4, #26
 8009ace:	e7f2      	b.n	8009ab6 <_printf_float+0x422>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	e7df      	b.n	8009a96 <_printf_float+0x402>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	464a      	mov	r2, r9
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b8      	blx	r7
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	f43f ae38 	beq.w	8009756 <_printf_float+0xc2>
 8009ae6:	f108 0801 	add.w	r8, r8, #1
 8009aea:	68e3      	ldr	r3, [r4, #12]
 8009aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aee:	1a5b      	subs	r3, r3, r1
 8009af0:	4543      	cmp	r3, r8
 8009af2:	dcf0      	bgt.n	8009ad6 <_printf_float+0x442>
 8009af4:	e6fa      	b.n	80098ec <_printf_float+0x258>
 8009af6:	f04f 0800 	mov.w	r8, #0
 8009afa:	f104 0919 	add.w	r9, r4, #25
 8009afe:	e7f4      	b.n	8009aea <_printf_float+0x456>

08009b00 <_printf_common>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	4616      	mov	r6, r2
 8009b06:	4699      	mov	r9, r3
 8009b08:	688a      	ldr	r2, [r1, #8]
 8009b0a:	690b      	ldr	r3, [r1, #16]
 8009b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b10:	4293      	cmp	r3, r2
 8009b12:	bfb8      	it	lt
 8009b14:	4613      	movlt	r3, r2
 8009b16:	6033      	str	r3, [r6, #0]
 8009b18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	b10a      	cbz	r2, 8009b26 <_printf_common+0x26>
 8009b22:	3301      	adds	r3, #1
 8009b24:	6033      	str	r3, [r6, #0]
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	0699      	lsls	r1, r3, #26
 8009b2a:	bf42      	ittt	mi
 8009b2c:	6833      	ldrmi	r3, [r6, #0]
 8009b2e:	3302      	addmi	r3, #2
 8009b30:	6033      	strmi	r3, [r6, #0]
 8009b32:	6825      	ldr	r5, [r4, #0]
 8009b34:	f015 0506 	ands.w	r5, r5, #6
 8009b38:	d106      	bne.n	8009b48 <_printf_common+0x48>
 8009b3a:	f104 0a19 	add.w	sl, r4, #25
 8009b3e:	68e3      	ldr	r3, [r4, #12]
 8009b40:	6832      	ldr	r2, [r6, #0]
 8009b42:	1a9b      	subs	r3, r3, r2
 8009b44:	42ab      	cmp	r3, r5
 8009b46:	dc26      	bgt.n	8009b96 <_printf_common+0x96>
 8009b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b4c:	1e13      	subs	r3, r2, #0
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	bf18      	it	ne
 8009b52:	2301      	movne	r3, #1
 8009b54:	0692      	lsls	r2, r2, #26
 8009b56:	d42b      	bmi.n	8009bb0 <_printf_common+0xb0>
 8009b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	4638      	mov	r0, r7
 8009b60:	47c0      	blx	r8
 8009b62:	3001      	adds	r0, #1
 8009b64:	d01e      	beq.n	8009ba4 <_printf_common+0xa4>
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	68e5      	ldr	r5, [r4, #12]
 8009b6a:	6832      	ldr	r2, [r6, #0]
 8009b6c:	f003 0306 	and.w	r3, r3, #6
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	bf08      	it	eq
 8009b74:	1aad      	subeq	r5, r5, r2
 8009b76:	68a3      	ldr	r3, [r4, #8]
 8009b78:	6922      	ldr	r2, [r4, #16]
 8009b7a:	bf0c      	ite	eq
 8009b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b80:	2500      	movne	r5, #0
 8009b82:	4293      	cmp	r3, r2
 8009b84:	bfc4      	itt	gt
 8009b86:	1a9b      	subgt	r3, r3, r2
 8009b88:	18ed      	addgt	r5, r5, r3
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	341a      	adds	r4, #26
 8009b8e:	42b5      	cmp	r5, r6
 8009b90:	d11a      	bne.n	8009bc8 <_printf_common+0xc8>
 8009b92:	2000      	movs	r0, #0
 8009b94:	e008      	b.n	8009ba8 <_printf_common+0xa8>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4652      	mov	r2, sl
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	47c0      	blx	r8
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d103      	bne.n	8009bac <_printf_common+0xac>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bac:	3501      	adds	r5, #1
 8009bae:	e7c6      	b.n	8009b3e <_printf_common+0x3e>
 8009bb0:	18e1      	adds	r1, r4, r3
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	2030      	movs	r0, #48	; 0x30
 8009bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bba:	4422      	add	r2, r4
 8009bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bc4:	3302      	adds	r3, #2
 8009bc6:	e7c7      	b.n	8009b58 <_printf_common+0x58>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4649      	mov	r1, r9
 8009bce:	4638      	mov	r0, r7
 8009bd0:	47c0      	blx	r8
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	d0e6      	beq.n	8009ba4 <_printf_common+0xa4>
 8009bd6:	3601      	adds	r6, #1
 8009bd8:	e7d9      	b.n	8009b8e <_printf_common+0x8e>
	...

08009bdc <_printf_i>:
 8009bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	4691      	mov	r9, r2
 8009be4:	7e27      	ldrb	r7, [r4, #24]
 8009be6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009be8:	2f78      	cmp	r7, #120	; 0x78
 8009bea:	4680      	mov	r8, r0
 8009bec:	469a      	mov	sl, r3
 8009bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bf2:	d807      	bhi.n	8009c04 <_printf_i+0x28>
 8009bf4:	2f62      	cmp	r7, #98	; 0x62
 8009bf6:	d80a      	bhi.n	8009c0e <_printf_i+0x32>
 8009bf8:	2f00      	cmp	r7, #0
 8009bfa:	f000 80d8 	beq.w	8009dae <_printf_i+0x1d2>
 8009bfe:	2f58      	cmp	r7, #88	; 0x58
 8009c00:	f000 80a3 	beq.w	8009d4a <_printf_i+0x16e>
 8009c04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c0c:	e03a      	b.n	8009c84 <_printf_i+0xa8>
 8009c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c12:	2b15      	cmp	r3, #21
 8009c14:	d8f6      	bhi.n	8009c04 <_printf_i+0x28>
 8009c16:	a001      	add	r0, pc, #4	; (adr r0, 8009c1c <_printf_i+0x40>)
 8009c18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c1c:	08009c75 	.word	0x08009c75
 8009c20:	08009c89 	.word	0x08009c89
 8009c24:	08009c05 	.word	0x08009c05
 8009c28:	08009c05 	.word	0x08009c05
 8009c2c:	08009c05 	.word	0x08009c05
 8009c30:	08009c05 	.word	0x08009c05
 8009c34:	08009c89 	.word	0x08009c89
 8009c38:	08009c05 	.word	0x08009c05
 8009c3c:	08009c05 	.word	0x08009c05
 8009c40:	08009c05 	.word	0x08009c05
 8009c44:	08009c05 	.word	0x08009c05
 8009c48:	08009d95 	.word	0x08009d95
 8009c4c:	08009cb9 	.word	0x08009cb9
 8009c50:	08009d77 	.word	0x08009d77
 8009c54:	08009c05 	.word	0x08009c05
 8009c58:	08009c05 	.word	0x08009c05
 8009c5c:	08009db7 	.word	0x08009db7
 8009c60:	08009c05 	.word	0x08009c05
 8009c64:	08009cb9 	.word	0x08009cb9
 8009c68:	08009c05 	.word	0x08009c05
 8009c6c:	08009c05 	.word	0x08009c05
 8009c70:	08009d7f 	.word	0x08009d7f
 8009c74:	680b      	ldr	r3, [r1, #0]
 8009c76:	1d1a      	adds	r2, r3, #4
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	600a      	str	r2, [r1, #0]
 8009c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c84:	2301      	movs	r3, #1
 8009c86:	e0a3      	b.n	8009dd0 <_printf_i+0x1f4>
 8009c88:	6825      	ldr	r5, [r4, #0]
 8009c8a:	6808      	ldr	r0, [r1, #0]
 8009c8c:	062e      	lsls	r6, r5, #24
 8009c8e:	f100 0304 	add.w	r3, r0, #4
 8009c92:	d50a      	bpl.n	8009caa <_printf_i+0xce>
 8009c94:	6805      	ldr	r5, [r0, #0]
 8009c96:	600b      	str	r3, [r1, #0]
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	da03      	bge.n	8009ca4 <_printf_i+0xc8>
 8009c9c:	232d      	movs	r3, #45	; 0x2d
 8009c9e:	426d      	negs	r5, r5
 8009ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca4:	485e      	ldr	r0, [pc, #376]	; (8009e20 <_printf_i+0x244>)
 8009ca6:	230a      	movs	r3, #10
 8009ca8:	e019      	b.n	8009cde <_printf_i+0x102>
 8009caa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009cae:	6805      	ldr	r5, [r0, #0]
 8009cb0:	600b      	str	r3, [r1, #0]
 8009cb2:	bf18      	it	ne
 8009cb4:	b22d      	sxthne	r5, r5
 8009cb6:	e7ef      	b.n	8009c98 <_printf_i+0xbc>
 8009cb8:	680b      	ldr	r3, [r1, #0]
 8009cba:	6825      	ldr	r5, [r4, #0]
 8009cbc:	1d18      	adds	r0, r3, #4
 8009cbe:	6008      	str	r0, [r1, #0]
 8009cc0:	0628      	lsls	r0, r5, #24
 8009cc2:	d501      	bpl.n	8009cc8 <_printf_i+0xec>
 8009cc4:	681d      	ldr	r5, [r3, #0]
 8009cc6:	e002      	b.n	8009cce <_printf_i+0xf2>
 8009cc8:	0669      	lsls	r1, r5, #25
 8009cca:	d5fb      	bpl.n	8009cc4 <_printf_i+0xe8>
 8009ccc:	881d      	ldrh	r5, [r3, #0]
 8009cce:	4854      	ldr	r0, [pc, #336]	; (8009e20 <_printf_i+0x244>)
 8009cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2308      	moveq	r3, #8
 8009cd6:	230a      	movne	r3, #10
 8009cd8:	2100      	movs	r1, #0
 8009cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cde:	6866      	ldr	r6, [r4, #4]
 8009ce0:	60a6      	str	r6, [r4, #8]
 8009ce2:	2e00      	cmp	r6, #0
 8009ce4:	bfa2      	ittt	ge
 8009ce6:	6821      	ldrge	r1, [r4, #0]
 8009ce8:	f021 0104 	bicge.w	r1, r1, #4
 8009cec:	6021      	strge	r1, [r4, #0]
 8009cee:	b90d      	cbnz	r5, 8009cf4 <_printf_i+0x118>
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	d04d      	beq.n	8009d90 <_printf_i+0x1b4>
 8009cf4:	4616      	mov	r6, r2
 8009cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8009cfe:	5dc7      	ldrb	r7, [r0, r7]
 8009d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d04:	462f      	mov	r7, r5
 8009d06:	42bb      	cmp	r3, r7
 8009d08:	460d      	mov	r5, r1
 8009d0a:	d9f4      	bls.n	8009cf6 <_printf_i+0x11a>
 8009d0c:	2b08      	cmp	r3, #8
 8009d0e:	d10b      	bne.n	8009d28 <_printf_i+0x14c>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	07df      	lsls	r7, r3, #31
 8009d14:	d508      	bpl.n	8009d28 <_printf_i+0x14c>
 8009d16:	6923      	ldr	r3, [r4, #16]
 8009d18:	6861      	ldr	r1, [r4, #4]
 8009d1a:	4299      	cmp	r1, r3
 8009d1c:	bfde      	ittt	le
 8009d1e:	2330      	movle	r3, #48	; 0x30
 8009d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d24:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009d28:	1b92      	subs	r2, r2, r6
 8009d2a:	6122      	str	r2, [r4, #16]
 8009d2c:	f8cd a000 	str.w	sl, [sp]
 8009d30:	464b      	mov	r3, r9
 8009d32:	aa03      	add	r2, sp, #12
 8009d34:	4621      	mov	r1, r4
 8009d36:	4640      	mov	r0, r8
 8009d38:	f7ff fee2 	bl	8009b00 <_printf_common>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d14c      	bne.n	8009dda <_printf_i+0x1fe>
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d44:	b004      	add	sp, #16
 8009d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4a:	4835      	ldr	r0, [pc, #212]	; (8009e20 <_printf_i+0x244>)
 8009d4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	680e      	ldr	r6, [r1, #0]
 8009d54:	061f      	lsls	r7, r3, #24
 8009d56:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d5a:	600e      	str	r6, [r1, #0]
 8009d5c:	d514      	bpl.n	8009d88 <_printf_i+0x1ac>
 8009d5e:	07d9      	lsls	r1, r3, #31
 8009d60:	bf44      	itt	mi
 8009d62:	f043 0320 	orrmi.w	r3, r3, #32
 8009d66:	6023      	strmi	r3, [r4, #0]
 8009d68:	b91d      	cbnz	r5, 8009d72 <_printf_i+0x196>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	f023 0320 	bic.w	r3, r3, #32
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	2310      	movs	r3, #16
 8009d74:	e7b0      	b.n	8009cd8 <_printf_i+0xfc>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	f043 0320 	orr.w	r3, r3, #32
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	2378      	movs	r3, #120	; 0x78
 8009d80:	4828      	ldr	r0, [pc, #160]	; (8009e24 <_printf_i+0x248>)
 8009d82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d86:	e7e3      	b.n	8009d50 <_printf_i+0x174>
 8009d88:	065e      	lsls	r6, r3, #25
 8009d8a:	bf48      	it	mi
 8009d8c:	b2ad      	uxthmi	r5, r5
 8009d8e:	e7e6      	b.n	8009d5e <_printf_i+0x182>
 8009d90:	4616      	mov	r6, r2
 8009d92:	e7bb      	b.n	8009d0c <_printf_i+0x130>
 8009d94:	680b      	ldr	r3, [r1, #0]
 8009d96:	6826      	ldr	r6, [r4, #0]
 8009d98:	6960      	ldr	r0, [r4, #20]
 8009d9a:	1d1d      	adds	r5, r3, #4
 8009d9c:	600d      	str	r5, [r1, #0]
 8009d9e:	0635      	lsls	r5, r6, #24
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	d501      	bpl.n	8009da8 <_printf_i+0x1cc>
 8009da4:	6018      	str	r0, [r3, #0]
 8009da6:	e002      	b.n	8009dae <_printf_i+0x1d2>
 8009da8:	0671      	lsls	r1, r6, #25
 8009daa:	d5fb      	bpl.n	8009da4 <_printf_i+0x1c8>
 8009dac:	8018      	strh	r0, [r3, #0]
 8009dae:	2300      	movs	r3, #0
 8009db0:	6123      	str	r3, [r4, #16]
 8009db2:	4616      	mov	r6, r2
 8009db4:	e7ba      	b.n	8009d2c <_printf_i+0x150>
 8009db6:	680b      	ldr	r3, [r1, #0]
 8009db8:	1d1a      	adds	r2, r3, #4
 8009dba:	600a      	str	r2, [r1, #0]
 8009dbc:	681e      	ldr	r6, [r3, #0]
 8009dbe:	6862      	ldr	r2, [r4, #4]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7f6 fa14 	bl	80001f0 <memchr>
 8009dc8:	b108      	cbz	r0, 8009dce <_printf_i+0x1f2>
 8009dca:	1b80      	subs	r0, r0, r6
 8009dcc:	6060      	str	r0, [r4, #4]
 8009dce:	6863      	ldr	r3, [r4, #4]
 8009dd0:	6123      	str	r3, [r4, #16]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dd8:	e7a8      	b.n	8009d2c <_printf_i+0x150>
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	4632      	mov	r2, r6
 8009dde:	4649      	mov	r1, r9
 8009de0:	4640      	mov	r0, r8
 8009de2:	47d0      	blx	sl
 8009de4:	3001      	adds	r0, #1
 8009de6:	d0ab      	beq.n	8009d40 <_printf_i+0x164>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	079b      	lsls	r3, r3, #30
 8009dec:	d413      	bmi.n	8009e16 <_printf_i+0x23a>
 8009dee:	68e0      	ldr	r0, [r4, #12]
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	4298      	cmp	r0, r3
 8009df4:	bfb8      	it	lt
 8009df6:	4618      	movlt	r0, r3
 8009df8:	e7a4      	b.n	8009d44 <_printf_i+0x168>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4649      	mov	r1, r9
 8009e00:	4640      	mov	r0, r8
 8009e02:	47d0      	blx	sl
 8009e04:	3001      	adds	r0, #1
 8009e06:	d09b      	beq.n	8009d40 <_printf_i+0x164>
 8009e08:	3501      	adds	r5, #1
 8009e0a:	68e3      	ldr	r3, [r4, #12]
 8009e0c:	9903      	ldr	r1, [sp, #12]
 8009e0e:	1a5b      	subs	r3, r3, r1
 8009e10:	42ab      	cmp	r3, r5
 8009e12:	dcf2      	bgt.n	8009dfa <_printf_i+0x21e>
 8009e14:	e7eb      	b.n	8009dee <_printf_i+0x212>
 8009e16:	2500      	movs	r5, #0
 8009e18:	f104 0619 	add.w	r6, r4, #25
 8009e1c:	e7f5      	b.n	8009e0a <_printf_i+0x22e>
 8009e1e:	bf00      	nop
 8009e20:	0800e6e0 	.word	0x0800e6e0
 8009e24:	0800e6f1 	.word	0x0800e6f1

08009e28 <_scanf_float>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	b087      	sub	sp, #28
 8009e2e:	4617      	mov	r7, r2
 8009e30:	9303      	str	r3, [sp, #12]
 8009e32:	688b      	ldr	r3, [r1, #8]
 8009e34:	1e5a      	subs	r2, r3, #1
 8009e36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009e3a:	bf83      	ittte	hi
 8009e3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009e40:	195b      	addhi	r3, r3, r5
 8009e42:	9302      	strhi	r3, [sp, #8]
 8009e44:	2300      	movls	r3, #0
 8009e46:	bf86      	itte	hi
 8009e48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009e4c:	608b      	strhi	r3, [r1, #8]
 8009e4e:	9302      	strls	r3, [sp, #8]
 8009e50:	680b      	ldr	r3, [r1, #0]
 8009e52:	468b      	mov	fp, r1
 8009e54:	2500      	movs	r5, #0
 8009e56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009e5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8009e5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e62:	4680      	mov	r8, r0
 8009e64:	460c      	mov	r4, r1
 8009e66:	465e      	mov	r6, fp
 8009e68:	46aa      	mov	sl, r5
 8009e6a:	46a9      	mov	r9, r5
 8009e6c:	9501      	str	r5, [sp, #4]
 8009e6e:	68a2      	ldr	r2, [r4, #8]
 8009e70:	b152      	cbz	r2, 8009e88 <_scanf_float+0x60>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b4e      	cmp	r3, #78	; 0x4e
 8009e78:	d864      	bhi.n	8009f44 <_scanf_float+0x11c>
 8009e7a:	2b40      	cmp	r3, #64	; 0x40
 8009e7c:	d83c      	bhi.n	8009ef8 <_scanf_float+0xd0>
 8009e7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009e82:	b2c8      	uxtb	r0, r1
 8009e84:	280e      	cmp	r0, #14
 8009e86:	d93a      	bls.n	8009efe <_scanf_float+0xd6>
 8009e88:	f1b9 0f00 	cmp.w	r9, #0
 8009e8c:	d003      	beq.n	8009e96 <_scanf_float+0x6e>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009e9a:	f1ba 0f01 	cmp.w	sl, #1
 8009e9e:	f200 8113 	bhi.w	800a0c8 <_scanf_float+0x2a0>
 8009ea2:	455e      	cmp	r6, fp
 8009ea4:	f200 8105 	bhi.w	800a0b2 <_scanf_float+0x28a>
 8009ea8:	2501      	movs	r5, #1
 8009eaa:	4628      	mov	r0, r5
 8009eac:	b007      	add	sp, #28
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009eb6:	2a0d      	cmp	r2, #13
 8009eb8:	d8e6      	bhi.n	8009e88 <_scanf_float+0x60>
 8009eba:	a101      	add	r1, pc, #4	; (adr r1, 8009ec0 <_scanf_float+0x98>)
 8009ebc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ec0:	08009fff 	.word	0x08009fff
 8009ec4:	08009e89 	.word	0x08009e89
 8009ec8:	08009e89 	.word	0x08009e89
 8009ecc:	08009e89 	.word	0x08009e89
 8009ed0:	0800a05f 	.word	0x0800a05f
 8009ed4:	0800a037 	.word	0x0800a037
 8009ed8:	08009e89 	.word	0x08009e89
 8009edc:	08009e89 	.word	0x08009e89
 8009ee0:	0800a00d 	.word	0x0800a00d
 8009ee4:	08009e89 	.word	0x08009e89
 8009ee8:	08009e89 	.word	0x08009e89
 8009eec:	08009e89 	.word	0x08009e89
 8009ef0:	08009e89 	.word	0x08009e89
 8009ef4:	08009fc5 	.word	0x08009fc5
 8009ef8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009efc:	e7db      	b.n	8009eb6 <_scanf_float+0x8e>
 8009efe:	290e      	cmp	r1, #14
 8009f00:	d8c2      	bhi.n	8009e88 <_scanf_float+0x60>
 8009f02:	a001      	add	r0, pc, #4	; (adr r0, 8009f08 <_scanf_float+0xe0>)
 8009f04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f08:	08009fb7 	.word	0x08009fb7
 8009f0c:	08009e89 	.word	0x08009e89
 8009f10:	08009fb7 	.word	0x08009fb7
 8009f14:	0800a04b 	.word	0x0800a04b
 8009f18:	08009e89 	.word	0x08009e89
 8009f1c:	08009f65 	.word	0x08009f65
 8009f20:	08009fa1 	.word	0x08009fa1
 8009f24:	08009fa1 	.word	0x08009fa1
 8009f28:	08009fa1 	.word	0x08009fa1
 8009f2c:	08009fa1 	.word	0x08009fa1
 8009f30:	08009fa1 	.word	0x08009fa1
 8009f34:	08009fa1 	.word	0x08009fa1
 8009f38:	08009fa1 	.word	0x08009fa1
 8009f3c:	08009fa1 	.word	0x08009fa1
 8009f40:	08009fa1 	.word	0x08009fa1
 8009f44:	2b6e      	cmp	r3, #110	; 0x6e
 8009f46:	d809      	bhi.n	8009f5c <_scanf_float+0x134>
 8009f48:	2b60      	cmp	r3, #96	; 0x60
 8009f4a:	d8b2      	bhi.n	8009eb2 <_scanf_float+0x8a>
 8009f4c:	2b54      	cmp	r3, #84	; 0x54
 8009f4e:	d077      	beq.n	800a040 <_scanf_float+0x218>
 8009f50:	2b59      	cmp	r3, #89	; 0x59
 8009f52:	d199      	bne.n	8009e88 <_scanf_float+0x60>
 8009f54:	2d07      	cmp	r5, #7
 8009f56:	d197      	bne.n	8009e88 <_scanf_float+0x60>
 8009f58:	2508      	movs	r5, #8
 8009f5a:	e029      	b.n	8009fb0 <_scanf_float+0x188>
 8009f5c:	2b74      	cmp	r3, #116	; 0x74
 8009f5e:	d06f      	beq.n	800a040 <_scanf_float+0x218>
 8009f60:	2b79      	cmp	r3, #121	; 0x79
 8009f62:	e7f6      	b.n	8009f52 <_scanf_float+0x12a>
 8009f64:	6821      	ldr	r1, [r4, #0]
 8009f66:	05c8      	lsls	r0, r1, #23
 8009f68:	d51a      	bpl.n	8009fa0 <_scanf_float+0x178>
 8009f6a:	9b02      	ldr	r3, [sp, #8]
 8009f6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009f70:	6021      	str	r1, [r4, #0]
 8009f72:	f109 0901 	add.w	r9, r9, #1
 8009f76:	b11b      	cbz	r3, 8009f80 <_scanf_float+0x158>
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	3201      	adds	r2, #1
 8009f7c:	9302      	str	r3, [sp, #8]
 8009f7e:	60a2      	str	r2, [r4, #8]
 8009f80:	68a3      	ldr	r3, [r4, #8]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	f340 8084 	ble.w	800a0a0 <_scanf_float+0x278>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	603b      	str	r3, [r7, #0]
 8009f9e:	e766      	b.n	8009e6e <_scanf_float+0x46>
 8009fa0:	eb1a 0f05 	cmn.w	sl, r5
 8009fa4:	f47f af70 	bne.w	8009e88 <_scanf_float+0x60>
 8009fa8:	6822      	ldr	r2, [r4, #0]
 8009faa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	f806 3b01 	strb.w	r3, [r6], #1
 8009fb4:	e7e4      	b.n	8009f80 <_scanf_float+0x158>
 8009fb6:	6822      	ldr	r2, [r4, #0]
 8009fb8:	0610      	lsls	r0, r2, #24
 8009fba:	f57f af65 	bpl.w	8009e88 <_scanf_float+0x60>
 8009fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fc2:	e7f4      	b.n	8009fae <_scanf_float+0x186>
 8009fc4:	f1ba 0f00 	cmp.w	sl, #0
 8009fc8:	d10e      	bne.n	8009fe8 <_scanf_float+0x1c0>
 8009fca:	f1b9 0f00 	cmp.w	r9, #0
 8009fce:	d10e      	bne.n	8009fee <_scanf_float+0x1c6>
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009fd6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009fda:	d108      	bne.n	8009fee <_scanf_float+0x1c6>
 8009fdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009fe0:	6022      	str	r2, [r4, #0]
 8009fe2:	f04f 0a01 	mov.w	sl, #1
 8009fe6:	e7e3      	b.n	8009fb0 <_scanf_float+0x188>
 8009fe8:	f1ba 0f02 	cmp.w	sl, #2
 8009fec:	d055      	beq.n	800a09a <_scanf_float+0x272>
 8009fee:	2d01      	cmp	r5, #1
 8009ff0:	d002      	beq.n	8009ff8 <_scanf_float+0x1d0>
 8009ff2:	2d04      	cmp	r5, #4
 8009ff4:	f47f af48 	bne.w	8009e88 <_scanf_float+0x60>
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	b2ed      	uxtb	r5, r5
 8009ffc:	e7d8      	b.n	8009fb0 <_scanf_float+0x188>
 8009ffe:	f1ba 0f01 	cmp.w	sl, #1
 800a002:	f47f af41 	bne.w	8009e88 <_scanf_float+0x60>
 800a006:	f04f 0a02 	mov.w	sl, #2
 800a00a:	e7d1      	b.n	8009fb0 <_scanf_float+0x188>
 800a00c:	b97d      	cbnz	r5, 800a02e <_scanf_float+0x206>
 800a00e:	f1b9 0f00 	cmp.w	r9, #0
 800a012:	f47f af3c 	bne.w	8009e8e <_scanf_float+0x66>
 800a016:	6822      	ldr	r2, [r4, #0]
 800a018:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a01c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a020:	f47f af39 	bne.w	8009e96 <_scanf_float+0x6e>
 800a024:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a028:	6022      	str	r2, [r4, #0]
 800a02a:	2501      	movs	r5, #1
 800a02c:	e7c0      	b.n	8009fb0 <_scanf_float+0x188>
 800a02e:	2d03      	cmp	r5, #3
 800a030:	d0e2      	beq.n	8009ff8 <_scanf_float+0x1d0>
 800a032:	2d05      	cmp	r5, #5
 800a034:	e7de      	b.n	8009ff4 <_scanf_float+0x1cc>
 800a036:	2d02      	cmp	r5, #2
 800a038:	f47f af26 	bne.w	8009e88 <_scanf_float+0x60>
 800a03c:	2503      	movs	r5, #3
 800a03e:	e7b7      	b.n	8009fb0 <_scanf_float+0x188>
 800a040:	2d06      	cmp	r5, #6
 800a042:	f47f af21 	bne.w	8009e88 <_scanf_float+0x60>
 800a046:	2507      	movs	r5, #7
 800a048:	e7b2      	b.n	8009fb0 <_scanf_float+0x188>
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	0591      	lsls	r1, r2, #22
 800a04e:	f57f af1b 	bpl.w	8009e88 <_scanf_float+0x60>
 800a052:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	f8cd 9004 	str.w	r9, [sp, #4]
 800a05c:	e7a8      	b.n	8009fb0 <_scanf_float+0x188>
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a064:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a068:	d006      	beq.n	800a078 <_scanf_float+0x250>
 800a06a:	0550      	lsls	r0, r2, #21
 800a06c:	f57f af0c 	bpl.w	8009e88 <_scanf_float+0x60>
 800a070:	f1b9 0f00 	cmp.w	r9, #0
 800a074:	f43f af0f 	beq.w	8009e96 <_scanf_float+0x6e>
 800a078:	0591      	lsls	r1, r2, #22
 800a07a:	bf58      	it	pl
 800a07c:	9901      	ldrpl	r1, [sp, #4]
 800a07e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a082:	bf58      	it	pl
 800a084:	eba9 0101 	subpl.w	r1, r9, r1
 800a088:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a08c:	bf58      	it	pl
 800a08e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a092:	6022      	str	r2, [r4, #0]
 800a094:	f04f 0900 	mov.w	r9, #0
 800a098:	e78a      	b.n	8009fb0 <_scanf_float+0x188>
 800a09a:	f04f 0a03 	mov.w	sl, #3
 800a09e:	e787      	b.n	8009fb0 <_scanf_float+0x188>
 800a0a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	4798      	blx	r3
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	f43f aedf 	beq.w	8009e6e <_scanf_float+0x46>
 800a0b0:	e6ea      	b.n	8009e88 <_scanf_float+0x60>
 800a0b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0ba:	463a      	mov	r2, r7
 800a0bc:	4640      	mov	r0, r8
 800a0be:	4798      	blx	r3
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	e6ec      	b.n	8009ea2 <_scanf_float+0x7a>
 800a0c8:	1e6b      	subs	r3, r5, #1
 800a0ca:	2b06      	cmp	r3, #6
 800a0cc:	d825      	bhi.n	800a11a <_scanf_float+0x2f2>
 800a0ce:	2d02      	cmp	r5, #2
 800a0d0:	d836      	bhi.n	800a140 <_scanf_float+0x318>
 800a0d2:	455e      	cmp	r6, fp
 800a0d4:	f67f aee8 	bls.w	8009ea8 <_scanf_float+0x80>
 800a0d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0e0:	463a      	mov	r2, r7
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4798      	blx	r3
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	6123      	str	r3, [r4, #16]
 800a0ec:	e7f1      	b.n	800a0d2 <_scanf_float+0x2aa>
 800a0ee:	9802      	ldr	r0, [sp, #8]
 800a0f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a0f8:	9002      	str	r0, [sp, #8]
 800a0fa:	463a      	mov	r2, r7
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4798      	blx	r3
 800a100:	6923      	ldr	r3, [r4, #16]
 800a102:	3b01      	subs	r3, #1
 800a104:	6123      	str	r3, [r4, #16]
 800a106:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a10a:	fa5f fa8a 	uxtb.w	sl, sl
 800a10e:	f1ba 0f02 	cmp.w	sl, #2
 800a112:	d1ec      	bne.n	800a0ee <_scanf_float+0x2c6>
 800a114:	3d03      	subs	r5, #3
 800a116:	b2ed      	uxtb	r5, r5
 800a118:	1b76      	subs	r6, r6, r5
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	05da      	lsls	r2, r3, #23
 800a11e:	d52f      	bpl.n	800a180 <_scanf_float+0x358>
 800a120:	055b      	lsls	r3, r3, #21
 800a122:	d510      	bpl.n	800a146 <_scanf_float+0x31e>
 800a124:	455e      	cmp	r6, fp
 800a126:	f67f aebf 	bls.w	8009ea8 <_scanf_float+0x80>
 800a12a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a12e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a132:	463a      	mov	r2, r7
 800a134:	4640      	mov	r0, r8
 800a136:	4798      	blx	r3
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	e7f1      	b.n	800a124 <_scanf_float+0x2fc>
 800a140:	46aa      	mov	sl, r5
 800a142:	9602      	str	r6, [sp, #8]
 800a144:	e7df      	b.n	800a106 <_scanf_float+0x2de>
 800a146:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	2965      	cmp	r1, #101	; 0x65
 800a14e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a152:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	d00c      	beq.n	800a174 <_scanf_float+0x34c>
 800a15a:	2945      	cmp	r1, #69	; 0x45
 800a15c:	d00a      	beq.n	800a174 <_scanf_float+0x34c>
 800a15e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a162:	463a      	mov	r2, r7
 800a164:	4640      	mov	r0, r8
 800a166:	4798      	blx	r3
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a16e:	3b01      	subs	r3, #1
 800a170:	1eb5      	subs	r5, r6, #2
 800a172:	6123      	str	r3, [r4, #16]
 800a174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a178:	463a      	mov	r2, r7
 800a17a:	4640      	mov	r0, r8
 800a17c:	4798      	blx	r3
 800a17e:	462e      	mov	r6, r5
 800a180:	6825      	ldr	r5, [r4, #0]
 800a182:	f015 0510 	ands.w	r5, r5, #16
 800a186:	d158      	bne.n	800a23a <_scanf_float+0x412>
 800a188:	7035      	strb	r5, [r6, #0]
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a194:	d11c      	bne.n	800a1d0 <_scanf_float+0x3a8>
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	454b      	cmp	r3, r9
 800a19a:	eba3 0209 	sub.w	r2, r3, r9
 800a19e:	d124      	bne.n	800a1ea <_scanf_float+0x3c2>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4659      	mov	r1, fp
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	f000 ff99 	bl	800b0dc <_strtod_r>
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	6821      	ldr	r1, [r4, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f011 0f02 	tst.w	r1, #2
 800a1b4:	ec57 6b10 	vmov	r6, r7, d0
 800a1b8:	f103 0204 	add.w	r2, r3, #4
 800a1bc:	d020      	beq.n	800a200 <_scanf_float+0x3d8>
 800a1be:	9903      	ldr	r1, [sp, #12]
 800a1c0:	600a      	str	r2, [r1, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	e9c3 6700 	strd	r6, r7, [r3]
 800a1c8:	68e3      	ldr	r3, [r4, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60e3      	str	r3, [r4, #12]
 800a1ce:	e66c      	b.n	8009eaa <_scanf_float+0x82>
 800a1d0:	9b04      	ldr	r3, [sp, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0e4      	beq.n	800a1a0 <_scanf_float+0x378>
 800a1d6:	9905      	ldr	r1, [sp, #20]
 800a1d8:	230a      	movs	r3, #10
 800a1da:	462a      	mov	r2, r5
 800a1dc:	3101      	adds	r1, #1
 800a1de:	4640      	mov	r0, r8
 800a1e0:	f001 f806 	bl	800b1f0 <_strtol_r>
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	9e05      	ldr	r6, [sp, #20]
 800a1e8:	1ac2      	subs	r2, r0, r3
 800a1ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a1ee:	429e      	cmp	r6, r3
 800a1f0:	bf28      	it	cs
 800a1f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a1f6:	4912      	ldr	r1, [pc, #72]	; (800a240 <_scanf_float+0x418>)
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 f8a5 	bl	800a348 <siprintf>
 800a1fe:	e7cf      	b.n	800a1a0 <_scanf_float+0x378>
 800a200:	f011 0f04 	tst.w	r1, #4
 800a204:	9903      	ldr	r1, [sp, #12]
 800a206:	600a      	str	r2, [r1, #0]
 800a208:	d1db      	bne.n	800a1c2 <_scanf_float+0x39a>
 800a20a:	f8d3 8000 	ldr.w	r8, [r3]
 800a20e:	ee10 2a10 	vmov	r2, s0
 800a212:	ee10 0a10 	vmov	r0, s0
 800a216:	463b      	mov	r3, r7
 800a218:	4639      	mov	r1, r7
 800a21a:	f7f6 fc8f 	bl	8000b3c <__aeabi_dcmpun>
 800a21e:	b128      	cbz	r0, 800a22c <_scanf_float+0x404>
 800a220:	4808      	ldr	r0, [pc, #32]	; (800a244 <_scanf_float+0x41c>)
 800a222:	f000 f88b 	bl	800a33c <nanf>
 800a226:	ed88 0a00 	vstr	s0, [r8]
 800a22a:	e7cd      	b.n	800a1c8 <_scanf_float+0x3a0>
 800a22c:	4630      	mov	r0, r6
 800a22e:	4639      	mov	r1, r7
 800a230:	f7f6 fce2 	bl	8000bf8 <__aeabi_d2f>
 800a234:	f8c8 0000 	str.w	r0, [r8]
 800a238:	e7c6      	b.n	800a1c8 <_scanf_float+0x3a0>
 800a23a:	2500      	movs	r5, #0
 800a23c:	e635      	b.n	8009eaa <_scanf_float+0x82>
 800a23e:	bf00      	nop
 800a240:	0800e702 	.word	0x0800e702
 800a244:	0800eb33 	.word	0x0800eb33

0800a248 <cleanup_glue>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	460c      	mov	r4, r1
 800a24c:	6809      	ldr	r1, [r1, #0]
 800a24e:	4605      	mov	r5, r0
 800a250:	b109      	cbz	r1, 800a256 <cleanup_glue+0xe>
 800a252:	f7ff fff9 	bl	800a248 <cleanup_glue>
 800a256:	4621      	mov	r1, r4
 800a258:	4628      	mov	r0, r5
 800a25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a25e:	f7ff b8cf 	b.w	8009400 <_free_r>
	...

0800a264 <_reclaim_reent>:
 800a264:	4b2c      	ldr	r3, [pc, #176]	; (800a318 <_reclaim_reent+0xb4>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4283      	cmp	r3, r0
 800a26a:	b570      	push	{r4, r5, r6, lr}
 800a26c:	4604      	mov	r4, r0
 800a26e:	d051      	beq.n	800a314 <_reclaim_reent+0xb0>
 800a270:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a272:	b143      	cbz	r3, 800a286 <_reclaim_reent+0x22>
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d14a      	bne.n	800a310 <_reclaim_reent+0xac>
 800a27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27c:	6819      	ldr	r1, [r3, #0]
 800a27e:	b111      	cbz	r1, 800a286 <_reclaim_reent+0x22>
 800a280:	4620      	mov	r0, r4
 800a282:	f7ff f8bd 	bl	8009400 <_free_r>
 800a286:	6961      	ldr	r1, [r4, #20]
 800a288:	b111      	cbz	r1, 800a290 <_reclaim_reent+0x2c>
 800a28a:	4620      	mov	r0, r4
 800a28c:	f7ff f8b8 	bl	8009400 <_free_r>
 800a290:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a292:	b111      	cbz	r1, 800a29a <_reclaim_reent+0x36>
 800a294:	4620      	mov	r0, r4
 800a296:	f7ff f8b3 	bl	8009400 <_free_r>
 800a29a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a29c:	b111      	cbz	r1, 800a2a4 <_reclaim_reent+0x40>
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7ff f8ae 	bl	8009400 <_free_r>
 800a2a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a2a6:	b111      	cbz	r1, 800a2ae <_reclaim_reent+0x4a>
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f7ff f8a9 	bl	8009400 <_free_r>
 800a2ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a2b0:	b111      	cbz	r1, 800a2b8 <_reclaim_reent+0x54>
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f7ff f8a4 	bl	8009400 <_free_r>
 800a2b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a2ba:	b111      	cbz	r1, 800a2c2 <_reclaim_reent+0x5e>
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7ff f89f 	bl	8009400 <_free_r>
 800a2c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a2c4:	b111      	cbz	r1, 800a2cc <_reclaim_reent+0x68>
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f7ff f89a 	bl	8009400 <_free_r>
 800a2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ce:	b111      	cbz	r1, 800a2d6 <_reclaim_reent+0x72>
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f7ff f895 	bl	8009400 <_free_r>
 800a2d6:	69a3      	ldr	r3, [r4, #24]
 800a2d8:	b1e3      	cbz	r3, 800a314 <_reclaim_reent+0xb0>
 800a2da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a2dc:	4620      	mov	r0, r4
 800a2de:	4798      	blx	r3
 800a2e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a2e2:	b1b9      	cbz	r1, 800a314 <_reclaim_reent+0xb0>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2ea:	f7ff bfad 	b.w	800a248 <cleanup_glue>
 800a2ee:	5949      	ldr	r1, [r1, r5]
 800a2f0:	b941      	cbnz	r1, 800a304 <_reclaim_reent+0xa0>
 800a2f2:	3504      	adds	r5, #4
 800a2f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f6:	2d80      	cmp	r5, #128	; 0x80
 800a2f8:	68d9      	ldr	r1, [r3, #12]
 800a2fa:	d1f8      	bne.n	800a2ee <_reclaim_reent+0x8a>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f7ff f87f 	bl	8009400 <_free_r>
 800a302:	e7ba      	b.n	800a27a <_reclaim_reent+0x16>
 800a304:	680e      	ldr	r6, [r1, #0]
 800a306:	4620      	mov	r0, r4
 800a308:	f7ff f87a 	bl	8009400 <_free_r>
 800a30c:	4631      	mov	r1, r6
 800a30e:	e7ef      	b.n	800a2f0 <_reclaim_reent+0x8c>
 800a310:	2500      	movs	r5, #0
 800a312:	e7ef      	b.n	800a2f4 <_reclaim_reent+0x90>
 800a314:	bd70      	pop	{r4, r5, r6, pc}
 800a316:	bf00      	nop
 800a318:	20000010 	.word	0x20000010

0800a31c <_sbrk_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d06      	ldr	r5, [pc, #24]	; (800a338 <_sbrk_r+0x1c>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7f8 fd4e 	bl	8002dc8 <_sbrk>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d102      	bne.n	800a336 <_sbrk_r+0x1a>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	b103      	cbz	r3, 800a336 <_sbrk_r+0x1a>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	20006064 	.word	0x20006064

0800a33c <nanf>:
 800a33c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a344 <nanf+0x8>
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	7fc00000 	.word	0x7fc00000

0800a348 <siprintf>:
 800a348:	b40e      	push	{r1, r2, r3}
 800a34a:	b500      	push	{lr}
 800a34c:	b09c      	sub	sp, #112	; 0x70
 800a34e:	ab1d      	add	r3, sp, #116	; 0x74
 800a350:	9002      	str	r0, [sp, #8]
 800a352:	9006      	str	r0, [sp, #24]
 800a354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a358:	4809      	ldr	r0, [pc, #36]	; (800a380 <siprintf+0x38>)
 800a35a:	9107      	str	r1, [sp, #28]
 800a35c:	9104      	str	r1, [sp, #16]
 800a35e:	4909      	ldr	r1, [pc, #36]	; (800a384 <siprintf+0x3c>)
 800a360:	f853 2b04 	ldr.w	r2, [r3], #4
 800a364:	9105      	str	r1, [sp, #20]
 800a366:	6800      	ldr	r0, [r0, #0]
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	a902      	add	r1, sp, #8
 800a36c:	f002 ff68 	bl	800d240 <_svfiprintf_r>
 800a370:	9b02      	ldr	r3, [sp, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	b01c      	add	sp, #112	; 0x70
 800a378:	f85d eb04 	ldr.w	lr, [sp], #4
 800a37c:	b003      	add	sp, #12
 800a37e:	4770      	bx	lr
 800a380:	20000010 	.word	0x20000010
 800a384:	ffff0208 	.word	0xffff0208

0800a388 <siscanf>:
 800a388:	b40e      	push	{r1, r2, r3}
 800a38a:	b510      	push	{r4, lr}
 800a38c:	b09f      	sub	sp, #124	; 0x7c
 800a38e:	ac21      	add	r4, sp, #132	; 0x84
 800a390:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a394:	f854 2b04 	ldr.w	r2, [r4], #4
 800a398:	9201      	str	r2, [sp, #4]
 800a39a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a39e:	9004      	str	r0, [sp, #16]
 800a3a0:	9008      	str	r0, [sp, #32]
 800a3a2:	f7f5 ff1d 	bl	80001e0 <strlen>
 800a3a6:	4b0c      	ldr	r3, [pc, #48]	; (800a3d8 <siscanf+0x50>)
 800a3a8:	9005      	str	r0, [sp, #20]
 800a3aa:	9009      	str	r0, [sp, #36]	; 0x24
 800a3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ae:	480b      	ldr	r0, [pc, #44]	; (800a3dc <siscanf+0x54>)
 800a3b0:	9a01      	ldr	r2, [sp, #4]
 800a3b2:	6800      	ldr	r0, [r0, #0]
 800a3b4:	9403      	str	r4, [sp, #12]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	9311      	str	r3, [sp, #68]	; 0x44
 800a3ba:	9316      	str	r3, [sp, #88]	; 0x58
 800a3bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a3c4:	a904      	add	r1, sp, #16
 800a3c6:	4623      	mov	r3, r4
 800a3c8:	f003 f894 	bl	800d4f4 <__ssvfiscanf_r>
 800a3cc:	b01f      	add	sp, #124	; 0x7c
 800a3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d2:	b003      	add	sp, #12
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	0800a403 	.word	0x0800a403
 800a3dc:	20000010 	.word	0x20000010

0800a3e0 <__sread>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	f003 fb48 	bl	800da7c <_read_r>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	bfab      	itete	ge
 800a3f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3f4:	181b      	addge	r3, r3, r0
 800a3f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3fa:	bfac      	ite	ge
 800a3fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3fe:	81a3      	strhlt	r3, [r4, #12]
 800a400:	bd10      	pop	{r4, pc}

0800a402 <__seofread>:
 800a402:	2000      	movs	r0, #0
 800a404:	4770      	bx	lr

0800a406 <__swrite>:
 800a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40a:	461f      	mov	r7, r3
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	05db      	lsls	r3, r3, #23
 800a410:	4605      	mov	r5, r0
 800a412:	460c      	mov	r4, r1
 800a414:	4616      	mov	r6, r2
 800a416:	d505      	bpl.n	800a424 <__swrite+0x1e>
 800a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41c:	2302      	movs	r3, #2
 800a41e:	2200      	movs	r2, #0
 800a420:	f002 f9b8 	bl	800c794 <_lseek_r>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	4632      	mov	r2, r6
 800a432:	463b      	mov	r3, r7
 800a434:	4628      	mov	r0, r5
 800a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	f000 bedb 	b.w	800b1f4 <_write_r>

0800a43e <__sseek>:
 800a43e:	b510      	push	{r4, lr}
 800a440:	460c      	mov	r4, r1
 800a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a446:	f002 f9a5 	bl	800c794 <_lseek_r>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	bf15      	itete	ne
 800a450:	6560      	strne	r0, [r4, #84]	; 0x54
 800a452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a45a:	81a3      	strheq	r3, [r4, #12]
 800a45c:	bf18      	it	ne
 800a45e:	81a3      	strhne	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__sclose>:
 800a462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a466:	f000 bed7 	b.w	800b218 <_close_r>

0800a46a <strncmp>:
 800a46a:	b510      	push	{r4, lr}
 800a46c:	b16a      	cbz	r2, 800a48a <strncmp+0x20>
 800a46e:	3901      	subs	r1, #1
 800a470:	1884      	adds	r4, r0, r2
 800a472:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a476:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d103      	bne.n	800a486 <strncmp+0x1c>
 800a47e:	42a0      	cmp	r0, r4
 800a480:	d001      	beq.n	800a486 <strncmp+0x1c>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1f5      	bne.n	800a472 <strncmp+0x8>
 800a486:	1a98      	subs	r0, r3, r2
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	4610      	mov	r0, r2
 800a48c:	e7fc      	b.n	800a488 <strncmp+0x1e>

0800a48e <sulp>:
 800a48e:	b570      	push	{r4, r5, r6, lr}
 800a490:	4604      	mov	r4, r0
 800a492:	460d      	mov	r5, r1
 800a494:	ec45 4b10 	vmov	d0, r4, r5
 800a498:	4616      	mov	r6, r2
 800a49a:	f002 fd17 	bl	800cecc <__ulp>
 800a49e:	ec51 0b10 	vmov	r0, r1, d0
 800a4a2:	b17e      	cbz	r6, 800a4c4 <sulp+0x36>
 800a4a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dd09      	ble.n	800a4c4 <sulp+0x36>
 800a4b0:	051b      	lsls	r3, r3, #20
 800a4b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4b6:	2400      	movs	r4, #0
 800a4b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4bc:	4622      	mov	r2, r4
 800a4be:	462b      	mov	r3, r5
 800a4c0:	f7f6 f8a2 	bl	8000608 <__aeabi_dmul>
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4c8 <_strtod_l>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	b0a3      	sub	sp, #140	; 0x8c
 800a4ce:	461f      	mov	r7, r3
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	931e      	str	r3, [sp, #120]	; 0x78
 800a4d4:	4ba4      	ldr	r3, [pc, #656]	; (800a768 <_strtod_l+0x2a0>)
 800a4d6:	9219      	str	r2, [sp, #100]	; 0x64
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	9307      	str	r3, [sp, #28]
 800a4dc:	4604      	mov	r4, r0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	4688      	mov	r8, r1
 800a4e2:	f7f5 fe7d 	bl	80001e0 <strlen>
 800a4e6:	f04f 0a00 	mov.w	sl, #0
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	f04f 0b00 	mov.w	fp, #0
 800a4f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a4f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4f6:	781a      	ldrb	r2, [r3, #0]
 800a4f8:	2a2b      	cmp	r2, #43	; 0x2b
 800a4fa:	d04c      	beq.n	800a596 <_strtod_l+0xce>
 800a4fc:	d839      	bhi.n	800a572 <_strtod_l+0xaa>
 800a4fe:	2a0d      	cmp	r2, #13
 800a500:	d832      	bhi.n	800a568 <_strtod_l+0xa0>
 800a502:	2a08      	cmp	r2, #8
 800a504:	d832      	bhi.n	800a56c <_strtod_l+0xa4>
 800a506:	2a00      	cmp	r2, #0
 800a508:	d03c      	beq.n	800a584 <_strtod_l+0xbc>
 800a50a:	2300      	movs	r3, #0
 800a50c:	930e      	str	r3, [sp, #56]	; 0x38
 800a50e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a510:	7833      	ldrb	r3, [r6, #0]
 800a512:	2b30      	cmp	r3, #48	; 0x30
 800a514:	f040 80b4 	bne.w	800a680 <_strtod_l+0x1b8>
 800a518:	7873      	ldrb	r3, [r6, #1]
 800a51a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a51e:	2b58      	cmp	r3, #88	; 0x58
 800a520:	d16c      	bne.n	800a5fc <_strtod_l+0x134>
 800a522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	ab1e      	add	r3, sp, #120	; 0x78
 800a528:	9702      	str	r7, [sp, #8]
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	4a8f      	ldr	r2, [pc, #572]	; (800a76c <_strtod_l+0x2a4>)
 800a52e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a530:	a91d      	add	r1, sp, #116	; 0x74
 800a532:	4620      	mov	r0, r4
 800a534:	f001 fe22 	bl	800c17c <__gethex>
 800a538:	f010 0707 	ands.w	r7, r0, #7
 800a53c:	4605      	mov	r5, r0
 800a53e:	d005      	beq.n	800a54c <_strtod_l+0x84>
 800a540:	2f06      	cmp	r7, #6
 800a542:	d12a      	bne.n	800a59a <_strtod_l+0xd2>
 800a544:	3601      	adds	r6, #1
 800a546:	2300      	movs	r3, #0
 800a548:	961d      	str	r6, [sp, #116]	; 0x74
 800a54a:	930e      	str	r3, [sp, #56]	; 0x38
 800a54c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f040 8596 	bne.w	800b080 <_strtod_l+0xbb8>
 800a554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a556:	b1db      	cbz	r3, 800a590 <_strtod_l+0xc8>
 800a558:	4652      	mov	r2, sl
 800a55a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a55e:	ec43 2b10 	vmov	d0, r2, r3
 800a562:	b023      	add	sp, #140	; 0x8c
 800a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a568:	2a20      	cmp	r2, #32
 800a56a:	d1ce      	bne.n	800a50a <_strtod_l+0x42>
 800a56c:	3301      	adds	r3, #1
 800a56e:	931d      	str	r3, [sp, #116]	; 0x74
 800a570:	e7c0      	b.n	800a4f4 <_strtod_l+0x2c>
 800a572:	2a2d      	cmp	r2, #45	; 0x2d
 800a574:	d1c9      	bne.n	800a50a <_strtod_l+0x42>
 800a576:	2201      	movs	r2, #1
 800a578:	920e      	str	r2, [sp, #56]	; 0x38
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	921d      	str	r2, [sp, #116]	; 0x74
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1c4      	bne.n	800a50e <_strtod_l+0x46>
 800a584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a586:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 8576 	bne.w	800b07c <_strtod_l+0xbb4>
 800a590:	4652      	mov	r2, sl
 800a592:	465b      	mov	r3, fp
 800a594:	e7e3      	b.n	800a55e <_strtod_l+0x96>
 800a596:	2200      	movs	r2, #0
 800a598:	e7ee      	b.n	800a578 <_strtod_l+0xb0>
 800a59a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a59c:	b13a      	cbz	r2, 800a5ae <_strtod_l+0xe6>
 800a59e:	2135      	movs	r1, #53	; 0x35
 800a5a0:	a820      	add	r0, sp, #128	; 0x80
 800a5a2:	f002 fd9e 	bl	800d0e2 <__copybits>
 800a5a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f002 f963 	bl	800c874 <_Bfree>
 800a5ae:	3f01      	subs	r7, #1
 800a5b0:	2f05      	cmp	r7, #5
 800a5b2:	d807      	bhi.n	800a5c4 <_strtod_l+0xfc>
 800a5b4:	e8df f007 	tbb	[pc, r7]
 800a5b8:	1d180b0e 	.word	0x1d180b0e
 800a5bc:	030e      	.short	0x030e
 800a5be:	f04f 0b00 	mov.w	fp, #0
 800a5c2:	46da      	mov	sl, fp
 800a5c4:	0728      	lsls	r0, r5, #28
 800a5c6:	d5c1      	bpl.n	800a54c <_strtod_l+0x84>
 800a5c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a5cc:	e7be      	b.n	800a54c <_strtod_l+0x84>
 800a5ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a5d2:	e7f7      	b.n	800a5c4 <_strtod_l+0xfc>
 800a5d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a5d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a5da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5e6:	e7ed      	b.n	800a5c4 <_strtod_l+0xfc>
 800a5e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a770 <_strtod_l+0x2a8>
 800a5ec:	f04f 0a00 	mov.w	sl, #0
 800a5f0:	e7e8      	b.n	800a5c4 <_strtod_l+0xfc>
 800a5f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a5f6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a5fa:	e7e3      	b.n	800a5c4 <_strtod_l+0xfc>
 800a5fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	921d      	str	r2, [sp, #116]	; 0x74
 800a602:	785b      	ldrb	r3, [r3, #1]
 800a604:	2b30      	cmp	r3, #48	; 0x30
 800a606:	d0f9      	beq.n	800a5fc <_strtod_l+0x134>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d09f      	beq.n	800a54c <_strtod_l+0x84>
 800a60c:	2301      	movs	r3, #1
 800a60e:	f04f 0900 	mov.w	r9, #0
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a616:	930a      	str	r3, [sp, #40]	; 0x28
 800a618:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a61c:	464f      	mov	r7, r9
 800a61e:	220a      	movs	r2, #10
 800a620:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a622:	7806      	ldrb	r6, [r0, #0]
 800a624:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a628:	b2d9      	uxtb	r1, r3
 800a62a:	2909      	cmp	r1, #9
 800a62c:	d92a      	bls.n	800a684 <_strtod_l+0x1bc>
 800a62e:	9907      	ldr	r1, [sp, #28]
 800a630:	462a      	mov	r2, r5
 800a632:	f7ff ff1a 	bl	800a46a <strncmp>
 800a636:	b398      	cbz	r0, 800a6a0 <_strtod_l+0x1d8>
 800a638:	2000      	movs	r0, #0
 800a63a:	4633      	mov	r3, r6
 800a63c:	463d      	mov	r5, r7
 800a63e:	9007      	str	r0, [sp, #28]
 800a640:	4602      	mov	r2, r0
 800a642:	2b65      	cmp	r3, #101	; 0x65
 800a644:	d001      	beq.n	800a64a <_strtod_l+0x182>
 800a646:	2b45      	cmp	r3, #69	; 0x45
 800a648:	d118      	bne.n	800a67c <_strtod_l+0x1b4>
 800a64a:	b91d      	cbnz	r5, 800a654 <_strtod_l+0x18c>
 800a64c:	9b04      	ldr	r3, [sp, #16]
 800a64e:	4303      	orrs	r3, r0
 800a650:	d098      	beq.n	800a584 <_strtod_l+0xbc>
 800a652:	2500      	movs	r5, #0
 800a654:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a658:	f108 0301 	add.w	r3, r8, #1
 800a65c:	931d      	str	r3, [sp, #116]	; 0x74
 800a65e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a662:	2b2b      	cmp	r3, #43	; 0x2b
 800a664:	d075      	beq.n	800a752 <_strtod_l+0x28a>
 800a666:	2b2d      	cmp	r3, #45	; 0x2d
 800a668:	d07b      	beq.n	800a762 <_strtod_l+0x29a>
 800a66a:	f04f 0c00 	mov.w	ip, #0
 800a66e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a672:	2909      	cmp	r1, #9
 800a674:	f240 8082 	bls.w	800a77c <_strtod_l+0x2b4>
 800a678:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a67c:	2600      	movs	r6, #0
 800a67e:	e09d      	b.n	800a7bc <_strtod_l+0x2f4>
 800a680:	2300      	movs	r3, #0
 800a682:	e7c4      	b.n	800a60e <_strtod_l+0x146>
 800a684:	2f08      	cmp	r7, #8
 800a686:	bfd8      	it	le
 800a688:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a68a:	f100 0001 	add.w	r0, r0, #1
 800a68e:	bfda      	itte	le
 800a690:	fb02 3301 	mlale	r3, r2, r1, r3
 800a694:	9309      	strle	r3, [sp, #36]	; 0x24
 800a696:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a69a:	3701      	adds	r7, #1
 800a69c:	901d      	str	r0, [sp, #116]	; 0x74
 800a69e:	e7bf      	b.n	800a620 <_strtod_l+0x158>
 800a6a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6a2:	195a      	adds	r2, r3, r5
 800a6a4:	921d      	str	r2, [sp, #116]	; 0x74
 800a6a6:	5d5b      	ldrb	r3, [r3, r5]
 800a6a8:	2f00      	cmp	r7, #0
 800a6aa:	d037      	beq.n	800a71c <_strtod_l+0x254>
 800a6ac:	9007      	str	r0, [sp, #28]
 800a6ae:	463d      	mov	r5, r7
 800a6b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a6b4:	2a09      	cmp	r2, #9
 800a6b6:	d912      	bls.n	800a6de <_strtod_l+0x216>
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	e7c2      	b.n	800a642 <_strtod_l+0x17a>
 800a6bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	921d      	str	r2, [sp, #116]	; 0x74
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	2b30      	cmp	r3, #48	; 0x30
 800a6c8:	d0f8      	beq.n	800a6bc <_strtod_l+0x1f4>
 800a6ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a6ce:	2a08      	cmp	r2, #8
 800a6d0:	f200 84db 	bhi.w	800b08a <_strtod_l+0xbc2>
 800a6d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a6d6:	9007      	str	r0, [sp, #28]
 800a6d8:	2000      	movs	r0, #0
 800a6da:	920a      	str	r2, [sp, #40]	; 0x28
 800a6dc:	4605      	mov	r5, r0
 800a6de:	3b30      	subs	r3, #48	; 0x30
 800a6e0:	f100 0201 	add.w	r2, r0, #1
 800a6e4:	d014      	beq.n	800a710 <_strtod_l+0x248>
 800a6e6:	9907      	ldr	r1, [sp, #28]
 800a6e8:	4411      	add	r1, r2
 800a6ea:	9107      	str	r1, [sp, #28]
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	eb00 0e05 	add.w	lr, r0, r5
 800a6f2:	210a      	movs	r1, #10
 800a6f4:	4572      	cmp	r2, lr
 800a6f6:	d113      	bne.n	800a720 <_strtod_l+0x258>
 800a6f8:	182a      	adds	r2, r5, r0
 800a6fa:	2a08      	cmp	r2, #8
 800a6fc:	f105 0501 	add.w	r5, r5, #1
 800a700:	4405      	add	r5, r0
 800a702:	dc1c      	bgt.n	800a73e <_strtod_l+0x276>
 800a704:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a706:	220a      	movs	r2, #10
 800a708:	fb02 3301 	mla	r3, r2, r1, r3
 800a70c:	9309      	str	r3, [sp, #36]	; 0x24
 800a70e:	2200      	movs	r2, #0
 800a710:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a712:	1c59      	adds	r1, r3, #1
 800a714:	911d      	str	r1, [sp, #116]	; 0x74
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	4610      	mov	r0, r2
 800a71a:	e7c9      	b.n	800a6b0 <_strtod_l+0x1e8>
 800a71c:	4638      	mov	r0, r7
 800a71e:	e7d2      	b.n	800a6c6 <_strtod_l+0x1fe>
 800a720:	2a08      	cmp	r2, #8
 800a722:	dc04      	bgt.n	800a72e <_strtod_l+0x266>
 800a724:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a726:	434e      	muls	r6, r1
 800a728:	9609      	str	r6, [sp, #36]	; 0x24
 800a72a:	3201      	adds	r2, #1
 800a72c:	e7e2      	b.n	800a6f4 <_strtod_l+0x22c>
 800a72e:	f102 0c01 	add.w	ip, r2, #1
 800a732:	f1bc 0f10 	cmp.w	ip, #16
 800a736:	bfd8      	it	le
 800a738:	fb01 f909 	mulle.w	r9, r1, r9
 800a73c:	e7f5      	b.n	800a72a <_strtod_l+0x262>
 800a73e:	2d10      	cmp	r5, #16
 800a740:	bfdc      	itt	le
 800a742:	220a      	movle	r2, #10
 800a744:	fb02 3909 	mlale	r9, r2, r9, r3
 800a748:	e7e1      	b.n	800a70e <_strtod_l+0x246>
 800a74a:	2300      	movs	r3, #0
 800a74c:	9307      	str	r3, [sp, #28]
 800a74e:	2201      	movs	r2, #1
 800a750:	e77c      	b.n	800a64c <_strtod_l+0x184>
 800a752:	f04f 0c00 	mov.w	ip, #0
 800a756:	f108 0302 	add.w	r3, r8, #2
 800a75a:	931d      	str	r3, [sp, #116]	; 0x74
 800a75c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a760:	e785      	b.n	800a66e <_strtod_l+0x1a6>
 800a762:	f04f 0c01 	mov.w	ip, #1
 800a766:	e7f6      	b.n	800a756 <_strtod_l+0x28e>
 800a768:	0800e958 	.word	0x0800e958
 800a76c:	0800e708 	.word	0x0800e708
 800a770:	7ff00000 	.word	0x7ff00000
 800a774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a776:	1c59      	adds	r1, r3, #1
 800a778:	911d      	str	r1, [sp, #116]	; 0x74
 800a77a:	785b      	ldrb	r3, [r3, #1]
 800a77c:	2b30      	cmp	r3, #48	; 0x30
 800a77e:	d0f9      	beq.n	800a774 <_strtod_l+0x2ac>
 800a780:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a784:	2908      	cmp	r1, #8
 800a786:	f63f af79 	bhi.w	800a67c <_strtod_l+0x1b4>
 800a78a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a78e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a790:	9308      	str	r3, [sp, #32]
 800a792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a794:	1c59      	adds	r1, r3, #1
 800a796:	911d      	str	r1, [sp, #116]	; 0x74
 800a798:	785b      	ldrb	r3, [r3, #1]
 800a79a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a79e:	2e09      	cmp	r6, #9
 800a7a0:	d937      	bls.n	800a812 <_strtod_l+0x34a>
 800a7a2:	9e08      	ldr	r6, [sp, #32]
 800a7a4:	1b89      	subs	r1, r1, r6
 800a7a6:	2908      	cmp	r1, #8
 800a7a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a7ac:	dc02      	bgt.n	800a7b4 <_strtod_l+0x2ec>
 800a7ae:	4576      	cmp	r6, lr
 800a7b0:	bfa8      	it	ge
 800a7b2:	4676      	movge	r6, lr
 800a7b4:	f1bc 0f00 	cmp.w	ip, #0
 800a7b8:	d000      	beq.n	800a7bc <_strtod_l+0x2f4>
 800a7ba:	4276      	negs	r6, r6
 800a7bc:	2d00      	cmp	r5, #0
 800a7be:	d14f      	bne.n	800a860 <_strtod_l+0x398>
 800a7c0:	9904      	ldr	r1, [sp, #16]
 800a7c2:	4301      	orrs	r1, r0
 800a7c4:	f47f aec2 	bne.w	800a54c <_strtod_l+0x84>
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	f47f aedb 	bne.w	800a584 <_strtod_l+0xbc>
 800a7ce:	2b69      	cmp	r3, #105	; 0x69
 800a7d0:	d027      	beq.n	800a822 <_strtod_l+0x35a>
 800a7d2:	dc24      	bgt.n	800a81e <_strtod_l+0x356>
 800a7d4:	2b49      	cmp	r3, #73	; 0x49
 800a7d6:	d024      	beq.n	800a822 <_strtod_l+0x35a>
 800a7d8:	2b4e      	cmp	r3, #78	; 0x4e
 800a7da:	f47f aed3 	bne.w	800a584 <_strtod_l+0xbc>
 800a7de:	499e      	ldr	r1, [pc, #632]	; (800aa58 <_strtod_l+0x590>)
 800a7e0:	a81d      	add	r0, sp, #116	; 0x74
 800a7e2:	f001 ff23 	bl	800c62c <__match>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f43f aecc 	beq.w	800a584 <_strtod_l+0xbc>
 800a7ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b28      	cmp	r3, #40	; 0x28
 800a7f2:	d12d      	bne.n	800a850 <_strtod_l+0x388>
 800a7f4:	4999      	ldr	r1, [pc, #612]	; (800aa5c <_strtod_l+0x594>)
 800a7f6:	aa20      	add	r2, sp, #128	; 0x80
 800a7f8:	a81d      	add	r0, sp, #116	; 0x74
 800a7fa:	f001 ff2b 	bl	800c654 <__hexnan>
 800a7fe:	2805      	cmp	r0, #5
 800a800:	d126      	bne.n	800a850 <_strtod_l+0x388>
 800a802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a804:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a808:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a80c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a810:	e69c      	b.n	800a54c <_strtod_l+0x84>
 800a812:	210a      	movs	r1, #10
 800a814:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a818:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a81c:	e7b9      	b.n	800a792 <_strtod_l+0x2ca>
 800a81e:	2b6e      	cmp	r3, #110	; 0x6e
 800a820:	e7db      	b.n	800a7da <_strtod_l+0x312>
 800a822:	498f      	ldr	r1, [pc, #572]	; (800aa60 <_strtod_l+0x598>)
 800a824:	a81d      	add	r0, sp, #116	; 0x74
 800a826:	f001 ff01 	bl	800c62c <__match>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f43f aeaa 	beq.w	800a584 <_strtod_l+0xbc>
 800a830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a832:	498c      	ldr	r1, [pc, #560]	; (800aa64 <_strtod_l+0x59c>)
 800a834:	3b01      	subs	r3, #1
 800a836:	a81d      	add	r0, sp, #116	; 0x74
 800a838:	931d      	str	r3, [sp, #116]	; 0x74
 800a83a:	f001 fef7 	bl	800c62c <__match>
 800a83e:	b910      	cbnz	r0, 800a846 <_strtod_l+0x37e>
 800a840:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a842:	3301      	adds	r3, #1
 800a844:	931d      	str	r3, [sp, #116]	; 0x74
 800a846:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800aa74 <_strtod_l+0x5ac>
 800a84a:	f04f 0a00 	mov.w	sl, #0
 800a84e:	e67d      	b.n	800a54c <_strtod_l+0x84>
 800a850:	4885      	ldr	r0, [pc, #532]	; (800aa68 <_strtod_l+0x5a0>)
 800a852:	f003 f925 	bl	800daa0 <nan>
 800a856:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a85a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a85e:	e675      	b.n	800a54c <_strtod_l+0x84>
 800a860:	9b07      	ldr	r3, [sp, #28]
 800a862:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a864:	1af3      	subs	r3, r6, r3
 800a866:	2f00      	cmp	r7, #0
 800a868:	bf08      	it	eq
 800a86a:	462f      	moveq	r7, r5
 800a86c:	2d10      	cmp	r5, #16
 800a86e:	9308      	str	r3, [sp, #32]
 800a870:	46a8      	mov	r8, r5
 800a872:	bfa8      	it	ge
 800a874:	f04f 0810 	movge.w	r8, #16
 800a878:	f7f5 fe4c 	bl	8000514 <__aeabi_ui2d>
 800a87c:	2d09      	cmp	r5, #9
 800a87e:	4682      	mov	sl, r0
 800a880:	468b      	mov	fp, r1
 800a882:	dd13      	ble.n	800a8ac <_strtod_l+0x3e4>
 800a884:	4b79      	ldr	r3, [pc, #484]	; (800aa6c <_strtod_l+0x5a4>)
 800a886:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a88a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a88e:	f7f5 febb 	bl	8000608 <__aeabi_dmul>
 800a892:	4682      	mov	sl, r0
 800a894:	4648      	mov	r0, r9
 800a896:	468b      	mov	fp, r1
 800a898:	f7f5 fe3c 	bl	8000514 <__aeabi_ui2d>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	4659      	mov	r1, fp
 800a8a4:	f7f5 fcfa 	bl	800029c <__adddf3>
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	468b      	mov	fp, r1
 800a8ac:	2d0f      	cmp	r5, #15
 800a8ae:	dc38      	bgt.n	800a922 <_strtod_l+0x45a>
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f43f ae4a 	beq.w	800a54c <_strtod_l+0x84>
 800a8b8:	dd24      	ble.n	800a904 <_strtod_l+0x43c>
 800a8ba:	2b16      	cmp	r3, #22
 800a8bc:	dc0b      	bgt.n	800a8d6 <_strtod_l+0x40e>
 800a8be:	4d6b      	ldr	r5, [pc, #428]	; (800aa6c <_strtod_l+0x5a4>)
 800a8c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a8c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a8c8:	4652      	mov	r2, sl
 800a8ca:	465b      	mov	r3, fp
 800a8cc:	f7f5 fe9c 	bl	8000608 <__aeabi_dmul>
 800a8d0:	4682      	mov	sl, r0
 800a8d2:	468b      	mov	fp, r1
 800a8d4:	e63a      	b.n	800a54c <_strtod_l+0x84>
 800a8d6:	9a08      	ldr	r2, [sp, #32]
 800a8d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	db20      	blt.n	800a922 <_strtod_l+0x45a>
 800a8e0:	4c62      	ldr	r4, [pc, #392]	; (800aa6c <_strtod_l+0x5a4>)
 800a8e2:	f1c5 050f 	rsb	r5, r5, #15
 800a8e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	465b      	mov	r3, fp
 800a8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f2:	f7f5 fe89 	bl	8000608 <__aeabi_dmul>
 800a8f6:	9b08      	ldr	r3, [sp, #32]
 800a8f8:	1b5d      	subs	r5, r3, r5
 800a8fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a8fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a902:	e7e3      	b.n	800a8cc <_strtod_l+0x404>
 800a904:	9b08      	ldr	r3, [sp, #32]
 800a906:	3316      	adds	r3, #22
 800a908:	db0b      	blt.n	800a922 <_strtod_l+0x45a>
 800a90a:	9b07      	ldr	r3, [sp, #28]
 800a90c:	4a57      	ldr	r2, [pc, #348]	; (800aa6c <_strtod_l+0x5a4>)
 800a90e:	1b9e      	subs	r6, r3, r6
 800a910:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a914:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a918:	4650      	mov	r0, sl
 800a91a:	4659      	mov	r1, fp
 800a91c:	f7f5 ff9e 	bl	800085c <__aeabi_ddiv>
 800a920:	e7d6      	b.n	800a8d0 <_strtod_l+0x408>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	eba5 0808 	sub.w	r8, r5, r8
 800a928:	4498      	add	r8, r3
 800a92a:	f1b8 0f00 	cmp.w	r8, #0
 800a92e:	dd71      	ble.n	800aa14 <_strtod_l+0x54c>
 800a930:	f018 030f 	ands.w	r3, r8, #15
 800a934:	d00a      	beq.n	800a94c <_strtod_l+0x484>
 800a936:	494d      	ldr	r1, [pc, #308]	; (800aa6c <_strtod_l+0x5a4>)
 800a938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a93c:	4652      	mov	r2, sl
 800a93e:	465b      	mov	r3, fp
 800a940:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a944:	f7f5 fe60 	bl	8000608 <__aeabi_dmul>
 800a948:	4682      	mov	sl, r0
 800a94a:	468b      	mov	fp, r1
 800a94c:	f038 080f 	bics.w	r8, r8, #15
 800a950:	d04d      	beq.n	800a9ee <_strtod_l+0x526>
 800a952:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a956:	dd22      	ble.n	800a99e <_strtod_l+0x4d6>
 800a958:	2500      	movs	r5, #0
 800a95a:	462e      	mov	r6, r5
 800a95c:	9509      	str	r5, [sp, #36]	; 0x24
 800a95e:	9507      	str	r5, [sp, #28]
 800a960:	2322      	movs	r3, #34	; 0x22
 800a962:	f8df b110 	ldr.w	fp, [pc, #272]	; 800aa74 <_strtod_l+0x5ac>
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	f04f 0a00 	mov.w	sl, #0
 800a96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f43f adec 	beq.w	800a54c <_strtod_l+0x84>
 800a974:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a976:	4620      	mov	r0, r4
 800a978:	f001 ff7c 	bl	800c874 <_Bfree>
 800a97c:	9907      	ldr	r1, [sp, #28]
 800a97e:	4620      	mov	r0, r4
 800a980:	f001 ff78 	bl	800c874 <_Bfree>
 800a984:	4631      	mov	r1, r6
 800a986:	4620      	mov	r0, r4
 800a988:	f001 ff74 	bl	800c874 <_Bfree>
 800a98c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a98e:	4620      	mov	r0, r4
 800a990:	f001 ff70 	bl	800c874 <_Bfree>
 800a994:	4629      	mov	r1, r5
 800a996:	4620      	mov	r0, r4
 800a998:	f001 ff6c 	bl	800c874 <_Bfree>
 800a99c:	e5d6      	b.n	800a54c <_strtod_l+0x84>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	4659      	mov	r1, fp
 800a9a8:	4699      	mov	r9, r3
 800a9aa:	f1b8 0f01 	cmp.w	r8, #1
 800a9ae:	dc21      	bgt.n	800a9f4 <_strtod_l+0x52c>
 800a9b0:	b10b      	cbz	r3, 800a9b6 <_strtod_l+0x4ee>
 800a9b2:	4682      	mov	sl, r0
 800a9b4:	468b      	mov	fp, r1
 800a9b6:	4b2e      	ldr	r3, [pc, #184]	; (800aa70 <_strtod_l+0x5a8>)
 800a9b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a9bc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a9c8:	f7f5 fe1e 	bl	8000608 <__aeabi_dmul>
 800a9cc:	4b29      	ldr	r3, [pc, #164]	; (800aa74 <_strtod_l+0x5ac>)
 800a9ce:	460a      	mov	r2, r1
 800a9d0:	400b      	ands	r3, r1
 800a9d2:	4929      	ldr	r1, [pc, #164]	; (800aa78 <_strtod_l+0x5b0>)
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	4682      	mov	sl, r0
 800a9d8:	d8be      	bhi.n	800a958 <_strtod_l+0x490>
 800a9da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9de:	428b      	cmp	r3, r1
 800a9e0:	bf86      	itte	hi
 800a9e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800aa7c <_strtod_l+0x5b4>
 800a9e6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a9ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	e081      	b.n	800aaf8 <_strtod_l+0x630>
 800a9f4:	f018 0f01 	tst.w	r8, #1
 800a9f8:	d007      	beq.n	800aa0a <_strtod_l+0x542>
 800a9fa:	4b1d      	ldr	r3, [pc, #116]	; (800aa70 <_strtod_l+0x5a8>)
 800a9fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f5 fe00 	bl	8000608 <__aeabi_dmul>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	f109 0901 	add.w	r9, r9, #1
 800aa0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa12:	e7ca      	b.n	800a9aa <_strtod_l+0x4e2>
 800aa14:	d0eb      	beq.n	800a9ee <_strtod_l+0x526>
 800aa16:	f1c8 0800 	rsb	r8, r8, #0
 800aa1a:	f018 020f 	ands.w	r2, r8, #15
 800aa1e:	d00a      	beq.n	800aa36 <_strtod_l+0x56e>
 800aa20:	4b12      	ldr	r3, [pc, #72]	; (800aa6c <_strtod_l+0x5a4>)
 800aa22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa26:	4650      	mov	r0, sl
 800aa28:	4659      	mov	r1, fp
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 ff15 	bl	800085c <__aeabi_ddiv>
 800aa32:	4682      	mov	sl, r0
 800aa34:	468b      	mov	fp, r1
 800aa36:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa3a:	d0d8      	beq.n	800a9ee <_strtod_l+0x526>
 800aa3c:	f1b8 0f1f 	cmp.w	r8, #31
 800aa40:	dd1e      	ble.n	800aa80 <_strtod_l+0x5b8>
 800aa42:	2500      	movs	r5, #0
 800aa44:	462e      	mov	r6, r5
 800aa46:	9509      	str	r5, [sp, #36]	; 0x24
 800aa48:	9507      	str	r5, [sp, #28]
 800aa4a:	2322      	movs	r3, #34	; 0x22
 800aa4c:	f04f 0a00 	mov.w	sl, #0
 800aa50:	f04f 0b00 	mov.w	fp, #0
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	e789      	b.n	800a96c <_strtod_l+0x4a4>
 800aa58:	0800e6dd 	.word	0x0800e6dd
 800aa5c:	0800e71c 	.word	0x0800e71c
 800aa60:	0800e6d5 	.word	0x0800e6d5
 800aa64:	0800e85c 	.word	0x0800e85c
 800aa68:	0800eb33 	.word	0x0800eb33
 800aa6c:	0800e9f8 	.word	0x0800e9f8
 800aa70:	0800e9d0 	.word	0x0800e9d0
 800aa74:	7ff00000 	.word	0x7ff00000
 800aa78:	7ca00000 	.word	0x7ca00000
 800aa7c:	7fefffff 	.word	0x7fefffff
 800aa80:	f018 0310 	ands.w	r3, r8, #16
 800aa84:	bf18      	it	ne
 800aa86:	236a      	movne	r3, #106	; 0x6a
 800aa88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ae40 <_strtod_l+0x978>
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	4650      	mov	r0, sl
 800aa90:	4659      	mov	r1, fp
 800aa92:	2300      	movs	r3, #0
 800aa94:	f018 0f01 	tst.w	r8, #1
 800aa98:	d004      	beq.n	800aaa4 <_strtod_l+0x5dc>
 800aa9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa9e:	f7f5 fdb3 	bl	8000608 <__aeabi_dmul>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aaa8:	f109 0908 	add.w	r9, r9, #8
 800aaac:	d1f2      	bne.n	800aa94 <_strtod_l+0x5cc>
 800aaae:	b10b      	cbz	r3, 800aab4 <_strtod_l+0x5ec>
 800aab0:	4682      	mov	sl, r0
 800aab2:	468b      	mov	fp, r1
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	b1bb      	cbz	r3, 800aae8 <_strtod_l+0x620>
 800aab8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aabc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	4659      	mov	r1, fp
 800aac4:	dd10      	ble.n	800aae8 <_strtod_l+0x620>
 800aac6:	2b1f      	cmp	r3, #31
 800aac8:	f340 8128 	ble.w	800ad1c <_strtod_l+0x854>
 800aacc:	2b34      	cmp	r3, #52	; 0x34
 800aace:	bfde      	ittt	le
 800aad0:	3b20      	suble	r3, #32
 800aad2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800aad6:	fa02 f303 	lslle.w	r3, r2, r3
 800aada:	f04f 0a00 	mov.w	sl, #0
 800aade:	bfcc      	ite	gt
 800aae0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aae4:	ea03 0b01 	andle.w	fp, r3, r1
 800aae8:	2200      	movs	r2, #0
 800aaea:	2300      	movs	r3, #0
 800aaec:	4650      	mov	r0, sl
 800aaee:	4659      	mov	r1, fp
 800aaf0:	f7f5 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d1a4      	bne.n	800aa42 <_strtod_l+0x57a>
 800aaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aafe:	462b      	mov	r3, r5
 800ab00:	463a      	mov	r2, r7
 800ab02:	4620      	mov	r0, r4
 800ab04:	f001 ff22 	bl	800c94c <__s2b>
 800ab08:	9009      	str	r0, [sp, #36]	; 0x24
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	f43f af24 	beq.w	800a958 <_strtod_l+0x490>
 800ab10:	9b07      	ldr	r3, [sp, #28]
 800ab12:	1b9e      	subs	r6, r3, r6
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfb4      	ite	lt
 800ab1a:	4633      	movlt	r3, r6
 800ab1c:	2300      	movge	r3, #0
 800ab1e:	9310      	str	r3, [sp, #64]	; 0x40
 800ab20:	9b08      	ldr	r3, [sp, #32]
 800ab22:	2500      	movs	r5, #0
 800ab24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab28:	9318      	str	r3, [sp, #96]	; 0x60
 800ab2a:	462e      	mov	r6, r5
 800ab2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2e:	4620      	mov	r0, r4
 800ab30:	6859      	ldr	r1, [r3, #4]
 800ab32:	f001 fe5f 	bl	800c7f4 <_Balloc>
 800ab36:	9007      	str	r0, [sp, #28]
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	f43f af11 	beq.w	800a960 <_strtod_l+0x498>
 800ab3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab40:	691a      	ldr	r2, [r3, #16]
 800ab42:	3202      	adds	r2, #2
 800ab44:	f103 010c 	add.w	r1, r3, #12
 800ab48:	0092      	lsls	r2, r2, #2
 800ab4a:	300c      	adds	r0, #12
 800ab4c:	f7fe fc42 	bl	80093d4 <memcpy>
 800ab50:	ec4b ab10 	vmov	d0, sl, fp
 800ab54:	aa20      	add	r2, sp, #128	; 0x80
 800ab56:	a91f      	add	r1, sp, #124	; 0x7c
 800ab58:	4620      	mov	r0, r4
 800ab5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ab5e:	f002 fa31 	bl	800cfc4 <__d2b>
 800ab62:	901e      	str	r0, [sp, #120]	; 0x78
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f43f aefb 	beq.w	800a960 <_strtod_l+0x498>
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f001 ff87 	bl	800ca80 <__i2b>
 800ab72:	4606      	mov	r6, r0
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f43f aef3 	beq.w	800a960 <_strtod_l+0x498>
 800ab7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab7c:	9904      	ldr	r1, [sp, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfab      	itete	ge
 800ab82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ab84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ab86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ab88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ab8c:	bfac      	ite	ge
 800ab8e:	eb03 0902 	addge.w	r9, r3, r2
 800ab92:	1ad7      	sublt	r7, r2, r3
 800ab94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab96:	eba3 0801 	sub.w	r8, r3, r1
 800ab9a:	4490      	add	r8, r2
 800ab9c:	4ba3      	ldr	r3, [pc, #652]	; (800ae2c <_strtod_l+0x964>)
 800ab9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800aba2:	4598      	cmp	r8, r3
 800aba4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aba8:	f280 80cc 	bge.w	800ad44 <_strtod_l+0x87c>
 800abac:	eba3 0308 	sub.w	r3, r3, r8
 800abb0:	2b1f      	cmp	r3, #31
 800abb2:	eba2 0203 	sub.w	r2, r2, r3
 800abb6:	f04f 0101 	mov.w	r1, #1
 800abba:	f300 80b6 	bgt.w	800ad2a <_strtod_l+0x862>
 800abbe:	fa01 f303 	lsl.w	r3, r1, r3
 800abc2:	9311      	str	r3, [sp, #68]	; 0x44
 800abc4:	2300      	movs	r3, #0
 800abc6:	930c      	str	r3, [sp, #48]	; 0x30
 800abc8:	eb09 0802 	add.w	r8, r9, r2
 800abcc:	9b04      	ldr	r3, [sp, #16]
 800abce:	45c1      	cmp	r9, r8
 800abd0:	4417      	add	r7, r2
 800abd2:	441f      	add	r7, r3
 800abd4:	464b      	mov	r3, r9
 800abd6:	bfa8      	it	ge
 800abd8:	4643      	movge	r3, r8
 800abda:	42bb      	cmp	r3, r7
 800abdc:	bfa8      	it	ge
 800abde:	463b      	movge	r3, r7
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	bfc2      	ittt	gt
 800abe4:	eba8 0803 	subgt.w	r8, r8, r3
 800abe8:	1aff      	subgt	r7, r7, r3
 800abea:	eba9 0903 	subgt.w	r9, r9, r3
 800abee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	dd17      	ble.n	800ac24 <_strtod_l+0x75c>
 800abf4:	4631      	mov	r1, r6
 800abf6:	461a      	mov	r2, r3
 800abf8:	4620      	mov	r0, r4
 800abfa:	f001 fffd 	bl	800cbf8 <__pow5mult>
 800abfe:	4606      	mov	r6, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	f43f aead 	beq.w	800a960 <_strtod_l+0x498>
 800ac06:	4601      	mov	r1, r0
 800ac08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f001 ff4e 	bl	800caac <__multiply>
 800ac10:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f43f aea4 	beq.w	800a960 <_strtod_l+0x498>
 800ac18:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f001 fe2a 	bl	800c874 <_Bfree>
 800ac20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac22:	931e      	str	r3, [sp, #120]	; 0x78
 800ac24:	f1b8 0f00 	cmp.w	r8, #0
 800ac28:	f300 8091 	bgt.w	800ad4e <_strtod_l+0x886>
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	dd08      	ble.n	800ac44 <_strtod_l+0x77c>
 800ac32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac34:	9907      	ldr	r1, [sp, #28]
 800ac36:	4620      	mov	r0, r4
 800ac38:	f001 ffde 	bl	800cbf8 <__pow5mult>
 800ac3c:	9007      	str	r0, [sp, #28]
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f43f ae8e 	beq.w	800a960 <_strtod_l+0x498>
 800ac44:	2f00      	cmp	r7, #0
 800ac46:	dd08      	ble.n	800ac5a <_strtod_l+0x792>
 800ac48:	9907      	ldr	r1, [sp, #28]
 800ac4a:	463a      	mov	r2, r7
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f002 f82d 	bl	800ccac <__lshift>
 800ac52:	9007      	str	r0, [sp, #28]
 800ac54:	2800      	cmp	r0, #0
 800ac56:	f43f ae83 	beq.w	800a960 <_strtod_l+0x498>
 800ac5a:	f1b9 0f00 	cmp.w	r9, #0
 800ac5e:	dd08      	ble.n	800ac72 <_strtod_l+0x7aa>
 800ac60:	4631      	mov	r1, r6
 800ac62:	464a      	mov	r2, r9
 800ac64:	4620      	mov	r0, r4
 800ac66:	f002 f821 	bl	800ccac <__lshift>
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f43f ae77 	beq.w	800a960 <_strtod_l+0x498>
 800ac72:	9a07      	ldr	r2, [sp, #28]
 800ac74:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ac76:	4620      	mov	r0, r4
 800ac78:	f002 f8a0 	bl	800cdbc <__mdiff>
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f43f ae6e 	beq.w	800a960 <_strtod_l+0x498>
 800ac84:	68c3      	ldr	r3, [r0, #12]
 800ac86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac88:	2300      	movs	r3, #0
 800ac8a:	60c3      	str	r3, [r0, #12]
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	f002 f879 	bl	800cd84 <__mcmp>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	da65      	bge.n	800ad62 <_strtod_l+0x89a>
 800ac96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac98:	ea53 030a 	orrs.w	r3, r3, sl
 800ac9c:	f040 8087 	bne.w	800adae <_strtod_l+0x8e6>
 800aca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f040 8082 	bne.w	800adae <_strtod_l+0x8e6>
 800acaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acae:	0d1b      	lsrs	r3, r3, #20
 800acb0:	051b      	lsls	r3, r3, #20
 800acb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acb6:	d97a      	bls.n	800adae <_strtod_l+0x8e6>
 800acb8:	696b      	ldr	r3, [r5, #20]
 800acba:	b913      	cbnz	r3, 800acc2 <_strtod_l+0x7fa>
 800acbc:	692b      	ldr	r3, [r5, #16]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	dd75      	ble.n	800adae <_strtod_l+0x8e6>
 800acc2:	4629      	mov	r1, r5
 800acc4:	2201      	movs	r2, #1
 800acc6:	4620      	mov	r0, r4
 800acc8:	f001 fff0 	bl	800ccac <__lshift>
 800accc:	4631      	mov	r1, r6
 800acce:	4605      	mov	r5, r0
 800acd0:	f002 f858 	bl	800cd84 <__mcmp>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dd6a      	ble.n	800adae <_strtod_l+0x8e6>
 800acd8:	9904      	ldr	r1, [sp, #16]
 800acda:	4a55      	ldr	r2, [pc, #340]	; (800ae30 <_strtod_l+0x968>)
 800acdc:	465b      	mov	r3, fp
 800acde:	2900      	cmp	r1, #0
 800ace0:	f000 8085 	beq.w	800adee <_strtod_l+0x926>
 800ace4:	ea02 010b 	and.w	r1, r2, fp
 800ace8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800acec:	dc7f      	bgt.n	800adee <_strtod_l+0x926>
 800acee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800acf2:	f77f aeaa 	ble.w	800aa4a <_strtod_l+0x582>
 800acf6:	4a4f      	ldr	r2, [pc, #316]	; (800ae34 <_strtod_l+0x96c>)
 800acf8:	2300      	movs	r3, #0
 800acfa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800acfe:	4650      	mov	r0, sl
 800ad00:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ad04:	4659      	mov	r1, fp
 800ad06:	f7f5 fc7f 	bl	8000608 <__aeabi_dmul>
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4303      	orrs	r3, r0
 800ad0e:	bf08      	it	eq
 800ad10:	2322      	moveq	r3, #34	; 0x22
 800ad12:	4682      	mov	sl, r0
 800ad14:	468b      	mov	fp, r1
 800ad16:	bf08      	it	eq
 800ad18:	6023      	streq	r3, [r4, #0]
 800ad1a:	e62b      	b.n	800a974 <_strtod_l+0x4ac>
 800ad1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad20:	fa02 f303 	lsl.w	r3, r2, r3
 800ad24:	ea03 0a0a 	and.w	sl, r3, sl
 800ad28:	e6de      	b.n	800aae8 <_strtod_l+0x620>
 800ad2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ad2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ad32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ad36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ad3a:	fa01 f308 	lsl.w	r3, r1, r8
 800ad3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad40:	9111      	str	r1, [sp, #68]	; 0x44
 800ad42:	e741      	b.n	800abc8 <_strtod_l+0x700>
 800ad44:	2300      	movs	r3, #0
 800ad46:	930c      	str	r3, [sp, #48]	; 0x30
 800ad48:	2301      	movs	r3, #1
 800ad4a:	9311      	str	r3, [sp, #68]	; 0x44
 800ad4c:	e73c      	b.n	800abc8 <_strtod_l+0x700>
 800ad4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ad50:	4642      	mov	r2, r8
 800ad52:	4620      	mov	r0, r4
 800ad54:	f001 ffaa 	bl	800ccac <__lshift>
 800ad58:	901e      	str	r0, [sp, #120]	; 0x78
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f47f af66 	bne.w	800ac2c <_strtod_l+0x764>
 800ad60:	e5fe      	b.n	800a960 <_strtod_l+0x498>
 800ad62:	465f      	mov	r7, fp
 800ad64:	d16e      	bne.n	800ae44 <_strtod_l+0x97c>
 800ad66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad6c:	b342      	cbz	r2, 800adc0 <_strtod_l+0x8f8>
 800ad6e:	4a32      	ldr	r2, [pc, #200]	; (800ae38 <_strtod_l+0x970>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d128      	bne.n	800adc6 <_strtod_l+0x8fe>
 800ad74:	9b04      	ldr	r3, [sp, #16]
 800ad76:	4650      	mov	r0, sl
 800ad78:	b1eb      	cbz	r3, 800adb6 <_strtod_l+0x8ee>
 800ad7a:	4a2d      	ldr	r2, [pc, #180]	; (800ae30 <_strtod_l+0x968>)
 800ad7c:	403a      	ands	r2, r7
 800ad7e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ad82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ad86:	d819      	bhi.n	800adbc <_strtod_l+0x8f4>
 800ad88:	0d12      	lsrs	r2, r2, #20
 800ad8a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad92:	4298      	cmp	r0, r3
 800ad94:	d117      	bne.n	800adc6 <_strtod_l+0x8fe>
 800ad96:	4b29      	ldr	r3, [pc, #164]	; (800ae3c <_strtod_l+0x974>)
 800ad98:	429f      	cmp	r7, r3
 800ad9a:	d102      	bne.n	800ada2 <_strtod_l+0x8da>
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	f43f addf 	beq.w	800a960 <_strtod_l+0x498>
 800ada2:	4b23      	ldr	r3, [pc, #140]	; (800ae30 <_strtod_l+0x968>)
 800ada4:	403b      	ands	r3, r7
 800ada6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800adaa:	f04f 0a00 	mov.w	sl, #0
 800adae:	9b04      	ldr	r3, [sp, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1a0      	bne.n	800acf6 <_strtod_l+0x82e>
 800adb4:	e5de      	b.n	800a974 <_strtod_l+0x4ac>
 800adb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adba:	e7ea      	b.n	800ad92 <_strtod_l+0x8ca>
 800adbc:	460b      	mov	r3, r1
 800adbe:	e7e8      	b.n	800ad92 <_strtod_l+0x8ca>
 800adc0:	ea53 030a 	orrs.w	r3, r3, sl
 800adc4:	d088      	beq.n	800acd8 <_strtod_l+0x810>
 800adc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adc8:	b1db      	cbz	r3, 800ae02 <_strtod_l+0x93a>
 800adca:	423b      	tst	r3, r7
 800adcc:	d0ef      	beq.n	800adae <_strtod_l+0x8e6>
 800adce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800add0:	9a04      	ldr	r2, [sp, #16]
 800add2:	4650      	mov	r0, sl
 800add4:	4659      	mov	r1, fp
 800add6:	b1c3      	cbz	r3, 800ae0a <_strtod_l+0x942>
 800add8:	f7ff fb59 	bl	800a48e <sulp>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ade4:	f7f5 fa5a 	bl	800029c <__adddf3>
 800ade8:	4682      	mov	sl, r0
 800adea:	468b      	mov	fp, r1
 800adec:	e7df      	b.n	800adae <_strtod_l+0x8e6>
 800adee:	4013      	ands	r3, r2
 800adf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800adf4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800adf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800adfc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ae00:	e7d5      	b.n	800adae <_strtod_l+0x8e6>
 800ae02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae04:	ea13 0f0a 	tst.w	r3, sl
 800ae08:	e7e0      	b.n	800adcc <_strtod_l+0x904>
 800ae0a:	f7ff fb40 	bl	800a48e <sulp>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae16:	f7f5 fa3f 	bl	8000298 <__aeabi_dsub>
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4682      	mov	sl, r0
 800ae20:	468b      	mov	fp, r1
 800ae22:	f7f5 fe59 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d0c1      	beq.n	800adae <_strtod_l+0x8e6>
 800ae2a:	e60e      	b.n	800aa4a <_strtod_l+0x582>
 800ae2c:	fffffc02 	.word	0xfffffc02
 800ae30:	7ff00000 	.word	0x7ff00000
 800ae34:	39500000 	.word	0x39500000
 800ae38:	000fffff 	.word	0x000fffff
 800ae3c:	7fefffff 	.word	0x7fefffff
 800ae40:	0800e730 	.word	0x0800e730
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	f002 f918 	bl	800d07c <__ratio>
 800ae4c:	ec59 8b10 	vmov	r8, r9, d0
 800ae50:	ee10 0a10 	vmov	r0, s0
 800ae54:	2200      	movs	r2, #0
 800ae56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	f7f5 fe50 	bl	8000b00 <__aeabi_dcmple>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d07c      	beq.n	800af5e <_strtod_l+0xa96>
 800ae64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d04c      	beq.n	800af04 <_strtod_l+0xa3c>
 800ae6a:	4b95      	ldr	r3, [pc, #596]	; (800b0c0 <_strtod_l+0xbf8>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ae72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b0c0 <_strtod_l+0xbf8>
 800ae76:	f04f 0800 	mov.w	r8, #0
 800ae7a:	4b92      	ldr	r3, [pc, #584]	; (800b0c4 <_strtod_l+0xbfc>)
 800ae7c:	403b      	ands	r3, r7
 800ae7e:	9311      	str	r3, [sp, #68]	; 0x44
 800ae80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ae82:	4b91      	ldr	r3, [pc, #580]	; (800b0c8 <_strtod_l+0xc00>)
 800ae84:	429a      	cmp	r2, r3
 800ae86:	f040 80b2 	bne.w	800afee <_strtod_l+0xb26>
 800ae8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae92:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ae96:	ec4b ab10 	vmov	d0, sl, fp
 800ae9a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ae9e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aea2:	f002 f813 	bl	800cecc <__ulp>
 800aea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aeaa:	ec53 2b10 	vmov	r2, r3, d0
 800aeae:	f7f5 fbab 	bl	8000608 <__aeabi_dmul>
 800aeb2:	4652      	mov	r2, sl
 800aeb4:	465b      	mov	r3, fp
 800aeb6:	f7f5 f9f1 	bl	800029c <__adddf3>
 800aeba:	460b      	mov	r3, r1
 800aebc:	4981      	ldr	r1, [pc, #516]	; (800b0c4 <_strtod_l+0xbfc>)
 800aebe:	4a83      	ldr	r2, [pc, #524]	; (800b0cc <_strtod_l+0xc04>)
 800aec0:	4019      	ands	r1, r3
 800aec2:	4291      	cmp	r1, r2
 800aec4:	4682      	mov	sl, r0
 800aec6:	d95e      	bls.n	800af86 <_strtod_l+0xabe>
 800aec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aece:	4293      	cmp	r3, r2
 800aed0:	d103      	bne.n	800aeda <_strtod_l+0xa12>
 800aed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed4:	3301      	adds	r3, #1
 800aed6:	f43f ad43 	beq.w	800a960 <_strtod_l+0x498>
 800aeda:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b0d8 <_strtod_l+0xc10>
 800aede:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800aee2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aee4:	4620      	mov	r0, r4
 800aee6:	f001 fcc5 	bl	800c874 <_Bfree>
 800aeea:	9907      	ldr	r1, [sp, #28]
 800aeec:	4620      	mov	r0, r4
 800aeee:	f001 fcc1 	bl	800c874 <_Bfree>
 800aef2:	4631      	mov	r1, r6
 800aef4:	4620      	mov	r0, r4
 800aef6:	f001 fcbd 	bl	800c874 <_Bfree>
 800aefa:	4629      	mov	r1, r5
 800aefc:	4620      	mov	r0, r4
 800aefe:	f001 fcb9 	bl	800c874 <_Bfree>
 800af02:	e613      	b.n	800ab2c <_strtod_l+0x664>
 800af04:	f1ba 0f00 	cmp.w	sl, #0
 800af08:	d11b      	bne.n	800af42 <_strtod_l+0xa7a>
 800af0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af0e:	b9f3      	cbnz	r3, 800af4e <_strtod_l+0xa86>
 800af10:	4b6b      	ldr	r3, [pc, #428]	; (800b0c0 <_strtod_l+0xbf8>)
 800af12:	2200      	movs	r2, #0
 800af14:	4640      	mov	r0, r8
 800af16:	4649      	mov	r1, r9
 800af18:	f7f5 fde8 	bl	8000aec <__aeabi_dcmplt>
 800af1c:	b9d0      	cbnz	r0, 800af54 <_strtod_l+0xa8c>
 800af1e:	4640      	mov	r0, r8
 800af20:	4649      	mov	r1, r9
 800af22:	4b6b      	ldr	r3, [pc, #428]	; (800b0d0 <_strtod_l+0xc08>)
 800af24:	2200      	movs	r2, #0
 800af26:	f7f5 fb6f 	bl	8000608 <__aeabi_dmul>
 800af2a:	4680      	mov	r8, r0
 800af2c:	4689      	mov	r9, r1
 800af2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af32:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800af36:	931b      	str	r3, [sp, #108]	; 0x6c
 800af38:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800af3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800af40:	e79b      	b.n	800ae7a <_strtod_l+0x9b2>
 800af42:	f1ba 0f01 	cmp.w	sl, #1
 800af46:	d102      	bne.n	800af4e <_strtod_l+0xa86>
 800af48:	2f00      	cmp	r7, #0
 800af4a:	f43f ad7e 	beq.w	800aa4a <_strtod_l+0x582>
 800af4e:	4b61      	ldr	r3, [pc, #388]	; (800b0d4 <_strtod_l+0xc0c>)
 800af50:	2200      	movs	r2, #0
 800af52:	e78c      	b.n	800ae6e <_strtod_l+0x9a6>
 800af54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b0d0 <_strtod_l+0xc08>
 800af58:	f04f 0800 	mov.w	r8, #0
 800af5c:	e7e7      	b.n	800af2e <_strtod_l+0xa66>
 800af5e:	4b5c      	ldr	r3, [pc, #368]	; (800b0d0 <_strtod_l+0xc08>)
 800af60:	4640      	mov	r0, r8
 800af62:	4649      	mov	r1, r9
 800af64:	2200      	movs	r2, #0
 800af66:	f7f5 fb4f 	bl	8000608 <__aeabi_dmul>
 800af6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af6c:	4680      	mov	r8, r0
 800af6e:	4689      	mov	r9, r1
 800af70:	b933      	cbnz	r3, 800af80 <_strtod_l+0xab8>
 800af72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af76:	9012      	str	r0, [sp, #72]	; 0x48
 800af78:	9313      	str	r3, [sp, #76]	; 0x4c
 800af7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800af7e:	e7dd      	b.n	800af3c <_strtod_l+0xa74>
 800af80:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800af84:	e7f9      	b.n	800af7a <_strtod_l+0xab2>
 800af86:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800af8a:	9b04      	ldr	r3, [sp, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1a8      	bne.n	800aee2 <_strtod_l+0xa1a>
 800af90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af96:	0d1b      	lsrs	r3, r3, #20
 800af98:	051b      	lsls	r3, r3, #20
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d1a1      	bne.n	800aee2 <_strtod_l+0xa1a>
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	f7f5 fe79 	bl	8000c98 <__aeabi_d2lz>
 800afa6:	f7f5 fb01 	bl	80005ac <__aeabi_l2d>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4640      	mov	r0, r8
 800afb0:	4649      	mov	r1, r9
 800afb2:	f7f5 f971 	bl	8000298 <__aeabi_dsub>
 800afb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afbc:	ea43 030a 	orr.w	r3, r3, sl
 800afc0:	4313      	orrs	r3, r2
 800afc2:	4680      	mov	r8, r0
 800afc4:	4689      	mov	r9, r1
 800afc6:	d053      	beq.n	800b070 <_strtod_l+0xba8>
 800afc8:	a335      	add	r3, pc, #212	; (adr r3, 800b0a0 <_strtod_l+0xbd8>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 fd8d 	bl	8000aec <__aeabi_dcmplt>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f47f acce 	bne.w	800a974 <_strtod_l+0x4ac>
 800afd8:	a333      	add	r3, pc, #204	; (adr r3, 800b0a8 <_strtod_l+0xbe0>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	4640      	mov	r0, r8
 800afe0:	4649      	mov	r1, r9
 800afe2:	f7f5 fda1 	bl	8000b28 <__aeabi_dcmpgt>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f af7b 	beq.w	800aee2 <_strtod_l+0xa1a>
 800afec:	e4c2      	b.n	800a974 <_strtod_l+0x4ac>
 800afee:	9b04      	ldr	r3, [sp, #16]
 800aff0:	b333      	cbz	r3, 800b040 <_strtod_l+0xb78>
 800aff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aff4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aff8:	d822      	bhi.n	800b040 <_strtod_l+0xb78>
 800affa:	a32d      	add	r3, pc, #180	; (adr r3, 800b0b0 <_strtod_l+0xbe8>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 fd7c 	bl	8000b00 <__aeabi_dcmple>
 800b008:	b1a0      	cbz	r0, 800b034 <_strtod_l+0xb6c>
 800b00a:	4649      	mov	r1, r9
 800b00c:	4640      	mov	r0, r8
 800b00e:	f7f5 fdd3 	bl	8000bb8 <__aeabi_d2uiz>
 800b012:	2801      	cmp	r0, #1
 800b014:	bf38      	it	cc
 800b016:	2001      	movcc	r0, #1
 800b018:	f7f5 fa7c 	bl	8000514 <__aeabi_ui2d>
 800b01c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b01e:	4680      	mov	r8, r0
 800b020:	4689      	mov	r9, r1
 800b022:	bb13      	cbnz	r3, 800b06a <_strtod_l+0xba2>
 800b024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b028:	9014      	str	r0, [sp, #80]	; 0x50
 800b02a:	9315      	str	r3, [sp, #84]	; 0x54
 800b02c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b030:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b036:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b038:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b03c:	1a9b      	subs	r3, r3, r2
 800b03e:	930d      	str	r3, [sp, #52]	; 0x34
 800b040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b044:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b048:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b04c:	f001 ff3e 	bl	800cecc <__ulp>
 800b050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b054:	ec53 2b10 	vmov	r2, r3, d0
 800b058:	f7f5 fad6 	bl	8000608 <__aeabi_dmul>
 800b05c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b060:	f7f5 f91c 	bl	800029c <__adddf3>
 800b064:	4682      	mov	sl, r0
 800b066:	468b      	mov	fp, r1
 800b068:	e78f      	b.n	800af8a <_strtod_l+0xac2>
 800b06a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b06e:	e7dd      	b.n	800b02c <_strtod_l+0xb64>
 800b070:	a311      	add	r3, pc, #68	; (adr r3, 800b0b8 <_strtod_l+0xbf0>)
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f7f5 fd39 	bl	8000aec <__aeabi_dcmplt>
 800b07a:	e7b4      	b.n	800afe6 <_strtod_l+0xb1e>
 800b07c:	2300      	movs	r3, #0
 800b07e:	930e      	str	r3, [sp, #56]	; 0x38
 800b080:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b082:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	f7ff ba65 	b.w	800a554 <_strtod_l+0x8c>
 800b08a:	2b65      	cmp	r3, #101	; 0x65
 800b08c:	f43f ab5d 	beq.w	800a74a <_strtod_l+0x282>
 800b090:	2b45      	cmp	r3, #69	; 0x45
 800b092:	f43f ab5a 	beq.w	800a74a <_strtod_l+0x282>
 800b096:	2201      	movs	r2, #1
 800b098:	f7ff bb92 	b.w	800a7c0 <_strtod_l+0x2f8>
 800b09c:	f3af 8000 	nop.w
 800b0a0:	94a03595 	.word	0x94a03595
 800b0a4:	3fdfffff 	.word	0x3fdfffff
 800b0a8:	35afe535 	.word	0x35afe535
 800b0ac:	3fe00000 	.word	0x3fe00000
 800b0b0:	ffc00000 	.word	0xffc00000
 800b0b4:	41dfffff 	.word	0x41dfffff
 800b0b8:	94a03595 	.word	0x94a03595
 800b0bc:	3fcfffff 	.word	0x3fcfffff
 800b0c0:	3ff00000 	.word	0x3ff00000
 800b0c4:	7ff00000 	.word	0x7ff00000
 800b0c8:	7fe00000 	.word	0x7fe00000
 800b0cc:	7c9fffff 	.word	0x7c9fffff
 800b0d0:	3fe00000 	.word	0x3fe00000
 800b0d4:	bff00000 	.word	0xbff00000
 800b0d8:	7fefffff 	.word	0x7fefffff

0800b0dc <_strtod_r>:
 800b0dc:	4b01      	ldr	r3, [pc, #4]	; (800b0e4 <_strtod_r+0x8>)
 800b0de:	f7ff b9f3 	b.w	800a4c8 <_strtod_l>
 800b0e2:	bf00      	nop
 800b0e4:	20000078 	.word	0x20000078

0800b0e8 <_strtol_l.isra.0>:
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ee:	d001      	beq.n	800b0f4 <_strtol_l.isra.0+0xc>
 800b0f0:	2b24      	cmp	r3, #36	; 0x24
 800b0f2:	d906      	bls.n	800b102 <_strtol_l.isra.0+0x1a>
 800b0f4:	f7fe f842 	bl	800917c <__errno>
 800b0f8:	2316      	movs	r3, #22
 800b0fa:	6003      	str	r3, [r0, #0]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b102:	4f3a      	ldr	r7, [pc, #232]	; (800b1ec <_strtol_l.isra.0+0x104>)
 800b104:	468e      	mov	lr, r1
 800b106:	4676      	mov	r6, lr
 800b108:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b10c:	5de5      	ldrb	r5, [r4, r7]
 800b10e:	f015 0508 	ands.w	r5, r5, #8
 800b112:	d1f8      	bne.n	800b106 <_strtol_l.isra.0+0x1e>
 800b114:	2c2d      	cmp	r4, #45	; 0x2d
 800b116:	d134      	bne.n	800b182 <_strtol_l.isra.0+0x9a>
 800b118:	f89e 4000 	ldrb.w	r4, [lr]
 800b11c:	f04f 0801 	mov.w	r8, #1
 800b120:	f106 0e02 	add.w	lr, r6, #2
 800b124:	2b00      	cmp	r3, #0
 800b126:	d05c      	beq.n	800b1e2 <_strtol_l.isra.0+0xfa>
 800b128:	2b10      	cmp	r3, #16
 800b12a:	d10c      	bne.n	800b146 <_strtol_l.isra.0+0x5e>
 800b12c:	2c30      	cmp	r4, #48	; 0x30
 800b12e:	d10a      	bne.n	800b146 <_strtol_l.isra.0+0x5e>
 800b130:	f89e 4000 	ldrb.w	r4, [lr]
 800b134:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b138:	2c58      	cmp	r4, #88	; 0x58
 800b13a:	d14d      	bne.n	800b1d8 <_strtol_l.isra.0+0xf0>
 800b13c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b140:	2310      	movs	r3, #16
 800b142:	f10e 0e02 	add.w	lr, lr, #2
 800b146:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b14a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b14e:	2600      	movs	r6, #0
 800b150:	fbbc f9f3 	udiv	r9, ip, r3
 800b154:	4635      	mov	r5, r6
 800b156:	fb03 ca19 	mls	sl, r3, r9, ip
 800b15a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b15e:	2f09      	cmp	r7, #9
 800b160:	d818      	bhi.n	800b194 <_strtol_l.isra.0+0xac>
 800b162:	463c      	mov	r4, r7
 800b164:	42a3      	cmp	r3, r4
 800b166:	dd24      	ble.n	800b1b2 <_strtol_l.isra.0+0xca>
 800b168:	2e00      	cmp	r6, #0
 800b16a:	db1f      	blt.n	800b1ac <_strtol_l.isra.0+0xc4>
 800b16c:	45a9      	cmp	r9, r5
 800b16e:	d31d      	bcc.n	800b1ac <_strtol_l.isra.0+0xc4>
 800b170:	d101      	bne.n	800b176 <_strtol_l.isra.0+0x8e>
 800b172:	45a2      	cmp	sl, r4
 800b174:	db1a      	blt.n	800b1ac <_strtol_l.isra.0+0xc4>
 800b176:	fb05 4503 	mla	r5, r5, r3, r4
 800b17a:	2601      	movs	r6, #1
 800b17c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b180:	e7eb      	b.n	800b15a <_strtol_l.isra.0+0x72>
 800b182:	2c2b      	cmp	r4, #43	; 0x2b
 800b184:	bf08      	it	eq
 800b186:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b18a:	46a8      	mov	r8, r5
 800b18c:	bf08      	it	eq
 800b18e:	f106 0e02 	addeq.w	lr, r6, #2
 800b192:	e7c7      	b.n	800b124 <_strtol_l.isra.0+0x3c>
 800b194:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b198:	2f19      	cmp	r7, #25
 800b19a:	d801      	bhi.n	800b1a0 <_strtol_l.isra.0+0xb8>
 800b19c:	3c37      	subs	r4, #55	; 0x37
 800b19e:	e7e1      	b.n	800b164 <_strtol_l.isra.0+0x7c>
 800b1a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b1a4:	2f19      	cmp	r7, #25
 800b1a6:	d804      	bhi.n	800b1b2 <_strtol_l.isra.0+0xca>
 800b1a8:	3c57      	subs	r4, #87	; 0x57
 800b1aa:	e7db      	b.n	800b164 <_strtol_l.isra.0+0x7c>
 800b1ac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b1b0:	e7e4      	b.n	800b17c <_strtol_l.isra.0+0x94>
 800b1b2:	2e00      	cmp	r6, #0
 800b1b4:	da05      	bge.n	800b1c2 <_strtol_l.isra.0+0xda>
 800b1b6:	2322      	movs	r3, #34	; 0x22
 800b1b8:	6003      	str	r3, [r0, #0]
 800b1ba:	4665      	mov	r5, ip
 800b1bc:	b942      	cbnz	r2, 800b1d0 <_strtol_l.isra.0+0xe8>
 800b1be:	4628      	mov	r0, r5
 800b1c0:	e79d      	b.n	800b0fe <_strtol_l.isra.0+0x16>
 800b1c2:	f1b8 0f00 	cmp.w	r8, #0
 800b1c6:	d000      	beq.n	800b1ca <_strtol_l.isra.0+0xe2>
 800b1c8:	426d      	negs	r5, r5
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	d0f7      	beq.n	800b1be <_strtol_l.isra.0+0xd6>
 800b1ce:	b10e      	cbz	r6, 800b1d4 <_strtol_l.isra.0+0xec>
 800b1d0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800b1d4:	6011      	str	r1, [r2, #0]
 800b1d6:	e7f2      	b.n	800b1be <_strtol_l.isra.0+0xd6>
 800b1d8:	2430      	movs	r4, #48	; 0x30
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1b3      	bne.n	800b146 <_strtol_l.isra.0+0x5e>
 800b1de:	2308      	movs	r3, #8
 800b1e0:	e7b1      	b.n	800b146 <_strtol_l.isra.0+0x5e>
 800b1e2:	2c30      	cmp	r4, #48	; 0x30
 800b1e4:	d0a4      	beq.n	800b130 <_strtol_l.isra.0+0x48>
 800b1e6:	230a      	movs	r3, #10
 800b1e8:	e7ad      	b.n	800b146 <_strtol_l.isra.0+0x5e>
 800b1ea:	bf00      	nop
 800b1ec:	0800e759 	.word	0x0800e759

0800b1f0 <_strtol_r>:
 800b1f0:	f7ff bf7a 	b.w	800b0e8 <_strtol_l.isra.0>

0800b1f4 <_write_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4d07      	ldr	r5, [pc, #28]	; (800b214 <_write_r+0x20>)
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	2200      	movs	r2, #0
 800b200:	602a      	str	r2, [r5, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	f7f7 fd8f 	bl	8002d26 <_write>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_write_r+0x1e>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_write_r+0x1e>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	20006064 	.word	0x20006064

0800b218 <_close_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d06      	ldr	r5, [pc, #24]	; (800b234 <_close_r+0x1c>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	4608      	mov	r0, r1
 800b222:	602b      	str	r3, [r5, #0]
 800b224:	f7f7 fd9b 	bl	8002d5e <_close>
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d102      	bne.n	800b232 <_close_r+0x1a>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b103      	cbz	r3, 800b232 <_close_r+0x1a>
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	20006064 	.word	0x20006064

0800b238 <quorem>:
 800b238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	6903      	ldr	r3, [r0, #16]
 800b23e:	690c      	ldr	r4, [r1, #16]
 800b240:	42a3      	cmp	r3, r4
 800b242:	4607      	mov	r7, r0
 800b244:	f2c0 8081 	blt.w	800b34a <quorem+0x112>
 800b248:	3c01      	subs	r4, #1
 800b24a:	f101 0814 	add.w	r8, r1, #20
 800b24e:	f100 0514 	add.w	r5, r0, #20
 800b252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b25c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b260:	3301      	adds	r3, #1
 800b262:	429a      	cmp	r2, r3
 800b264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b26c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b270:	d331      	bcc.n	800b2d6 <quorem+0x9e>
 800b272:	f04f 0e00 	mov.w	lr, #0
 800b276:	4640      	mov	r0, r8
 800b278:	46ac      	mov	ip, r5
 800b27a:	46f2      	mov	sl, lr
 800b27c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b280:	b293      	uxth	r3, r2
 800b282:	fb06 e303 	mla	r3, r6, r3, lr
 800b286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	ebaa 0303 	sub.w	r3, sl, r3
 800b290:	0c12      	lsrs	r2, r2, #16
 800b292:	f8dc a000 	ldr.w	sl, [ip]
 800b296:	fb06 e202 	mla	r2, r6, r2, lr
 800b29a:	fa13 f38a 	uxtah	r3, r3, sl
 800b29e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2a2:	fa1f fa82 	uxth.w	sl, r2
 800b2a6:	f8dc 2000 	ldr.w	r2, [ip]
 800b2aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b2ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2b8:	4581      	cmp	r9, r0
 800b2ba:	f84c 3b04 	str.w	r3, [ip], #4
 800b2be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b2c2:	d2db      	bcs.n	800b27c <quorem+0x44>
 800b2c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b2c8:	b92b      	cbnz	r3, 800b2d6 <quorem+0x9e>
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	3b04      	subs	r3, #4
 800b2ce:	429d      	cmp	r5, r3
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	d32e      	bcc.n	800b332 <quorem+0xfa>
 800b2d4:	613c      	str	r4, [r7, #16]
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f001 fd54 	bl	800cd84 <__mcmp>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	db24      	blt.n	800b32a <quorem+0xf2>
 800b2e0:	3601      	adds	r6, #1
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f04f 0c00 	mov.w	ip, #0
 800b2e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2ec:	f8d0 e000 	ldr.w	lr, [r0]
 800b2f0:	b293      	uxth	r3, r2
 800b2f2:	ebac 0303 	sub.w	r3, ip, r3
 800b2f6:	0c12      	lsrs	r2, r2, #16
 800b2f8:	fa13 f38e 	uxtah	r3, r3, lr
 800b2fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b304:	b29b      	uxth	r3, r3
 800b306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b30a:	45c1      	cmp	r9, r8
 800b30c:	f840 3b04 	str.w	r3, [r0], #4
 800b310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b314:	d2e8      	bcs.n	800b2e8 <quorem+0xb0>
 800b316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b31a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b31e:	b922      	cbnz	r2, 800b32a <quorem+0xf2>
 800b320:	3b04      	subs	r3, #4
 800b322:	429d      	cmp	r5, r3
 800b324:	461a      	mov	r2, r3
 800b326:	d30a      	bcc.n	800b33e <quorem+0x106>
 800b328:	613c      	str	r4, [r7, #16]
 800b32a:	4630      	mov	r0, r6
 800b32c:	b003      	add	sp, #12
 800b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	3b04      	subs	r3, #4
 800b336:	2a00      	cmp	r2, #0
 800b338:	d1cc      	bne.n	800b2d4 <quorem+0x9c>
 800b33a:	3c01      	subs	r4, #1
 800b33c:	e7c7      	b.n	800b2ce <quorem+0x96>
 800b33e:	6812      	ldr	r2, [r2, #0]
 800b340:	3b04      	subs	r3, #4
 800b342:	2a00      	cmp	r2, #0
 800b344:	d1f0      	bne.n	800b328 <quorem+0xf0>
 800b346:	3c01      	subs	r4, #1
 800b348:	e7eb      	b.n	800b322 <quorem+0xea>
 800b34a:	2000      	movs	r0, #0
 800b34c:	e7ee      	b.n	800b32c <quorem+0xf4>
	...

0800b350 <_dtoa_r>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	ed2d 8b02 	vpush	{d8}
 800b358:	ec57 6b10 	vmov	r6, r7, d0
 800b35c:	b095      	sub	sp, #84	; 0x54
 800b35e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b364:	9105      	str	r1, [sp, #20]
 800b366:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b36a:	4604      	mov	r4, r0
 800b36c:	9209      	str	r2, [sp, #36]	; 0x24
 800b36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b370:	b975      	cbnz	r5, 800b390 <_dtoa_r+0x40>
 800b372:	2010      	movs	r0, #16
 800b374:	f7fe f826 	bl	80093c4 <malloc>
 800b378:	4602      	mov	r2, r0
 800b37a:	6260      	str	r0, [r4, #36]	; 0x24
 800b37c:	b920      	cbnz	r0, 800b388 <_dtoa_r+0x38>
 800b37e:	4bb2      	ldr	r3, [pc, #712]	; (800b648 <_dtoa_r+0x2f8>)
 800b380:	21ea      	movs	r1, #234	; 0xea
 800b382:	48b2      	ldr	r0, [pc, #712]	; (800b64c <_dtoa_r+0x2fc>)
 800b384:	f002 fc94 	bl	800dcb0 <__assert_func>
 800b388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b38c:	6005      	str	r5, [r0, #0]
 800b38e:	60c5      	str	r5, [r0, #12]
 800b390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	b151      	cbz	r1, 800b3ac <_dtoa_r+0x5c>
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	604a      	str	r2, [r1, #4]
 800b39a:	2301      	movs	r3, #1
 800b39c:	4093      	lsls	r3, r2
 800b39e:	608b      	str	r3, [r1, #8]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f001 fa67 	bl	800c874 <_Bfree>
 800b3a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	1e3b      	subs	r3, r7, #0
 800b3ae:	bfb9      	ittee	lt
 800b3b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b3b4:	9303      	strlt	r3, [sp, #12]
 800b3b6:	2300      	movge	r3, #0
 800b3b8:	f8c8 3000 	strge.w	r3, [r8]
 800b3bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b3c0:	4ba3      	ldr	r3, [pc, #652]	; (800b650 <_dtoa_r+0x300>)
 800b3c2:	bfbc      	itt	lt
 800b3c4:	2201      	movlt	r2, #1
 800b3c6:	f8c8 2000 	strlt.w	r2, [r8]
 800b3ca:	ea33 0309 	bics.w	r3, r3, r9
 800b3ce:	d11b      	bne.n	800b408 <_dtoa_r+0xb8>
 800b3d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3dc:	4333      	orrs	r3, r6
 800b3de:	f000 857a 	beq.w	800bed6 <_dtoa_r+0xb86>
 800b3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3e4:	b963      	cbnz	r3, 800b400 <_dtoa_r+0xb0>
 800b3e6:	4b9b      	ldr	r3, [pc, #620]	; (800b654 <_dtoa_r+0x304>)
 800b3e8:	e024      	b.n	800b434 <_dtoa_r+0xe4>
 800b3ea:	4b9b      	ldr	r3, [pc, #620]	; (800b658 <_dtoa_r+0x308>)
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	9800      	ldr	r0, [sp, #0]
 800b3f6:	b015      	add	sp, #84	; 0x54
 800b3f8:	ecbd 8b02 	vpop	{d8}
 800b3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b400:	4b94      	ldr	r3, [pc, #592]	; (800b654 <_dtoa_r+0x304>)
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	3303      	adds	r3, #3
 800b406:	e7f3      	b.n	800b3f0 <_dtoa_r+0xa0>
 800b408:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b40c:	2200      	movs	r2, #0
 800b40e:	ec51 0b17 	vmov	r0, r1, d7
 800b412:	2300      	movs	r3, #0
 800b414:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b418:	f7f5 fb5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b41c:	4680      	mov	r8, r0
 800b41e:	b158      	cbz	r0, 800b438 <_dtoa_r+0xe8>
 800b420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b422:	2301      	movs	r3, #1
 800b424:	6013      	str	r3, [r2, #0]
 800b426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 8551 	beq.w	800bed0 <_dtoa_r+0xb80>
 800b42e:	488b      	ldr	r0, [pc, #556]	; (800b65c <_dtoa_r+0x30c>)
 800b430:	6018      	str	r0, [r3, #0]
 800b432:	1e43      	subs	r3, r0, #1
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	e7dd      	b.n	800b3f4 <_dtoa_r+0xa4>
 800b438:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b43c:	aa12      	add	r2, sp, #72	; 0x48
 800b43e:	a913      	add	r1, sp, #76	; 0x4c
 800b440:	4620      	mov	r0, r4
 800b442:	f001 fdbf 	bl	800cfc4 <__d2b>
 800b446:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b44a:	4683      	mov	fp, r0
 800b44c:	2d00      	cmp	r5, #0
 800b44e:	d07c      	beq.n	800b54a <_dtoa_r+0x1fa>
 800b450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b452:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b45a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b45e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b462:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b46a:	4b7d      	ldr	r3, [pc, #500]	; (800b660 <_dtoa_r+0x310>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f4 ff11 	bl	8000298 <__aeabi_dsub>
 800b476:	a36e      	add	r3, pc, #440	; (adr r3, 800b630 <_dtoa_r+0x2e0>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	f7f5 f8c4 	bl	8000608 <__aeabi_dmul>
 800b480:	a36d      	add	r3, pc, #436	; (adr r3, 800b638 <_dtoa_r+0x2e8>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7f4 ff09 	bl	800029c <__adddf3>
 800b48a:	4606      	mov	r6, r0
 800b48c:	4628      	mov	r0, r5
 800b48e:	460f      	mov	r7, r1
 800b490:	f7f5 f850 	bl	8000534 <__aeabi_i2d>
 800b494:	a36a      	add	r3, pc, #424	; (adr r3, 800b640 <_dtoa_r+0x2f0>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f5 f8b5 	bl	8000608 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	f7f4 fef9 	bl	800029c <__adddf3>
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	460f      	mov	r7, r1
 800b4ae:	f7f5 fb5b 	bl	8000b68 <__aeabi_d2iz>
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f5 fb16 	bl	8000aec <__aeabi_dcmplt>
 800b4c0:	b148      	cbz	r0, 800b4d6 <_dtoa_r+0x186>
 800b4c2:	4650      	mov	r0, sl
 800b4c4:	f7f5 f836 	bl	8000534 <__aeabi_i2d>
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	463b      	mov	r3, r7
 800b4cc:	f7f5 fb04 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4d0:	b908      	cbnz	r0, 800b4d6 <_dtoa_r+0x186>
 800b4d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b4d6:	f1ba 0f16 	cmp.w	sl, #22
 800b4da:	d854      	bhi.n	800b586 <_dtoa_r+0x236>
 800b4dc:	4b61      	ldr	r3, [pc, #388]	; (800b664 <_dtoa_r+0x314>)
 800b4de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4ea:	f7f5 faff 	bl	8000aec <__aeabi_dcmplt>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d04b      	beq.n	800b58a <_dtoa_r+0x23a>
 800b4f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	930e      	str	r3, [sp, #56]	; 0x38
 800b4fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4fc:	1b5d      	subs	r5, r3, r5
 800b4fe:	1e6b      	subs	r3, r5, #1
 800b500:	9304      	str	r3, [sp, #16]
 800b502:	bf43      	ittte	mi
 800b504:	2300      	movmi	r3, #0
 800b506:	f1c5 0801 	rsbmi	r8, r5, #1
 800b50a:	9304      	strmi	r3, [sp, #16]
 800b50c:	f04f 0800 	movpl.w	r8, #0
 800b510:	f1ba 0f00 	cmp.w	sl, #0
 800b514:	db3b      	blt.n	800b58e <_dtoa_r+0x23e>
 800b516:	9b04      	ldr	r3, [sp, #16]
 800b518:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b51c:	4453      	add	r3, sl
 800b51e:	9304      	str	r3, [sp, #16]
 800b520:	2300      	movs	r3, #0
 800b522:	9306      	str	r3, [sp, #24]
 800b524:	9b05      	ldr	r3, [sp, #20]
 800b526:	2b09      	cmp	r3, #9
 800b528:	d869      	bhi.n	800b5fe <_dtoa_r+0x2ae>
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	bfc4      	itt	gt
 800b52e:	3b04      	subgt	r3, #4
 800b530:	9305      	strgt	r3, [sp, #20]
 800b532:	9b05      	ldr	r3, [sp, #20]
 800b534:	f1a3 0302 	sub.w	r3, r3, #2
 800b538:	bfcc      	ite	gt
 800b53a:	2500      	movgt	r5, #0
 800b53c:	2501      	movle	r5, #1
 800b53e:	2b03      	cmp	r3, #3
 800b540:	d869      	bhi.n	800b616 <_dtoa_r+0x2c6>
 800b542:	e8df f003 	tbb	[pc, r3]
 800b546:	4e2c      	.short	0x4e2c
 800b548:	5a4c      	.short	0x5a4c
 800b54a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b54e:	441d      	add	r5, r3
 800b550:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b554:	2b20      	cmp	r3, #32
 800b556:	bfc1      	itttt	gt
 800b558:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b55c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b560:	fa09 f303 	lslgt.w	r3, r9, r3
 800b564:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b568:	bfda      	itte	le
 800b56a:	f1c3 0320 	rsble	r3, r3, #32
 800b56e:	fa06 f003 	lslle.w	r0, r6, r3
 800b572:	4318      	orrgt	r0, r3
 800b574:	f7f4 ffce 	bl	8000514 <__aeabi_ui2d>
 800b578:	2301      	movs	r3, #1
 800b57a:	4606      	mov	r6, r0
 800b57c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b580:	3d01      	subs	r5, #1
 800b582:	9310      	str	r3, [sp, #64]	; 0x40
 800b584:	e771      	b.n	800b46a <_dtoa_r+0x11a>
 800b586:	2301      	movs	r3, #1
 800b588:	e7b6      	b.n	800b4f8 <_dtoa_r+0x1a8>
 800b58a:	900e      	str	r0, [sp, #56]	; 0x38
 800b58c:	e7b5      	b.n	800b4fa <_dtoa_r+0x1aa>
 800b58e:	f1ca 0300 	rsb	r3, sl, #0
 800b592:	9306      	str	r3, [sp, #24]
 800b594:	2300      	movs	r3, #0
 800b596:	eba8 080a 	sub.w	r8, r8, sl
 800b59a:	930d      	str	r3, [sp, #52]	; 0x34
 800b59c:	e7c2      	b.n	800b524 <_dtoa_r+0x1d4>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	9308      	str	r3, [sp, #32]
 800b5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dc39      	bgt.n	800b61c <_dtoa_r+0x2cc>
 800b5a8:	f04f 0901 	mov.w	r9, #1
 800b5ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800b5b0:	464b      	mov	r3, r9
 800b5b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b5b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	6042      	str	r2, [r0, #4]
 800b5bc:	2204      	movs	r2, #4
 800b5be:	f102 0614 	add.w	r6, r2, #20
 800b5c2:	429e      	cmp	r6, r3
 800b5c4:	6841      	ldr	r1, [r0, #4]
 800b5c6:	d92f      	bls.n	800b628 <_dtoa_r+0x2d8>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f001 f913 	bl	800c7f4 <_Balloc>
 800b5ce:	9000      	str	r0, [sp, #0]
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d14b      	bne.n	800b66c <_dtoa_r+0x31c>
 800b5d4:	4b24      	ldr	r3, [pc, #144]	; (800b668 <_dtoa_r+0x318>)
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5dc:	e6d1      	b.n	800b382 <_dtoa_r+0x32>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e7de      	b.n	800b5a0 <_dtoa_r+0x250>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9308      	str	r3, [sp, #32]
 800b5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e8:	eb0a 0903 	add.w	r9, sl, r3
 800b5ec:	f109 0301 	add.w	r3, r9, #1
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	9301      	str	r3, [sp, #4]
 800b5f4:	bfb8      	it	lt
 800b5f6:	2301      	movlt	r3, #1
 800b5f8:	e7dd      	b.n	800b5b6 <_dtoa_r+0x266>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e7f2      	b.n	800b5e4 <_dtoa_r+0x294>
 800b5fe:	2501      	movs	r5, #1
 800b600:	2300      	movs	r3, #0
 800b602:	9305      	str	r3, [sp, #20]
 800b604:	9508      	str	r5, [sp, #32]
 800b606:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b610:	2312      	movs	r3, #18
 800b612:	9209      	str	r2, [sp, #36]	; 0x24
 800b614:	e7cf      	b.n	800b5b6 <_dtoa_r+0x266>
 800b616:	2301      	movs	r3, #1
 800b618:	9308      	str	r3, [sp, #32]
 800b61a:	e7f4      	b.n	800b606 <_dtoa_r+0x2b6>
 800b61c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b620:	f8cd 9004 	str.w	r9, [sp, #4]
 800b624:	464b      	mov	r3, r9
 800b626:	e7c6      	b.n	800b5b6 <_dtoa_r+0x266>
 800b628:	3101      	adds	r1, #1
 800b62a:	6041      	str	r1, [r0, #4]
 800b62c:	0052      	lsls	r2, r2, #1
 800b62e:	e7c6      	b.n	800b5be <_dtoa_r+0x26e>
 800b630:	636f4361 	.word	0x636f4361
 800b634:	3fd287a7 	.word	0x3fd287a7
 800b638:	8b60c8b3 	.word	0x8b60c8b3
 800b63c:	3fc68a28 	.word	0x3fc68a28
 800b640:	509f79fb 	.word	0x509f79fb
 800b644:	3fd34413 	.word	0x3fd34413
 800b648:	0800e866 	.word	0x0800e866
 800b64c:	0800e87d 	.word	0x0800e87d
 800b650:	7ff00000 	.word	0x7ff00000
 800b654:	0800e862 	.word	0x0800e862
 800b658:	0800e859 	.word	0x0800e859
 800b65c:	0800eae2 	.word	0x0800eae2
 800b660:	3ff80000 	.word	0x3ff80000
 800b664:	0800e9f8 	.word	0x0800e9f8
 800b668:	0800e8dc 	.word	0x0800e8dc
 800b66c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b66e:	9a00      	ldr	r2, [sp, #0]
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	9b01      	ldr	r3, [sp, #4]
 800b674:	2b0e      	cmp	r3, #14
 800b676:	f200 80ad 	bhi.w	800b7d4 <_dtoa_r+0x484>
 800b67a:	2d00      	cmp	r5, #0
 800b67c:	f000 80aa 	beq.w	800b7d4 <_dtoa_r+0x484>
 800b680:	f1ba 0f00 	cmp.w	sl, #0
 800b684:	dd36      	ble.n	800b6f4 <_dtoa_r+0x3a4>
 800b686:	4ac3      	ldr	r2, [pc, #780]	; (800b994 <_dtoa_r+0x644>)
 800b688:	f00a 030f 	and.w	r3, sl, #15
 800b68c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b690:	ed93 7b00 	vldr	d7, [r3]
 800b694:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b698:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b69c:	eeb0 8a47 	vmov.f32	s16, s14
 800b6a0:	eef0 8a67 	vmov.f32	s17, s15
 800b6a4:	d016      	beq.n	800b6d4 <_dtoa_r+0x384>
 800b6a6:	4bbc      	ldr	r3, [pc, #752]	; (800b998 <_dtoa_r+0x648>)
 800b6a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6b0:	f7f5 f8d4 	bl	800085c <__aeabi_ddiv>
 800b6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6b8:	f007 070f 	and.w	r7, r7, #15
 800b6bc:	2503      	movs	r5, #3
 800b6be:	4eb6      	ldr	r6, [pc, #728]	; (800b998 <_dtoa_r+0x648>)
 800b6c0:	b957      	cbnz	r7, 800b6d8 <_dtoa_r+0x388>
 800b6c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c6:	ec53 2b18 	vmov	r2, r3, d8
 800b6ca:	f7f5 f8c7 	bl	800085c <__aeabi_ddiv>
 800b6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d2:	e029      	b.n	800b728 <_dtoa_r+0x3d8>
 800b6d4:	2502      	movs	r5, #2
 800b6d6:	e7f2      	b.n	800b6be <_dtoa_r+0x36e>
 800b6d8:	07f9      	lsls	r1, r7, #31
 800b6da:	d508      	bpl.n	800b6ee <_dtoa_r+0x39e>
 800b6dc:	ec51 0b18 	vmov	r0, r1, d8
 800b6e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6e4:	f7f4 ff90 	bl	8000608 <__aeabi_dmul>
 800b6e8:	ec41 0b18 	vmov	d8, r0, r1
 800b6ec:	3501      	adds	r5, #1
 800b6ee:	107f      	asrs	r7, r7, #1
 800b6f0:	3608      	adds	r6, #8
 800b6f2:	e7e5      	b.n	800b6c0 <_dtoa_r+0x370>
 800b6f4:	f000 80a6 	beq.w	800b844 <_dtoa_r+0x4f4>
 800b6f8:	f1ca 0600 	rsb	r6, sl, #0
 800b6fc:	4ba5      	ldr	r3, [pc, #660]	; (800b994 <_dtoa_r+0x644>)
 800b6fe:	4fa6      	ldr	r7, [pc, #664]	; (800b998 <_dtoa_r+0x648>)
 800b700:	f006 020f 	and.w	r2, r6, #15
 800b704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b710:	f7f4 ff7a 	bl	8000608 <__aeabi_dmul>
 800b714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b718:	1136      	asrs	r6, r6, #4
 800b71a:	2300      	movs	r3, #0
 800b71c:	2502      	movs	r5, #2
 800b71e:	2e00      	cmp	r6, #0
 800b720:	f040 8085 	bne.w	800b82e <_dtoa_r+0x4de>
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1d2      	bne.n	800b6ce <_dtoa_r+0x37e>
 800b728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 808c 	beq.w	800b848 <_dtoa_r+0x4f8>
 800b730:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b734:	4b99      	ldr	r3, [pc, #612]	; (800b99c <_dtoa_r+0x64c>)
 800b736:	2200      	movs	r2, #0
 800b738:	4630      	mov	r0, r6
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f5 f9d6 	bl	8000aec <__aeabi_dcmplt>
 800b740:	2800      	cmp	r0, #0
 800b742:	f000 8081 	beq.w	800b848 <_dtoa_r+0x4f8>
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d07d      	beq.n	800b848 <_dtoa_r+0x4f8>
 800b74c:	f1b9 0f00 	cmp.w	r9, #0
 800b750:	dd3c      	ble.n	800b7cc <_dtoa_r+0x47c>
 800b752:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b756:	9307      	str	r3, [sp, #28]
 800b758:	2200      	movs	r2, #0
 800b75a:	4b91      	ldr	r3, [pc, #580]	; (800b9a0 <_dtoa_r+0x650>)
 800b75c:	4630      	mov	r0, r6
 800b75e:	4639      	mov	r1, r7
 800b760:	f7f4 ff52 	bl	8000608 <__aeabi_dmul>
 800b764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b768:	3501      	adds	r5, #1
 800b76a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b76e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b772:	4628      	mov	r0, r5
 800b774:	f7f4 fede 	bl	8000534 <__aeabi_i2d>
 800b778:	4632      	mov	r2, r6
 800b77a:	463b      	mov	r3, r7
 800b77c:	f7f4 ff44 	bl	8000608 <__aeabi_dmul>
 800b780:	4b88      	ldr	r3, [pc, #544]	; (800b9a4 <_dtoa_r+0x654>)
 800b782:	2200      	movs	r2, #0
 800b784:	f7f4 fd8a 	bl	800029c <__adddf3>
 800b788:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b78c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b794:	2b00      	cmp	r3, #0
 800b796:	d15c      	bne.n	800b852 <_dtoa_r+0x502>
 800b798:	4b83      	ldr	r3, [pc, #524]	; (800b9a8 <_dtoa_r+0x658>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f4 fd7a 	bl	8000298 <__aeabi_dsub>
 800b7a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	460f      	mov	r7, r1
 800b7ac:	f7f5 f9bc 	bl	8000b28 <__aeabi_dcmpgt>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	f040 8296 	bne.w	800bce2 <_dtoa_r+0x992>
 800b7b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f5 f993 	bl	8000aec <__aeabi_dcmplt>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f040 8288 	bne.w	800bcdc <_dtoa_r+0x98c>
 800b7cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b7d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f2c0 8158 	blt.w	800ba8c <_dtoa_r+0x73c>
 800b7dc:	f1ba 0f0e 	cmp.w	sl, #14
 800b7e0:	f300 8154 	bgt.w	800ba8c <_dtoa_r+0x73c>
 800b7e4:	4b6b      	ldr	r3, [pc, #428]	; (800b994 <_dtoa_r+0x644>)
 800b7e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b7ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f280 80e3 	bge.w	800b9bc <_dtoa_r+0x66c>
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f300 80df 	bgt.w	800b9bc <_dtoa_r+0x66c>
 800b7fe:	f040 826d 	bne.w	800bcdc <_dtoa_r+0x98c>
 800b802:	4b69      	ldr	r3, [pc, #420]	; (800b9a8 <_dtoa_r+0x658>)
 800b804:	2200      	movs	r2, #0
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f4 fefd 	bl	8000608 <__aeabi_dmul>
 800b80e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b812:	f7f5 f97f 	bl	8000b14 <__aeabi_dcmpge>
 800b816:	9e01      	ldr	r6, [sp, #4]
 800b818:	4637      	mov	r7, r6
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f040 8243 	bne.w	800bca6 <_dtoa_r+0x956>
 800b820:	9d00      	ldr	r5, [sp, #0]
 800b822:	2331      	movs	r3, #49	; 0x31
 800b824:	f805 3b01 	strb.w	r3, [r5], #1
 800b828:	f10a 0a01 	add.w	sl, sl, #1
 800b82c:	e23f      	b.n	800bcae <_dtoa_r+0x95e>
 800b82e:	07f2      	lsls	r2, r6, #31
 800b830:	d505      	bpl.n	800b83e <_dtoa_r+0x4ee>
 800b832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b836:	f7f4 fee7 	bl	8000608 <__aeabi_dmul>
 800b83a:	3501      	adds	r5, #1
 800b83c:	2301      	movs	r3, #1
 800b83e:	1076      	asrs	r6, r6, #1
 800b840:	3708      	adds	r7, #8
 800b842:	e76c      	b.n	800b71e <_dtoa_r+0x3ce>
 800b844:	2502      	movs	r5, #2
 800b846:	e76f      	b.n	800b728 <_dtoa_r+0x3d8>
 800b848:	9b01      	ldr	r3, [sp, #4]
 800b84a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b84e:	930c      	str	r3, [sp, #48]	; 0x30
 800b850:	e78d      	b.n	800b76e <_dtoa_r+0x41e>
 800b852:	9900      	ldr	r1, [sp, #0]
 800b854:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b858:	4b4e      	ldr	r3, [pc, #312]	; (800b994 <_dtoa_r+0x644>)
 800b85a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b85e:	4401      	add	r1, r0
 800b860:	9102      	str	r1, [sp, #8]
 800b862:	9908      	ldr	r1, [sp, #32]
 800b864:	eeb0 8a47 	vmov.f32	s16, s14
 800b868:	eef0 8a67 	vmov.f32	s17, s15
 800b86c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b870:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b874:	2900      	cmp	r1, #0
 800b876:	d045      	beq.n	800b904 <_dtoa_r+0x5b4>
 800b878:	494c      	ldr	r1, [pc, #304]	; (800b9ac <_dtoa_r+0x65c>)
 800b87a:	2000      	movs	r0, #0
 800b87c:	f7f4 ffee 	bl	800085c <__aeabi_ddiv>
 800b880:	ec53 2b18 	vmov	r2, r3, d8
 800b884:	f7f4 fd08 	bl	8000298 <__aeabi_dsub>
 800b888:	9d00      	ldr	r5, [sp, #0]
 800b88a:	ec41 0b18 	vmov	d8, r0, r1
 800b88e:	4639      	mov	r1, r7
 800b890:	4630      	mov	r0, r6
 800b892:	f7f5 f969 	bl	8000b68 <__aeabi_d2iz>
 800b896:	900c      	str	r0, [sp, #48]	; 0x30
 800b898:	f7f4 fe4c 	bl	8000534 <__aeabi_i2d>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	f7f4 fcf8 	bl	8000298 <__aeabi_dsub>
 800b8a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8aa:	3330      	adds	r3, #48	; 0x30
 800b8ac:	f805 3b01 	strb.w	r3, [r5], #1
 800b8b0:	ec53 2b18 	vmov	r2, r3, d8
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	460f      	mov	r7, r1
 800b8b8:	f7f5 f918 	bl	8000aec <__aeabi_dcmplt>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d165      	bne.n	800b98c <_dtoa_r+0x63c>
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	463b      	mov	r3, r7
 800b8c4:	4935      	ldr	r1, [pc, #212]	; (800b99c <_dtoa_r+0x64c>)
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f7f4 fce6 	bl	8000298 <__aeabi_dsub>
 800b8cc:	ec53 2b18 	vmov	r2, r3, d8
 800b8d0:	f7f5 f90c 	bl	8000aec <__aeabi_dcmplt>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	f040 80b9 	bne.w	800ba4c <_dtoa_r+0x6fc>
 800b8da:	9b02      	ldr	r3, [sp, #8]
 800b8dc:	429d      	cmp	r5, r3
 800b8de:	f43f af75 	beq.w	800b7cc <_dtoa_r+0x47c>
 800b8e2:	4b2f      	ldr	r3, [pc, #188]	; (800b9a0 <_dtoa_r+0x650>)
 800b8e4:	ec51 0b18 	vmov	r0, r1, d8
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f7f4 fe8d 	bl	8000608 <__aeabi_dmul>
 800b8ee:	4b2c      	ldr	r3, [pc, #176]	; (800b9a0 <_dtoa_r+0x650>)
 800b8f0:	ec41 0b18 	vmov	d8, r0, r1
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	f7f4 fe85 	bl	8000608 <__aeabi_dmul>
 800b8fe:	4606      	mov	r6, r0
 800b900:	460f      	mov	r7, r1
 800b902:	e7c4      	b.n	800b88e <_dtoa_r+0x53e>
 800b904:	ec51 0b17 	vmov	r0, r1, d7
 800b908:	f7f4 fe7e 	bl	8000608 <__aeabi_dmul>
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	9d00      	ldr	r5, [sp, #0]
 800b910:	930c      	str	r3, [sp, #48]	; 0x30
 800b912:	ec41 0b18 	vmov	d8, r0, r1
 800b916:	4639      	mov	r1, r7
 800b918:	4630      	mov	r0, r6
 800b91a:	f7f5 f925 	bl	8000b68 <__aeabi_d2iz>
 800b91e:	9011      	str	r0, [sp, #68]	; 0x44
 800b920:	f7f4 fe08 	bl	8000534 <__aeabi_i2d>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	f7f4 fcb4 	bl	8000298 <__aeabi_dsub>
 800b930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b932:	3330      	adds	r3, #48	; 0x30
 800b934:	f805 3b01 	strb.w	r3, [r5], #1
 800b938:	9b02      	ldr	r3, [sp, #8]
 800b93a:	429d      	cmp	r5, r3
 800b93c:	4606      	mov	r6, r0
 800b93e:	460f      	mov	r7, r1
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	d134      	bne.n	800b9b0 <_dtoa_r+0x660>
 800b946:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <_dtoa_r+0x65c>)
 800b948:	ec51 0b18 	vmov	r0, r1, d8
 800b94c:	f7f4 fca6 	bl	800029c <__adddf3>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f5 f8e6 	bl	8000b28 <__aeabi_dcmpgt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d175      	bne.n	800ba4c <_dtoa_r+0x6fc>
 800b960:	ec53 2b18 	vmov	r2, r3, d8
 800b964:	4911      	ldr	r1, [pc, #68]	; (800b9ac <_dtoa_r+0x65c>)
 800b966:	2000      	movs	r0, #0
 800b968:	f7f4 fc96 	bl	8000298 <__aeabi_dsub>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f5 f8ba 	bl	8000aec <__aeabi_dcmplt>
 800b978:	2800      	cmp	r0, #0
 800b97a:	f43f af27 	beq.w	800b7cc <_dtoa_r+0x47c>
 800b97e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b980:	1e6b      	subs	r3, r5, #1
 800b982:	930c      	str	r3, [sp, #48]	; 0x30
 800b984:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b988:	2b30      	cmp	r3, #48	; 0x30
 800b98a:	d0f8      	beq.n	800b97e <_dtoa_r+0x62e>
 800b98c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b990:	e04a      	b.n	800ba28 <_dtoa_r+0x6d8>
 800b992:	bf00      	nop
 800b994:	0800e9f8 	.word	0x0800e9f8
 800b998:	0800e9d0 	.word	0x0800e9d0
 800b99c:	3ff00000 	.word	0x3ff00000
 800b9a0:	40240000 	.word	0x40240000
 800b9a4:	401c0000 	.word	0x401c0000
 800b9a8:	40140000 	.word	0x40140000
 800b9ac:	3fe00000 	.word	0x3fe00000
 800b9b0:	4baf      	ldr	r3, [pc, #700]	; (800bc70 <_dtoa_r+0x920>)
 800b9b2:	f7f4 fe29 	bl	8000608 <__aeabi_dmul>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460f      	mov	r7, r1
 800b9ba:	e7ac      	b.n	800b916 <_dtoa_r+0x5c6>
 800b9bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9c0:	9d00      	ldr	r5, [sp, #0]
 800b9c2:	4642      	mov	r2, r8
 800b9c4:	464b      	mov	r3, r9
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	f7f4 ff47 	bl	800085c <__aeabi_ddiv>
 800b9ce:	f7f5 f8cb 	bl	8000b68 <__aeabi_d2iz>
 800b9d2:	9002      	str	r0, [sp, #8]
 800b9d4:	f7f4 fdae 	bl	8000534 <__aeabi_i2d>
 800b9d8:	4642      	mov	r2, r8
 800b9da:	464b      	mov	r3, r9
 800b9dc:	f7f4 fe14 	bl	8000608 <__aeabi_dmul>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	f7f4 fc56 	bl	8000298 <__aeabi_dsub>
 800b9ec:	9e02      	ldr	r6, [sp, #8]
 800b9ee:	9f01      	ldr	r7, [sp, #4]
 800b9f0:	3630      	adds	r6, #48	; 0x30
 800b9f2:	f805 6b01 	strb.w	r6, [r5], #1
 800b9f6:	9e00      	ldr	r6, [sp, #0]
 800b9f8:	1bae      	subs	r6, r5, r6
 800b9fa:	42b7      	cmp	r7, r6
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	d137      	bne.n	800ba72 <_dtoa_r+0x722>
 800ba02:	f7f4 fc4b 	bl	800029c <__adddf3>
 800ba06:	4642      	mov	r2, r8
 800ba08:	464b      	mov	r3, r9
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	f7f5 f88b 	bl	8000b28 <__aeabi_dcmpgt>
 800ba12:	b9c8      	cbnz	r0, 800ba48 <_dtoa_r+0x6f8>
 800ba14:	4642      	mov	r2, r8
 800ba16:	464b      	mov	r3, r9
 800ba18:	4630      	mov	r0, r6
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	f7f5 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba20:	b110      	cbz	r0, 800ba28 <_dtoa_r+0x6d8>
 800ba22:	9b02      	ldr	r3, [sp, #8]
 800ba24:	07d9      	lsls	r1, r3, #31
 800ba26:	d40f      	bmi.n	800ba48 <_dtoa_r+0x6f8>
 800ba28:	4620      	mov	r0, r4
 800ba2a:	4659      	mov	r1, fp
 800ba2c:	f000 ff22 	bl	800c874 <_Bfree>
 800ba30:	2300      	movs	r3, #0
 800ba32:	702b      	strb	r3, [r5, #0]
 800ba34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba36:	f10a 0001 	add.w	r0, sl, #1
 800ba3a:	6018      	str	r0, [r3, #0]
 800ba3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f43f acd8 	beq.w	800b3f4 <_dtoa_r+0xa4>
 800ba44:	601d      	str	r5, [r3, #0]
 800ba46:	e4d5      	b.n	800b3f4 <_dtoa_r+0xa4>
 800ba48:	f8cd a01c 	str.w	sl, [sp, #28]
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	461d      	mov	r5, r3
 800ba50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba54:	2a39      	cmp	r2, #57	; 0x39
 800ba56:	d108      	bne.n	800ba6a <_dtoa_r+0x71a>
 800ba58:	9a00      	ldr	r2, [sp, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d1f7      	bne.n	800ba4e <_dtoa_r+0x6fe>
 800ba5e:	9a07      	ldr	r2, [sp, #28]
 800ba60:	9900      	ldr	r1, [sp, #0]
 800ba62:	3201      	adds	r2, #1
 800ba64:	9207      	str	r2, [sp, #28]
 800ba66:	2230      	movs	r2, #48	; 0x30
 800ba68:	700a      	strb	r2, [r1, #0]
 800ba6a:	781a      	ldrb	r2, [r3, #0]
 800ba6c:	3201      	adds	r2, #1
 800ba6e:	701a      	strb	r2, [r3, #0]
 800ba70:	e78c      	b.n	800b98c <_dtoa_r+0x63c>
 800ba72:	4b7f      	ldr	r3, [pc, #508]	; (800bc70 <_dtoa_r+0x920>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	f7f4 fdc7 	bl	8000608 <__aeabi_dmul>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f7f5 f829 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d09b      	beq.n	800b9c2 <_dtoa_r+0x672>
 800ba8a:	e7cd      	b.n	800ba28 <_dtoa_r+0x6d8>
 800ba8c:	9a08      	ldr	r2, [sp, #32]
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	f000 80c4 	beq.w	800bc1c <_dtoa_r+0x8cc>
 800ba94:	9a05      	ldr	r2, [sp, #20]
 800ba96:	2a01      	cmp	r2, #1
 800ba98:	f300 80a8 	bgt.w	800bbec <_dtoa_r+0x89c>
 800ba9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	f000 80a0 	beq.w	800bbe4 <_dtoa_r+0x894>
 800baa4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800baa8:	9e06      	ldr	r6, [sp, #24]
 800baaa:	4645      	mov	r5, r8
 800baac:	9a04      	ldr	r2, [sp, #16]
 800baae:	2101      	movs	r1, #1
 800bab0:	441a      	add	r2, r3
 800bab2:	4620      	mov	r0, r4
 800bab4:	4498      	add	r8, r3
 800bab6:	9204      	str	r2, [sp, #16]
 800bab8:	f000 ffe2 	bl	800ca80 <__i2b>
 800babc:	4607      	mov	r7, r0
 800babe:	2d00      	cmp	r5, #0
 800bac0:	dd0b      	ble.n	800bada <_dtoa_r+0x78a>
 800bac2:	9b04      	ldr	r3, [sp, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	dd08      	ble.n	800bada <_dtoa_r+0x78a>
 800bac8:	42ab      	cmp	r3, r5
 800baca:	9a04      	ldr	r2, [sp, #16]
 800bacc:	bfa8      	it	ge
 800bace:	462b      	movge	r3, r5
 800bad0:	eba8 0803 	sub.w	r8, r8, r3
 800bad4:	1aed      	subs	r5, r5, r3
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	b1fb      	cbz	r3, 800bb1e <_dtoa_r+0x7ce>
 800bade:	9b08      	ldr	r3, [sp, #32]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 809f 	beq.w	800bc24 <_dtoa_r+0x8d4>
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	dd11      	ble.n	800bb0e <_dtoa_r+0x7be>
 800baea:	4639      	mov	r1, r7
 800baec:	4632      	mov	r2, r6
 800baee:	4620      	mov	r0, r4
 800baf0:	f001 f882 	bl	800cbf8 <__pow5mult>
 800baf4:	465a      	mov	r2, fp
 800baf6:	4601      	mov	r1, r0
 800baf8:	4607      	mov	r7, r0
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 ffd6 	bl	800caac <__multiply>
 800bb00:	4659      	mov	r1, fp
 800bb02:	9007      	str	r0, [sp, #28]
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 feb5 	bl	800c874 <_Bfree>
 800bb0a:	9b07      	ldr	r3, [sp, #28]
 800bb0c:	469b      	mov	fp, r3
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	1b9a      	subs	r2, r3, r6
 800bb12:	d004      	beq.n	800bb1e <_dtoa_r+0x7ce>
 800bb14:	4659      	mov	r1, fp
 800bb16:	4620      	mov	r0, r4
 800bb18:	f001 f86e 	bl	800cbf8 <__pow5mult>
 800bb1c:	4683      	mov	fp, r0
 800bb1e:	2101      	movs	r1, #1
 800bb20:	4620      	mov	r0, r4
 800bb22:	f000 ffad 	bl	800ca80 <__i2b>
 800bb26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	dd7c      	ble.n	800bc28 <_dtoa_r+0x8d8>
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4601      	mov	r1, r0
 800bb32:	4620      	mov	r0, r4
 800bb34:	f001 f860 	bl	800cbf8 <__pow5mult>
 800bb38:	9b05      	ldr	r3, [sp, #20]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	dd76      	ble.n	800bc2e <_dtoa_r+0x8de>
 800bb40:	2300      	movs	r3, #0
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	6933      	ldr	r3, [r6, #16]
 800bb46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb4a:	6918      	ldr	r0, [r3, #16]
 800bb4c:	f000 ff48 	bl	800c9e0 <__hi0bits>
 800bb50:	f1c0 0020 	rsb	r0, r0, #32
 800bb54:	9b04      	ldr	r3, [sp, #16]
 800bb56:	4418      	add	r0, r3
 800bb58:	f010 001f 	ands.w	r0, r0, #31
 800bb5c:	f000 8086 	beq.w	800bc6c <_dtoa_r+0x91c>
 800bb60:	f1c0 0320 	rsb	r3, r0, #32
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	dd7f      	ble.n	800bc68 <_dtoa_r+0x918>
 800bb68:	f1c0 001c 	rsb	r0, r0, #28
 800bb6c:	9b04      	ldr	r3, [sp, #16]
 800bb6e:	4403      	add	r3, r0
 800bb70:	4480      	add	r8, r0
 800bb72:	4405      	add	r5, r0
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	f1b8 0f00 	cmp.w	r8, #0
 800bb7a:	dd05      	ble.n	800bb88 <_dtoa_r+0x838>
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	4642      	mov	r2, r8
 800bb80:	4620      	mov	r0, r4
 800bb82:	f001 f893 	bl	800ccac <__lshift>
 800bb86:	4683      	mov	fp, r0
 800bb88:	9b04      	ldr	r3, [sp, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	dd05      	ble.n	800bb9a <_dtoa_r+0x84a>
 800bb8e:	4631      	mov	r1, r6
 800bb90:	461a      	mov	r2, r3
 800bb92:	4620      	mov	r0, r4
 800bb94:	f001 f88a 	bl	800ccac <__lshift>
 800bb98:	4606      	mov	r6, r0
 800bb9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d069      	beq.n	800bc74 <_dtoa_r+0x924>
 800bba0:	4631      	mov	r1, r6
 800bba2:	4658      	mov	r0, fp
 800bba4:	f001 f8ee 	bl	800cd84 <__mcmp>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	da63      	bge.n	800bc74 <_dtoa_r+0x924>
 800bbac:	2300      	movs	r3, #0
 800bbae:	4659      	mov	r1, fp
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fe80 	bl	800c8b8 <__multadd>
 800bbb8:	9b08      	ldr	r3, [sp, #32]
 800bbba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bbbe:	4683      	mov	fp, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 818f 	beq.w	800bee4 <_dtoa_r+0xb94>
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	2300      	movs	r3, #0
 800bbca:	220a      	movs	r2, #10
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f000 fe73 	bl	800c8b8 <__multadd>
 800bbd2:	f1b9 0f00 	cmp.w	r9, #0
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	f300 808e 	bgt.w	800bcf8 <_dtoa_r+0x9a8>
 800bbdc:	9b05      	ldr	r3, [sp, #20]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	dc50      	bgt.n	800bc84 <_dtoa_r+0x934>
 800bbe2:	e089      	b.n	800bcf8 <_dtoa_r+0x9a8>
 800bbe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bbea:	e75d      	b.n	800baa8 <_dtoa_r+0x758>
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	1e5e      	subs	r6, r3, #1
 800bbf0:	9b06      	ldr	r3, [sp, #24]
 800bbf2:	42b3      	cmp	r3, r6
 800bbf4:	bfbf      	itttt	lt
 800bbf6:	9b06      	ldrlt	r3, [sp, #24]
 800bbf8:	9606      	strlt	r6, [sp, #24]
 800bbfa:	1af2      	sublt	r2, r6, r3
 800bbfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bbfe:	bfb6      	itet	lt
 800bc00:	189b      	addlt	r3, r3, r2
 800bc02:	1b9e      	subge	r6, r3, r6
 800bc04:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bc06:	9b01      	ldr	r3, [sp, #4]
 800bc08:	bfb8      	it	lt
 800bc0a:	2600      	movlt	r6, #0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bfb5      	itete	lt
 800bc10:	eba8 0503 	sublt.w	r5, r8, r3
 800bc14:	9b01      	ldrge	r3, [sp, #4]
 800bc16:	2300      	movlt	r3, #0
 800bc18:	4645      	movge	r5, r8
 800bc1a:	e747      	b.n	800baac <_dtoa_r+0x75c>
 800bc1c:	9e06      	ldr	r6, [sp, #24]
 800bc1e:	9f08      	ldr	r7, [sp, #32]
 800bc20:	4645      	mov	r5, r8
 800bc22:	e74c      	b.n	800babe <_dtoa_r+0x76e>
 800bc24:	9a06      	ldr	r2, [sp, #24]
 800bc26:	e775      	b.n	800bb14 <_dtoa_r+0x7c4>
 800bc28:	9b05      	ldr	r3, [sp, #20]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	dc18      	bgt.n	800bc60 <_dtoa_r+0x910>
 800bc2e:	9b02      	ldr	r3, [sp, #8]
 800bc30:	b9b3      	cbnz	r3, 800bc60 <_dtoa_r+0x910>
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc38:	b9a3      	cbnz	r3, 800bc64 <_dtoa_r+0x914>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc40:	0d1b      	lsrs	r3, r3, #20
 800bc42:	051b      	lsls	r3, r3, #20
 800bc44:	b12b      	cbz	r3, 800bc52 <_dtoa_r+0x902>
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	9304      	str	r3, [sp, #16]
 800bc4c:	f108 0801 	add.w	r8, r8, #1
 800bc50:	2301      	movs	r3, #1
 800bc52:	9306      	str	r3, [sp, #24]
 800bc54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f47f af74 	bne.w	800bb44 <_dtoa_r+0x7f4>
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	e779      	b.n	800bb54 <_dtoa_r+0x804>
 800bc60:	2300      	movs	r3, #0
 800bc62:	e7f6      	b.n	800bc52 <_dtoa_r+0x902>
 800bc64:	9b02      	ldr	r3, [sp, #8]
 800bc66:	e7f4      	b.n	800bc52 <_dtoa_r+0x902>
 800bc68:	d085      	beq.n	800bb76 <_dtoa_r+0x826>
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	301c      	adds	r0, #28
 800bc6e:	e77d      	b.n	800bb6c <_dtoa_r+0x81c>
 800bc70:	40240000 	.word	0x40240000
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dc38      	bgt.n	800bcec <_dtoa_r+0x99c>
 800bc7a:	9b05      	ldr	r3, [sp, #20]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	dd35      	ble.n	800bcec <_dtoa_r+0x99c>
 800bc80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bc84:	f1b9 0f00 	cmp.w	r9, #0
 800bc88:	d10d      	bne.n	800bca6 <_dtoa_r+0x956>
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	464b      	mov	r3, r9
 800bc8e:	2205      	movs	r2, #5
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fe11 	bl	800c8b8 <__multadd>
 800bc96:	4601      	mov	r1, r0
 800bc98:	4606      	mov	r6, r0
 800bc9a:	4658      	mov	r0, fp
 800bc9c:	f001 f872 	bl	800cd84 <__mcmp>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	f73f adbd 	bgt.w	800b820 <_dtoa_r+0x4d0>
 800bca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca8:	9d00      	ldr	r5, [sp, #0]
 800bcaa:	ea6f 0a03 	mvn.w	sl, r3
 800bcae:	f04f 0800 	mov.w	r8, #0
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f000 fddd 	bl	800c874 <_Bfree>
 800bcba:	2f00      	cmp	r7, #0
 800bcbc:	f43f aeb4 	beq.w	800ba28 <_dtoa_r+0x6d8>
 800bcc0:	f1b8 0f00 	cmp.w	r8, #0
 800bcc4:	d005      	beq.n	800bcd2 <_dtoa_r+0x982>
 800bcc6:	45b8      	cmp	r8, r7
 800bcc8:	d003      	beq.n	800bcd2 <_dtoa_r+0x982>
 800bcca:	4641      	mov	r1, r8
 800bccc:	4620      	mov	r0, r4
 800bcce:	f000 fdd1 	bl	800c874 <_Bfree>
 800bcd2:	4639      	mov	r1, r7
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f000 fdcd 	bl	800c874 <_Bfree>
 800bcda:	e6a5      	b.n	800ba28 <_dtoa_r+0x6d8>
 800bcdc:	2600      	movs	r6, #0
 800bcde:	4637      	mov	r7, r6
 800bce0:	e7e1      	b.n	800bca6 <_dtoa_r+0x956>
 800bce2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bce4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bce8:	4637      	mov	r7, r6
 800bcea:	e599      	b.n	800b820 <_dtoa_r+0x4d0>
 800bcec:	9b08      	ldr	r3, [sp, #32]
 800bcee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80fd 	beq.w	800bef2 <_dtoa_r+0xba2>
 800bcf8:	2d00      	cmp	r5, #0
 800bcfa:	dd05      	ble.n	800bd08 <_dtoa_r+0x9b8>
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 ffd3 	bl	800ccac <__lshift>
 800bd06:	4607      	mov	r7, r0
 800bd08:	9b06      	ldr	r3, [sp, #24]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d05c      	beq.n	800bdc8 <_dtoa_r+0xa78>
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 fd6f 	bl	800c7f4 <_Balloc>
 800bd16:	4605      	mov	r5, r0
 800bd18:	b928      	cbnz	r0, 800bd26 <_dtoa_r+0x9d6>
 800bd1a:	4b80      	ldr	r3, [pc, #512]	; (800bf1c <_dtoa_r+0xbcc>)
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bd22:	f7ff bb2e 	b.w	800b382 <_dtoa_r+0x32>
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	3202      	adds	r2, #2
 800bd2a:	0092      	lsls	r2, r2, #2
 800bd2c:	f107 010c 	add.w	r1, r7, #12
 800bd30:	300c      	adds	r0, #12
 800bd32:	f7fd fb4f 	bl	80093d4 <memcpy>
 800bd36:	2201      	movs	r2, #1
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 ffb6 	bl	800ccac <__lshift>
 800bd40:	9b00      	ldr	r3, [sp, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	9b00      	ldr	r3, [sp, #0]
 800bd48:	444b      	add	r3, r9
 800bd4a:	9307      	str	r3, [sp, #28]
 800bd4c:	9b02      	ldr	r3, [sp, #8]
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	46b8      	mov	r8, r7
 800bd54:	9306      	str	r3, [sp, #24]
 800bd56:	4607      	mov	r7, r0
 800bd58:	9b01      	ldr	r3, [sp, #4]
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	4658      	mov	r0, fp
 800bd60:	9302      	str	r3, [sp, #8]
 800bd62:	f7ff fa69 	bl	800b238 <quorem>
 800bd66:	4603      	mov	r3, r0
 800bd68:	3330      	adds	r3, #48	; 0x30
 800bd6a:	9004      	str	r0, [sp, #16]
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	4658      	mov	r0, fp
 800bd70:	9308      	str	r3, [sp, #32]
 800bd72:	f001 f807 	bl	800cd84 <__mcmp>
 800bd76:	463a      	mov	r2, r7
 800bd78:	4681      	mov	r9, r0
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f001 f81d 	bl	800cdbc <__mdiff>
 800bd82:	68c2      	ldr	r2, [r0, #12]
 800bd84:	9b08      	ldr	r3, [sp, #32]
 800bd86:	4605      	mov	r5, r0
 800bd88:	bb02      	cbnz	r2, 800bdcc <_dtoa_r+0xa7c>
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	4658      	mov	r0, fp
 800bd8e:	f000 fff9 	bl	800cd84 <__mcmp>
 800bd92:	9b08      	ldr	r3, [sp, #32]
 800bd94:	4602      	mov	r2, r0
 800bd96:	4629      	mov	r1, r5
 800bd98:	4620      	mov	r0, r4
 800bd9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bd9e:	f000 fd69 	bl	800c874 <_Bfree>
 800bda2:	9b05      	ldr	r3, [sp, #20]
 800bda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda6:	9d01      	ldr	r5, [sp, #4]
 800bda8:	ea43 0102 	orr.w	r1, r3, r2
 800bdac:	9b06      	ldr	r3, [sp, #24]
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	9b08      	ldr	r3, [sp, #32]
 800bdb2:	d10d      	bne.n	800bdd0 <_dtoa_r+0xa80>
 800bdb4:	2b39      	cmp	r3, #57	; 0x39
 800bdb6:	d029      	beq.n	800be0c <_dtoa_r+0xabc>
 800bdb8:	f1b9 0f00 	cmp.w	r9, #0
 800bdbc:	dd01      	ble.n	800bdc2 <_dtoa_r+0xa72>
 800bdbe:	9b04      	ldr	r3, [sp, #16]
 800bdc0:	3331      	adds	r3, #49	; 0x31
 800bdc2:	9a02      	ldr	r2, [sp, #8]
 800bdc4:	7013      	strb	r3, [r2, #0]
 800bdc6:	e774      	b.n	800bcb2 <_dtoa_r+0x962>
 800bdc8:	4638      	mov	r0, r7
 800bdca:	e7b9      	b.n	800bd40 <_dtoa_r+0x9f0>
 800bdcc:	2201      	movs	r2, #1
 800bdce:	e7e2      	b.n	800bd96 <_dtoa_r+0xa46>
 800bdd0:	f1b9 0f00 	cmp.w	r9, #0
 800bdd4:	db06      	blt.n	800bde4 <_dtoa_r+0xa94>
 800bdd6:	9905      	ldr	r1, [sp, #20]
 800bdd8:	ea41 0909 	orr.w	r9, r1, r9
 800bddc:	9906      	ldr	r1, [sp, #24]
 800bdde:	ea59 0101 	orrs.w	r1, r9, r1
 800bde2:	d120      	bne.n	800be26 <_dtoa_r+0xad6>
 800bde4:	2a00      	cmp	r2, #0
 800bde6:	ddec      	ble.n	800bdc2 <_dtoa_r+0xa72>
 800bde8:	4659      	mov	r1, fp
 800bdea:	2201      	movs	r2, #1
 800bdec:	4620      	mov	r0, r4
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	f000 ff5c 	bl	800ccac <__lshift>
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	4683      	mov	fp, r0
 800bdf8:	f000 ffc4 	bl	800cd84 <__mcmp>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	dc02      	bgt.n	800be08 <_dtoa_r+0xab8>
 800be02:	d1de      	bne.n	800bdc2 <_dtoa_r+0xa72>
 800be04:	07da      	lsls	r2, r3, #31
 800be06:	d5dc      	bpl.n	800bdc2 <_dtoa_r+0xa72>
 800be08:	2b39      	cmp	r3, #57	; 0x39
 800be0a:	d1d8      	bne.n	800bdbe <_dtoa_r+0xa6e>
 800be0c:	9a02      	ldr	r2, [sp, #8]
 800be0e:	2339      	movs	r3, #57	; 0x39
 800be10:	7013      	strb	r3, [r2, #0]
 800be12:	462b      	mov	r3, r5
 800be14:	461d      	mov	r5, r3
 800be16:	3b01      	subs	r3, #1
 800be18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be1c:	2a39      	cmp	r2, #57	; 0x39
 800be1e:	d050      	beq.n	800bec2 <_dtoa_r+0xb72>
 800be20:	3201      	adds	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
 800be24:	e745      	b.n	800bcb2 <_dtoa_r+0x962>
 800be26:	2a00      	cmp	r2, #0
 800be28:	dd03      	ble.n	800be32 <_dtoa_r+0xae2>
 800be2a:	2b39      	cmp	r3, #57	; 0x39
 800be2c:	d0ee      	beq.n	800be0c <_dtoa_r+0xabc>
 800be2e:	3301      	adds	r3, #1
 800be30:	e7c7      	b.n	800bdc2 <_dtoa_r+0xa72>
 800be32:	9a01      	ldr	r2, [sp, #4]
 800be34:	9907      	ldr	r1, [sp, #28]
 800be36:	f802 3c01 	strb.w	r3, [r2, #-1]
 800be3a:	428a      	cmp	r2, r1
 800be3c:	d02a      	beq.n	800be94 <_dtoa_r+0xb44>
 800be3e:	4659      	mov	r1, fp
 800be40:	2300      	movs	r3, #0
 800be42:	220a      	movs	r2, #10
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fd37 	bl	800c8b8 <__multadd>
 800be4a:	45b8      	cmp	r8, r7
 800be4c:	4683      	mov	fp, r0
 800be4e:	f04f 0300 	mov.w	r3, #0
 800be52:	f04f 020a 	mov.w	r2, #10
 800be56:	4641      	mov	r1, r8
 800be58:	4620      	mov	r0, r4
 800be5a:	d107      	bne.n	800be6c <_dtoa_r+0xb1c>
 800be5c:	f000 fd2c 	bl	800c8b8 <__multadd>
 800be60:	4680      	mov	r8, r0
 800be62:	4607      	mov	r7, r0
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	3301      	adds	r3, #1
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	e775      	b.n	800bd58 <_dtoa_r+0xa08>
 800be6c:	f000 fd24 	bl	800c8b8 <__multadd>
 800be70:	4639      	mov	r1, r7
 800be72:	4680      	mov	r8, r0
 800be74:	2300      	movs	r3, #0
 800be76:	220a      	movs	r2, #10
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fd1d 	bl	800c8b8 <__multadd>
 800be7e:	4607      	mov	r7, r0
 800be80:	e7f0      	b.n	800be64 <_dtoa_r+0xb14>
 800be82:	f1b9 0f00 	cmp.w	r9, #0
 800be86:	9a00      	ldr	r2, [sp, #0]
 800be88:	bfcc      	ite	gt
 800be8a:	464d      	movgt	r5, r9
 800be8c:	2501      	movle	r5, #1
 800be8e:	4415      	add	r5, r2
 800be90:	f04f 0800 	mov.w	r8, #0
 800be94:	4659      	mov	r1, fp
 800be96:	2201      	movs	r2, #1
 800be98:	4620      	mov	r0, r4
 800be9a:	9301      	str	r3, [sp, #4]
 800be9c:	f000 ff06 	bl	800ccac <__lshift>
 800bea0:	4631      	mov	r1, r6
 800bea2:	4683      	mov	fp, r0
 800bea4:	f000 ff6e 	bl	800cd84 <__mcmp>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	dcb2      	bgt.n	800be12 <_dtoa_r+0xac2>
 800beac:	d102      	bne.n	800beb4 <_dtoa_r+0xb64>
 800beae:	9b01      	ldr	r3, [sp, #4]
 800beb0:	07db      	lsls	r3, r3, #31
 800beb2:	d4ae      	bmi.n	800be12 <_dtoa_r+0xac2>
 800beb4:	462b      	mov	r3, r5
 800beb6:	461d      	mov	r5, r3
 800beb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bebc:	2a30      	cmp	r2, #48	; 0x30
 800bebe:	d0fa      	beq.n	800beb6 <_dtoa_r+0xb66>
 800bec0:	e6f7      	b.n	800bcb2 <_dtoa_r+0x962>
 800bec2:	9a00      	ldr	r2, [sp, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d1a5      	bne.n	800be14 <_dtoa_r+0xac4>
 800bec8:	f10a 0a01 	add.w	sl, sl, #1
 800becc:	2331      	movs	r3, #49	; 0x31
 800bece:	e779      	b.n	800bdc4 <_dtoa_r+0xa74>
 800bed0:	4b13      	ldr	r3, [pc, #76]	; (800bf20 <_dtoa_r+0xbd0>)
 800bed2:	f7ff baaf 	b.w	800b434 <_dtoa_r+0xe4>
 800bed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f47f aa86 	bne.w	800b3ea <_dtoa_r+0x9a>
 800bede:	4b11      	ldr	r3, [pc, #68]	; (800bf24 <_dtoa_r+0xbd4>)
 800bee0:	f7ff baa8 	b.w	800b434 <_dtoa_r+0xe4>
 800bee4:	f1b9 0f00 	cmp.w	r9, #0
 800bee8:	dc03      	bgt.n	800bef2 <_dtoa_r+0xba2>
 800beea:	9b05      	ldr	r3, [sp, #20]
 800beec:	2b02      	cmp	r3, #2
 800beee:	f73f aec9 	bgt.w	800bc84 <_dtoa_r+0x934>
 800bef2:	9d00      	ldr	r5, [sp, #0]
 800bef4:	4631      	mov	r1, r6
 800bef6:	4658      	mov	r0, fp
 800bef8:	f7ff f99e 	bl	800b238 <quorem>
 800befc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bf00:	f805 3b01 	strb.w	r3, [r5], #1
 800bf04:	9a00      	ldr	r2, [sp, #0]
 800bf06:	1aaa      	subs	r2, r5, r2
 800bf08:	4591      	cmp	r9, r2
 800bf0a:	ddba      	ble.n	800be82 <_dtoa_r+0xb32>
 800bf0c:	4659      	mov	r1, fp
 800bf0e:	2300      	movs	r3, #0
 800bf10:	220a      	movs	r2, #10
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 fcd0 	bl	800c8b8 <__multadd>
 800bf18:	4683      	mov	fp, r0
 800bf1a:	e7eb      	b.n	800bef4 <_dtoa_r+0xba4>
 800bf1c:	0800e8dc 	.word	0x0800e8dc
 800bf20:	0800eae1 	.word	0x0800eae1
 800bf24:	0800e859 	.word	0x0800e859

0800bf28 <__sflush_r>:
 800bf28:	898a      	ldrh	r2, [r1, #12]
 800bf2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2e:	4605      	mov	r5, r0
 800bf30:	0710      	lsls	r0, r2, #28
 800bf32:	460c      	mov	r4, r1
 800bf34:	d458      	bmi.n	800bfe8 <__sflush_r+0xc0>
 800bf36:	684b      	ldr	r3, [r1, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	dc05      	bgt.n	800bf48 <__sflush_r+0x20>
 800bf3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dc02      	bgt.n	800bf48 <__sflush_r+0x20>
 800bf42:	2000      	movs	r0, #0
 800bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf4a:	2e00      	cmp	r6, #0
 800bf4c:	d0f9      	beq.n	800bf42 <__sflush_r+0x1a>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf54:	682f      	ldr	r7, [r5, #0]
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	d032      	beq.n	800bfc0 <__sflush_r+0x98>
 800bf5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	075a      	lsls	r2, r3, #29
 800bf60:	d505      	bpl.n	800bf6e <__sflush_r+0x46>
 800bf62:	6863      	ldr	r3, [r4, #4]
 800bf64:	1ac0      	subs	r0, r0, r3
 800bf66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf68:	b10b      	cbz	r3, 800bf6e <__sflush_r+0x46>
 800bf6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf6c:	1ac0      	subs	r0, r0, r3
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4602      	mov	r2, r0
 800bf72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf74:	6a21      	ldr	r1, [r4, #32]
 800bf76:	4628      	mov	r0, r5
 800bf78:	47b0      	blx	r6
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	d106      	bne.n	800bf8e <__sflush_r+0x66>
 800bf80:	6829      	ldr	r1, [r5, #0]
 800bf82:	291d      	cmp	r1, #29
 800bf84:	d82c      	bhi.n	800bfe0 <__sflush_r+0xb8>
 800bf86:	4a2a      	ldr	r2, [pc, #168]	; (800c030 <__sflush_r+0x108>)
 800bf88:	40ca      	lsrs	r2, r1
 800bf8a:	07d6      	lsls	r6, r2, #31
 800bf8c:	d528      	bpl.n	800bfe0 <__sflush_r+0xb8>
 800bf8e:	2200      	movs	r2, #0
 800bf90:	6062      	str	r2, [r4, #4]
 800bf92:	04d9      	lsls	r1, r3, #19
 800bf94:	6922      	ldr	r2, [r4, #16]
 800bf96:	6022      	str	r2, [r4, #0]
 800bf98:	d504      	bpl.n	800bfa4 <__sflush_r+0x7c>
 800bf9a:	1c42      	adds	r2, r0, #1
 800bf9c:	d101      	bne.n	800bfa2 <__sflush_r+0x7a>
 800bf9e:	682b      	ldr	r3, [r5, #0]
 800bfa0:	b903      	cbnz	r3, 800bfa4 <__sflush_r+0x7c>
 800bfa2:	6560      	str	r0, [r4, #84]	; 0x54
 800bfa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfa6:	602f      	str	r7, [r5, #0]
 800bfa8:	2900      	cmp	r1, #0
 800bfaa:	d0ca      	beq.n	800bf42 <__sflush_r+0x1a>
 800bfac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb0:	4299      	cmp	r1, r3
 800bfb2:	d002      	beq.n	800bfba <__sflush_r+0x92>
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f7fd fa23 	bl	8009400 <_free_r>
 800bfba:	2000      	movs	r0, #0
 800bfbc:	6360      	str	r0, [r4, #52]	; 0x34
 800bfbe:	e7c1      	b.n	800bf44 <__sflush_r+0x1c>
 800bfc0:	6a21      	ldr	r1, [r4, #32]
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b0      	blx	r6
 800bfc8:	1c41      	adds	r1, r0, #1
 800bfca:	d1c7      	bne.n	800bf5c <__sflush_r+0x34>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0c4      	beq.n	800bf5c <__sflush_r+0x34>
 800bfd2:	2b1d      	cmp	r3, #29
 800bfd4:	d001      	beq.n	800bfda <__sflush_r+0xb2>
 800bfd6:	2b16      	cmp	r3, #22
 800bfd8:	d101      	bne.n	800bfde <__sflush_r+0xb6>
 800bfda:	602f      	str	r7, [r5, #0]
 800bfdc:	e7b1      	b.n	800bf42 <__sflush_r+0x1a>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe4:	81a3      	strh	r3, [r4, #12]
 800bfe6:	e7ad      	b.n	800bf44 <__sflush_r+0x1c>
 800bfe8:	690f      	ldr	r7, [r1, #16]
 800bfea:	2f00      	cmp	r7, #0
 800bfec:	d0a9      	beq.n	800bf42 <__sflush_r+0x1a>
 800bfee:	0793      	lsls	r3, r2, #30
 800bff0:	680e      	ldr	r6, [r1, #0]
 800bff2:	bf08      	it	eq
 800bff4:	694b      	ldreq	r3, [r1, #20]
 800bff6:	600f      	str	r7, [r1, #0]
 800bff8:	bf18      	it	ne
 800bffa:	2300      	movne	r3, #0
 800bffc:	eba6 0807 	sub.w	r8, r6, r7
 800c000:	608b      	str	r3, [r1, #8]
 800c002:	f1b8 0f00 	cmp.w	r8, #0
 800c006:	dd9c      	ble.n	800bf42 <__sflush_r+0x1a>
 800c008:	6a21      	ldr	r1, [r4, #32]
 800c00a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c00c:	4643      	mov	r3, r8
 800c00e:	463a      	mov	r2, r7
 800c010:	4628      	mov	r0, r5
 800c012:	47b0      	blx	r6
 800c014:	2800      	cmp	r0, #0
 800c016:	dc06      	bgt.n	800c026 <__sflush_r+0xfe>
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01e:	81a3      	strh	r3, [r4, #12]
 800c020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c024:	e78e      	b.n	800bf44 <__sflush_r+0x1c>
 800c026:	4407      	add	r7, r0
 800c028:	eba8 0800 	sub.w	r8, r8, r0
 800c02c:	e7e9      	b.n	800c002 <__sflush_r+0xda>
 800c02e:	bf00      	nop
 800c030:	20400001 	.word	0x20400001

0800c034 <_fflush_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	690b      	ldr	r3, [r1, #16]
 800c038:	4605      	mov	r5, r0
 800c03a:	460c      	mov	r4, r1
 800c03c:	b913      	cbnz	r3, 800c044 <_fflush_r+0x10>
 800c03e:	2500      	movs	r5, #0
 800c040:	4628      	mov	r0, r5
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	b118      	cbz	r0, 800c04e <_fflush_r+0x1a>
 800c046:	6983      	ldr	r3, [r0, #24]
 800c048:	b90b      	cbnz	r3, 800c04e <_fflush_r+0x1a>
 800c04a:	f7fd f8f5 	bl	8009238 <__sinit>
 800c04e:	4b14      	ldr	r3, [pc, #80]	; (800c0a0 <_fflush_r+0x6c>)
 800c050:	429c      	cmp	r4, r3
 800c052:	d11b      	bne.n	800c08c <_fflush_r+0x58>
 800c054:	686c      	ldr	r4, [r5, #4]
 800c056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0ef      	beq.n	800c03e <_fflush_r+0xa>
 800c05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c060:	07d0      	lsls	r0, r2, #31
 800c062:	d404      	bmi.n	800c06e <_fflush_r+0x3a>
 800c064:	0599      	lsls	r1, r3, #22
 800c066:	d402      	bmi.n	800c06e <_fflush_r+0x3a>
 800c068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c06a:	f7fd f9a8 	bl	80093be <__retarget_lock_acquire_recursive>
 800c06e:	4628      	mov	r0, r5
 800c070:	4621      	mov	r1, r4
 800c072:	f7ff ff59 	bl	800bf28 <__sflush_r>
 800c076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c078:	07da      	lsls	r2, r3, #31
 800c07a:	4605      	mov	r5, r0
 800c07c:	d4e0      	bmi.n	800c040 <_fflush_r+0xc>
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	059b      	lsls	r3, r3, #22
 800c082:	d4dd      	bmi.n	800c040 <_fflush_r+0xc>
 800c084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c086:	f7fd f99b 	bl	80093c0 <__retarget_lock_release_recursive>
 800c08a:	e7d9      	b.n	800c040 <_fflush_r+0xc>
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <_fflush_r+0x70>)
 800c08e:	429c      	cmp	r4, r3
 800c090:	d101      	bne.n	800c096 <_fflush_r+0x62>
 800c092:	68ac      	ldr	r4, [r5, #8]
 800c094:	e7df      	b.n	800c056 <_fflush_r+0x22>
 800c096:	4b04      	ldr	r3, [pc, #16]	; (800c0a8 <_fflush_r+0x74>)
 800c098:	429c      	cmp	r4, r3
 800c09a:	bf08      	it	eq
 800c09c:	68ec      	ldreq	r4, [r5, #12]
 800c09e:	e7da      	b.n	800c056 <_fflush_r+0x22>
 800c0a0:	0800e68c 	.word	0x0800e68c
 800c0a4:	0800e6ac 	.word	0x0800e6ac
 800c0a8:	0800e66c 	.word	0x0800e66c

0800c0ac <rshift>:
 800c0ac:	6903      	ldr	r3, [r0, #16]
 800c0ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0ba:	f100 0414 	add.w	r4, r0, #20
 800c0be:	dd45      	ble.n	800c14c <rshift+0xa0>
 800c0c0:	f011 011f 	ands.w	r1, r1, #31
 800c0c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0cc:	d10c      	bne.n	800c0e8 <rshift+0x3c>
 800c0ce:	f100 0710 	add.w	r7, r0, #16
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	42b1      	cmp	r1, r6
 800c0d6:	d334      	bcc.n	800c142 <rshift+0x96>
 800c0d8:	1a9b      	subs	r3, r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	1eea      	subs	r2, r5, #3
 800c0de:	4296      	cmp	r6, r2
 800c0e0:	bf38      	it	cc
 800c0e2:	2300      	movcc	r3, #0
 800c0e4:	4423      	add	r3, r4
 800c0e6:	e015      	b.n	800c114 <rshift+0x68>
 800c0e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0ec:	f1c1 0820 	rsb	r8, r1, #32
 800c0f0:	40cf      	lsrs	r7, r1
 800c0f2:	f105 0e04 	add.w	lr, r5, #4
 800c0f6:	46a1      	mov	r9, r4
 800c0f8:	4576      	cmp	r6, lr
 800c0fa:	46f4      	mov	ip, lr
 800c0fc:	d815      	bhi.n	800c12a <rshift+0x7e>
 800c0fe:	1a9b      	subs	r3, r3, r2
 800c100:	009a      	lsls	r2, r3, #2
 800c102:	3a04      	subs	r2, #4
 800c104:	3501      	adds	r5, #1
 800c106:	42ae      	cmp	r6, r5
 800c108:	bf38      	it	cc
 800c10a:	2200      	movcc	r2, #0
 800c10c:	18a3      	adds	r3, r4, r2
 800c10e:	50a7      	str	r7, [r4, r2]
 800c110:	b107      	cbz	r7, 800c114 <rshift+0x68>
 800c112:	3304      	adds	r3, #4
 800c114:	1b1a      	subs	r2, r3, r4
 800c116:	42a3      	cmp	r3, r4
 800c118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c11c:	bf08      	it	eq
 800c11e:	2300      	moveq	r3, #0
 800c120:	6102      	str	r2, [r0, #16]
 800c122:	bf08      	it	eq
 800c124:	6143      	streq	r3, [r0, #20]
 800c126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c12a:	f8dc c000 	ldr.w	ip, [ip]
 800c12e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c132:	ea4c 0707 	orr.w	r7, ip, r7
 800c136:	f849 7b04 	str.w	r7, [r9], #4
 800c13a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c13e:	40cf      	lsrs	r7, r1
 800c140:	e7da      	b.n	800c0f8 <rshift+0x4c>
 800c142:	f851 cb04 	ldr.w	ip, [r1], #4
 800c146:	f847 cf04 	str.w	ip, [r7, #4]!
 800c14a:	e7c3      	b.n	800c0d4 <rshift+0x28>
 800c14c:	4623      	mov	r3, r4
 800c14e:	e7e1      	b.n	800c114 <rshift+0x68>

0800c150 <__hexdig_fun>:
 800c150:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c154:	2b09      	cmp	r3, #9
 800c156:	d802      	bhi.n	800c15e <__hexdig_fun+0xe>
 800c158:	3820      	subs	r0, #32
 800c15a:	b2c0      	uxtb	r0, r0
 800c15c:	4770      	bx	lr
 800c15e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c162:	2b05      	cmp	r3, #5
 800c164:	d801      	bhi.n	800c16a <__hexdig_fun+0x1a>
 800c166:	3847      	subs	r0, #71	; 0x47
 800c168:	e7f7      	b.n	800c15a <__hexdig_fun+0xa>
 800c16a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c16e:	2b05      	cmp	r3, #5
 800c170:	d801      	bhi.n	800c176 <__hexdig_fun+0x26>
 800c172:	3827      	subs	r0, #39	; 0x27
 800c174:	e7f1      	b.n	800c15a <__hexdig_fun+0xa>
 800c176:	2000      	movs	r0, #0
 800c178:	4770      	bx	lr
	...

0800c17c <__gethex>:
 800c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c180:	ed2d 8b02 	vpush	{d8}
 800c184:	b089      	sub	sp, #36	; 0x24
 800c186:	ee08 0a10 	vmov	s16, r0
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	4bbc      	ldr	r3, [pc, #752]	; (800c480 <__gethex+0x304>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	9301      	str	r3, [sp, #4]
 800c192:	4618      	mov	r0, r3
 800c194:	468b      	mov	fp, r1
 800c196:	4690      	mov	r8, r2
 800c198:	f7f4 f822 	bl	80001e0 <strlen>
 800c19c:	9b01      	ldr	r3, [sp, #4]
 800c19e:	f8db 2000 	ldr.w	r2, [fp]
 800c1a2:	4403      	add	r3, r0
 800c1a4:	4682      	mov	sl, r0
 800c1a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c1aa:	9305      	str	r3, [sp, #20]
 800c1ac:	1c93      	adds	r3, r2, #2
 800c1ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c1b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c1b6:	32fe      	adds	r2, #254	; 0xfe
 800c1b8:	18d1      	adds	r1, r2, r3
 800c1ba:	461f      	mov	r7, r3
 800c1bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1c0:	9100      	str	r1, [sp, #0]
 800c1c2:	2830      	cmp	r0, #48	; 0x30
 800c1c4:	d0f8      	beq.n	800c1b8 <__gethex+0x3c>
 800c1c6:	f7ff ffc3 	bl	800c150 <__hexdig_fun>
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d13a      	bne.n	800c246 <__gethex+0xca>
 800c1d0:	9901      	ldr	r1, [sp, #4]
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	f7fe f948 	bl	800a46a <strncmp>
 800c1da:	4605      	mov	r5, r0
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d168      	bne.n	800c2b2 <__gethex+0x136>
 800c1e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c1e4:	eb07 060a 	add.w	r6, r7, sl
 800c1e8:	f7ff ffb2 	bl	800c150 <__hexdig_fun>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d062      	beq.n	800c2b6 <__gethex+0x13a>
 800c1f0:	4633      	mov	r3, r6
 800c1f2:	7818      	ldrb	r0, [r3, #0]
 800c1f4:	2830      	cmp	r0, #48	; 0x30
 800c1f6:	461f      	mov	r7, r3
 800c1f8:	f103 0301 	add.w	r3, r3, #1
 800c1fc:	d0f9      	beq.n	800c1f2 <__gethex+0x76>
 800c1fe:	f7ff ffa7 	bl	800c150 <__hexdig_fun>
 800c202:	2301      	movs	r3, #1
 800c204:	fab0 f480 	clz	r4, r0
 800c208:	0964      	lsrs	r4, r4, #5
 800c20a:	4635      	mov	r5, r6
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	463a      	mov	r2, r7
 800c210:	4616      	mov	r6, r2
 800c212:	3201      	adds	r2, #1
 800c214:	7830      	ldrb	r0, [r6, #0]
 800c216:	f7ff ff9b 	bl	800c150 <__hexdig_fun>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d1f8      	bne.n	800c210 <__gethex+0x94>
 800c21e:	9901      	ldr	r1, [sp, #4]
 800c220:	4652      	mov	r2, sl
 800c222:	4630      	mov	r0, r6
 800c224:	f7fe f921 	bl	800a46a <strncmp>
 800c228:	b980      	cbnz	r0, 800c24c <__gethex+0xd0>
 800c22a:	b94d      	cbnz	r5, 800c240 <__gethex+0xc4>
 800c22c:	eb06 050a 	add.w	r5, r6, sl
 800c230:	462a      	mov	r2, r5
 800c232:	4616      	mov	r6, r2
 800c234:	3201      	adds	r2, #1
 800c236:	7830      	ldrb	r0, [r6, #0]
 800c238:	f7ff ff8a 	bl	800c150 <__hexdig_fun>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d1f8      	bne.n	800c232 <__gethex+0xb6>
 800c240:	1bad      	subs	r5, r5, r6
 800c242:	00ad      	lsls	r5, r5, #2
 800c244:	e004      	b.n	800c250 <__gethex+0xd4>
 800c246:	2400      	movs	r4, #0
 800c248:	4625      	mov	r5, r4
 800c24a:	e7e0      	b.n	800c20e <__gethex+0x92>
 800c24c:	2d00      	cmp	r5, #0
 800c24e:	d1f7      	bne.n	800c240 <__gethex+0xc4>
 800c250:	7833      	ldrb	r3, [r6, #0]
 800c252:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c256:	2b50      	cmp	r3, #80	; 0x50
 800c258:	d13b      	bne.n	800c2d2 <__gethex+0x156>
 800c25a:	7873      	ldrb	r3, [r6, #1]
 800c25c:	2b2b      	cmp	r3, #43	; 0x2b
 800c25e:	d02c      	beq.n	800c2ba <__gethex+0x13e>
 800c260:	2b2d      	cmp	r3, #45	; 0x2d
 800c262:	d02e      	beq.n	800c2c2 <__gethex+0x146>
 800c264:	1c71      	adds	r1, r6, #1
 800c266:	f04f 0900 	mov.w	r9, #0
 800c26a:	7808      	ldrb	r0, [r1, #0]
 800c26c:	f7ff ff70 	bl	800c150 <__hexdig_fun>
 800c270:	1e43      	subs	r3, r0, #1
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b18      	cmp	r3, #24
 800c276:	d82c      	bhi.n	800c2d2 <__gethex+0x156>
 800c278:	f1a0 0210 	sub.w	r2, r0, #16
 800c27c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c280:	f7ff ff66 	bl	800c150 <__hexdig_fun>
 800c284:	1e43      	subs	r3, r0, #1
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b18      	cmp	r3, #24
 800c28a:	d91d      	bls.n	800c2c8 <__gethex+0x14c>
 800c28c:	f1b9 0f00 	cmp.w	r9, #0
 800c290:	d000      	beq.n	800c294 <__gethex+0x118>
 800c292:	4252      	negs	r2, r2
 800c294:	4415      	add	r5, r2
 800c296:	f8cb 1000 	str.w	r1, [fp]
 800c29a:	b1e4      	cbz	r4, 800c2d6 <__gethex+0x15a>
 800c29c:	9b00      	ldr	r3, [sp, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	bf14      	ite	ne
 800c2a2:	2700      	movne	r7, #0
 800c2a4:	2706      	moveq	r7, #6
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	b009      	add	sp, #36	; 0x24
 800c2aa:	ecbd 8b02 	vpop	{d8}
 800c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b2:	463e      	mov	r6, r7
 800c2b4:	4625      	mov	r5, r4
 800c2b6:	2401      	movs	r4, #1
 800c2b8:	e7ca      	b.n	800c250 <__gethex+0xd4>
 800c2ba:	f04f 0900 	mov.w	r9, #0
 800c2be:	1cb1      	adds	r1, r6, #2
 800c2c0:	e7d3      	b.n	800c26a <__gethex+0xee>
 800c2c2:	f04f 0901 	mov.w	r9, #1
 800c2c6:	e7fa      	b.n	800c2be <__gethex+0x142>
 800c2c8:	230a      	movs	r3, #10
 800c2ca:	fb03 0202 	mla	r2, r3, r2, r0
 800c2ce:	3a10      	subs	r2, #16
 800c2d0:	e7d4      	b.n	800c27c <__gethex+0x100>
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	e7df      	b.n	800c296 <__gethex+0x11a>
 800c2d6:	1bf3      	subs	r3, r6, r7
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	4621      	mov	r1, r4
 800c2dc:	2b07      	cmp	r3, #7
 800c2de:	dc0b      	bgt.n	800c2f8 <__gethex+0x17c>
 800c2e0:	ee18 0a10 	vmov	r0, s16
 800c2e4:	f000 fa86 	bl	800c7f4 <_Balloc>
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	b940      	cbnz	r0, 800c2fe <__gethex+0x182>
 800c2ec:	4b65      	ldr	r3, [pc, #404]	; (800c484 <__gethex+0x308>)
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	21de      	movs	r1, #222	; 0xde
 800c2f2:	4865      	ldr	r0, [pc, #404]	; (800c488 <__gethex+0x30c>)
 800c2f4:	f001 fcdc 	bl	800dcb0 <__assert_func>
 800c2f8:	3101      	adds	r1, #1
 800c2fa:	105b      	asrs	r3, r3, #1
 800c2fc:	e7ee      	b.n	800c2dc <__gethex+0x160>
 800c2fe:	f100 0914 	add.w	r9, r0, #20
 800c302:	f04f 0b00 	mov.w	fp, #0
 800c306:	f1ca 0301 	rsb	r3, sl, #1
 800c30a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c30e:	f8cd b000 	str.w	fp, [sp]
 800c312:	9306      	str	r3, [sp, #24]
 800c314:	42b7      	cmp	r7, r6
 800c316:	d340      	bcc.n	800c39a <__gethex+0x21e>
 800c318:	9802      	ldr	r0, [sp, #8]
 800c31a:	9b00      	ldr	r3, [sp, #0]
 800c31c:	f840 3b04 	str.w	r3, [r0], #4
 800c320:	eba0 0009 	sub.w	r0, r0, r9
 800c324:	1080      	asrs	r0, r0, #2
 800c326:	0146      	lsls	r6, r0, #5
 800c328:	6120      	str	r0, [r4, #16]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 fb58 	bl	800c9e0 <__hi0bits>
 800c330:	1a30      	subs	r0, r6, r0
 800c332:	f8d8 6000 	ldr.w	r6, [r8]
 800c336:	42b0      	cmp	r0, r6
 800c338:	dd63      	ble.n	800c402 <__gethex+0x286>
 800c33a:	1b87      	subs	r7, r0, r6
 800c33c:	4639      	mov	r1, r7
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 fef2 	bl	800d128 <__any_on>
 800c344:	4682      	mov	sl, r0
 800c346:	b1a8      	cbz	r0, 800c374 <__gethex+0x1f8>
 800c348:	1e7b      	subs	r3, r7, #1
 800c34a:	1159      	asrs	r1, r3, #5
 800c34c:	f003 021f 	and.w	r2, r3, #31
 800c350:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c354:	f04f 0a01 	mov.w	sl, #1
 800c358:	fa0a f202 	lsl.w	r2, sl, r2
 800c35c:	420a      	tst	r2, r1
 800c35e:	d009      	beq.n	800c374 <__gethex+0x1f8>
 800c360:	4553      	cmp	r3, sl
 800c362:	dd05      	ble.n	800c370 <__gethex+0x1f4>
 800c364:	1eb9      	subs	r1, r7, #2
 800c366:	4620      	mov	r0, r4
 800c368:	f000 fede 	bl	800d128 <__any_on>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d145      	bne.n	800c3fc <__gethex+0x280>
 800c370:	f04f 0a02 	mov.w	sl, #2
 800c374:	4639      	mov	r1, r7
 800c376:	4620      	mov	r0, r4
 800c378:	f7ff fe98 	bl	800c0ac <rshift>
 800c37c:	443d      	add	r5, r7
 800c37e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c382:	42ab      	cmp	r3, r5
 800c384:	da4c      	bge.n	800c420 <__gethex+0x2a4>
 800c386:	ee18 0a10 	vmov	r0, s16
 800c38a:	4621      	mov	r1, r4
 800c38c:	f000 fa72 	bl	800c874 <_Bfree>
 800c390:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c392:	2300      	movs	r3, #0
 800c394:	6013      	str	r3, [r2, #0]
 800c396:	27a3      	movs	r7, #163	; 0xa3
 800c398:	e785      	b.n	800c2a6 <__gethex+0x12a>
 800c39a:	1e73      	subs	r3, r6, #1
 800c39c:	9a05      	ldr	r2, [sp, #20]
 800c39e:	9303      	str	r3, [sp, #12]
 800c3a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d019      	beq.n	800c3dc <__gethex+0x260>
 800c3a8:	f1bb 0f20 	cmp.w	fp, #32
 800c3ac:	d107      	bne.n	800c3be <__gethex+0x242>
 800c3ae:	9b02      	ldr	r3, [sp, #8]
 800c3b0:	9a00      	ldr	r2, [sp, #0]
 800c3b2:	f843 2b04 	str.w	r2, [r3], #4
 800c3b6:	9302      	str	r3, [sp, #8]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	469b      	mov	fp, r3
 800c3be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c3c2:	f7ff fec5 	bl	800c150 <__hexdig_fun>
 800c3c6:	9b00      	ldr	r3, [sp, #0]
 800c3c8:	f000 000f 	and.w	r0, r0, #15
 800c3cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c3d0:	4303      	orrs	r3, r0
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	f10b 0b04 	add.w	fp, fp, #4
 800c3d8:	9b03      	ldr	r3, [sp, #12]
 800c3da:	e00d      	b.n	800c3f8 <__gethex+0x27c>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	9a06      	ldr	r2, [sp, #24]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	42bb      	cmp	r3, r7
 800c3e4:	d3e0      	bcc.n	800c3a8 <__gethex+0x22c>
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	9901      	ldr	r1, [sp, #4]
 800c3ea:	9307      	str	r3, [sp, #28]
 800c3ec:	4652      	mov	r2, sl
 800c3ee:	f7fe f83c 	bl	800a46a <strncmp>
 800c3f2:	9b07      	ldr	r3, [sp, #28]
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1d7      	bne.n	800c3a8 <__gethex+0x22c>
 800c3f8:	461e      	mov	r6, r3
 800c3fa:	e78b      	b.n	800c314 <__gethex+0x198>
 800c3fc:	f04f 0a03 	mov.w	sl, #3
 800c400:	e7b8      	b.n	800c374 <__gethex+0x1f8>
 800c402:	da0a      	bge.n	800c41a <__gethex+0x29e>
 800c404:	1a37      	subs	r7, r6, r0
 800c406:	4621      	mov	r1, r4
 800c408:	ee18 0a10 	vmov	r0, s16
 800c40c:	463a      	mov	r2, r7
 800c40e:	f000 fc4d 	bl	800ccac <__lshift>
 800c412:	1bed      	subs	r5, r5, r7
 800c414:	4604      	mov	r4, r0
 800c416:	f100 0914 	add.w	r9, r0, #20
 800c41a:	f04f 0a00 	mov.w	sl, #0
 800c41e:	e7ae      	b.n	800c37e <__gethex+0x202>
 800c420:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c424:	42a8      	cmp	r0, r5
 800c426:	dd72      	ble.n	800c50e <__gethex+0x392>
 800c428:	1b45      	subs	r5, r0, r5
 800c42a:	42ae      	cmp	r6, r5
 800c42c:	dc36      	bgt.n	800c49c <__gethex+0x320>
 800c42e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c432:	2b02      	cmp	r3, #2
 800c434:	d02a      	beq.n	800c48c <__gethex+0x310>
 800c436:	2b03      	cmp	r3, #3
 800c438:	d02c      	beq.n	800c494 <__gethex+0x318>
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d115      	bne.n	800c46a <__gethex+0x2ee>
 800c43e:	42ae      	cmp	r6, r5
 800c440:	d113      	bne.n	800c46a <__gethex+0x2ee>
 800c442:	2e01      	cmp	r6, #1
 800c444:	d10b      	bne.n	800c45e <__gethex+0x2e2>
 800c446:	9a04      	ldr	r2, [sp, #16]
 800c448:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	2301      	movs	r3, #1
 800c450:	6123      	str	r3, [r4, #16]
 800c452:	f8c9 3000 	str.w	r3, [r9]
 800c456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c458:	2762      	movs	r7, #98	; 0x62
 800c45a:	601c      	str	r4, [r3, #0]
 800c45c:	e723      	b.n	800c2a6 <__gethex+0x12a>
 800c45e:	1e71      	subs	r1, r6, #1
 800c460:	4620      	mov	r0, r4
 800c462:	f000 fe61 	bl	800d128 <__any_on>
 800c466:	2800      	cmp	r0, #0
 800c468:	d1ed      	bne.n	800c446 <__gethex+0x2ca>
 800c46a:	ee18 0a10 	vmov	r0, s16
 800c46e:	4621      	mov	r1, r4
 800c470:	f000 fa00 	bl	800c874 <_Bfree>
 800c474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c476:	2300      	movs	r3, #0
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	2750      	movs	r7, #80	; 0x50
 800c47c:	e713      	b.n	800c2a6 <__gethex+0x12a>
 800c47e:	bf00      	nop
 800c480:	0800e958 	.word	0x0800e958
 800c484:	0800e8dc 	.word	0x0800e8dc
 800c488:	0800e8ed 	.word	0x0800e8ed
 800c48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1eb      	bne.n	800c46a <__gethex+0x2ee>
 800c492:	e7d8      	b.n	800c446 <__gethex+0x2ca>
 800c494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1d5      	bne.n	800c446 <__gethex+0x2ca>
 800c49a:	e7e6      	b.n	800c46a <__gethex+0x2ee>
 800c49c:	1e6f      	subs	r7, r5, #1
 800c49e:	f1ba 0f00 	cmp.w	sl, #0
 800c4a2:	d131      	bne.n	800c508 <__gethex+0x38c>
 800c4a4:	b127      	cbz	r7, 800c4b0 <__gethex+0x334>
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 fe3d 	bl	800d128 <__any_on>
 800c4ae:	4682      	mov	sl, r0
 800c4b0:	117b      	asrs	r3, r7, #5
 800c4b2:	2101      	movs	r1, #1
 800c4b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c4b8:	f007 071f 	and.w	r7, r7, #31
 800c4bc:	fa01 f707 	lsl.w	r7, r1, r7
 800c4c0:	421f      	tst	r7, r3
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	bf18      	it	ne
 800c4c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c4cc:	1b76      	subs	r6, r6, r5
 800c4ce:	f7ff fded 	bl	800c0ac <rshift>
 800c4d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c4d6:	2702      	movs	r7, #2
 800c4d8:	f1ba 0f00 	cmp.w	sl, #0
 800c4dc:	d048      	beq.n	800c570 <__gethex+0x3f4>
 800c4de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d015      	beq.n	800c512 <__gethex+0x396>
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d017      	beq.n	800c51a <__gethex+0x39e>
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d109      	bne.n	800c502 <__gethex+0x386>
 800c4ee:	f01a 0f02 	tst.w	sl, #2
 800c4f2:	d006      	beq.n	800c502 <__gethex+0x386>
 800c4f4:	f8d9 0000 	ldr.w	r0, [r9]
 800c4f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c4fc:	f01a 0f01 	tst.w	sl, #1
 800c500:	d10e      	bne.n	800c520 <__gethex+0x3a4>
 800c502:	f047 0710 	orr.w	r7, r7, #16
 800c506:	e033      	b.n	800c570 <__gethex+0x3f4>
 800c508:	f04f 0a01 	mov.w	sl, #1
 800c50c:	e7d0      	b.n	800c4b0 <__gethex+0x334>
 800c50e:	2701      	movs	r7, #1
 800c510:	e7e2      	b.n	800c4d8 <__gethex+0x35c>
 800c512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c514:	f1c3 0301 	rsb	r3, r3, #1
 800c518:	9315      	str	r3, [sp, #84]	; 0x54
 800c51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0f0      	beq.n	800c502 <__gethex+0x386>
 800c520:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c524:	f104 0314 	add.w	r3, r4, #20
 800c528:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c52c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c530:	f04f 0c00 	mov.w	ip, #0
 800c534:	4618      	mov	r0, r3
 800c536:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c53e:	d01c      	beq.n	800c57a <__gethex+0x3fe>
 800c540:	3201      	adds	r2, #1
 800c542:	6002      	str	r2, [r0, #0]
 800c544:	2f02      	cmp	r7, #2
 800c546:	f104 0314 	add.w	r3, r4, #20
 800c54a:	d13f      	bne.n	800c5cc <__gethex+0x450>
 800c54c:	f8d8 2000 	ldr.w	r2, [r8]
 800c550:	3a01      	subs	r2, #1
 800c552:	42b2      	cmp	r2, r6
 800c554:	d10a      	bne.n	800c56c <__gethex+0x3f0>
 800c556:	1171      	asrs	r1, r6, #5
 800c558:	2201      	movs	r2, #1
 800c55a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c55e:	f006 061f 	and.w	r6, r6, #31
 800c562:	fa02 f606 	lsl.w	r6, r2, r6
 800c566:	421e      	tst	r6, r3
 800c568:	bf18      	it	ne
 800c56a:	4617      	movne	r7, r2
 800c56c:	f047 0720 	orr.w	r7, r7, #32
 800c570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c572:	601c      	str	r4, [r3, #0]
 800c574:	9b04      	ldr	r3, [sp, #16]
 800c576:	601d      	str	r5, [r3, #0]
 800c578:	e695      	b.n	800c2a6 <__gethex+0x12a>
 800c57a:	4299      	cmp	r1, r3
 800c57c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c580:	d8d8      	bhi.n	800c534 <__gethex+0x3b8>
 800c582:	68a3      	ldr	r3, [r4, #8]
 800c584:	459b      	cmp	fp, r3
 800c586:	db19      	blt.n	800c5bc <__gethex+0x440>
 800c588:	6861      	ldr	r1, [r4, #4]
 800c58a:	ee18 0a10 	vmov	r0, s16
 800c58e:	3101      	adds	r1, #1
 800c590:	f000 f930 	bl	800c7f4 <_Balloc>
 800c594:	4681      	mov	r9, r0
 800c596:	b918      	cbnz	r0, 800c5a0 <__gethex+0x424>
 800c598:	4b1a      	ldr	r3, [pc, #104]	; (800c604 <__gethex+0x488>)
 800c59a:	4602      	mov	r2, r0
 800c59c:	2184      	movs	r1, #132	; 0x84
 800c59e:	e6a8      	b.n	800c2f2 <__gethex+0x176>
 800c5a0:	6922      	ldr	r2, [r4, #16]
 800c5a2:	3202      	adds	r2, #2
 800c5a4:	f104 010c 	add.w	r1, r4, #12
 800c5a8:	0092      	lsls	r2, r2, #2
 800c5aa:	300c      	adds	r0, #12
 800c5ac:	f7fc ff12 	bl	80093d4 <memcpy>
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	ee18 0a10 	vmov	r0, s16
 800c5b6:	f000 f95d 	bl	800c874 <_Bfree>
 800c5ba:	464c      	mov	r4, r9
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5c4:	6122      	str	r2, [r4, #16]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	615a      	str	r2, [r3, #20]
 800c5ca:	e7bb      	b.n	800c544 <__gethex+0x3c8>
 800c5cc:	6922      	ldr	r2, [r4, #16]
 800c5ce:	455a      	cmp	r2, fp
 800c5d0:	dd0b      	ble.n	800c5ea <__gethex+0x46e>
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f7ff fd69 	bl	800c0ac <rshift>
 800c5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5de:	3501      	adds	r5, #1
 800c5e0:	42ab      	cmp	r3, r5
 800c5e2:	f6ff aed0 	blt.w	800c386 <__gethex+0x20a>
 800c5e6:	2701      	movs	r7, #1
 800c5e8:	e7c0      	b.n	800c56c <__gethex+0x3f0>
 800c5ea:	f016 061f 	ands.w	r6, r6, #31
 800c5ee:	d0fa      	beq.n	800c5e6 <__gethex+0x46a>
 800c5f0:	449a      	add	sl, r3
 800c5f2:	f1c6 0620 	rsb	r6, r6, #32
 800c5f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c5fa:	f000 f9f1 	bl	800c9e0 <__hi0bits>
 800c5fe:	42b0      	cmp	r0, r6
 800c600:	dbe7      	blt.n	800c5d2 <__gethex+0x456>
 800c602:	e7f0      	b.n	800c5e6 <__gethex+0x46a>
 800c604:	0800e8dc 	.word	0x0800e8dc

0800c608 <L_shift>:
 800c608:	f1c2 0208 	rsb	r2, r2, #8
 800c60c:	0092      	lsls	r2, r2, #2
 800c60e:	b570      	push	{r4, r5, r6, lr}
 800c610:	f1c2 0620 	rsb	r6, r2, #32
 800c614:	6843      	ldr	r3, [r0, #4]
 800c616:	6804      	ldr	r4, [r0, #0]
 800c618:	fa03 f506 	lsl.w	r5, r3, r6
 800c61c:	432c      	orrs	r4, r5
 800c61e:	40d3      	lsrs	r3, r2
 800c620:	6004      	str	r4, [r0, #0]
 800c622:	f840 3f04 	str.w	r3, [r0, #4]!
 800c626:	4288      	cmp	r0, r1
 800c628:	d3f4      	bcc.n	800c614 <L_shift+0xc>
 800c62a:	bd70      	pop	{r4, r5, r6, pc}

0800c62c <__match>:
 800c62c:	b530      	push	{r4, r5, lr}
 800c62e:	6803      	ldr	r3, [r0, #0]
 800c630:	3301      	adds	r3, #1
 800c632:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c636:	b914      	cbnz	r4, 800c63e <__match+0x12>
 800c638:	6003      	str	r3, [r0, #0]
 800c63a:	2001      	movs	r0, #1
 800c63c:	bd30      	pop	{r4, r5, pc}
 800c63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c646:	2d19      	cmp	r5, #25
 800c648:	bf98      	it	ls
 800c64a:	3220      	addls	r2, #32
 800c64c:	42a2      	cmp	r2, r4
 800c64e:	d0f0      	beq.n	800c632 <__match+0x6>
 800c650:	2000      	movs	r0, #0
 800c652:	e7f3      	b.n	800c63c <__match+0x10>

0800c654 <__hexnan>:
 800c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	680b      	ldr	r3, [r1, #0]
 800c65a:	6801      	ldr	r1, [r0, #0]
 800c65c:	115e      	asrs	r6, r3, #5
 800c65e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c662:	f013 031f 	ands.w	r3, r3, #31
 800c666:	b087      	sub	sp, #28
 800c668:	bf18      	it	ne
 800c66a:	3604      	addne	r6, #4
 800c66c:	2500      	movs	r5, #0
 800c66e:	1f37      	subs	r7, r6, #4
 800c670:	4682      	mov	sl, r0
 800c672:	4690      	mov	r8, r2
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	f846 5c04 	str.w	r5, [r6, #-4]
 800c67a:	46b9      	mov	r9, r7
 800c67c:	463c      	mov	r4, r7
 800c67e:	9502      	str	r5, [sp, #8]
 800c680:	46ab      	mov	fp, r5
 800c682:	784a      	ldrb	r2, [r1, #1]
 800c684:	1c4b      	adds	r3, r1, #1
 800c686:	9303      	str	r3, [sp, #12]
 800c688:	b342      	cbz	r2, 800c6dc <__hexnan+0x88>
 800c68a:	4610      	mov	r0, r2
 800c68c:	9105      	str	r1, [sp, #20]
 800c68e:	9204      	str	r2, [sp, #16]
 800c690:	f7ff fd5e 	bl	800c150 <__hexdig_fun>
 800c694:	2800      	cmp	r0, #0
 800c696:	d14f      	bne.n	800c738 <__hexnan+0xe4>
 800c698:	9a04      	ldr	r2, [sp, #16]
 800c69a:	9905      	ldr	r1, [sp, #20]
 800c69c:	2a20      	cmp	r2, #32
 800c69e:	d818      	bhi.n	800c6d2 <__hexnan+0x7e>
 800c6a0:	9b02      	ldr	r3, [sp, #8]
 800c6a2:	459b      	cmp	fp, r3
 800c6a4:	dd13      	ble.n	800c6ce <__hexnan+0x7a>
 800c6a6:	454c      	cmp	r4, r9
 800c6a8:	d206      	bcs.n	800c6b8 <__hexnan+0x64>
 800c6aa:	2d07      	cmp	r5, #7
 800c6ac:	dc04      	bgt.n	800c6b8 <__hexnan+0x64>
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff ffa8 	bl	800c608 <L_shift>
 800c6b8:	4544      	cmp	r4, r8
 800c6ba:	d950      	bls.n	800c75e <__hexnan+0x10a>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f1a4 0904 	sub.w	r9, r4, #4
 800c6c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6c6:	f8cd b008 	str.w	fp, [sp, #8]
 800c6ca:	464c      	mov	r4, r9
 800c6cc:	461d      	mov	r5, r3
 800c6ce:	9903      	ldr	r1, [sp, #12]
 800c6d0:	e7d7      	b.n	800c682 <__hexnan+0x2e>
 800c6d2:	2a29      	cmp	r2, #41	; 0x29
 800c6d4:	d156      	bne.n	800c784 <__hexnan+0x130>
 800c6d6:	3102      	adds	r1, #2
 800c6d8:	f8ca 1000 	str.w	r1, [sl]
 800c6dc:	f1bb 0f00 	cmp.w	fp, #0
 800c6e0:	d050      	beq.n	800c784 <__hexnan+0x130>
 800c6e2:	454c      	cmp	r4, r9
 800c6e4:	d206      	bcs.n	800c6f4 <__hexnan+0xa0>
 800c6e6:	2d07      	cmp	r5, #7
 800c6e8:	dc04      	bgt.n	800c6f4 <__hexnan+0xa0>
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f7ff ff8a 	bl	800c608 <L_shift>
 800c6f4:	4544      	cmp	r4, r8
 800c6f6:	d934      	bls.n	800c762 <__hexnan+0x10e>
 800c6f8:	f1a8 0204 	sub.w	r2, r8, #4
 800c6fc:	4623      	mov	r3, r4
 800c6fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800c702:	f842 1f04 	str.w	r1, [r2, #4]!
 800c706:	429f      	cmp	r7, r3
 800c708:	d2f9      	bcs.n	800c6fe <__hexnan+0xaa>
 800c70a:	1b3b      	subs	r3, r7, r4
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	3304      	adds	r3, #4
 800c712:	3401      	adds	r4, #1
 800c714:	3e03      	subs	r6, #3
 800c716:	42b4      	cmp	r4, r6
 800c718:	bf88      	it	hi
 800c71a:	2304      	movhi	r3, #4
 800c71c:	4443      	add	r3, r8
 800c71e:	2200      	movs	r2, #0
 800c720:	f843 2b04 	str.w	r2, [r3], #4
 800c724:	429f      	cmp	r7, r3
 800c726:	d2fb      	bcs.n	800c720 <__hexnan+0xcc>
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	b91b      	cbnz	r3, 800c734 <__hexnan+0xe0>
 800c72c:	4547      	cmp	r7, r8
 800c72e:	d127      	bne.n	800c780 <__hexnan+0x12c>
 800c730:	2301      	movs	r3, #1
 800c732:	603b      	str	r3, [r7, #0]
 800c734:	2005      	movs	r0, #5
 800c736:	e026      	b.n	800c786 <__hexnan+0x132>
 800c738:	3501      	adds	r5, #1
 800c73a:	2d08      	cmp	r5, #8
 800c73c:	f10b 0b01 	add.w	fp, fp, #1
 800c740:	dd06      	ble.n	800c750 <__hexnan+0xfc>
 800c742:	4544      	cmp	r4, r8
 800c744:	d9c3      	bls.n	800c6ce <__hexnan+0x7a>
 800c746:	2300      	movs	r3, #0
 800c748:	f844 3c04 	str.w	r3, [r4, #-4]
 800c74c:	2501      	movs	r5, #1
 800c74e:	3c04      	subs	r4, #4
 800c750:	6822      	ldr	r2, [r4, #0]
 800c752:	f000 000f 	and.w	r0, r0, #15
 800c756:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c75a:	6022      	str	r2, [r4, #0]
 800c75c:	e7b7      	b.n	800c6ce <__hexnan+0x7a>
 800c75e:	2508      	movs	r5, #8
 800c760:	e7b5      	b.n	800c6ce <__hexnan+0x7a>
 800c762:	9b01      	ldr	r3, [sp, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d0df      	beq.n	800c728 <__hexnan+0xd4>
 800c768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c76c:	f1c3 0320 	rsb	r3, r3, #32
 800c770:	fa22 f303 	lsr.w	r3, r2, r3
 800c774:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c778:	401a      	ands	r2, r3
 800c77a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c77e:	e7d3      	b.n	800c728 <__hexnan+0xd4>
 800c780:	3f04      	subs	r7, #4
 800c782:	e7d1      	b.n	800c728 <__hexnan+0xd4>
 800c784:	2004      	movs	r0, #4
 800c786:	b007      	add	sp, #28
 800c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c78c <_localeconv_r>:
 800c78c:	4800      	ldr	r0, [pc, #0]	; (800c790 <_localeconv_r+0x4>)
 800c78e:	4770      	bx	lr
 800c790:	20000168 	.word	0x20000168

0800c794 <_lseek_r>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	4d07      	ldr	r5, [pc, #28]	; (800c7b4 <_lseek_r+0x20>)
 800c798:	4604      	mov	r4, r0
 800c79a:	4608      	mov	r0, r1
 800c79c:	4611      	mov	r1, r2
 800c79e:	2200      	movs	r2, #0
 800c7a0:	602a      	str	r2, [r5, #0]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	f7f6 fb02 	bl	8002dac <_lseek>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_lseek_r+0x1e>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_lseek_r+0x1e>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	20006064 	.word	0x20006064

0800c7b8 <__ascii_mbtowc>:
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	b901      	cbnz	r1, 800c7be <__ascii_mbtowc+0x6>
 800c7bc:	a901      	add	r1, sp, #4
 800c7be:	b142      	cbz	r2, 800c7d2 <__ascii_mbtowc+0x1a>
 800c7c0:	b14b      	cbz	r3, 800c7d6 <__ascii_mbtowc+0x1e>
 800c7c2:	7813      	ldrb	r3, [r2, #0]
 800c7c4:	600b      	str	r3, [r1, #0]
 800c7c6:	7812      	ldrb	r2, [r2, #0]
 800c7c8:	1e10      	subs	r0, r2, #0
 800c7ca:	bf18      	it	ne
 800c7cc:	2001      	movne	r0, #1
 800c7ce:	b002      	add	sp, #8
 800c7d0:	4770      	bx	lr
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	e7fb      	b.n	800c7ce <__ascii_mbtowc+0x16>
 800c7d6:	f06f 0001 	mvn.w	r0, #1
 800c7da:	e7f8      	b.n	800c7ce <__ascii_mbtowc+0x16>

0800c7dc <__malloc_lock>:
 800c7dc:	4801      	ldr	r0, [pc, #4]	; (800c7e4 <__malloc_lock+0x8>)
 800c7de:	f7fc bdee 	b.w	80093be <__retarget_lock_acquire_recursive>
 800c7e2:	bf00      	nop
 800c7e4:	2000605c 	.word	0x2000605c

0800c7e8 <__malloc_unlock>:
 800c7e8:	4801      	ldr	r0, [pc, #4]	; (800c7f0 <__malloc_unlock+0x8>)
 800c7ea:	f7fc bde9 	b.w	80093c0 <__retarget_lock_release_recursive>
 800c7ee:	bf00      	nop
 800c7f0:	2000605c 	.word	0x2000605c

0800c7f4 <_Balloc>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	b976      	cbnz	r6, 800c81c <_Balloc+0x28>
 800c7fe:	2010      	movs	r0, #16
 800c800:	f7fc fde0 	bl	80093c4 <malloc>
 800c804:	4602      	mov	r2, r0
 800c806:	6260      	str	r0, [r4, #36]	; 0x24
 800c808:	b920      	cbnz	r0, 800c814 <_Balloc+0x20>
 800c80a:	4b18      	ldr	r3, [pc, #96]	; (800c86c <_Balloc+0x78>)
 800c80c:	4818      	ldr	r0, [pc, #96]	; (800c870 <_Balloc+0x7c>)
 800c80e:	2166      	movs	r1, #102	; 0x66
 800c810:	f001 fa4e 	bl	800dcb0 <__assert_func>
 800c814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c818:	6006      	str	r6, [r0, #0]
 800c81a:	60c6      	str	r6, [r0, #12]
 800c81c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c81e:	68f3      	ldr	r3, [r6, #12]
 800c820:	b183      	cbz	r3, 800c844 <_Balloc+0x50>
 800c822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c82a:	b9b8      	cbnz	r0, 800c85c <_Balloc+0x68>
 800c82c:	2101      	movs	r1, #1
 800c82e:	fa01 f605 	lsl.w	r6, r1, r5
 800c832:	1d72      	adds	r2, r6, #5
 800c834:	0092      	lsls	r2, r2, #2
 800c836:	4620      	mov	r0, r4
 800c838:	f000 fc97 	bl	800d16a <_calloc_r>
 800c83c:	b160      	cbz	r0, 800c858 <_Balloc+0x64>
 800c83e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c842:	e00e      	b.n	800c862 <_Balloc+0x6e>
 800c844:	2221      	movs	r2, #33	; 0x21
 800c846:	2104      	movs	r1, #4
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 fc8e 	bl	800d16a <_calloc_r>
 800c84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c850:	60f0      	str	r0, [r6, #12]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e4      	bne.n	800c822 <_Balloc+0x2e>
 800c858:	2000      	movs	r0, #0
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	6802      	ldr	r2, [r0, #0]
 800c85e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c862:	2300      	movs	r3, #0
 800c864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c868:	e7f7      	b.n	800c85a <_Balloc+0x66>
 800c86a:	bf00      	nop
 800c86c:	0800e866 	.word	0x0800e866
 800c870:	0800e96c 	.word	0x0800e96c

0800c874 <_Bfree>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c878:	4605      	mov	r5, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	b976      	cbnz	r6, 800c89c <_Bfree+0x28>
 800c87e:	2010      	movs	r0, #16
 800c880:	f7fc fda0 	bl	80093c4 <malloc>
 800c884:	4602      	mov	r2, r0
 800c886:	6268      	str	r0, [r5, #36]	; 0x24
 800c888:	b920      	cbnz	r0, 800c894 <_Bfree+0x20>
 800c88a:	4b09      	ldr	r3, [pc, #36]	; (800c8b0 <_Bfree+0x3c>)
 800c88c:	4809      	ldr	r0, [pc, #36]	; (800c8b4 <_Bfree+0x40>)
 800c88e:	218a      	movs	r1, #138	; 0x8a
 800c890:	f001 fa0e 	bl	800dcb0 <__assert_func>
 800c894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c898:	6006      	str	r6, [r0, #0]
 800c89a:	60c6      	str	r6, [r0, #12]
 800c89c:	b13c      	cbz	r4, 800c8ae <_Bfree+0x3a>
 800c89e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8a0:	6862      	ldr	r2, [r4, #4]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8a8:	6021      	str	r1, [r4, #0]
 800c8aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	0800e866 	.word	0x0800e866
 800c8b4:	0800e96c 	.word	0x0800e96c

0800c8b8 <__multadd>:
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	690e      	ldr	r6, [r1, #16]
 800c8be:	4607      	mov	r7, r0
 800c8c0:	4698      	mov	r8, r3
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	f101 0014 	add.w	r0, r1, #20
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	6805      	ldr	r5, [r0, #0]
 800c8cc:	b2a9      	uxth	r1, r5
 800c8ce:	fb02 8101 	mla	r1, r2, r1, r8
 800c8d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c8d6:	0c2d      	lsrs	r5, r5, #16
 800c8d8:	fb02 c505 	mla	r5, r2, r5, ip
 800c8dc:	b289      	uxth	r1, r1
 800c8de:	3301      	adds	r3, #1
 800c8e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c8e4:	429e      	cmp	r6, r3
 800c8e6:	f840 1b04 	str.w	r1, [r0], #4
 800c8ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c8ee:	dcec      	bgt.n	800c8ca <__multadd+0x12>
 800c8f0:	f1b8 0f00 	cmp.w	r8, #0
 800c8f4:	d022      	beq.n	800c93c <__multadd+0x84>
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	42b3      	cmp	r3, r6
 800c8fa:	dc19      	bgt.n	800c930 <__multadd+0x78>
 800c8fc:	6861      	ldr	r1, [r4, #4]
 800c8fe:	4638      	mov	r0, r7
 800c900:	3101      	adds	r1, #1
 800c902:	f7ff ff77 	bl	800c7f4 <_Balloc>
 800c906:	4605      	mov	r5, r0
 800c908:	b928      	cbnz	r0, 800c916 <__multadd+0x5e>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <__multadd+0x8c>)
 800c90e:	480e      	ldr	r0, [pc, #56]	; (800c948 <__multadd+0x90>)
 800c910:	21b5      	movs	r1, #181	; 0xb5
 800c912:	f001 f9cd 	bl	800dcb0 <__assert_func>
 800c916:	6922      	ldr	r2, [r4, #16]
 800c918:	3202      	adds	r2, #2
 800c91a:	f104 010c 	add.w	r1, r4, #12
 800c91e:	0092      	lsls	r2, r2, #2
 800c920:	300c      	adds	r0, #12
 800c922:	f7fc fd57 	bl	80093d4 <memcpy>
 800c926:	4621      	mov	r1, r4
 800c928:	4638      	mov	r0, r7
 800c92a:	f7ff ffa3 	bl	800c874 <_Bfree>
 800c92e:	462c      	mov	r4, r5
 800c930:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c934:	3601      	adds	r6, #1
 800c936:	f8c3 8014 	str.w	r8, [r3, #20]
 800c93a:	6126      	str	r6, [r4, #16]
 800c93c:	4620      	mov	r0, r4
 800c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c942:	bf00      	nop
 800c944:	0800e8dc 	.word	0x0800e8dc
 800c948:	0800e96c 	.word	0x0800e96c

0800c94c <__s2b>:
 800c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c950:	460c      	mov	r4, r1
 800c952:	4615      	mov	r5, r2
 800c954:	461f      	mov	r7, r3
 800c956:	2209      	movs	r2, #9
 800c958:	3308      	adds	r3, #8
 800c95a:	4606      	mov	r6, r0
 800c95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c960:	2100      	movs	r1, #0
 800c962:	2201      	movs	r2, #1
 800c964:	429a      	cmp	r2, r3
 800c966:	db09      	blt.n	800c97c <__s2b+0x30>
 800c968:	4630      	mov	r0, r6
 800c96a:	f7ff ff43 	bl	800c7f4 <_Balloc>
 800c96e:	b940      	cbnz	r0, 800c982 <__s2b+0x36>
 800c970:	4602      	mov	r2, r0
 800c972:	4b19      	ldr	r3, [pc, #100]	; (800c9d8 <__s2b+0x8c>)
 800c974:	4819      	ldr	r0, [pc, #100]	; (800c9dc <__s2b+0x90>)
 800c976:	21ce      	movs	r1, #206	; 0xce
 800c978:	f001 f99a 	bl	800dcb0 <__assert_func>
 800c97c:	0052      	lsls	r2, r2, #1
 800c97e:	3101      	adds	r1, #1
 800c980:	e7f0      	b.n	800c964 <__s2b+0x18>
 800c982:	9b08      	ldr	r3, [sp, #32]
 800c984:	6143      	str	r3, [r0, #20]
 800c986:	2d09      	cmp	r5, #9
 800c988:	f04f 0301 	mov.w	r3, #1
 800c98c:	6103      	str	r3, [r0, #16]
 800c98e:	dd16      	ble.n	800c9be <__s2b+0x72>
 800c990:	f104 0909 	add.w	r9, r4, #9
 800c994:	46c8      	mov	r8, r9
 800c996:	442c      	add	r4, r5
 800c998:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c99c:	4601      	mov	r1, r0
 800c99e:	3b30      	subs	r3, #48	; 0x30
 800c9a0:	220a      	movs	r2, #10
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7ff ff88 	bl	800c8b8 <__multadd>
 800c9a8:	45a0      	cmp	r8, r4
 800c9aa:	d1f5      	bne.n	800c998 <__s2b+0x4c>
 800c9ac:	f1a5 0408 	sub.w	r4, r5, #8
 800c9b0:	444c      	add	r4, r9
 800c9b2:	1b2d      	subs	r5, r5, r4
 800c9b4:	1963      	adds	r3, r4, r5
 800c9b6:	42bb      	cmp	r3, r7
 800c9b8:	db04      	blt.n	800c9c4 <__s2b+0x78>
 800c9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9be:	340a      	adds	r4, #10
 800c9c0:	2509      	movs	r5, #9
 800c9c2:	e7f6      	b.n	800c9b2 <__s2b+0x66>
 800c9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	3b30      	subs	r3, #48	; 0x30
 800c9cc:	220a      	movs	r2, #10
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f7ff ff72 	bl	800c8b8 <__multadd>
 800c9d4:	e7ee      	b.n	800c9b4 <__s2b+0x68>
 800c9d6:	bf00      	nop
 800c9d8:	0800e8dc 	.word	0x0800e8dc
 800c9dc:	0800e96c 	.word	0x0800e96c

0800c9e0 <__hi0bits>:
 800c9e0:	0c03      	lsrs	r3, r0, #16
 800c9e2:	041b      	lsls	r3, r3, #16
 800c9e4:	b9d3      	cbnz	r3, 800ca1c <__hi0bits+0x3c>
 800c9e6:	0400      	lsls	r0, r0, #16
 800c9e8:	2310      	movs	r3, #16
 800c9ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c9ee:	bf04      	itt	eq
 800c9f0:	0200      	lsleq	r0, r0, #8
 800c9f2:	3308      	addeq	r3, #8
 800c9f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c9f8:	bf04      	itt	eq
 800c9fa:	0100      	lsleq	r0, r0, #4
 800c9fc:	3304      	addeq	r3, #4
 800c9fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca02:	bf04      	itt	eq
 800ca04:	0080      	lsleq	r0, r0, #2
 800ca06:	3302      	addeq	r3, #2
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	db05      	blt.n	800ca18 <__hi0bits+0x38>
 800ca0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca10:	f103 0301 	add.w	r3, r3, #1
 800ca14:	bf08      	it	eq
 800ca16:	2320      	moveq	r3, #32
 800ca18:	4618      	mov	r0, r3
 800ca1a:	4770      	bx	lr
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	e7e4      	b.n	800c9ea <__hi0bits+0xa>

0800ca20 <__lo0bits>:
 800ca20:	6803      	ldr	r3, [r0, #0]
 800ca22:	f013 0207 	ands.w	r2, r3, #7
 800ca26:	4601      	mov	r1, r0
 800ca28:	d00b      	beq.n	800ca42 <__lo0bits+0x22>
 800ca2a:	07da      	lsls	r2, r3, #31
 800ca2c:	d424      	bmi.n	800ca78 <__lo0bits+0x58>
 800ca2e:	0798      	lsls	r0, r3, #30
 800ca30:	bf49      	itett	mi
 800ca32:	085b      	lsrmi	r3, r3, #1
 800ca34:	089b      	lsrpl	r3, r3, #2
 800ca36:	2001      	movmi	r0, #1
 800ca38:	600b      	strmi	r3, [r1, #0]
 800ca3a:	bf5c      	itt	pl
 800ca3c:	600b      	strpl	r3, [r1, #0]
 800ca3e:	2002      	movpl	r0, #2
 800ca40:	4770      	bx	lr
 800ca42:	b298      	uxth	r0, r3
 800ca44:	b9b0      	cbnz	r0, 800ca74 <__lo0bits+0x54>
 800ca46:	0c1b      	lsrs	r3, r3, #16
 800ca48:	2010      	movs	r0, #16
 800ca4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ca4e:	bf04      	itt	eq
 800ca50:	0a1b      	lsreq	r3, r3, #8
 800ca52:	3008      	addeq	r0, #8
 800ca54:	071a      	lsls	r2, r3, #28
 800ca56:	bf04      	itt	eq
 800ca58:	091b      	lsreq	r3, r3, #4
 800ca5a:	3004      	addeq	r0, #4
 800ca5c:	079a      	lsls	r2, r3, #30
 800ca5e:	bf04      	itt	eq
 800ca60:	089b      	lsreq	r3, r3, #2
 800ca62:	3002      	addeq	r0, #2
 800ca64:	07da      	lsls	r2, r3, #31
 800ca66:	d403      	bmi.n	800ca70 <__lo0bits+0x50>
 800ca68:	085b      	lsrs	r3, r3, #1
 800ca6a:	f100 0001 	add.w	r0, r0, #1
 800ca6e:	d005      	beq.n	800ca7c <__lo0bits+0x5c>
 800ca70:	600b      	str	r3, [r1, #0]
 800ca72:	4770      	bx	lr
 800ca74:	4610      	mov	r0, r2
 800ca76:	e7e8      	b.n	800ca4a <__lo0bits+0x2a>
 800ca78:	2000      	movs	r0, #0
 800ca7a:	4770      	bx	lr
 800ca7c:	2020      	movs	r0, #32
 800ca7e:	4770      	bx	lr

0800ca80 <__i2b>:
 800ca80:	b510      	push	{r4, lr}
 800ca82:	460c      	mov	r4, r1
 800ca84:	2101      	movs	r1, #1
 800ca86:	f7ff feb5 	bl	800c7f4 <_Balloc>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	b928      	cbnz	r0, 800ca9a <__i2b+0x1a>
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <__i2b+0x24>)
 800ca90:	4805      	ldr	r0, [pc, #20]	; (800caa8 <__i2b+0x28>)
 800ca92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca96:	f001 f90b 	bl	800dcb0 <__assert_func>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	6144      	str	r4, [r0, #20]
 800ca9e:	6103      	str	r3, [r0, #16]
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	bf00      	nop
 800caa4:	0800e8dc 	.word	0x0800e8dc
 800caa8:	0800e96c 	.word	0x0800e96c

0800caac <__multiply>:
 800caac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab0:	4614      	mov	r4, r2
 800cab2:	690a      	ldr	r2, [r1, #16]
 800cab4:	6923      	ldr	r3, [r4, #16]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	bfb8      	it	lt
 800caba:	460b      	movlt	r3, r1
 800cabc:	460d      	mov	r5, r1
 800cabe:	bfbc      	itt	lt
 800cac0:	4625      	movlt	r5, r4
 800cac2:	461c      	movlt	r4, r3
 800cac4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cac8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cacc:	68ab      	ldr	r3, [r5, #8]
 800cace:	6869      	ldr	r1, [r5, #4]
 800cad0:	eb0a 0709 	add.w	r7, sl, r9
 800cad4:	42bb      	cmp	r3, r7
 800cad6:	b085      	sub	sp, #20
 800cad8:	bfb8      	it	lt
 800cada:	3101      	addlt	r1, #1
 800cadc:	f7ff fe8a 	bl	800c7f4 <_Balloc>
 800cae0:	b930      	cbnz	r0, 800caf0 <__multiply+0x44>
 800cae2:	4602      	mov	r2, r0
 800cae4:	4b42      	ldr	r3, [pc, #264]	; (800cbf0 <__multiply+0x144>)
 800cae6:	4843      	ldr	r0, [pc, #268]	; (800cbf4 <__multiply+0x148>)
 800cae8:	f240 115d 	movw	r1, #349	; 0x15d
 800caec:	f001 f8e0 	bl	800dcb0 <__assert_func>
 800caf0:	f100 0614 	add.w	r6, r0, #20
 800caf4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800caf8:	4633      	mov	r3, r6
 800cafa:	2200      	movs	r2, #0
 800cafc:	4543      	cmp	r3, r8
 800cafe:	d31e      	bcc.n	800cb3e <__multiply+0x92>
 800cb00:	f105 0c14 	add.w	ip, r5, #20
 800cb04:	f104 0314 	add.w	r3, r4, #20
 800cb08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cb0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cb10:	9202      	str	r2, [sp, #8]
 800cb12:	ebac 0205 	sub.w	r2, ip, r5
 800cb16:	3a15      	subs	r2, #21
 800cb18:	f022 0203 	bic.w	r2, r2, #3
 800cb1c:	3204      	adds	r2, #4
 800cb1e:	f105 0115 	add.w	r1, r5, #21
 800cb22:	458c      	cmp	ip, r1
 800cb24:	bf38      	it	cc
 800cb26:	2204      	movcc	r2, #4
 800cb28:	9201      	str	r2, [sp, #4]
 800cb2a:	9a02      	ldr	r2, [sp, #8]
 800cb2c:	9303      	str	r3, [sp, #12]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d808      	bhi.n	800cb44 <__multiply+0x98>
 800cb32:	2f00      	cmp	r7, #0
 800cb34:	dc55      	bgt.n	800cbe2 <__multiply+0x136>
 800cb36:	6107      	str	r7, [r0, #16]
 800cb38:	b005      	add	sp, #20
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	f843 2b04 	str.w	r2, [r3], #4
 800cb42:	e7db      	b.n	800cafc <__multiply+0x50>
 800cb44:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb48:	f1ba 0f00 	cmp.w	sl, #0
 800cb4c:	d020      	beq.n	800cb90 <__multiply+0xe4>
 800cb4e:	f105 0e14 	add.w	lr, r5, #20
 800cb52:	46b1      	mov	r9, r6
 800cb54:	2200      	movs	r2, #0
 800cb56:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cb5a:	f8d9 b000 	ldr.w	fp, [r9]
 800cb5e:	b2a1      	uxth	r1, r4
 800cb60:	fa1f fb8b 	uxth.w	fp, fp
 800cb64:	fb0a b101 	mla	r1, sl, r1, fp
 800cb68:	4411      	add	r1, r2
 800cb6a:	f8d9 2000 	ldr.w	r2, [r9]
 800cb6e:	0c24      	lsrs	r4, r4, #16
 800cb70:	0c12      	lsrs	r2, r2, #16
 800cb72:	fb0a 2404 	mla	r4, sl, r4, r2
 800cb76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cb7a:	b289      	uxth	r1, r1
 800cb7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cb80:	45f4      	cmp	ip, lr
 800cb82:	f849 1b04 	str.w	r1, [r9], #4
 800cb86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cb8a:	d8e4      	bhi.n	800cb56 <__multiply+0xaa>
 800cb8c:	9901      	ldr	r1, [sp, #4]
 800cb8e:	5072      	str	r2, [r6, r1]
 800cb90:	9a03      	ldr	r2, [sp, #12]
 800cb92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb96:	3304      	adds	r3, #4
 800cb98:	f1b9 0f00 	cmp.w	r9, #0
 800cb9c:	d01f      	beq.n	800cbde <__multiply+0x132>
 800cb9e:	6834      	ldr	r4, [r6, #0]
 800cba0:	f105 0114 	add.w	r1, r5, #20
 800cba4:	46b6      	mov	lr, r6
 800cba6:	f04f 0a00 	mov.w	sl, #0
 800cbaa:	880a      	ldrh	r2, [r1, #0]
 800cbac:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cbb0:	fb09 b202 	mla	r2, r9, r2, fp
 800cbb4:	4492      	add	sl, r2
 800cbb6:	b2a4      	uxth	r4, r4
 800cbb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cbbc:	f84e 4b04 	str.w	r4, [lr], #4
 800cbc0:	f851 4b04 	ldr.w	r4, [r1], #4
 800cbc4:	f8be 2000 	ldrh.w	r2, [lr]
 800cbc8:	0c24      	lsrs	r4, r4, #16
 800cbca:	fb09 2404 	mla	r4, r9, r4, r2
 800cbce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cbd2:	458c      	cmp	ip, r1
 800cbd4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cbd8:	d8e7      	bhi.n	800cbaa <__multiply+0xfe>
 800cbda:	9a01      	ldr	r2, [sp, #4]
 800cbdc:	50b4      	str	r4, [r6, r2]
 800cbde:	3604      	adds	r6, #4
 800cbe0:	e7a3      	b.n	800cb2a <__multiply+0x7e>
 800cbe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1a5      	bne.n	800cb36 <__multiply+0x8a>
 800cbea:	3f01      	subs	r7, #1
 800cbec:	e7a1      	b.n	800cb32 <__multiply+0x86>
 800cbee:	bf00      	nop
 800cbf0:	0800e8dc 	.word	0x0800e8dc
 800cbf4:	0800e96c 	.word	0x0800e96c

0800cbf8 <__pow5mult>:
 800cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbfc:	4615      	mov	r5, r2
 800cbfe:	f012 0203 	ands.w	r2, r2, #3
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	d007      	beq.n	800cc18 <__pow5mult+0x20>
 800cc08:	4c25      	ldr	r4, [pc, #148]	; (800cca0 <__pow5mult+0xa8>)
 800cc0a:	3a01      	subs	r2, #1
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc12:	f7ff fe51 	bl	800c8b8 <__multadd>
 800cc16:	4607      	mov	r7, r0
 800cc18:	10ad      	asrs	r5, r5, #2
 800cc1a:	d03d      	beq.n	800cc98 <__pow5mult+0xa0>
 800cc1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc1e:	b97c      	cbnz	r4, 800cc40 <__pow5mult+0x48>
 800cc20:	2010      	movs	r0, #16
 800cc22:	f7fc fbcf 	bl	80093c4 <malloc>
 800cc26:	4602      	mov	r2, r0
 800cc28:	6270      	str	r0, [r6, #36]	; 0x24
 800cc2a:	b928      	cbnz	r0, 800cc38 <__pow5mult+0x40>
 800cc2c:	4b1d      	ldr	r3, [pc, #116]	; (800cca4 <__pow5mult+0xac>)
 800cc2e:	481e      	ldr	r0, [pc, #120]	; (800cca8 <__pow5mult+0xb0>)
 800cc30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cc34:	f001 f83c 	bl	800dcb0 <__assert_func>
 800cc38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc3c:	6004      	str	r4, [r0, #0]
 800cc3e:	60c4      	str	r4, [r0, #12]
 800cc40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc48:	b94c      	cbnz	r4, 800cc5e <__pow5mult+0x66>
 800cc4a:	f240 2171 	movw	r1, #625	; 0x271
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7ff ff16 	bl	800ca80 <__i2b>
 800cc54:	2300      	movs	r3, #0
 800cc56:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	f04f 0900 	mov.w	r9, #0
 800cc62:	07eb      	lsls	r3, r5, #31
 800cc64:	d50a      	bpl.n	800cc7c <__pow5mult+0x84>
 800cc66:	4639      	mov	r1, r7
 800cc68:	4622      	mov	r2, r4
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7ff ff1e 	bl	800caac <__multiply>
 800cc70:	4639      	mov	r1, r7
 800cc72:	4680      	mov	r8, r0
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff fdfd 	bl	800c874 <_Bfree>
 800cc7a:	4647      	mov	r7, r8
 800cc7c:	106d      	asrs	r5, r5, #1
 800cc7e:	d00b      	beq.n	800cc98 <__pow5mult+0xa0>
 800cc80:	6820      	ldr	r0, [r4, #0]
 800cc82:	b938      	cbnz	r0, 800cc94 <__pow5mult+0x9c>
 800cc84:	4622      	mov	r2, r4
 800cc86:	4621      	mov	r1, r4
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7ff ff0f 	bl	800caac <__multiply>
 800cc8e:	6020      	str	r0, [r4, #0]
 800cc90:	f8c0 9000 	str.w	r9, [r0]
 800cc94:	4604      	mov	r4, r0
 800cc96:	e7e4      	b.n	800cc62 <__pow5mult+0x6a>
 800cc98:	4638      	mov	r0, r7
 800cc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc9e:	bf00      	nop
 800cca0:	0800eac0 	.word	0x0800eac0
 800cca4:	0800e866 	.word	0x0800e866
 800cca8:	0800e96c 	.word	0x0800e96c

0800ccac <__lshift>:
 800ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	6849      	ldr	r1, [r1, #4]
 800ccb4:	6923      	ldr	r3, [r4, #16]
 800ccb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	4691      	mov	r9, r2
 800ccc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccc4:	f108 0601 	add.w	r6, r8, #1
 800ccc8:	42b3      	cmp	r3, r6
 800ccca:	db0b      	blt.n	800cce4 <__lshift+0x38>
 800cccc:	4638      	mov	r0, r7
 800ccce:	f7ff fd91 	bl	800c7f4 <_Balloc>
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	b948      	cbnz	r0, 800ccea <__lshift+0x3e>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	4b28      	ldr	r3, [pc, #160]	; (800cd7c <__lshift+0xd0>)
 800ccda:	4829      	ldr	r0, [pc, #164]	; (800cd80 <__lshift+0xd4>)
 800ccdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cce0:	f000 ffe6 	bl	800dcb0 <__assert_func>
 800cce4:	3101      	adds	r1, #1
 800cce6:	005b      	lsls	r3, r3, #1
 800cce8:	e7ee      	b.n	800ccc8 <__lshift+0x1c>
 800ccea:	2300      	movs	r3, #0
 800ccec:	f100 0114 	add.w	r1, r0, #20
 800ccf0:	f100 0210 	add.w	r2, r0, #16
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	4553      	cmp	r3, sl
 800ccf8:	db33      	blt.n	800cd62 <__lshift+0xb6>
 800ccfa:	6920      	ldr	r0, [r4, #16]
 800ccfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd00:	f104 0314 	add.w	r3, r4, #20
 800cd04:	f019 091f 	ands.w	r9, r9, #31
 800cd08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd10:	d02b      	beq.n	800cd6a <__lshift+0xbe>
 800cd12:	f1c9 0e20 	rsb	lr, r9, #32
 800cd16:	468a      	mov	sl, r1
 800cd18:	2200      	movs	r2, #0
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	fa00 f009 	lsl.w	r0, r0, r9
 800cd20:	4302      	orrs	r2, r0
 800cd22:	f84a 2b04 	str.w	r2, [sl], #4
 800cd26:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd2a:	459c      	cmp	ip, r3
 800cd2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd30:	d8f3      	bhi.n	800cd1a <__lshift+0x6e>
 800cd32:	ebac 0304 	sub.w	r3, ip, r4
 800cd36:	3b15      	subs	r3, #21
 800cd38:	f023 0303 	bic.w	r3, r3, #3
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	f104 0015 	add.w	r0, r4, #21
 800cd42:	4584      	cmp	ip, r0
 800cd44:	bf38      	it	cc
 800cd46:	2304      	movcc	r3, #4
 800cd48:	50ca      	str	r2, [r1, r3]
 800cd4a:	b10a      	cbz	r2, 800cd50 <__lshift+0xa4>
 800cd4c:	f108 0602 	add.w	r6, r8, #2
 800cd50:	3e01      	subs	r6, #1
 800cd52:	4638      	mov	r0, r7
 800cd54:	612e      	str	r6, [r5, #16]
 800cd56:	4621      	mov	r1, r4
 800cd58:	f7ff fd8c 	bl	800c874 <_Bfree>
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd62:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd66:	3301      	adds	r3, #1
 800cd68:	e7c5      	b.n	800ccf6 <__lshift+0x4a>
 800cd6a:	3904      	subs	r1, #4
 800cd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd70:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd74:	459c      	cmp	ip, r3
 800cd76:	d8f9      	bhi.n	800cd6c <__lshift+0xc0>
 800cd78:	e7ea      	b.n	800cd50 <__lshift+0xa4>
 800cd7a:	bf00      	nop
 800cd7c:	0800e8dc 	.word	0x0800e8dc
 800cd80:	0800e96c 	.word	0x0800e96c

0800cd84 <__mcmp>:
 800cd84:	b530      	push	{r4, r5, lr}
 800cd86:	6902      	ldr	r2, [r0, #16]
 800cd88:	690c      	ldr	r4, [r1, #16]
 800cd8a:	1b12      	subs	r2, r2, r4
 800cd8c:	d10e      	bne.n	800cdac <__mcmp+0x28>
 800cd8e:	f100 0314 	add.w	r3, r0, #20
 800cd92:	3114      	adds	r1, #20
 800cd94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cda0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cda4:	42a5      	cmp	r5, r4
 800cda6:	d003      	beq.n	800cdb0 <__mcmp+0x2c>
 800cda8:	d305      	bcc.n	800cdb6 <__mcmp+0x32>
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4610      	mov	r0, r2
 800cdae:	bd30      	pop	{r4, r5, pc}
 800cdb0:	4283      	cmp	r3, r0
 800cdb2:	d3f3      	bcc.n	800cd9c <__mcmp+0x18>
 800cdb4:	e7fa      	b.n	800cdac <__mcmp+0x28>
 800cdb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdba:	e7f7      	b.n	800cdac <__mcmp+0x28>

0800cdbc <__mdiff>:
 800cdbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	4617      	mov	r7, r2
 800cdca:	f7ff ffdb 	bl	800cd84 <__mcmp>
 800cdce:	1e05      	subs	r5, r0, #0
 800cdd0:	d110      	bne.n	800cdf4 <__mdiff+0x38>
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f7ff fd0d 	bl	800c7f4 <_Balloc>
 800cdda:	b930      	cbnz	r0, 800cdea <__mdiff+0x2e>
 800cddc:	4b39      	ldr	r3, [pc, #228]	; (800cec4 <__mdiff+0x108>)
 800cdde:	4602      	mov	r2, r0
 800cde0:	f240 2132 	movw	r1, #562	; 0x232
 800cde4:	4838      	ldr	r0, [pc, #224]	; (800cec8 <__mdiff+0x10c>)
 800cde6:	f000 ff63 	bl	800dcb0 <__assert_func>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf4:	bfa4      	itt	ge
 800cdf6:	463b      	movge	r3, r7
 800cdf8:	4627      	movge	r7, r4
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	bfa6      	itte	ge
 800ce00:	461c      	movge	r4, r3
 800ce02:	2500      	movge	r5, #0
 800ce04:	2501      	movlt	r5, #1
 800ce06:	f7ff fcf5 	bl	800c7f4 <_Balloc>
 800ce0a:	b920      	cbnz	r0, 800ce16 <__mdiff+0x5a>
 800ce0c:	4b2d      	ldr	r3, [pc, #180]	; (800cec4 <__mdiff+0x108>)
 800ce0e:	4602      	mov	r2, r0
 800ce10:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce14:	e7e6      	b.n	800cde4 <__mdiff+0x28>
 800ce16:	693e      	ldr	r6, [r7, #16]
 800ce18:	60c5      	str	r5, [r0, #12]
 800ce1a:	6925      	ldr	r5, [r4, #16]
 800ce1c:	f107 0114 	add.w	r1, r7, #20
 800ce20:	f104 0914 	add.w	r9, r4, #20
 800ce24:	f100 0e14 	add.w	lr, r0, #20
 800ce28:	f107 0210 	add.w	r2, r7, #16
 800ce2c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ce30:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ce34:	46f2      	mov	sl, lr
 800ce36:	2700      	movs	r7, #0
 800ce38:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ce40:	fa1f f883 	uxth.w	r8, r3
 800ce44:	fa17 f78b 	uxtah	r7, r7, fp
 800ce48:	0c1b      	lsrs	r3, r3, #16
 800ce4a:	eba7 0808 	sub.w	r8, r7, r8
 800ce4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce56:	fa1f f888 	uxth.w	r8, r8
 800ce5a:	141f      	asrs	r7, r3, #16
 800ce5c:	454d      	cmp	r5, r9
 800ce5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce62:	f84a 3b04 	str.w	r3, [sl], #4
 800ce66:	d8e7      	bhi.n	800ce38 <__mdiff+0x7c>
 800ce68:	1b2b      	subs	r3, r5, r4
 800ce6a:	3b15      	subs	r3, #21
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	3304      	adds	r3, #4
 800ce72:	3415      	adds	r4, #21
 800ce74:	42a5      	cmp	r5, r4
 800ce76:	bf38      	it	cc
 800ce78:	2304      	movcc	r3, #4
 800ce7a:	4419      	add	r1, r3
 800ce7c:	4473      	add	r3, lr
 800ce7e:	469e      	mov	lr, r3
 800ce80:	460d      	mov	r5, r1
 800ce82:	4565      	cmp	r5, ip
 800ce84:	d30e      	bcc.n	800cea4 <__mdiff+0xe8>
 800ce86:	f10c 0203 	add.w	r2, ip, #3
 800ce8a:	1a52      	subs	r2, r2, r1
 800ce8c:	f022 0203 	bic.w	r2, r2, #3
 800ce90:	3903      	subs	r1, #3
 800ce92:	458c      	cmp	ip, r1
 800ce94:	bf38      	it	cc
 800ce96:	2200      	movcc	r2, #0
 800ce98:	441a      	add	r2, r3
 800ce9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce9e:	b17b      	cbz	r3, 800cec0 <__mdiff+0x104>
 800cea0:	6106      	str	r6, [r0, #16]
 800cea2:	e7a5      	b.n	800cdf0 <__mdiff+0x34>
 800cea4:	f855 8b04 	ldr.w	r8, [r5], #4
 800cea8:	fa17 f488 	uxtah	r4, r7, r8
 800ceac:	1422      	asrs	r2, r4, #16
 800ceae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ceb2:	b2a4      	uxth	r4, r4
 800ceb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ceb8:	f84e 4b04 	str.w	r4, [lr], #4
 800cebc:	1417      	asrs	r7, r2, #16
 800cebe:	e7e0      	b.n	800ce82 <__mdiff+0xc6>
 800cec0:	3e01      	subs	r6, #1
 800cec2:	e7ea      	b.n	800ce9a <__mdiff+0xde>
 800cec4:	0800e8dc 	.word	0x0800e8dc
 800cec8:	0800e96c 	.word	0x0800e96c

0800cecc <__ulp>:
 800cecc:	b082      	sub	sp, #8
 800cece:	ed8d 0b00 	vstr	d0, [sp]
 800ced2:	9b01      	ldr	r3, [sp, #4]
 800ced4:	4912      	ldr	r1, [pc, #72]	; (800cf20 <__ulp+0x54>)
 800ced6:	4019      	ands	r1, r3
 800ced8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cedc:	2900      	cmp	r1, #0
 800cede:	dd05      	ble.n	800ceec <__ulp+0x20>
 800cee0:	2200      	movs	r2, #0
 800cee2:	460b      	mov	r3, r1
 800cee4:	ec43 2b10 	vmov	d0, r2, r3
 800cee8:	b002      	add	sp, #8
 800ceea:	4770      	bx	lr
 800ceec:	4249      	negs	r1, r1
 800ceee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cef2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cef6:	f04f 0200 	mov.w	r2, #0
 800cefa:	f04f 0300 	mov.w	r3, #0
 800cefe:	da04      	bge.n	800cf0a <__ulp+0x3e>
 800cf00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf04:	fa41 f300 	asr.w	r3, r1, r0
 800cf08:	e7ec      	b.n	800cee4 <__ulp+0x18>
 800cf0a:	f1a0 0114 	sub.w	r1, r0, #20
 800cf0e:	291e      	cmp	r1, #30
 800cf10:	bfda      	itte	le
 800cf12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cf16:	fa20 f101 	lsrle.w	r1, r0, r1
 800cf1a:	2101      	movgt	r1, #1
 800cf1c:	460a      	mov	r2, r1
 800cf1e:	e7e1      	b.n	800cee4 <__ulp+0x18>
 800cf20:	7ff00000 	.word	0x7ff00000

0800cf24 <__b2d>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	6905      	ldr	r5, [r0, #16]
 800cf28:	f100 0714 	add.w	r7, r0, #20
 800cf2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cf30:	1f2e      	subs	r6, r5, #4
 800cf32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cf36:	4620      	mov	r0, r4
 800cf38:	f7ff fd52 	bl	800c9e0 <__hi0bits>
 800cf3c:	f1c0 0320 	rsb	r3, r0, #32
 800cf40:	280a      	cmp	r0, #10
 800cf42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cfc0 <__b2d+0x9c>
 800cf46:	600b      	str	r3, [r1, #0]
 800cf48:	dc14      	bgt.n	800cf74 <__b2d+0x50>
 800cf4a:	f1c0 0e0b 	rsb	lr, r0, #11
 800cf4e:	fa24 f10e 	lsr.w	r1, r4, lr
 800cf52:	42b7      	cmp	r7, r6
 800cf54:	ea41 030c 	orr.w	r3, r1, ip
 800cf58:	bf34      	ite	cc
 800cf5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf5e:	2100      	movcs	r1, #0
 800cf60:	3015      	adds	r0, #21
 800cf62:	fa04 f000 	lsl.w	r0, r4, r0
 800cf66:	fa21 f10e 	lsr.w	r1, r1, lr
 800cf6a:	ea40 0201 	orr.w	r2, r0, r1
 800cf6e:	ec43 2b10 	vmov	d0, r2, r3
 800cf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf74:	42b7      	cmp	r7, r6
 800cf76:	bf3a      	itte	cc
 800cf78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf7c:	f1a5 0608 	subcc.w	r6, r5, #8
 800cf80:	2100      	movcs	r1, #0
 800cf82:	380b      	subs	r0, #11
 800cf84:	d017      	beq.n	800cfb6 <__b2d+0x92>
 800cf86:	f1c0 0c20 	rsb	ip, r0, #32
 800cf8a:	fa04 f500 	lsl.w	r5, r4, r0
 800cf8e:	42be      	cmp	r6, r7
 800cf90:	fa21 f40c 	lsr.w	r4, r1, ip
 800cf94:	ea45 0504 	orr.w	r5, r5, r4
 800cf98:	bf8c      	ite	hi
 800cf9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cf9e:	2400      	movls	r4, #0
 800cfa0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cfa4:	fa01 f000 	lsl.w	r0, r1, r0
 800cfa8:	fa24 f40c 	lsr.w	r4, r4, ip
 800cfac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cfb0:	ea40 0204 	orr.w	r2, r0, r4
 800cfb4:	e7db      	b.n	800cf6e <__b2d+0x4a>
 800cfb6:	ea44 030c 	orr.w	r3, r4, ip
 800cfba:	460a      	mov	r2, r1
 800cfbc:	e7d7      	b.n	800cf6e <__b2d+0x4a>
 800cfbe:	bf00      	nop
 800cfc0:	3ff00000 	.word	0x3ff00000

0800cfc4 <__d2b>:
 800cfc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfc8:	4689      	mov	r9, r1
 800cfca:	2101      	movs	r1, #1
 800cfcc:	ec57 6b10 	vmov	r6, r7, d0
 800cfd0:	4690      	mov	r8, r2
 800cfd2:	f7ff fc0f 	bl	800c7f4 <_Balloc>
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	b930      	cbnz	r0, 800cfe8 <__d2b+0x24>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	4b25      	ldr	r3, [pc, #148]	; (800d074 <__d2b+0xb0>)
 800cfde:	4826      	ldr	r0, [pc, #152]	; (800d078 <__d2b+0xb4>)
 800cfe0:	f240 310a 	movw	r1, #778	; 0x30a
 800cfe4:	f000 fe64 	bl	800dcb0 <__assert_func>
 800cfe8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cfec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cff0:	bb35      	cbnz	r5, 800d040 <__d2b+0x7c>
 800cff2:	2e00      	cmp	r6, #0
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	d028      	beq.n	800d04a <__d2b+0x86>
 800cff8:	4668      	mov	r0, sp
 800cffa:	9600      	str	r6, [sp, #0]
 800cffc:	f7ff fd10 	bl	800ca20 <__lo0bits>
 800d000:	9900      	ldr	r1, [sp, #0]
 800d002:	b300      	cbz	r0, 800d046 <__d2b+0x82>
 800d004:	9a01      	ldr	r2, [sp, #4]
 800d006:	f1c0 0320 	rsb	r3, r0, #32
 800d00a:	fa02 f303 	lsl.w	r3, r2, r3
 800d00e:	430b      	orrs	r3, r1
 800d010:	40c2      	lsrs	r2, r0
 800d012:	6163      	str	r3, [r4, #20]
 800d014:	9201      	str	r2, [sp, #4]
 800d016:	9b01      	ldr	r3, [sp, #4]
 800d018:	61a3      	str	r3, [r4, #24]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	bf14      	ite	ne
 800d01e:	2202      	movne	r2, #2
 800d020:	2201      	moveq	r2, #1
 800d022:	6122      	str	r2, [r4, #16]
 800d024:	b1d5      	cbz	r5, 800d05c <__d2b+0x98>
 800d026:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d02a:	4405      	add	r5, r0
 800d02c:	f8c9 5000 	str.w	r5, [r9]
 800d030:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d034:	f8c8 0000 	str.w	r0, [r8]
 800d038:	4620      	mov	r0, r4
 800d03a:	b003      	add	sp, #12
 800d03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d044:	e7d5      	b.n	800cff2 <__d2b+0x2e>
 800d046:	6161      	str	r1, [r4, #20]
 800d048:	e7e5      	b.n	800d016 <__d2b+0x52>
 800d04a:	a801      	add	r0, sp, #4
 800d04c:	f7ff fce8 	bl	800ca20 <__lo0bits>
 800d050:	9b01      	ldr	r3, [sp, #4]
 800d052:	6163      	str	r3, [r4, #20]
 800d054:	2201      	movs	r2, #1
 800d056:	6122      	str	r2, [r4, #16]
 800d058:	3020      	adds	r0, #32
 800d05a:	e7e3      	b.n	800d024 <__d2b+0x60>
 800d05c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d060:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d064:	f8c9 0000 	str.w	r0, [r9]
 800d068:	6918      	ldr	r0, [r3, #16]
 800d06a:	f7ff fcb9 	bl	800c9e0 <__hi0bits>
 800d06e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d072:	e7df      	b.n	800d034 <__d2b+0x70>
 800d074:	0800e8dc 	.word	0x0800e8dc
 800d078:	0800e96c 	.word	0x0800e96c

0800d07c <__ratio>:
 800d07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	4688      	mov	r8, r1
 800d082:	4669      	mov	r1, sp
 800d084:	4681      	mov	r9, r0
 800d086:	f7ff ff4d 	bl	800cf24 <__b2d>
 800d08a:	a901      	add	r1, sp, #4
 800d08c:	4640      	mov	r0, r8
 800d08e:	ec55 4b10 	vmov	r4, r5, d0
 800d092:	f7ff ff47 	bl	800cf24 <__b2d>
 800d096:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d09a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d09e:	eba3 0c02 	sub.w	ip, r3, r2
 800d0a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0a6:	1a9b      	subs	r3, r3, r2
 800d0a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d0ac:	ec51 0b10 	vmov	r0, r1, d0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	bfd6      	itet	le
 800d0b4:	460a      	movle	r2, r1
 800d0b6:	462a      	movgt	r2, r5
 800d0b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0bc:	468b      	mov	fp, r1
 800d0be:	462f      	mov	r7, r5
 800d0c0:	bfd4      	ite	le
 800d0c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d0c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	ee10 2a10 	vmov	r2, s0
 800d0d0:	465b      	mov	r3, fp
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	f7f3 fbc2 	bl	800085c <__aeabi_ddiv>
 800d0d8:	ec41 0b10 	vmov	d0, r0, r1
 800d0dc:	b003      	add	sp, #12
 800d0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0e2 <__copybits>:
 800d0e2:	3901      	subs	r1, #1
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	1149      	asrs	r1, r1, #5
 800d0e8:	6914      	ldr	r4, [r2, #16]
 800d0ea:	3101      	adds	r1, #1
 800d0ec:	f102 0314 	add.w	r3, r2, #20
 800d0f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0f8:	1f05      	subs	r5, r0, #4
 800d0fa:	42a3      	cmp	r3, r4
 800d0fc:	d30c      	bcc.n	800d118 <__copybits+0x36>
 800d0fe:	1aa3      	subs	r3, r4, r2
 800d100:	3b11      	subs	r3, #17
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	3211      	adds	r2, #17
 800d108:	42a2      	cmp	r2, r4
 800d10a:	bf88      	it	hi
 800d10c:	2300      	movhi	r3, #0
 800d10e:	4418      	add	r0, r3
 800d110:	2300      	movs	r3, #0
 800d112:	4288      	cmp	r0, r1
 800d114:	d305      	bcc.n	800d122 <__copybits+0x40>
 800d116:	bd70      	pop	{r4, r5, r6, pc}
 800d118:	f853 6b04 	ldr.w	r6, [r3], #4
 800d11c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d120:	e7eb      	b.n	800d0fa <__copybits+0x18>
 800d122:	f840 3b04 	str.w	r3, [r0], #4
 800d126:	e7f4      	b.n	800d112 <__copybits+0x30>

0800d128 <__any_on>:
 800d128:	f100 0214 	add.w	r2, r0, #20
 800d12c:	6900      	ldr	r0, [r0, #16]
 800d12e:	114b      	asrs	r3, r1, #5
 800d130:	4298      	cmp	r0, r3
 800d132:	b510      	push	{r4, lr}
 800d134:	db11      	blt.n	800d15a <__any_on+0x32>
 800d136:	dd0a      	ble.n	800d14e <__any_on+0x26>
 800d138:	f011 011f 	ands.w	r1, r1, #31
 800d13c:	d007      	beq.n	800d14e <__any_on+0x26>
 800d13e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d142:	fa24 f001 	lsr.w	r0, r4, r1
 800d146:	fa00 f101 	lsl.w	r1, r0, r1
 800d14a:	428c      	cmp	r4, r1
 800d14c:	d10b      	bne.n	800d166 <__any_on+0x3e>
 800d14e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d152:	4293      	cmp	r3, r2
 800d154:	d803      	bhi.n	800d15e <__any_on+0x36>
 800d156:	2000      	movs	r0, #0
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	4603      	mov	r3, r0
 800d15c:	e7f7      	b.n	800d14e <__any_on+0x26>
 800d15e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d162:	2900      	cmp	r1, #0
 800d164:	d0f5      	beq.n	800d152 <__any_on+0x2a>
 800d166:	2001      	movs	r0, #1
 800d168:	e7f6      	b.n	800d158 <__any_on+0x30>

0800d16a <_calloc_r>:
 800d16a:	b513      	push	{r0, r1, r4, lr}
 800d16c:	434a      	muls	r2, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	9201      	str	r2, [sp, #4]
 800d172:	f7fc f995 	bl	80094a0 <_malloc_r>
 800d176:	4604      	mov	r4, r0
 800d178:	b118      	cbz	r0, 800d182 <_calloc_r+0x18>
 800d17a:	9a01      	ldr	r2, [sp, #4]
 800d17c:	2100      	movs	r1, #0
 800d17e:	f7fc f937 	bl	80093f0 <memset>
 800d182:	4620      	mov	r0, r4
 800d184:	b002      	add	sp, #8
 800d186:	bd10      	pop	{r4, pc}

0800d188 <__ssputs_r>:
 800d188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	688e      	ldr	r6, [r1, #8]
 800d18e:	429e      	cmp	r6, r3
 800d190:	4682      	mov	sl, r0
 800d192:	460c      	mov	r4, r1
 800d194:	4690      	mov	r8, r2
 800d196:	461f      	mov	r7, r3
 800d198:	d838      	bhi.n	800d20c <__ssputs_r+0x84>
 800d19a:	898a      	ldrh	r2, [r1, #12]
 800d19c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1a0:	d032      	beq.n	800d208 <__ssputs_r+0x80>
 800d1a2:	6825      	ldr	r5, [r4, #0]
 800d1a4:	6909      	ldr	r1, [r1, #16]
 800d1a6:	eba5 0901 	sub.w	r9, r5, r1
 800d1aa:	6965      	ldr	r5, [r4, #20]
 800d1ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	444b      	add	r3, r9
 800d1b8:	106d      	asrs	r5, r5, #1
 800d1ba:	429d      	cmp	r5, r3
 800d1bc:	bf38      	it	cc
 800d1be:	461d      	movcc	r5, r3
 800d1c0:	0553      	lsls	r3, r2, #21
 800d1c2:	d531      	bpl.n	800d228 <__ssputs_r+0xa0>
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	f7fc f96b 	bl	80094a0 <_malloc_r>
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	b950      	cbnz	r0, 800d1e4 <__ssputs_r+0x5c>
 800d1ce:	230c      	movs	r3, #12
 800d1d0:	f8ca 3000 	str.w	r3, [sl]
 800d1d4:	89a3      	ldrh	r3, [r4, #12]
 800d1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e4:	6921      	ldr	r1, [r4, #16]
 800d1e6:	464a      	mov	r2, r9
 800d1e8:	f7fc f8f4 	bl	80093d4 <memcpy>
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	6126      	str	r6, [r4, #16]
 800d1fa:	6165      	str	r5, [r4, #20]
 800d1fc:	444e      	add	r6, r9
 800d1fe:	eba5 0509 	sub.w	r5, r5, r9
 800d202:	6026      	str	r6, [r4, #0]
 800d204:	60a5      	str	r5, [r4, #8]
 800d206:	463e      	mov	r6, r7
 800d208:	42be      	cmp	r6, r7
 800d20a:	d900      	bls.n	800d20e <__ssputs_r+0x86>
 800d20c:	463e      	mov	r6, r7
 800d20e:	4632      	mov	r2, r6
 800d210:	6820      	ldr	r0, [r4, #0]
 800d212:	4641      	mov	r1, r8
 800d214:	f000 fd7c 	bl	800dd10 <memmove>
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	6822      	ldr	r2, [r4, #0]
 800d21c:	1b9b      	subs	r3, r3, r6
 800d21e:	4432      	add	r2, r6
 800d220:	60a3      	str	r3, [r4, #8]
 800d222:	6022      	str	r2, [r4, #0]
 800d224:	2000      	movs	r0, #0
 800d226:	e7db      	b.n	800d1e0 <__ssputs_r+0x58>
 800d228:	462a      	mov	r2, r5
 800d22a:	f000 fd8b 	bl	800dd44 <_realloc_r>
 800d22e:	4606      	mov	r6, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d1e1      	bne.n	800d1f8 <__ssputs_r+0x70>
 800d234:	6921      	ldr	r1, [r4, #16]
 800d236:	4650      	mov	r0, sl
 800d238:	f7fc f8e2 	bl	8009400 <_free_r>
 800d23c:	e7c7      	b.n	800d1ce <__ssputs_r+0x46>
	...

0800d240 <_svfiprintf_r>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	4698      	mov	r8, r3
 800d246:	898b      	ldrh	r3, [r1, #12]
 800d248:	061b      	lsls	r3, r3, #24
 800d24a:	b09d      	sub	sp, #116	; 0x74
 800d24c:	4607      	mov	r7, r0
 800d24e:	460d      	mov	r5, r1
 800d250:	4614      	mov	r4, r2
 800d252:	d50e      	bpl.n	800d272 <_svfiprintf_r+0x32>
 800d254:	690b      	ldr	r3, [r1, #16]
 800d256:	b963      	cbnz	r3, 800d272 <_svfiprintf_r+0x32>
 800d258:	2140      	movs	r1, #64	; 0x40
 800d25a:	f7fc f921 	bl	80094a0 <_malloc_r>
 800d25e:	6028      	str	r0, [r5, #0]
 800d260:	6128      	str	r0, [r5, #16]
 800d262:	b920      	cbnz	r0, 800d26e <_svfiprintf_r+0x2e>
 800d264:	230c      	movs	r3, #12
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d26c:	e0d1      	b.n	800d412 <_svfiprintf_r+0x1d2>
 800d26e:	2340      	movs	r3, #64	; 0x40
 800d270:	616b      	str	r3, [r5, #20]
 800d272:	2300      	movs	r3, #0
 800d274:	9309      	str	r3, [sp, #36]	; 0x24
 800d276:	2320      	movs	r3, #32
 800d278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d280:	2330      	movs	r3, #48	; 0x30
 800d282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d42c <_svfiprintf_r+0x1ec>
 800d286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d28a:	f04f 0901 	mov.w	r9, #1
 800d28e:	4623      	mov	r3, r4
 800d290:	469a      	mov	sl, r3
 800d292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d296:	b10a      	cbz	r2, 800d29c <_svfiprintf_r+0x5c>
 800d298:	2a25      	cmp	r2, #37	; 0x25
 800d29a:	d1f9      	bne.n	800d290 <_svfiprintf_r+0x50>
 800d29c:	ebba 0b04 	subs.w	fp, sl, r4
 800d2a0:	d00b      	beq.n	800d2ba <_svfiprintf_r+0x7a>
 800d2a2:	465b      	mov	r3, fp
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f7ff ff6d 	bl	800d188 <__ssputs_r>
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f000 80aa 	beq.w	800d408 <_svfiprintf_r+0x1c8>
 800d2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2b6:	445a      	add	r2, fp
 800d2b8:	9209      	str	r2, [sp, #36]	; 0x24
 800d2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 80a2 	beq.w	800d408 <_svfiprintf_r+0x1c8>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ce:	f10a 0a01 	add.w	sl, sl, #1
 800d2d2:	9304      	str	r3, [sp, #16]
 800d2d4:	9307      	str	r3, [sp, #28]
 800d2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2da:	931a      	str	r3, [sp, #104]	; 0x68
 800d2dc:	4654      	mov	r4, sl
 800d2de:	2205      	movs	r2, #5
 800d2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e4:	4851      	ldr	r0, [pc, #324]	; (800d42c <_svfiprintf_r+0x1ec>)
 800d2e6:	f7f2 ff83 	bl	80001f0 <memchr>
 800d2ea:	9a04      	ldr	r2, [sp, #16]
 800d2ec:	b9d8      	cbnz	r0, 800d326 <_svfiprintf_r+0xe6>
 800d2ee:	06d0      	lsls	r0, r2, #27
 800d2f0:	bf44      	itt	mi
 800d2f2:	2320      	movmi	r3, #32
 800d2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2f8:	0711      	lsls	r1, r2, #28
 800d2fa:	bf44      	itt	mi
 800d2fc:	232b      	movmi	r3, #43	; 0x2b
 800d2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d302:	f89a 3000 	ldrb.w	r3, [sl]
 800d306:	2b2a      	cmp	r3, #42	; 0x2a
 800d308:	d015      	beq.n	800d336 <_svfiprintf_r+0xf6>
 800d30a:	9a07      	ldr	r2, [sp, #28]
 800d30c:	4654      	mov	r4, sl
 800d30e:	2000      	movs	r0, #0
 800d310:	f04f 0c0a 	mov.w	ip, #10
 800d314:	4621      	mov	r1, r4
 800d316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d31a:	3b30      	subs	r3, #48	; 0x30
 800d31c:	2b09      	cmp	r3, #9
 800d31e:	d94e      	bls.n	800d3be <_svfiprintf_r+0x17e>
 800d320:	b1b0      	cbz	r0, 800d350 <_svfiprintf_r+0x110>
 800d322:	9207      	str	r2, [sp, #28]
 800d324:	e014      	b.n	800d350 <_svfiprintf_r+0x110>
 800d326:	eba0 0308 	sub.w	r3, r0, r8
 800d32a:	fa09 f303 	lsl.w	r3, r9, r3
 800d32e:	4313      	orrs	r3, r2
 800d330:	9304      	str	r3, [sp, #16]
 800d332:	46a2      	mov	sl, r4
 800d334:	e7d2      	b.n	800d2dc <_svfiprintf_r+0x9c>
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	1d19      	adds	r1, r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	9103      	str	r1, [sp, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfbb      	ittet	lt
 800d342:	425b      	neglt	r3, r3
 800d344:	f042 0202 	orrlt.w	r2, r2, #2
 800d348:	9307      	strge	r3, [sp, #28]
 800d34a:	9307      	strlt	r3, [sp, #28]
 800d34c:	bfb8      	it	lt
 800d34e:	9204      	strlt	r2, [sp, #16]
 800d350:	7823      	ldrb	r3, [r4, #0]
 800d352:	2b2e      	cmp	r3, #46	; 0x2e
 800d354:	d10c      	bne.n	800d370 <_svfiprintf_r+0x130>
 800d356:	7863      	ldrb	r3, [r4, #1]
 800d358:	2b2a      	cmp	r3, #42	; 0x2a
 800d35a:	d135      	bne.n	800d3c8 <_svfiprintf_r+0x188>
 800d35c:	9b03      	ldr	r3, [sp, #12]
 800d35e:	1d1a      	adds	r2, r3, #4
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	9203      	str	r2, [sp, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	bfb8      	it	lt
 800d368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d36c:	3402      	adds	r4, #2
 800d36e:	9305      	str	r3, [sp, #20]
 800d370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d43c <_svfiprintf_r+0x1fc>
 800d374:	7821      	ldrb	r1, [r4, #0]
 800d376:	2203      	movs	r2, #3
 800d378:	4650      	mov	r0, sl
 800d37a:	f7f2 ff39 	bl	80001f0 <memchr>
 800d37e:	b140      	cbz	r0, 800d392 <_svfiprintf_r+0x152>
 800d380:	2340      	movs	r3, #64	; 0x40
 800d382:	eba0 000a 	sub.w	r0, r0, sl
 800d386:	fa03 f000 	lsl.w	r0, r3, r0
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	4303      	orrs	r3, r0
 800d38e:	3401      	adds	r4, #1
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d396:	4826      	ldr	r0, [pc, #152]	; (800d430 <_svfiprintf_r+0x1f0>)
 800d398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d39c:	2206      	movs	r2, #6
 800d39e:	f7f2 ff27 	bl	80001f0 <memchr>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d038      	beq.n	800d418 <_svfiprintf_r+0x1d8>
 800d3a6:	4b23      	ldr	r3, [pc, #140]	; (800d434 <_svfiprintf_r+0x1f4>)
 800d3a8:	bb1b      	cbnz	r3, 800d3f2 <_svfiprintf_r+0x1b2>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	3307      	adds	r3, #7
 800d3ae:	f023 0307 	bic.w	r3, r3, #7
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	9303      	str	r3, [sp, #12]
 800d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b8:	4433      	add	r3, r6
 800d3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d3bc:	e767      	b.n	800d28e <_svfiprintf_r+0x4e>
 800d3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	e7a5      	b.n	800d314 <_svfiprintf_r+0xd4>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	f04f 0c0a 	mov.w	ip, #10
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3da:	3a30      	subs	r2, #48	; 0x30
 800d3dc:	2a09      	cmp	r2, #9
 800d3de:	d903      	bls.n	800d3e8 <_svfiprintf_r+0x1a8>
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d0c5      	beq.n	800d370 <_svfiprintf_r+0x130>
 800d3e4:	9105      	str	r1, [sp, #20]
 800d3e6:	e7c3      	b.n	800d370 <_svfiprintf_r+0x130>
 800d3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7f0      	b.n	800d3d4 <_svfiprintf_r+0x194>
 800d3f2:	ab03      	add	r3, sp, #12
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	462a      	mov	r2, r5
 800d3f8:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <_svfiprintf_r+0x1f8>)
 800d3fa:	a904      	add	r1, sp, #16
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	f7fc f949 	bl	8009694 <_printf_float>
 800d402:	1c42      	adds	r2, r0, #1
 800d404:	4606      	mov	r6, r0
 800d406:	d1d6      	bne.n	800d3b6 <_svfiprintf_r+0x176>
 800d408:	89ab      	ldrh	r3, [r5, #12]
 800d40a:	065b      	lsls	r3, r3, #25
 800d40c:	f53f af2c 	bmi.w	800d268 <_svfiprintf_r+0x28>
 800d410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d412:	b01d      	add	sp, #116	; 0x74
 800d414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d418:	ab03      	add	r3, sp, #12
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	462a      	mov	r2, r5
 800d41e:	4b06      	ldr	r3, [pc, #24]	; (800d438 <_svfiprintf_r+0x1f8>)
 800d420:	a904      	add	r1, sp, #16
 800d422:	4638      	mov	r0, r7
 800d424:	f7fc fbda 	bl	8009bdc <_printf_i>
 800d428:	e7eb      	b.n	800d402 <_svfiprintf_r+0x1c2>
 800d42a:	bf00      	nop
 800d42c:	0800eacc 	.word	0x0800eacc
 800d430:	0800ead6 	.word	0x0800ead6
 800d434:	08009695 	.word	0x08009695
 800d438:	0800d189 	.word	0x0800d189
 800d43c:	0800ead2 	.word	0x0800ead2

0800d440 <_sungetc_r>:
 800d440:	b538      	push	{r3, r4, r5, lr}
 800d442:	1c4b      	adds	r3, r1, #1
 800d444:	4614      	mov	r4, r2
 800d446:	d103      	bne.n	800d450 <_sungetc_r+0x10>
 800d448:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d44c:	4628      	mov	r0, r5
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	8993      	ldrh	r3, [r2, #12]
 800d452:	f023 0320 	bic.w	r3, r3, #32
 800d456:	8193      	strh	r3, [r2, #12]
 800d458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d45a:	6852      	ldr	r2, [r2, #4]
 800d45c:	b2cd      	uxtb	r5, r1
 800d45e:	b18b      	cbz	r3, 800d484 <_sungetc_r+0x44>
 800d460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d462:	4293      	cmp	r3, r2
 800d464:	dd08      	ble.n	800d478 <_sungetc_r+0x38>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	1e5a      	subs	r2, r3, #1
 800d46a:	6022      	str	r2, [r4, #0]
 800d46c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d470:	6863      	ldr	r3, [r4, #4]
 800d472:	3301      	adds	r3, #1
 800d474:	6063      	str	r3, [r4, #4]
 800d476:	e7e9      	b.n	800d44c <_sungetc_r+0xc>
 800d478:	4621      	mov	r1, r4
 800d47a:	f000 fbd1 	bl	800dc20 <__submore>
 800d47e:	2800      	cmp	r0, #0
 800d480:	d0f1      	beq.n	800d466 <_sungetc_r+0x26>
 800d482:	e7e1      	b.n	800d448 <_sungetc_r+0x8>
 800d484:	6921      	ldr	r1, [r4, #16]
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	b151      	cbz	r1, 800d4a0 <_sungetc_r+0x60>
 800d48a:	4299      	cmp	r1, r3
 800d48c:	d208      	bcs.n	800d4a0 <_sungetc_r+0x60>
 800d48e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d492:	42a9      	cmp	r1, r5
 800d494:	d104      	bne.n	800d4a0 <_sungetc_r+0x60>
 800d496:	3b01      	subs	r3, #1
 800d498:	3201      	adds	r2, #1
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	6062      	str	r2, [r4, #4]
 800d49e:	e7d5      	b.n	800d44c <_sungetc_r+0xc>
 800d4a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4a8:	6363      	str	r3, [r4, #52]	; 0x34
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800d4ae:	4623      	mov	r3, r4
 800d4b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e7dc      	b.n	800d474 <_sungetc_r+0x34>

0800d4ba <__ssrefill_r>:
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	460c      	mov	r4, r1
 800d4be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d4c0:	b169      	cbz	r1, 800d4de <__ssrefill_r+0x24>
 800d4c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4c6:	4299      	cmp	r1, r3
 800d4c8:	d001      	beq.n	800d4ce <__ssrefill_r+0x14>
 800d4ca:	f7fb ff99 	bl	8009400 <_free_r>
 800d4ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	6360      	str	r0, [r4, #52]	; 0x34
 800d4d6:	b113      	cbz	r3, 800d4de <__ssrefill_r+0x24>
 800d4d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d4da:	6023      	str	r3, [r4, #0]
 800d4dc:	bd10      	pop	{r4, pc}
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	6063      	str	r3, [r4, #4]
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	f043 0320 	orr.w	r3, r3, #32
 800d4ec:	81a3      	strh	r3, [r4, #12]
 800d4ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4f2:	e7f3      	b.n	800d4dc <__ssrefill_r+0x22>

0800d4f4 <__ssvfiscanf_r>:
 800d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800d4fe:	2100      	movs	r1, #0
 800d500:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d504:	49b2      	ldr	r1, [pc, #712]	; (800d7d0 <__ssvfiscanf_r+0x2dc>)
 800d506:	91a0      	str	r1, [sp, #640]	; 0x280
 800d508:	f10d 0804 	add.w	r8, sp, #4
 800d50c:	49b1      	ldr	r1, [pc, #708]	; (800d7d4 <__ssvfiscanf_r+0x2e0>)
 800d50e:	4fb2      	ldr	r7, [pc, #712]	; (800d7d8 <__ssvfiscanf_r+0x2e4>)
 800d510:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800d7dc <__ssvfiscanf_r+0x2e8>
 800d514:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d518:	4606      	mov	r6, r0
 800d51a:	91a1      	str	r1, [sp, #644]	; 0x284
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	f892 a000 	ldrb.w	sl, [r2]
 800d522:	f1ba 0f00 	cmp.w	sl, #0
 800d526:	f000 8151 	beq.w	800d7cc <__ssvfiscanf_r+0x2d8>
 800d52a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800d52e:	f013 0308 	ands.w	r3, r3, #8
 800d532:	f102 0501 	add.w	r5, r2, #1
 800d536:	d019      	beq.n	800d56c <__ssvfiscanf_r+0x78>
 800d538:	6863      	ldr	r3, [r4, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	dd0f      	ble.n	800d55e <__ssvfiscanf_r+0x6a>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	781a      	ldrb	r2, [r3, #0]
 800d542:	5cba      	ldrb	r2, [r7, r2]
 800d544:	0712      	lsls	r2, r2, #28
 800d546:	d401      	bmi.n	800d54c <__ssvfiscanf_r+0x58>
 800d548:	462a      	mov	r2, r5
 800d54a:	e7e8      	b.n	800d51e <__ssvfiscanf_r+0x2a>
 800d54c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d54e:	3201      	adds	r2, #1
 800d550:	9245      	str	r2, [sp, #276]	; 0x114
 800d552:	6862      	ldr	r2, [r4, #4]
 800d554:	3301      	adds	r3, #1
 800d556:	3a01      	subs	r2, #1
 800d558:	6062      	str	r2, [r4, #4]
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	e7ec      	b.n	800d538 <__ssvfiscanf_r+0x44>
 800d55e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d560:	4621      	mov	r1, r4
 800d562:	4630      	mov	r0, r6
 800d564:	4798      	blx	r3
 800d566:	2800      	cmp	r0, #0
 800d568:	d0e9      	beq.n	800d53e <__ssvfiscanf_r+0x4a>
 800d56a:	e7ed      	b.n	800d548 <__ssvfiscanf_r+0x54>
 800d56c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800d570:	f040 8083 	bne.w	800d67a <__ssvfiscanf_r+0x186>
 800d574:	9341      	str	r3, [sp, #260]	; 0x104
 800d576:	9343      	str	r3, [sp, #268]	; 0x10c
 800d578:	7853      	ldrb	r3, [r2, #1]
 800d57a:	2b2a      	cmp	r3, #42	; 0x2a
 800d57c:	bf02      	ittt	eq
 800d57e:	2310      	moveq	r3, #16
 800d580:	1c95      	addeq	r5, r2, #2
 800d582:	9341      	streq	r3, [sp, #260]	; 0x104
 800d584:	220a      	movs	r2, #10
 800d586:	46ab      	mov	fp, r5
 800d588:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800d58c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d590:	2b09      	cmp	r3, #9
 800d592:	d91d      	bls.n	800d5d0 <__ssvfiscanf_r+0xdc>
 800d594:	4891      	ldr	r0, [pc, #580]	; (800d7dc <__ssvfiscanf_r+0x2e8>)
 800d596:	2203      	movs	r2, #3
 800d598:	f7f2 fe2a 	bl	80001f0 <memchr>
 800d59c:	b140      	cbz	r0, 800d5b0 <__ssvfiscanf_r+0xbc>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	eba0 0009 	sub.w	r0, r0, r9
 800d5a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d5a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d5aa:	4318      	orrs	r0, r3
 800d5ac:	9041      	str	r0, [sp, #260]	; 0x104
 800d5ae:	465d      	mov	r5, fp
 800d5b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d5b4:	2b78      	cmp	r3, #120	; 0x78
 800d5b6:	d806      	bhi.n	800d5c6 <__ssvfiscanf_r+0xd2>
 800d5b8:	2b57      	cmp	r3, #87	; 0x57
 800d5ba:	d810      	bhi.n	800d5de <__ssvfiscanf_r+0xea>
 800d5bc:	2b25      	cmp	r3, #37	; 0x25
 800d5be:	d05c      	beq.n	800d67a <__ssvfiscanf_r+0x186>
 800d5c0:	d856      	bhi.n	800d670 <__ssvfiscanf_r+0x17c>
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d074      	beq.n	800d6b0 <__ssvfiscanf_r+0x1bc>
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	9347      	str	r3, [sp, #284]	; 0x11c
 800d5ca:	230a      	movs	r3, #10
 800d5cc:	9342      	str	r3, [sp, #264]	; 0x108
 800d5ce:	e081      	b.n	800d6d4 <__ssvfiscanf_r+0x1e0>
 800d5d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d5d2:	fb02 1303 	mla	r3, r2, r3, r1
 800d5d6:	3b30      	subs	r3, #48	; 0x30
 800d5d8:	9343      	str	r3, [sp, #268]	; 0x10c
 800d5da:	465d      	mov	r5, fp
 800d5dc:	e7d3      	b.n	800d586 <__ssvfiscanf_r+0x92>
 800d5de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d5e2:	2a20      	cmp	r2, #32
 800d5e4:	d8ef      	bhi.n	800d5c6 <__ssvfiscanf_r+0xd2>
 800d5e6:	a101      	add	r1, pc, #4	; (adr r1, 800d5ec <__ssvfiscanf_r+0xf8>)
 800d5e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d5ec:	0800d6bf 	.word	0x0800d6bf
 800d5f0:	0800d5c7 	.word	0x0800d5c7
 800d5f4:	0800d5c7 	.word	0x0800d5c7
 800d5f8:	0800d71d 	.word	0x0800d71d
 800d5fc:	0800d5c7 	.word	0x0800d5c7
 800d600:	0800d5c7 	.word	0x0800d5c7
 800d604:	0800d5c7 	.word	0x0800d5c7
 800d608:	0800d5c7 	.word	0x0800d5c7
 800d60c:	0800d5c7 	.word	0x0800d5c7
 800d610:	0800d5c7 	.word	0x0800d5c7
 800d614:	0800d5c7 	.word	0x0800d5c7
 800d618:	0800d733 	.word	0x0800d733
 800d61c:	0800d709 	.word	0x0800d709
 800d620:	0800d677 	.word	0x0800d677
 800d624:	0800d677 	.word	0x0800d677
 800d628:	0800d677 	.word	0x0800d677
 800d62c:	0800d5c7 	.word	0x0800d5c7
 800d630:	0800d70d 	.word	0x0800d70d
 800d634:	0800d5c7 	.word	0x0800d5c7
 800d638:	0800d5c7 	.word	0x0800d5c7
 800d63c:	0800d5c7 	.word	0x0800d5c7
 800d640:	0800d5c7 	.word	0x0800d5c7
 800d644:	0800d743 	.word	0x0800d743
 800d648:	0800d715 	.word	0x0800d715
 800d64c:	0800d6b7 	.word	0x0800d6b7
 800d650:	0800d5c7 	.word	0x0800d5c7
 800d654:	0800d5c7 	.word	0x0800d5c7
 800d658:	0800d73f 	.word	0x0800d73f
 800d65c:	0800d5c7 	.word	0x0800d5c7
 800d660:	0800d709 	.word	0x0800d709
 800d664:	0800d5c7 	.word	0x0800d5c7
 800d668:	0800d5c7 	.word	0x0800d5c7
 800d66c:	0800d6bf 	.word	0x0800d6bf
 800d670:	3b45      	subs	r3, #69	; 0x45
 800d672:	2b02      	cmp	r3, #2
 800d674:	d8a7      	bhi.n	800d5c6 <__ssvfiscanf_r+0xd2>
 800d676:	2305      	movs	r3, #5
 800d678:	e02b      	b.n	800d6d2 <__ssvfiscanf_r+0x1de>
 800d67a:	6863      	ldr	r3, [r4, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	dd0d      	ble.n	800d69c <__ssvfiscanf_r+0x1a8>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	781a      	ldrb	r2, [r3, #0]
 800d684:	4552      	cmp	r2, sl
 800d686:	f040 80a1 	bne.w	800d7cc <__ssvfiscanf_r+0x2d8>
 800d68a:	3301      	adds	r3, #1
 800d68c:	6862      	ldr	r2, [r4, #4]
 800d68e:	6023      	str	r3, [r4, #0]
 800d690:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d692:	3a01      	subs	r2, #1
 800d694:	3301      	adds	r3, #1
 800d696:	6062      	str	r2, [r4, #4]
 800d698:	9345      	str	r3, [sp, #276]	; 0x114
 800d69a:	e755      	b.n	800d548 <__ssvfiscanf_r+0x54>
 800d69c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	4798      	blx	r3
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d0eb      	beq.n	800d680 <__ssvfiscanf_r+0x18c>
 800d6a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	f040 8084 	bne.w	800d7b8 <__ssvfiscanf_r+0x2c4>
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b4:	e086      	b.n	800d7c4 <__ssvfiscanf_r+0x2d0>
 800d6b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d6b8:	f042 0220 	orr.w	r2, r2, #32
 800d6bc:	9241      	str	r2, [sp, #260]	; 0x104
 800d6be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d6c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6c4:	9241      	str	r2, [sp, #260]	; 0x104
 800d6c6:	2210      	movs	r2, #16
 800d6c8:	2b6f      	cmp	r3, #111	; 0x6f
 800d6ca:	9242      	str	r2, [sp, #264]	; 0x108
 800d6cc:	bf34      	ite	cc
 800d6ce:	2303      	movcc	r3, #3
 800d6d0:	2304      	movcs	r3, #4
 800d6d2:	9347      	str	r3, [sp, #284]	; 0x11c
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd41      	ble.n	800d75e <__ssvfiscanf_r+0x26a>
 800d6da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6dc:	0659      	lsls	r1, r3, #25
 800d6de:	d404      	bmi.n	800d6ea <__ssvfiscanf_r+0x1f6>
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	781a      	ldrb	r2, [r3, #0]
 800d6e4:	5cba      	ldrb	r2, [r7, r2]
 800d6e6:	0712      	lsls	r2, r2, #28
 800d6e8:	d440      	bmi.n	800d76c <__ssvfiscanf_r+0x278>
 800d6ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	dc4f      	bgt.n	800d790 <__ssvfiscanf_r+0x29c>
 800d6f0:	466b      	mov	r3, sp
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	a941      	add	r1, sp, #260	; 0x104
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f000 f874 	bl	800d7e4 <_scanf_chars>
 800d6fc:	2801      	cmp	r0, #1
 800d6fe:	d065      	beq.n	800d7cc <__ssvfiscanf_r+0x2d8>
 800d700:	2802      	cmp	r0, #2
 800d702:	f47f af21 	bne.w	800d548 <__ssvfiscanf_r+0x54>
 800d706:	e7cf      	b.n	800d6a8 <__ssvfiscanf_r+0x1b4>
 800d708:	220a      	movs	r2, #10
 800d70a:	e7dd      	b.n	800d6c8 <__ssvfiscanf_r+0x1d4>
 800d70c:	2300      	movs	r3, #0
 800d70e:	9342      	str	r3, [sp, #264]	; 0x108
 800d710:	2303      	movs	r3, #3
 800d712:	e7de      	b.n	800d6d2 <__ssvfiscanf_r+0x1de>
 800d714:	2308      	movs	r3, #8
 800d716:	9342      	str	r3, [sp, #264]	; 0x108
 800d718:	2304      	movs	r3, #4
 800d71a:	e7da      	b.n	800d6d2 <__ssvfiscanf_r+0x1de>
 800d71c:	4629      	mov	r1, r5
 800d71e:	4640      	mov	r0, r8
 800d720:	f000 f9c6 	bl	800dab0 <__sccl>
 800d724:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d72a:	9341      	str	r3, [sp, #260]	; 0x104
 800d72c:	4605      	mov	r5, r0
 800d72e:	2301      	movs	r3, #1
 800d730:	e7cf      	b.n	800d6d2 <__ssvfiscanf_r+0x1de>
 800d732:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d738:	9341      	str	r3, [sp, #260]	; 0x104
 800d73a:	2300      	movs	r3, #0
 800d73c:	e7c9      	b.n	800d6d2 <__ssvfiscanf_r+0x1de>
 800d73e:	2302      	movs	r3, #2
 800d740:	e7c7      	b.n	800d6d2 <__ssvfiscanf_r+0x1de>
 800d742:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d744:	06c3      	lsls	r3, r0, #27
 800d746:	f53f aeff 	bmi.w	800d548 <__ssvfiscanf_r+0x54>
 800d74a:	9b00      	ldr	r3, [sp, #0]
 800d74c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d74e:	1d19      	adds	r1, r3, #4
 800d750:	9100      	str	r1, [sp, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	07c0      	lsls	r0, r0, #31
 800d756:	bf4c      	ite	mi
 800d758:	801a      	strhmi	r2, [r3, #0]
 800d75a:	601a      	strpl	r2, [r3, #0]
 800d75c:	e6f4      	b.n	800d548 <__ssvfiscanf_r+0x54>
 800d75e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d760:	4621      	mov	r1, r4
 800d762:	4630      	mov	r0, r6
 800d764:	4798      	blx	r3
 800d766:	2800      	cmp	r0, #0
 800d768:	d0b7      	beq.n	800d6da <__ssvfiscanf_r+0x1e6>
 800d76a:	e79d      	b.n	800d6a8 <__ssvfiscanf_r+0x1b4>
 800d76c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d76e:	3201      	adds	r2, #1
 800d770:	9245      	str	r2, [sp, #276]	; 0x114
 800d772:	6862      	ldr	r2, [r4, #4]
 800d774:	3a01      	subs	r2, #1
 800d776:	2a00      	cmp	r2, #0
 800d778:	6062      	str	r2, [r4, #4]
 800d77a:	dd02      	ble.n	800d782 <__ssvfiscanf_r+0x28e>
 800d77c:	3301      	adds	r3, #1
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	e7ae      	b.n	800d6e0 <__ssvfiscanf_r+0x1ec>
 800d782:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d784:	4621      	mov	r1, r4
 800d786:	4630      	mov	r0, r6
 800d788:	4798      	blx	r3
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d0a8      	beq.n	800d6e0 <__ssvfiscanf_r+0x1ec>
 800d78e:	e78b      	b.n	800d6a8 <__ssvfiscanf_r+0x1b4>
 800d790:	2b04      	cmp	r3, #4
 800d792:	dc06      	bgt.n	800d7a2 <__ssvfiscanf_r+0x2ae>
 800d794:	466b      	mov	r3, sp
 800d796:	4622      	mov	r2, r4
 800d798:	a941      	add	r1, sp, #260	; 0x104
 800d79a:	4630      	mov	r0, r6
 800d79c:	f000 f87a 	bl	800d894 <_scanf_i>
 800d7a0:	e7ac      	b.n	800d6fc <__ssvfiscanf_r+0x208>
 800d7a2:	4b0f      	ldr	r3, [pc, #60]	; (800d7e0 <__ssvfiscanf_r+0x2ec>)
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f43f aecf 	beq.w	800d548 <__ssvfiscanf_r+0x54>
 800d7aa:	466b      	mov	r3, sp
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	a941      	add	r1, sp, #260	; 0x104
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f7fc fb39 	bl	8009e28 <_scanf_float>
 800d7b6:	e7a1      	b.n	800d6fc <__ssvfiscanf_r+0x208>
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d7be:	bf18      	it	ne
 800d7c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800d7c4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d7ce:	e7f9      	b.n	800d7c4 <__ssvfiscanf_r+0x2d0>
 800d7d0:	0800d441 	.word	0x0800d441
 800d7d4:	0800d4bb 	.word	0x0800d4bb
 800d7d8:	0800e759 	.word	0x0800e759
 800d7dc:	0800ead2 	.word	0x0800ead2
 800d7e0:	08009e29 	.word	0x08009e29

0800d7e4 <_scanf_chars>:
 800d7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e8:	4615      	mov	r5, r2
 800d7ea:	688a      	ldr	r2, [r1, #8]
 800d7ec:	4680      	mov	r8, r0
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	b932      	cbnz	r2, 800d800 <_scanf_chars+0x1c>
 800d7f2:	698a      	ldr	r2, [r1, #24]
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	bf0c      	ite	eq
 800d7f8:	2201      	moveq	r2, #1
 800d7fa:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800d7fe:	608a      	str	r2, [r1, #8]
 800d800:	6822      	ldr	r2, [r4, #0]
 800d802:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d890 <_scanf_chars+0xac>
 800d806:	06d1      	lsls	r1, r2, #27
 800d808:	bf5f      	itttt	pl
 800d80a:	681a      	ldrpl	r2, [r3, #0]
 800d80c:	1d11      	addpl	r1, r2, #4
 800d80e:	6019      	strpl	r1, [r3, #0]
 800d810:	6816      	ldrpl	r6, [r2, #0]
 800d812:	2700      	movs	r7, #0
 800d814:	69a0      	ldr	r0, [r4, #24]
 800d816:	b188      	cbz	r0, 800d83c <_scanf_chars+0x58>
 800d818:	2801      	cmp	r0, #1
 800d81a:	d107      	bne.n	800d82c <_scanf_chars+0x48>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	781a      	ldrb	r2, [r3, #0]
 800d820:	6963      	ldr	r3, [r4, #20]
 800d822:	5c9b      	ldrb	r3, [r3, r2]
 800d824:	b953      	cbnz	r3, 800d83c <_scanf_chars+0x58>
 800d826:	bb27      	cbnz	r7, 800d872 <_scanf_chars+0x8e>
 800d828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82c:	2802      	cmp	r0, #2
 800d82e:	d120      	bne.n	800d872 <_scanf_chars+0x8e>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d838:	071b      	lsls	r3, r3, #28
 800d83a:	d41a      	bmi.n	800d872 <_scanf_chars+0x8e>
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	06da      	lsls	r2, r3, #27
 800d840:	bf5e      	ittt	pl
 800d842:	682b      	ldrpl	r3, [r5, #0]
 800d844:	781b      	ldrbpl	r3, [r3, #0]
 800d846:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d84a:	682a      	ldr	r2, [r5, #0]
 800d84c:	686b      	ldr	r3, [r5, #4]
 800d84e:	3201      	adds	r2, #1
 800d850:	602a      	str	r2, [r5, #0]
 800d852:	68a2      	ldr	r2, [r4, #8]
 800d854:	3b01      	subs	r3, #1
 800d856:	3a01      	subs	r2, #1
 800d858:	606b      	str	r3, [r5, #4]
 800d85a:	3701      	adds	r7, #1
 800d85c:	60a2      	str	r2, [r4, #8]
 800d85e:	b142      	cbz	r2, 800d872 <_scanf_chars+0x8e>
 800d860:	2b00      	cmp	r3, #0
 800d862:	dcd7      	bgt.n	800d814 <_scanf_chars+0x30>
 800d864:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d868:	4629      	mov	r1, r5
 800d86a:	4640      	mov	r0, r8
 800d86c:	4798      	blx	r3
 800d86e:	2800      	cmp	r0, #0
 800d870:	d0d0      	beq.n	800d814 <_scanf_chars+0x30>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	f013 0310 	ands.w	r3, r3, #16
 800d878:	d105      	bne.n	800d886 <_scanf_chars+0xa2>
 800d87a:	68e2      	ldr	r2, [r4, #12]
 800d87c:	3201      	adds	r2, #1
 800d87e:	60e2      	str	r2, [r4, #12]
 800d880:	69a2      	ldr	r2, [r4, #24]
 800d882:	b102      	cbz	r2, 800d886 <_scanf_chars+0xa2>
 800d884:	7033      	strb	r3, [r6, #0]
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	441f      	add	r7, r3
 800d88a:	6127      	str	r7, [r4, #16]
 800d88c:	2000      	movs	r0, #0
 800d88e:	e7cb      	b.n	800d828 <_scanf_chars+0x44>
 800d890:	0800e759 	.word	0x0800e759

0800d894 <_scanf_i>:
 800d894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d898:	4698      	mov	r8, r3
 800d89a:	4b74      	ldr	r3, [pc, #464]	; (800da6c <_scanf_i+0x1d8>)
 800d89c:	460c      	mov	r4, r1
 800d89e:	4682      	mov	sl, r0
 800d8a0:	4616      	mov	r6, r2
 800d8a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8a6:	b087      	sub	sp, #28
 800d8a8:	ab03      	add	r3, sp, #12
 800d8aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d8ae:	4b70      	ldr	r3, [pc, #448]	; (800da70 <_scanf_i+0x1dc>)
 800d8b0:	69a1      	ldr	r1, [r4, #24]
 800d8b2:	4a70      	ldr	r2, [pc, #448]	; (800da74 <_scanf_i+0x1e0>)
 800d8b4:	2903      	cmp	r1, #3
 800d8b6:	bf18      	it	ne
 800d8b8:	461a      	movne	r2, r3
 800d8ba:	68a3      	ldr	r3, [r4, #8]
 800d8bc:	9201      	str	r2, [sp, #4]
 800d8be:	1e5a      	subs	r2, r3, #1
 800d8c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d8c4:	bf88      	it	hi
 800d8c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d8ca:	4627      	mov	r7, r4
 800d8cc:	bf82      	ittt	hi
 800d8ce:	eb03 0905 	addhi.w	r9, r3, r5
 800d8d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d8d6:	60a3      	strhi	r3, [r4, #8]
 800d8d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d8dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d8e0:	bf98      	it	ls
 800d8e2:	f04f 0900 	movls.w	r9, #0
 800d8e6:	6023      	str	r3, [r4, #0]
 800d8e8:	463d      	mov	r5, r7
 800d8ea:	f04f 0b00 	mov.w	fp, #0
 800d8ee:	6831      	ldr	r1, [r6, #0]
 800d8f0:	ab03      	add	r3, sp, #12
 800d8f2:	7809      	ldrb	r1, [r1, #0]
 800d8f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d8f8:	2202      	movs	r2, #2
 800d8fa:	f7f2 fc79 	bl	80001f0 <memchr>
 800d8fe:	b328      	cbz	r0, 800d94c <_scanf_i+0xb8>
 800d900:	f1bb 0f01 	cmp.w	fp, #1
 800d904:	d159      	bne.n	800d9ba <_scanf_i+0x126>
 800d906:	6862      	ldr	r2, [r4, #4]
 800d908:	b92a      	cbnz	r2, 800d916 <_scanf_i+0x82>
 800d90a:	6822      	ldr	r2, [r4, #0]
 800d90c:	2308      	movs	r3, #8
 800d90e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d912:	6063      	str	r3, [r4, #4]
 800d914:	6022      	str	r2, [r4, #0]
 800d916:	6822      	ldr	r2, [r4, #0]
 800d918:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d91c:	6022      	str	r2, [r4, #0]
 800d91e:	68a2      	ldr	r2, [r4, #8]
 800d920:	1e51      	subs	r1, r2, #1
 800d922:	60a1      	str	r1, [r4, #8]
 800d924:	b192      	cbz	r2, 800d94c <_scanf_i+0xb8>
 800d926:	6832      	ldr	r2, [r6, #0]
 800d928:	1c51      	adds	r1, r2, #1
 800d92a:	6031      	str	r1, [r6, #0]
 800d92c:	7812      	ldrb	r2, [r2, #0]
 800d92e:	f805 2b01 	strb.w	r2, [r5], #1
 800d932:	6872      	ldr	r2, [r6, #4]
 800d934:	3a01      	subs	r2, #1
 800d936:	2a00      	cmp	r2, #0
 800d938:	6072      	str	r2, [r6, #4]
 800d93a:	dc07      	bgt.n	800d94c <_scanf_i+0xb8>
 800d93c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d940:	4631      	mov	r1, r6
 800d942:	4650      	mov	r0, sl
 800d944:	4790      	blx	r2
 800d946:	2800      	cmp	r0, #0
 800d948:	f040 8085 	bne.w	800da56 <_scanf_i+0x1c2>
 800d94c:	f10b 0b01 	add.w	fp, fp, #1
 800d950:	f1bb 0f03 	cmp.w	fp, #3
 800d954:	d1cb      	bne.n	800d8ee <_scanf_i+0x5a>
 800d956:	6863      	ldr	r3, [r4, #4]
 800d958:	b90b      	cbnz	r3, 800d95e <_scanf_i+0xca>
 800d95a:	230a      	movs	r3, #10
 800d95c:	6063      	str	r3, [r4, #4]
 800d95e:	6863      	ldr	r3, [r4, #4]
 800d960:	4945      	ldr	r1, [pc, #276]	; (800da78 <_scanf_i+0x1e4>)
 800d962:	6960      	ldr	r0, [r4, #20]
 800d964:	1ac9      	subs	r1, r1, r3
 800d966:	f000 f8a3 	bl	800dab0 <__sccl>
 800d96a:	f04f 0b00 	mov.w	fp, #0
 800d96e:	68a3      	ldr	r3, [r4, #8]
 800d970:	6822      	ldr	r2, [r4, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d03d      	beq.n	800d9f2 <_scanf_i+0x15e>
 800d976:	6831      	ldr	r1, [r6, #0]
 800d978:	6960      	ldr	r0, [r4, #20]
 800d97a:	f891 c000 	ldrb.w	ip, [r1]
 800d97e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d982:	2800      	cmp	r0, #0
 800d984:	d035      	beq.n	800d9f2 <_scanf_i+0x15e>
 800d986:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d98a:	d124      	bne.n	800d9d6 <_scanf_i+0x142>
 800d98c:	0510      	lsls	r0, r2, #20
 800d98e:	d522      	bpl.n	800d9d6 <_scanf_i+0x142>
 800d990:	f10b 0b01 	add.w	fp, fp, #1
 800d994:	f1b9 0f00 	cmp.w	r9, #0
 800d998:	d003      	beq.n	800d9a2 <_scanf_i+0x10e>
 800d99a:	3301      	adds	r3, #1
 800d99c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d9a0:	60a3      	str	r3, [r4, #8]
 800d9a2:	6873      	ldr	r3, [r6, #4]
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	6073      	str	r3, [r6, #4]
 800d9aa:	dd1b      	ble.n	800d9e4 <_scanf_i+0x150>
 800d9ac:	6833      	ldr	r3, [r6, #0]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	6033      	str	r3, [r6, #0]
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	60a3      	str	r3, [r4, #8]
 800d9b8:	e7d9      	b.n	800d96e <_scanf_i+0xda>
 800d9ba:	f1bb 0f02 	cmp.w	fp, #2
 800d9be:	d1ae      	bne.n	800d91e <_scanf_i+0x8a>
 800d9c0:	6822      	ldr	r2, [r4, #0]
 800d9c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d9c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d9ca:	d1bf      	bne.n	800d94c <_scanf_i+0xb8>
 800d9cc:	2310      	movs	r3, #16
 800d9ce:	6063      	str	r3, [r4, #4]
 800d9d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9d4:	e7a2      	b.n	800d91c <_scanf_i+0x88>
 800d9d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d9da:	6022      	str	r2, [r4, #0]
 800d9dc:	780b      	ldrb	r3, [r1, #0]
 800d9de:	f805 3b01 	strb.w	r3, [r5], #1
 800d9e2:	e7de      	b.n	800d9a2 <_scanf_i+0x10e>
 800d9e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d9e8:	4631      	mov	r1, r6
 800d9ea:	4650      	mov	r0, sl
 800d9ec:	4798      	blx	r3
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d0df      	beq.n	800d9b2 <_scanf_i+0x11e>
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	05d9      	lsls	r1, r3, #23
 800d9f6:	d50d      	bpl.n	800da14 <_scanf_i+0x180>
 800d9f8:	42bd      	cmp	r5, r7
 800d9fa:	d909      	bls.n	800da10 <_scanf_i+0x17c>
 800d9fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800da00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da04:	4632      	mov	r2, r6
 800da06:	4650      	mov	r0, sl
 800da08:	4798      	blx	r3
 800da0a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800da0e:	464d      	mov	r5, r9
 800da10:	42bd      	cmp	r5, r7
 800da12:	d028      	beq.n	800da66 <_scanf_i+0x1d2>
 800da14:	6822      	ldr	r2, [r4, #0]
 800da16:	f012 0210 	ands.w	r2, r2, #16
 800da1a:	d113      	bne.n	800da44 <_scanf_i+0x1b0>
 800da1c:	702a      	strb	r2, [r5, #0]
 800da1e:	6863      	ldr	r3, [r4, #4]
 800da20:	9e01      	ldr	r6, [sp, #4]
 800da22:	4639      	mov	r1, r7
 800da24:	4650      	mov	r0, sl
 800da26:	47b0      	blx	r6
 800da28:	f8d8 3000 	ldr.w	r3, [r8]
 800da2c:	6821      	ldr	r1, [r4, #0]
 800da2e:	1d1a      	adds	r2, r3, #4
 800da30:	f8c8 2000 	str.w	r2, [r8]
 800da34:	f011 0f20 	tst.w	r1, #32
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	d00f      	beq.n	800da5c <_scanf_i+0x1c8>
 800da3c:	6018      	str	r0, [r3, #0]
 800da3e:	68e3      	ldr	r3, [r4, #12]
 800da40:	3301      	adds	r3, #1
 800da42:	60e3      	str	r3, [r4, #12]
 800da44:	1bed      	subs	r5, r5, r7
 800da46:	44ab      	add	fp, r5
 800da48:	6925      	ldr	r5, [r4, #16]
 800da4a:	445d      	add	r5, fp
 800da4c:	6125      	str	r5, [r4, #16]
 800da4e:	2000      	movs	r0, #0
 800da50:	b007      	add	sp, #28
 800da52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da56:	f04f 0b00 	mov.w	fp, #0
 800da5a:	e7ca      	b.n	800d9f2 <_scanf_i+0x15e>
 800da5c:	07ca      	lsls	r2, r1, #31
 800da5e:	bf4c      	ite	mi
 800da60:	8018      	strhmi	r0, [r3, #0]
 800da62:	6018      	strpl	r0, [r3, #0]
 800da64:	e7eb      	b.n	800da3e <_scanf_i+0x1aa>
 800da66:	2001      	movs	r0, #1
 800da68:	e7f2      	b.n	800da50 <_scanf_i+0x1bc>
 800da6a:	bf00      	nop
 800da6c:	0800e598 	.word	0x0800e598
 800da70:	0800dc1d 	.word	0x0800dc1d
 800da74:	0800b1f1 	.word	0x0800b1f1
 800da78:	0800eaf6 	.word	0x0800eaf6

0800da7c <_read_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4d07      	ldr	r5, [pc, #28]	; (800da9c <_read_r+0x20>)
 800da80:	4604      	mov	r4, r0
 800da82:	4608      	mov	r0, r1
 800da84:	4611      	mov	r1, r2
 800da86:	2200      	movs	r2, #0
 800da88:	602a      	str	r2, [r5, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	f7f5 f92e 	bl	8002cec <_read>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	d102      	bne.n	800da9a <_read_r+0x1e>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	b103      	cbz	r3, 800da9a <_read_r+0x1e>
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	20006064 	.word	0x20006064

0800daa0 <nan>:
 800daa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800daa8 <nan+0x8>
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	00000000 	.word	0x00000000
 800daac:	7ff80000 	.word	0x7ff80000

0800dab0 <__sccl>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	780b      	ldrb	r3, [r1, #0]
 800dab4:	4604      	mov	r4, r0
 800dab6:	2b5e      	cmp	r3, #94	; 0x5e
 800dab8:	bf0b      	itete	eq
 800daba:	784b      	ldrbeq	r3, [r1, #1]
 800dabc:	1c48      	addne	r0, r1, #1
 800dabe:	1c88      	addeq	r0, r1, #2
 800dac0:	2200      	movne	r2, #0
 800dac2:	bf08      	it	eq
 800dac4:	2201      	moveq	r2, #1
 800dac6:	1e61      	subs	r1, r4, #1
 800dac8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dacc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dad0:	42a9      	cmp	r1, r5
 800dad2:	d1fb      	bne.n	800dacc <__sccl+0x1c>
 800dad4:	b90b      	cbnz	r3, 800dada <__sccl+0x2a>
 800dad6:	3801      	subs	r0, #1
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
 800dada:	f082 0101 	eor.w	r1, r2, #1
 800dade:	54e1      	strb	r1, [r4, r3]
 800dae0:	1c42      	adds	r2, r0, #1
 800dae2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800dae6:	2d2d      	cmp	r5, #45	; 0x2d
 800dae8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 800daec:	4610      	mov	r0, r2
 800daee:	d006      	beq.n	800dafe <__sccl+0x4e>
 800daf0:	2d5d      	cmp	r5, #93	; 0x5d
 800daf2:	d0f1      	beq.n	800dad8 <__sccl+0x28>
 800daf4:	b90d      	cbnz	r5, 800dafa <__sccl+0x4a>
 800daf6:	4630      	mov	r0, r6
 800daf8:	e7ee      	b.n	800dad8 <__sccl+0x28>
 800dafa:	462b      	mov	r3, r5
 800dafc:	e7ef      	b.n	800dade <__sccl+0x2e>
 800dafe:	7816      	ldrb	r6, [r2, #0]
 800db00:	2e5d      	cmp	r6, #93	; 0x5d
 800db02:	d0fa      	beq.n	800dafa <__sccl+0x4a>
 800db04:	42b3      	cmp	r3, r6
 800db06:	dcf8      	bgt.n	800dafa <__sccl+0x4a>
 800db08:	4618      	mov	r0, r3
 800db0a:	3001      	adds	r0, #1
 800db0c:	4286      	cmp	r6, r0
 800db0e:	5421      	strb	r1, [r4, r0]
 800db10:	dcfb      	bgt.n	800db0a <__sccl+0x5a>
 800db12:	43d8      	mvns	r0, r3
 800db14:	4430      	add	r0, r6
 800db16:	1c5d      	adds	r5, r3, #1
 800db18:	42b3      	cmp	r3, r6
 800db1a:	bfa8      	it	ge
 800db1c:	2000      	movge	r0, #0
 800db1e:	182b      	adds	r3, r5, r0
 800db20:	3202      	adds	r2, #2
 800db22:	e7de      	b.n	800dae2 <__sccl+0x32>

0800db24 <_strtoul_l.isra.0>:
 800db24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db28:	4e3b      	ldr	r6, [pc, #236]	; (800dc18 <_strtoul_l.isra.0+0xf4>)
 800db2a:	4686      	mov	lr, r0
 800db2c:	468c      	mov	ip, r1
 800db2e:	4660      	mov	r0, ip
 800db30:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800db34:	5da5      	ldrb	r5, [r4, r6]
 800db36:	f015 0508 	ands.w	r5, r5, #8
 800db3a:	d1f8      	bne.n	800db2e <_strtoul_l.isra.0+0xa>
 800db3c:	2c2d      	cmp	r4, #45	; 0x2d
 800db3e:	d134      	bne.n	800dbaa <_strtoul_l.isra.0+0x86>
 800db40:	f89c 4000 	ldrb.w	r4, [ip]
 800db44:	f04f 0801 	mov.w	r8, #1
 800db48:	f100 0c02 	add.w	ip, r0, #2
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d05e      	beq.n	800dc0e <_strtoul_l.isra.0+0xea>
 800db50:	2b10      	cmp	r3, #16
 800db52:	d10c      	bne.n	800db6e <_strtoul_l.isra.0+0x4a>
 800db54:	2c30      	cmp	r4, #48	; 0x30
 800db56:	d10a      	bne.n	800db6e <_strtoul_l.isra.0+0x4a>
 800db58:	f89c 0000 	ldrb.w	r0, [ip]
 800db5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800db60:	2858      	cmp	r0, #88	; 0x58
 800db62:	d14f      	bne.n	800dc04 <_strtoul_l.isra.0+0xe0>
 800db64:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800db68:	2310      	movs	r3, #16
 800db6a:	f10c 0c02 	add.w	ip, ip, #2
 800db6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800db72:	2500      	movs	r5, #0
 800db74:	fbb7 f7f3 	udiv	r7, r7, r3
 800db78:	fb03 f907 	mul.w	r9, r3, r7
 800db7c:	ea6f 0909 	mvn.w	r9, r9
 800db80:	4628      	mov	r0, r5
 800db82:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800db86:	2e09      	cmp	r6, #9
 800db88:	d818      	bhi.n	800dbbc <_strtoul_l.isra.0+0x98>
 800db8a:	4634      	mov	r4, r6
 800db8c:	42a3      	cmp	r3, r4
 800db8e:	dd24      	ble.n	800dbda <_strtoul_l.isra.0+0xb6>
 800db90:	2d00      	cmp	r5, #0
 800db92:	db1f      	blt.n	800dbd4 <_strtoul_l.isra.0+0xb0>
 800db94:	4287      	cmp	r7, r0
 800db96:	d31d      	bcc.n	800dbd4 <_strtoul_l.isra.0+0xb0>
 800db98:	d101      	bne.n	800db9e <_strtoul_l.isra.0+0x7a>
 800db9a:	45a1      	cmp	r9, r4
 800db9c:	db1a      	blt.n	800dbd4 <_strtoul_l.isra.0+0xb0>
 800db9e:	fb00 4003 	mla	r0, r0, r3, r4
 800dba2:	2501      	movs	r5, #1
 800dba4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dba8:	e7eb      	b.n	800db82 <_strtoul_l.isra.0+0x5e>
 800dbaa:	2c2b      	cmp	r4, #43	; 0x2b
 800dbac:	bf08      	it	eq
 800dbae:	f89c 4000 	ldrbeq.w	r4, [ip]
 800dbb2:	46a8      	mov	r8, r5
 800dbb4:	bf08      	it	eq
 800dbb6:	f100 0c02 	addeq.w	ip, r0, #2
 800dbba:	e7c7      	b.n	800db4c <_strtoul_l.isra.0+0x28>
 800dbbc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800dbc0:	2e19      	cmp	r6, #25
 800dbc2:	d801      	bhi.n	800dbc8 <_strtoul_l.isra.0+0xa4>
 800dbc4:	3c37      	subs	r4, #55	; 0x37
 800dbc6:	e7e1      	b.n	800db8c <_strtoul_l.isra.0+0x68>
 800dbc8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800dbcc:	2e19      	cmp	r6, #25
 800dbce:	d804      	bhi.n	800dbda <_strtoul_l.isra.0+0xb6>
 800dbd0:	3c57      	subs	r4, #87	; 0x57
 800dbd2:	e7db      	b.n	800db8c <_strtoul_l.isra.0+0x68>
 800dbd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dbd8:	e7e4      	b.n	800dba4 <_strtoul_l.isra.0+0x80>
 800dbda:	2d00      	cmp	r5, #0
 800dbdc:	da07      	bge.n	800dbee <_strtoul_l.isra.0+0xca>
 800dbde:	2322      	movs	r3, #34	; 0x22
 800dbe0:	f8ce 3000 	str.w	r3, [lr]
 800dbe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbe8:	b942      	cbnz	r2, 800dbfc <_strtoul_l.isra.0+0xd8>
 800dbea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbee:	f1b8 0f00 	cmp.w	r8, #0
 800dbf2:	d000      	beq.n	800dbf6 <_strtoul_l.isra.0+0xd2>
 800dbf4:	4240      	negs	r0, r0
 800dbf6:	2a00      	cmp	r2, #0
 800dbf8:	d0f7      	beq.n	800dbea <_strtoul_l.isra.0+0xc6>
 800dbfa:	b10d      	cbz	r5, 800dc00 <_strtoul_l.isra.0+0xdc>
 800dbfc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800dc00:	6011      	str	r1, [r2, #0]
 800dc02:	e7f2      	b.n	800dbea <_strtoul_l.isra.0+0xc6>
 800dc04:	2430      	movs	r4, #48	; 0x30
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1b1      	bne.n	800db6e <_strtoul_l.isra.0+0x4a>
 800dc0a:	2308      	movs	r3, #8
 800dc0c:	e7af      	b.n	800db6e <_strtoul_l.isra.0+0x4a>
 800dc0e:	2c30      	cmp	r4, #48	; 0x30
 800dc10:	d0a2      	beq.n	800db58 <_strtoul_l.isra.0+0x34>
 800dc12:	230a      	movs	r3, #10
 800dc14:	e7ab      	b.n	800db6e <_strtoul_l.isra.0+0x4a>
 800dc16:	bf00      	nop
 800dc18:	0800e759 	.word	0x0800e759

0800dc1c <_strtoul_r>:
 800dc1c:	f7ff bf82 	b.w	800db24 <_strtoul_l.isra.0>

0800dc20 <__submore>:
 800dc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc24:	460c      	mov	r4, r1
 800dc26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dc28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	d11d      	bne.n	800dc6c <__submore+0x4c>
 800dc30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc34:	f7fb fc34 	bl	80094a0 <_malloc_r>
 800dc38:	b918      	cbnz	r0, 800dc42 <__submore+0x22>
 800dc3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc46:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc4c:	6360      	str	r0, [r4, #52]	; 0x34
 800dc4e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dc52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc56:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dc5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc5e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dc62:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dc66:	6020      	str	r0, [r4, #0]
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e7e8      	b.n	800dc3e <__submore+0x1e>
 800dc6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dc6e:	0077      	lsls	r7, r6, #1
 800dc70:	463a      	mov	r2, r7
 800dc72:	f000 f867 	bl	800dd44 <_realloc_r>
 800dc76:	4605      	mov	r5, r0
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d0de      	beq.n	800dc3a <__submore+0x1a>
 800dc7c:	eb00 0806 	add.w	r8, r0, r6
 800dc80:	4601      	mov	r1, r0
 800dc82:	4632      	mov	r2, r6
 800dc84:	4640      	mov	r0, r8
 800dc86:	f7fb fba5 	bl	80093d4 <memcpy>
 800dc8a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dc8e:	f8c4 8000 	str.w	r8, [r4]
 800dc92:	e7e9      	b.n	800dc68 <__submore+0x48>

0800dc94 <__ascii_wctomb>:
 800dc94:	b149      	cbz	r1, 800dcaa <__ascii_wctomb+0x16>
 800dc96:	2aff      	cmp	r2, #255	; 0xff
 800dc98:	bf85      	ittet	hi
 800dc9a:	238a      	movhi	r3, #138	; 0x8a
 800dc9c:	6003      	strhi	r3, [r0, #0]
 800dc9e:	700a      	strbls	r2, [r1, #0]
 800dca0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dca4:	bf98      	it	ls
 800dca6:	2001      	movls	r0, #1
 800dca8:	4770      	bx	lr
 800dcaa:	4608      	mov	r0, r1
 800dcac:	4770      	bx	lr
	...

0800dcb0 <__assert_func>:
 800dcb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcb2:	4614      	mov	r4, r2
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <__assert_func+0x2c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4605      	mov	r5, r0
 800dcbc:	68d8      	ldr	r0, [r3, #12]
 800dcbe:	b14c      	cbz	r4, 800dcd4 <__assert_func+0x24>
 800dcc0:	4b07      	ldr	r3, [pc, #28]	; (800dce0 <__assert_func+0x30>)
 800dcc2:	9100      	str	r1, [sp, #0]
 800dcc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcc8:	4906      	ldr	r1, [pc, #24]	; (800dce4 <__assert_func+0x34>)
 800dcca:	462b      	mov	r3, r5
 800dccc:	f000 f80e 	bl	800dcec <fiprintf>
 800dcd0:	f000 fa78 	bl	800e1c4 <abort>
 800dcd4:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <__assert_func+0x38>)
 800dcd6:	461c      	mov	r4, r3
 800dcd8:	e7f3      	b.n	800dcc2 <__assert_func+0x12>
 800dcda:	bf00      	nop
 800dcdc:	20000010 	.word	0x20000010
 800dce0:	0800eaf8 	.word	0x0800eaf8
 800dce4:	0800eb05 	.word	0x0800eb05
 800dce8:	0800eb33 	.word	0x0800eb33

0800dcec <fiprintf>:
 800dcec:	b40e      	push	{r1, r2, r3}
 800dcee:	b503      	push	{r0, r1, lr}
 800dcf0:	4601      	mov	r1, r0
 800dcf2:	ab03      	add	r3, sp, #12
 800dcf4:	4805      	ldr	r0, [pc, #20]	; (800dd0c <fiprintf+0x20>)
 800dcf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcfa:	6800      	ldr	r0, [r0, #0]
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	f000 f871 	bl	800dde4 <_vfiprintf_r>
 800dd02:	b002      	add	sp, #8
 800dd04:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd08:	b003      	add	sp, #12
 800dd0a:	4770      	bx	lr
 800dd0c:	20000010 	.word	0x20000010

0800dd10 <memmove>:
 800dd10:	4288      	cmp	r0, r1
 800dd12:	b510      	push	{r4, lr}
 800dd14:	eb01 0402 	add.w	r4, r1, r2
 800dd18:	d902      	bls.n	800dd20 <memmove+0x10>
 800dd1a:	4284      	cmp	r4, r0
 800dd1c:	4623      	mov	r3, r4
 800dd1e:	d807      	bhi.n	800dd30 <memmove+0x20>
 800dd20:	1e43      	subs	r3, r0, #1
 800dd22:	42a1      	cmp	r1, r4
 800dd24:	d008      	beq.n	800dd38 <memmove+0x28>
 800dd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd2e:	e7f8      	b.n	800dd22 <memmove+0x12>
 800dd30:	4402      	add	r2, r0
 800dd32:	4601      	mov	r1, r0
 800dd34:	428a      	cmp	r2, r1
 800dd36:	d100      	bne.n	800dd3a <memmove+0x2a>
 800dd38:	bd10      	pop	{r4, pc}
 800dd3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd42:	e7f7      	b.n	800dd34 <memmove+0x24>

0800dd44 <_realloc_r>:
 800dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd46:	4607      	mov	r7, r0
 800dd48:	4614      	mov	r4, r2
 800dd4a:	460e      	mov	r6, r1
 800dd4c:	b921      	cbnz	r1, 800dd58 <_realloc_r+0x14>
 800dd4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd52:	4611      	mov	r1, r2
 800dd54:	f7fb bba4 	b.w	80094a0 <_malloc_r>
 800dd58:	b922      	cbnz	r2, 800dd64 <_realloc_r+0x20>
 800dd5a:	f7fb fb51 	bl	8009400 <_free_r>
 800dd5e:	4625      	mov	r5, r4
 800dd60:	4628      	mov	r0, r5
 800dd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd64:	f000 fa9a 	bl	800e29c <_malloc_usable_size_r>
 800dd68:	42a0      	cmp	r0, r4
 800dd6a:	d20f      	bcs.n	800dd8c <_realloc_r+0x48>
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	4638      	mov	r0, r7
 800dd70:	f7fb fb96 	bl	80094a0 <_malloc_r>
 800dd74:	4605      	mov	r5, r0
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d0f2      	beq.n	800dd60 <_realloc_r+0x1c>
 800dd7a:	4631      	mov	r1, r6
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	f7fb fb29 	bl	80093d4 <memcpy>
 800dd82:	4631      	mov	r1, r6
 800dd84:	4638      	mov	r0, r7
 800dd86:	f7fb fb3b 	bl	8009400 <_free_r>
 800dd8a:	e7e9      	b.n	800dd60 <_realloc_r+0x1c>
 800dd8c:	4635      	mov	r5, r6
 800dd8e:	e7e7      	b.n	800dd60 <_realloc_r+0x1c>

0800dd90 <__sfputc_r>:
 800dd90:	6893      	ldr	r3, [r2, #8]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	b410      	push	{r4}
 800dd98:	6093      	str	r3, [r2, #8]
 800dd9a:	da08      	bge.n	800ddae <__sfputc_r+0x1e>
 800dd9c:	6994      	ldr	r4, [r2, #24]
 800dd9e:	42a3      	cmp	r3, r4
 800dda0:	db01      	blt.n	800dda6 <__sfputc_r+0x16>
 800dda2:	290a      	cmp	r1, #10
 800dda4:	d103      	bne.n	800ddae <__sfputc_r+0x1e>
 800dda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddaa:	f000 b94b 	b.w	800e044 <__swbuf_r>
 800ddae:	6813      	ldr	r3, [r2, #0]
 800ddb0:	1c58      	adds	r0, r3, #1
 800ddb2:	6010      	str	r0, [r2, #0]
 800ddb4:	7019      	strb	r1, [r3, #0]
 800ddb6:	4608      	mov	r0, r1
 800ddb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <__sfputs_r>:
 800ddbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc0:	4606      	mov	r6, r0
 800ddc2:	460f      	mov	r7, r1
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	18d5      	adds	r5, r2, r3
 800ddc8:	42ac      	cmp	r4, r5
 800ddca:	d101      	bne.n	800ddd0 <__sfputs_r+0x12>
 800ddcc:	2000      	movs	r0, #0
 800ddce:	e007      	b.n	800dde0 <__sfputs_r+0x22>
 800ddd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd4:	463a      	mov	r2, r7
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f7ff ffda 	bl	800dd90 <__sfputc_r>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d1f3      	bne.n	800ddc8 <__sfputs_r+0xa>
 800dde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dde4 <_vfiprintf_r>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	460d      	mov	r5, r1
 800ddea:	b09d      	sub	sp, #116	; 0x74
 800ddec:	4614      	mov	r4, r2
 800ddee:	4698      	mov	r8, r3
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	b118      	cbz	r0, 800ddfc <_vfiprintf_r+0x18>
 800ddf4:	6983      	ldr	r3, [r0, #24]
 800ddf6:	b90b      	cbnz	r3, 800ddfc <_vfiprintf_r+0x18>
 800ddf8:	f7fb fa1e 	bl	8009238 <__sinit>
 800ddfc:	4b89      	ldr	r3, [pc, #548]	; (800e024 <_vfiprintf_r+0x240>)
 800ddfe:	429d      	cmp	r5, r3
 800de00:	d11b      	bne.n	800de3a <_vfiprintf_r+0x56>
 800de02:	6875      	ldr	r5, [r6, #4]
 800de04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de06:	07d9      	lsls	r1, r3, #31
 800de08:	d405      	bmi.n	800de16 <_vfiprintf_r+0x32>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	059a      	lsls	r2, r3, #22
 800de0e:	d402      	bmi.n	800de16 <_vfiprintf_r+0x32>
 800de10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de12:	f7fb fad4 	bl	80093be <__retarget_lock_acquire_recursive>
 800de16:	89ab      	ldrh	r3, [r5, #12]
 800de18:	071b      	lsls	r3, r3, #28
 800de1a:	d501      	bpl.n	800de20 <_vfiprintf_r+0x3c>
 800de1c:	692b      	ldr	r3, [r5, #16]
 800de1e:	b9eb      	cbnz	r3, 800de5c <_vfiprintf_r+0x78>
 800de20:	4629      	mov	r1, r5
 800de22:	4630      	mov	r0, r6
 800de24:	f000 f960 	bl	800e0e8 <__swsetup_r>
 800de28:	b1c0      	cbz	r0, 800de5c <_vfiprintf_r+0x78>
 800de2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de2c:	07dc      	lsls	r4, r3, #31
 800de2e:	d50e      	bpl.n	800de4e <_vfiprintf_r+0x6a>
 800de30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de34:	b01d      	add	sp, #116	; 0x74
 800de36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3a:	4b7b      	ldr	r3, [pc, #492]	; (800e028 <_vfiprintf_r+0x244>)
 800de3c:	429d      	cmp	r5, r3
 800de3e:	d101      	bne.n	800de44 <_vfiprintf_r+0x60>
 800de40:	68b5      	ldr	r5, [r6, #8]
 800de42:	e7df      	b.n	800de04 <_vfiprintf_r+0x20>
 800de44:	4b79      	ldr	r3, [pc, #484]	; (800e02c <_vfiprintf_r+0x248>)
 800de46:	429d      	cmp	r5, r3
 800de48:	bf08      	it	eq
 800de4a:	68f5      	ldreq	r5, [r6, #12]
 800de4c:	e7da      	b.n	800de04 <_vfiprintf_r+0x20>
 800de4e:	89ab      	ldrh	r3, [r5, #12]
 800de50:	0598      	lsls	r0, r3, #22
 800de52:	d4ed      	bmi.n	800de30 <_vfiprintf_r+0x4c>
 800de54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de56:	f7fb fab3 	bl	80093c0 <__retarget_lock_release_recursive>
 800de5a:	e7e9      	b.n	800de30 <_vfiprintf_r+0x4c>
 800de5c:	2300      	movs	r3, #0
 800de5e:	9309      	str	r3, [sp, #36]	; 0x24
 800de60:	2320      	movs	r3, #32
 800de62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de66:	f8cd 800c 	str.w	r8, [sp, #12]
 800de6a:	2330      	movs	r3, #48	; 0x30
 800de6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e030 <_vfiprintf_r+0x24c>
 800de70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de74:	f04f 0901 	mov.w	r9, #1
 800de78:	4623      	mov	r3, r4
 800de7a:	469a      	mov	sl, r3
 800de7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de80:	b10a      	cbz	r2, 800de86 <_vfiprintf_r+0xa2>
 800de82:	2a25      	cmp	r2, #37	; 0x25
 800de84:	d1f9      	bne.n	800de7a <_vfiprintf_r+0x96>
 800de86:	ebba 0b04 	subs.w	fp, sl, r4
 800de8a:	d00b      	beq.n	800dea4 <_vfiprintf_r+0xc0>
 800de8c:	465b      	mov	r3, fp
 800de8e:	4622      	mov	r2, r4
 800de90:	4629      	mov	r1, r5
 800de92:	4630      	mov	r0, r6
 800de94:	f7ff ff93 	bl	800ddbe <__sfputs_r>
 800de98:	3001      	adds	r0, #1
 800de9a:	f000 80aa 	beq.w	800dff2 <_vfiprintf_r+0x20e>
 800de9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dea0:	445a      	add	r2, fp
 800dea2:	9209      	str	r2, [sp, #36]	; 0x24
 800dea4:	f89a 3000 	ldrb.w	r3, [sl]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 80a2 	beq.w	800dff2 <_vfiprintf_r+0x20e>
 800deae:	2300      	movs	r3, #0
 800deb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deb8:	f10a 0a01 	add.w	sl, sl, #1
 800debc:	9304      	str	r3, [sp, #16]
 800debe:	9307      	str	r3, [sp, #28]
 800dec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dec4:	931a      	str	r3, [sp, #104]	; 0x68
 800dec6:	4654      	mov	r4, sl
 800dec8:	2205      	movs	r2, #5
 800deca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dece:	4858      	ldr	r0, [pc, #352]	; (800e030 <_vfiprintf_r+0x24c>)
 800ded0:	f7f2 f98e 	bl	80001f0 <memchr>
 800ded4:	9a04      	ldr	r2, [sp, #16]
 800ded6:	b9d8      	cbnz	r0, 800df10 <_vfiprintf_r+0x12c>
 800ded8:	06d1      	lsls	r1, r2, #27
 800deda:	bf44      	itt	mi
 800dedc:	2320      	movmi	r3, #32
 800dede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee2:	0713      	lsls	r3, r2, #28
 800dee4:	bf44      	itt	mi
 800dee6:	232b      	movmi	r3, #43	; 0x2b
 800dee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deec:	f89a 3000 	ldrb.w	r3, [sl]
 800def0:	2b2a      	cmp	r3, #42	; 0x2a
 800def2:	d015      	beq.n	800df20 <_vfiprintf_r+0x13c>
 800def4:	9a07      	ldr	r2, [sp, #28]
 800def6:	4654      	mov	r4, sl
 800def8:	2000      	movs	r0, #0
 800defa:	f04f 0c0a 	mov.w	ip, #10
 800defe:	4621      	mov	r1, r4
 800df00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df04:	3b30      	subs	r3, #48	; 0x30
 800df06:	2b09      	cmp	r3, #9
 800df08:	d94e      	bls.n	800dfa8 <_vfiprintf_r+0x1c4>
 800df0a:	b1b0      	cbz	r0, 800df3a <_vfiprintf_r+0x156>
 800df0c:	9207      	str	r2, [sp, #28]
 800df0e:	e014      	b.n	800df3a <_vfiprintf_r+0x156>
 800df10:	eba0 0308 	sub.w	r3, r0, r8
 800df14:	fa09 f303 	lsl.w	r3, r9, r3
 800df18:	4313      	orrs	r3, r2
 800df1a:	9304      	str	r3, [sp, #16]
 800df1c:	46a2      	mov	sl, r4
 800df1e:	e7d2      	b.n	800dec6 <_vfiprintf_r+0xe2>
 800df20:	9b03      	ldr	r3, [sp, #12]
 800df22:	1d19      	adds	r1, r3, #4
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	9103      	str	r1, [sp, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bfbb      	ittet	lt
 800df2c:	425b      	neglt	r3, r3
 800df2e:	f042 0202 	orrlt.w	r2, r2, #2
 800df32:	9307      	strge	r3, [sp, #28]
 800df34:	9307      	strlt	r3, [sp, #28]
 800df36:	bfb8      	it	lt
 800df38:	9204      	strlt	r2, [sp, #16]
 800df3a:	7823      	ldrb	r3, [r4, #0]
 800df3c:	2b2e      	cmp	r3, #46	; 0x2e
 800df3e:	d10c      	bne.n	800df5a <_vfiprintf_r+0x176>
 800df40:	7863      	ldrb	r3, [r4, #1]
 800df42:	2b2a      	cmp	r3, #42	; 0x2a
 800df44:	d135      	bne.n	800dfb2 <_vfiprintf_r+0x1ce>
 800df46:	9b03      	ldr	r3, [sp, #12]
 800df48:	1d1a      	adds	r2, r3, #4
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	9203      	str	r2, [sp, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	bfb8      	it	lt
 800df52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800df56:	3402      	adds	r4, #2
 800df58:	9305      	str	r3, [sp, #20]
 800df5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e040 <_vfiprintf_r+0x25c>
 800df5e:	7821      	ldrb	r1, [r4, #0]
 800df60:	2203      	movs	r2, #3
 800df62:	4650      	mov	r0, sl
 800df64:	f7f2 f944 	bl	80001f0 <memchr>
 800df68:	b140      	cbz	r0, 800df7c <_vfiprintf_r+0x198>
 800df6a:	2340      	movs	r3, #64	; 0x40
 800df6c:	eba0 000a 	sub.w	r0, r0, sl
 800df70:	fa03 f000 	lsl.w	r0, r3, r0
 800df74:	9b04      	ldr	r3, [sp, #16]
 800df76:	4303      	orrs	r3, r0
 800df78:	3401      	adds	r4, #1
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df80:	482c      	ldr	r0, [pc, #176]	; (800e034 <_vfiprintf_r+0x250>)
 800df82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df86:	2206      	movs	r2, #6
 800df88:	f7f2 f932 	bl	80001f0 <memchr>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d03f      	beq.n	800e010 <_vfiprintf_r+0x22c>
 800df90:	4b29      	ldr	r3, [pc, #164]	; (800e038 <_vfiprintf_r+0x254>)
 800df92:	bb1b      	cbnz	r3, 800dfdc <_vfiprintf_r+0x1f8>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	3307      	adds	r3, #7
 800df98:	f023 0307 	bic.w	r3, r3, #7
 800df9c:	3308      	adds	r3, #8
 800df9e:	9303      	str	r3, [sp, #12]
 800dfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa2:	443b      	add	r3, r7
 800dfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfa6:	e767      	b.n	800de78 <_vfiprintf_r+0x94>
 800dfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfac:	460c      	mov	r4, r1
 800dfae:	2001      	movs	r0, #1
 800dfb0:	e7a5      	b.n	800defe <_vfiprintf_r+0x11a>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	3401      	adds	r4, #1
 800dfb6:	9305      	str	r3, [sp, #20]
 800dfb8:	4619      	mov	r1, r3
 800dfba:	f04f 0c0a 	mov.w	ip, #10
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfc4:	3a30      	subs	r2, #48	; 0x30
 800dfc6:	2a09      	cmp	r2, #9
 800dfc8:	d903      	bls.n	800dfd2 <_vfiprintf_r+0x1ee>
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0c5      	beq.n	800df5a <_vfiprintf_r+0x176>
 800dfce:	9105      	str	r1, [sp, #20]
 800dfd0:	e7c3      	b.n	800df5a <_vfiprintf_r+0x176>
 800dfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e7f0      	b.n	800dfbe <_vfiprintf_r+0x1da>
 800dfdc:	ab03      	add	r3, sp, #12
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	462a      	mov	r2, r5
 800dfe2:	4b16      	ldr	r3, [pc, #88]	; (800e03c <_vfiprintf_r+0x258>)
 800dfe4:	a904      	add	r1, sp, #16
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f7fb fb54 	bl	8009694 <_printf_float>
 800dfec:	4607      	mov	r7, r0
 800dfee:	1c78      	adds	r0, r7, #1
 800dff0:	d1d6      	bne.n	800dfa0 <_vfiprintf_r+0x1bc>
 800dff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dff4:	07d9      	lsls	r1, r3, #31
 800dff6:	d405      	bmi.n	800e004 <_vfiprintf_r+0x220>
 800dff8:	89ab      	ldrh	r3, [r5, #12]
 800dffa:	059a      	lsls	r2, r3, #22
 800dffc:	d402      	bmi.n	800e004 <_vfiprintf_r+0x220>
 800dffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e000:	f7fb f9de 	bl	80093c0 <__retarget_lock_release_recursive>
 800e004:	89ab      	ldrh	r3, [r5, #12]
 800e006:	065b      	lsls	r3, r3, #25
 800e008:	f53f af12 	bmi.w	800de30 <_vfiprintf_r+0x4c>
 800e00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e00e:	e711      	b.n	800de34 <_vfiprintf_r+0x50>
 800e010:	ab03      	add	r3, sp, #12
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	462a      	mov	r2, r5
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <_vfiprintf_r+0x258>)
 800e018:	a904      	add	r1, sp, #16
 800e01a:	4630      	mov	r0, r6
 800e01c:	f7fb fdde 	bl	8009bdc <_printf_i>
 800e020:	e7e4      	b.n	800dfec <_vfiprintf_r+0x208>
 800e022:	bf00      	nop
 800e024:	0800e68c 	.word	0x0800e68c
 800e028:	0800e6ac 	.word	0x0800e6ac
 800e02c:	0800e66c 	.word	0x0800e66c
 800e030:	0800eacc 	.word	0x0800eacc
 800e034:	0800ead6 	.word	0x0800ead6
 800e038:	08009695 	.word	0x08009695
 800e03c:	0800ddbf 	.word	0x0800ddbf
 800e040:	0800ead2 	.word	0x0800ead2

0800e044 <__swbuf_r>:
 800e044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e046:	460e      	mov	r6, r1
 800e048:	4614      	mov	r4, r2
 800e04a:	4605      	mov	r5, r0
 800e04c:	b118      	cbz	r0, 800e056 <__swbuf_r+0x12>
 800e04e:	6983      	ldr	r3, [r0, #24]
 800e050:	b90b      	cbnz	r3, 800e056 <__swbuf_r+0x12>
 800e052:	f7fb f8f1 	bl	8009238 <__sinit>
 800e056:	4b21      	ldr	r3, [pc, #132]	; (800e0dc <__swbuf_r+0x98>)
 800e058:	429c      	cmp	r4, r3
 800e05a:	d12b      	bne.n	800e0b4 <__swbuf_r+0x70>
 800e05c:	686c      	ldr	r4, [r5, #4]
 800e05e:	69a3      	ldr	r3, [r4, #24]
 800e060:	60a3      	str	r3, [r4, #8]
 800e062:	89a3      	ldrh	r3, [r4, #12]
 800e064:	071a      	lsls	r2, r3, #28
 800e066:	d52f      	bpl.n	800e0c8 <__swbuf_r+0x84>
 800e068:	6923      	ldr	r3, [r4, #16]
 800e06a:	b36b      	cbz	r3, 800e0c8 <__swbuf_r+0x84>
 800e06c:	6923      	ldr	r3, [r4, #16]
 800e06e:	6820      	ldr	r0, [r4, #0]
 800e070:	1ac0      	subs	r0, r0, r3
 800e072:	6963      	ldr	r3, [r4, #20]
 800e074:	b2f6      	uxtb	r6, r6
 800e076:	4283      	cmp	r3, r0
 800e078:	4637      	mov	r7, r6
 800e07a:	dc04      	bgt.n	800e086 <__swbuf_r+0x42>
 800e07c:	4621      	mov	r1, r4
 800e07e:	4628      	mov	r0, r5
 800e080:	f7fd ffd8 	bl	800c034 <_fflush_r>
 800e084:	bb30      	cbnz	r0, 800e0d4 <__swbuf_r+0x90>
 800e086:	68a3      	ldr	r3, [r4, #8]
 800e088:	3b01      	subs	r3, #1
 800e08a:	60a3      	str	r3, [r4, #8]
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	1c5a      	adds	r2, r3, #1
 800e090:	6022      	str	r2, [r4, #0]
 800e092:	701e      	strb	r6, [r3, #0]
 800e094:	6963      	ldr	r3, [r4, #20]
 800e096:	3001      	adds	r0, #1
 800e098:	4283      	cmp	r3, r0
 800e09a:	d004      	beq.n	800e0a6 <__swbuf_r+0x62>
 800e09c:	89a3      	ldrh	r3, [r4, #12]
 800e09e:	07db      	lsls	r3, r3, #31
 800e0a0:	d506      	bpl.n	800e0b0 <__swbuf_r+0x6c>
 800e0a2:	2e0a      	cmp	r6, #10
 800e0a4:	d104      	bne.n	800e0b0 <__swbuf_r+0x6c>
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f7fd ffc3 	bl	800c034 <_fflush_r>
 800e0ae:	b988      	cbnz	r0, 800e0d4 <__swbuf_r+0x90>
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b4:	4b0a      	ldr	r3, [pc, #40]	; (800e0e0 <__swbuf_r+0x9c>)
 800e0b6:	429c      	cmp	r4, r3
 800e0b8:	d101      	bne.n	800e0be <__swbuf_r+0x7a>
 800e0ba:	68ac      	ldr	r4, [r5, #8]
 800e0bc:	e7cf      	b.n	800e05e <__swbuf_r+0x1a>
 800e0be:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <__swbuf_r+0xa0>)
 800e0c0:	429c      	cmp	r4, r3
 800e0c2:	bf08      	it	eq
 800e0c4:	68ec      	ldreq	r4, [r5, #12]
 800e0c6:	e7ca      	b.n	800e05e <__swbuf_r+0x1a>
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f000 f80c 	bl	800e0e8 <__swsetup_r>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0cb      	beq.n	800e06c <__swbuf_r+0x28>
 800e0d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e0d8:	e7ea      	b.n	800e0b0 <__swbuf_r+0x6c>
 800e0da:	bf00      	nop
 800e0dc:	0800e68c 	.word	0x0800e68c
 800e0e0:	0800e6ac 	.word	0x0800e6ac
 800e0e4:	0800e66c 	.word	0x0800e66c

0800e0e8 <__swsetup_r>:
 800e0e8:	4b32      	ldr	r3, [pc, #200]	; (800e1b4 <__swsetup_r+0xcc>)
 800e0ea:	b570      	push	{r4, r5, r6, lr}
 800e0ec:	681d      	ldr	r5, [r3, #0]
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	b125      	cbz	r5, 800e0fe <__swsetup_r+0x16>
 800e0f4:	69ab      	ldr	r3, [r5, #24]
 800e0f6:	b913      	cbnz	r3, 800e0fe <__swsetup_r+0x16>
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	f7fb f89d 	bl	8009238 <__sinit>
 800e0fe:	4b2e      	ldr	r3, [pc, #184]	; (800e1b8 <__swsetup_r+0xd0>)
 800e100:	429c      	cmp	r4, r3
 800e102:	d10f      	bne.n	800e124 <__swsetup_r+0x3c>
 800e104:	686c      	ldr	r4, [r5, #4]
 800e106:	89a3      	ldrh	r3, [r4, #12]
 800e108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e10c:	0719      	lsls	r1, r3, #28
 800e10e:	d42c      	bmi.n	800e16a <__swsetup_r+0x82>
 800e110:	06dd      	lsls	r5, r3, #27
 800e112:	d411      	bmi.n	800e138 <__swsetup_r+0x50>
 800e114:	2309      	movs	r3, #9
 800e116:	6033      	str	r3, [r6, #0]
 800e118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e11c:	81a3      	strh	r3, [r4, #12]
 800e11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e122:	e03e      	b.n	800e1a2 <__swsetup_r+0xba>
 800e124:	4b25      	ldr	r3, [pc, #148]	; (800e1bc <__swsetup_r+0xd4>)
 800e126:	429c      	cmp	r4, r3
 800e128:	d101      	bne.n	800e12e <__swsetup_r+0x46>
 800e12a:	68ac      	ldr	r4, [r5, #8]
 800e12c:	e7eb      	b.n	800e106 <__swsetup_r+0x1e>
 800e12e:	4b24      	ldr	r3, [pc, #144]	; (800e1c0 <__swsetup_r+0xd8>)
 800e130:	429c      	cmp	r4, r3
 800e132:	bf08      	it	eq
 800e134:	68ec      	ldreq	r4, [r5, #12]
 800e136:	e7e6      	b.n	800e106 <__swsetup_r+0x1e>
 800e138:	0758      	lsls	r0, r3, #29
 800e13a:	d512      	bpl.n	800e162 <__swsetup_r+0x7a>
 800e13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e13e:	b141      	cbz	r1, 800e152 <__swsetup_r+0x6a>
 800e140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e144:	4299      	cmp	r1, r3
 800e146:	d002      	beq.n	800e14e <__swsetup_r+0x66>
 800e148:	4630      	mov	r0, r6
 800e14a:	f7fb f959 	bl	8009400 <_free_r>
 800e14e:	2300      	movs	r3, #0
 800e150:	6363      	str	r3, [r4, #52]	; 0x34
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e158:	81a3      	strh	r3, [r4, #12]
 800e15a:	2300      	movs	r3, #0
 800e15c:	6063      	str	r3, [r4, #4]
 800e15e:	6923      	ldr	r3, [r4, #16]
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	f043 0308 	orr.w	r3, r3, #8
 800e168:	81a3      	strh	r3, [r4, #12]
 800e16a:	6923      	ldr	r3, [r4, #16]
 800e16c:	b94b      	cbnz	r3, 800e182 <__swsetup_r+0x9a>
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e178:	d003      	beq.n	800e182 <__swsetup_r+0x9a>
 800e17a:	4621      	mov	r1, r4
 800e17c:	4630      	mov	r0, r6
 800e17e:	f000 f84d 	bl	800e21c <__smakebuf_r>
 800e182:	89a0      	ldrh	r0, [r4, #12]
 800e184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e188:	f010 0301 	ands.w	r3, r0, #1
 800e18c:	d00a      	beq.n	800e1a4 <__swsetup_r+0xbc>
 800e18e:	2300      	movs	r3, #0
 800e190:	60a3      	str	r3, [r4, #8]
 800e192:	6963      	ldr	r3, [r4, #20]
 800e194:	425b      	negs	r3, r3
 800e196:	61a3      	str	r3, [r4, #24]
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	b943      	cbnz	r3, 800e1ae <__swsetup_r+0xc6>
 800e19c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1a0:	d1ba      	bne.n	800e118 <__swsetup_r+0x30>
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
 800e1a4:	0781      	lsls	r1, r0, #30
 800e1a6:	bf58      	it	pl
 800e1a8:	6963      	ldrpl	r3, [r4, #20]
 800e1aa:	60a3      	str	r3, [r4, #8]
 800e1ac:	e7f4      	b.n	800e198 <__swsetup_r+0xb0>
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	e7f7      	b.n	800e1a2 <__swsetup_r+0xba>
 800e1b2:	bf00      	nop
 800e1b4:	20000010 	.word	0x20000010
 800e1b8:	0800e68c 	.word	0x0800e68c
 800e1bc:	0800e6ac 	.word	0x0800e6ac
 800e1c0:	0800e66c 	.word	0x0800e66c

0800e1c4 <abort>:
 800e1c4:	b508      	push	{r3, lr}
 800e1c6:	2006      	movs	r0, #6
 800e1c8:	f000 f898 	bl	800e2fc <raise>
 800e1cc:	2001      	movs	r0, #1
 800e1ce:	f7f4 fd83 	bl	8002cd8 <_exit>

0800e1d2 <__swhatbuf_r>:
 800e1d2:	b570      	push	{r4, r5, r6, lr}
 800e1d4:	460e      	mov	r6, r1
 800e1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1da:	2900      	cmp	r1, #0
 800e1dc:	b096      	sub	sp, #88	; 0x58
 800e1de:	4614      	mov	r4, r2
 800e1e0:	461d      	mov	r5, r3
 800e1e2:	da07      	bge.n	800e1f4 <__swhatbuf_r+0x22>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	602b      	str	r3, [r5, #0]
 800e1e8:	89b3      	ldrh	r3, [r6, #12]
 800e1ea:	061a      	lsls	r2, r3, #24
 800e1ec:	d410      	bmi.n	800e210 <__swhatbuf_r+0x3e>
 800e1ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1f2:	e00e      	b.n	800e212 <__swhatbuf_r+0x40>
 800e1f4:	466a      	mov	r2, sp
 800e1f6:	f000 f89d 	bl	800e334 <_fstat_r>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	dbf2      	blt.n	800e1e4 <__swhatbuf_r+0x12>
 800e1fe:	9a01      	ldr	r2, [sp, #4]
 800e200:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e204:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e208:	425a      	negs	r2, r3
 800e20a:	415a      	adcs	r2, r3
 800e20c:	602a      	str	r2, [r5, #0]
 800e20e:	e7ee      	b.n	800e1ee <__swhatbuf_r+0x1c>
 800e210:	2340      	movs	r3, #64	; 0x40
 800e212:	2000      	movs	r0, #0
 800e214:	6023      	str	r3, [r4, #0]
 800e216:	b016      	add	sp, #88	; 0x58
 800e218:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e21c <__smakebuf_r>:
 800e21c:	898b      	ldrh	r3, [r1, #12]
 800e21e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e220:	079d      	lsls	r5, r3, #30
 800e222:	4606      	mov	r6, r0
 800e224:	460c      	mov	r4, r1
 800e226:	d507      	bpl.n	800e238 <__smakebuf_r+0x1c>
 800e228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e22c:	6023      	str	r3, [r4, #0]
 800e22e:	6123      	str	r3, [r4, #16]
 800e230:	2301      	movs	r3, #1
 800e232:	6163      	str	r3, [r4, #20]
 800e234:	b002      	add	sp, #8
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	ab01      	add	r3, sp, #4
 800e23a:	466a      	mov	r2, sp
 800e23c:	f7ff ffc9 	bl	800e1d2 <__swhatbuf_r>
 800e240:	9900      	ldr	r1, [sp, #0]
 800e242:	4605      	mov	r5, r0
 800e244:	4630      	mov	r0, r6
 800e246:	f7fb f92b 	bl	80094a0 <_malloc_r>
 800e24a:	b948      	cbnz	r0, 800e260 <__smakebuf_r+0x44>
 800e24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e250:	059a      	lsls	r2, r3, #22
 800e252:	d4ef      	bmi.n	800e234 <__smakebuf_r+0x18>
 800e254:	f023 0303 	bic.w	r3, r3, #3
 800e258:	f043 0302 	orr.w	r3, r3, #2
 800e25c:	81a3      	strh	r3, [r4, #12]
 800e25e:	e7e3      	b.n	800e228 <__smakebuf_r+0xc>
 800e260:	4b0d      	ldr	r3, [pc, #52]	; (800e298 <__smakebuf_r+0x7c>)
 800e262:	62b3      	str	r3, [r6, #40]	; 0x28
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	6020      	str	r0, [r4, #0]
 800e268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e26c:	81a3      	strh	r3, [r4, #12]
 800e26e:	9b00      	ldr	r3, [sp, #0]
 800e270:	6163      	str	r3, [r4, #20]
 800e272:	9b01      	ldr	r3, [sp, #4]
 800e274:	6120      	str	r0, [r4, #16]
 800e276:	b15b      	cbz	r3, 800e290 <__smakebuf_r+0x74>
 800e278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e27c:	4630      	mov	r0, r6
 800e27e:	f000 f86b 	bl	800e358 <_isatty_r>
 800e282:	b128      	cbz	r0, 800e290 <__smakebuf_r+0x74>
 800e284:	89a3      	ldrh	r3, [r4, #12]
 800e286:	f023 0303 	bic.w	r3, r3, #3
 800e28a:	f043 0301 	orr.w	r3, r3, #1
 800e28e:	81a3      	strh	r3, [r4, #12]
 800e290:	89a0      	ldrh	r0, [r4, #12]
 800e292:	4305      	orrs	r5, r0
 800e294:	81a5      	strh	r5, [r4, #12]
 800e296:	e7cd      	b.n	800e234 <__smakebuf_r+0x18>
 800e298:	080091d1 	.word	0x080091d1

0800e29c <_malloc_usable_size_r>:
 800e29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2a0:	1f18      	subs	r0, r3, #4
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	bfbc      	itt	lt
 800e2a6:	580b      	ldrlt	r3, [r1, r0]
 800e2a8:	18c0      	addlt	r0, r0, r3
 800e2aa:	4770      	bx	lr

0800e2ac <_raise_r>:
 800e2ac:	291f      	cmp	r1, #31
 800e2ae:	b538      	push	{r3, r4, r5, lr}
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	460d      	mov	r5, r1
 800e2b4:	d904      	bls.n	800e2c0 <_raise_r+0x14>
 800e2b6:	2316      	movs	r3, #22
 800e2b8:	6003      	str	r3, [r0, #0]
 800e2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2c2:	b112      	cbz	r2, 800e2ca <_raise_r+0x1e>
 800e2c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2c8:	b94b      	cbnz	r3, 800e2de <_raise_r+0x32>
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 f830 	bl	800e330 <_getpid_r>
 800e2d0:	462a      	mov	r2, r5
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2da:	f000 b817 	b.w	800e30c <_kill_r>
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d00a      	beq.n	800e2f8 <_raise_r+0x4c>
 800e2e2:	1c59      	adds	r1, r3, #1
 800e2e4:	d103      	bne.n	800e2ee <_raise_r+0x42>
 800e2e6:	2316      	movs	r3, #22
 800e2e8:	6003      	str	r3, [r0, #0]
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	e7e7      	b.n	800e2be <_raise_r+0x12>
 800e2ee:	2400      	movs	r4, #0
 800e2f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	4798      	blx	r3
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	e7e0      	b.n	800e2be <_raise_r+0x12>

0800e2fc <raise>:
 800e2fc:	4b02      	ldr	r3, [pc, #8]	; (800e308 <raise+0xc>)
 800e2fe:	4601      	mov	r1, r0
 800e300:	6818      	ldr	r0, [r3, #0]
 800e302:	f7ff bfd3 	b.w	800e2ac <_raise_r>
 800e306:	bf00      	nop
 800e308:	20000010 	.word	0x20000010

0800e30c <_kill_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d07      	ldr	r5, [pc, #28]	; (800e32c <_kill_r+0x20>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	4611      	mov	r1, r2
 800e318:	602b      	str	r3, [r5, #0]
 800e31a:	f7f4 fccd 	bl	8002cb8 <_kill>
 800e31e:	1c43      	adds	r3, r0, #1
 800e320:	d102      	bne.n	800e328 <_kill_r+0x1c>
 800e322:	682b      	ldr	r3, [r5, #0]
 800e324:	b103      	cbz	r3, 800e328 <_kill_r+0x1c>
 800e326:	6023      	str	r3, [r4, #0]
 800e328:	bd38      	pop	{r3, r4, r5, pc}
 800e32a:	bf00      	nop
 800e32c:	20006064 	.word	0x20006064

0800e330 <_getpid_r>:
 800e330:	f7f4 bcba 	b.w	8002ca8 <_getpid>

0800e334 <_fstat_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4d07      	ldr	r5, [pc, #28]	; (800e354 <_fstat_r+0x20>)
 800e338:	2300      	movs	r3, #0
 800e33a:	4604      	mov	r4, r0
 800e33c:	4608      	mov	r0, r1
 800e33e:	4611      	mov	r1, r2
 800e340:	602b      	str	r3, [r5, #0]
 800e342:	f7f4 fd18 	bl	8002d76 <_fstat>
 800e346:	1c43      	adds	r3, r0, #1
 800e348:	d102      	bne.n	800e350 <_fstat_r+0x1c>
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	b103      	cbz	r3, 800e350 <_fstat_r+0x1c>
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	bd38      	pop	{r3, r4, r5, pc}
 800e352:	bf00      	nop
 800e354:	20006064 	.word	0x20006064

0800e358 <_isatty_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4d06      	ldr	r5, [pc, #24]	; (800e374 <_isatty_r+0x1c>)
 800e35c:	2300      	movs	r3, #0
 800e35e:	4604      	mov	r4, r0
 800e360:	4608      	mov	r0, r1
 800e362:	602b      	str	r3, [r5, #0]
 800e364:	f7f4 fd17 	bl	8002d96 <_isatty>
 800e368:	1c43      	adds	r3, r0, #1
 800e36a:	d102      	bne.n	800e372 <_isatty_r+0x1a>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	b103      	cbz	r3, 800e372 <_isatty_r+0x1a>
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	20006064 	.word	0x20006064

0800e378 <_init>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	bf00      	nop
 800e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37e:	bc08      	pop	{r3}
 800e380:	469e      	mov	lr, r3
 800e382:	4770      	bx	lr

0800e384 <_fini>:
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e386:	bf00      	nop
 800e388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38a:	bc08      	pop	{r3}
 800e38c:	469e      	mov	lr, r3
 800e38e:	4770      	bx	lr
