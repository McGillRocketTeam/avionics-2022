
f303_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006bd8  08006bd8  00016bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db0  08006db0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006db0  08006db0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006db0  08006db0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002284  20000078  08006e2c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022fc  08006e2c  000222fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6c1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003410  00000000  00000000  0003c765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00040ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000377e  00000000  00000000  00042150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001780d  00000000  00000000  000458ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d33f8  00000000  00000000  0005d0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001304d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  00130528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bc0 	.word	0x08006bc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006bc0 	.word	0x08006bc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__gedf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpdf2+0x4>
 800060e:	bf00      	nop

08000610 <__ledf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpdf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpdf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800062c:	bf18      	it	ne
 800062e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000632:	d01b      	beq.n	800066c <__cmpdf2+0x54>
 8000634:	b001      	add	sp, #4
 8000636:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800063a:	bf0c      	ite	eq
 800063c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000640:	ea91 0f03 	teqne	r1, r3
 8000644:	bf02      	ittt	eq
 8000646:	ea90 0f02 	teqeq	r0, r2
 800064a:	2000      	moveq	r0, #0
 800064c:	4770      	bxeq	lr
 800064e:	f110 0f00 	cmn.w	r0, #0
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf58      	it	pl
 8000658:	4299      	cmppl	r1, r3
 800065a:	bf08      	it	eq
 800065c:	4290      	cmpeq	r0, r2
 800065e:	bf2c      	ite	cs
 8000660:	17d8      	asrcs	r0, r3, #31
 8000662:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000666:	f040 0001 	orr.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d102      	bne.n	800067c <__cmpdf2+0x64>
 8000676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800067a:	d107      	bne.n	800068c <__cmpdf2+0x74>
 800067c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d1d6      	bne.n	8000634 <__cmpdf2+0x1c>
 8000686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800068a:	d0d3      	beq.n	8000634 <__cmpdf2+0x1c>
 800068c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_cdrcmple>:
 8000694:	4684      	mov	ip, r0
 8000696:	4610      	mov	r0, r2
 8000698:	4662      	mov	r2, ip
 800069a:	468c      	mov	ip, r1
 800069c:	4619      	mov	r1, r3
 800069e:	4663      	mov	r3, ip
 80006a0:	e000      	b.n	80006a4 <__aeabi_cdcmpeq>
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdcmpeq>:
 80006a4:	b501      	push	{r0, lr}
 80006a6:	f7ff ffb7 	bl	8000618 <__cmpdf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd01      	pop	{r0, pc}

080006b4 <__aeabi_dcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cdcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_dcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cdcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_dcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cdcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffce 	bl	8000694 <__aeabi_cdrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_dcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc4 	bl	8000694 <__aeabi_cdrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <myprintf>:
void StartFakeEjection(void *argument);
void StartFakeSensors(void *argument);
void StartFakeTelemetry(void *argument);

/* USER CODE BEGIN PFP */
void myprintf(const char *fmt, ...) {
 8000718:	b40f      	push	{r0, r1, r2, r3}
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <myprintf+0x44>)
 8000730:	f005 fe38 	bl	80063a4 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <myprintf+0x44>)
 8000736:	f7ff fd53 	bl	80001e0 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	b29a      	uxth	r2, r3
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	4905      	ldr	r1, [pc, #20]	; (800075c <myprintf+0x44>)
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <myprintf+0x48>)
 800074a:	f002 fc5f 	bl	800300c <HAL_UART_Transmit>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000758:	b004      	add	sp, #16
 800075a:	4770      	bx	lr
 800075c:	200000a0 	.word	0x200000a0
 8000760:	20002174 	.word	0x20002174

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 faee 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f834 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 f8b4 	bl	80008dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000774:	f000 f882 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f003 f862 	bl	8003840 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of fakeEjection */
  fakeEjectionHandle = osThreadNew(StartFakeEjection, NULL, &fakeEjection_attributes);
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <main+0x50>)
 800077e:	2100      	movs	r1, #0
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <main+0x54>)
 8000782:	f003 f8c5 	bl	8003910 <osThreadNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <main+0x58>)
 800078a:	6013      	str	r3, [r2, #0]

  /* creation of fakeSensors */
  fakeSensorsHandle = osThreadNew(StartFakeSensors, NULL, &fakeSensors_attributes);
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <main+0x5c>)
 800078e:	2100      	movs	r1, #0
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <main+0x60>)
 8000792:	f003 f8bd 	bl	8003910 <osThreadNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <main+0x64>)
 800079a:	6013      	str	r3, [r2, #0]

  /* creation of fakeTelemetry */
  fakeTelemetryHandle = osThreadNew(StartFakeTelemetry, NULL, &fakeTelemetry_attributes);
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <main+0x68>)
 800079e:	2100      	movs	r1, #0
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x6c>)
 80007a2:	f003 f8b5 	bl	8003910 <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <main+0x70>)
 80007aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ac:	f003 f87c 	bl	80038a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x4c>
 80007b2:	bf00      	nop
 80007b4:	08006cd8 	.word	0x08006cd8
 80007b8:	08000911 	.word	0x08000911
 80007bc:	20001eb4 	.word	0x20001eb4
 80007c0:	08006cfc 	.word	0x08006cfc
 80007c4:	08000981 	.word	0x08000981
 80007c8:	200021f8 	.word	0x200021f8
 80007cc:	08006d20 	.word	0x08006d20
 80007d0:	08000a31 	.word	0x08000a31
 80007d4:	20001eb8 	.word	0x20001eb8

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0a6      	sub	sp, #152	; 0x98
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 fda8 	bl	800633c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2258      	movs	r2, #88	; 0x58
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fd9a 	bl	800633c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fd33 	bl	800128c <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800082c:	f000 f934 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fc34 	bl	80020b8 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000856:	f000 f91f 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800085a:	2302      	movs	r3, #2
 800085c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fe8f 	bl	8002588 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000870:	f000 f912 	bl	8000a98 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3798      	adds	r7, #152	; 0x98
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <MX_USART2_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000888:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008c0:	f002 fb56 	bl	8002f70 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f8e5 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20002174 	.word	0x20002174
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_GPIO_Init+0x2c>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <MX_GPIO_Init+0x2c>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_GPIO_Init+0x2c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	00000000 	.word	0x00000000

08000910 <StartFakeEjection>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFakeEjection */
void StartFakeEjection(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(acceleration == 69.42 || acceleration == 10.3)
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <StartFakeEjection+0x68>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe1b 	bl	8000558 <__aeabi_f2d>
 8000922:	a311      	add	r3, pc, #68	; (adr r3, 8000968 <StartFakeEjection+0x58>)
 8000924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000928:	f7ff fec4 	bl	80006b4 <__aeabi_dcmpeq>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10c      	bne.n	800094c <StartFakeEjection+0x3c>
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <StartFakeEjection+0x68>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe0e 	bl	8000558 <__aeabi_f2d>
 800093c:	a30c      	add	r3, pc, #48	; (adr r3, 8000970 <StartFakeEjection+0x60>)
 800093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000942:	f7ff feb7 	bl	80006b4 <__aeabi_dcmpeq>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <StartFakeEjection+0x44>
	  {
		  myprintf("EJECT or smthg\r\n");
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <StartFakeEjection+0x6c>)
 800094e:	f7ff fee3 	bl	8000718 <myprintf>
		  return;
 8000952:	e004      	b.n	800095e <StartFakeEjection+0x4e>
	  }
    osDelay(1000);
 8000954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000958:	f003 f884 	bl	8003a64 <osDelay>
	  if(acceleration == 69.42 || acceleration == 10.3)
 800095c:	e7dc      	b.n	8000918 <StartFakeEjection+0x8>
  }
  /* USER CODE END 5 */
}
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	f3af 8000 	nop.w
 8000968:	47ae147b 	.word	0x47ae147b
 800096c:	40515ae1 	.word	0x40515ae1
 8000970:	9999999a 	.word	0x9999999a
 8000974:	40249999 	.word	0x40249999
 8000978:	20002258 	.word	0x20002258
 800097c:	08006c04 	.word	0x08006c04

08000980 <StartFakeSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeSensors */
void StartFakeSensors(void *argument)
{
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b0a2      	sub	sp, #136	; 0x88
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeSensors */
	float accels[10] = {0.0, 0.23, 120, 420, 69.42, 10.3, 20.5, 12.12, 42.42, 0.0};
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <StartFakeSensors+0x9c>)
 800098a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	e895 0003 	ldmia.w	r5, {r0, r1}
 800099c:	e884 0003 	stmia.w	r4, {r0, r1}
	uint64_t friends[10] = {0, 1, 2, 3, 4, 5, 4, 3, 2, 1};
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <StartFakeSensors+0xa0>)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4611      	mov	r1, r2
 80009a8:	2250      	movs	r2, #80	; 0x50
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fcb8 	bl	8006320 <memcpy>
  /* Infinite loop */
	uint32_t i = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  for(;;)
  {
	  acceleration = accels[i%10];
 80009b6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <StartFakeSensors+0xa4>)
 80009bc:	fba3 2301 	umull	r2, r3, r3, r1
 80009c0:	08da      	lsrs	r2, r3, #3
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	1aca      	subs	r2, r1, r3
 80009cc:	0093      	lsls	r3, r2, #2
 80009ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80009d2:	4413      	add	r3, r2
 80009d4:	3b2c      	subs	r3, #44	; 0x2c
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <StartFakeSensors+0xa8>)
 80009da:	6013      	str	r3, [r2, #0]
	  numberOfFriends = friends[i%10];
 80009dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <StartFakeSensors+0xa4>)
 80009e2:	fba3 2301 	umull	r2, r3, r3, r1
 80009e6:	08da      	lsrs	r2, r3, #3
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	1aca      	subs	r2, r1, r3
 80009f2:	00d3      	lsls	r3, r2, #3
 80009f4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80009f8:	4413      	add	r3, r2
 80009fa:	3b80      	subs	r3, #128	; 0x80
 80009fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a00:	490a      	ldr	r1, [pc, #40]	; (8000a2c <StartFakeSensors+0xac>)
 8000a02:	e9c1 2300 	strd	r2, r3, [r1]
	  ++i;
 8000a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    osDelay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a14:	f003 f826 	bl	8003a64 <osDelay>
	  acceleration = accels[i%10];
 8000a18:	e7cd      	b.n	80009b6 <StartFakeSensors+0x36>
 8000a1a:	bf00      	nop
 8000a1c:	08006c18 	.word	0x08006c18
 8000a20:	08006c40 	.word	0x08006c40
 8000a24:	cccccccd 	.word	0xcccccccd
 8000a28:	20002258 	.word	0x20002258
 8000a2c:	20000098 	.word	0x20000098

08000a30 <StartFakeTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeTelemetry */
void StartFakeTelemetry(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeTelemetry */
  /* Infinite loop */
  for(;;)
  {
	  myprintf("Acceleration: %f\r\n", acceleration);
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <StartFakeTelemetry+0x34>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd8b 	bl	8000558 <__aeabi_f2d>
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <StartFakeTelemetry+0x38>)
 8000a48:	f7ff fe66 	bl	8000718 <myprintf>
	  myprintf("Number of friends: %li\r\n", numberOfFriends);
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <StartFakeTelemetry+0x3c>)
 8000a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <StartFakeTelemetry+0x40>)
 8000a54:	f7ff fe60 	bl	8000718 <myprintf>
    osDelay(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5c:	f003 f802 	bl	8003a64 <osDelay>
	  myprintf("Acceleration: %f\r\n", acceleration);
 8000a60:	e7ea      	b.n	8000a38 <StartFakeTelemetry+0x8>
 8000a62:	bf00      	nop
 8000a64:	20002258 	.word	0x20002258
 8000a68:	08006c90 	.word	0x08006c90
 8000a6c:	20000098 	.word	0x20000098
 8000a70:	08006ca4 	.word	0x08006ca4

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 f975 	bl	8000d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40001000 	.word	0x40001000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_MspInit+0x4c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f000 fa1f 	bl	8000f24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x7c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d128      	bne.n	8000b68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fa08 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2036      	movs	r0, #54	; 0x36
 8000b8e:	f000 f9c9 	bl	8000f24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b92:	2036      	movs	r0, #54	; 0x36
 8000b94:	f000 f9e2 	bl	8000f5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <HAL_InitTick+0x9c>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_InitTick+0x9c>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	61d3      	str	r3, [r2, #28]
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_InitTick+0x9c>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fcb2 	bl	8002524 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bc0:	f001 fc6c 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8000bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <HAL_InitTick+0xa0>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_InitTick+0xa8>)
 8000bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_InitTick+0xa4>)
 8000be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bf6:	f001 fee5 	bl	80029c4 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <HAL_InitTick+0xa4>)
 8000c02:	f001 ff41 	bl	8002a88 <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	2000225c 	.word	0x2000225c
 8000c20:	40001000 	.word	0x40001000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c56:	f001 ff87 	bl	8002b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000225c 	.word	0x2000225c

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f005 fb1a 	bl	80062cc <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20010000 	.word	0x20010000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	200001a0 	.word	0x200001a0
 8000ccc:	20002300 	.word	0x20002300

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopForever+0xe>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopForever+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f005 fad9 	bl	80062d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d26:	f7ff fd1d 	bl	8000764 <main>

08000d2a <LoopForever>:

LoopForever:
    b LoopForever
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d38:	08006db8 	.word	0x08006db8
  ldr r2, =_sbss
 8000d3c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d40:	200022fc 	.word	0x200022fc

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f8d8 	bl	8000f0e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff ff0a 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fe9e 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	200022a8 	.word	0x200022a8

08000d9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200022a8 	.word	0x200022a8

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <__NVIC_EnableIRQ+0x38>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff4c 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f36:	f7ff ff61 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f7ff ffb1 	bl	8000ea8 <NVIC_EncodePriority>
 8000f46:	4602      	mov	r2, r0
 8000f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff80 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff54 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e160      	b.n	800124a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8152 	beq.w	8001244 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x40>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d017      	beq.n	8001056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80ac 	beq.w	8001244 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a5d      	ldr	r2, [pc, #372]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b5b      	ldr	r3, [pc, #364]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001104:	4a59      	ldr	r2, [pc, #356]	; (800126c <HAL_GPIO_Init+0x2f4>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800112e:	d025      	beq.n	800117c <HAL_GPIO_Init+0x204>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x2f8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d01f      	beq.n	8001178 <HAL_GPIO_Init+0x200>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d019      	beq.n	8001174 <HAL_GPIO_Init+0x1fc>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1f8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x304>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1f4>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <HAL_GPIO_Init+0x308>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1f0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_GPIO_Init+0x30c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1ec>
 8001160:	2306      	movs	r3, #6
 8001162:	e00c      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001164:	2307      	movs	r3, #7
 8001166:	e00a      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001168:	2305      	movs	r3, #5
 800116a:	e008      	b.n	800117e <HAL_GPIO_Init+0x206>
 800116c:	2304      	movs	r3, #4
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001170:	2303      	movs	r3, #3
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x206>
 800117c:	2300      	movs	r3, #0
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800118e:	4937      	ldr	r1, [pc, #220]	; (800126c <HAL_GPIO_Init+0x2f4>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <HAL_GPIO_Init+0x310>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011c0:	4a31      	ldr	r2, [pc, #196]	; (8001288 <HAL_GPIO_Init+0x310>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_GPIO_Init+0x310>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011ea:	4a27      	ldr	r2, [pc, #156]	; (8001288 <HAL_GPIO_Init+0x310>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <HAL_GPIO_Init+0x310>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <HAL_GPIO_Init+0x310>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_GPIO_Init+0x310>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <HAL_GPIO_Init+0x310>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f ae97 	bne.w	8000f88 <HAL_GPIO_Init+0x10>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000
 8001270:	48000400 	.word	0x48000400
 8001274:	48000800 	.word	0x48000800
 8001278:	48000c00 	.word	0x48000c00
 800127c:	48001000 	.word	0x48001000
 8001280:	48001400 	.word	0x48001400
 8001284:	48001800 	.word	0x48001800
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001292:	af00      	add	r7, sp, #0
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f000 bf01 	b.w	80020a8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8160 	beq.w	8001576 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012b6:	4bae      	ldr	r3, [pc, #696]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c2:	4bab      	ldr	r3, [pc, #684]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d159      	bne.n	8001382 <HAL_RCC_OscConfig+0xf6>
 80012ce:	4ba8      	ldr	r3, [pc, #672]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d152      	bne.n	8001382 <HAL_RCC_OscConfig+0xf6>
 80012dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80012e8:	fa93 f3a3 	rbit	r3, r3
 80012ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d102      	bne.n	800130e <HAL_RCC_OscConfig+0x82>
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	e015      	b.n	800133a <HAL_RCC_OscConfig+0xae>
 800130e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001312:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001326:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800132a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001336:	4b8e      	ldr	r3, [pc, #568]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800133e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001342:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001346:	fa92 f2a2 	rbit	r2, r2
 800134a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800134e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001352:	fab2 f282 	clz	r2, r2
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	f042 0220 	orr.w	r2, r2, #32
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	f002 021f 	and.w	r2, r2, #31
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8102 	beq.w	8001574 <HAL_RCC_OscConfig+0x2e8>
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 80fc 	bne.w	8001574 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	f000 be93 	b.w	80020a8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x110>
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a77      	ldr	r2, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e030      	b.n	80013fe <HAL_RCC_OscConfig+0x172>
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x134>
 80013a6:	4b72      	ldr	r3, [pc, #456]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a71      	ldr	r2, [pc, #452]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6e      	ldr	r2, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01e      	b.n	80013fe <HAL_RCC_OscConfig+0x172>
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x15a>
 80013cc:	4b68      	ldr	r3, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a67      	ldr	r2, [pc, #412]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a64      	ldr	r2, [pc, #400]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e00b      	b.n	80013fe <HAL_RCC_OscConfig+0x172>
 80013e6:	4b62      	ldr	r3, [pc, #392]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a61      	ldr	r2, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a5e      	ldr	r2, [pc, #376]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 80013f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d059      	beq.n	80014bc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fcc8 	bl	8000d9c <HAL_GetTick>
 800140c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001412:	f7ff fcc3 	bl	8000d9c <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d902      	bls.n	8001428 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	f000 be40 	b.w	80020a8 <HAL_RCC_OscConfig+0xe1c>
 8001428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800143c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <HAL_RCC_OscConfig+0x1ce>
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1fa>
 800145a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800146e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001472:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001476:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800148a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800148e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001492:	fa92 f2a2 	rbit	r2, r2
 8001496:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800149a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800149e:	fab2 f282 	clz	r2, r2
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	f042 0220 	orr.w	r2, r2, #32
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	f002 021f 	and.w	r2, r2, #31
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0ab      	beq.n	8001412 <HAL_RCC_OscConfig+0x186>
 80014ba:	e05c      	b.n	8001576 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc6e 	bl	8000d9c <HAL_GetTick>
 80014c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c6:	f7ff fc69 	bl	8000d9c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d902      	bls.n	80014dc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f000 bde6 	b.w	80020a8 <HAL_RCC_OscConfig+0xe1c>
 80014dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80014f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x282>
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x2ae>
 800150e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001512:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001526:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800152a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x2e4>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001542:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001546:	fa92 f2a2 	rbit	r2, r2
 800154a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800154e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001552:	fab2 f282 	clz	r2, r2
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	f002 021f 	and.w	r2, r2, #31
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ab      	bne.n	80014c6 <HAL_RCC_OscConfig+0x23a>
 800156e:	e002      	b.n	8001576 <HAL_RCC_OscConfig+0x2ea>
 8001570:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8170 	beq.w	8001866 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001586:	4bd0      	ldr	r3, [pc, #832]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00c      	beq.n	80015ac <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001592:	4bcd      	ldr	r3, [pc, #820]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b08      	cmp	r3, #8
 800159c:	d16d      	bne.n	800167a <HAL_RCC_OscConfig+0x3ee>
 800159e:	4bca      	ldr	r3, [pc, #808]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015aa:	d166      	bne.n	800167a <HAL_RCC_OscConfig+0x3ee>
 80015ac:	2302      	movs	r3, #2
 80015ae:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80015be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	095b      	lsrs	r3, r3, #5
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0x350>
 80015d6:	4bbc      	ldr	r3, [pc, #752]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	e013      	b.n	8001604 <HAL_RCC_OscConfig+0x378>
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001600:	4bb1      	ldr	r3, [pc, #708]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2202      	movs	r2, #2
 8001606:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800160a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800160e:	fa92 f2a2 	rbit	r2, r2
 8001612:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001616:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800161a:	fab2 f282 	clz	r2, r2
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	f042 0220 	orr.w	r2, r2, #32
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	f002 021f 	and.w	r2, r2, #31
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <HAL_RCC_OscConfig+0x3ba>
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d002      	beq.n	8001646 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	f000 bd31 	b.w	80020a8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4ba0      	ldr	r3, [pc, #640]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	21f8      	movs	r1, #248	; 0xf8
 8001656:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800165e:	fa91 f1a1 	rbit	r1, r1
 8001662:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001666:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800166a:	fab1 f181 	clz	r1, r1
 800166e:	b2c9      	uxtb	r1, r1
 8001670:	408b      	lsls	r3, r1
 8001672:	4995      	ldr	r1, [pc, #596]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001678:	e0f5      	b.n	8001866 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8085 	beq.w	8001790 <HAL_RCC_OscConfig+0x504>
 8001686:	2301      	movs	r3, #1
 8001688:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001698:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	461a      	mov	r2, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb73 	bl	8000d9c <HAL_GetTick>
 80016b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff fb6e 	bl	8000d9c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d902      	bls.n	80016d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f000 bceb 	b.w	80020a8 <HAL_RCC_OscConfig+0xe1c>
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80016e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x476>
 80016fc:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e013      	b.n	800172a <HAL_RCC_OscConfig+0x49e>
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800171a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2202      	movs	r2, #2
 800172c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001730:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001734:	fa92 f2a2 	rbit	r2, r2
 8001738:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800173c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0af      	beq.n	80016bc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	21f8      	movs	r1, #248	; 0xf8
 800176c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001774:	fa91 f1a1 	rbit	r1, r1
 8001778:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800177c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001780:	fab1 f181 	clz	r1, r1
 8001784:	b2c9      	uxtb	r1, r1
 8001786:	408b      	lsls	r3, r1
 8001788:	494f      	ldr	r1, [pc, #316]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
 800178e:	e06a      	b.n	8001866 <HAL_RCC_OscConfig+0x5da>
 8001790:	2301      	movs	r3, #1
 8001792:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80017a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	461a      	mov	r2, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff faee 	bl	8000d9c <HAL_GetTick>
 80017c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fae9 	bl	8000d9c <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d902      	bls.n	80017dc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	f000 bc66 	b.w	80020a8 <HAL_RCC_OscConfig+0xe1c>
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80017ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d102      	bne.n	800180c <HAL_RCC_OscConfig+0x580>
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	e013      	b.n	8001834 <HAL_RCC_OscConfig+0x5a8>
 800180c:	2302      	movs	r3, #2
 800180e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001824:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_OscConfig+0x63c>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	2202      	movs	r2, #2
 8001836:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800183a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800183e:	fa92 f2a2 	rbit	r2, r2
 8001842:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001846:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800184a:	fab2 f282 	clz	r2, r2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f042 0220 	orr.w	r2, r2, #32
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f002 021f 	and.w	r2, r2, #31
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f202 	lsl.w	r2, r1, r2
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1af      	bne.n	80017c6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80da 	beq.w	8001a2a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d069      	beq.n	8001954 <HAL_RCC_OscConfig+0x6c8>
 8001880:	2301      	movs	r3, #1
 8001882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001892:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x640>)
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	461a      	mov	r2, r3
 80018a6:	2301      	movs	r3, #1
 80018a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa77 	bl	8000d9c <HAL_GetTick>
 80018ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e00d      	b.n	80018d0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fa72 	bl	8000d9c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d905      	bls.n	80018d0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e3ef      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	10908120 	.word	0x10908120
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018da:	fa93 f2a3 	rbit	r2, r3
 80018de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001912:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001914:	4ba4      	ldr	r3, [pc, #656]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001918:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800191c:	2102      	movs	r1, #2
 800191e:	6019      	str	r1, [r3, #0]
 8001920:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f1a3 	rbit	r1, r3
 800192a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800192e:	6019      	str	r1, [r3, #0]
  return result;
 8001930:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0b0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x628>
 8001952:	e06a      	b.n	8001a2a <HAL_RCC_OscConfig+0x79e>
 8001954:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800196a:	601a      	str	r2, [r3, #0]
  return result;
 800196c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001970:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_RCC_OscConfig+0x920>)
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	461a      	mov	r2, r3
 8001982:	2300      	movs	r3, #0
 8001984:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fa09 	bl	8000d9c <HAL_GetTick>
 800198a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198e:	e009      	b.n	80019a4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fa04 	bl	8000d9c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e381      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
 80019a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019a8:	2202      	movs	r2, #2
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f2a3 	rbit	r2, r3
 80019ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	4b6e      	ldr	r3, [pc, #440]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 80019ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019f4:	2102      	movs	r1, #2
 80019f6:	6019      	str	r1, [r3, #0]
 80019f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f1a3 	rbit	r1, r3
 8001a02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a06:	6019      	str	r1, [r3, #0]
  return result;
 8001a08:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1b2      	bne.n	8001990 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8157 	beq.w	8001ce8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a40:	4b59      	ldr	r3, [pc, #356]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d112      	bne.n	8001a72 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a56:	61d3      	str	r3, [r2, #28]
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <HAL_RCC_OscConfig+0x924>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d11a      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7e:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_RCC_OscConfig+0x924>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a4b      	ldr	r2, [pc, #300]	; (8001bb0 <HAL_RCC_OscConfig+0x924>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f987 	bl	8000d9c <HAL_GetTick>
 8001a8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	e009      	b.n	8001aa8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a94:	f7ff f982 	bl	8000d9c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e2ff      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x924>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ef      	beq.n	8001a94 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d106      	bne.n	8001acc <HAL_RCC_OscConfig+0x840>
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a39      	ldr	r2, [pc, #228]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	e02f      	b.n	8001b2c <HAL_RCC_OscConfig+0x8a0>
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x864>
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a30      	ldr	r2, [pc, #192]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0x8a0>
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x888>
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6213      	str	r3, [r2, #32]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0x8a0>
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f931 	bl	8000d9c <HAL_GetTick>
 8001b3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff f92c 	bl	8000d9c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e2a7      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
 8001b58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b74:	2202      	movs	r2, #2
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b86:	601a      	str	r2, [r3, #0]
  return result;
 8001b88:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d108      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x928>
 8001ba2:	4b01      	ldr	r3, [pc, #4]	; (8001ba8 <HAL_RCC_OscConfig+0x91c>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCC_OscConfig+0x944>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	10908120 	.word	0x10908120
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	4bc0      	ldr	r3, [pc, #768]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	6011      	str	r1, [r2, #0]
 8001bd8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	fa92 f1a2 	rbit	r1, r2
 8001be2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001be6:	6011      	str	r1, [r2, #0]
  return result;
 8001be8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	fab2 f282 	clz	r2, r2
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f002 021f 	and.w	r2, r2, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d09a      	beq.n	8001b40 <HAL_RCC_OscConfig+0x8b4>
 8001c0a:	e063      	b.n	8001cd4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f8c6 	bl	8000d9c <HAL_GetTick>
 8001c10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	e00b      	b.n	8001c2e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff f8c1 	bl	8000d9c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e23c      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
 8001c2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c32:	2202      	movs	r2, #2
 8001c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c5c:	601a      	str	r2, [r3, #0]
  return result;
 8001c5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0x9f2>
 8001c78:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	e00d      	b.n	8001c9a <HAL_RCC_OscConfig+0xa0e>
 8001c7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c82:	2202      	movs	r2, #2
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f2a3 	rbit	r2, r3
 8001c90:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	6011      	str	r1, [r2, #0]
 8001ca2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	fa92 f1a2 	rbit	r1, r2
 8001cac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cb0:	6011      	str	r1, [r2, #0]
  return result;
 8001cb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f002 021f 	and.w	r2, r2, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1a0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cd4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	4a7b      	ldr	r2, [pc, #492]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 81d9 	beq.w	80020a6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	f000 81a6 	beq.w	800204e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	f040 811e 	bne.w	8001f4a <HAL_RCC_OscConfig+0xcbe>
 8001d0e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d26:	601a      	str	r2, [r3, #0]
  return result;
 8001d28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff f82a 	bl	8000d9c <HAL_GetTick>
 8001d48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff f825 	bl	8000d9c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1a2      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
 8001d62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d7a:	601a      	str	r2, [r3, #0]
  return result;
 8001d7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0xb10>
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e01b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb48>
 8001d9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001dd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ddc:	6011      	str	r1, [r2, #0]
 8001dde:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	fa92 f1a2 	rbit	r1, r2
 8001de8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dec:	6011      	str	r1, [r2, #0]
  return result;
 8001dee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d19e      	bne.n	8001d4e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f023 020f 	bic.w	r2, r3, #15
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	492c      	ldr	r1, [pc, #176]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6a19      	ldr	r1, [r3, #32]
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	4925      	ldr	r1, [pc, #148]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f2a3 	rbit	r2, r3
 8001e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e58:	601a      	str	r2, [r3, #0]
  return result;
 8001e5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e5e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	461a      	mov	r2, r3
 8001e72:	2301      	movs	r3, #1
 8001e74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7fe ff91 	bl	8000d9c <HAL_GetTick>
 8001e7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7e:	e009      	b.n	8001e94 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe ff8c 	bl	8000d9c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e109      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
 8001e94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	fa93 f2a3 	rbit	r2, r3
 8001ea8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eac:	601a      	str	r2, [r3, #0]
  return result;
 8001eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xc48>
 8001ec8:	4b01      	ldr	r3, [pc, #4]	; (8001ed0 <HAL_RCC_OscConfig+0xc44>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e01e      	b.n	8001f0c <HAL_RCC_OscConfig+0xc80>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0xe28>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f14:	6011      	str	r1, [r2, #0]
 8001f16:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	fa92 f1a2 	rbit	r1, r2
 8001f20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f24:	6011      	str	r1, [r2, #0]
  return result;
 8001f26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	fab2 f282 	clz	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f042 0220 	orr.w	r2, r2, #32
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f002 021f 	and.w	r2, r2, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d09b      	beq.n	8001e80 <HAL_RCC_OscConfig+0xbf4>
 8001f48:	e0ad      	b.n	80020a6 <HAL_RCC_OscConfig+0xe1a>
 8001f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f62:	601a      	str	r2, [r3, #0]
  return result;
 8001f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe ff0c 	bl	8000d9c <HAL_GetTick>
 8001f84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe ff07 	bl	8000d9c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e084      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
 8001f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb6:	601a      	str	r2, [r3, #0]
  return result;
 8001fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	095b      	lsrs	r3, r3, #5
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xd4c>
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_RCC_OscConfig+0xe28>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e01b      	b.n	8002010 <HAL_RCC_OscConfig+0xd84>
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f107 0320 	add.w	r3, r7, #32
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f107 0318 	add.w	r3, r7, #24
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_RCC_OscConfig+0xe28>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f107 0214 	add.w	r2, r7, #20
 8002014:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002018:	6011      	str	r1, [r2, #0]
 800201a:	f107 0214 	add.w	r2, r7, #20
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	fa92 f1a2 	rbit	r1, r2
 8002024:	f107 0210 	add.w	r2, r7, #16
 8002028:	6011      	str	r1, [r2, #0]
  return result;
 800202a:	f107 0210 	add.w	r2, r7, #16
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d19e      	bne.n	8001f8a <HAL_RCC_OscConfig+0xcfe>
 800204c:	e02b      	b.n	80020a6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e025      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_RCC_OscConfig+0xe28>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_RCC_OscConfig+0xe28>)
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800206c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002070:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d111      	bne.n	80020a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800207e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800208c:	429a      	cmp	r2, r3
 800208e:	d108      	bne.n	80020a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b09e      	sub	sp, #120	; 0x78
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e162      	b.n	8002396 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b90      	ldr	r3, [pc, #576]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	498b      	ldr	r1, [pc, #556]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b89      	ldr	r3, [pc, #548]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e14a      	b.n	8002396 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	497f      	ldr	r1, [pc, #508]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80dc 	beq.w	80022e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d13c      	bne.n	80021ae <HAL_RCC_ClockConfig+0xf6>
 8002134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002138:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_RCC_ClockConfig+0xa6>
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e00f      	b.n	800217e <HAL_RCC_ClockConfig+0xc6>
 800215e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002162:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	667b      	str	r3, [r7, #100]	; 0x64
 800216c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002170:	663b      	str	r3, [r7, #96]	; 0x60
 8002172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002182:	65ba      	str	r2, [r7, #88]	; 0x58
 8002184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002186:	fa92 f2a2 	rbit	r2, r2
 800218a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800218c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d17b      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0f3      	b.n	8002396 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d13c      	bne.n	8002230 <HAL_RCC_ClockConfig+0x178>
 80021b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x128>
 80021da:	4b4f      	ldr	r3, [pc, #316]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e00f      	b.n	8002200 <HAL_RCC_ClockConfig+0x148>
 80021e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	647b      	str	r3, [r7, #68]	; 0x44
 80021ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fc:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002204:	63ba      	str	r2, [r7, #56]	; 0x38
 8002206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800220e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f042 0220 	orr.w	r2, r2, #32
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	f002 021f 	and.w	r2, r2, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d13a      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b2      	b.n	8002396 <HAL_RCC_ClockConfig+0x2de>
 8002230:	2302      	movs	r3, #2
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_RCC_ClockConfig+0x1a0>
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e00d      	b.n	8002274 <HAL_RCC_ClockConfig+0x1bc>
 8002258:	2302      	movs	r3, #2
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
 8002264:	2302      	movs	r3, #2
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2202      	movs	r2, #2
 8002276:	61ba      	str	r2, [r7, #24]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	fa92 f2a2 	rbit	r2, r2
 800227e:	617a      	str	r2, [r7, #20]
  return result;
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f042 0220 	orr.w	r2, r2, #32
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f002 021f 	and.w	r2, r2, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e079      	b.n	8002396 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	491a      	ldr	r1, [pc, #104]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7fe fd72 	bl	8000d9c <HAL_GetTick>
 80022b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7fe fd6e 	bl	8000d9c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e061      	b.n	8002396 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_ClockConfig+0x260>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d214      	bcs.n	800231c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4906      	ldr	r1, [pc, #24]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_RCC_ClockConfig+0x25c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e040      	b.n	8002396 <HAL_RCC_ClockConfig+0x2de>
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_ClockConfig+0x2e8>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	491a      	ldr	r1, [pc, #104]	; (80023a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4912      	ldr	r1, [pc, #72]	; (80023a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800235a:	f000 f829 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 800235e:	4601      	mov	r1, r0
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002368:	22f0      	movs	r2, #240	; 0xf0
 800236a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	fa92 f2a2 	rbit	r2, r2
 8002372:	60fa      	str	r2, [r7, #12]
  return result;
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	40d3      	lsrs	r3, r2
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	fa21 f303 	lsr.w	r3, r1, r3
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_ClockConfig+0x2f4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fbf2 	bl	8000b78 <HAL_InitTick>
  
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3778      	adds	r7, #120	; 0x78
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	08006d44 	.word	0x08006d44
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b08b      	sub	sp, #44	; 0x2c
 80023b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x30>
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x36>
 80023de:	e03f      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023e2:	623b      	str	r3, [r7, #32]
      break;
 80023e4:	e03f      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	fa92 f2a2 	rbit	r2, r2
 80023f8:	607a      	str	r2, [r7, #4]
  return result;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	40d3      	lsrs	r3, r2
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	220f      	movs	r2, #15
 8002414:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	fa92 f2a2 	rbit	r2, r2
 800241c:	60fa      	str	r2, [r7, #12]
  return result;
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	fab2 f282 	clz	r2, r2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	40d3      	lsrs	r3, r2
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_RCC_GetSysClockFreq+0xd0>)
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002438:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc8>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
 8002448:	e007      	b.n	800245a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc8>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	623b      	str	r3, [r7, #32]
      break;
 800245e:	e002      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002466:	6a3b      	ldr	r3, [r7, #32]
}
 8002468:	4618      	mov	r0, r3
 800246a:	372c      	adds	r7, #44	; 0x2c
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40021000 	.word	0x40021000
 8002478:	007a1200 	.word	0x007a1200
 800247c:	08006d5c 	.word	0x08006d5c
 8002480:	08006d6c 	.word	0x08006d6c

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024a2:	f7ff ffef 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a6:	4601      	mov	r1, r0
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	fa92 f2a2 	rbit	r2, r2
 80024bc:	603a      	str	r2, [r7, #0]
  return result;
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	40d3      	lsrs	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08006d54 	.word	0x08006d54

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024e6:	f7ff ffcd 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024ea:	4601      	mov	r1, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	603a      	str	r2, [r7, #0]
  return result;
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	40d3      	lsrs	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x40>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08006d54 	.word	0x08006d54

08002524 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	220f      	movs	r2, #15
 8002532:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_GetClockConfig+0x5c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_RCC_GetClockConfig+0x5c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_RCC_GetClockConfig+0x5c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_GetClockConfig+0x5c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_RCC_GetClockConfig+0x60>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0207 	and.w	r2, r3, #7
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	601a      	str	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40022000 	.word	0x40022000

08002588 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b092      	sub	sp, #72	; 0x48
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80d4 	beq.w	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ac:	4b4e      	ldr	r3, [pc, #312]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10e      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	4a4a      	ldr	r2, [pc, #296]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c2:	61d3      	str	r3, [r2, #28]
 80025c4:	4b48      	ldr	r3, [pc, #288]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a41      	ldr	r2, [pc, #260]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fbd5 	bl	8000d9c <HAL_GetTick>
 80025f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7fe fbd1 	bl	8000d9c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	; 0x64
 8002602:	d901      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e1d6      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8084 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002630:	429a      	cmp	r2, r3
 8002632:	d07c      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	2301      	movs	r3, #1
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	461a      	mov	r2, r3
 8002682:	2300      	movs	r3, #0
 8002684:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800268c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04b      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fb81 	bl	8000d9c <HAL_GetTick>
 800269a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fb7d 	bl	8000d9c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e180      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026b4:	2302      	movs	r3, #2
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
 80026c0:	2302      	movs	r3, #2
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	61fb      	str	r3, [r7, #28]
  return result;
 80026cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d108      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026e2:	4b01      	ldr	r3, [pc, #4]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	e00d      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
 80026f0:	10908100 	.word	0x10908100
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	4ba0      	ldr	r3, [pc, #640]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2202      	movs	r2, #2
 8002706:	613a      	str	r2, [r7, #16]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	fa92 f2a2 	rbit	r2, r2
 800270e:	60fa      	str	r2, [r7, #12]
  return result;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	f002 021f 	and.w	r2, r2, #31
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0b7      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800272e:	4b95      	ldr	r3, [pc, #596]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4992      	ldr	r1, [pc, #584]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002740:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b8e      	ldr	r3, [pc, #568]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a8d      	ldr	r2, [pc, #564]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002760:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	f023 0203 	bic.w	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4985      	ldr	r1, [pc, #532]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800277e:	4b81      	ldr	r3, [pc, #516]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	497e      	ldr	r1, [pc, #504]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278c:	4313      	orrs	r3, r2
 800278e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800279c:	4b79      	ldr	r3, [pc, #484]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4976      	ldr	r1, [pc, #472]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ba:	4b72      	ldr	r3, [pc, #456]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f023 0210 	bic.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	496f      	ldr	r1, [pc, #444]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	4967      	ldr	r1, [pc, #412]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f023 0220 	bic.w	r2, r3, #32
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4960      	ldr	r1, [pc, #384]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002814:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	4958      	ldr	r1, [pc, #352]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002832:	4b54      	ldr	r3, [pc, #336]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4951      	ldr	r1, [pc, #324]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4949      	ldr	r1, [pc, #292]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800286e:	4b45      	ldr	r3, [pc, #276]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4942      	ldr	r1, [pc, #264]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800288c:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	493a      	ldr	r1, [pc, #232]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	4933      	ldr	r1, [pc, #204]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028c8:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	492b      	ldr	r1, [pc, #172]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4924      	ldr	r1, [pc, #144]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	491c      	ldr	r1, [pc, #112]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	4915      	ldr	r1, [pc, #84]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	490d      	ldr	r1, [pc, #52]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800297c:	4b01      	ldr	r3, [pc, #4]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	e002      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002990:	490b      	ldr	r1, [pc, #44]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002992:	4313      	orrs	r3, r2
 8002994:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	4904      	ldr	r1, [pc, #16]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3748      	adds	r7, #72	; 0x48
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e049      	b.n	8002a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f841 	bl	8002a72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f000 f9f8 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04f      	b.n	8002b40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <HAL_TIM_Base_Start_IT+0x76>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aca:	d018      	beq.n	8002afe <HAL_TIM_Base_Start_IT+0x76>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_TIM_Base_Start_IT+0x76>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00e      	beq.n	8002afe <HAL_TIM_Base_Start_IT+0x76>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d009      	beq.n	8002afe <HAL_TIM_Base_Start_IT+0x76>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d004      	beq.n	8002afe <HAL_TIM_Base_Start_IT+0x76>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d115      	bne.n	8002b2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d015      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0xb4>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d011      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b28:	e008      	b.n	8002b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e000      	b.n	8002b3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800
 8002b58:	40013400 	.word	0x40013400
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40015000 	.word	0x40015000
 8002b64:	00010007 	.word	0x00010007

08002b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d122      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0202 	mvn.w	r2, #2
 8002b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f905 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8f7 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f908 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d122      	bne.n	8002c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d11b      	bne.n	8002c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0204 	mvn.w	r2, #4
 8002be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8db 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8cd 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f8de 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0208 	mvn.w	r2, #8
 8002c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2204      	movs	r2, #4
 8002c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8b1 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8a3 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f8b4 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0210 	mvn.w	r2, #16
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2208      	movs	r2, #8
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f887 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f879 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f88a 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0201 	mvn.w	r2, #1
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fec4 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b80      	cmp	r3, #128	; 0x80
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f918 	bl	8002f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d26:	d10e      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b80      	cmp	r3, #128	; 0x80
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f90b 	bl	8002f5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d10e      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d107      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f838 	bl	8002de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d10e      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d107      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0220 	mvn.w	r2, #32
 8002d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8cb 	bl	8002f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <TIM_Base_SetConfig+0x11c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e16:	d00f      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a3f      	ldr	r2, [pc, #252]	; (8002f18 <TIM_Base_SetConfig+0x120>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3e      	ldr	r2, [pc, #248]	; (8002f1c <TIM_Base_SetConfig+0x124>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3d      	ldr	r2, [pc, #244]	; (8002f20 <TIM_Base_SetConfig+0x128>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <TIM_Base_SetConfig+0x12c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d108      	bne.n	8002e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <TIM_Base_SetConfig+0x11c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d01b      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <TIM_Base_SetConfig+0x120>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d017      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <TIM_Base_SetConfig+0x124>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <TIM_Base_SetConfig+0x128>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00f      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <TIM_Base_SetConfig+0x130>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <TIM_Base_SetConfig+0x134>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <TIM_Base_SetConfig+0x138>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <TIM_Base_SetConfig+0x12c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <TIM_Base_SetConfig+0x11c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <TIM_Base_SetConfig+0x128>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <TIM_Base_SetConfig+0x130>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <TIM_Base_SetConfig+0x134>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <TIM_Base_SetConfig+0x138>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <TIM_Base_SetConfig+0x12c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d103      	bne.n	8002f00 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	615a      	str	r2, [r3, #20]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40013400 	.word	0x40013400
 8002f24:	40015000 	.word	0x40015000
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40014400 	.word	0x40014400
 8002f30:	40014800 	.word	0x40014800

08002f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e040      	b.n	8003004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fd fdae 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8c0 	bl	8003134 <UART_SetConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e022      	b.n	8003004 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa8a 	bl	80034e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fb11 	bl	8003624 <UART_CheckIdleState>
 8003002:	4603      	mov	r3, r0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003020:	2b20      	cmp	r3, #32
 8003022:	f040 8082 	bne.w	800312a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_UART_Transmit+0x26>
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07a      	b.n	800312c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_UART_Transmit+0x38>
 8003040:	2302      	movs	r3, #2
 8003042:	e073      	b.n	800312c <HAL_UART_Transmit+0x120>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2221      	movs	r2, #33	; 0x21
 8003058:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305a:	f7fd fe9f 	bl	8000d9c <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d108      	bne.n	800308c <HAL_UART_Transmit+0x80>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	e003      	b.n	8003094 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800309c:	e02d      	b.n	80030fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fb04 	bl	80036b6 <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e039      	b.n	800312c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ca:	b292      	uxth	r2, r2
 80030cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3302      	adds	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e008      	b.n	80030e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b292      	uxth	r2, r2
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1cb      	bne.n	800309e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fad0 	bl	80036b6 <UART_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e005      	b.n	800312c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4bab      	ldr	r3, [pc, #684]	; (800340c <UART_SetConfig+0x2d8>)
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	6979      	ldr	r1, [r7, #20]
 8003168:	430b      	orrs	r3, r1
 800316a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a99      	ldr	r2, [pc, #612]	; (8003410 <UART_SetConfig+0x2dc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d120      	bne.n	80031f2 <UART_SetConfig+0xbe>
 80031b0:	4b98      	ldr	r3, [pc, #608]	; (8003414 <UART_SetConfig+0x2e0>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d817      	bhi.n	80031ec <UART_SetConfig+0xb8>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <UART_SetConfig+0x90>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031e1 	.word	0x080031e1
 80031cc:	080031e7 	.word	0x080031e7
 80031d0:	080031db 	.word	0x080031db
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e0b5      	b.n	8003346 <UART_SetConfig+0x212>
 80031da:	2302      	movs	r3, #2
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e0b2      	b.n	8003346 <UART_SetConfig+0x212>
 80031e0:	2304      	movs	r3, #4
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e0af      	b.n	8003346 <UART_SetConfig+0x212>
 80031e6:	2308      	movs	r3, #8
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e0ac      	b.n	8003346 <UART_SetConfig+0x212>
 80031ec:	2310      	movs	r3, #16
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e0a9      	b.n	8003346 <UART_SetConfig+0x212>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a88      	ldr	r2, [pc, #544]	; (8003418 <UART_SetConfig+0x2e4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d124      	bne.n	8003246 <UART_SetConfig+0x112>
 80031fc:	4b85      	ldr	r3, [pc, #532]	; (8003414 <UART_SetConfig+0x2e0>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003204:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003208:	d011      	beq.n	800322e <UART_SetConfig+0xfa>
 800320a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800320e:	d817      	bhi.n	8003240 <UART_SetConfig+0x10c>
 8003210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003214:	d011      	beq.n	800323a <UART_SetConfig+0x106>
 8003216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321a:	d811      	bhi.n	8003240 <UART_SetConfig+0x10c>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <UART_SetConfig+0xf4>
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d006      	beq.n	8003234 <UART_SetConfig+0x100>
 8003226:	e00b      	b.n	8003240 <UART_SetConfig+0x10c>
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e08b      	b.n	8003346 <UART_SetConfig+0x212>
 800322e:	2302      	movs	r3, #2
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e088      	b.n	8003346 <UART_SetConfig+0x212>
 8003234:	2304      	movs	r3, #4
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e085      	b.n	8003346 <UART_SetConfig+0x212>
 800323a:	2308      	movs	r3, #8
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e082      	b.n	8003346 <UART_SetConfig+0x212>
 8003240:	2310      	movs	r3, #16
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e07f      	b.n	8003346 <UART_SetConfig+0x212>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a74      	ldr	r2, [pc, #464]	; (800341c <UART_SetConfig+0x2e8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d124      	bne.n	800329a <UART_SetConfig+0x166>
 8003250:	4b70      	ldr	r3, [pc, #448]	; (8003414 <UART_SetConfig+0x2e0>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003258:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800325c:	d011      	beq.n	8003282 <UART_SetConfig+0x14e>
 800325e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003262:	d817      	bhi.n	8003294 <UART_SetConfig+0x160>
 8003264:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003268:	d011      	beq.n	800328e <UART_SetConfig+0x15a>
 800326a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800326e:	d811      	bhi.n	8003294 <UART_SetConfig+0x160>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x148>
 8003274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003278:	d006      	beq.n	8003288 <UART_SetConfig+0x154>
 800327a:	e00b      	b.n	8003294 <UART_SetConfig+0x160>
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e061      	b.n	8003346 <UART_SetConfig+0x212>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e05e      	b.n	8003346 <UART_SetConfig+0x212>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e05b      	b.n	8003346 <UART_SetConfig+0x212>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e058      	b.n	8003346 <UART_SetConfig+0x212>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e055      	b.n	8003346 <UART_SetConfig+0x212>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a60      	ldr	r2, [pc, #384]	; (8003420 <UART_SetConfig+0x2ec>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d124      	bne.n	80032ee <UART_SetConfig+0x1ba>
 80032a4:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <UART_SetConfig+0x2e0>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032b0:	d011      	beq.n	80032d6 <UART_SetConfig+0x1a2>
 80032b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032b6:	d817      	bhi.n	80032e8 <UART_SetConfig+0x1b4>
 80032b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032bc:	d011      	beq.n	80032e2 <UART_SetConfig+0x1ae>
 80032be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c2:	d811      	bhi.n	80032e8 <UART_SetConfig+0x1b4>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <UART_SetConfig+0x19c>
 80032c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032cc:	d006      	beq.n	80032dc <UART_SetConfig+0x1a8>
 80032ce:	e00b      	b.n	80032e8 <UART_SetConfig+0x1b4>
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e037      	b.n	8003346 <UART_SetConfig+0x212>
 80032d6:	2302      	movs	r3, #2
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e034      	b.n	8003346 <UART_SetConfig+0x212>
 80032dc:	2304      	movs	r3, #4
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e031      	b.n	8003346 <UART_SetConfig+0x212>
 80032e2:	2308      	movs	r3, #8
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e02e      	b.n	8003346 <UART_SetConfig+0x212>
 80032e8:	2310      	movs	r3, #16
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e02b      	b.n	8003346 <UART_SetConfig+0x212>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a4c      	ldr	r2, [pc, #304]	; (8003424 <UART_SetConfig+0x2f0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d124      	bne.n	8003342 <UART_SetConfig+0x20e>
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <UART_SetConfig+0x2e0>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003300:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003304:	d011      	beq.n	800332a <UART_SetConfig+0x1f6>
 8003306:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800330a:	d817      	bhi.n	800333c <UART_SetConfig+0x208>
 800330c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003310:	d011      	beq.n	8003336 <UART_SetConfig+0x202>
 8003312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003316:	d811      	bhi.n	800333c <UART_SetConfig+0x208>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <UART_SetConfig+0x1f0>
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003320:	d006      	beq.n	8003330 <UART_SetConfig+0x1fc>
 8003322:	e00b      	b.n	800333c <UART_SetConfig+0x208>
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e00d      	b.n	8003346 <UART_SetConfig+0x212>
 800332a:	2302      	movs	r3, #2
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e00a      	b.n	8003346 <UART_SetConfig+0x212>
 8003330:	2304      	movs	r3, #4
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e007      	b.n	8003346 <UART_SetConfig+0x212>
 8003336:	2308      	movs	r3, #8
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e004      	b.n	8003346 <UART_SetConfig+0x212>
 800333c:	2310      	movs	r3, #16
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e001      	b.n	8003346 <UART_SetConfig+0x212>
 8003342:	2310      	movs	r3, #16
 8003344:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334e:	d16d      	bne.n	800342c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003350:	7ffb      	ldrb	r3, [r7, #31]
 8003352:	2b08      	cmp	r3, #8
 8003354:	d827      	bhi.n	80033a6 <UART_SetConfig+0x272>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0x228>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003381 	.word	0x08003381
 8003360:	08003389 	.word	0x08003389
 8003364:	08003391 	.word	0x08003391
 8003368:	080033a7 	.word	0x080033a7
 800336c:	08003397 	.word	0x08003397
 8003370:	080033a7 	.word	0x080033a7
 8003374:	080033a7 	.word	0x080033a7
 8003378:	080033a7 	.word	0x080033a7
 800337c:	0800339f 	.word	0x0800339f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003380:	f7ff f88c 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003384:	61b8      	str	r0, [r7, #24]
        break;
 8003386:	e013      	b.n	80033b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7ff f8aa 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 800338c:	61b8      	str	r0, [r7, #24]
        break;
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <UART_SetConfig+0x2f4>)
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e00c      	b.n	80033b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003396:	f7ff f80b 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 800339a:	61b8      	str	r0, [r7, #24]
        break;
 800339c:	e008      	b.n	80033b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800339e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a2:	61bb      	str	r3, [r7, #24]
        break;
 80033a4:	e004      	b.n	80033b0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77bb      	strb	r3, [r7, #30]
        break;
 80033ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8086 	beq.w	80034c4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	005a      	lsls	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	441a      	add	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b0f      	cmp	r3, #15
 80033d4:	d916      	bls.n	8003404 <UART_SetConfig+0x2d0>
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d212      	bcs.n	8003404 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f023 030f 	bic.w	r3, r3, #15
 80033e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	89fb      	ldrh	r3, [r7, #14]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	89fa      	ldrh	r2, [r7, #14]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e05f      	b.n	80034c4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	77bb      	strb	r3, [r7, #30]
 8003408:	e05c      	b.n	80034c4 <UART_SetConfig+0x390>
 800340a:	bf00      	nop
 800340c:	efff69f3 	.word	0xefff69f3
 8003410:	40013800 	.word	0x40013800
 8003414:	40021000 	.word	0x40021000
 8003418:	40004400 	.word	0x40004400
 800341c:	40004800 	.word	0x40004800
 8003420:	40004c00 	.word	0x40004c00
 8003424:	40005000 	.word	0x40005000
 8003428:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800342c:	7ffb      	ldrb	r3, [r7, #31]
 800342e:	2b08      	cmp	r3, #8
 8003430:	d827      	bhi.n	8003482 <UART_SetConfig+0x34e>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <UART_SetConfig+0x304>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800345d 	.word	0x0800345d
 800343c:	08003465 	.word	0x08003465
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003483 	.word	0x08003483
 8003448:	08003473 	.word	0x08003473
 800344c:	08003483 	.word	0x08003483
 8003450:	08003483 	.word	0x08003483
 8003454:	08003483 	.word	0x08003483
 8003458:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7ff f81e 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003460:	61b8      	str	r0, [r7, #24]
        break;
 8003462:	e013      	b.n	800348c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff f83c 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8003468:	61b8      	str	r0, [r7, #24]
        break;
 800346a:	e00f      	b.n	800348c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <UART_SetConfig+0x3a8>)
 800346e:	61bb      	str	r3, [r7, #24]
        break;
 8003470:	e00c      	b.n	800348c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7fe ff9d 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 8003476:	61b8      	str	r0, [r7, #24]
        break;
 8003478:	e008      	b.n	800348c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347e:	61bb      	str	r3, [r7, #24]
        break;
 8003480:	e004      	b.n	800348c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	77bb      	strb	r3, [r7, #30]
        break;
 800348a:	bf00      	nop
    }

    if (pclk != 0U)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d018      	beq.n	80034c4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	085a      	lsrs	r2, r3, #1
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	441a      	add	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	d908      	bls.n	80034c0 <UART_SetConfig+0x38c>
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d204      	bcs.n	80034c0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	e001      	b.n	80034c4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035de:	d10a      	bne.n	80035f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003634:	f7fd fbb2 	bl	8000d9c <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d10e      	bne.n	8003666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f82d 	bl	80036b6 <UART_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e023      	b.n	80036ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d10e      	bne.n	8003692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f817 	bl	80036b6 <UART_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e00d      	b.n	80036ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b09c      	sub	sp, #112	; 0x70
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	4613      	mov	r3, r2
 80036c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c6:	e0a5      	b.n	8003814 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	f000 80a1 	beq.w	8003814 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fd fb63 	bl	8000d9c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80036e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d13e      	bne.n	8003766 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036fc:	667b      	str	r3, [r7, #100]	; 0x64
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003708:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800370c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e6      	bne.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	663b      	str	r3, [r7, #96]	; 0x60
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3308      	adds	r3, #8
 8003738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800373a:	64ba      	str	r2, [r7, #72]	; 0x48
 800373c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e5      	bne.n	800371a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e067      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d04f      	beq.n	8003814 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003782:	d147      	bne.n	8003814 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800378c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
 80037ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e6      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	613b      	str	r3, [r7, #16]
   return(result);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037e0:	623a      	str	r2, [r7, #32]
 80037e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	69f9      	ldr	r1, [r7, #28]
 80037e6:	6a3a      	ldr	r2, [r7, #32]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e010      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	429a      	cmp	r2, r3
 8003830:	f43f af4a 	beq.w	80036c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3770      	adds	r7, #112	; 0x70
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003846:	f3ef 8305 	mrs	r3, IPSR
 800384a:	60bb      	str	r3, [r7, #8]
  return(result);
 800384c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	607b      	str	r3, [r7, #4]
  return(result);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <osKernelInitialize+0x32>
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <osKernelInitialize+0x64>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d109      	bne.n	800387a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003866:	f3ef 8311 	mrs	r3, BASEPRI
 800386a:	603b      	str	r3, [r7, #0]
  return(result);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003872:	f06f 0305 	mvn.w	r3, #5
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e00c      	b.n	8003894 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <osKernelInitialize+0x64>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <osKernelInitialize+0x64>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e002      	b.n	8003894 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	200001a4 	.word	0x200001a4

080038a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ae:	f3ef 8305 	mrs	r3, IPSR
 80038b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80038b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ba:	f3ef 8310 	mrs	r3, PRIMASK
 80038be:	607b      	str	r3, [r7, #4]
  return(result);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <osKernelStart+0x32>
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <osKernelStart+0x64>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d109      	bne.n	80038e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038ce:	f3ef 8311 	mrs	r3, BASEPRI
 80038d2:	603b      	str	r3, [r7, #0]
  return(result);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80038da:	f06f 0305 	mvn.w	r3, #5
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e00e      	b.n	8003900 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <osKernelStart+0x64>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <osKernelStart+0x64>)
 80038ec:	2202      	movs	r2, #2
 80038ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80038f0:	f001 f880 	bl	80049f4 <vTaskStartScheduler>
      stat = osOK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e002      	b.n	8003900 <osKernelStart+0x58>
    } else {
      stat = osError;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003900:	68fb      	ldr	r3, [r7, #12]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200001a4 	.word	0x200001a4

08003910 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b092      	sub	sp, #72	; 0x48
 8003914:	af04      	add	r7, sp, #16
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003920:	f3ef 8305 	mrs	r3, IPSR
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8094 	bne.w	8003a56 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	623b      	str	r3, [r7, #32]
  return(result);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 808d 	bne.w	8003a56 <osThreadNew+0x146>
 800393c:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <osThreadNew+0x150>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d106      	bne.n	8003952 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003944:	f3ef 8311 	mrs	r3, BASEPRI
 8003948:	61fb      	str	r3, [r7, #28]
  return(result);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f040 8082 	bne.w	8003a56 <osThreadNew+0x146>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d07e      	beq.n	8003a56 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800395c:	2318      	movs	r3, #24
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003960:	2300      	movs	r3, #0
 8003962:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003964:	f107 031b 	add.w	r3, r7, #27
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d045      	beq.n	8003a02 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <osThreadNew+0x74>
        name = attr->name;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <osThreadNew+0x9a>
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2b38      	cmp	r3, #56	; 0x38
 800399c:	d805      	bhi.n	80039aa <osThreadNew+0x9a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <osThreadNew+0x9e>
        return (NULL);
 80039aa:	2300      	movs	r3, #0
 80039ac:	e054      	b.n	8003a58 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <osThreadNew+0xd4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b5b      	cmp	r3, #91	; 0x5b
 80039cc:	d90a      	bls.n	80039e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <osThreadNew+0xd4>
        mem = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e2:	e010      	b.n	8003a06 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10c      	bne.n	8003a06 <osThreadNew+0xf6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d108      	bne.n	8003a06 <osThreadNew+0xf6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <osThreadNew+0xf6>
          mem = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a00:	e001      	b.n	8003a06 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d110      	bne.n	8003a2e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a14:	9202      	str	r2, [sp, #8]
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fe1a 	bl	800465c <xTaskCreateStatic>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e013      	b.n	8003a56 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d110      	bne.n	8003a56 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fe64 	bl	8004714 <xTaskCreate>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <osThreadNew+0x146>
          hTask = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a56:	697b      	ldr	r3, [r7, #20]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3738      	adds	r7, #56	; 0x38
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	200001a4 	.word	0x200001a4

08003a64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a6c:	f3ef 8305 	mrs	r3, IPSR
 8003a70:	613b      	str	r3, [r7, #16]
  return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10f      	bne.n	8003a98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a78:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <osDelay+0x34>
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <osDelay+0x58>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d109      	bne.n	8003aa0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a90:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <osDelay+0x3c>
    stat = osErrorISR;
 8003a98:	f06f 0305 	mvn.w	r3, #5
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e007      	b.n	8003ab0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 ff6e 	bl	800498c <vTaskDelay>
    }
  }

  return (stat);
 8003ab0:	697b      	ldr	r3, [r7, #20]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200001a4 	.word	0x200001a4

08003ac0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a07      	ldr	r2, [pc, #28]	; (8003aec <vApplicationGetIdleTaskMemory+0x2c>)
 8003ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	200001a8 	.word	0x200001a8
 8003af0:	20000204 	.word	0x20000204

08003af4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <vApplicationGetTimerTaskMemory+0x30>)
 8003b0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20000404 	.word	0x20000404
 8003b24:	20000460 	.word	0x20000460

08003b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f103 0208 	add.w	r2, r3, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f103 0208 	add.w	r2, r3, #8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f103 0208 	add.w	r2, r3, #8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d103      	bne.n	8003bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e00c      	b.n	8003c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3308      	adds	r3, #8
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e002      	b.n	8003bf8 <vListInsert+0x2e>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d2f6      	bcs.n	8003bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6852      	ldr	r2, [r2, #4]
 8003c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d103      	bne.n	8003c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1e5a      	subs	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cba:	f002 f80b 	bl	8005cd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	441a      	add	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	3b01      	subs	r3, #1
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	441a      	add	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d114      	bne.n	8003d3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01a      	beq.n	8003d4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3310      	adds	r3, #16
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 f8f7 	bl	8004f10 <xTaskRemoveFromEventList>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d012      	beq.n	8003d4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <xQueueGenericReset+0xcc>)
 8003d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	e009      	b.n	8003d4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fef2 	bl	8003b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff feed 	bl	8003b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 fff1 	bl	8005d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d52:	2301      	movs	r3, #1
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08e      	sub	sp, #56	; 0x38
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <xQueueGenericCreateStatic+0x52>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <xQueueGenericCreateStatic+0x56>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <xQueueGenericCreateStatic+0x58>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	623b      	str	r3, [r7, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <xQueueGenericCreateStatic+0x7e>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <xQueueGenericCreateStatic+0x82>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <xQueueGenericCreateStatic+0x84>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	61fb      	str	r3, [r7, #28]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dfe:	2350      	movs	r3, #80	; 0x50
 8003e00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b50      	cmp	r3, #80	; 0x50
 8003e06:	d00a      	beq.n	8003e1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61bb      	str	r3, [r7, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f805 	bl	8003e4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3730      	adds	r7, #48	; 0x30
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e002      	b.n	8003e70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	69b8      	ldr	r0, [r7, #24]
 8003e80:	f7ff ff06 	bl	8003c90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08e      	sub	sp, #56	; 0x38
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <xQueueGenericSend+0x32>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <xQueueGenericSend+0x40>
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <xQueueGenericSend+0x44>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <xQueueGenericSend+0x46>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <xQueueGenericSend+0x60>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d103      	bne.n	8003f02 <xQueueGenericSend+0x6e>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <xQueueGenericSend+0x72>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <xQueueGenericSend+0x74>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xQueueGenericSend+0x8e>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	623b      	str	r3, [r7, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f22:	f001 f9b9 	bl	8005298 <xTaskGetSchedulerState>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <xQueueGenericSend+0x9e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <xQueueGenericSend+0xa2>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <xQueueGenericSend+0xa4>
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xQueueGenericSend+0xbe>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	61fb      	str	r3, [r7, #28]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f52:	f001 febf 	bl	8005cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <xQueueGenericSend+0xd4>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d129      	bne.n	8003fbc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6e:	f000 fa07 	bl	8004380 <prvCopyDataToQueue>
 8003f72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d010      	beq.n	8003f9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	3324      	adds	r3, #36	; 0x24
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 ffc5 	bl	8004f10 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	; (800408c <xQueueGenericSend+0x1f8>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	e00a      	b.n	8003fb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b39      	ldr	r3, [pc, #228]	; (800408c <xQueueGenericSend+0x1f8>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fb4:	f001 febe 	bl	8005d34 <vPortExitCritical>
				return pdPASS;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e063      	b.n	8004084 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fc2:	f001 feb7 	bl	8005d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e05c      	b.n	8004084 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 ffff 	bl	8004fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fde:	f001 fea9 	bl	8005d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe2:	f000 fd6d 	bl	8004ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fe6:	f001 fe75 	bl	8005cd4 <vPortEnterCritical>
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff0:	b25b      	sxtb	r3, r3
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d103      	bne.n	8004000 <xQueueGenericSend+0x16c>
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004006:	b25b      	sxtb	r3, r3
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x182>
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004016:	f001 fe8d 	bl	8005d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401a:	1d3a      	adds	r2, r7, #4
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f000 ffee 	bl	8005004 <xTaskCheckForTimeOut>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d124      	bne.n	8004078 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800402e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004030:	f000 fa9e 	bl	8004570 <prvIsQueueFull>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	3310      	adds	r3, #16
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ff14 	bl	8004e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800404a:	f000 fa29 	bl	80044a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800404e:	f000 fd45 	bl	8004adc <xTaskResumeAll>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	f47f af7c 	bne.w	8003f52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <xQueueGenericSend+0x1f8>)
 800405c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	e772      	b.n	8003f52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800406c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800406e:	f000 fa17 	bl	80044a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004072:	f000 fd33 	bl	8004adc <xTaskResumeAll>
 8004076:	e76c      	b.n	8003f52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800407a:	f000 fa11 	bl	80044a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800407e:	f000 fd2d 	bl	8004adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004082:	2300      	movs	r3, #0
		}
	}
}
 8004084:	4618      	mov	r0, r3
 8004086:	3738      	adds	r7, #56	; 0x38
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08e      	sub	sp, #56	; 0x38
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d103      	bne.n	80040cc <xQueueGenericSendFromISR+0x3c>
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <xQueueGenericSendFromISR+0x40>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <xQueueGenericSendFromISR+0x42>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	623b      	str	r3, [r7, #32]
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d103      	bne.n	80040fa <xQueueGenericSendFromISR+0x6a>
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <xQueueGenericSendFromISR+0x6e>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <xQueueGenericSendFromISR+0x70>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	61fb      	str	r3, [r7, #28]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800411a:	f001 febd 	bl	8005e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800411e:	f3ef 8211 	mrs	r2, BASEPRI
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	61ba      	str	r2, [r7, #24]
 8004134:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004136:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <xQueueGenericSendFromISR+0xbc>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d12c      	bne.n	80041a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800415c:	f000 f910 	bl	8004380 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004160:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d112      	bne.n	8004190 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	4618      	mov	r0, r3
 8004178:	f000 feca 	bl	8004f10 <xTaskRemoveFromEventList>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00e      	beq.n	80041a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e007      	b.n	80041a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004194:	3301      	adds	r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	b25a      	sxtb	r2, r3
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041a0:	2301      	movs	r3, #1
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80041a4:	e001      	b.n	80041aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3738      	adds	r7, #56	; 0x38
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <xQueueReceive+0x30>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	623b      	str	r3, [r7, #32]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <xQueueReceive+0x3e>
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <xQueueReceive+0x42>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <xQueueReceive+0x44>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueReceive+0x5e>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	61fb      	str	r3, [r7, #28]
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800421e:	f001 f83b 	bl	8005298 <xTaskGetSchedulerState>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <xQueueReceive+0x6e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <xQueueReceive+0x72>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <xQueueReceive+0x74>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueReceive+0x8e>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	61bb      	str	r3, [r7, #24]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800424e:	f001 fd41 	bl	8005cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01f      	beq.n	800429e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004262:	f000 f8f7 	bl	8004454 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00f      	beq.n	8004296 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	3310      	adds	r3, #16
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fe48 	bl	8004f10 <xTaskRemoveFromEventList>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <xQueueReceive+0x1bc>)
 8004288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004296:	f001 fd4d 	bl	8005d34 <vPortExitCritical>
				return pdPASS;
 800429a:	2301      	movs	r3, #1
 800429c:	e069      	b.n	8004372 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042a4:	f001 fd46 	bl	8005d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e062      	b.n	8004372 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fe8e 	bl	8004fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042c0:	f001 fd38 	bl	8005d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042c4:	f000 fbfc 	bl	8004ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042c8:	f001 fd04 	bl	8005cd4 <vPortEnterCritical>
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d103      	bne.n	80042e2 <xQueueReceive+0x122>
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d103      	bne.n	80042f8 <xQueueReceive+0x138>
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f8:	f001 fd1c 	bl	8005d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042fc:	1d3a      	adds	r2, r7, #4
 80042fe:	f107 0310 	add.w	r3, r7, #16
 8004302:	4611      	mov	r1, r2
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fe7d 	bl	8005004 <xTaskCheckForTimeOut>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d123      	bne.n	8004358 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004312:	f000 f917 	bl	8004544 <prvIsQueueEmpty>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d017      	beq.n	800434c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	3324      	adds	r3, #36	; 0x24
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fda3 	bl	8004e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800432a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800432c:	f000 f8b8 	bl	80044a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004330:	f000 fbd4 	bl	8004adc <xTaskResumeAll>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d189      	bne.n	800424e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <xQueueReceive+0x1bc>)
 800433c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	e780      	b.n	800424e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800434c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800434e:	f000 f8a7 	bl	80044a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004352:	f000 fbc3 	bl	8004adc <xTaskResumeAll>
 8004356:	e77a      	b.n	800424e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435a:	f000 f8a1 	bl	80044a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800435e:	f000 fbbd 	bl	8004adc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004364:	f000 f8ee 	bl	8004544 <prvIsQueueEmpty>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	f43f af6f 	beq.w	800424e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004372:	4618      	mov	r0, r3
 8004374:	3730      	adds	r7, #48	; 0x30
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d14d      	bne.n	8004442 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 ff92 	bl	80052d4 <xTaskPriorityDisinherit>
 80043b0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	e043      	b.n	8004442 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d119      	bne.n	80043f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6898      	ldr	r0, [r3, #8]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	461a      	mov	r2, r3
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	f001 ffa8 	bl	8006320 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	441a      	add	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d32b      	bcc.n	8004442 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	e026      	b.n	8004442 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68d8      	ldr	r0, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	461a      	mov	r2, r3
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	f001 ff8e 	bl	8006320 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	425b      	negs	r3, r3
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d207      	bcs.n	8004430 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	425b      	negs	r3, r3
 800442a:	441a      	add	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d105      	bne.n	8004442 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	3b01      	subs	r3, #1
 8004440:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800444a:	697b      	ldr	r3, [r7, #20]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	441a      	add	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d303      	bcc.n	8004488 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68d9      	ldr	r1, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	461a      	mov	r2, r3
 8004492:	6838      	ldr	r0, [r7, #0]
 8004494:	f001 ff44 	bl	8006320 <memcpy>
	}
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044a8:	f001 fc14 	bl	8005cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044b4:	e011      	b.n	80044da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d012      	beq.n	80044e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3324      	adds	r3, #36	; 0x24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fd24 	bl	8004f10 <xTaskRemoveFromEventList>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044ce:	f000 fdfb 	bl	80050c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	dce9      	bgt.n	80044b6 <prvUnlockQueue+0x16>
 80044e2:	e000      	b.n	80044e6 <prvUnlockQueue+0x46>
					break;
 80044e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	22ff      	movs	r2, #255	; 0xff
 80044ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044ee:	f001 fc21 	bl	8005d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044f2:	f001 fbef 	bl	8005cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044fe:	e011      	b.n	8004524 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d012      	beq.n	800452e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3310      	adds	r3, #16
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fcff 	bl	8004f10 <xTaskRemoveFromEventList>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004518:	f000 fdd6 	bl	80050c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800451c:	7bbb      	ldrb	r3, [r7, #14]
 800451e:	3b01      	subs	r3, #1
 8004520:	b2db      	uxtb	r3, r3
 8004522:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004528:	2b00      	cmp	r3, #0
 800452a:	dce9      	bgt.n	8004500 <prvUnlockQueue+0x60>
 800452c:	e000      	b.n	8004530 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800452e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	22ff      	movs	r2, #255	; 0xff
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004538:	f001 fbfc 	bl	8005d34 <vPortExitCritical>
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800454c:	f001 fbc2 	bl	8005cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e001      	b.n	8004562 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004562:	f001 fbe7 	bl	8005d34 <vPortExitCritical>

	return xReturn;
 8004566:	68fb      	ldr	r3, [r7, #12]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004578:	f001 fbac 	bl	8005cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	429a      	cmp	r2, r3
 8004586:	d102      	bne.n	800458e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e001      	b.n	8004592 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004592:	f001 fbcf 	bl	8005d34 <vPortExitCritical>

	return xReturn;
 8004596:	68fb      	ldr	r3, [r7, #12]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	e014      	b.n	80045da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045b0:	4a0f      	ldr	r2, [pc, #60]	; (80045f0 <vQueueAddToRegistry+0x50>)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045bc:	490c      	ldr	r1, [pc, #48]	; (80045f0 <vQueueAddToRegistry+0x50>)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <vQueueAddToRegistry+0x50>)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045d2:	e006      	b.n	80045e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b07      	cmp	r3, #7
 80045de:	d9e7      	bls.n	80045b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	200022ac 	.word	0x200022ac

080045f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004604:	f001 fb66 	bl	8005cd4 <vPortEnterCritical>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800460e:	b25b      	sxtb	r3, r3
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d103      	bne.n	800461e <vQueueWaitForMessageRestricted+0x2a>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004624:	b25b      	sxtb	r3, r3
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d103      	bne.n	8004634 <vQueueWaitForMessageRestricted+0x40>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004634:	f001 fb7e 	bl	8005d34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3324      	adds	r3, #36	; 0x24
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fc35 	bl	8004eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800464e:	6978      	ldr	r0, [r7, #20]
 8004650:	f7ff ff26 	bl	80044a0 <prvUnlockQueue>
	}
 8004654:	bf00      	nop
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08e      	sub	sp, #56	; 0x38
 8004660:	af04      	add	r7, sp, #16
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	623b      	str	r3, [r7, #32]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	61fb      	str	r3, [r7, #28]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046a2:	235c      	movs	r3, #92	; 0x5c
 80046a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b5c      	cmp	r3, #92	; 0x5c
 80046aa:	d00a      	beq.n	80046c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61bb      	str	r3, [r7, #24]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01e      	beq.n	8004706 <xTaskCreateStatic+0xaa>
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01b      	beq.n	8004706 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046e0:	2300      	movs	r3, #0
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	9302      	str	r3, [sp, #8]
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f850 	bl	800479e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004700:	f000 f8d4 	bl	80048ac <prvAddNewTaskToReadyList>
 8004704:	e001      	b.n	800470a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800470a:	697b      	ldr	r3, [r7, #20]
	}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af04      	add	r7, sp, #16
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4618      	mov	r0, r3
 800472a:	f001 fbf5 	bl	8005f18 <pvPortMalloc>
 800472e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004736:	205c      	movs	r0, #92	; 0x5c
 8004738:	f001 fbee 	bl	8005f18 <pvPortMalloc>
 800473c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
 800474a:	e005      	b.n	8004758 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800474c:	6978      	ldr	r0, [r7, #20]
 800474e:	f001 fca7 	bl	80060a0 <vPortFree>
 8004752:	e001      	b.n	8004758 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	2300      	movs	r3, #0
 800476a:	9303      	str	r3, [sp, #12]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	9302      	str	r3, [sp, #8]
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f80e 	bl	800479e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004782:	69f8      	ldr	r0, [r7, #28]
 8004784:	f000 f892 	bl	80048ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004788:	2301      	movs	r3, #1
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e002      	b.n	8004794 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295
 8004792:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004794:	69bb      	ldr	r3, [r7, #24]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b088      	sub	sp, #32
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	21a5      	movs	r1, #165	; 0xa5
 80047b8:	f001 fdc0 	bl	800633c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047c6:	3b01      	subs	r3, #1
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f023 0307 	bic.w	r3, r3, #7
 80047d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	617b      	str	r3, [r7, #20]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	e012      	b.n	8004822 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	7819      	ldrb	r1, [r3, #0]
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	3334      	adds	r3, #52	; 0x34
 800480c:	460a      	mov	r2, r1
 800480e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d9e9      	bls.n	80047fc <prvInitialiseNewTask+0x5e>
 8004828:	e000      	b.n	800482c <prvInitialiseNewTask+0x8e>
		{
			break;
 800482a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	2b37      	cmp	r3, #55	; 0x37
 8004838:	d901      	bls.n	800483e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800483a:	2337      	movs	r3, #55	; 0x37
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004848:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	2200      	movs	r2, #0
 800484e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff f987 	bl	8003b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	3318      	adds	r3, #24
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff f982 	bl	8003b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004868:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004878:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2200      	movs	r2, #0
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	69b8      	ldr	r0, [r7, #24]
 800488e:	f001 f8f5 	bl	8005a7c <pxPortInitialiseStack>
 8004892:	4602      	mov	r2, r0
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a4:	bf00      	nop
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048b4:	f001 fa0e 	bl	8005cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048c2:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048ca:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d110      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048d8:	f000 fc1a 	bl	8005110 <prvInitialiseTaskLists>
 80048dc:	e00d      	b.n	80048fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <prvAddNewTaskToReadyList+0xcc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d802      	bhi.n	80048fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <prvAddNewTaskToReadyList+0xd0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	4a1e      	ldr	r2, [pc, #120]	; (800497c <prvAddNewTaskToReadyList+0xd0>)
 8004902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <prvAddNewTaskToReadyList+0xd0>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <prvAddNewTaskToReadyList+0xd4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d903      	bls.n	8004920 <prvAddNewTaskToReadyList+0x74>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <prvAddNewTaskToReadyList+0xd4>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <prvAddNewTaskToReadyList+0xd8>)
 800492e:	441a      	add	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7ff f923 	bl	8003b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800493c:	f001 f9fa 	bl	8005d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <prvAddNewTaskToReadyList+0xcc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00e      	beq.n	8004966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d207      	bcs.n	8004966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <prvAddNewTaskToReadyList+0xdc>)
 8004958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000d34 	.word	0x20000d34
 8004974:	20000860 	.word	0x20000860
 8004978:	20000d40 	.word	0x20000d40
 800497c:	20000d50 	.word	0x20000d50
 8004980:	20000d3c 	.word	0x20000d3c
 8004984:	20000864 	.word	0x20000864
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d017      	beq.n	80049ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <vTaskDelay+0x60>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <vTaskDelay+0x30>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
}
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049bc:	f000 f880 	bl	8004ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049c0:	2100      	movs	r1, #0
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fcf4 	bl	80053b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049c8:	f000 f888 	bl	8004adc <xTaskResumeAll>
 80049cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <vTaskDelay+0x64>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000d5c 	.word	0x20000d5c
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a02:	463a      	mov	r2, r7
 8004a04:	1d39      	adds	r1, r7, #4
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff f858 	bl	8003ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	9202      	str	r2, [sp, #8]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	460a      	mov	r2, r1
 8004a22:	4921      	ldr	r1, [pc, #132]	; (8004aa8 <vTaskStartScheduler+0xb4>)
 8004a24:	4821      	ldr	r0, [pc, #132]	; (8004aac <vTaskStartScheduler+0xb8>)
 8004a26:	f7ff fe19 	bl	800465c <xTaskCreateStatic>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <vTaskStartScheduler+0xbc>)
 8004a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <vTaskStartScheduler+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e001      	b.n	8004a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d102      	bne.n	8004a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a48:	f000 fd06 	bl	8005458 <xTimerCreateTimerTask>
 8004a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d116      	bne.n	8004a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	613b      	str	r3, [r7, #16]
}
 8004a66:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <vTaskStartScheduler+0xc0>)
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <vTaskStartScheduler+0xc4>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <vTaskStartScheduler+0xc8>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a7c:	f001 f888 	bl	8005b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a80:	e00e      	b.n	8004aa0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d10a      	bne.n	8004aa0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60fb      	str	r3, [r7, #12]
}
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <vTaskStartScheduler+0xaa>
}
 8004aa0:	bf00      	nop
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	08006cc0 	.word	0x08006cc0
 8004aac:	080050e1 	.word	0x080050e1
 8004ab0:	20000d58 	.word	0x20000d58
 8004ab4:	20000d54 	.word	0x20000d54
 8004ab8:	20000d40 	.word	0x20000d40
 8004abc:	20000d38 	.word	0x20000d38

08004ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <vTaskSuspendAll+0x18>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <vTaskSuspendAll+0x18>)
 8004acc:	6013      	str	r3, [r2, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20000d5c 	.word	0x20000d5c

08004adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aea:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	603b      	str	r3, [r7, #0]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b08:	f001 f8e4 	bl	8005cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b0c:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b16:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d162      	bne.n	8004be4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b1e:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <xTaskResumeAll+0x11c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d05e      	beq.n	8004be4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b26:	e02f      	b.n	8004b88 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004b28:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <xTaskResumeAll+0x120>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3318      	adds	r3, #24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f881 	bl	8003c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff f87c 	bl	8003c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <xTaskResumeAll+0x124>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <xTaskResumeAll+0x7c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <xTaskResumeAll+0x124>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <xTaskResumeAll+0x128>)
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7ff f807 	bl	8003b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <xTaskResumeAll+0x12c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <xTaskResumeAll+0x130>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b88:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <xTaskResumeAll+0x120>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1cb      	bne.n	8004b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b96:	f000 fb59 	bl	800524c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <xTaskResumeAll+0x134>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ba6:	f000 f847 	bl	8004c38 <xTaskIncrementTick>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bb0:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <xTaskResumeAll+0x130>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f1      	bne.n	8004ba6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <xTaskResumeAll+0x134>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <xTaskResumeAll+0x130>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <xTaskResumeAll+0x138>)
 8004bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004be4:	f001 f8a6 	bl	8005d34 <vPortExitCritical>

	return xAlreadyYielded;
 8004be8:	68bb      	ldr	r3, [r7, #8]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000d5c 	.word	0x20000d5c
 8004bf8:	20000d34 	.word	0x20000d34
 8004bfc:	20000cf4 	.word	0x20000cf4
 8004c00:	20000d3c 	.word	0x20000d3c
 8004c04:	20000864 	.word	0x20000864
 8004c08:	20000860 	.word	0x20000860
 8004c0c:	20000d48 	.word	0x20000d48
 8004c10:	20000d44 	.word	0x20000d44
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <xTaskGetTickCount+0x1c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c24:	687b      	ldr	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000d38 	.word	0x20000d38

08004c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c42:	4b51      	ldr	r3, [pc, #324]	; (8004d88 <xTaskIncrementTick+0x150>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 808e 	bne.w	8004d68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c4c:	4b4f      	ldr	r3, [pc, #316]	; (8004d8c <xTaskIncrementTick+0x154>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c54:	4a4d      	ldr	r2, [pc, #308]	; (8004d8c <xTaskIncrementTick+0x154>)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d120      	bne.n	8004ca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c60:	4b4b      	ldr	r3, [pc, #300]	; (8004d90 <xTaskIncrementTick+0x158>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	603b      	str	r3, [r7, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <xTaskIncrementTick+0x46>
 8004c80:	4b43      	ldr	r3, [pc, #268]	; (8004d90 <xTaskIncrementTick+0x158>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <xTaskIncrementTick+0x15c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a41      	ldr	r2, [pc, #260]	; (8004d90 <xTaskIncrementTick+0x158>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4a41      	ldr	r2, [pc, #260]	; (8004d94 <xTaskIncrementTick+0x15c>)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4b40      	ldr	r3, [pc, #256]	; (8004d98 <xTaskIncrementTick+0x160>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <xTaskIncrementTick+0x160>)
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	f000 fad5 	bl	800524c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ca2:	4b3e      	ldr	r3, [pc, #248]	; (8004d9c <xTaskIncrementTick+0x164>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d34e      	bcc.n	8004d4a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cac:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <xTaskIncrementTick+0x158>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <xTaskIncrementTick+0x82>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xTaskIncrementTick+0x84>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <xTaskIncrementTick+0x164>)
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc6:	601a      	str	r2, [r3, #0]
					break;
 8004cc8:	e03f      	b.n	8004d4a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <xTaskIncrementTick+0x158>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d203      	bcs.n	8004cea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ce2:	4a2e      	ldr	r2, [pc, #184]	; (8004d9c <xTaskIncrementTick+0x164>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6013      	str	r3, [r2, #0]
						break;
 8004ce8:	e02f      	b.n	8004d4a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe ffa4 	bl	8003c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3318      	adds	r3, #24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe ff9b 	bl	8003c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0a:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <xTaskIncrementTick+0x168>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d903      	bls.n	8004d1a <xTaskIncrementTick+0xe2>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a22      	ldr	r2, [pc, #136]	; (8004da0 <xTaskIncrementTick+0x168>)
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <xTaskIncrementTick+0x16c>)
 8004d28:	441a      	add	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f7fe ff26 	bl	8003b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <xTaskIncrementTick+0x170>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3b3      	bcc.n	8004cac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d48:	e7b0      	b.n	8004cac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <xTaskIncrementTick+0x170>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4914      	ldr	r1, [pc, #80]	; (8004da4 <xTaskIncrementTick+0x16c>)
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d907      	bls.n	8004d72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	e004      	b.n	8004d72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <xTaskIncrementTick+0x174>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a0f      	ldr	r2, [pc, #60]	; (8004dac <xTaskIncrementTick+0x174>)
 8004d70:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <xTaskIncrementTick+0x178>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d7e:	697b      	ldr	r3, [r7, #20]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000d5c 	.word	0x20000d5c
 8004d8c:	20000d38 	.word	0x20000d38
 8004d90:	20000cec 	.word	0x20000cec
 8004d94:	20000cf0 	.word	0x20000cf0
 8004d98:	20000d4c 	.word	0x20000d4c
 8004d9c:	20000d54 	.word	0x20000d54
 8004da0:	20000d3c 	.word	0x20000d3c
 8004da4:	20000864 	.word	0x20000864
 8004da8:	20000860 	.word	0x20000860
 8004dac:	20000d44 	.word	0x20000d44
 8004db0:	20000d48 	.word	0x20000d48

08004db4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dba:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <vTaskSwitchContext+0xa8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dc2:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <vTaskSwitchContext+0xac>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dc8:	e041      	b.n	8004e4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004dca:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <vTaskSwitchContext+0xac>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <vTaskSwitchContext+0xb0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e010      	b.n	8004dfa <vTaskSwitchContext+0x46>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <vTaskSwitchContext+0x3e>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	491b      	ldr	r1, [pc, #108]	; (8004e68 <vTaskSwitchContext+0xb4>)
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0e4      	beq.n	8004dd8 <vTaskSwitchContext+0x24>
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <vTaskSwitchContext+0xb4>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d104      	bne.n	8004e3e <vTaskSwitchContext+0x8a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <vTaskSwitchContext+0xb8>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4a06      	ldr	r2, [pc, #24]	; (8004e64 <vTaskSwitchContext+0xb0>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000d5c 	.word	0x20000d5c
 8004e60:	20000d48 	.word	0x20000d48
 8004e64:	20000d3c 	.word	0x20000d3c
 8004e68:	20000864 	.word	0x20000864
 8004e6c:	20000860 	.word	0x20000860

08004e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <vTaskPlaceOnEventList+0x44>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fe fe93 	bl	8003bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	6838      	ldr	r0, [r7, #0]
 8004ea8:	f000 fa82 	bl	80053b0 <prvAddCurrentTaskToDelayedList>
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000860 	.word	0x20000860

08004eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	617b      	str	r3, [r7, #20]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <vTaskPlaceOnEventListRestricted+0x54>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3318      	adds	r3, #24
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7fe fe4a 	bl	8003b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	68b8      	ldr	r0, [r7, #8]
 8004efe:	f000 fa57 	bl	80053b0 <prvAddCurrentTaskToDelayedList>
	}
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000860 	.word	0x20000860

08004f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60fb      	str	r3, [r7, #12]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3318      	adds	r3, #24
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe fe7b 	bl	8003c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <xTaskRemoveFromEventList+0xb0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d11d      	bne.n	8004f8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fe72 	bl	8003c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <xTaskRemoveFromEventList+0xb4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d903      	bls.n	8004f6c <xTaskRemoveFromEventList+0x5c>
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <xTaskRemoveFromEventList+0xb4>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <xTaskRemoveFromEventList+0xb8>)
 8004f7a:	441a      	add	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f7fe fdfd 	bl	8003b82 <vListInsertEnd>
 8004f88:	e005      	b.n	8004f96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3318      	adds	r3, #24
 8004f8e:	4619      	mov	r1, r3
 8004f90:	480e      	ldr	r0, [pc, #56]	; (8004fcc <xTaskRemoveFromEventList+0xbc>)
 8004f92:	f7fe fdf6 	bl	8003b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <xTaskRemoveFromEventList+0xc0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d905      	bls.n	8004fb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <xTaskRemoveFromEventList+0xc4>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e001      	b.n	8004fb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004fb4:	697b      	ldr	r3, [r7, #20]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000d5c 	.word	0x20000d5c
 8004fc4:	20000d3c 	.word	0x20000d3c
 8004fc8:	20000864 	.word	0x20000864
 8004fcc:	20000cf4 	.word	0x20000cf4
 8004fd0:	20000860 	.word	0x20000860
 8004fd4:	20000d48 	.word	0x20000d48

08004fd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <vTaskInternalSetTimeOutState+0x24>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <vTaskInternalSetTimeOutState+0x28>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	605a      	str	r2, [r3, #4]
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000d4c 	.word	0x20000d4c
 8005000:	20000d38 	.word	0x20000d38

08005004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	613b      	str	r3, [r7, #16]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005046:	f000 fe45 	bl	8005cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <xTaskCheckForTimeOut+0xbc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d102      	bne.n	800506a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e023      	b.n	80050b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <xTaskCheckForTimeOut+0xc0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d007      	beq.n	8005086 <xTaskCheckForTimeOut+0x82>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	e015      	b.n	80050b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	429a      	cmp	r2, r3
 800508e:	d20b      	bcs.n	80050a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff ff9b 	bl	8004fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e004      	b.n	80050b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050b2:	f000 fe3f 	bl	8005d34 <vPortExitCritical>

	return xReturn;
 80050b6:	69fb      	ldr	r3, [r7, #28]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000d38 	.word	0x20000d38
 80050c4:	20000d4c 	.word	0x20000d4c

080050c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <vTaskMissedYield+0x14>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000d48 	.word	0x20000d48

080050e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050e8:	f000 f852 	bl	8005190 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <prvIdleTask+0x28>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d9f9      	bls.n	80050e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <prvIdleTask+0x2c>)
 80050f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005104:	e7f0      	b.n	80050e8 <prvIdleTask+0x8>
 8005106:	bf00      	nop
 8005108:	20000864 	.word	0x20000864
 800510c:	e000ed04 	.word	0xe000ed04

08005110 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	e00c      	b.n	8005136 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <prvInitialiseTaskLists+0x60>)
 8005128:	4413      	add	r3, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fcfc 	bl	8003b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3301      	adds	r3, #1
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b37      	cmp	r3, #55	; 0x37
 800513a:	d9ef      	bls.n	800511c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800513c:	480d      	ldr	r0, [pc, #52]	; (8005174 <prvInitialiseTaskLists+0x64>)
 800513e:	f7fe fcf3 	bl	8003b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005142:	480d      	ldr	r0, [pc, #52]	; (8005178 <prvInitialiseTaskLists+0x68>)
 8005144:	f7fe fcf0 	bl	8003b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005148:	480c      	ldr	r0, [pc, #48]	; (800517c <prvInitialiseTaskLists+0x6c>)
 800514a:	f7fe fced 	bl	8003b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800514e:	480c      	ldr	r0, [pc, #48]	; (8005180 <prvInitialiseTaskLists+0x70>)
 8005150:	f7fe fcea 	bl	8003b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005154:	480b      	ldr	r0, [pc, #44]	; (8005184 <prvInitialiseTaskLists+0x74>)
 8005156:	f7fe fce7 	bl	8003b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <prvInitialiseTaskLists+0x78>)
 800515c:	4a05      	ldr	r2, [pc, #20]	; (8005174 <prvInitialiseTaskLists+0x64>)
 800515e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <prvInitialiseTaskLists+0x7c>)
 8005162:	4a05      	ldr	r2, [pc, #20]	; (8005178 <prvInitialiseTaskLists+0x68>)
 8005164:	601a      	str	r2, [r3, #0]
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000864 	.word	0x20000864
 8005174:	20000cc4 	.word	0x20000cc4
 8005178:	20000cd8 	.word	0x20000cd8
 800517c:	20000cf4 	.word	0x20000cf4
 8005180:	20000d08 	.word	0x20000d08
 8005184:	20000d20 	.word	0x20000d20
 8005188:	20000cec 	.word	0x20000cec
 800518c:	20000cf0 	.word	0x20000cf0

08005190 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005196:	e019      	b.n	80051cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005198:	f000 fd9c 	bl	8005cd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <prvCheckTasksWaitingTermination+0x50>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fe fd47 	bl	8003c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <prvCheckTasksWaitingTermination+0x54>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	4a0b      	ldr	r2, [pc, #44]	; (80051e4 <prvCheckTasksWaitingTermination+0x54>)
 80051b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <prvCheckTasksWaitingTermination+0x58>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3b01      	subs	r3, #1
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <prvCheckTasksWaitingTermination+0x58>)
 80051c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051c2:	f000 fdb7 	bl	8005d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f810 	bl	80051ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <prvCheckTasksWaitingTermination+0x58>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e1      	bne.n	8005198 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000d08 	.word	0x20000d08
 80051e4:	20000d34 	.word	0x20000d34
 80051e8:	20000d1c 	.word	0x20000d1c

080051ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4618      	mov	r0, r3
 8005204:	f000 ff4c 	bl	80060a0 <vPortFree>
				vPortFree( pxTCB );
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 ff49 	bl	80060a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800520e:	e018      	b.n	8005242 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005216:	2b01      	cmp	r3, #1
 8005218:	d103      	bne.n	8005222 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 ff40 	bl	80060a0 <vPortFree>
	}
 8005220:	e00f      	b.n	8005242 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005228:	2b02      	cmp	r3, #2
 800522a:	d00a      	beq.n	8005242 <prvDeleteTCB+0x56>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <prvDeleteTCB+0x54>
	}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005252:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <prvResetNextTaskUnblockTime+0x44>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <prvResetNextTaskUnblockTime+0x14>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <prvResetNextTaskUnblockTime+0x16>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <prvResetNextTaskUnblockTime+0x48>)
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800526e:	e008      	b.n	8005282 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <prvResetNextTaskUnblockTime+0x44>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4a05      	ldr	r2, [pc, #20]	; (8005294 <prvResetNextTaskUnblockTime+0x48>)
 8005280:	6013      	str	r3, [r2, #0]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000cec 	.word	0x20000cec
 8005294:	20000d54 	.word	0x20000d54

08005298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <xTaskGetSchedulerState+0x34>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052a6:	2301      	movs	r3, #1
 80052a8:	607b      	str	r3, [r7, #4]
 80052aa:	e008      	b.n	80052be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <xTaskGetSchedulerState+0x38>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052b4:	2302      	movs	r3, #2
 80052b6:	607b      	str	r3, [r7, #4]
 80052b8:	e001      	b.n	80052be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052be:	687b      	ldr	r3, [r7, #4]
	}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000d40 	.word	0x20000d40
 80052d0:	20000d5c 	.word	0x20000d5c

080052d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d056      	beq.n	8005398 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052ea:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <xTaskPriorityDisinherit+0xd0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d00a      	beq.n	800530a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	60fb      	str	r3, [r7, #12]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60bb      	str	r3, [r7, #8]
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	429a      	cmp	r2, r3
 800533c:	d02c      	beq.n	8005398 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d128      	bne.n	8005398 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3304      	adds	r3, #4
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fc76 	bl	8003c3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <xTaskPriorityDisinherit+0xd4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d903      	bls.n	8005378 <xTaskPriorityDisinherit+0xa4>
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <xTaskPriorityDisinherit+0xd4>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4a09      	ldr	r2, [pc, #36]	; (80053ac <xTaskPriorityDisinherit+0xd8>)
 8005386:	441a      	add	r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7fe fbf7 	bl	8003b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005398:	697b      	ldr	r3, [r7, #20]
	}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000860 	.word	0x20000860
 80053a8:	20000d3c 	.word	0x20000d3c
 80053ac:	20000864 	.word	0x20000864

080053b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053ba:	4b21      	ldr	r3, [pc, #132]	; (8005440 <prvAddCurrentTaskToDelayedList+0x90>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c0:	4b20      	ldr	r3, [pc, #128]	; (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3304      	adds	r3, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fc38 	bl	8003c3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d10a      	bne.n	80053ea <prvAddCurrentTaskToDelayedList+0x3a>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053da:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4819      	ldr	r0, [pc, #100]	; (8005448 <prvAddCurrentTaskToDelayedList+0x98>)
 80053e4:	f7fe fbcd 	bl	8003b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053e8:	e026      	b.n	8005438 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053f2:	4b14      	ldr	r3, [pc, #80]	; (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d209      	bcs.n	8005416 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f7fe fbdb 	bl	8003bca <vListInsert>
}
 8005414:	e010      	b.n	8005438 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005416:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7fe fbd1 	bl	8003bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <prvAddCurrentTaskToDelayedList+0xa4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	429a      	cmp	r2, r3
 8005430:	d202      	bcs.n	8005438 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000d38 	.word	0x20000d38
 8005444:	20000860 	.word	0x20000860
 8005448:	20000d20 	.word	0x20000d20
 800544c:	20000cf0 	.word	0x20000cf0
 8005450:	20000cec 	.word	0x20000cec
 8005454:	20000d54 	.word	0x20000d54

08005458 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005462:	f000 facb 	bl	80059fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005466:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <xTimerCreateTimerTask+0x80>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d021      	beq.n	80054b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005476:	1d3a      	adds	r2, r7, #4
 8005478:	f107 0108 	add.w	r1, r7, #8
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fb37 	bl	8003af4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	9202      	str	r2, [sp, #8]
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	2302      	movs	r3, #2
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	460a      	mov	r2, r1
 8005498:	4910      	ldr	r1, [pc, #64]	; (80054dc <xTimerCreateTimerTask+0x84>)
 800549a:	4811      	ldr	r0, [pc, #68]	; (80054e0 <xTimerCreateTimerTask+0x88>)
 800549c:	f7ff f8de 	bl	800465c <xTaskCreateStatic>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <xTimerCreateTimerTask+0x8c>)
 80054a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054a6:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <xTimerCreateTimerTask+0x8c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054ae:	2301      	movs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	613b      	str	r3, [r7, #16]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054ce:	697b      	ldr	r3, [r7, #20]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000d90 	.word	0x20000d90
 80054dc:	08006cc8 	.word	0x08006cc8
 80054e0:	08005605 	.word	0x08005605
 80054e4:	20000d94 	.word	0x20000d94

080054e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	623b      	str	r3, [r7, #32]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <xTimerGenericCommand+0x98>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d02a      	beq.n	8005574 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b05      	cmp	r3, #5
 800552e:	dc18      	bgt.n	8005562 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005530:	f7ff feb2 	bl	8005298 <xTaskGetSchedulerState>
 8005534:	4603      	mov	r3, r0
 8005536:	2b02      	cmp	r3, #2
 8005538:	d109      	bne.n	800554e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <xTimerGenericCommand+0x98>)
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	f107 0110 	add.w	r1, r7, #16
 8005542:	2300      	movs	r3, #0
 8005544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005546:	f7fe fca5 	bl	8003e94 <xQueueGenericSend>
 800554a:	6278      	str	r0, [r7, #36]	; 0x24
 800554c:	e012      	b.n	8005574 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <xTimerGenericCommand+0x98>)
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f107 0110 	add.w	r1, r7, #16
 8005556:	2300      	movs	r3, #0
 8005558:	2200      	movs	r2, #0
 800555a:	f7fe fc9b 	bl	8003e94 <xQueueGenericSend>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24
 8005560:	e008      	b.n	8005574 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <xTimerGenericCommand+0x98>)
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	f107 0110 	add.w	r1, r7, #16
 800556a:	2300      	movs	r3, #0
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	f7fe fd8f 	bl	8004090 <xQueueGenericSendFromISR>
 8005572:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005576:	4618      	mov	r0, r3
 8005578:	3728      	adds	r7, #40	; 0x28
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000d90 	.word	0x20000d90

08005584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af02      	add	r7, sp, #8
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800558e:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <prvProcessExpiredTimer+0x7c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3304      	adds	r3, #4
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe fb4d 	bl	8003c3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d122      	bne.n	80055f0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	18d1      	adds	r1, r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f000 f8c8 	bl	800574c <prvInsertTimerInActiveList>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055c2:	2300      	movs	r3, #0
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	2100      	movs	r1, #0
 80055cc:	6978      	ldr	r0, [r7, #20]
 80055ce:	f7ff ff8b 	bl	80054e8 <xTimerGenericCommand>
 80055d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	60fb      	str	r3, [r7, #12]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	6978      	ldr	r0, [r7, #20]
 80055f6:	4798      	blx	r3
}
 80055f8:	bf00      	nop
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000d88 	.word	0x20000d88

08005604 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800560c:	f107 0308 	add.w	r3, r7, #8
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f857 	bl	80056c4 <prvGetNextExpireTime>
 8005616:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4619      	mov	r1, r3
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f803 	bl	8005628 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005622:	f000 f8d5 	bl	80057d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005626:	e7f1      	b.n	800560c <prvTimerTask+0x8>

08005628 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005632:	f7ff fa45 	bl	8004ac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005636:	f107 0308 	add.w	r3, r7, #8
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f866 	bl	800570c <prvSampleTimeNow>
 8005640:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d130      	bne.n	80056aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <prvProcessTimerOrBlockTask+0x3c>
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	429a      	cmp	r2, r3
 8005654:	d806      	bhi.n	8005664 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005656:	f7ff fa41 	bl	8004adc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ff91 	bl	8005584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005662:	e024      	b.n	80056ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800566a:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <prvProcessTimerOrBlockTask+0x90>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf0c      	ite	eq
 8005674:	2301      	moveq	r3, #1
 8005676:	2300      	movne	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800567c:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <prvProcessTimerOrBlockTask+0x94>)
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	4619      	mov	r1, r3
 800568a:	f7fe ffb3 	bl	80045f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800568e:	f7ff fa25 	bl	8004adc <xTaskResumeAll>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005698:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <prvProcessTimerOrBlockTask+0x98>)
 800569a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	f3bf 8f6f 	isb	sy
}
 80056a8:	e001      	b.n	80056ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056aa:	f7ff fa17 	bl	8004adc <xTaskResumeAll>
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000d8c 	.word	0x20000d8c
 80056bc:	20000d90 	.word	0x20000d90
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056cc:	4b0e      	ldr	r3, [pc, #56]	; (8005708 <prvGetNextExpireTime+0x44>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ea:	4b07      	ldr	r3, [pc, #28]	; (8005708 <prvGetNextExpireTime+0x44>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e001      	b.n	80056fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056fa:	68fb      	ldr	r3, [r7, #12]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	20000d88 	.word	0x20000d88

0800570c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005714:	f7ff fa80 	bl	8004c18 <xTaskGetTickCount>
 8005718:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <prvSampleTimeNow+0x3c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	429a      	cmp	r2, r3
 8005722:	d205      	bcs.n	8005730 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005724:	f000 f908 	bl	8005938 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e002      	b.n	8005736 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005736:	4a04      	ldr	r2, [pc, #16]	; (8005748 <prvSampleTimeNow+0x3c>)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800573c:	68fb      	ldr	r3, [r7, #12]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000d98 	.word	0x20000d98

0800574c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d812      	bhi.n	8005798 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	429a      	cmp	r2, r3
 800577e:	d302      	bcc.n	8005786 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e01b      	b.n	80057be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <prvInsertTimerInActiveList+0x7c>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fe fa1a 	bl	8003bca <vListInsert>
 8005796:	e012      	b.n	80057be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d206      	bcs.n	80057ae <prvInsertTimerInActiveList+0x62>
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d302      	bcc.n	80057ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e007      	b.n	80057be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <prvInsertTimerInActiveList+0x80>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f7fe fa06 	bl	8003bca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057be:	697b      	ldr	r3, [r7, #20]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000d8c 	.word	0x20000d8c
 80057cc:	20000d88 	.word	0x20000d88

080057d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08e      	sub	sp, #56	; 0x38
 80057d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057d6:	e09d      	b.n	8005914 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da18      	bge.n	8005810 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	3304      	adds	r3, #4
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	61fb      	str	r3, [r7, #28]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005806:	6850      	ldr	r0, [r2, #4]
 8005808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	4611      	mov	r1, r2
 800580e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	db7d      	blt.n	8005912 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	3304      	adds	r3, #4
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fa08 	bl	8003c3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800582c:	463b      	mov	r3, r7
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff ff6c 	bl	800570c <prvSampleTimeNow>
 8005834:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b09      	cmp	r3, #9
 800583a:	d86b      	bhi.n	8005914 <prvProcessReceivedCommands+0x144>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <prvProcessReceivedCommands+0x74>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	0800586d 	.word	0x0800586d
 8005848:	0800586d 	.word	0x0800586d
 800584c:	0800586d 	.word	0x0800586d
 8005850:	08005915 	.word	0x08005915
 8005854:	080058c9 	.word	0x080058c9
 8005858:	08005901 	.word	0x08005901
 800585c:	0800586d 	.word	0x0800586d
 8005860:	0800586d 	.word	0x0800586d
 8005864:	08005915 	.word	0x08005915
 8005868:	080058c9 	.word	0x080058c9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	18d1      	adds	r1, r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587a:	f7ff ff67 	bl	800574c <prvInsertTimerInActiveList>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d047      	beq.n	8005914 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d13f      	bne.n	8005914 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	441a      	add	r2, r3
 800589c:	2300      	movs	r3, #0
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	2300      	movs	r3, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a6:	f7ff fe1f 	bl	80054e8 <xTimerGenericCommand>
 80058aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d130      	bne.n	8005914 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	61bb      	str	r3, [r7, #24]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	617b      	str	r3, [r7, #20]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	18d1      	adds	r1, r2, r3
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fa:	f7ff ff27 	bl	800574c <prvInsertTimerInActiveList>
					break;
 80058fe:	e009      	b.n	8005914 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800590a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590c:	f000 fbc8 	bl	80060a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005910:	e000      	b.n	8005914 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005912:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <prvProcessReceivedCommands+0x164>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	1d39      	adds	r1, r7, #4
 800591a:	2200      	movs	r2, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fc4f 	bl	80041c0 <xQueueReceive>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f af57 	bne.w	80057d8 <prvProcessReceivedCommands+0x8>
	}
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000d90 	.word	0x20000d90

08005938 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800593e:	e045      	b.n	80059cc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005940:	4b2c      	ldr	r3, [pc, #176]	; (80059f4 <prvSwitchTimerLists+0xbc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800594a:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <prvSwitchTimerLists+0xbc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3304      	adds	r3, #4
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe f96f 	bl	8003c3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d12e      	bne.n	80059cc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4413      	add	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	429a      	cmp	r2, r3
 800597e:	d90e      	bls.n	800599e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800598c:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <prvSwitchTimerLists+0xbc>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f7fe f917 	bl	8003bca <vListInsert>
 800599c:	e016      	b.n	80059cc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800599e:	2300      	movs	r3, #0
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	2300      	movs	r3, #0
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	2100      	movs	r1, #0
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff fd9d 	bl	80054e8 <xTimerGenericCommand>
 80059ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <prvSwitchTimerLists+0x94>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	603b      	str	r3, [r7, #0]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <prvSwitchTimerLists+0xbc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1b4      	bne.n	8005940 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <prvSwitchTimerLists+0xbc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <prvSwitchTimerLists+0xc0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <prvSwitchTimerLists+0xbc>)
 80059e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059e4:	4a04      	ldr	r2, [pc, #16]	; (80059f8 <prvSwitchTimerLists+0xc0>)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6013      	str	r3, [r2, #0]
}
 80059ea:	bf00      	nop
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000d88 	.word	0x20000d88
 80059f8:	20000d8c 	.word	0x20000d8c

080059fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a02:	f000 f967 	bl	8005cd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <prvCheckForValidListAndQueue+0x60>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d120      	bne.n	8005a50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a0e:	4814      	ldr	r0, [pc, #80]	; (8005a60 <prvCheckForValidListAndQueue+0x64>)
 8005a10:	f7fe f88a 	bl	8003b28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a14:	4813      	ldr	r0, [pc, #76]	; (8005a64 <prvCheckForValidListAndQueue+0x68>)
 8005a16:	f7fe f887 	bl	8003b28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <prvCheckForValidListAndQueue+0x6c>)
 8005a1c:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <prvCheckForValidListAndQueue+0x64>)
 8005a1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <prvCheckForValidListAndQueue+0x70>)
 8005a22:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <prvCheckForValidListAndQueue+0x68>)
 8005a24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a26:	2300      	movs	r3, #0
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <prvCheckForValidListAndQueue+0x74>)
 8005a2c:	4a11      	ldr	r2, [pc, #68]	; (8005a74 <prvCheckForValidListAndQueue+0x78>)
 8005a2e:	2110      	movs	r1, #16
 8005a30:	200a      	movs	r0, #10
 8005a32:	f7fe f995 	bl	8003d60 <xQueueGenericCreateStatic>
 8005a36:	4603      	mov	r3, r0
 8005a38:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <prvCheckForValidListAndQueue+0x60>)
 8005a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a3c:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <prvCheckForValidListAndQueue+0x60>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <prvCheckForValidListAndQueue+0x60>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	490b      	ldr	r1, [pc, #44]	; (8005a78 <prvCheckForValidListAndQueue+0x7c>)
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fda8 	bl	80045a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a50:	f000 f970 	bl	8005d34 <vPortExitCritical>
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000d90 	.word	0x20000d90
 8005a60:	20000d60 	.word	0x20000d60
 8005a64:	20000d74 	.word	0x20000d74
 8005a68:	20000d88 	.word	0x20000d88
 8005a6c:	20000d8c 	.word	0x20000d8c
 8005a70:	20000e3c 	.word	0x20000e3c
 8005a74:	20000d9c 	.word	0x20000d9c
 8005a78:	08006cd0 	.word	0x08006cd0

08005a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b04      	subs	r3, #4
 8005a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0201 	bic.w	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3b04      	subs	r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005aac:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <pxPortInitialiseStack+0x64>)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3b14      	subs	r3, #20
 8005ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3b04      	subs	r3, #4
 8005ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f06f 0202 	mvn.w	r2, #2
 8005aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3b20      	subs	r3, #32
 8005ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	08005ae5 	.word	0x08005ae5

08005ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <prvTaskExitError+0x54>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d00a      	beq.n	8005b0e <prvTaskExitError+0x2a>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	60fb      	str	r3, [r7, #12]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <prvTaskExitError+0x28>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	60bb      	str	r3, [r7, #8]
}
 8005b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b22:	bf00      	nop
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0fc      	beq.n	8005b24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	00000000 	.word	0x00000000

08005b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <pxCurrentTCBConst2>)
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	6808      	ldr	r0, [r1, #0]
 8005b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	f380 8809 	msr	PSP, r0
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8811 	msr	BASEPRI, r0
 8005b5a:	4770      	bx	lr
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst2>:
 8005b60:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b68:	4808      	ldr	r0, [pc, #32]	; (8005b8c <prvPortStartFirstTask+0x24>)
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	f380 8808 	msr	MSP, r0
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8814 	msr	CONTROL, r0
 8005b7a:	b662      	cpsie	i
 8005b7c:	b661      	cpsie	f
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	df00      	svc	0
 8005b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b8a:	bf00      	nop
 8005b8c:	e000ed08 	.word	0xe000ed08

08005b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b96:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <xPortStartScheduler+0x120>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a46      	ldr	r2, [pc, #280]	; (8005cb4 <xPortStartScheduler+0x124>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10a      	bne.n	8005bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	613b      	str	r3, [r7, #16]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bb6:	4b3e      	ldr	r3, [pc, #248]	; (8005cb0 <xPortStartScheduler+0x120>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a3f      	ldr	r2, [pc, #252]	; (8005cb8 <xPortStartScheduler+0x128>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d10a      	bne.n	8005bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bd6:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <xPortStartScheduler+0x12c>)
 8005bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	22ff      	movs	r2, #255	; 0xff
 8005be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <xPortStartScheduler+0x130>)
 8005bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c04:	e009      	b.n	8005c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c06:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	4a2d      	ldr	r2, [pc, #180]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d0ef      	beq.n	8005c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c26:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1c3 0307 	rsb	r3, r3, #7
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d00a      	beq.n	8005c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60bb      	str	r3, [r7, #8]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c48:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c5a:	4a1a      	ldr	r2, [pc, #104]	; (8005cc4 <xPortStartScheduler+0x134>)
 8005c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <xPortStartScheduler+0x138>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <xPortStartScheduler+0x138>)
 8005c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <xPortStartScheduler+0x138>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a14      	ldr	r2, [pc, #80]	; (8005cc8 <xPortStartScheduler+0x138>)
 8005c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c7e:	f000 f8dd 	bl	8005e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <xPortStartScheduler+0x13c>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c88:	f000 f8fc 	bl	8005e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c8c:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <xPortStartScheduler+0x140>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0f      	ldr	r2, [pc, #60]	; (8005cd0 <xPortStartScheduler+0x140>)
 8005c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c98:	f7ff ff66 	bl	8005b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c9c:	f7ff f88a 	bl	8004db4 <vTaskSwitchContext>
	prvTaskExitError();
 8005ca0:	f7ff ff20 	bl	8005ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	e000ed00 	.word	0xe000ed00
 8005cb4:	410fc271 	.word	0x410fc271
 8005cb8:	410fc270 	.word	0x410fc270
 8005cbc:	e000e400 	.word	0xe000e400
 8005cc0:	20000e8c 	.word	0x20000e8c
 8005cc4:	20000e90 	.word	0x20000e90
 8005cc8:	e000ed20 	.word	0xe000ed20
 8005ccc:	2000000c 	.word	0x2000000c
 8005cd0:	e000ef34 	.word	0xe000ef34

08005cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	607b      	str	r3, [r7, #4]
}
 8005cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cee:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <vPortEnterCritical+0x58>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <vPortEnterCritical+0x58>)
 8005cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <vPortEnterCritical+0x58>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d10f      	bne.n	8005d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <vPortEnterCritical+0x5c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	603b      	str	r3, [r7, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <vPortEnterCritical+0x4a>
	}
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	2000000c 	.word	0x2000000c
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <vPortExitCritical+0x50>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <vPortExitCritical+0x24>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	607b      	str	r3, [r7, #4]
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <vPortExitCritical+0x50>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <vPortExitCritical+0x50>)
 8005d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <vPortExitCritical+0x50>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <vPortExitCritical+0x42>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	f383 8811 	msr	BASEPRI, r3
}
 8005d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	2000000c 	.word	0x2000000c
	...

08005d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d90:	f3ef 8009 	mrs	r0, PSP
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <pxCurrentTCBConst>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f01e 0f10 	tst.w	lr, #16
 8005da0:	bf08      	it	eq
 8005da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005db4:	f380 8811 	msr	BASEPRI, r0
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f7fe fff8 	bl	8004db4 <vTaskSwitchContext>
 8005dc4:	f04f 0000 	mov.w	r0, #0
 8005dc8:	f380 8811 	msr	BASEPRI, r0
 8005dcc:	bc09      	pop	{r0, r3}
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd6:	f01e 0f10 	tst.w	lr, #16
 8005dda:	bf08      	it	eq
 8005ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005de0:	f380 8809 	msr	PSP, r0
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w

08005df0 <pxCurrentTCBConst>:
 8005df0:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop

08005df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
}
 8005e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e12:	f7fe ff11 	bl	8004c38 <xTaskIncrementTick>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <SysTick_Handler+0x40>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	2300      	movs	r3, #0
 8005e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	f383 8811 	msr	BASEPRI, r3
}
 8005e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <vPortSetupTimerInterrupt+0x34>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <vPortSetupTimerInterrupt+0x38>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <vPortSetupTimerInterrupt+0x3c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <vPortSetupTimerInterrupt+0x40>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	099b      	lsrs	r3, r3, #6
 8005e58:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <vPortSetupTimerInterrupt+0x44>)
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e5e:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <vPortSetupTimerInterrupt+0x34>)
 8005e60:	2207      	movs	r2, #7
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	e000e010 	.word	0xe000e010
 8005e74:	e000e018 	.word	0xe000e018
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	10624dd3 	.word	0x10624dd3
 8005e80:	e000e014 	.word	0xe000e014

08005e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e94 <vPortEnableVFP+0x10>
 8005e88:	6801      	ldr	r1, [r0, #0]
 8005e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e8e:	6001      	str	r1, [r0, #0]
 8005e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e92:	bf00      	nop
 8005e94:	e000ed88 	.word	0xe000ed88

08005e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e9e:	f3ef 8305 	mrs	r3, IPSR
 8005ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d914      	bls.n	8005ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eaa:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <vPortValidateInterruptPriority+0x70>)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005eb4:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <vPortValidateInterruptPriority+0x74>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	7afa      	ldrb	r2, [r7, #11]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d20a      	bcs.n	8005ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	607b      	str	r3, [r7, #4]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <vPortValidateInterruptPriority+0x78>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005edc:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <vPortValidateInterruptPriority+0x7c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d90a      	bls.n	8005efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	603b      	str	r3, [r7, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <vPortValidateInterruptPriority+0x60>
	}
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	e000e3f0 	.word	0xe000e3f0
 8005f0c:	20000e8c 	.word	0x20000e8c
 8005f10:	e000ed0c 	.word	0xe000ed0c
 8005f14:	20000e90 	.word	0x20000e90

08005f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f24:	f7fe fdcc 	bl	8004ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f28:	4b58      	ldr	r3, [pc, #352]	; (800608c <pvPortMalloc+0x174>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f30:	f000 f910 	bl	8006154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f34:	4b56      	ldr	r3, [pc, #344]	; (8006090 <pvPortMalloc+0x178>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f040 808e 	bne.w	800605e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01d      	beq.n	8005f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f48:	2208      	movs	r2, #8
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d014      	beq.n	8005f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f023 0307 	bic.w	r3, r3, #7
 8005f60:	3308      	adds	r3, #8
 8005f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <pvPortMalloc+0x6c>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	617b      	str	r3, [r7, #20]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d069      	beq.n	800605e <pvPortMalloc+0x146>
 8005f8a:	4b42      	ldr	r3, [pc, #264]	; (8006094 <pvPortMalloc+0x17c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d864      	bhi.n	800605e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f94:	4b40      	ldr	r3, [pc, #256]	; (8006098 <pvPortMalloc+0x180>)
 8005f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f98:	4b3f      	ldr	r3, [pc, #252]	; (8006098 <pvPortMalloc+0x180>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f9e:	e004      	b.n	8005faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d903      	bls.n	8005fbc <pvPortMalloc+0xa4>
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f1      	bne.n	8005fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fbc:	4b33      	ldr	r3, [pc, #204]	; (800608c <pvPortMalloc+0x174>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d04b      	beq.n	800605e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2208      	movs	r2, #8
 8005fcc:	4413      	add	r3, r2
 8005fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d91f      	bls.n	8006028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <pvPortMalloc+0xf8>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	613b      	str	r3, [r7, #16]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	1ad2      	subs	r2, r2, r3
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006022:	69b8      	ldr	r0, [r7, #24]
 8006024:	f000 f8f8 	bl	8006218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <pvPortMalloc+0x17c>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a18      	ldr	r2, [pc, #96]	; (8006094 <pvPortMalloc+0x17c>)
 8006034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006036:	4b17      	ldr	r3, [pc, #92]	; (8006094 <pvPortMalloc+0x17c>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b18      	ldr	r3, [pc, #96]	; (800609c <pvPortMalloc+0x184>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d203      	bcs.n	800604a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <pvPortMalloc+0x17c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a15      	ldr	r2, [pc, #84]	; (800609c <pvPortMalloc+0x184>)
 8006048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <pvPortMalloc+0x178>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	431a      	orrs	r2, r3
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800605e:	f7fe fd3d 	bl	8004adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <pvPortMalloc+0x16a>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	60fb      	str	r3, [r7, #12]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <pvPortMalloc+0x168>
	return pvReturn;
 8006082:	69fb      	ldr	r3, [r7, #28]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3728      	adds	r7, #40	; 0x28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20001a9c 	.word	0x20001a9c
 8006090:	20001aa8 	.word	0x20001aa8
 8006094:	20001aa0 	.word	0x20001aa0
 8006098:	20001a94 	.word	0x20001a94
 800609c:	20001aa4 	.word	0x20001aa4

080060a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d048      	beq.n	8006144 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060b2:	2308      	movs	r3, #8
 80060b4:	425b      	negs	r3, r3
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	4b21      	ldr	r3, [pc, #132]	; (800614c <vPortFree+0xac>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <vPortFree+0x44>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	60fb      	str	r3, [r7, #12]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <vPortFree+0x62>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60bb      	str	r3, [r7, #8]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <vPortFree+0xac>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d019      	beq.n	8006144 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d115      	bne.n	8006144 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <vPortFree+0xac>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	43db      	mvns	r3, r3
 8006122:	401a      	ands	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006128:	f7fe fcca 	bl	8004ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <vPortFree+0xb0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4413      	add	r3, r2
 8006136:	4a06      	ldr	r2, [pc, #24]	; (8006150 <vPortFree+0xb0>)
 8006138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800613a:	6938      	ldr	r0, [r7, #16]
 800613c:	f000 f86c 	bl	8006218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006140:	f7fe fccc 	bl	8004adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006144:	bf00      	nop
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20001aa8 	.word	0x20001aa8
 8006150:	20001aa0 	.word	0x20001aa0

08006154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800615a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800615e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006160:	4b27      	ldr	r3, [pc, #156]	; (8006200 <prvHeapInit+0xac>)
 8006162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3307      	adds	r3, #7
 8006172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0307 	bic.w	r3, r3, #7
 800617a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <prvHeapInit+0xac>)
 8006184:	4413      	add	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800618c:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <prvHeapInit+0xb0>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <prvHeapInit+0xb0>)
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4413      	add	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061a0:	2208      	movs	r2, #8
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0307 	bic.w	r3, r3, #7
 80061ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <prvHeapInit+0xb4>)
 80061b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <prvHeapInit+0xb4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2200      	movs	r2, #0
 80061bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <prvHeapInit+0xb4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvHeapInit+0xb4>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4a0a      	ldr	r2, [pc, #40]	; (800620c <prvHeapInit+0xb8>)
 80061e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4a09      	ldr	r2, [pc, #36]	; (8006210 <prvHeapInit+0xbc>)
 80061ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061ec:	4b09      	ldr	r3, [pc, #36]	; (8006214 <prvHeapInit+0xc0>)
 80061ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000e94 	.word	0x20000e94
 8006204:	20001a94 	.word	0x20001a94
 8006208:	20001a9c 	.word	0x20001a9c
 800620c:	20001aa4 	.word	0x20001aa4
 8006210:	20001aa0 	.word	0x20001aa0
 8006214:	20001aa8 	.word	0x20001aa8

08006218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006220:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <prvInsertBlockIntoFreeList+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e002      	b.n	800622c <prvInsertBlockIntoFreeList+0x14>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	d8f7      	bhi.n	8006226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4413      	add	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	d108      	bne.n	800625a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	441a      	add	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d118      	bne.n	80062a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d00d      	beq.n	8006296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	441a      	add	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e008      	b.n	80062a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e003      	b.n	80062a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d002      	beq.n	80062b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20001a94 	.word	0x20001a94
 80062c8:	20001a9c 	.word	0x20001a9c

080062cc <__errno>:
 80062cc:	4b01      	ldr	r3, [pc, #4]	; (80062d4 <__errno+0x8>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000010 	.word	0x20000010

080062d8 <__libc_init_array>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4d0d      	ldr	r5, [pc, #52]	; (8006310 <__libc_init_array+0x38>)
 80062dc:	4c0d      	ldr	r4, [pc, #52]	; (8006314 <__libc_init_array+0x3c>)
 80062de:	1b64      	subs	r4, r4, r5
 80062e0:	10a4      	asrs	r4, r4, #2
 80062e2:	2600      	movs	r6, #0
 80062e4:	42a6      	cmp	r6, r4
 80062e6:	d109      	bne.n	80062fc <__libc_init_array+0x24>
 80062e8:	4d0b      	ldr	r5, [pc, #44]	; (8006318 <__libc_init_array+0x40>)
 80062ea:	4c0c      	ldr	r4, [pc, #48]	; (800631c <__libc_init_array+0x44>)
 80062ec:	f000 fc68 	bl	8006bc0 <_init>
 80062f0:	1b64      	subs	r4, r4, r5
 80062f2:	10a4      	asrs	r4, r4, #2
 80062f4:	2600      	movs	r6, #0
 80062f6:	42a6      	cmp	r6, r4
 80062f8:	d105      	bne.n	8006306 <__libc_init_array+0x2e>
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006300:	4798      	blx	r3
 8006302:	3601      	adds	r6, #1
 8006304:	e7ee      	b.n	80062e4 <__libc_init_array+0xc>
 8006306:	f855 3b04 	ldr.w	r3, [r5], #4
 800630a:	4798      	blx	r3
 800630c:	3601      	adds	r6, #1
 800630e:	e7f2      	b.n	80062f6 <__libc_init_array+0x1e>
 8006310:	08006db0 	.word	0x08006db0
 8006314:	08006db0 	.word	0x08006db0
 8006318:	08006db0 	.word	0x08006db0
 800631c:	08006db4 	.word	0x08006db4

08006320 <memcpy>:
 8006320:	440a      	add	r2, r1
 8006322:	4291      	cmp	r1, r2
 8006324:	f100 33ff 	add.w	r3, r0, #4294967295
 8006328:	d100      	bne.n	800632c <memcpy+0xc>
 800632a:	4770      	bx	lr
 800632c:	b510      	push	{r4, lr}
 800632e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006336:	4291      	cmp	r1, r2
 8006338:	d1f9      	bne.n	800632e <memcpy+0xe>
 800633a:	bd10      	pop	{r4, pc}

0800633c <memset>:
 800633c:	4402      	add	r2, r0
 800633e:	4603      	mov	r3, r0
 8006340:	4293      	cmp	r3, r2
 8006342:	d100      	bne.n	8006346 <memset+0xa>
 8006344:	4770      	bx	lr
 8006346:	f803 1b01 	strb.w	r1, [r3], #1
 800634a:	e7f9      	b.n	8006340 <memset+0x4>

0800634c <_vsniprintf_r>:
 800634c:	b530      	push	{r4, r5, lr}
 800634e:	1e14      	subs	r4, r2, #0
 8006350:	4605      	mov	r5, r0
 8006352:	b09b      	sub	sp, #108	; 0x6c
 8006354:	4618      	mov	r0, r3
 8006356:	da05      	bge.n	8006364 <_vsniprintf_r+0x18>
 8006358:	238b      	movs	r3, #139	; 0x8b
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	b01b      	add	sp, #108	; 0x6c
 8006362:	bd30      	pop	{r4, r5, pc}
 8006364:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006368:	f8ad 300c 	strh.w	r3, [sp, #12]
 800636c:	bf14      	ite	ne
 800636e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006372:	4623      	moveq	r3, r4
 8006374:	9302      	str	r3, [sp, #8]
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800637c:	9100      	str	r1, [sp, #0]
 800637e:	9104      	str	r1, [sp, #16]
 8006380:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006384:	4602      	mov	r2, r0
 8006386:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006388:	4669      	mov	r1, sp
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f874 	bl	8006478 <_svfiprintf_r>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	bfbc      	itt	lt
 8006394:	238b      	movlt	r3, #139	; 0x8b
 8006396:	602b      	strlt	r3, [r5, #0]
 8006398:	2c00      	cmp	r4, #0
 800639a:	d0e1      	beq.n	8006360 <_vsniprintf_r+0x14>
 800639c:	9b00      	ldr	r3, [sp, #0]
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e7dd      	b.n	8006360 <_vsniprintf_r+0x14>

080063a4 <vsniprintf>:
 80063a4:	b507      	push	{r0, r1, r2, lr}
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	460a      	mov	r2, r1
 80063ac:	4601      	mov	r1, r0
 80063ae:	4803      	ldr	r0, [pc, #12]	; (80063bc <vsniprintf+0x18>)
 80063b0:	6800      	ldr	r0, [r0, #0]
 80063b2:	f7ff ffcb 	bl	800634c <_vsniprintf_r>
 80063b6:	b003      	add	sp, #12
 80063b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80063bc:	20000010 	.word	0x20000010

080063c0 <__ssputs_r>:
 80063c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	688e      	ldr	r6, [r1, #8]
 80063c6:	429e      	cmp	r6, r3
 80063c8:	4682      	mov	sl, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4690      	mov	r8, r2
 80063ce:	461f      	mov	r7, r3
 80063d0:	d838      	bhi.n	8006444 <__ssputs_r+0x84>
 80063d2:	898a      	ldrh	r2, [r1, #12]
 80063d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063d8:	d032      	beq.n	8006440 <__ssputs_r+0x80>
 80063da:	6825      	ldr	r5, [r4, #0]
 80063dc:	6909      	ldr	r1, [r1, #16]
 80063de:	eba5 0901 	sub.w	r9, r5, r1
 80063e2:	6965      	ldr	r5, [r4, #20]
 80063e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063ec:	3301      	adds	r3, #1
 80063ee:	444b      	add	r3, r9
 80063f0:	106d      	asrs	r5, r5, #1
 80063f2:	429d      	cmp	r5, r3
 80063f4:	bf38      	it	cc
 80063f6:	461d      	movcc	r5, r3
 80063f8:	0553      	lsls	r3, r2, #21
 80063fa:	d531      	bpl.n	8006460 <__ssputs_r+0xa0>
 80063fc:	4629      	mov	r1, r5
 80063fe:	f000 fb39 	bl	8006a74 <_malloc_r>
 8006402:	4606      	mov	r6, r0
 8006404:	b950      	cbnz	r0, 800641c <__ssputs_r+0x5c>
 8006406:	230c      	movs	r3, #12
 8006408:	f8ca 3000 	str.w	r3, [sl]
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006412:	81a3      	strh	r3, [r4, #12]
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641c:	6921      	ldr	r1, [r4, #16]
 800641e:	464a      	mov	r2, r9
 8006420:	f7ff ff7e 	bl	8006320 <memcpy>
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800642a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642e:	81a3      	strh	r3, [r4, #12]
 8006430:	6126      	str	r6, [r4, #16]
 8006432:	6165      	str	r5, [r4, #20]
 8006434:	444e      	add	r6, r9
 8006436:	eba5 0509 	sub.w	r5, r5, r9
 800643a:	6026      	str	r6, [r4, #0]
 800643c:	60a5      	str	r5, [r4, #8]
 800643e:	463e      	mov	r6, r7
 8006440:	42be      	cmp	r6, r7
 8006442:	d900      	bls.n	8006446 <__ssputs_r+0x86>
 8006444:	463e      	mov	r6, r7
 8006446:	4632      	mov	r2, r6
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	4641      	mov	r1, r8
 800644c:	f000 faa8 	bl	80069a0 <memmove>
 8006450:	68a3      	ldr	r3, [r4, #8]
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	1b9b      	subs	r3, r3, r6
 8006456:	4432      	add	r2, r6
 8006458:	60a3      	str	r3, [r4, #8]
 800645a:	6022      	str	r2, [r4, #0]
 800645c:	2000      	movs	r0, #0
 800645e:	e7db      	b.n	8006418 <__ssputs_r+0x58>
 8006460:	462a      	mov	r2, r5
 8006462:	f000 fb61 	bl	8006b28 <_realloc_r>
 8006466:	4606      	mov	r6, r0
 8006468:	2800      	cmp	r0, #0
 800646a:	d1e1      	bne.n	8006430 <__ssputs_r+0x70>
 800646c:	6921      	ldr	r1, [r4, #16]
 800646e:	4650      	mov	r0, sl
 8006470:	f000 fab0 	bl	80069d4 <_free_r>
 8006474:	e7c7      	b.n	8006406 <__ssputs_r+0x46>
	...

08006478 <_svfiprintf_r>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	4698      	mov	r8, r3
 800647e:	898b      	ldrh	r3, [r1, #12]
 8006480:	061b      	lsls	r3, r3, #24
 8006482:	b09d      	sub	sp, #116	; 0x74
 8006484:	4607      	mov	r7, r0
 8006486:	460d      	mov	r5, r1
 8006488:	4614      	mov	r4, r2
 800648a:	d50e      	bpl.n	80064aa <_svfiprintf_r+0x32>
 800648c:	690b      	ldr	r3, [r1, #16]
 800648e:	b963      	cbnz	r3, 80064aa <_svfiprintf_r+0x32>
 8006490:	2140      	movs	r1, #64	; 0x40
 8006492:	f000 faef 	bl	8006a74 <_malloc_r>
 8006496:	6028      	str	r0, [r5, #0]
 8006498:	6128      	str	r0, [r5, #16]
 800649a:	b920      	cbnz	r0, 80064a6 <_svfiprintf_r+0x2e>
 800649c:	230c      	movs	r3, #12
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	e0d1      	b.n	800664a <_svfiprintf_r+0x1d2>
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	616b      	str	r3, [r5, #20]
 80064aa:	2300      	movs	r3, #0
 80064ac:	9309      	str	r3, [sp, #36]	; 0x24
 80064ae:	2320      	movs	r3, #32
 80064b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b8:	2330      	movs	r3, #48	; 0x30
 80064ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006664 <_svfiprintf_r+0x1ec>
 80064be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064c2:	f04f 0901 	mov.w	r9, #1
 80064c6:	4623      	mov	r3, r4
 80064c8:	469a      	mov	sl, r3
 80064ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ce:	b10a      	cbz	r2, 80064d4 <_svfiprintf_r+0x5c>
 80064d0:	2a25      	cmp	r2, #37	; 0x25
 80064d2:	d1f9      	bne.n	80064c8 <_svfiprintf_r+0x50>
 80064d4:	ebba 0b04 	subs.w	fp, sl, r4
 80064d8:	d00b      	beq.n	80064f2 <_svfiprintf_r+0x7a>
 80064da:	465b      	mov	r3, fp
 80064dc:	4622      	mov	r2, r4
 80064de:	4629      	mov	r1, r5
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff ff6d 	bl	80063c0 <__ssputs_r>
 80064e6:	3001      	adds	r0, #1
 80064e8:	f000 80aa 	beq.w	8006640 <_svfiprintf_r+0x1c8>
 80064ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ee:	445a      	add	r2, fp
 80064f0:	9209      	str	r2, [sp, #36]	; 0x24
 80064f2:	f89a 3000 	ldrb.w	r3, [sl]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80a2 	beq.w	8006640 <_svfiprintf_r+0x1c8>
 80064fc:	2300      	movs	r3, #0
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006506:	f10a 0a01 	add.w	sl, sl, #1
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	9307      	str	r3, [sp, #28]
 800650e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006512:	931a      	str	r3, [sp, #104]	; 0x68
 8006514:	4654      	mov	r4, sl
 8006516:	2205      	movs	r2, #5
 8006518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651c:	4851      	ldr	r0, [pc, #324]	; (8006664 <_svfiprintf_r+0x1ec>)
 800651e:	f7f9 fe67 	bl	80001f0 <memchr>
 8006522:	9a04      	ldr	r2, [sp, #16]
 8006524:	b9d8      	cbnz	r0, 800655e <_svfiprintf_r+0xe6>
 8006526:	06d0      	lsls	r0, r2, #27
 8006528:	bf44      	itt	mi
 800652a:	2320      	movmi	r3, #32
 800652c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006530:	0711      	lsls	r1, r2, #28
 8006532:	bf44      	itt	mi
 8006534:	232b      	movmi	r3, #43	; 0x2b
 8006536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800653a:	f89a 3000 	ldrb.w	r3, [sl]
 800653e:	2b2a      	cmp	r3, #42	; 0x2a
 8006540:	d015      	beq.n	800656e <_svfiprintf_r+0xf6>
 8006542:	9a07      	ldr	r2, [sp, #28]
 8006544:	4654      	mov	r4, sl
 8006546:	2000      	movs	r0, #0
 8006548:	f04f 0c0a 	mov.w	ip, #10
 800654c:	4621      	mov	r1, r4
 800654e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006552:	3b30      	subs	r3, #48	; 0x30
 8006554:	2b09      	cmp	r3, #9
 8006556:	d94e      	bls.n	80065f6 <_svfiprintf_r+0x17e>
 8006558:	b1b0      	cbz	r0, 8006588 <_svfiprintf_r+0x110>
 800655a:	9207      	str	r2, [sp, #28]
 800655c:	e014      	b.n	8006588 <_svfiprintf_r+0x110>
 800655e:	eba0 0308 	sub.w	r3, r0, r8
 8006562:	fa09 f303 	lsl.w	r3, r9, r3
 8006566:	4313      	orrs	r3, r2
 8006568:	9304      	str	r3, [sp, #16]
 800656a:	46a2      	mov	sl, r4
 800656c:	e7d2      	b.n	8006514 <_svfiprintf_r+0x9c>
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	1d19      	adds	r1, r3, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	9103      	str	r1, [sp, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	bfbb      	ittet	lt
 800657a:	425b      	neglt	r3, r3
 800657c:	f042 0202 	orrlt.w	r2, r2, #2
 8006580:	9307      	strge	r3, [sp, #28]
 8006582:	9307      	strlt	r3, [sp, #28]
 8006584:	bfb8      	it	lt
 8006586:	9204      	strlt	r2, [sp, #16]
 8006588:	7823      	ldrb	r3, [r4, #0]
 800658a:	2b2e      	cmp	r3, #46	; 0x2e
 800658c:	d10c      	bne.n	80065a8 <_svfiprintf_r+0x130>
 800658e:	7863      	ldrb	r3, [r4, #1]
 8006590:	2b2a      	cmp	r3, #42	; 0x2a
 8006592:	d135      	bne.n	8006600 <_svfiprintf_r+0x188>
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	1d1a      	adds	r2, r3, #4
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	9203      	str	r2, [sp, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	bfb8      	it	lt
 80065a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80065a4:	3402      	adds	r4, #2
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006674 <_svfiprintf_r+0x1fc>
 80065ac:	7821      	ldrb	r1, [r4, #0]
 80065ae:	2203      	movs	r2, #3
 80065b0:	4650      	mov	r0, sl
 80065b2:	f7f9 fe1d 	bl	80001f0 <memchr>
 80065b6:	b140      	cbz	r0, 80065ca <_svfiprintf_r+0x152>
 80065b8:	2340      	movs	r3, #64	; 0x40
 80065ba:	eba0 000a 	sub.w	r0, r0, sl
 80065be:	fa03 f000 	lsl.w	r0, r3, r0
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	4303      	orrs	r3, r0
 80065c6:	3401      	adds	r4, #1
 80065c8:	9304      	str	r3, [sp, #16]
 80065ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ce:	4826      	ldr	r0, [pc, #152]	; (8006668 <_svfiprintf_r+0x1f0>)
 80065d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065d4:	2206      	movs	r2, #6
 80065d6:	f7f9 fe0b 	bl	80001f0 <memchr>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d038      	beq.n	8006650 <_svfiprintf_r+0x1d8>
 80065de:	4b23      	ldr	r3, [pc, #140]	; (800666c <_svfiprintf_r+0x1f4>)
 80065e0:	bb1b      	cbnz	r3, 800662a <_svfiprintf_r+0x1b2>
 80065e2:	9b03      	ldr	r3, [sp, #12]
 80065e4:	3307      	adds	r3, #7
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	3308      	adds	r3, #8
 80065ec:	9303      	str	r3, [sp, #12]
 80065ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f0:	4433      	add	r3, r6
 80065f2:	9309      	str	r3, [sp, #36]	; 0x24
 80065f4:	e767      	b.n	80064c6 <_svfiprintf_r+0x4e>
 80065f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065fa:	460c      	mov	r4, r1
 80065fc:	2001      	movs	r0, #1
 80065fe:	e7a5      	b.n	800654c <_svfiprintf_r+0xd4>
 8006600:	2300      	movs	r3, #0
 8006602:	3401      	adds	r4, #1
 8006604:	9305      	str	r3, [sp, #20]
 8006606:	4619      	mov	r1, r3
 8006608:	f04f 0c0a 	mov.w	ip, #10
 800660c:	4620      	mov	r0, r4
 800660e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006612:	3a30      	subs	r2, #48	; 0x30
 8006614:	2a09      	cmp	r2, #9
 8006616:	d903      	bls.n	8006620 <_svfiprintf_r+0x1a8>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0c5      	beq.n	80065a8 <_svfiprintf_r+0x130>
 800661c:	9105      	str	r1, [sp, #20]
 800661e:	e7c3      	b.n	80065a8 <_svfiprintf_r+0x130>
 8006620:	fb0c 2101 	mla	r1, ip, r1, r2
 8006624:	4604      	mov	r4, r0
 8006626:	2301      	movs	r3, #1
 8006628:	e7f0      	b.n	800660c <_svfiprintf_r+0x194>
 800662a:	ab03      	add	r3, sp, #12
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	462a      	mov	r2, r5
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <_svfiprintf_r+0x1f8>)
 8006632:	a904      	add	r1, sp, #16
 8006634:	4638      	mov	r0, r7
 8006636:	f3af 8000 	nop.w
 800663a:	1c42      	adds	r2, r0, #1
 800663c:	4606      	mov	r6, r0
 800663e:	d1d6      	bne.n	80065ee <_svfiprintf_r+0x176>
 8006640:	89ab      	ldrh	r3, [r5, #12]
 8006642:	065b      	lsls	r3, r3, #25
 8006644:	f53f af2c 	bmi.w	80064a0 <_svfiprintf_r+0x28>
 8006648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800664a:	b01d      	add	sp, #116	; 0x74
 800664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006650:	ab03      	add	r3, sp, #12
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	462a      	mov	r2, r5
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <_svfiprintf_r+0x1f8>)
 8006658:	a904      	add	r1, sp, #16
 800665a:	4638      	mov	r0, r7
 800665c:	f000 f87a 	bl	8006754 <_printf_i>
 8006660:	e7eb      	b.n	800663a <_svfiprintf_r+0x1c2>
 8006662:	bf00      	nop
 8006664:	08006d7c 	.word	0x08006d7c
 8006668:	08006d86 	.word	0x08006d86
 800666c:	00000000 	.word	0x00000000
 8006670:	080063c1 	.word	0x080063c1
 8006674:	08006d82 	.word	0x08006d82

08006678 <_printf_common>:
 8006678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	4616      	mov	r6, r2
 800667e:	4699      	mov	r9, r3
 8006680:	688a      	ldr	r2, [r1, #8]
 8006682:	690b      	ldr	r3, [r1, #16]
 8006684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006688:	4293      	cmp	r3, r2
 800668a:	bfb8      	it	lt
 800668c:	4613      	movlt	r3, r2
 800668e:	6033      	str	r3, [r6, #0]
 8006690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006694:	4607      	mov	r7, r0
 8006696:	460c      	mov	r4, r1
 8006698:	b10a      	cbz	r2, 800669e <_printf_common+0x26>
 800669a:	3301      	adds	r3, #1
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	0699      	lsls	r1, r3, #26
 80066a2:	bf42      	ittt	mi
 80066a4:	6833      	ldrmi	r3, [r6, #0]
 80066a6:	3302      	addmi	r3, #2
 80066a8:	6033      	strmi	r3, [r6, #0]
 80066aa:	6825      	ldr	r5, [r4, #0]
 80066ac:	f015 0506 	ands.w	r5, r5, #6
 80066b0:	d106      	bne.n	80066c0 <_printf_common+0x48>
 80066b2:	f104 0a19 	add.w	sl, r4, #25
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	6832      	ldr	r2, [r6, #0]
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dc26      	bgt.n	800670e <_printf_common+0x96>
 80066c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066c4:	1e13      	subs	r3, r2, #0
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	bf18      	it	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	0692      	lsls	r2, r2, #26
 80066ce:	d42b      	bmi.n	8006728 <_printf_common+0xb0>
 80066d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066d4:	4649      	mov	r1, r9
 80066d6:	4638      	mov	r0, r7
 80066d8:	47c0      	blx	r8
 80066da:	3001      	adds	r0, #1
 80066dc:	d01e      	beq.n	800671c <_printf_common+0xa4>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	68e5      	ldr	r5, [r4, #12]
 80066e2:	6832      	ldr	r2, [r6, #0]
 80066e4:	f003 0306 	and.w	r3, r3, #6
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	bf08      	it	eq
 80066ec:	1aad      	subeq	r5, r5, r2
 80066ee:	68a3      	ldr	r3, [r4, #8]
 80066f0:	6922      	ldr	r2, [r4, #16]
 80066f2:	bf0c      	ite	eq
 80066f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f8:	2500      	movne	r5, #0
 80066fa:	4293      	cmp	r3, r2
 80066fc:	bfc4      	itt	gt
 80066fe:	1a9b      	subgt	r3, r3, r2
 8006700:	18ed      	addgt	r5, r5, r3
 8006702:	2600      	movs	r6, #0
 8006704:	341a      	adds	r4, #26
 8006706:	42b5      	cmp	r5, r6
 8006708:	d11a      	bne.n	8006740 <_printf_common+0xc8>
 800670a:	2000      	movs	r0, #0
 800670c:	e008      	b.n	8006720 <_printf_common+0xa8>
 800670e:	2301      	movs	r3, #1
 8006710:	4652      	mov	r2, sl
 8006712:	4649      	mov	r1, r9
 8006714:	4638      	mov	r0, r7
 8006716:	47c0      	blx	r8
 8006718:	3001      	adds	r0, #1
 800671a:	d103      	bne.n	8006724 <_printf_common+0xac>
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006724:	3501      	adds	r5, #1
 8006726:	e7c6      	b.n	80066b6 <_printf_common+0x3e>
 8006728:	18e1      	adds	r1, r4, r3
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	2030      	movs	r0, #48	; 0x30
 800672e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006732:	4422      	add	r2, r4
 8006734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800673c:	3302      	adds	r3, #2
 800673e:	e7c7      	b.n	80066d0 <_printf_common+0x58>
 8006740:	2301      	movs	r3, #1
 8006742:	4622      	mov	r2, r4
 8006744:	4649      	mov	r1, r9
 8006746:	4638      	mov	r0, r7
 8006748:	47c0      	blx	r8
 800674a:	3001      	adds	r0, #1
 800674c:	d0e6      	beq.n	800671c <_printf_common+0xa4>
 800674e:	3601      	adds	r6, #1
 8006750:	e7d9      	b.n	8006706 <_printf_common+0x8e>
	...

08006754 <_printf_i>:
 8006754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	460c      	mov	r4, r1
 800675a:	4691      	mov	r9, r2
 800675c:	7e27      	ldrb	r7, [r4, #24]
 800675e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006760:	2f78      	cmp	r7, #120	; 0x78
 8006762:	4680      	mov	r8, r0
 8006764:	469a      	mov	sl, r3
 8006766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800676a:	d807      	bhi.n	800677c <_printf_i+0x28>
 800676c:	2f62      	cmp	r7, #98	; 0x62
 800676e:	d80a      	bhi.n	8006786 <_printf_i+0x32>
 8006770:	2f00      	cmp	r7, #0
 8006772:	f000 80d8 	beq.w	8006926 <_printf_i+0x1d2>
 8006776:	2f58      	cmp	r7, #88	; 0x58
 8006778:	f000 80a3 	beq.w	80068c2 <_printf_i+0x16e>
 800677c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006784:	e03a      	b.n	80067fc <_printf_i+0xa8>
 8006786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800678a:	2b15      	cmp	r3, #21
 800678c:	d8f6      	bhi.n	800677c <_printf_i+0x28>
 800678e:	a001      	add	r0, pc, #4	; (adr r0, 8006794 <_printf_i+0x40>)
 8006790:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006794:	080067ed 	.word	0x080067ed
 8006798:	08006801 	.word	0x08006801
 800679c:	0800677d 	.word	0x0800677d
 80067a0:	0800677d 	.word	0x0800677d
 80067a4:	0800677d 	.word	0x0800677d
 80067a8:	0800677d 	.word	0x0800677d
 80067ac:	08006801 	.word	0x08006801
 80067b0:	0800677d 	.word	0x0800677d
 80067b4:	0800677d 	.word	0x0800677d
 80067b8:	0800677d 	.word	0x0800677d
 80067bc:	0800677d 	.word	0x0800677d
 80067c0:	0800690d 	.word	0x0800690d
 80067c4:	08006831 	.word	0x08006831
 80067c8:	080068ef 	.word	0x080068ef
 80067cc:	0800677d 	.word	0x0800677d
 80067d0:	0800677d 	.word	0x0800677d
 80067d4:	0800692f 	.word	0x0800692f
 80067d8:	0800677d 	.word	0x0800677d
 80067dc:	08006831 	.word	0x08006831
 80067e0:	0800677d 	.word	0x0800677d
 80067e4:	0800677d 	.word	0x0800677d
 80067e8:	080068f7 	.word	0x080068f7
 80067ec:	680b      	ldr	r3, [r1, #0]
 80067ee:	1d1a      	adds	r2, r3, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	600a      	str	r2, [r1, #0]
 80067f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0a3      	b.n	8006948 <_printf_i+0x1f4>
 8006800:	6825      	ldr	r5, [r4, #0]
 8006802:	6808      	ldr	r0, [r1, #0]
 8006804:	062e      	lsls	r6, r5, #24
 8006806:	f100 0304 	add.w	r3, r0, #4
 800680a:	d50a      	bpl.n	8006822 <_printf_i+0xce>
 800680c:	6805      	ldr	r5, [r0, #0]
 800680e:	600b      	str	r3, [r1, #0]
 8006810:	2d00      	cmp	r5, #0
 8006812:	da03      	bge.n	800681c <_printf_i+0xc8>
 8006814:	232d      	movs	r3, #45	; 0x2d
 8006816:	426d      	negs	r5, r5
 8006818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681c:	485e      	ldr	r0, [pc, #376]	; (8006998 <_printf_i+0x244>)
 800681e:	230a      	movs	r3, #10
 8006820:	e019      	b.n	8006856 <_printf_i+0x102>
 8006822:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006826:	6805      	ldr	r5, [r0, #0]
 8006828:	600b      	str	r3, [r1, #0]
 800682a:	bf18      	it	ne
 800682c:	b22d      	sxthne	r5, r5
 800682e:	e7ef      	b.n	8006810 <_printf_i+0xbc>
 8006830:	680b      	ldr	r3, [r1, #0]
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	1d18      	adds	r0, r3, #4
 8006836:	6008      	str	r0, [r1, #0]
 8006838:	0628      	lsls	r0, r5, #24
 800683a:	d501      	bpl.n	8006840 <_printf_i+0xec>
 800683c:	681d      	ldr	r5, [r3, #0]
 800683e:	e002      	b.n	8006846 <_printf_i+0xf2>
 8006840:	0669      	lsls	r1, r5, #25
 8006842:	d5fb      	bpl.n	800683c <_printf_i+0xe8>
 8006844:	881d      	ldrh	r5, [r3, #0]
 8006846:	4854      	ldr	r0, [pc, #336]	; (8006998 <_printf_i+0x244>)
 8006848:	2f6f      	cmp	r7, #111	; 0x6f
 800684a:	bf0c      	ite	eq
 800684c:	2308      	moveq	r3, #8
 800684e:	230a      	movne	r3, #10
 8006850:	2100      	movs	r1, #0
 8006852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006856:	6866      	ldr	r6, [r4, #4]
 8006858:	60a6      	str	r6, [r4, #8]
 800685a:	2e00      	cmp	r6, #0
 800685c:	bfa2      	ittt	ge
 800685e:	6821      	ldrge	r1, [r4, #0]
 8006860:	f021 0104 	bicge.w	r1, r1, #4
 8006864:	6021      	strge	r1, [r4, #0]
 8006866:	b90d      	cbnz	r5, 800686c <_printf_i+0x118>
 8006868:	2e00      	cmp	r6, #0
 800686a:	d04d      	beq.n	8006908 <_printf_i+0x1b4>
 800686c:	4616      	mov	r6, r2
 800686e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006872:	fb03 5711 	mls	r7, r3, r1, r5
 8006876:	5dc7      	ldrb	r7, [r0, r7]
 8006878:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800687c:	462f      	mov	r7, r5
 800687e:	42bb      	cmp	r3, r7
 8006880:	460d      	mov	r5, r1
 8006882:	d9f4      	bls.n	800686e <_printf_i+0x11a>
 8006884:	2b08      	cmp	r3, #8
 8006886:	d10b      	bne.n	80068a0 <_printf_i+0x14c>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07df      	lsls	r7, r3, #31
 800688c:	d508      	bpl.n	80068a0 <_printf_i+0x14c>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	6861      	ldr	r1, [r4, #4]
 8006892:	4299      	cmp	r1, r3
 8006894:	bfde      	ittt	le
 8006896:	2330      	movle	r3, #48	; 0x30
 8006898:	f806 3c01 	strble.w	r3, [r6, #-1]
 800689c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068a0:	1b92      	subs	r2, r2, r6
 80068a2:	6122      	str	r2, [r4, #16]
 80068a4:	f8cd a000 	str.w	sl, [sp]
 80068a8:	464b      	mov	r3, r9
 80068aa:	aa03      	add	r2, sp, #12
 80068ac:	4621      	mov	r1, r4
 80068ae:	4640      	mov	r0, r8
 80068b0:	f7ff fee2 	bl	8006678 <_printf_common>
 80068b4:	3001      	adds	r0, #1
 80068b6:	d14c      	bne.n	8006952 <_printf_i+0x1fe>
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	b004      	add	sp, #16
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	4835      	ldr	r0, [pc, #212]	; (8006998 <_printf_i+0x244>)
 80068c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	680e      	ldr	r6, [r1, #0]
 80068cc:	061f      	lsls	r7, r3, #24
 80068ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80068d2:	600e      	str	r6, [r1, #0]
 80068d4:	d514      	bpl.n	8006900 <_printf_i+0x1ac>
 80068d6:	07d9      	lsls	r1, r3, #31
 80068d8:	bf44      	itt	mi
 80068da:	f043 0320 	orrmi.w	r3, r3, #32
 80068de:	6023      	strmi	r3, [r4, #0]
 80068e0:	b91d      	cbnz	r5, 80068ea <_printf_i+0x196>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	f023 0320 	bic.w	r3, r3, #32
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	2310      	movs	r3, #16
 80068ec:	e7b0      	b.n	8006850 <_printf_i+0xfc>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f043 0320 	orr.w	r3, r3, #32
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	2378      	movs	r3, #120	; 0x78
 80068f8:	4828      	ldr	r0, [pc, #160]	; (800699c <_printf_i+0x248>)
 80068fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068fe:	e7e3      	b.n	80068c8 <_printf_i+0x174>
 8006900:	065e      	lsls	r6, r3, #25
 8006902:	bf48      	it	mi
 8006904:	b2ad      	uxthmi	r5, r5
 8006906:	e7e6      	b.n	80068d6 <_printf_i+0x182>
 8006908:	4616      	mov	r6, r2
 800690a:	e7bb      	b.n	8006884 <_printf_i+0x130>
 800690c:	680b      	ldr	r3, [r1, #0]
 800690e:	6826      	ldr	r6, [r4, #0]
 8006910:	6960      	ldr	r0, [r4, #20]
 8006912:	1d1d      	adds	r5, r3, #4
 8006914:	600d      	str	r5, [r1, #0]
 8006916:	0635      	lsls	r5, r6, #24
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	d501      	bpl.n	8006920 <_printf_i+0x1cc>
 800691c:	6018      	str	r0, [r3, #0]
 800691e:	e002      	b.n	8006926 <_printf_i+0x1d2>
 8006920:	0671      	lsls	r1, r6, #25
 8006922:	d5fb      	bpl.n	800691c <_printf_i+0x1c8>
 8006924:	8018      	strh	r0, [r3, #0]
 8006926:	2300      	movs	r3, #0
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	4616      	mov	r6, r2
 800692c:	e7ba      	b.n	80068a4 <_printf_i+0x150>
 800692e:	680b      	ldr	r3, [r1, #0]
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	600a      	str	r2, [r1, #0]
 8006934:	681e      	ldr	r6, [r3, #0]
 8006936:	6862      	ldr	r2, [r4, #4]
 8006938:	2100      	movs	r1, #0
 800693a:	4630      	mov	r0, r6
 800693c:	f7f9 fc58 	bl	80001f0 <memchr>
 8006940:	b108      	cbz	r0, 8006946 <_printf_i+0x1f2>
 8006942:	1b80      	subs	r0, r0, r6
 8006944:	6060      	str	r0, [r4, #4]
 8006946:	6863      	ldr	r3, [r4, #4]
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	2300      	movs	r3, #0
 800694c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006950:	e7a8      	b.n	80068a4 <_printf_i+0x150>
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	4632      	mov	r2, r6
 8006956:	4649      	mov	r1, r9
 8006958:	4640      	mov	r0, r8
 800695a:	47d0      	blx	sl
 800695c:	3001      	adds	r0, #1
 800695e:	d0ab      	beq.n	80068b8 <_printf_i+0x164>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	079b      	lsls	r3, r3, #30
 8006964:	d413      	bmi.n	800698e <_printf_i+0x23a>
 8006966:	68e0      	ldr	r0, [r4, #12]
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	4298      	cmp	r0, r3
 800696c:	bfb8      	it	lt
 800696e:	4618      	movlt	r0, r3
 8006970:	e7a4      	b.n	80068bc <_printf_i+0x168>
 8006972:	2301      	movs	r3, #1
 8006974:	4632      	mov	r2, r6
 8006976:	4649      	mov	r1, r9
 8006978:	4640      	mov	r0, r8
 800697a:	47d0      	blx	sl
 800697c:	3001      	adds	r0, #1
 800697e:	d09b      	beq.n	80068b8 <_printf_i+0x164>
 8006980:	3501      	adds	r5, #1
 8006982:	68e3      	ldr	r3, [r4, #12]
 8006984:	9903      	ldr	r1, [sp, #12]
 8006986:	1a5b      	subs	r3, r3, r1
 8006988:	42ab      	cmp	r3, r5
 800698a:	dcf2      	bgt.n	8006972 <_printf_i+0x21e>
 800698c:	e7eb      	b.n	8006966 <_printf_i+0x212>
 800698e:	2500      	movs	r5, #0
 8006990:	f104 0619 	add.w	r6, r4, #25
 8006994:	e7f5      	b.n	8006982 <_printf_i+0x22e>
 8006996:	bf00      	nop
 8006998:	08006d8d 	.word	0x08006d8d
 800699c:	08006d9e 	.word	0x08006d9e

080069a0 <memmove>:
 80069a0:	4288      	cmp	r0, r1
 80069a2:	b510      	push	{r4, lr}
 80069a4:	eb01 0402 	add.w	r4, r1, r2
 80069a8:	d902      	bls.n	80069b0 <memmove+0x10>
 80069aa:	4284      	cmp	r4, r0
 80069ac:	4623      	mov	r3, r4
 80069ae:	d807      	bhi.n	80069c0 <memmove+0x20>
 80069b0:	1e43      	subs	r3, r0, #1
 80069b2:	42a1      	cmp	r1, r4
 80069b4:	d008      	beq.n	80069c8 <memmove+0x28>
 80069b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069be:	e7f8      	b.n	80069b2 <memmove+0x12>
 80069c0:	4402      	add	r2, r0
 80069c2:	4601      	mov	r1, r0
 80069c4:	428a      	cmp	r2, r1
 80069c6:	d100      	bne.n	80069ca <memmove+0x2a>
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069d2:	e7f7      	b.n	80069c4 <memmove+0x24>

080069d4 <_free_r>:
 80069d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069d6:	2900      	cmp	r1, #0
 80069d8:	d048      	beq.n	8006a6c <_free_r+0x98>
 80069da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069de:	9001      	str	r0, [sp, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f1a1 0404 	sub.w	r4, r1, #4
 80069e6:	bfb8      	it	lt
 80069e8:	18e4      	addlt	r4, r4, r3
 80069ea:	f000 f8d3 	bl	8006b94 <__malloc_lock>
 80069ee:	4a20      	ldr	r2, [pc, #128]	; (8006a70 <_free_r+0x9c>)
 80069f0:	9801      	ldr	r0, [sp, #4]
 80069f2:	6813      	ldr	r3, [r2, #0]
 80069f4:	4615      	mov	r5, r2
 80069f6:	b933      	cbnz	r3, 8006a06 <_free_r+0x32>
 80069f8:	6063      	str	r3, [r4, #4]
 80069fa:	6014      	str	r4, [r2, #0]
 80069fc:	b003      	add	sp, #12
 80069fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a02:	f000 b8cd 	b.w	8006ba0 <__malloc_unlock>
 8006a06:	42a3      	cmp	r3, r4
 8006a08:	d90b      	bls.n	8006a22 <_free_r+0x4e>
 8006a0a:	6821      	ldr	r1, [r4, #0]
 8006a0c:	1862      	adds	r2, r4, r1
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	bf04      	itt	eq
 8006a12:	681a      	ldreq	r2, [r3, #0]
 8006a14:	685b      	ldreq	r3, [r3, #4]
 8006a16:	6063      	str	r3, [r4, #4]
 8006a18:	bf04      	itt	eq
 8006a1a:	1852      	addeq	r2, r2, r1
 8006a1c:	6022      	streq	r2, [r4, #0]
 8006a1e:	602c      	str	r4, [r5, #0]
 8006a20:	e7ec      	b.n	80069fc <_free_r+0x28>
 8006a22:	461a      	mov	r2, r3
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b10b      	cbz	r3, 8006a2c <_free_r+0x58>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d9fa      	bls.n	8006a22 <_free_r+0x4e>
 8006a2c:	6811      	ldr	r1, [r2, #0]
 8006a2e:	1855      	adds	r5, r2, r1
 8006a30:	42a5      	cmp	r5, r4
 8006a32:	d10b      	bne.n	8006a4c <_free_r+0x78>
 8006a34:	6824      	ldr	r4, [r4, #0]
 8006a36:	4421      	add	r1, r4
 8006a38:	1854      	adds	r4, r2, r1
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	d1dd      	bne.n	80069fc <_free_r+0x28>
 8006a40:	681c      	ldr	r4, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	6053      	str	r3, [r2, #4]
 8006a46:	4421      	add	r1, r4
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	e7d7      	b.n	80069fc <_free_r+0x28>
 8006a4c:	d902      	bls.n	8006a54 <_free_r+0x80>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	6003      	str	r3, [r0, #0]
 8006a52:	e7d3      	b.n	80069fc <_free_r+0x28>
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	1961      	adds	r1, r4, r5
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	bf04      	itt	eq
 8006a5c:	6819      	ldreq	r1, [r3, #0]
 8006a5e:	685b      	ldreq	r3, [r3, #4]
 8006a60:	6063      	str	r3, [r4, #4]
 8006a62:	bf04      	itt	eq
 8006a64:	1949      	addeq	r1, r1, r5
 8006a66:	6021      	streq	r1, [r4, #0]
 8006a68:	6054      	str	r4, [r2, #4]
 8006a6a:	e7c7      	b.n	80069fc <_free_r+0x28>
 8006a6c:	b003      	add	sp, #12
 8006a6e:	bd30      	pop	{r4, r5, pc}
 8006a70:	20001aac 	.word	0x20001aac

08006a74 <_malloc_r>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	1ccd      	adds	r5, r1, #3
 8006a78:	f025 0503 	bic.w	r5, r5, #3
 8006a7c:	3508      	adds	r5, #8
 8006a7e:	2d0c      	cmp	r5, #12
 8006a80:	bf38      	it	cc
 8006a82:	250c      	movcc	r5, #12
 8006a84:	2d00      	cmp	r5, #0
 8006a86:	4606      	mov	r6, r0
 8006a88:	db01      	blt.n	8006a8e <_malloc_r+0x1a>
 8006a8a:	42a9      	cmp	r1, r5
 8006a8c:	d903      	bls.n	8006a96 <_malloc_r+0x22>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	6033      	str	r3, [r6, #0]
 8006a92:	2000      	movs	r0, #0
 8006a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a96:	f000 f87d 	bl	8006b94 <__malloc_lock>
 8006a9a:	4921      	ldr	r1, [pc, #132]	; (8006b20 <_malloc_r+0xac>)
 8006a9c:	680a      	ldr	r2, [r1, #0]
 8006a9e:	4614      	mov	r4, r2
 8006aa0:	b99c      	cbnz	r4, 8006aca <_malloc_r+0x56>
 8006aa2:	4f20      	ldr	r7, [pc, #128]	; (8006b24 <_malloc_r+0xb0>)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	b923      	cbnz	r3, 8006ab2 <_malloc_r+0x3e>
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f000 f862 	bl	8006b74 <_sbrk_r>
 8006ab0:	6038      	str	r0, [r7, #0]
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f000 f85d 	bl	8006b74 <_sbrk_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	d123      	bne.n	8006b06 <_malloc_r+0x92>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	6033      	str	r3, [r6, #0]
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f000 f86c 	bl	8006ba0 <__malloc_unlock>
 8006ac8:	e7e3      	b.n	8006a92 <_malloc_r+0x1e>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	1b5b      	subs	r3, r3, r5
 8006ace:	d417      	bmi.n	8006b00 <_malloc_r+0x8c>
 8006ad0:	2b0b      	cmp	r3, #11
 8006ad2:	d903      	bls.n	8006adc <_malloc_r+0x68>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	441c      	add	r4, r3
 8006ad8:	6025      	str	r5, [r4, #0]
 8006ada:	e004      	b.n	8006ae6 <_malloc_r+0x72>
 8006adc:	6863      	ldr	r3, [r4, #4]
 8006ade:	42a2      	cmp	r2, r4
 8006ae0:	bf0c      	ite	eq
 8006ae2:	600b      	streq	r3, [r1, #0]
 8006ae4:	6053      	strne	r3, [r2, #4]
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f000 f85a 	bl	8006ba0 <__malloc_unlock>
 8006aec:	f104 000b 	add.w	r0, r4, #11
 8006af0:	1d23      	adds	r3, r4, #4
 8006af2:	f020 0007 	bic.w	r0, r0, #7
 8006af6:	1ac2      	subs	r2, r0, r3
 8006af8:	d0cc      	beq.n	8006a94 <_malloc_r+0x20>
 8006afa:	1a1b      	subs	r3, r3, r0
 8006afc:	50a3      	str	r3, [r4, r2]
 8006afe:	e7c9      	b.n	8006a94 <_malloc_r+0x20>
 8006b00:	4622      	mov	r2, r4
 8006b02:	6864      	ldr	r4, [r4, #4]
 8006b04:	e7cc      	b.n	8006aa0 <_malloc_r+0x2c>
 8006b06:	1cc4      	adds	r4, r0, #3
 8006b08:	f024 0403 	bic.w	r4, r4, #3
 8006b0c:	42a0      	cmp	r0, r4
 8006b0e:	d0e3      	beq.n	8006ad8 <_malloc_r+0x64>
 8006b10:	1a21      	subs	r1, r4, r0
 8006b12:	4630      	mov	r0, r6
 8006b14:	f000 f82e 	bl	8006b74 <_sbrk_r>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d1dd      	bne.n	8006ad8 <_malloc_r+0x64>
 8006b1c:	e7cf      	b.n	8006abe <_malloc_r+0x4a>
 8006b1e:	bf00      	nop
 8006b20:	20001aac 	.word	0x20001aac
 8006b24:	20001ab0 	.word	0x20001ab0

08006b28 <_realloc_r>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	460e      	mov	r6, r1
 8006b30:	b921      	cbnz	r1, 8006b3c <_realloc_r+0x14>
 8006b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b36:	4611      	mov	r1, r2
 8006b38:	f7ff bf9c 	b.w	8006a74 <_malloc_r>
 8006b3c:	b922      	cbnz	r2, 8006b48 <_realloc_r+0x20>
 8006b3e:	f7ff ff49 	bl	80069d4 <_free_r>
 8006b42:	4625      	mov	r5, r4
 8006b44:	4628      	mov	r0, r5
 8006b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b48:	f000 f830 	bl	8006bac <_malloc_usable_size_r>
 8006b4c:	42a0      	cmp	r0, r4
 8006b4e:	d20f      	bcs.n	8006b70 <_realloc_r+0x48>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4638      	mov	r0, r7
 8006b54:	f7ff ff8e 	bl	8006a74 <_malloc_r>
 8006b58:	4605      	mov	r5, r0
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d0f2      	beq.n	8006b44 <_realloc_r+0x1c>
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4622      	mov	r2, r4
 8006b62:	f7ff fbdd 	bl	8006320 <memcpy>
 8006b66:	4631      	mov	r1, r6
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f7ff ff33 	bl	80069d4 <_free_r>
 8006b6e:	e7e9      	b.n	8006b44 <_realloc_r+0x1c>
 8006b70:	4635      	mov	r5, r6
 8006b72:	e7e7      	b.n	8006b44 <_realloc_r+0x1c>

08006b74 <_sbrk_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d06      	ldr	r5, [pc, #24]	; (8006b90 <_sbrk_r+0x1c>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f7fa f870 	bl	8000c64 <_sbrk>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_sbrk_r+0x1a>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_sbrk_r+0x1a>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	200022ec 	.word	0x200022ec

08006b94 <__malloc_lock>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__malloc_lock+0x8>)
 8006b96:	f000 b811 	b.w	8006bbc <__retarget_lock_acquire_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	200022f4 	.word	0x200022f4

08006ba0 <__malloc_unlock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__malloc_unlock+0x8>)
 8006ba2:	f000 b80c 	b.w	8006bbe <__retarget_lock_release_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	200022f4 	.word	0x200022f4

08006bac <_malloc_usable_size_r>:
 8006bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb0:	1f18      	subs	r0, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bfbc      	itt	lt
 8006bb6:	580b      	ldrlt	r3, [r1, r0]
 8006bb8:	18c0      	addlt	r0, r0, r3
 8006bba:	4770      	bx	lr

08006bbc <__retarget_lock_acquire_recursive>:
 8006bbc:	4770      	bx	lr

08006bbe <__retarget_lock_release_recursive>:
 8006bbe:	4770      	bx	lr

08006bc0 <_init>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

08006bcc <_fini>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr
