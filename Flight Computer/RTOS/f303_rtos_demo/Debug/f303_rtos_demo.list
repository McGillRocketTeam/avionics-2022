
f303_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800a8a8  0800a8a8  0001a8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800addc  0800addc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800addc  0800addc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ade4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cac  200001e0  0800afc4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e8c  0800afc4  00024e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025aad  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e9  00000000  00000000  00045cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  00049ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  0004b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000052fc  00000000  00000000  0004d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df83  00000000  00000000  000523dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8142  00000000  00000000  0007035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001484a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f0c  00000000  00000000  001484f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a88c 	.word	0x0800a88c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a88c 	.word	0x0800a88c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	72fb      	strb	r3, [r7, #11]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685c      	ldr	r4, [r3, #4]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6898      	ldr	r0, [r3, #8]
 8000bd4:	893b      	ldrh	r3, [r7, #8]
 8000bd6:	7af9      	ldrb	r1, [r7, #11]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	47a0      	blx	r4
 8000bdc:	6178      	str	r0, [r7, #20]
  return ret;
 8000bde:	697b      	ldr	r3, [r7, #20]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd90      	pop	{r4, r7, pc}

08000be8 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	72fb      	strb	r3, [r7, #11]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6898      	ldr	r0, [r3, #8]
 8000c04:	893b      	ldrh	r3, [r7, #8]
 8000c06:	7af9      	ldrb	r1, [r7, #11]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	47a0      	blx	r4
 8000c0c:	6178      	str	r0, [r7, #20]
  return ret;
 8000c0e:	697b      	ldr	r3, [r7, #20]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c2a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000c44 <lps22hh_from_lsb_to_hpa+0x2c>
 8000c2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c32:	eef0 7a66 	vmov.f32	s15, s13
}
 8000c36:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	49800000 	.word	0x49800000

08000c48 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8000c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000c78 <lps22hh_from_lsb_to_celsius+0x30>
 8000c62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c66:	eef0 7a66 	vmov.f32	s15, s13
}
 8000c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	42c80000 	.word	0x42c80000

08000c7c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000c88:	f107 0208 	add.w	r2, r7, #8
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	2110      	movs	r1, #16
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff91 	bl	8000bb8 <lps22hh_read_reg>
 8000c96:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10f      	bne.n	8000cbe <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	7a3b      	ldrb	r3, [r7, #8]
 8000ca8:	f362 0341 	bfi	r3, r2, #1, #1
 8000cac:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000cae:	f107 0208 	add.w	r2, r7, #8
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff96 	bl	8000be8 <lps22hh_write_reg>
 8000cbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8000cd4:	f107 0210 	add.w	r2, r7, #16
 8000cd8:	2301      	movs	r3, #1
 8000cda:	2110      	movs	r1, #16
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff6b 	bl	8000bb8 <lps22hh_read_reg>
 8000ce2:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d107      	bne.n	8000cfa <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8000cea:	f107 020c 	add.w	r2, r7, #12
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2111      	movs	r1, #17
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff60 	bl	8000bb8 <lps22hh_read_reg>
 8000cf8:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10f      	bne.n	8000d20 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	7c3b      	ldrb	r3, [r7, #16]
 8000d0a:	f362 1306 	bfi	r3, r2, #4, #3
 8000d0e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8000d10:	f107 0210 	add.w	r2, r7, #16
 8000d14:	2301      	movs	r3, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff65 	bl	8000be8 <lps22hh_write_reg>
 8000d1e:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d119      	bne.n	8000d5a <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	091b      	lsrs	r3, r3, #4
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	f362 0341 	bfi	r3, r2, #1, #1
 8000d36:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	f362 0300 	bfi	r3, r2, #0, #1
 8000d48:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8000d4a:	f107 020c 	add.w	r2, r7, #12
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2111      	movs	r1, #17
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff48 	bl	8000be8 <lps22hh_write_reg>
 8000d58:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 8000d5a:	697b      	ldr	r3, [r7, #20]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8000d6e:	f107 0208 	add.w	r2, r7, #8
 8000d72:	2303      	movs	r3, #3
 8000d74:	2128      	movs	r1, #40	; 0x28
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff1e 	bl	8000bb8 <lps22hh_read_reg>
 8000d7c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8000d7e:	7abb      	ldrb	r3, [r7, #10]
 8000d80:	461a      	mov	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	7a7a      	ldrb	r2, [r7, #9]
 8000d8e:	441a      	add	r2, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	7a3a      	ldrb	r2, [r7, #8]
 8000d9c:	441a      	add	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	021a      	lsls	r2, r3, #8
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	601a      	str	r2, [r3, #0]
  return ret;
 8000dac:	68fb      	ldr	r3, [r7, #12]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8000dc0:	f107 0208 	add.w	r2, r7, #8
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	212b      	movs	r1, #43	; 0x2b
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fef5 	bl	8000bb8 <lps22hh_read_reg>
 8000dce:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8000dd0:	7a7b      	ldrb	r3, [r7, #9]
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	7a3b      	ldrb	r3, [r7, #8]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	801a      	strh	r2, [r3, #0]
  return ret;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8000e06:	2301      	movs	r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fed3 	bl	8000bb8 <lps22hh_read_reg>
 8000e12:	60f8      	str	r0, [r7, #12]
  return ret;
 8000e14:	68fb      	ldr	r3, [r7, #12]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000e2a:	f107 0208 	add.w	r2, r7, #8
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2111      	movs	r1, #17
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fec0 	bl	8000bb8 <lps22hh_read_reg>
 8000e38:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10f      	bne.n	8000e60 <lps22hh_reset_set+0x42>
    reg.swreset = val;
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	7a3b      	ldrb	r3, [r7, #8]
 8000e4a:	f362 0382 	bfi	r3, r2, #2, #1
 8000e4e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000e50:	f107 0208 	add.w	r2, r7, #8
 8000e54:	2301      	movs	r3, #1
 8000e56:	2111      	movs	r1, #17
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fec5 	bl	8000be8 <lps22hh_write_reg>
 8000e5e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000e60:	68fb      	ldr	r3, [r7, #12]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	2301      	movs	r3, #1
 8000e7a:	2111      	movs	r1, #17
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fe9b 	bl	8000bb8 <lps22hh_read_reg>
 8000e82:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8000e84:	7a3b      	ldrb	r3, [r7, #8]
 8000e86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	701a      	strb	r2, [r3, #0]
  return ret;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <myprintf>:

	int len = strlen(buffer);
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, len, -1);
}
*/
void myprintf(char* buffer) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, 100, 100);
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2264      	movs	r2, #100	; 0x64
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <myprintf+0x1c>)
 8000eac:	f003 fc32 	bl	8004714 <HAL_UART_Transmit>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20004c8c 	.word	0x20004c8c

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 fd1f 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f841 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f905 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ece:	f000 f8d3 	bl	8001078 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000ed2:	f000 f891 	bl	8000ff8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  dev_ctx_lps = lps22hh_init();
 8000ed6:	4c13      	ldr	r4, [pc, #76]	; (8000f24 <main+0x68>)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f9e0 	bl	80012a0 <lps22hh_init>
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eea:	f004 f82d 	bl	8004f48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of fakeEjection */
  fakeEjectionHandle = osThreadNew(StartFakeEjection, NULL, &fakeEjection_attributes);
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <main+0x6c>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	480e      	ldr	r0, [pc, #56]	; (8000f2c <main+0x70>)
 8000ef4:	f004 f890 	bl	8005018 <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <main+0x74>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of fakeSensors */
  fakeSensorsHandle = osThreadNew(StartFakeSensors, NULL, &fakeSensors_attributes);
 8000efe:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <main+0x78>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <main+0x7c>)
 8000f04:	f004 f888 	bl	8005018 <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <main+0x80>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* creation of fakeTelemetry */
  fakeTelemetryHandle = osThreadNew(StartFakeTelemetry, NULL, &fakeTelemetry_attributes);
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <main+0x84>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <main+0x88>)
 8000f14:	f004 f880 	bl	8005018 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <main+0x8c>)
 8000f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f1e:	f004 f847 	bl	8004fb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0x66>
 8000f24:	20004d1c 	.word	0x20004d1c
 8000f28:	0800a958 	.word	0x0800a958
 8000f2c:	08001121 	.word	0x08001121
 8000f30:	20003b6c 	.word	0x20003b6c
 8000f34:	0800a97c 	.word	0x0800a97c
 8000f38:	08001171 	.word	0x08001171
 8000f3c:	20004d28 	.word	0x20004d28
 8000f40:	0800a9a0 	.word	0x0800a9a0
 8000f44:	08001201 	.word	0x08001201
 8000f48:	20003b70 	.word	0x20003b70

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a6      	sub	sp, #152	; 0x98
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f56:	2228      	movs	r2, #40	; 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fea0 	bl	8007ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2258      	movs	r2, #88	; 0x58
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 fe92 	bl	8007ca0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f84:	2310      	movs	r3, #16
 8000f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fcfd 	bl	8002994 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fa0:	f000 f978 	bl	8001294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fbfe 	bl	80037c0 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fca:	f000 f963 	bl	8001294 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <SystemClock_Config+0xa8>)
 8000fd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fe57 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000fe8:	f000 f954 	bl	8001294 <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3798      	adds	r7, #152	; 0x98
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	00040002 	.word	0x00040002

08000ff8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_I2C3_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_I2C3_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_I2C3_Init+0x74>)
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <MX_I2C3_Init+0x7c>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_I2C3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_I2C3_Init+0x74>)
 8001010:	2201      	movs	r2, #1
 8001012:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_I2C3_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_I2C3_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C3_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_I2C3_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C3_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <MX_I2C3_Init+0x74>)
 8001034:	f000 ff2c 	bl	8001e90 <HAL_I2C_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800103e:	f000 f929 	bl	8001294 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <MX_I2C3_Init+0x74>)
 8001046:	f001 fc0d 	bl	8002864 <HAL_I2CEx_ConfigAnalogFilter>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001050:	f000 f920 	bl	8001294 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_I2C3_Init+0x74>)
 8001058:	f001 fc4f 	bl	80028fa <HAL_I2CEx_ConfigDigitalFilter>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001062:	f000 f917 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20001be0 	.word	0x20001be0
 8001070:	40007800 	.word	0x40007800
 8001074:	2000090e 	.word	0x2000090e

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <MX_USART2_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001084:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010bc:	f003 fadc 	bl	8004678 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f000 f8e5 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20004c8c 	.word	0x20004c8c
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_GPIO_Init+0x44>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <MX_GPIO_Init+0x44>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_GPIO_Init+0x44>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_GPIO_Init+0x44>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <MX_GPIO_Init+0x44>)
 80010fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_GPIO_Init+0x44>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <StartFakeEjection>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFakeEjection */
void StartFakeEjection(void *argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char* buffer = (char*)malloc(100);
 8001128:	2064      	movs	r0, #100	; 0x64
 800112a:	f006 fda3 	bl	8007c74 <malloc>
 800112e:	4603      	mov	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
	memset(buffer, 0, 100);
 8001132:	2264      	movs	r2, #100	; 0x64
 8001134:	2100      	movs	r1, #0
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f006 fdb2 	bl	8007ca0 <memset>
  for(;;)
  {
	  if(temperature > 30)
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <StartFakeEjection+0x48>)
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	dd06      	ble.n	800115e <StartFakeEjection+0x3e>
	  {
		  sprintf(buffer, "EJECT or smthg\r\n");
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <StartFakeEjection+0x4c>)
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f007 fb3a 	bl	80087cc <siprintf>
		  myprintf(buffer);
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff fe9f 	bl	8000e9c <myprintf>
	  }
    osDelay(1000);
 800115e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001162:	f004 f803 	bl	800516c <osDelay>
	  if(temperature > 30)
 8001166:	e7e9      	b.n	800113c <StartFakeEjection+0x1c>
 8001168:	20000200 	.word	0x20000200
 800116c:	0800a8d4 	.word	0x0800a8d4

08001170 <StartFakeSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeSensors */
void StartFakeSensors(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeSensors */
  /* Infinite loop */
	uint32_t i = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
	char* buffer = (char*)malloc(100);
 800117c:	2064      	movs	r0, #100	; 0x64
 800117e:	f006 fd79 	bl	8007c74 <malloc>
 8001182:	4603      	mov	r3, r0
 8001184:	60bb      	str	r3, [r7, #8]
	memset(buffer, 0, 100);
 8001186:	2264      	movs	r2, #100	; 0x64
 8001188:	2100      	movs	r1, #0
 800118a:	68b8      	ldr	r0, [r7, #8]
 800118c:	f006 fd88 	bl	8007ca0 <memset>
  for(;;)
  {
	  get_pressure(dev_ctx_lps, &pressure);
 8001190:	4a16      	ldr	r2, [pc, #88]	; (80011ec <StartFakeSensors+0x7c>)
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <StartFakeSensors+0x80>)
 8001194:	ca07      	ldmia	r2, {r0, r1, r2}
 8001196:	f000 f8d1 	bl	800133c <get_pressure>
	  get_temperature(dev_ctx_lps,  &temperature);
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <StartFakeSensors+0x7c>)
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <StartFakeSensors+0x84>)
 800119e:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a0:	f000 f8f8 	bl	8001394 <get_temperature>
	  sprintf(buffer, "IN pressure: %f\r\n", pressure);
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <StartFakeSensors+0x80>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9d5 	bl	8000558 <__aeabi_f2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4911      	ldr	r1, [pc, #68]	; (80011f8 <StartFakeSensors+0x88>)
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f007 fb09 	bl	80087cc <siprintf>
	  myprintf(buffer);
 80011ba:	68b8      	ldr	r0, [r7, #8]
 80011bc:	f7ff fe6e 	bl	8000e9c <myprintf>
	  sprintf(buffer, "IN temperature: %f\r\n", temperature);
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <StartFakeSensors+0x84>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9c7 	bl	8000558 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	490b      	ldr	r1, [pc, #44]	; (80011fc <StartFakeSensors+0x8c>)
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f007 fafb 	bl	80087cc <siprintf>
	  myprintf(buffer);
 80011d6:	68b8      	ldr	r0, [r7, #8]
 80011d8:	f7ff fe60 	bl	8000e9c <myprintf>
	  ++i;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
    osDelay(500);
 80011e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e6:	f003 ffc1 	bl	800516c <osDelay>
	  get_pressure(dev_ctx_lps, &pressure);
 80011ea:	e7d1      	b.n	8001190 <StartFakeSensors+0x20>
 80011ec:	20004d1c 	.word	0x20004d1c
 80011f0:	200001fc 	.word	0x200001fc
 80011f4:	20000200 	.word	0x20000200
 80011f8:	0800a8e8 	.word	0x0800a8e8
 80011fc:	0800a8fc 	.word	0x0800a8fc

08001200 <StartFakeTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFakeTelemetry */
void StartFakeTelemetry(void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFakeTelemetry */
  /* Infinite loop */
	char* buffer1 = (char*)malloc(100);
 8001208:	2064      	movs	r0, #100	; 0x64
 800120a:	f006 fd33 	bl	8007c74 <malloc>
 800120e:	4603      	mov	r3, r0
 8001210:	60fb      	str	r3, [r7, #12]
	memset(buffer1, 0, 100);
 8001212:	2264      	movs	r2, #100	; 0x64
 8001214:	2100      	movs	r1, #0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f006 fd42 	bl	8007ca0 <memset>
  for(;;)
  {
	  sprintf(buffer1, "OUT pressure: %f\r\n", pressure);
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <StartFakeTelemetry+0x60>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f999 	bl	8000558 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <StartFakeTelemetry+0x64>)
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f007 facd 	bl	80087cc <siprintf>
	  myprintf(buffer1);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff fe32 	bl	8000e9c <myprintf>
	  sprintf(buffer1, "OUT temperature: %f\r\n", temperature);
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <StartFakeTelemetry+0x68>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f98b 	bl	8000558 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4909      	ldr	r1, [pc, #36]	; (800126c <StartFakeTelemetry+0x6c>)
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f007 fabf 	bl	80087cc <siprintf>
	  myprintf(buffer1);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff fe24 	bl	8000e9c <myprintf>
    osDelay(5000);
 8001254:	f241 3088 	movw	r0, #5000	; 0x1388
 8001258:	f003 ff88 	bl	800516c <osDelay>
	  sprintf(buffer1, "OUT pressure: %f\r\n", pressure);
 800125c:	e7de      	b.n	800121c <StartFakeTelemetry+0x1c>
 800125e:	bf00      	nop
 8001260:	200001fc 	.word	0x200001fc
 8001264:	0800a914 	.word	0x0800a914
 8001268:	20000200 	.word	0x20000200
 800126c:	0800a928 	.word	0x0800a928

08001270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001282:	f000 fb55 	bl	8001930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40001000 	.word	0x40001000

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <lps22hh_init>:
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <lps22hh_init+0x88>)
 80012aa:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <lps22hh_init+0x8c>)
 80012ae:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &hi2c3;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <lps22hh_init+0x90>)
 80012b2:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80012b4:	200a      	movs	r0, #10
 80012b6:	f000 f8d5 	bl	8001464 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <lps22hh_init+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	491b      	ldr	r1, [pc, #108]	; (8001334 <lps22hh_init+0x94>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd98 	bl	8000dfc <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <lps22hh_init+0x94>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2bb3      	cmp	r3, #179	; 0xb3
 80012d2:	d000      	beq.n	80012d6 <lps22hh_init+0x36>
		while (1); /*manage here device not found */
 80012d4:	e7fe      	b.n	80012d4 <lps22hh_init+0x34>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fd9e 	bl	8000e1e <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4914      	ldr	r1, [pc, #80]	; (8001338 <lps22hh_init+0x98>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fdbe 	bl	8000e6a <lps22hh_reset_get>
	} while (rst_lps22hh);
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <lps22hh_init+0x98>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f5      	bne.n	80012e2 <lps22hh_init+0x42>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fcbd 	bl	8000c7c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_10_Hz_LOW_NOISE);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2112      	movs	r1, #18
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fcdd 	bl	8000cc8 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	461c      	mov	r4, r3
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800131a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	080013f1 	.word	0x080013f1
 800132c:	0800142b 	.word	0x0800142b
 8001330:	20001be0 	.word	0x20001be0
 8001334:	2000020a 	.word	0x2000020a
 8001338:	2000020b 	.word	0x2000020b

0800133c <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	1d3c      	adds	r4, r7, #4
 8001344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001348:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800134a:	f107 0214 	add.w	r2, r7, #20
 800134e:	1d38      	adds	r0, r7, #4
 8001350:	2301      	movs	r3, #1
 8001352:	2127      	movs	r1, #39	; 0x27
 8001354:	f7ff fc30 	bl	8000bb8 <lps22hh_read_reg>

	if (reg.status.p_da) {
 8001358:	7d3b      	ldrb	r3, [r7, #20]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d011      	beq.n	8001388 <get_pressure+0x4c>
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <get_pressure+0x54>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4908      	ldr	r1, [pc, #32]	; (8001390 <get_pressure+0x54>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fcf8 	bl	8000d64 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <get_pressure+0x54>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc4d 	bl	8000c18 <lps22hh_from_lsb_to_hpa>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	20000204 	.word	0x20000204

08001394 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	1d3c      	adds	r4, r7, #4
 800139c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013a0:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80013a2:	f107 0214 	add.w	r2, r7, #20
 80013a6:	1d38      	adds	r0, r7, #4
 80013a8:	2301      	movs	r3, #1
 80013aa:	2127      	movs	r1, #39	; 0x27
 80013ac:	f7ff fc04 	bl	8000bb8 <lps22hh_read_reg>

	if (reg.status.t_da) {
 80013b0:	7d3b      	ldrb	r3, [r7, #20]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d012      	beq.n	80013e2 <get_temperature+0x4e>
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <get_temperature+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4909      	ldr	r1, [pc, #36]	; (80013ec <get_temperature+0x58>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fcf5 	bl	8000db6 <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <get_temperature+0x58>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc38 	bl	8000c48 <lps22hh_from_lsb_to_celsius>
 80013d8:	eef0 7a40 	vmov.f32	s15, s0
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000208 	.word	0x20000208

080013f0 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	461a      	mov	r2, r3
 80013fc:	460b      	mov	r3, r1
 80013fe:	72fb      	strb	r3, [r7, #11]
 8001400:	4613      	mov	r3, r2
 8001402:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 8001404:	7afb      	ldrb	r3, [r7, #11]
 8001406:	b29a      	uxth	r2, r3
 8001408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	893b      	ldrh	r3, [r7, #8]
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	21bb      	movs	r1, #187	; 0xbb
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fdc8 	bl	8001fb0 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b088      	sub	sp, #32
 800142e:	af04      	add	r7, sp, #16
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	461a      	mov	r2, r3
 8001436:	460b      	mov	r3, r1
 8001438:	72fb      	strb	r3, [r7, #11]
 800143a:	4613      	mov	r3, r2
 800143c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	b29a      	uxth	r2, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	893b      	ldrh	r3, [r7, #8]
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	21bb      	movs	r1, #187	; 0xbb
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 febf 	bl	80021d8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa7f 	bl	8001970 <HAL_Delay>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_MspInit+0x4c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_MspInit+0x4c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_MspInit+0x4c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_MspInit+0x4c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	210f      	movs	r1, #15
 80014b6:	f06f 0001 	mvn.w	r0, #1
 80014ba:	f000 fb35 	bl	8001b28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_I2C_MspInit+0xb8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d146      	bne.n	800157c <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a25      	ldr	r2, [pc, #148]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 80014f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014f8:	6153      	str	r3, [r2, #20]
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	6153      	str	r3, [r2, #20]
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001530:	2303      	movs	r3, #3
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <HAL_I2C_MspInit+0xc0>)
 800153c:	f000 fb1e 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001546:	2312      	movs	r3, #18
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001552:	2303      	movs	r3, #3
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f000 fb0c 	bl	8001b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 800156a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800156e:	61d3      	str	r3, [r2, #28]
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_I2C_MspInit+0xbc>)
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40007800 	.word	0x40007800
 8001588:	40021000 	.word	0x40021000
 800158c:	48000800 	.word	0x48000800

08001590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_UART_MspInit+0x7c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d128      	bne.n	8001604 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e2:	230c      	movs	r3, #12
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f2:	2307      	movs	r3, #7
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f000 fabc 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40004400 	.word	0x40004400
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	2036      	movs	r0, #54	; 0x36
 800162a:	f000 fa7d 	bl	8001b28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800162e:	2036      	movs	r0, #54	; 0x36
 8001630:	f000 fa96 	bl	8001b60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <HAL_InitTick+0x9c>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_InitTick+0x9c>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	61d3      	str	r3, [r2, #28]
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_InitTick+0x9c>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fae8 	bl	8003c2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800165c:	f002 faa2 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8001660:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <HAL_InitTick+0xa0>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9b      	lsrs	r3, r3, #18
 800166c:	3b01      	subs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_InitTick+0xa4>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <HAL_InitTick+0xa8>)
 8001674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_InitTick+0xa4>)
 8001678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800167c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_InitTick+0xa4>)
 8001680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001682:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_InitTick+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_InitTick+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <HAL_InitTick+0xa4>)
 8001692:	f002 fd1b 	bl	80040cc <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <HAL_InitTick+0xa4>)
 800169e:	f002 fd77 	bl	8004190 <HAL_TIM_Base_Start_IT>
 80016a2:	4603      	mov	r3, r0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3730      	adds	r7, #48	; 0x30
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	20004dec 	.word	0x20004dec
 80016bc:	40001000 	.word	0x40001000

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM6_DAC_IRQHandler+0x10>)
 80016f2:	f002 fdbd 	bl	8004270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20004dec 	.word	0x20004dec

08001700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_kill>:

int _kill(int pid, int sig)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171a:	f006 f987 	bl	8007a2c <__errno>
 800171e:	4603      	mov	r3, r0
 8001720:	2216      	movs	r2, #22
 8001722:	601a      	str	r2, [r3, #0]
	return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_exit>:

void _exit (int status)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffe7 	bl	8001710 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001742:	e7fe      	b.n	8001742 <_exit+0x12>

08001744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e00a      	b.n	800176c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001756:	f3af 8000 	nop.w
 800175a:	4601      	mov	r1, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf0      	blt.n	8001756 <_read+0x12>
	}

return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e009      	b.n	80017a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf1      	blt.n	8001790 <_write+0x12>
	}
	return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_close>:

int _close(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017de:	605a      	str	r2, [r3, #4]
	return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_isatty>:

int _isatty(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f006 f8ec 	bl	8007a2c <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20010000 	.word	0x20010000
 8001880:	00000400 	.word	0x00000400
 8001884:	2000020c 	.word	0x2000020c
 8001888:	20004e90 	.word	0x20004e90

0800188c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <LoopForever+0x6>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	; (80018f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <LoopForever+0xe>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	; (80018fc <LoopForever+0x16>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018da:	f7ff ffd7 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f006 f9a1 	bl	8007c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e2:	f7ff faeb 	bl	8000ebc <main>

080018e6 <LoopForever>:

LoopForever:
    b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018f4:	0800ade4 	.word	0x0800ade4
  ldr r2, =_sbss
 80018f8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018fc:	20004e8c 	.word	0x20004e8c

08001900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_2_IRQHandler>
	...

08001904 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_Init+0x28>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_Init+0x28>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f8fc 	bl	8001b12 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fe7a 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fdac 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008
 8001954:	20004e38 	.word	0x20004e38

08001958 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;  
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20004e38 	.word	0x20004e38

08001970 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffde 	bl	8001958 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <__NVIC_EnableIRQ+0x38>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff4c 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3a:	f7ff ff61 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	6978      	ldr	r0, [r7, #20]
 8001b46:	f7ff ffb1 	bl	8001aac <NVIC_EncodePriority>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff80 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff54 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e160      	b.n	8001e4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8152 	beq.w	8001e48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x40>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0203 	and.w	r2, r3, #3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80ac 	beq.w	8001e48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d08:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <HAL_GPIO_Init+0x2f4>)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d32:	d025      	beq.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_GPIO_Init+0x2f8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d01f      	beq.n	8001d7c <HAL_GPIO_Init+0x200>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a4e      	ldr	r2, [pc, #312]	; (8001e78 <HAL_GPIO_Init+0x2fc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d019      	beq.n	8001d78 <HAL_GPIO_Init+0x1fc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a4d      	ldr	r2, [pc, #308]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_GPIO_Init+0x1f8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00d      	beq.n	8001d70 <HAL_GPIO_Init+0x1f4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_GPIO_Init+0x308>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_GPIO_Init+0x30c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_GPIO_Init+0x1ec>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e00c      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d68:	2307      	movs	r3, #7
 8001d6a:	e00a      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d92:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_GPIO_Init+0x2f4>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da0:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dc4:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dee:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f ae97 	bne.w	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48000c00 	.word	0x48000c00
 8001e80:	48001000 	.word	0x48001000
 8001e84:	48001400 	.word	0x48001400
 8001e88:	48001800 	.word	0x48001800
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e081      	b.n	8001fa6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fb08 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	; 0x24
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	e006      	b.n	8001f18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d104      	bne.n	8001f2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69d9      	ldr	r1, [r3, #28]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	817b      	strh	r3, [r7, #10]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	813b      	strh	r3, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	f040 80f9 	bne.w	80021ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x34>
 8001fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0ed      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2C_Mem_Write+0x4e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0e6      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002006:	f7ff fca7 	bl	8001958 <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2319      	movs	r3, #25
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fac3 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d1      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2221      	movs	r2, #33	; 0x21
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2240      	movs	r2, #64	; 0x40
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a3a      	ldr	r2, [r7, #32]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002050:	88f8      	ldrh	r0, [r7, #6]
 8002052:	893a      	ldrh	r2, [r7, #8]
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4603      	mov	r3, r0
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f9d3 	bl	800240c <I2C_RequestMemoryWrite>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0a9      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	d90e      	bls.n	80020a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	22ff      	movs	r2, #255	; 0xff
 8002086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	b2da      	uxtb	r2, r3
 800208e:	8979      	ldrh	r1, [r7, #10]
 8002090:	2300      	movs	r3, #0
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 fbb5 	bl	8002808 <I2C_TransferConfig>
 800209e:	e00f      	b.n	80020c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	8979      	ldrh	r1, [r7, #10]
 80020b2:	2300      	movs	r3, #0
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fba4 	bl	8002808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 faad 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e07b      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d034      	beq.n	8002178 <HAL_I2C_Mem_Write+0x1c8>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	2b00      	cmp	r3, #0
 8002114:	d130      	bne.n	8002178 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	2200      	movs	r2, #0
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 fa3f 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e04d      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2bff      	cmp	r3, #255	; 0xff
 8002138:	d90e      	bls.n	8002158 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	22ff      	movs	r2, #255	; 0xff
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb59 	bl	8002808 <I2C_TransferConfig>
 8002156:	e00f      	b.n	8002178 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	b2da      	uxtb	r2, r3
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fb48 	bl	8002808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d19e      	bne.n	80020c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa8c 	bl	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e01a      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2220      	movs	r2, #32
 800219c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_I2C_Mem_Write+0x224>)
 80021aa:	400b      	ands	r3, r1
 80021ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	fe00e800 	.word	0xfe00e800

080021d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af02      	add	r7, sp, #8
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	817b      	strh	r3, [r7, #10]
 80021ea:	460b      	mov	r3, r1
 80021ec:	813b      	strh	r3, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	f040 80fd 	bne.w	80023fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_I2C_Mem_Read+0x34>
 8002206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002212:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0f1      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_I2C_Mem_Read+0x4e>
 8002222:	2302      	movs	r3, #2
 8002224:	e0ea      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800222e:	f7ff fb93 	bl	8001958 <HAL_GetTick>
 8002232:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2319      	movs	r3, #25
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f9af 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d5      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2222      	movs	r2, #34	; 0x22
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002278:	88f8      	ldrh	r0, [r7, #6]
 800227a:	893a      	ldrh	r2, [r7, #8]
 800227c:	8979      	ldrh	r1, [r7, #10]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	4603      	mov	r3, r0
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f913 	bl	80024b4 <I2C_RequestMemoryRead>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0ad      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2bff      	cmp	r3, #255	; 0xff
 80022a8:	d90e      	bls.n	80022c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	22ff      	movs	r2, #255	; 0xff
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	8979      	ldrh	r1, [r7, #10]
 80022b8:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_I2C_Mem_Read+0x22c>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 faa1 	bl	8002808 <I2C_TransferConfig>
 80022c6:	e00f      	b.n	80022e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_I2C_Mem_Read+0x22c>)
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa90 	bl	8002808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	2200      	movs	r2, #0
 80022f0:	2104      	movs	r1, #4
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f956 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07c      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d034      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x1d0>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d130      	bne.n	80023a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	2200      	movs	r2, #0
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f927 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e04d      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d90e      	bls.n	8002388 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	b2da      	uxtb	r2, r3
 8002376:	8979      	ldrh	r1, [r7, #10]
 8002378:	2300      	movs	r3, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fa41 	bl	8002808 <I2C_TransferConfig>
 8002386:	e00f      	b.n	80023a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	b2da      	uxtb	r2, r3
 8002398:	8979      	ldrh	r1, [r7, #10]
 800239a:	2300      	movs	r3, #0
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fa30 	bl	8002808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d19a      	bne.n	80022e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f974 	bl	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01a      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2220      	movs	r2, #32
 80023cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_I2C_Mem_Read+0x230>)
 80023da:	400b      	ands	r3, r1
 80023dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	80002400 	.word	0x80002400
 8002408:	fe00e800 	.word	0xfe00e800

0800240c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4603      	mov	r3, r0
 800241c:	817b      	strh	r3, [r7, #10]
 800241e:	460b      	mov	r3, r1
 8002420:	813b      	strh	r3, [r7, #8]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	8979      	ldrh	r1, [r7, #10]
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <I2C_RequestMemoryWrite+0xa4>)
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f9e7 	bl	8002808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	69b9      	ldr	r1, [r7, #24]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f8f0 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e02c      	b.n	80024a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002454:	893b      	ldrh	r3, [r7, #8]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
 800245e:	e015      	b.n	800248c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002460:	893b      	ldrh	r3, [r7, #8]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	b29b      	uxth	r3, r3
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f8d6 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e012      	b.n	80024a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002482:	893b      	ldrh	r3, [r7, #8]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2200      	movs	r2, #0
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f884 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	80002000 	.word	0x80002000

080024b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	817b      	strh	r3, [r7, #10]
 80024c6:	460b      	mov	r3, r1
 80024c8:	813b      	strh	r3, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <I2C_RequestMemoryRead+0xa4>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f994 	bl	8002808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f89d 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e02c      	b.n	800254e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024fa:	893b      	ldrh	r3, [r7, #8]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
 8002504:	e015      	b.n	8002532 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002506:	893b      	ldrh	r3, [r7, #8]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	b29b      	uxth	r3, r3
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f883 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e012      	b.n	800254e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002528:	893b      	ldrh	r3, [r7, #8]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2200      	movs	r2, #0
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f831 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	80002000 	.word	0x80002000

0800255c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d103      	bne.n	800257a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	619a      	str	r2, [r3, #24]
  }
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	e022      	b.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025bc:	d01e      	beq.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7ff f9cb 	bl	8001958 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d113      	bne.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e00f      	b.n	800261c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	429a      	cmp	r2, r3
 8002618:	d0cd      	beq.n	80025b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002630:	e02c      	b.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f870 	bl	800271c <I2C_IsAcknowledgeFailed>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e02a      	b.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264c:	d01e      	beq.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264e:	f7ff f983 	bl	8001958 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d113      	bne.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e007      	b.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d1cb      	bne.n	8002632 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b0:	e028      	b.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f830 	bl	800271c <I2C_IsAcknowledgeFailed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e026      	b.n	8002714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c6:	f7ff f947 	bl	8001958 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d113      	bne.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b20      	cmp	r3, #32
 8002710:	d1cf      	bne.n	80026b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b10      	cmp	r3, #16
 8002734:	d161      	bne.n	80027fa <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002744:	d02b      	beq.n	800279e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002754:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002756:	e022      	b.n	800279e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275e:	d01e      	beq.n	800279e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002760:	f7ff f8fa 	bl	8001958 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d302      	bcc.n	8002776 <I2C_IsAcknowledgeFailed+0x5a>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d113      	bne.n	800279e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e02e      	b.n	80027fc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d1d5      	bne.n	8002758 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2220      	movs	r2, #32
 80027ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff fecd 	bl	800255c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <I2C_IsAcknowledgeFailed+0xe8>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f043 0204 	orr.w	r2, r3, #4
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	fe00e800 	.word	0xfe00e800

08002808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	817b      	strh	r3, [r7, #10]
 8002816:	4613      	mov	r3, r2
 8002818:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	0d5b      	lsrs	r3, r3, #21
 8002824:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <I2C_TransferConfig+0x58>)
 800282a:	430b      	orrs	r3, r1
 800282c:	43db      	mvns	r3, r3
 800282e:	ea02 0103 	and.w	r1, r2, r3
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002838:	7a7b      	ldrb	r3, [r7, #9]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	431a      	orrs	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	03ff63ff 	.word	0x03ff63ff

08002864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b20      	cmp	r3, #32
 8002878:	d138      	bne.n	80028ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002884:	2302      	movs	r3, #2
 8002886:	e032      	b.n	80028ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6819      	ldr	r1, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e000      	b.n	80028ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b20      	cmp	r3, #32
 800290e:	d139      	bne.n	8002984 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800291a:	2302      	movs	r3, #2
 800291c:	e033      	b.n	8002986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2224      	movs	r2, #36	; 0x24
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800294c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800299a:	af00      	add	r7, sp, #0
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f000 bf01 	b.w	80037b0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8160 	beq.w	8002c7e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029be:	4bae      	ldr	r3, [pc, #696]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d00c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ca:	4bab      	ldr	r3, [pc, #684]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d159      	bne.n	8002a8a <HAL_RCC_OscConfig+0xf6>
 80029d6:	4ba8      	ldr	r3, [pc, #672]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d152      	bne.n	8002a8a <HAL_RCC_OscConfig+0xf6>
 80029e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_OscConfig+0x82>
 8002a10:	4b99      	ldr	r3, [pc, #612]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	e015      	b.n	8002a42 <HAL_RCC_OscConfig+0xae>
 8002a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a3e:	4b8e      	ldr	r3, [pc, #568]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a46:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002a4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002a56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8102 	beq.w	8002c7c <HAL_RCC_OscConfig+0x2e8>
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 80fc 	bne.w	8002c7c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f000 be93 	b.w	80037b0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x110>
 8002a96:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e030      	b.n	8002b06 <HAL_RCC_OscConfig+0x172>
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x134>
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a71      	ldr	r2, [pc, #452]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01e      	b.n	8002b06 <HAL_RCC_OscConfig+0x172>
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x15a>
 8002ad4:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a67      	ldr	r2, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a64      	ldr	r2, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x172>
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a61      	ldr	r2, [pc, #388]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d059      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe ff22 	bl	8001958 <HAL_GetTick>
 8002b14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1a:	f7fe ff1d 	bl	8001958 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d902      	bls.n	8002b30 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	f000 be40 	b.w	80037b0 <HAL_RCC_OscConfig+0xe1c>
 8002b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b34:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002b44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_OscConfig+0x1ce>
 8002b5c:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e015      	b.n	8002b8e <HAL_RCC_OscConfig+0x1fa>
 8002b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002b76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b92:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002b96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002b9a:	fa92 f2a2 	rbit	r2, r2
 8002b9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002ba2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ba6:	fab2 f282 	clz	r2, r2
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f042 0220 	orr.w	r2, r2, #32
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	f002 021f 	and.w	r2, r2, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0ab      	beq.n	8002b1a <HAL_RCC_OscConfig+0x186>
 8002bc2:	e05c      	b.n	8002c7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fec8 	bl	8001958 <HAL_GetTick>
 8002bc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bce:	f7fe fec3 	bl	8001958 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d902      	bls.n	8002be4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	f000 bde6 	b.w	80037b0 <HAL_RCC_OscConfig+0xe1c>
 8002be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002bf8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCC_OscConfig+0x282>
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_OscConfig+0x2ae>
 8002c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCC_OscConfig+0x2e4>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002c4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002c56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f042 0220 	orr.w	r2, r2, #32
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f002 021f 	and.w	r2, r2, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ab      	bne.n	8002bce <HAL_RCC_OscConfig+0x23a>
 8002c76:	e002      	b.n	8002c7e <HAL_RCC_OscConfig+0x2ea>
 8002c78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8170 	beq.w	8002f6e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c8e:	4bd0      	ldr	r3, [pc, #832]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c9a:	4bcd      	ldr	r3, [pc, #820]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d16d      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3ee>
 8002ca6:	4bca      	ldr	r3, [pc, #808]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d166      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3ee>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002cc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x350>
 8002cde:	4bbc      	ldr	r3, [pc, #752]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e013      	b.n	8002d0c <HAL_RCC_OscConfig+0x378>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cfc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d08:	4bb1      	ldr	r3, [pc, #708]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002d12:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002d16:	fa92 f2a2 	rbit	r2, r2
 8002d1a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002d1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f002 021f 	and.w	r2, r2, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3ba>
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d002      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f000 bd31 	b.w	80037b0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4ba0      	ldr	r3, [pc, #640]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	21f8      	movs	r1, #248	; 0xf8
 8002d5e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002d66:	fa91 f1a1 	rbit	r1, r1
 8002d6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002d6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d72:	fab1 f181 	clz	r1, r1
 8002d76:	b2c9      	uxtb	r1, r1
 8002d78:	408b      	lsls	r3, r1
 8002d7a:	4995      	ldr	r1, [pc, #596]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d80:	e0f5      	b.n	8002f6e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8085 	beq.w	8002e98 <HAL_RCC_OscConfig+0x504>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002da0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	461a      	mov	r2, r3
 8002db6:	2301      	movs	r3, #1
 8002db8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe fdcd 	bl	8001958 <HAL_GetTick>
 8002dbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fdc8 	bl	8001958 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d902      	bls.n	8002dda <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f000 bceb 	b.w	80037b0 <HAL_RCC_OscConfig+0xe1c>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002dec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x476>
 8002e04:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e013      	b.n	8002e32 <HAL_RCC_OscConfig+0x49e>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e22:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e2e:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2202      	movs	r2, #2
 8002e34:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002e38:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002e44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0220 	orr.w	r2, r2, #32
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0af      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b5a      	ldr	r3, [pc, #360]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	21f8      	movs	r1, #248	; 0xf8
 8002e74:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002e7c:	fa91 f1a1 	rbit	r1, r1
 8002e80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002e84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e88:	fab1 f181 	clz	r1, r1
 8002e8c:	b2c9      	uxtb	r1, r1
 8002e8e:	408b      	lsls	r3, r1
 8002e90:	494f      	ldr	r1, [pc, #316]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
 8002e96:	e06a      	b.n	8002f6e <HAL_RCC_OscConfig+0x5da>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002eaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fd48 	bl	8001958 <HAL_GetTick>
 8002ec8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ece:	f7fe fd43 	bl	8001958 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d902      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	f000 bc66 	b.w	80037b0 <HAL_RCC_OscConfig+0xe1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002ef6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0x580>
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x5a8>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002f26:	2302      	movs	r3, #2
 8002f28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_OscConfig+0x63c>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002f42:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002f46:	fa92 f2a2 	rbit	r2, r2
 8002f4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002f4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f52:	fab2 f282 	clz	r2, r2
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f042 0220 	orr.w	r2, r2, #32
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f002 021f 	and.w	r2, r2, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1af      	bne.n	8002ece <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80da 	beq.w	8003132 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d069      	beq.n	800305c <HAL_RCC_OscConfig+0x6c8>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_OscConfig+0x640>)
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	2301      	movs	r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fcd1 	bl	8001958 <HAL_GetTick>
 8002fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	e00d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fccc 	bl	8001958 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d905      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e3ef      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	10908120 	.word	0x10908120
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003008:	2202      	movs	r2, #2
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800301a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301c:	4ba4      	ldr	r3, [pc, #656]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 800301e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003020:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003024:	2102      	movs	r1, #2
 8003026:	6019      	str	r1, [r3, #0]
 8003028:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f1a3 	rbit	r1, r3
 8003032:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003036:	6019      	str	r1, [r3, #0]
  return result;
 8003038:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0b0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x628>
 800305a:	e06a      	b.n	8003132 <HAL_RCC_OscConfig+0x79e>
 800305c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003072:	601a      	str	r2, [r3, #0]
  return result;
 8003074:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003078:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4b8c      	ldr	r3, [pc, #560]	; (80032b4 <HAL_RCC_OscConfig+0x920>)
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	2300      	movs	r3, #0
 800308c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fe fc63 	bl	8001958 <HAL_GetTick>
 8003092:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003096:	e009      	b.n	80030ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fc5e 	bl	8001958 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e381      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
 80030ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030b0:	2202      	movs	r2, #2
 80030b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030e0:	2202      	movs	r2, #2
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b6e      	ldr	r3, [pc, #440]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80030f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030fc:	2102      	movs	r1, #2
 80030fe:	6019      	str	r1, [r3, #0]
 8003100:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fa93 f1a3 	rbit	r1, r3
 800310a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800310e:	6019      	str	r1, [r3, #0]
  return result;
 8003110:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2101      	movs	r1, #1
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1b2      	bne.n	8003098 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8157 	beq.w	80033f0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003148:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d112      	bne.n	800317a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	4b56      	ldr	r3, [pc, #344]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	4a55      	ldr	r2, [pc, #340]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	61d3      	str	r3, [r2, #28]
 8003160:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <HAL_RCC_OscConfig+0x924>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11a      	bne.n	80031bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCC_OscConfig+0x924>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <HAL_RCC_OscConfig+0x924>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe fbe1 	bl	8001958 <HAL_GetTick>
 8003196:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	e009      	b.n	80031b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fe fbdc 	bl	8001958 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b64      	cmp	r3, #100	; 0x64
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e2ff      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x924>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ef      	beq.n	800319c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031bc:	1d3b      	adds	r3, r7, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x840>
 80031c6:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a39      	ldr	r2, [pc, #228]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	e02f      	b.n	8003234 <HAL_RCC_OscConfig+0x8a0>
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x864>
 80031de:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a33      	ldr	r2, [pc, #204]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a30      	ldr	r2, [pc, #192]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	e01d      	b.n	8003234 <HAL_RCC_OscConfig+0x8a0>
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x888>
 8003202:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6213      	str	r3, [r2, #32]
 800320e:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6213      	str	r3, [r2, #32]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x8a0>
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 800322e:	f023 0304 	bic.w	r3, r3, #4
 8003232:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d06a      	beq.n	8003314 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe fb8b 	bl	8001958 <HAL_GetTick>
 8003242:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe fb86 	bl	8001958 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e2a7      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
 8003260:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003264:	2202      	movs	r2, #2
 8003266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f2a3 	rbit	r2, r3
 8003272:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800328e:	601a      	str	r2, [r3, #0]
  return result;
 8003290:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003294:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d108      	bne.n	80032bc <HAL_RCC_OscConfig+0x928>
 80032aa:	4b01      	ldr	r3, [pc, #4]	; (80032b0 <HAL_RCC_OscConfig+0x91c>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0x944>
 80032b0:	40021000 	.word	0x40021000
 80032b4:	10908120 	.word	0x10908120
 80032b8:	40007000 	.word	0x40007000
 80032bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032c0:	2202      	movs	r2, #2
 80032c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fa93 f2a3 	rbit	r2, r3
 80032ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	4bc0      	ldr	r3, [pc, #768]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80032dc:	2102      	movs	r1, #2
 80032de:	6011      	str	r1, [r2, #0]
 80032e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	fa92 f1a2 	rbit	r1, r2
 80032ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032ee:	6011      	str	r1, [r2, #0]
  return result;
 80032f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f002 021f 	and.w	r2, r2, #31
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d09a      	beq.n	8003248 <HAL_RCC_OscConfig+0x8b4>
 8003312:	e063      	b.n	80033dc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fe fb20 	bl	8001958 <HAL_GetTick>
 8003318:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fb1b 	bl	8001958 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e23c      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
 8003336:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800333a:	2202      	movs	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f2a3 	rbit	r2, r3
 8003348:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003352:	2202      	movs	r2, #2
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fa93 f2a3 	rbit	r2, r3
 8003360:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003364:	601a      	str	r2, [r3, #0]
  return result;
 8003366:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800336a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d102      	bne.n	8003386 <HAL_RCC_OscConfig+0x9f2>
 8003380:	4b95      	ldr	r3, [pc, #596]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	e00d      	b.n	80033a2 <HAL_RCC_OscConfig+0xa0e>
 8003386:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800338a:	2202      	movs	r2, #2
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	4b8e      	ldr	r3, [pc, #568]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80033a6:	2102      	movs	r1, #2
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	fa92 f1a2 	rbit	r1, r2
 80033b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033b8:	6011      	str	r1, [r2, #0]
  return result;
 80033ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	fab2 f282 	clz	r2, r2
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	f002 021f 	and.w	r2, r2, #31
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f202 	lsl.w	r2, r1, r2
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1a0      	bne.n	800331e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033dc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e4:	4b7c      	ldr	r3, [pc, #496]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a7b      	ldr	r2, [pc, #492]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 81d9 	beq.w	80037ae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	f000 81a6 	beq.w	8003756 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	2b02      	cmp	r3, #2
 8003412:	f040 811e 	bne.w	8003652 <HAL_RCC_OscConfig+0xcbe>
 8003416:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800341a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800341e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800342e:	601a      	str	r2, [r3, #0]
  return result;
 8003430:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003434:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003440:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	461a      	mov	r2, r3
 8003448:	2300      	movs	r3, #0
 800344a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fa84 	bl	8001958 <HAL_GetTick>
 8003450:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003454:	e009      	b.n	800346a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fa7f 	bl	8001958 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1a2      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
 800346a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800346e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003482:	601a      	str	r2, [r3, #0]
  return result;
 8003484:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003488:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_RCC_OscConfig+0xb10>
 800349e:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	e01b      	b.n	80034dc <HAL_RCC_OscConfig+0xb48>
 80034a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fa93 f2a3 	rbit	r2, r3
 80034d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80034e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034e4:	6011      	str	r1, [r2, #0]
 80034e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	fa92 f1a2 	rbit	r1, r2
 80034f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034f4:	6011      	str	r1, [r2, #0]
  return result;
 80034f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f042 0220 	orr.w	r2, r2, #32
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f002 021f 	and.w	r2, r2, #31
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f202 	lsl.w	r2, r1, r2
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d19e      	bne.n	8003456 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003518:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	f023 020f 	bic.w	r2, r3, #15
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	492c      	ldr	r1, [pc, #176]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 8003528:	4313      	orrs	r3, r2
 800352a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a19      	ldr	r1, [r3, #32]
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	430b      	orrs	r3, r1
 8003542:	4925      	ldr	r1, [pc, #148]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800354c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003560:	601a      	str	r2, [r3, #0]
  return result;
 8003562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003566:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003572:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	461a      	mov	r2, r3
 800357a:	2301      	movs	r3, #1
 800357c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fe f9eb 	bl	8001958 <HAL_GetTick>
 8003582:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003586:	e009      	b.n	800359c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe f9e6 	bl	8001958 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e109      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
 800359c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	fa93 f2a3 	rbit	r2, r3
 80035b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035b4:	601a      	str	r2, [r3, #0]
  return result;
 80035b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_RCC_OscConfig+0xc48>
 80035d0:	4b01      	ldr	r3, [pc, #4]	; (80035d8 <HAL_RCC_OscConfig+0xc44>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	e01e      	b.n	8003614 <HAL_RCC_OscConfig+0xc80>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f2a3 	rbit	r2, r3
 80035f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_OscConfig+0xe28>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	fa92 f1a2 	rbit	r1, r2
 8003628:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800362c:	6011      	str	r1, [r2, #0]
  return result;
 800362e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	fab2 f282 	clz	r2, r2
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f002 021f 	and.w	r2, r2, #31
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d09b      	beq.n	8003588 <HAL_RCC_OscConfig+0xbf4>
 8003650:	e0ad      	b.n	80037ae <HAL_RCC_OscConfig+0xe1a>
 8003652:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003656:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800365a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800366a:	601a      	str	r2, [r3, #0]
  return result;
 800366c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003670:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800367c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	461a      	mov	r2, r3
 8003684:	2300      	movs	r3, #0
 8003686:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe f966 	bl	8001958 <HAL_GetTick>
 800368c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003690:	e009      	b.n	80036a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe f961 	bl	8001958 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e084      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
 80036a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036be:	601a      	str	r2, [r3, #0]
  return result;
 80036c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HAL_RCC_OscConfig+0xd4c>
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <HAL_RCC_OscConfig+0xe28>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0xd84>
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f107 0320 	add.w	r3, r7, #32
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f107 031c 	add.w	r3, r7, #28
 80036fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	fa93 f2a3 	rbit	r2, r3
 800370e:	f107 0318 	add.w	r3, r7, #24
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_RCC_OscConfig+0xe28>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f107 0214 	add.w	r2, r7, #20
 800371c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003720:	6011      	str	r1, [r2, #0]
 8003722:	f107 0214 	add.w	r2, r7, #20
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	fa92 f1a2 	rbit	r1, r2
 800372c:	f107 0210 	add.w	r2, r7, #16
 8003730:	6011      	str	r1, [r2, #0]
  return result;
 8003732:	f107 0210 	add.w	r2, r7, #16
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	fab2 f282 	clz	r2, r2
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f042 0220 	orr.w	r2, r2, #32
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f002 021f 	and.w	r2, r2, #31
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f202 	lsl.w	r2, r1, r2
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d19e      	bne.n	8003692 <HAL_RCC_OscConfig+0xcfe>
 8003754:	e02b      	b.n	80037ae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e025      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0xe28>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_OscConfig+0xe28>)
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003774:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003778:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	429a      	cmp	r2, r3
 8003784:	d111      	bne.n	80037aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003786:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800378a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003794:	429a      	cmp	r2, r3
 8003796:	d108      	bne.n	80037aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b09e      	sub	sp, #120	; 0x78
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e162      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b90      	ldr	r3, [pc, #576]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d910      	bls.n	8003808 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b8d      	ldr	r3, [pc, #564]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0207 	bic.w	r2, r3, #7
 80037ee:	498b      	ldr	r1, [pc, #556]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b89      	ldr	r3, [pc, #548]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e14a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b82      	ldr	r3, [pc, #520]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	497f      	ldr	r1, [pc, #508]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80dc 	beq.w	80039ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d13c      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xf6>
 800383c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003840:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d102      	bne.n	8003866 <HAL_RCC_ClockConfig+0xa6>
 8003860:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	e00f      	b.n	8003886 <HAL_RCC_ClockConfig+0xc6>
 8003866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	667b      	str	r3, [r7, #100]	; 0x64
 8003874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003878:	663b      	str	r3, [r7, #96]	; 0x60
 800387a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800388a:	65ba      	str	r2, [r7, #88]	; 0x58
 800388c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388e:	fa92 f2a2 	rbit	r2, r2
 8003892:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d17b      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0f3      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d13c      	bne.n	8003938 <HAL_RCC_ClockConfig+0x178>
 80038be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x128>
 80038e2:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_ClockConfig+0x148>
 80038e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	647b      	str	r3, [r7, #68]	; 0x44
 80038f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003904:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800390c:	63ba      	str	r2, [r7, #56]	; 0x38
 800390e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003910:	fa92 f2a2 	rbit	r2, r2
 8003914:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d13a      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0b2      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
 8003938:	2302      	movs	r3, #2
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_RCC_ClockConfig+0x1a0>
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e00d      	b.n	800397c <HAL_RCC_ClockConfig+0x1bc>
 8003960:	2302      	movs	r3, #2
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	2302      	movs	r3, #2
 800396e:	623b      	str	r3, [r7, #32]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2202      	movs	r2, #2
 800397e:	61ba      	str	r2, [r7, #24]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	fa92 f2a2 	rbit	r2, r2
 8003986:	617a      	str	r2, [r7, #20]
  return result;
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	fab2 f282 	clz	r2, r2
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f042 0220 	orr.w	r2, r2, #32
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f002 021f 	and.w	r2, r2, #31
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e079      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	491a      	ldr	r1, [pc, #104]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039bc:	f7fd ffcc 	bl	8001958 <HAL_GetTick>
 80039c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fd ffc8 	bl	8001958 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e061      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d214      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 0207 	bic.w	r2, r3, #7
 8003a02:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e040      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	491a      	ldr	r1, [pc, #104]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4e:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4912      	ldr	r1, [pc, #72]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a62:	f000 f829 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4601      	mov	r1, r0
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a70:	22f0      	movs	r2, #240	; 0xf0
 8003a72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	fa92 f2a2 	rbit	r2, r2
 8003a7a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	fab2 f282 	clz	r2, r2
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	40d3      	lsrs	r3, r2
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x2ec>)
 8003a88:	5cd3      	ldrb	r3, [r2, r3]
 8003a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_RCC_ClockConfig+0x2f0>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_RCC_ClockConfig+0x2f4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fdbc 	bl	8001614 <HAL_InitTick>
  
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3778      	adds	r7, #120	; 0x78
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	0800a9c4 	.word	0x0800a9c4
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	20000004 	.word	0x20000004

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b08b      	sub	sp, #44	; 0x2c
 8003abc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x36>
 8003ae6:	e03f      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aea:	623b      	str	r3, [r7, #32]
      break;
 8003aec:	e03f      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003af4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003af8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	fa92 f2a2 	rbit	r2, r2
 8003b00:	607a      	str	r2, [r7, #4]
  return result;
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	fab2 f282 	clz	r2, r2
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	40d3      	lsrs	r3, r2
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	fa92 f2a2 	rbit	r2, r2
 8003b24:	60fa      	str	r2, [r7, #12]
  return result;
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	fab2 f282 	clz	r2, r2
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	40d3      	lsrs	r3, r2
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b50:	e007      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b52:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	623b      	str	r3, [r7, #32]
      break;
 8003b66:	e002      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b6a:	623b      	str	r3, [r7, #32]
      break;
 8003b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	372c      	adds	r7, #44	; 0x2c
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	007a1200 	.word	0x007a1200
 8003b84:	0800a9dc 	.word	0x0800a9dc
 8003b88:	0800a9ec 	.word	0x0800a9ec

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000000 	.word	0x20000000

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003baa:	f7ff ffef 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bae:	4601      	mov	r1, r0
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	fa92 f2a2 	rbit	r2, r2
 8003bc4:	603a      	str	r2, [r7, #0]
  return result;
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	fab2 f282 	clz	r2, r2
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	40d3      	lsrs	r3, r2
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	0800a9d4 	.word	0x0800a9d4

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bee:	f7ff ffcd 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003bfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	fa92 f2a2 	rbit	r2, r2
 8003c08:	603a      	str	r2, [r7, #0]
  return result;
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	fab2 f282 	clz	r2, r2
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	40d3      	lsrs	r3, r2
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	0800a9d4 	.word	0x0800a9d4

08003c2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	220f      	movs	r2, #15
 8003c3a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_RCC_GetClockConfig+0x60>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40022000 	.word	0x40022000

08003c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b092      	sub	sp, #72	; 0x48
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80d4 	beq.w	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb4:	4b4e      	ldr	r3, [pc, #312]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10e      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	4b4b      	ldr	r3, [pc, #300]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	61d3      	str	r3, [r2, #28]
 8003ccc:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b45      	ldr	r3, [pc, #276]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d118      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cea:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a41      	ldr	r2, [pc, #260]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf6:	f7fd fe2f 	bl	8001958 <HAL_GetTick>
 8003cfa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7fd fe2b 	bl	8001958 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	; 0x64
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1d6      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d1c:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8084 	beq.w	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d07c      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3c:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	461a      	mov	r2, r3
 8003d66:	2301      	movs	r3, #1
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d8e:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d04b      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fd fddb 	bl	8001958 <HAL_GetTick>
 8003da2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fd fdd7 	bl	8001958 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e180      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	2302      	movs	r3, #2
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	61fb      	str	r3, [r7, #28]
  return result;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d108      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003dea:	4b01      	ldr	r3, [pc, #4]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	e00d      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40007000 	.word	0x40007000
 8003df8:	10908100 	.word	0x10908100
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	4ba0      	ldr	r3, [pc, #640]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	613a      	str	r2, [r7, #16]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	fa92 f2a2 	rbit	r2, r2
 8003e16:	60fa      	str	r2, [r7, #12]
  return result;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	fab2 f282 	clz	r2, r2
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	f002 021f 	and.w	r2, r2, #31
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0b7      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e36:	4b95      	ldr	r3, [pc, #596]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4992      	ldr	r1, [pc, #584]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b8e      	ldr	r3, [pc, #568]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4a8d      	ldr	r2, [pc, #564]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e68:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f023 0203 	bic.w	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4985      	ldr	r1, [pc, #532]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e86:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	497e      	ldr	r1, [pc, #504]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ea4:	4b79      	ldr	r3, [pc, #484]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	4976      	ldr	r1, [pc, #472]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ec2:	4b72      	ldr	r3, [pc, #456]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	f023 0210 	bic.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	496f      	ldr	r1, [pc, #444]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	4967      	ldr	r1, [pc, #412]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f023 0220 	bic.w	r2, r3, #32
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4960      	ldr	r1, [pc, #384]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f1c:	4b5b      	ldr	r3, [pc, #364]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	4958      	ldr	r1, [pc, #352]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f3a:	4b54      	ldr	r3, [pc, #336]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	4951      	ldr	r1, [pc, #324]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4949      	ldr	r1, [pc, #292]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f76:	4b45      	ldr	r3, [pc, #276]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4942      	ldr	r1, [pc, #264]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f94:	4b3d      	ldr	r3, [pc, #244]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	493a      	ldr	r1, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003fb2:	4b36      	ldr	r3, [pc, #216]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	4933      	ldr	r1, [pc, #204]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fdc:	492b      	ldr	r1, [pc, #172]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003fee:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4924      	ldr	r1, [pc, #144]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800400c:	4b1f      	ldr	r3, [pc, #124]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	491c      	ldr	r1, [pc, #112]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	4915      	ldr	r1, [pc, #84]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	490d      	ldr	r1, [pc, #52]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	4906      	ldr	r1, [pc, #24]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004084:	4b01      	ldr	r3, [pc, #4]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	e002      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	490b      	ldr	r1, [pc, #44]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800409a:	4313      	orrs	r3, r2
 800409c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	4904      	ldr	r1, [pc, #16]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3748      	adds	r7, #72	; 0x48
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000

080040cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e049      	b.n	8004172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f841 	bl	800417a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 f9f8 	bl	8004500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d001      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e04f      	b.n	8004248 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a23      	ldr	r2, [pc, #140]	; (8004254 <HAL_TIM_Base_Start_IT+0xc4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x76>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d018      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x76>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <HAL_TIM_Base_Start_IT+0xc8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x76>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_TIM_Base_Start_IT+0xcc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x76>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x76>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_TIM_Base_Start_IT+0xd4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x76>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_TIM_Base_Start_IT+0xd8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d115      	bne.n	8004232 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_TIM_Base_Start_IT+0xdc>)
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d015      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0xb4>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d011      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	e008      	b.n	8004244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e000      	b.n	8004246 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40013400 	.word	0x40013400
 8004264:	40014000 	.word	0x40014000
 8004268:	40015000 	.word	0x40015000
 800426c:	00010007 	.word	0x00010007

08004270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0202 	mvn.w	r2, #2
 800429c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f905 	bl	80044c2 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8f7 	bl	80044ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f908 	bl	80044d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0204 	mvn.w	r2, #4
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8db 	bl	80044c2 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8cd 	bl	80044ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f8de 	bl	80044d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0208 	mvn.w	r2, #8
 8004344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2204      	movs	r2, #4
 800434a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8b1 	bl	80044c2 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8a3 	bl	80044ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f8b4 	bl	80044d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b10      	cmp	r3, #16
 8004380:	d122      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b10      	cmp	r3, #16
 800438e:	d11b      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0210 	mvn.w	r2, #16
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2208      	movs	r2, #8
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f887 	bl	80044c2 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f879 	bl	80044ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f88a 	bl	80044d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0201 	mvn.w	r2, #1
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc ff3e 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f918 	bl	8004650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d10e      	bne.n	800444e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d107      	bne.n	800444e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f90b 	bl	8004664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d10e      	bne.n	800447a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d107      	bne.n	800447a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f838 	bl	80044ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b20      	cmp	r3, #32
 8004486:	d10e      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b20      	cmp	r3, #32
 8004494:	d107      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f06f 0220 	mvn.w	r2, #32
 800449e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f8cb 	bl	800463c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a42      	ldr	r2, [pc, #264]	; (800461c <TIM_Base_SetConfig+0x11c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451e:	d00f      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3f      	ldr	r2, [pc, #252]	; (8004620 <TIM_Base_SetConfig+0x120>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00b      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a3e      	ldr	r2, [pc, #248]	; (8004624 <TIM_Base_SetConfig+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <TIM_Base_SetConfig+0x128>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3c      	ldr	r2, [pc, #240]	; (800462c <TIM_Base_SetConfig+0x12c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d108      	bne.n	8004552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a31      	ldr	r2, [pc, #196]	; (800461c <TIM_Base_SetConfig+0x11c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01f      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004560:	d01b      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2e      	ldr	r2, [pc, #184]	; (8004620 <TIM_Base_SetConfig+0x120>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d017      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2d      	ldr	r2, [pc, #180]	; (8004624 <TIM_Base_SetConfig+0x124>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <TIM_Base_SetConfig+0x128>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00f      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <TIM_Base_SetConfig+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00b      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <TIM_Base_SetConfig+0x134>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <TIM_Base_SetConfig+0x138>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a25      	ldr	r2, [pc, #148]	; (800462c <TIM_Base_SetConfig+0x12c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a12      	ldr	r2, [pc, #72]	; (800461c <TIM_Base_SetConfig+0x11c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <TIM_Base_SetConfig+0x100>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <TIM_Base_SetConfig+0x128>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00f      	beq.n	8004600 <TIM_Base_SetConfig+0x100>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <TIM_Base_SetConfig+0x130>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00b      	beq.n	8004600 <TIM_Base_SetConfig+0x100>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a12      	ldr	r2, [pc, #72]	; (8004634 <TIM_Base_SetConfig+0x134>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_Base_SetConfig+0x100>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a11      	ldr	r2, [pc, #68]	; (8004638 <TIM_Base_SetConfig+0x138>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_Base_SetConfig+0x100>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <TIM_Base_SetConfig+0x12c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	615a      	str	r2, [r3, #20]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40013400 	.word	0x40013400
 800462c:	40015000 	.word	0x40015000
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800

0800463c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e040      	b.n	800470c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc ff78 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f8c0 	bl	800483c <UART_SetConfig>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e022      	b.n	800470c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa8a 	bl	8004be8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fb11 	bl	8004d2c <UART_CheckIdleState>
 800470a:	4603      	mov	r3, r0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004728:	2b20      	cmp	r3, #32
 800472a:	f040 8082 	bne.w	8004832 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_Transmit+0x26>
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07a      	b.n	8004834 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_UART_Transmit+0x38>
 8004748:	2302      	movs	r3, #2
 800474a:	e073      	b.n	8004834 <HAL_UART_Transmit+0x120>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	; 0x21
 8004760:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004762:	f7fd f8f9 	bl	8001958 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d108      	bne.n	8004794 <HAL_UART_Transmit+0x80>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e003      	b.n	800479c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047a4:	e02d      	b.n	8004802 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2180      	movs	r1, #128	; 0x80
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fb04 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e039      	b.n	8004834 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	881a      	ldrh	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d2:	b292      	uxth	r2, r2
 80047d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	3302      	adds	r3, #2
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e008      	b.n	80047f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	b292      	uxth	r2, r2
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3301      	adds	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1cb      	bne.n	80047a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fad0 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e005      	b.n	8004834 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	e000      	b.n	8004834 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004832:	2302      	movs	r3, #2
  }
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4bab      	ldr	r3, [pc, #684]	; (8004b14 <UART_SetConfig+0x2d8>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	6979      	ldr	r1, [r7, #20]
 8004870:	430b      	orrs	r3, r1
 8004872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a99      	ldr	r2, [pc, #612]	; (8004b18 <UART_SetConfig+0x2dc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d120      	bne.n	80048fa <UART_SetConfig+0xbe>
 80048b8:	4b98      	ldr	r3, [pc, #608]	; (8004b1c <UART_SetConfig+0x2e0>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d817      	bhi.n	80048f4 <UART_SetConfig+0xb8>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0x90>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048ef 	.word	0x080048ef
 80048d8:	080048e3 	.word	0x080048e3
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e0b5      	b.n	8004a4e <UART_SetConfig+0x212>
 80048e2:	2302      	movs	r3, #2
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e0b2      	b.n	8004a4e <UART_SetConfig+0x212>
 80048e8:	2304      	movs	r3, #4
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e0af      	b.n	8004a4e <UART_SetConfig+0x212>
 80048ee:	2308      	movs	r3, #8
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e0ac      	b.n	8004a4e <UART_SetConfig+0x212>
 80048f4:	2310      	movs	r3, #16
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e0a9      	b.n	8004a4e <UART_SetConfig+0x212>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a88      	ldr	r2, [pc, #544]	; (8004b20 <UART_SetConfig+0x2e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d124      	bne.n	800494e <UART_SetConfig+0x112>
 8004904:	4b85      	ldr	r3, [pc, #532]	; (8004b1c <UART_SetConfig+0x2e0>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800490c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004910:	d011      	beq.n	8004936 <UART_SetConfig+0xfa>
 8004912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004916:	d817      	bhi.n	8004948 <UART_SetConfig+0x10c>
 8004918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491c:	d011      	beq.n	8004942 <UART_SetConfig+0x106>
 800491e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004922:	d811      	bhi.n	8004948 <UART_SetConfig+0x10c>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <UART_SetConfig+0xf4>
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d006      	beq.n	800493c <UART_SetConfig+0x100>
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x10c>
 8004930:	2300      	movs	r3, #0
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e08b      	b.n	8004a4e <UART_SetConfig+0x212>
 8004936:	2302      	movs	r3, #2
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e088      	b.n	8004a4e <UART_SetConfig+0x212>
 800493c:	2304      	movs	r3, #4
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e085      	b.n	8004a4e <UART_SetConfig+0x212>
 8004942:	2308      	movs	r3, #8
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e082      	b.n	8004a4e <UART_SetConfig+0x212>
 8004948:	2310      	movs	r3, #16
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e07f      	b.n	8004a4e <UART_SetConfig+0x212>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a74      	ldr	r2, [pc, #464]	; (8004b24 <UART_SetConfig+0x2e8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d124      	bne.n	80049a2 <UART_SetConfig+0x166>
 8004958:	4b70      	ldr	r3, [pc, #448]	; (8004b1c <UART_SetConfig+0x2e0>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004960:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004964:	d011      	beq.n	800498a <UART_SetConfig+0x14e>
 8004966:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800496a:	d817      	bhi.n	800499c <UART_SetConfig+0x160>
 800496c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004970:	d011      	beq.n	8004996 <UART_SetConfig+0x15a>
 8004972:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004976:	d811      	bhi.n	800499c <UART_SetConfig+0x160>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <UART_SetConfig+0x148>
 800497c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004980:	d006      	beq.n	8004990 <UART_SetConfig+0x154>
 8004982:	e00b      	b.n	800499c <UART_SetConfig+0x160>
 8004984:	2300      	movs	r3, #0
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e061      	b.n	8004a4e <UART_SetConfig+0x212>
 800498a:	2302      	movs	r3, #2
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e05e      	b.n	8004a4e <UART_SetConfig+0x212>
 8004990:	2304      	movs	r3, #4
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e05b      	b.n	8004a4e <UART_SetConfig+0x212>
 8004996:	2308      	movs	r3, #8
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e058      	b.n	8004a4e <UART_SetConfig+0x212>
 800499c:	2310      	movs	r3, #16
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e055      	b.n	8004a4e <UART_SetConfig+0x212>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a60      	ldr	r2, [pc, #384]	; (8004b28 <UART_SetConfig+0x2ec>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d124      	bne.n	80049f6 <UART_SetConfig+0x1ba>
 80049ac:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <UART_SetConfig+0x2e0>)
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049b8:	d011      	beq.n	80049de <UART_SetConfig+0x1a2>
 80049ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049be:	d817      	bhi.n	80049f0 <UART_SetConfig+0x1b4>
 80049c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049c4:	d011      	beq.n	80049ea <UART_SetConfig+0x1ae>
 80049c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ca:	d811      	bhi.n	80049f0 <UART_SetConfig+0x1b4>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <UART_SetConfig+0x19c>
 80049d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d4:	d006      	beq.n	80049e4 <UART_SetConfig+0x1a8>
 80049d6:	e00b      	b.n	80049f0 <UART_SetConfig+0x1b4>
 80049d8:	2300      	movs	r3, #0
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e037      	b.n	8004a4e <UART_SetConfig+0x212>
 80049de:	2302      	movs	r3, #2
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e034      	b.n	8004a4e <UART_SetConfig+0x212>
 80049e4:	2304      	movs	r3, #4
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e031      	b.n	8004a4e <UART_SetConfig+0x212>
 80049ea:	2308      	movs	r3, #8
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e02e      	b.n	8004a4e <UART_SetConfig+0x212>
 80049f0:	2310      	movs	r3, #16
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e02b      	b.n	8004a4e <UART_SetConfig+0x212>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a4c      	ldr	r2, [pc, #304]	; (8004b2c <UART_SetConfig+0x2f0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d124      	bne.n	8004a4a <UART_SetConfig+0x20e>
 8004a00:	4b46      	ldr	r3, [pc, #280]	; (8004b1c <UART_SetConfig+0x2e0>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004a08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a0c:	d011      	beq.n	8004a32 <UART_SetConfig+0x1f6>
 8004a0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a12:	d817      	bhi.n	8004a44 <UART_SetConfig+0x208>
 8004a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a18:	d011      	beq.n	8004a3e <UART_SetConfig+0x202>
 8004a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a1e:	d811      	bhi.n	8004a44 <UART_SetConfig+0x208>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <UART_SetConfig+0x1f0>
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a28:	d006      	beq.n	8004a38 <UART_SetConfig+0x1fc>
 8004a2a:	e00b      	b.n	8004a44 <UART_SetConfig+0x208>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e00d      	b.n	8004a4e <UART_SetConfig+0x212>
 8004a32:	2302      	movs	r3, #2
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e00a      	b.n	8004a4e <UART_SetConfig+0x212>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e007      	b.n	8004a4e <UART_SetConfig+0x212>
 8004a3e:	2308      	movs	r3, #8
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e004      	b.n	8004a4e <UART_SetConfig+0x212>
 8004a44:	2310      	movs	r3, #16
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e001      	b.n	8004a4e <UART_SetConfig+0x212>
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a56:	d16d      	bne.n	8004b34 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d827      	bhi.n	8004aae <UART_SetConfig+0x272>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x228>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004aaf 	.word	0x08004aaf
 8004a74:	08004a9f 	.word	0x08004a9f
 8004a78:	08004aaf 	.word	0x08004aaf
 8004a7c:	08004aaf 	.word	0x08004aaf
 8004a80:	08004aaf 	.word	0x08004aaf
 8004a84:	08004aa7 	.word	0x08004aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7ff f88c 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	61b8      	str	r0, [r7, #24]
        break;
 8004a8e:	e013      	b.n	8004ab8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7ff f8aa 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8004a94:	61b8      	str	r0, [r7, #24]
        break;
 8004a96:	e00f      	b.n	8004ab8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a98:	4b25      	ldr	r3, [pc, #148]	; (8004b30 <UART_SetConfig+0x2f4>)
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e00c      	b.n	8004ab8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9e:	f7ff f80b 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8004aa2:	61b8      	str	r0, [r7, #24]
        break;
 8004aa4:	e008      	b.n	8004ab8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e004      	b.n	8004ab8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8086 	beq.w	8004bcc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	005a      	lsls	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b0f      	cmp	r3, #15
 8004adc:	d916      	bls.n	8004b0c <UART_SetConfig+0x2d0>
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae4:	d212      	bcs.n	8004b0c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f023 030f 	bic.w	r3, r3, #15
 8004aee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	89fb      	ldrh	r3, [r7, #14]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	89fa      	ldrh	r2, [r7, #14]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	e05f      	b.n	8004bcc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	77bb      	strb	r3, [r7, #30]
 8004b10:	e05c      	b.n	8004bcc <UART_SetConfig+0x390>
 8004b12:	bf00      	nop
 8004b14:	efff69f3 	.word	0xefff69f3
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40004400 	.word	0x40004400
 8004b24:	40004800 	.word	0x40004800
 8004b28:	40004c00 	.word	0x40004c00
 8004b2c:	40005000 	.word	0x40005000
 8004b30:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b34:	7ffb      	ldrb	r3, [r7, #31]
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d827      	bhi.n	8004b8a <UART_SetConfig+0x34e>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <UART_SetConfig+0x304>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004b8b 	.word	0x08004b8b
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7ff f81e 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004b68:	61b8      	str	r0, [r7, #24]
        break;
 8004b6a:	e013      	b.n	8004b94 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7ff f83c 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8004b70:	61b8      	str	r0, [r7, #24]
        break;
 8004b72:	e00f      	b.n	8004b94 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <UART_SetConfig+0x3a8>)
 8004b76:	61bb      	str	r3, [r7, #24]
        break;
 8004b78:	e00c      	b.n	8004b94 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fe ff9d 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8004b7e:	61b8      	str	r0, [r7, #24]
        break;
 8004b80:	e008      	b.n	8004b94 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b86:	61bb      	str	r3, [r7, #24]
        break;
 8004b88:	e004      	b.n	8004b94 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	77bb      	strb	r3, [r7, #30]
        break;
 8004b92:	bf00      	nop
    }

    if (pclk != 0U)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d018      	beq.n	8004bcc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	085a      	lsrs	r2, r3, #1
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	441a      	add	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	d908      	bls.n	8004bc8 <UART_SetConfig+0x38c>
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d204      	bcs.n	8004bc8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	e001      	b.n	8004bcc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	007a1200 	.word	0x007a1200

08004be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce6:	d10a      	bne.n	8004cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc fe0c 	bl	8001958 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d10e      	bne.n	8004d6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f82d 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e023      	b.n	8004db6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d10e      	bne.n	8004d9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f817 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e00d      	b.n	8004db6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b09c      	sub	sp, #112	; 0x70
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dce:	e0a5      	b.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd6:	f000 80a1 	beq.w	8004f1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fc fdbd 	bl	8001958 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d13e      	bne.n	8004e6e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e04:	667b      	str	r3, [r7, #100]	; 0x64
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e6      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	663b      	str	r3, [r7, #96]	; 0x60
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e42:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e067      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d04f      	beq.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8a:	d147      	bne.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ee8:	623a      	str	r2, [r7, #32]
 8004eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	69f9      	ldr	r1, [r7, #28]
 8004eee:	6a3a      	ldr	r2, [r7, #32]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e010      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4013      	ands	r3, r2
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	f43f af4a 	beq.w	8004dd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3770      	adds	r7, #112	; 0x70
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4e:	f3ef 8305 	mrs	r3, IPSR
 8004f52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <osKernelInitialize+0x32>
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <osKernelInitialize+0x64>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d109      	bne.n	8004f82 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f72:	603b      	str	r3, [r7, #0]
  return(result);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f7a:	f06f 0305 	mvn.w	r3, #5
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e00c      	b.n	8004f9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <osKernelInitialize+0x64>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <osKernelInitialize+0x64>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e002      	b.n	8004f9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000210 	.word	0x20000210

08004fb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb6:	f3ef 8305 	mrs	r3, IPSR
 8004fba:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc6:	607b      	str	r3, [r7, #4]
  return(result);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <osKernelStart+0x32>
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <osKernelStart+0x64>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d109      	bne.n	8004fea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fda:	603b      	str	r3, [r7, #0]
  return(result);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <osKernelStart+0x3a>
    stat = osErrorISR;
 8004fe2:	f06f 0305 	mvn.w	r3, #5
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e00e      	b.n	8005008 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <osKernelStart+0x64>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d107      	bne.n	8005002 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <osKernelStart+0x64>)
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ff8:	f001 f898 	bl	800612c <vTaskStartScheduler>
      stat = osOK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e002      	b.n	8005008 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005006:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005008:	68fb      	ldr	r3, [r7, #12]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000210 	.word	0x20000210

08005018 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b092      	sub	sp, #72	; 0x48
 800501c:	af04      	add	r7, sp, #16
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005028:	f3ef 8305 	mrs	r3, IPSR
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 8094 	bne.w	800515e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	623b      	str	r3, [r7, #32]
  return(result);
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 808d 	bne.w	800515e <osThreadNew+0x146>
 8005044:	4b48      	ldr	r3, [pc, #288]	; (8005168 <osThreadNew+0x150>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d106      	bne.n	800505a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800504c:	f3ef 8311 	mrs	r3, BASEPRI
 8005050:	61fb      	str	r3, [r7, #28]
  return(result);
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 8082 	bne.w	800515e <osThreadNew+0x146>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d07e      	beq.n	800515e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005064:	2318      	movs	r3, #24
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005068:	2300      	movs	r3, #0
 800506a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800506c:	f107 031b 	add.w	r3, r7, #27
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d045      	beq.n	800510a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <osThreadNew+0x74>
        name = attr->name;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <osThreadNew+0x9a>
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	2b38      	cmp	r3, #56	; 0x38
 80050a4:	d805      	bhi.n	80050b2 <osThreadNew+0x9a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <osThreadNew+0x9e>
        return (NULL);
 80050b2:	2300      	movs	r3, #0
 80050b4:	e054      	b.n	8005160 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	089b      	lsrs	r3, r3, #2
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00e      	beq.n	80050ec <osThreadNew+0xd4>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2bbb      	cmp	r3, #187	; 0xbb
 80050d4:	d90a      	bls.n	80050ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <osThreadNew+0xd4>
        mem = 1;
 80050e6:	2301      	movs	r3, #1
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ea:	e010      	b.n	800510e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10c      	bne.n	800510e <osThreadNew+0xf6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d108      	bne.n	800510e <osThreadNew+0xf6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <osThreadNew+0xf6>
          mem = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	e001      	b.n	800510e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	2b01      	cmp	r3, #1
 8005112:	d110      	bne.n	8005136 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800511c:	9202      	str	r2, [sp, #8]
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005128:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fe1a 	bl	8005d64 <xTaskCreateStatic>
 8005130:	4603      	mov	r3, r0
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e013      	b.n	800515e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	d110      	bne.n	800515e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	b29a      	uxth	r2, r3
 8005140:	f107 0314 	add.w	r3, r7, #20
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fe64 	bl	8005e1c <xTaskCreate>
 8005154:	4603      	mov	r3, r0
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <osThreadNew+0x146>
          hTask = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800515e:	697b      	ldr	r3, [r7, #20]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3738      	adds	r7, #56	; 0x38
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000210 	.word	0x20000210

0800516c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005174:	f3ef 8305 	mrs	r3, IPSR
 8005178:	613b      	str	r3, [r7, #16]
  return(result);
 800517a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10f      	bne.n	80051a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005180:	f3ef 8310 	mrs	r3, PRIMASK
 8005184:	60fb      	str	r3, [r7, #12]
  return(result);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <osDelay+0x34>
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <osDelay+0x58>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d109      	bne.n	80051a8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005194:	f3ef 8311 	mrs	r3, BASEPRI
 8005198:	60bb      	str	r3, [r7, #8]
  return(result);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <osDelay+0x3c>
    stat = osErrorISR;
 80051a0:	f06f 0305 	mvn.w	r3, #5
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e007      	b.n	80051b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 ff86 	bl	80060c4 <vTaskDelay>
    }
  }

  return (stat);
 80051b8:	697b      	ldr	r3, [r7, #20]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000210 	.word	0x20000210

080051c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80051d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a06      	ldr	r2, [pc, #24]	; (80051f8 <vApplicationGetIdleTaskMemory+0x30>)
 80051de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	601a      	str	r2, [r3, #0]
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000214 	.word	0x20000214
 80051f8:	200002d0 	.word	0x200002d0

080051fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a07      	ldr	r2, [pc, #28]	; (8005228 <vApplicationGetTimerTaskMemory+0x2c>)
 800520c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a06      	ldr	r2, [pc, #24]	; (800522c <vApplicationGetTimerTaskMemory+0x30>)
 8005212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521a:	601a      	str	r2, [r3, #0]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	200004d0 	.word	0x200004d0
 800522c:	2000058c 	.word	0x2000058c

08005230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f103 0208 	add.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f103 0208 	add.w	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f103 0208 	add.w	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e8:	d103      	bne.n	80052f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e00c      	b.n	800530c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3308      	adds	r3, #8
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e002      	b.n	8005300 <vListInsert+0x2e>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d2f6      	bcs.n	80052fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6892      	ldr	r2, [r2, #8]
 800535a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6852      	ldr	r2, [r2, #4]
 8005364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d103      	bne.n	8005378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053c2:	f002 f837 	bl	8007434 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	441a      	add	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	3b01      	subs	r3, #1
 80053f4:	68f9      	ldr	r1, [r7, #12]
 80053f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	441a      	add	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d114      	bne.n	8005442 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3310      	adds	r3, #16
 8005424:	4618      	mov	r0, r3
 8005426:	f001 f91f 	bl	8006668 <xTaskRemoveFromEventList>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d012      	beq.n	8005456 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <xQueueGenericReset+0xcc>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	e009      	b.n	8005456 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3310      	adds	r3, #16
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fef2 	bl	8005230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff feed 	bl	8005230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005456:	f002 f81d 	bl	8007494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800545a:	2301      	movs	r3, #1
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <xQueueGenericCreateStatic+0x52>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <xQueueGenericCreateStatic+0x56>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <xQueueGenericCreateStatic+0x58>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	623b      	str	r3, [r7, #32]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <xQueueGenericCreateStatic+0x7e>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericCreateStatic+0x82>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericCreateStatic+0x84>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61fb      	str	r3, [r7, #28]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005506:	2350      	movs	r3, #80	; 0x50
 8005508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b50      	cmp	r3, #80	; 0x50
 800550e:	d00a      	beq.n	8005526 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61bb      	str	r3, [r7, #24]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005538:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f805 	bl	8005556 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800554e:	4618      	mov	r0, r3
 8005550:	3730      	adds	r7, #48	; 0x30
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e002      	b.n	8005578 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005584:	2101      	movs	r1, #1
 8005586:	69b8      	ldr	r0, [r7, #24]
 8005588:	f7ff ff06 	bl	8005398 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08e      	sub	sp, #56	; 0x38
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <xQueueGenericSend+0x32>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d103      	bne.n	80055dc <xQueueGenericSend+0x40>
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <xQueueGenericSend+0x44>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <xQueueGenericSend+0x46>
 80055e0:	2300      	movs	r3, #0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <xQueueGenericSend+0x60>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d103      	bne.n	800560a <xQueueGenericSend+0x6e>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <xQueueGenericSend+0x72>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <xQueueGenericSend+0x74>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xQueueGenericSend+0x8e>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	623b      	str	r3, [r7, #32]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800562a:	f001 f9e5 	bl	80069f8 <xTaskGetSchedulerState>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <xQueueGenericSend+0x9e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <xQueueGenericSend+0xa2>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <xQueueGenericSend+0xa4>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xQueueGenericSend+0xbe>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	61fb      	str	r3, [r7, #28]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800565a:	f001 feeb 	bl	8007434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <xQueueGenericSend+0xd4>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d129      	bne.n	80056c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005676:	f000 fa07 	bl	8005a88 <prvCopyDataToQueue>
 800567a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	3324      	adds	r3, #36	; 0x24
 8005688:	4618      	mov	r0, r3
 800568a:	f000 ffed 	bl	8006668 <xTaskRemoveFromEventList>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d013      	beq.n	80056bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005694:	4b3f      	ldr	r3, [pc, #252]	; (8005794 <xQueueGenericSend+0x1f8>)
 8005696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	e00a      	b.n	80056bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056ac:	4b39      	ldr	r3, [pc, #228]	; (8005794 <xQueueGenericSend+0x1f8>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056bc:	f001 feea 	bl	8007494 <vPortExitCritical>
				return pdPASS;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e063      	b.n	800578c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056ca:	f001 fee3 	bl	8007494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e05c      	b.n	800578c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056d8:	f107 0314 	add.w	r3, r7, #20
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f827 	bl	8006730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056e6:	f001 fed5 	bl	8007494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056ea:	f000 fd8f 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056ee:	f001 fea1 	bl	8007434 <vPortEnterCritical>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056fe:	d103      	bne.n	8005708 <xQueueGenericSend+0x16c>
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800570e:	b25b      	sxtb	r3, r3
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x182>
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800571e:	f001 feb9 	bl	8007494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005722:	1d3a      	adds	r2, r7, #4
 8005724:	f107 0314 	add.w	r3, r7, #20
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f816 	bl	800675c <xTaskCheckForTimeOut>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d124      	bne.n	8005780 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005738:	f000 fa9e 	bl	8005c78 <prvIsQueueFull>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d018      	beq.n	8005774 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	3310      	adds	r3, #16
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f000 ff3c 	bl	80065c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005752:	f000 fa29 	bl	8005ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005756:	f000 fd67 	bl	8006228 <xTaskResumeAll>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	f47f af7c 	bne.w	800565a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005762:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <xQueueGenericSend+0x1f8>)
 8005764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	e772      	b.n	800565a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005776:	f000 fa17 	bl	8005ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800577a:	f000 fd55 	bl	8006228 <xTaskResumeAll>
 800577e:	e76c      	b.n	800565a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005782:	f000 fa11 	bl	8005ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005786:	f000 fd4f 	bl	8006228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800578a:	2300      	movs	r3, #0
		}
	}
}
 800578c:	4618      	mov	r0, r3
 800578e:	3738      	adds	r7, #56	; 0x38
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	; 0x38
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d103      	bne.n	80057d4 <xQueueGenericSendFromISR+0x3c>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <xQueueGenericSendFromISR+0x40>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <xQueueGenericSendFromISR+0x42>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	623b      	str	r3, [r7, #32]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d103      	bne.n	8005802 <xQueueGenericSendFromISR+0x6a>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <xQueueGenericSendFromISR+0x6e>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <xQueueGenericSendFromISR+0x70>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	61fb      	str	r3, [r7, #28]
}
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005822:	f001 fee9 	bl	80075f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005826:	f3ef 8211 	mrs	r2, BASEPRI
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	61ba      	str	r2, [r7, #24]
 800583c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800583e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <xQueueGenericSendFromISR+0xbc>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d12c      	bne.n	80058ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005864:	f000 f910 	bl	8005a88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005868:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005870:	d112      	bne.n	8005898 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d016      	beq.n	80058a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	3324      	adds	r3, #36	; 0x24
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fef2 	bl	8006668 <xTaskRemoveFromEventList>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00e      	beq.n	80058a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e007      	b.n	80058a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800589c:	3301      	adds	r3, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	b25a      	sxtb	r2, r3
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058a8:	2301      	movs	r3, #1
 80058aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058ac:	e001      	b.n	80058b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3738      	adds	r7, #56	; 0x38
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08c      	sub	sp, #48	; 0x30
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <xQueueReceive+0x30>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	623b      	str	r3, [r7, #32]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <xQueueReceive+0x3e>
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <xQueueReceive+0x42>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <xQueueReceive+0x44>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueReceive+0x5e>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	61fb      	str	r3, [r7, #28]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005926:	f001 f867 	bl	80069f8 <xTaskGetSchedulerState>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <xQueueReceive+0x6e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <xQueueReceive+0x72>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <xQueueReceive+0x74>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <xQueueReceive+0x8e>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	61bb      	str	r3, [r7, #24]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005956:	f001 fd6d 	bl	8007434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01f      	beq.n	80059a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596a:	f000 f8f7 	bl	8005b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	1e5a      	subs	r2, r3, #1
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00f      	beq.n	800599e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	3310      	adds	r3, #16
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fe70 	bl	8006668 <xTaskRemoveFromEventList>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800598e:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <xQueueReceive+0x1bc>)
 8005990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800599e:	f001 fd79 	bl	8007494 <vPortExitCritical>
				return pdPASS;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e069      	b.n	8005a7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ac:	f001 fd72 	bl	8007494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e062      	b.n	8005a7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059ba:	f107 0310 	add.w	r3, r7, #16
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 feb6 	bl	8006730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059c8:	f001 fd64 	bl	8007494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059cc:	f000 fc1e 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059d0:	f001 fd30 	bl	8007434 <vPortEnterCritical>
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e0:	d103      	bne.n	80059ea <xQueueReceive+0x122>
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f0:	b25b      	sxtb	r3, r3
 80059f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f6:	d103      	bne.n	8005a00 <xQueueReceive+0x138>
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a00:	f001 fd48 	bl	8007494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a04:	1d3a      	adds	r2, r7, #4
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fea5 	bl	800675c <xTaskCheckForTimeOut>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d123      	bne.n	8005a60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1a:	f000 f917 	bl	8005c4c <prvIsQueueEmpty>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d017      	beq.n	8005a54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fdcb 	bl	80065c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a34:	f000 f8b8 	bl	8005ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a38:	f000 fbf6 	bl	8006228 <xTaskResumeAll>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d189      	bne.n	8005956 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <xQueueReceive+0x1bc>)
 8005a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	e780      	b.n	8005956 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a56:	f000 f8a7 	bl	8005ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a5a:	f000 fbe5 	bl	8006228 <xTaskResumeAll>
 8005a5e:	e77a      	b.n	8005956 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a62:	f000 f8a1 	bl	8005ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a66:	f000 fbdf 	bl	8006228 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6c:	f000 f8ee 	bl	8005c4c <prvIsQueueEmpty>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f43f af6f 	beq.w	8005956 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3730      	adds	r7, #48	; 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d14d      	bne.n	8005b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 ffbe 	bl	8006a34 <xTaskPriorityDisinherit>
 8005ab8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	605a      	str	r2, [r3, #4]
 8005ac0:	e043      	b.n	8005b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d119      	bne.n	8005afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6898      	ldr	r0, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	f002 f8d6 	bl	8007c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d32b      	bcc.n	8005b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	e026      	b.n	8005b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68d8      	ldr	r0, [r3, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	461a      	mov	r2, r3
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	f002 f8bc 	bl	8007c84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	425b      	negs	r3, r3
 8005b16:	441a      	add	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d207      	bcs.n	8005b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	425b      	negs	r3, r3
 8005b32:	441a      	add	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d105      	bne.n	8005b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b52:	697b      	ldr	r3, [r7, #20]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d018      	beq.n	8005ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	441a      	add	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d303      	bcc.n	8005b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68d9      	ldr	r1, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f002 f872 	bl	8007c84 <memcpy>
	}
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bb0:	f001 fc40 	bl	8007434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bbc:	e011      	b.n	8005be2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d012      	beq.n	8005bec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3324      	adds	r3, #36	; 0x24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fd4c 	bl	8006668 <xTaskRemoveFromEventList>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bd6:	f000 fe23 	bl	8006820 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	dce9      	bgt.n	8005bbe <prvUnlockQueue+0x16>
 8005bea:	e000      	b.n	8005bee <prvUnlockQueue+0x46>
					break;
 8005bec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bf6:	f001 fc4d 	bl	8007494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bfa:	f001 fc1b 	bl	8007434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c06:	e011      	b.n	8005c2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d012      	beq.n	8005c36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3310      	adds	r3, #16
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fd27 	bl	8006668 <xTaskRemoveFromEventList>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c20:	f000 fdfe 	bl	8006820 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dce9      	bgt.n	8005c08 <prvUnlockQueue+0x60>
 8005c34:	e000      	b.n	8005c38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c40:	f001 fc28 	bl	8007494 <vPortExitCritical>
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c54:	f001 fbee 	bl	8007434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e001      	b.n	8005c6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c6a:	f001 fc13 	bl	8007494 <vPortExitCritical>

	return xReturn;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c80:	f001 fbd8 	bl	8007434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d102      	bne.n	8005c96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e001      	b.n	8005c9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c9a:	f001 fbfb 	bl	8007494 <vPortExitCritical>

	return xReturn;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e014      	b.n	8005ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cb8:	4a0f      	ldr	r2, [pc, #60]	; (8005cf8 <vQueueAddToRegistry+0x50>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10b      	bne.n	8005cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cc4:	490c      	ldr	r1, [pc, #48]	; (8005cf8 <vQueueAddToRegistry+0x50>)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cce:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <vQueueAddToRegistry+0x50>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cda:	e006      	b.n	8005cea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b07      	cmp	r3, #7
 8005ce6:	d9e7      	bls.n	8005cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20004e3c 	.word	0x20004e3c

08005cfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d0c:	f001 fb92 	bl	8007434 <vPortEnterCritical>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1c:	d103      	bne.n	8005d26 <vQueueWaitForMessageRestricted+0x2a>
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d2c:	b25b      	sxtb	r3, r3
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d32:	d103      	bne.n	8005d3c <vQueueWaitForMessageRestricted+0x40>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3c:	f001 fbaa 	bl	8007494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d106      	bne.n	8005d56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fc5d 	bl	8006610 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d56:	6978      	ldr	r0, [r7, #20]
 8005d58:	f7ff ff26 	bl	8005ba8 <prvUnlockQueue>
	}
 8005d5c:	bf00      	nop
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	; 0x38
 8005d68:	af04      	add	r7, sp, #16
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	623b      	str	r3, [r7, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xTaskCreateStatic+0x46>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	61fb      	str	r3, [r7, #28]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005daa:	23bc      	movs	r3, #188	; 0xbc
 8005dac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2bbc      	cmp	r3, #188	; 0xbc
 8005db2:	d00a      	beq.n	8005dca <xTaskCreateStatic+0x66>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	61bb      	str	r3, [r7, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01e      	beq.n	8005e0e <xTaskCreateStatic+0xaa>
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01b      	beq.n	8005e0e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005de8:	2300      	movs	r3, #0
 8005dea:	9303      	str	r3, [sp, #12]
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	9302      	str	r3, [sp, #8]
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f851 	bl	8005ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e08:	f000 f8ec 	bl	8005fe4 <prvAddNewTaskToReadyList>
 8005e0c:	e001      	b.n	8005e12 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e12:	697b      	ldr	r3, [r7, #20]
	}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	; 0x30
 8005e20:	af04      	add	r7, sp, #16
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fc21 	bl	8007678 <pvPortMalloc>
 8005e36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00e      	beq.n	8005e5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e3e:	20bc      	movs	r0, #188	; 0xbc
 8005e40:	f001 fc1a 	bl	8007678 <pvPortMalloc>
 8005e44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
 8005e52:	e005      	b.n	8005e60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e54:	6978      	ldr	r0, [r7, #20]
 8005e56:	f001 fcd3 	bl	8007800 <vPortFree>
 8005e5a:	e001      	b.n	8005e60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d017      	beq.n	8005e96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	2300      	movs	r3, #0
 8005e72:	9303      	str	r3, [sp, #12]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	9302      	str	r3, [sp, #8]
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f80f 	bl	8005ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e8a:	69f8      	ldr	r0, [r7, #28]
 8005e8c:	f000 f8aa 	bl	8005fe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e90:	2301      	movs	r3, #1
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	e002      	b.n	8005e9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
	}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	21a5      	movs	r1, #165	; 0xa5
 8005ec2:	f001 feed 	bl	8007ca0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	617b      	str	r3, [r7, #20]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	e012      	b.n	8005f2c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	7819      	ldrb	r1, [r3, #0]
 8005f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	3334      	adds	r3, #52	; 0x34
 8005f16:	460a      	mov	r2, r1
 8005f18:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	d9e9      	bls.n	8005f06 <prvInitialiseNewTask+0x5e>
 8005f32:	e000      	b.n	8005f36 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005f34:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	2b37      	cmp	r3, #55	; 0x37
 8005f42:	d901      	bls.n	8005f48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f44:	2337      	movs	r3, #55	; 0x37
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	2200      	movs	r2, #0
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff f986 	bl	8005270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	3318      	adds	r3, #24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff f981 	bl	8005270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	3354      	adds	r3, #84	; 0x54
 8005f98:	2260      	movs	r2, #96	; 0x60
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 fe7f 	bl	8007ca0 <memset>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <prvInitialiseNewTask+0x130>)
 8005fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <prvInitialiseNewTask+0x134>)
 8005fac:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	4a0b      	ldr	r2, [pc, #44]	; (8005fe0 <prvInitialiseNewTask+0x138>)
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	69b8      	ldr	r0, [r7, #24]
 8005fba:	f001 f90f 	bl	80071dc <pxPortInitialiseStack>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	0800aa1c 	.word	0x0800aa1c
 8005fdc:	0800aa3c 	.word	0x0800aa3c
 8005fe0:	0800a9fc 	.word	0x0800a9fc

08005fe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fec:	f001 fa22 	bl	8007434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ff0:	4b2d      	ldr	r3, [pc, #180]	; (80060a8 <prvAddNewTaskToReadyList+0xc4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <prvAddNewTaskToReadyList+0xc4>)
 8005ff8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ffa:	4b2c      	ldr	r3, [pc, #176]	; (80060ac <prvAddNewTaskToReadyList+0xc8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006002:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <prvAddNewTaskToReadyList+0xc8>)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006008:	4b27      	ldr	r3, [pc, #156]	; (80060a8 <prvAddNewTaskToReadyList+0xc4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d110      	bne.n	8006032 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006010:	f000 fc2a 	bl	8006868 <prvInitialiseTaskLists>
 8006014:	e00d      	b.n	8006032 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006016:	4b26      	ldr	r3, [pc, #152]	; (80060b0 <prvAddNewTaskToReadyList+0xcc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800601e:	4b23      	ldr	r3, [pc, #140]	; (80060ac <prvAddNewTaskToReadyList+0xc8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	429a      	cmp	r2, r3
 800602a:	d802      	bhi.n	8006032 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <prvAddNewTaskToReadyList+0xc8>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006032:	4b20      	ldr	r3, [pc, #128]	; (80060b4 <prvAddNewTaskToReadyList+0xd0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <prvAddNewTaskToReadyList+0xd0>)
 800603a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800603c:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <prvAddNewTaskToReadyList+0xd0>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <prvAddNewTaskToReadyList+0xd4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d903      	bls.n	8006058 <prvAddNewTaskToReadyList+0x74>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <prvAddNewTaskToReadyList+0xd4>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a15      	ldr	r2, [pc, #84]	; (80060bc <prvAddNewTaskToReadyList+0xd8>)
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7ff f90b 	bl	800528a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006074:	f001 fa0e 	bl	8007494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <prvAddNewTaskToReadyList+0xcc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00e      	beq.n	800609e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <prvAddNewTaskToReadyList+0xc8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	429a      	cmp	r2, r3
 800608c:	d207      	bcs.n	800609e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800608e:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <prvAddNewTaskToReadyList+0xdc>)
 8006090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000e60 	.word	0x20000e60
 80060ac:	2000098c 	.word	0x2000098c
 80060b0:	20000e6c 	.word	0x20000e6c
 80060b4:	20000e7c 	.word	0x20000e7c
 80060b8:	20000e68 	.word	0x20000e68
 80060bc:	20000990 	.word	0x20000990
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d017      	beq.n	8006106 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <vTaskDelay+0x60>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <vTaskDelay+0x30>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60bb      	str	r3, [r7, #8]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060f4:	f000 f88a 	bl	800620c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060f8:	2100      	movs	r1, #0
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fd08 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006100:	f000 f892 	bl	8006228 <xTaskResumeAll>
 8006104:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d107      	bne.n	800611c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <vTaskDelay+0x64>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000e88 	.word	0x20000e88
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800613a:	463a      	mov	r2, r7
 800613c:	1d39      	adds	r1, r7, #4
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff f840 	bl	80051c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	9202      	str	r2, [sp, #8]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	2300      	movs	r3, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	460a      	mov	r2, r1
 800615a:	4924      	ldr	r1, [pc, #144]	; (80061ec <vTaskStartScheduler+0xc0>)
 800615c:	4824      	ldr	r0, [pc, #144]	; (80061f0 <vTaskStartScheduler+0xc4>)
 800615e:	f7ff fe01 	bl	8005d64 <xTaskCreateStatic>
 8006162:	4603      	mov	r3, r0
 8006164:	4a23      	ldr	r2, [pc, #140]	; (80061f4 <vTaskStartScheduler+0xc8>)
 8006166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <vTaskStartScheduler+0xc8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e001      	b.n	800617a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d102      	bne.n	8006186 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006180:	f000 fd1a 	bl	8006bb8 <xTimerCreateTimerTask>
 8006184:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d11b      	bne.n	80061c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	613b      	str	r3, [r7, #16]
}
 800619e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <vTaskStartScheduler+0xcc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3354      	adds	r3, #84	; 0x54
 80061a6:	4a15      	ldr	r2, [pc, #84]	; (80061fc <vTaskStartScheduler+0xd0>)
 80061a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061aa:	4b15      	ldr	r3, [pc, #84]	; (8006200 <vTaskStartScheduler+0xd4>)
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <vTaskStartScheduler+0xd8>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061b8:	4b13      	ldr	r3, [pc, #76]	; (8006208 <vTaskStartScheduler+0xdc>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061be:	f001 f897 	bl	80072f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061c2:	e00e      	b.n	80061e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ca:	d10a      	bne.n	80061e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60fb      	str	r3, [r7, #12]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <vTaskStartScheduler+0xb4>
}
 80061e2:	bf00      	nop
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	0800a940 	.word	0x0800a940
 80061f0:	08006839 	.word	0x08006839
 80061f4:	20000e84 	.word	0x20000e84
 80061f8:	2000098c 	.word	0x2000098c
 80061fc:	20000010 	.word	0x20000010
 8006200:	20000e80 	.word	0x20000e80
 8006204:	20000e6c 	.word	0x20000e6c
 8006208:	20000e64 	.word	0x20000e64

0800620c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <vTaskSuspendAll+0x18>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a03      	ldr	r2, [pc, #12]	; (8006224 <vTaskSuspendAll+0x18>)
 8006218:	6013      	str	r3, [r2, #0]
}
 800621a:	bf00      	nop
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	20000e88 	.word	0x20000e88

08006228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006236:	4b42      	ldr	r3, [pc, #264]	; (8006340 <xTaskResumeAll+0x118>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xTaskResumeAll+0x2c>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	603b      	str	r3, [r7, #0]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006254:	f001 f8ee 	bl	8007434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006258:	4b39      	ldr	r3, [pc, #228]	; (8006340 <xTaskResumeAll+0x118>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3b01      	subs	r3, #1
 800625e:	4a38      	ldr	r2, [pc, #224]	; (8006340 <xTaskResumeAll+0x118>)
 8006260:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006262:	4b37      	ldr	r3, [pc, #220]	; (8006340 <xTaskResumeAll+0x118>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d162      	bne.n	8006330 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800626a:	4b36      	ldr	r3, [pc, #216]	; (8006344 <xTaskResumeAll+0x11c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d05e      	beq.n	8006330 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006272:	e02f      	b.n	80062d4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006274:	4b34      	ldr	r3, [pc, #208]	; (8006348 <xTaskResumeAll+0x120>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3318      	adds	r3, #24
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff f85f 	bl	8005344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3304      	adds	r3, #4
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff f85a 	bl	8005344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4b2d      	ldr	r3, [pc, #180]	; (800634c <xTaskResumeAll+0x124>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d903      	bls.n	80062a4 <xTaskResumeAll+0x7c>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4a2a      	ldr	r2, [pc, #168]	; (800634c <xTaskResumeAll+0x124>)
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4a27      	ldr	r2, [pc, #156]	; (8006350 <xTaskResumeAll+0x128>)
 80062b2:	441a      	add	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fe ffe5 	bl	800528a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	4b23      	ldr	r3, [pc, #140]	; (8006354 <xTaskResumeAll+0x12c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062ce:	4b22      	ldr	r3, [pc, #136]	; (8006358 <xTaskResumeAll+0x130>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <xTaskResumeAll+0x120>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1cb      	bne.n	8006274 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062e2:	f000 fb63 	bl	80069ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062e6:	4b1d      	ldr	r3, [pc, #116]	; (800635c <xTaskResumeAll+0x134>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d010      	beq.n	8006314 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062f2:	f000 f847 	bl	8006384 <xTaskIncrementTick>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062fc:	4b16      	ldr	r3, [pc, #88]	; (8006358 <xTaskResumeAll+0x130>)
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3b01      	subs	r3, #1
 8006306:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f1      	bne.n	80062f2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <xTaskResumeAll+0x134>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <xTaskResumeAll+0x130>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <xTaskResumeAll+0x138>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006330:	f001 f8b0 	bl	8007494 <vPortExitCritical>

	return xAlreadyYielded;
 8006334:	68bb      	ldr	r3, [r7, #8]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000e88 	.word	0x20000e88
 8006344:	20000e60 	.word	0x20000e60
 8006348:	20000e20 	.word	0x20000e20
 800634c:	20000e68 	.word	0x20000e68
 8006350:	20000990 	.word	0x20000990
 8006354:	2000098c 	.word	0x2000098c
 8006358:	20000e74 	.word	0x20000e74
 800635c:	20000e70 	.word	0x20000e70
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <xTaskGetTickCount+0x1c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006370:	687b      	ldr	r3, [r7, #4]
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000e64 	.word	0x20000e64

08006384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638e:	4b51      	ldr	r3, [pc, #324]	; (80064d4 <xTaskIncrementTick+0x150>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 808e 	bne.w	80064b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006398:	4b4f      	ldr	r3, [pc, #316]	; (80064d8 <xTaskIncrementTick+0x154>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063a0:	4a4d      	ldr	r2, [pc, #308]	; (80064d8 <xTaskIncrementTick+0x154>)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d120      	bne.n	80063ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063ac:	4b4b      	ldr	r3, [pc, #300]	; (80064dc <xTaskIncrementTick+0x158>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <xTaskIncrementTick+0x48>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	603b      	str	r3, [r7, #0]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <xTaskIncrementTick+0x46>
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <xTaskIncrementTick+0x158>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <xTaskIncrementTick+0x15c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a41      	ldr	r2, [pc, #260]	; (80064dc <xTaskIncrementTick+0x158>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4a41      	ldr	r2, [pc, #260]	; (80064e0 <xTaskIncrementTick+0x15c>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4b40      	ldr	r3, [pc, #256]	; (80064e4 <xTaskIncrementTick+0x160>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a3f      	ldr	r2, [pc, #252]	; (80064e4 <xTaskIncrementTick+0x160>)
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	f000 fadf 	bl	80069ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ee:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <xTaskIncrementTick+0x164>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d34e      	bcc.n	8006496 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f8:	4b38      	ldr	r3, [pc, #224]	; (80064dc <xTaskIncrementTick+0x158>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <xTaskIncrementTick+0x82>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <xTaskIncrementTick+0x84>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640c:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <xTaskIncrementTick+0x164>)
 800640e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006412:	601a      	str	r2, [r3, #0]
					break;
 8006414:	e03f      	b.n	8006496 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006416:	4b31      	ldr	r3, [pc, #196]	; (80064dc <xTaskIncrementTick+0x158>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	d203      	bcs.n	8006436 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800642e:	4a2e      	ldr	r2, [pc, #184]	; (80064e8 <xTaskIncrementTick+0x164>)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6013      	str	r3, [r2, #0]
						break;
 8006434:	e02f      	b.n	8006496 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	3304      	adds	r3, #4
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe ff82 	bl	8005344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	3318      	adds	r3, #24
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe ff79 	bl	8005344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	4b25      	ldr	r3, [pc, #148]	; (80064ec <xTaskIncrementTick+0x168>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d903      	bls.n	8006466 <xTaskIncrementTick+0xe2>
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	4a22      	ldr	r2, [pc, #136]	; (80064ec <xTaskIncrementTick+0x168>)
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4a1f      	ldr	r2, [pc, #124]	; (80064f0 <xTaskIncrementTick+0x16c>)
 8006474:	441a      	add	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	3304      	adds	r3, #4
 800647a:	4619      	mov	r1, r3
 800647c:	4610      	mov	r0, r2
 800647e:	f7fe ff04 	bl	800528a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <xTaskIncrementTick+0x170>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	429a      	cmp	r2, r3
 800648e:	d3b3      	bcc.n	80063f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006494:	e7b0      	b.n	80063f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006496:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <xTaskIncrementTick+0x170>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4914      	ldr	r1, [pc, #80]	; (80064f0 <xTaskIncrementTick+0x16c>)
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d907      	bls.n	80064be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e004      	b.n	80064be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <xTaskIncrementTick+0x174>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	4a0f      	ldr	r2, [pc, #60]	; (80064f8 <xTaskIncrementTick+0x174>)
 80064bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064be:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <xTaskIncrementTick+0x178>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80064c6:	2301      	movs	r3, #1
 80064c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064ca:	697b      	ldr	r3, [r7, #20]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20000e88 	.word	0x20000e88
 80064d8:	20000e64 	.word	0x20000e64
 80064dc:	20000e18 	.word	0x20000e18
 80064e0:	20000e1c 	.word	0x20000e1c
 80064e4:	20000e78 	.word	0x20000e78
 80064e8:	20000e80 	.word	0x20000e80
 80064ec:	20000e68 	.word	0x20000e68
 80064f0:	20000990 	.word	0x20000990
 80064f4:	2000098c 	.word	0x2000098c
 80064f8:	20000e70 	.word	0x20000e70
 80064fc:	20000e74 	.word	0x20000e74

08006500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006506:	4b2a      	ldr	r3, [pc, #168]	; (80065b0 <vTaskSwitchContext+0xb0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800650e:	4b29      	ldr	r3, [pc, #164]	; (80065b4 <vTaskSwitchContext+0xb4>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006514:	e046      	b.n	80065a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006516:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <vTaskSwitchContext+0xb4>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800651c:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <vTaskSwitchContext+0xb8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e010      	b.n	8006546 <vTaskSwitchContext+0x46>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <vTaskSwitchContext+0x40>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	607b      	str	r3, [r7, #4]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vTaskSwitchContext+0x3e>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3b01      	subs	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	491d      	ldr	r1, [pc, #116]	; (80065bc <vTaskSwitchContext+0xbc>)
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0e4      	beq.n	8006524 <vTaskSwitchContext+0x24>
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4a15      	ldr	r2, [pc, #84]	; (80065bc <vTaskSwitchContext+0xbc>)
 8006566:	4413      	add	r3, r2
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	3308      	adds	r3, #8
 800657c:	429a      	cmp	r2, r3
 800657e:	d104      	bne.n	800658a <vTaskSwitchContext+0x8a>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <vTaskSwitchContext+0xc0>)
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <vTaskSwitchContext+0xb8>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <vTaskSwitchContext+0xc0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3354      	adds	r3, #84	; 0x54
 80065a0:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <vTaskSwitchContext+0xc4>)
 80065a2:	6013      	str	r3, [r2, #0]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	20000e88 	.word	0x20000e88
 80065b4:	20000e74 	.word	0x20000e74
 80065b8:	20000e68 	.word	0x20000e68
 80065bc:	20000990 	.word	0x20000990
 80065c0:	2000098c 	.word	0x2000098c
 80065c4:	20000010 	.word	0x20000010

080065c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60fb      	str	r3, [r7, #12]
}
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ee:	4b07      	ldr	r3, [pc, #28]	; (800660c <vTaskPlaceOnEventList+0x44>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3318      	adds	r3, #24
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fe fe6b 	bl	80052d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065fc:	2101      	movs	r1, #1
 80065fe:	6838      	ldr	r0, [r7, #0]
 8006600:	f000 fa86 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	2000098c 	.word	0x2000098c

08006610 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	617b      	str	r3, [r7, #20]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vTaskPlaceOnEventListRestricted+0x54>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3318      	adds	r3, #24
 800663e:	4619      	mov	r1, r3
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7fe fe22 	bl	800528a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800664c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006650:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	68b8      	ldr	r0, [r7, #8]
 8006656:	f000 fa5b 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
	}
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	2000098c 	.word	0x2000098c

08006668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3318      	adds	r3, #24
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fe53 	bl	8005344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800669e:	4b1e      	ldr	r3, [pc, #120]	; (8006718 <xTaskRemoveFromEventList+0xb0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d11d      	bne.n	80066e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fe4a 	bl	8005344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4b19      	ldr	r3, [pc, #100]	; (800671c <xTaskRemoveFromEventList+0xb4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d903      	bls.n	80066c4 <xTaskRemoveFromEventList+0x5c>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	4a16      	ldr	r2, [pc, #88]	; (800671c <xTaskRemoveFromEventList+0xb4>)
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4a13      	ldr	r2, [pc, #76]	; (8006720 <xTaskRemoveFromEventList+0xb8>)
 80066d2:	441a      	add	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fe fdd5 	bl	800528a <vListInsertEnd>
 80066e0:	e005      	b.n	80066ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3318      	adds	r3, #24
 80066e6:	4619      	mov	r1, r3
 80066e8:	480e      	ldr	r0, [pc, #56]	; (8006724 <xTaskRemoveFromEventList+0xbc>)
 80066ea:	f7fe fdce 	bl	800528a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <xTaskRemoveFromEventList+0xc0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d905      	bls.n	8006708 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <xTaskRemoveFromEventList+0xc4>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e001      	b.n	800670c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800670c:	697b      	ldr	r3, [r7, #20]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000e88 	.word	0x20000e88
 800671c:	20000e68 	.word	0x20000e68
 8006720:	20000990 	.word	0x20000990
 8006724:	20000e20 	.word	0x20000e20
 8006728:	2000098c 	.word	0x2000098c
 800672c:	20000e74 	.word	0x20000e74

08006730 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <vTaskInternalSetTimeOutState+0x24>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <vTaskInternalSetTimeOutState+0x28>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	605a      	str	r2, [r3, #4]
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	20000e78 	.word	0x20000e78
 8006758:	20000e64 	.word	0x20000e64

0800675c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	613b      	str	r3, [r7, #16]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	60fb      	str	r3, [r7, #12]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800679e:	f000 fe49 	bl	8007434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <xTaskCheckForTimeOut+0xbc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ba:	d102      	bne.n	80067c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	e023      	b.n	800680a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <xTaskCheckForTimeOut+0xc0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d007      	beq.n	80067de <xTaskCheckForTimeOut+0x82>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e015      	b.n	800680a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d20b      	bcs.n	8006800 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff9b 	bl	8006730 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e004      	b.n	800680a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800680a:	f000 fe43 	bl	8007494 <vPortExitCritical>

	return xReturn;
 800680e:	69fb      	ldr	r3, [r7, #28]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000e64 	.word	0x20000e64
 800681c:	20000e78 	.word	0x20000e78

08006820 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006824:	4b03      	ldr	r3, [pc, #12]	; (8006834 <vTaskMissedYield+0x14>)
 8006826:	2201      	movs	r2, #1
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	20000e74 	.word	0x20000e74

08006838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006840:	f000 f852 	bl	80068e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <prvIdleTask+0x28>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d9f9      	bls.n	8006840 <prvIdleTask+0x8>
			{
				taskYIELD();
 800684c:	4b05      	ldr	r3, [pc, #20]	; (8006864 <prvIdleTask+0x2c>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800685c:	e7f0      	b.n	8006840 <prvIdleTask+0x8>
 800685e:	bf00      	nop
 8006860:	20000990 	.word	0x20000990
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	e00c      	b.n	800688e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <prvInitialiseTaskLists+0x60>)
 8006880:	4413      	add	r3, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fcd4 	bl	8005230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3301      	adds	r3, #1
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b37      	cmp	r3, #55	; 0x37
 8006892:	d9ef      	bls.n	8006874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006894:	480d      	ldr	r0, [pc, #52]	; (80068cc <prvInitialiseTaskLists+0x64>)
 8006896:	f7fe fccb 	bl	8005230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800689a:	480d      	ldr	r0, [pc, #52]	; (80068d0 <prvInitialiseTaskLists+0x68>)
 800689c:	f7fe fcc8 	bl	8005230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068a0:	480c      	ldr	r0, [pc, #48]	; (80068d4 <prvInitialiseTaskLists+0x6c>)
 80068a2:	f7fe fcc5 	bl	8005230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068a6:	480c      	ldr	r0, [pc, #48]	; (80068d8 <prvInitialiseTaskLists+0x70>)
 80068a8:	f7fe fcc2 	bl	8005230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068ac:	480b      	ldr	r0, [pc, #44]	; (80068dc <prvInitialiseTaskLists+0x74>)
 80068ae:	f7fe fcbf 	bl	8005230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <prvInitialiseTaskLists+0x78>)
 80068b4:	4a05      	ldr	r2, [pc, #20]	; (80068cc <prvInitialiseTaskLists+0x64>)
 80068b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <prvInitialiseTaskLists+0x7c>)
 80068ba:	4a05      	ldr	r2, [pc, #20]	; (80068d0 <prvInitialiseTaskLists+0x68>)
 80068bc:	601a      	str	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000990 	.word	0x20000990
 80068cc:	20000df0 	.word	0x20000df0
 80068d0:	20000e04 	.word	0x20000e04
 80068d4:	20000e20 	.word	0x20000e20
 80068d8:	20000e34 	.word	0x20000e34
 80068dc:	20000e4c 	.word	0x20000e4c
 80068e0:	20000e18 	.word	0x20000e18
 80068e4:	20000e1c 	.word	0x20000e1c

080068e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ee:	e019      	b.n	8006924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068f0:	f000 fda0 	bl	8007434 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068f4:	4b10      	ldr	r3, [pc, #64]	; (8006938 <prvCheckTasksWaitingTermination+0x50>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fd1f 	bl	8005344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <prvCheckTasksWaitingTermination+0x54>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a0b      	ldr	r2, [pc, #44]	; (800693c <prvCheckTasksWaitingTermination+0x54>)
 800690e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3b01      	subs	r3, #1
 8006916:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800691a:	f000 fdbb 	bl	8007494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f810 	bl	8006944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e1      	bne.n	80068f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000e34 	.word	0x20000e34
 800693c:	20000e60 	.word	0x20000e60
 8006940:	20000e48 	.word	0x20000e48

08006944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3354      	adds	r3, #84	; 0x54
 8006950:	4618      	mov	r0, r3
 8006952:	f001 fecf 	bl	80086f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800695c:	2b00      	cmp	r3, #0
 800695e:	d108      	bne.n	8006972 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	4618      	mov	r0, r3
 8006966:	f000 ff4b 	bl	8007800 <vPortFree>
				vPortFree( pxTCB );
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 ff48 	bl	8007800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006970:	e018      	b.n	80069a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006978:	2b01      	cmp	r3, #1
 800697a:	d103      	bne.n	8006984 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 ff3f 	bl	8007800 <vPortFree>
	}
 8006982:	e00f      	b.n	80069a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800698a:	2b02      	cmp	r3, #2
 800698c:	d00a      	beq.n	80069a4 <prvDeleteTCB+0x60>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60fb      	str	r3, [r7, #12]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <prvDeleteTCB+0x5e>
	}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <prvResetNextTaskUnblockTime+0x44>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <prvResetNextTaskUnblockTime+0x14>
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <prvResetNextTaskUnblockTime+0x16>
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069c6:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <prvResetNextTaskUnblockTime+0x48>)
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069ce:	e008      	b.n	80069e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <prvResetNextTaskUnblockTime+0x44>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	4a05      	ldr	r2, [pc, #20]	; (80069f4 <prvResetNextTaskUnblockTime+0x48>)
 80069e0:	6013      	str	r3, [r2, #0]
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000e18 	.word	0x20000e18
 80069f4:	20000e80 	.word	0x20000e80

080069f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069fe:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <xTaskGetSchedulerState+0x34>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a06:	2301      	movs	r3, #1
 8006a08:	607b      	str	r3, [r7, #4]
 8006a0a:	e008      	b.n	8006a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a0c:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <xTaskGetSchedulerState+0x38>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a14:	2302      	movs	r3, #2
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	e001      	b.n	8006a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a1e:	687b      	ldr	r3, [r7, #4]
	}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	20000e6c 	.word	0x20000e6c
 8006a30:	20000e88 	.word	0x20000e88

08006a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d056      	beq.n	8006af8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <xTaskPriorityDisinherit+0xd0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d00a      	beq.n	8006a6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60bb      	str	r3, [r7, #8]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	1e5a      	subs	r2, r3, #1
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d02c      	beq.n	8006af8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d128      	bne.n	8006af8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fc4a 	bl	8005344 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <xTaskPriorityDisinherit+0xd4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d903      	bls.n	8006ad8 <xTaskPriorityDisinherit+0xa4>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <xTaskPriorityDisinherit+0xd4>)
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <xTaskPriorityDisinherit+0xd8>)
 8006ae6:	441a      	add	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fbcb 	bl	800528a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006af8:	697b      	ldr	r3, [r7, #20]
	}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	2000098c 	.word	0x2000098c
 8006b08:	20000e68 	.word	0x20000e68
 8006b0c:	20000990 	.word	0x20000990

08006b10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b1a:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b20:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe fc0c 	bl	8005344 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b32:	d10a      	bne.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4619      	mov	r1, r3
 8006b42:	4819      	ldr	r0, [pc, #100]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b44:	f7fe fba1 	bl	800528a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b48:	e026      	b.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4413      	add	r3, r2
 8006b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b52:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d209      	bcs.n	8006b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b62:	4b12      	ldr	r3, [pc, #72]	; (8006bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fbaf 	bl	80052d2 <vListInsert>
}
 8006b74:	e010      	b.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b76:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe fba5 	bl	80052d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d202      	bcs.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b92:	4a08      	ldr	r2, [pc, #32]	; (8006bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6013      	str	r3, [r2, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000e64 	.word	0x20000e64
 8006ba4:	2000098c 	.word	0x2000098c
 8006ba8:	20000e4c 	.word	0x20000e4c
 8006bac:	20000e1c 	.word	0x20000e1c
 8006bb0:	20000e18 	.word	0x20000e18
 8006bb4:	20000e80 	.word	0x20000e80

08006bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	; 0x28
 8006bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bc2:	f000 facb 	bl	800715c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bc6:	4b1c      	ldr	r3, [pc, #112]	; (8006c38 <xTimerCreateTimerTask+0x80>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d021      	beq.n	8006c12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bd6:	1d3a      	adds	r2, r7, #4
 8006bd8:	f107 0108 	add.w	r1, r7, #8
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe fb0b 	bl	80051fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	9202      	str	r2, [sp, #8]
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	460a      	mov	r2, r1
 8006bf8:	4910      	ldr	r1, [pc, #64]	; (8006c3c <xTimerCreateTimerTask+0x84>)
 8006bfa:	4811      	ldr	r0, [pc, #68]	; (8006c40 <xTimerCreateTimerTask+0x88>)
 8006bfc:	f7ff f8b2 	bl	8005d64 <xTaskCreateStatic>
 8006c00:	4603      	mov	r3, r0
 8006c02:	4a10      	ldr	r2, [pc, #64]	; (8006c44 <xTimerCreateTimerTask+0x8c>)
 8006c04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c06:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <xTimerCreateTimerTask+0x8c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	613b      	str	r3, [r7, #16]
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c2e:	697b      	ldr	r3, [r7, #20]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000ebc 	.word	0x20000ebc
 8006c3c:	0800a948 	.word	0x0800a948
 8006c40:	08006d65 	.word	0x08006d65
 8006c44:	20000ec0 	.word	0x20000ec0

08006c48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	623b      	str	r3, [r7, #32]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c76:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <xTimerGenericCommand+0x98>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d02a      	beq.n	8006cd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b05      	cmp	r3, #5
 8006c8e:	dc18      	bgt.n	8006cc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c90:	f7ff feb2 	bl	80069f8 <xTaskGetSchedulerState>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d109      	bne.n	8006cae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c9a:	4b11      	ldr	r3, [pc, #68]	; (8006ce0 <xTimerGenericCommand+0x98>)
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	f107 0110 	add.w	r1, r7, #16
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	f7fe fc79 	bl	800559c <xQueueGenericSend>
 8006caa:	6278      	str	r0, [r7, #36]	; 0x24
 8006cac:	e012      	b.n	8006cd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <xTimerGenericCommand+0x98>)
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f107 0110 	add.w	r1, r7, #16
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f7fe fc6f 	bl	800559c <xQueueGenericSend>
 8006cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8006cc0:	e008      	b.n	8006cd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <xTimerGenericCommand+0x98>)
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	f107 0110 	add.w	r1, r7, #16
 8006cca:	2300      	movs	r3, #0
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	f7fe fd63 	bl	8005798 <xQueueGenericSendFromISR>
 8006cd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3728      	adds	r7, #40	; 0x28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000ebc 	.word	0x20000ebc

08006ce4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cee:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <prvProcessExpiredTimer+0x7c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe fb21 	bl	8005344 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d122      	bne.n	8006d50 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	18d1      	adds	r1, r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	6978      	ldr	r0, [r7, #20]
 8006d18:	f000 f8c8 	bl	8006eac <prvInsertTimerInActiveList>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d22:	2300      	movs	r3, #0
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	2300      	movs	r3, #0
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	6978      	ldr	r0, [r7, #20]
 8006d2e:	f7ff ff8b 	bl	8006c48 <xTimerGenericCommand>
 8006d32:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60fb      	str	r3, [r7, #12]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	6978      	ldr	r0, [r7, #20]
 8006d56:	4798      	blx	r3
}
 8006d58:	bf00      	nop
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000eb4 	.word	0x20000eb4

08006d64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d6c:	f107 0308 	add.w	r3, r7, #8
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 f857 	bl	8006e24 <prvGetNextExpireTime>
 8006d76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f803 	bl	8006d88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d82:	f000 f8d5 	bl	8006f30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d86:	e7f1      	b.n	8006d6c <prvTimerTask+0x8>

08006d88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d92:	f7ff fa3b 	bl	800620c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d96:	f107 0308 	add.w	r3, r7, #8
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f866 	bl	8006e6c <prvSampleTimeNow>
 8006da0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d130      	bne.n	8006e0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <prvProcessTimerOrBlockTask+0x3c>
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d806      	bhi.n	8006dc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006db6:	f7ff fa37 	bl	8006228 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ff91 	bl	8006ce4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006dc2:	e024      	b.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dca:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <prvProcessTimerOrBlockTask+0x90>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2301      	moveq	r3, #1
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <prvProcessTimerOrBlockTask+0x94>)
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4619      	mov	r1, r3
 8006dea:	f7fe ff87 	bl	8005cfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dee:	f7ff fa1b 	bl	8006228 <xTaskResumeAll>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006df8:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <prvProcessTimerOrBlockTask+0x98>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
}
 8006e08:	e001      	b.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e0a:	f7ff fa0d 	bl	8006228 <xTaskResumeAll>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000eb8 	.word	0x20000eb8
 8006e1c:	20000ebc 	.word	0x20000ebc
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <prvGetNextExpireTime+0x44>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf0c      	ite	eq
 8006e36:	2301      	moveq	r3, #1
 8006e38:	2300      	movne	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <prvGetNextExpireTime+0x44>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e001      	b.n	8006e5a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20000eb4 	.word	0x20000eb4

08006e6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e74:	f7ff fa76 	bl	8006364 <xTaskGetTickCount>
 8006e78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <prvSampleTimeNow+0x3c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d205      	bcs.n	8006e90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e84:	f000 f908 	bl	8007098 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e002      	b.n	8006e96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e96:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <prvSampleTimeNow+0x3c>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000ec4 	.word	0x20000ec4

08006eac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d812      	bhi.n	8006ef8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d302      	bcc.n	8006ee6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e01b      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <prvInsertTimerInActiveList+0x7c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fe f9ee 	bl	80052d2 <vListInsert>
 8006ef6:	e012      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d206      	bcs.n	8006f0e <prvInsertTimerInActiveList+0x62>
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e007      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <prvInsertTimerInActiveList+0x80>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7fe f9da 	bl	80052d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f1e:	697b      	ldr	r3, [r7, #20]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000eb8 	.word	0x20000eb8
 8006f2c:	20000eb4 	.word	0x20000eb4

08006f30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	; 0x38
 8006f34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f36:	e09d      	b.n	8007074 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da18      	bge.n	8006f70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f3e:	1d3b      	adds	r3, r7, #4
 8006f40:	3304      	adds	r3, #4
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61fb      	str	r3, [r7, #28]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f66:	6850      	ldr	r0, [r2, #4]
 8006f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f6a:	6892      	ldr	r2, [r2, #8]
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	db7d      	blt.n	8007072 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe f9dc 	bl	8005344 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff ff6c 	bl	8006e6c <prvSampleTimeNow>
 8006f94:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b09      	cmp	r3, #9
 8006f9a:	d86b      	bhi.n	8007074 <prvProcessReceivedCommands+0x144>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <prvProcessReceivedCommands+0x74>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fcd 	.word	0x08006fcd
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fcd 	.word	0x08006fcd
 8006fb0:	08007075 	.word	0x08007075
 8006fb4:	08007029 	.word	0x08007029
 8006fb8:	08007061 	.word	0x08007061
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fcd 	.word	0x08006fcd
 8006fc4:	08007075 	.word	0x08007075
 8006fc8:	08007029 	.word	0x08007029
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	18d1      	adds	r1, r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fda:	f7ff ff67 	bl	8006eac <prvInsertTimerInActiveList>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d047      	beq.n	8007074 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d13f      	bne.n	8007074 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	441a      	add	r2, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2300      	movs	r3, #0
 8007002:	2100      	movs	r1, #0
 8007004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007006:	f7ff fe1f 	bl	8006c48 <xTimerGenericCommand>
 800700a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d130      	bne.n	8007074 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61bb      	str	r3, [r7, #24]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	617b      	str	r3, [r7, #20]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	699a      	ldr	r2, [r3, #24]
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	18d1      	adds	r1, r2, r3
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800705a:	f7ff ff27 	bl	8006eac <prvInsertTimerInActiveList>
					break;
 800705e:	e009      	b.n	8007074 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800706a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706c:	f000 fbc8 	bl	8007800 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007070:	e000      	b.n	8007074 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007072:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <prvProcessReceivedCommands+0x164>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1d39      	adds	r1, r7, #4
 800707a:	2200      	movs	r2, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fc23 	bl	80058c8 <xQueueReceive>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	f47f af57 	bne.w	8006f38 <prvProcessReceivedCommands+0x8>
	}
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	3730      	adds	r7, #48	; 0x30
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000ebc 	.word	0x20000ebc

08007098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800709e:	e045      	b.n	800712c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070a0:	4b2c      	ldr	r3, [pc, #176]	; (8007154 <prvSwitchTimerLists+0xbc>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070aa:	4b2a      	ldr	r3, [pc, #168]	; (8007154 <prvSwitchTimerLists+0xbc>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe f943 	bl	8005344 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d12e      	bne.n	800712c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d90e      	bls.n	80070fe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ec:	4b19      	ldr	r3, [pc, #100]	; (8007154 <prvSwitchTimerLists+0xbc>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f7fe f8eb 	bl	80052d2 <vListInsert>
 80070fc:	e016      	b.n	800712c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070fe:	2300      	movs	r3, #0
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	2100      	movs	r1, #0
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fd9d 	bl	8006c48 <xTimerGenericCommand>
 800710e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	603b      	str	r3, [r7, #0]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800712c:	4b09      	ldr	r3, [pc, #36]	; (8007154 <prvSwitchTimerLists+0xbc>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1b4      	bne.n	80070a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <prvSwitchTimerLists+0xbc>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <prvSwitchTimerLists+0xc0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a04      	ldr	r2, [pc, #16]	; (8007154 <prvSwitchTimerLists+0xbc>)
 8007142:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007144:	4a04      	ldr	r2, [pc, #16]	; (8007158 <prvSwitchTimerLists+0xc0>)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	6013      	str	r3, [r2, #0]
}
 800714a:	bf00      	nop
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000eb4 	.word	0x20000eb4
 8007158:	20000eb8 	.word	0x20000eb8

0800715c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007162:	f000 f967 	bl	8007434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007166:	4b15      	ldr	r3, [pc, #84]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d120      	bne.n	80071b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800716e:	4814      	ldr	r0, [pc, #80]	; (80071c0 <prvCheckForValidListAndQueue+0x64>)
 8007170:	f7fe f85e 	bl	8005230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007174:	4813      	ldr	r0, [pc, #76]	; (80071c4 <prvCheckForValidListAndQueue+0x68>)
 8007176:	f7fe f85b 	bl	8005230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <prvCheckForValidListAndQueue+0x6c>)
 800717c:	4a10      	ldr	r2, [pc, #64]	; (80071c0 <prvCheckForValidListAndQueue+0x64>)
 800717e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007180:	4b12      	ldr	r3, [pc, #72]	; (80071cc <prvCheckForValidListAndQueue+0x70>)
 8007182:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <prvCheckForValidListAndQueue+0x68>)
 8007184:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007186:	2300      	movs	r3, #0
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <prvCheckForValidListAndQueue+0x74>)
 800718c:	4a11      	ldr	r2, [pc, #68]	; (80071d4 <prvCheckForValidListAndQueue+0x78>)
 800718e:	2110      	movs	r1, #16
 8007190:	200a      	movs	r0, #10
 8007192:	f7fe f969 	bl	8005468 <xQueueGenericCreateStatic>
 8007196:	4603      	mov	r3, r0
 8007198:	4a08      	ldr	r2, [pc, #32]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 800719a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d005      	beq.n	80071b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	490b      	ldr	r1, [pc, #44]	; (80071d8 <prvCheckForValidListAndQueue+0x7c>)
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fd7c 	bl	8005ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071b0:	f000 f970 	bl	8007494 <vPortExitCritical>
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000ebc 	.word	0x20000ebc
 80071c0:	20000e8c 	.word	0x20000e8c
 80071c4:	20000ea0 	.word	0x20000ea0
 80071c8:	20000eb4 	.word	0x20000eb4
 80071cc:	20000eb8 	.word	0x20000eb8
 80071d0:	20000f68 	.word	0x20000f68
 80071d4:	20000ec8 	.word	0x20000ec8
 80071d8:	0800a950 	.word	0x0800a950

080071dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3b04      	subs	r3, #4
 80071ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3b04      	subs	r3, #4
 80071fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3b04      	subs	r3, #4
 800720a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800720c:	4a0c      	ldr	r2, [pc, #48]	; (8007240 <pxPortInitialiseStack+0x64>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3b14      	subs	r3, #20
 8007216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3b04      	subs	r3, #4
 8007222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f06f 0202 	mvn.w	r2, #2
 800722a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3b20      	subs	r3, #32
 8007230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	08007245 	.word	0x08007245

08007244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <prvTaskExitError+0x54>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007256:	d00a      	beq.n	800726e <prvTaskExitError+0x2a>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	60fb      	str	r3, [r7, #12]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <prvTaskExitError+0x28>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60bb      	str	r3, [r7, #8]
}
 8007280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007282:	bf00      	nop
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0fc      	beq.n	8007284 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	2000000c 	.word	0x2000000c
 800729c:	00000000 	.word	0x00000000

080072a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <pxCurrentTCBConst2>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	f380 8809 	msr	PSP, r0
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8811 	msr	BASEPRI, r0
 80072ba:	4770      	bx	lr
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst2>:
 80072c0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072c8:	4808      	ldr	r0, [pc, #32]	; (80072ec <prvPortStartFirstTask+0x24>)
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f380 8808 	msr	MSP, r0
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8814 	msr	CONTROL, r0
 80072da:	b662      	cpsie	i
 80072dc:	b661      	cpsie	f
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	df00      	svc	0
 80072e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ea:	bf00      	nop
 80072ec:	e000ed08 	.word	0xe000ed08

080072f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072f6:	4b46      	ldr	r3, [pc, #280]	; (8007410 <xPortStartScheduler+0x120>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a46      	ldr	r2, [pc, #280]	; (8007414 <xPortStartScheduler+0x124>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10a      	bne.n	8007316 <xPortStartScheduler+0x26>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007316:	4b3e      	ldr	r3, [pc, #248]	; (8007410 <xPortStartScheduler+0x120>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3f      	ldr	r2, [pc, #252]	; (8007418 <xPortStartScheduler+0x128>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d10a      	bne.n	8007336 <xPortStartScheduler+0x46>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007336:	4b39      	ldr	r3, [pc, #228]	; (800741c <xPortStartScheduler+0x12c>)
 8007338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007358:	b2da      	uxtb	r2, r3
 800735a:	4b31      	ldr	r3, [pc, #196]	; (8007420 <xPortStartScheduler+0x130>)
 800735c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800735e:	4b31      	ldr	r3, [pc, #196]	; (8007424 <xPortStartScheduler+0x134>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007364:	e009      	b.n	800737a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007366:	4b2f      	ldr	r3, [pc, #188]	; (8007424 <xPortStartScheduler+0x134>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3b01      	subs	r3, #1
 800736c:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <xPortStartScheduler+0x134>)
 800736e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b80      	cmp	r3, #128	; 0x80
 8007384:	d0ef      	beq.n	8007366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007386:	4b27      	ldr	r3, [pc, #156]	; (8007424 <xPortStartScheduler+0x134>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1c3 0307 	rsb	r3, r3, #7
 800738e:	2b04      	cmp	r3, #4
 8007390:	d00a      	beq.n	80073a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	60bb      	str	r3, [r7, #8]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073a8:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <xPortStartScheduler+0x134>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <xPortStartScheduler+0x134>)
 80073b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073b2:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <xPortStartScheduler+0x134>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ba:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <xPortStartScheduler+0x134>)
 80073bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073c6:	4b18      	ldr	r3, [pc, #96]	; (8007428 <xPortStartScheduler+0x138>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a17      	ldr	r2, [pc, #92]	; (8007428 <xPortStartScheduler+0x138>)
 80073cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <xPortStartScheduler+0x138>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a14      	ldr	r2, [pc, #80]	; (8007428 <xPortStartScheduler+0x138>)
 80073d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073de:	f000 f8dd 	bl	800759c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <xPortStartScheduler+0x13c>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073e8:	f000 f8fc 	bl	80075e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073ec:	4b10      	ldr	r3, [pc, #64]	; (8007430 <xPortStartScheduler+0x140>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a0f      	ldr	r2, [pc, #60]	; (8007430 <xPortStartScheduler+0x140>)
 80073f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073f8:	f7ff ff66 	bl	80072c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073fc:	f7ff f880 	bl	8006500 <vTaskSwitchContext>
	prvTaskExitError();
 8007400:	f7ff ff20 	bl	8007244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	e000ed00 	.word	0xe000ed00
 8007414:	410fc271 	.word	0x410fc271
 8007418:	410fc270 	.word	0x410fc270
 800741c:	e000e400 	.word	0xe000e400
 8007420:	20000fb8 	.word	0x20000fb8
 8007424:	20000fbc 	.word	0x20000fbc
 8007428:	e000ed20 	.word	0xe000ed20
 800742c:	2000000c 	.word	0x2000000c
 8007430:	e000ef34 	.word	0xe000ef34

08007434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	607b      	str	r3, [r7, #4]
}
 800744c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800744e:	4b0f      	ldr	r3, [pc, #60]	; (800748c <vPortEnterCritical+0x58>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <vPortEnterCritical+0x58>)
 8007456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <vPortEnterCritical+0x58>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d10f      	bne.n	8007480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <vPortEnterCritical+0x5c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <vPortEnterCritical+0x4c>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	603b      	str	r3, [r7, #0]
}
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <vPortEnterCritical+0x4a>
	}
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	2000000c 	.word	0x2000000c
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800749a:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <vPortExitCritical+0x50>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <vPortExitCritical+0x24>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	607b      	str	r3, [r7, #4]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <vPortExitCritical+0x50>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a09      	ldr	r2, [pc, #36]	; (80074e4 <vPortExitCritical+0x50>)
 80074c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <vPortExitCritical+0x50>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <vPortExitCritical+0x42>
 80074ca:	2300      	movs	r3, #0
 80074cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f383 8811 	msr	BASEPRI, r3
}
 80074d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	2000000c 	.word	0x2000000c
	...

080074f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f01e 0f10 	tst.w	lr, #16
 8007500:	bf08      	it	eq
 8007502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007514:	f380 8811 	msr	BASEPRI, r0
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f7fe ffee 	bl	8006500 <vTaskSwitchContext>
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f380 8811 	msr	BASEPRI, r0
 800752c:	bc09      	pop	{r0, r3}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f01e 0f10 	tst.w	lr, #16
 800753a:	bf08      	it	eq
 800753c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007540:	f380 8809 	msr	PSP, r0
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst>:
 8007550:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007572:	f7fe ff07 	bl	8006384 <xTaskIncrementTick>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <SysTick_Handler+0x40>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <vPortSetupTimerInterrupt+0x38>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <vPortSetupTimerInterrupt+0x3c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <vPortSetupTimerInterrupt+0x40>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <vPortSetupTimerInterrupt+0x44>)
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075be:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	e000e010 	.word	0xe000e010
 80075d4:	e000e018 	.word	0xe000e018
 80075d8:	20000000 	.word	0x20000000
 80075dc:	10624dd3 	.word	0x10624dd3
 80075e0:	e000e014 	.word	0xe000e014

080075e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075f4 <vPortEnableVFP+0x10>
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ee:	6001      	str	r1, [r0, #0]
 80075f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075f2:	bf00      	nop
 80075f4:	e000ed88 	.word	0xe000ed88

080075f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075fe:	f3ef 8305 	mrs	r3, IPSR
 8007602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d914      	bls.n	8007634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <vPortValidateInterruptPriority+0x70>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007614:	4b15      	ldr	r3, [pc, #84]	; (800766c <vPortValidateInterruptPriority+0x74>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	7afa      	ldrb	r2, [r7, #11]
 800761a:	429a      	cmp	r2, r3
 800761c:	d20a      	bcs.n	8007634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007634:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <vPortValidateInterruptPriority+0x78>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800763c:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <vPortValidateInterruptPriority+0x7c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d90a      	bls.n	800765a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	603b      	str	r3, [r7, #0]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <vPortValidateInterruptPriority+0x60>
	}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	e000e3f0 	.word	0xe000e3f0
 800766c:	20000fb8 	.word	0x20000fb8
 8007670:	e000ed0c 	.word	0xe000ed0c
 8007674:	20000fbc 	.word	0x20000fbc

08007678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	; 0x28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007684:	f7fe fdc2 	bl	800620c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007688:	4b58      	ldr	r3, [pc, #352]	; (80077ec <pvPortMalloc+0x174>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007690:	f000 f910 	bl	80078b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007694:	4b56      	ldr	r3, [pc, #344]	; (80077f0 <pvPortMalloc+0x178>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	f040 808e 	bne.w	80077be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01d      	beq.n	80076e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076a8:	2208      	movs	r2, #8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d014      	beq.n	80076e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f023 0307 	bic.w	r3, r3, #7
 80076c0:	3308      	adds	r3, #8
 80076c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <pvPortMalloc+0x6c>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	617b      	str	r3, [r7, #20]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d069      	beq.n	80077be <pvPortMalloc+0x146>
 80076ea:	4b42      	ldr	r3, [pc, #264]	; (80077f4 <pvPortMalloc+0x17c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d864      	bhi.n	80077be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076f4:	4b40      	ldr	r3, [pc, #256]	; (80077f8 <pvPortMalloc+0x180>)
 80076f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076f8:	4b3f      	ldr	r3, [pc, #252]	; (80077f8 <pvPortMalloc+0x180>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076fe:	e004      	b.n	800770a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d903      	bls.n	800771c <pvPortMalloc+0xa4>
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f1      	bne.n	8007700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800771c:	4b33      	ldr	r3, [pc, #204]	; (80077ec <pvPortMalloc+0x174>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007722:	429a      	cmp	r2, r3
 8007724:	d04b      	beq.n	80077be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2208      	movs	r2, #8
 800772c:	4413      	add	r3, r2
 800772e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	2308      	movs	r3, #8
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	429a      	cmp	r2, r3
 8007746:	d91f      	bls.n	8007788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <pvPortMalloc+0xf8>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	613b      	str	r3, [r7, #16]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007782:	69b8      	ldr	r0, [r7, #24]
 8007784:	f000 f8f8 	bl	8007978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007788:	4b1a      	ldr	r3, [pc, #104]	; (80077f4 <pvPortMalloc+0x17c>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	4a18      	ldr	r2, [pc, #96]	; (80077f4 <pvPortMalloc+0x17c>)
 8007794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007796:	4b17      	ldr	r3, [pc, #92]	; (80077f4 <pvPortMalloc+0x17c>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	4b18      	ldr	r3, [pc, #96]	; (80077fc <pvPortMalloc+0x184>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d203      	bcs.n	80077aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <pvPortMalloc+0x17c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a15      	ldr	r2, [pc, #84]	; (80077fc <pvPortMalloc+0x184>)
 80077a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <pvPortMalloc+0x178>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077be:	f7fe fd33 	bl	8006228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <pvPortMalloc+0x16a>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60fb      	str	r3, [r7, #12]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <pvPortMalloc+0x168>
	return pvReturn;
 80077e2:	69fb      	ldr	r3, [r7, #28]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3728      	adds	r7, #40	; 0x28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20001bc8 	.word	0x20001bc8
 80077f0:	20001bd4 	.word	0x20001bd4
 80077f4:	20001bcc 	.word	0x20001bcc
 80077f8:	20001bc0 	.word	0x20001bc0
 80077fc:	20001bd0 	.word	0x20001bd0

08007800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d048      	beq.n	80078a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007812:	2308      	movs	r3, #8
 8007814:	425b      	negs	r3, r3
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4413      	add	r3, r2
 800781a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	4b21      	ldr	r3, [pc, #132]	; (80078ac <vPortFree+0xac>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4013      	ands	r3, r2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <vPortFree+0x44>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	60fb      	str	r3, [r7, #12]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <vPortFree+0x62>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60bb      	str	r3, [r7, #8]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	4b11      	ldr	r3, [pc, #68]	; (80078ac <vPortFree+0xac>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d019      	beq.n	80078a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d115      	bne.n	80078a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <vPortFree+0xac>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	43db      	mvns	r3, r3
 8007882:	401a      	ands	r2, r3
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007888:	f7fe fcc0 	bl	800620c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <vPortFree+0xb0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4413      	add	r3, r2
 8007896:	4a06      	ldr	r2, [pc, #24]	; (80078b0 <vPortFree+0xb0>)
 8007898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800789a:	6938      	ldr	r0, [r7, #16]
 800789c:	f000 f86c 	bl	8007978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80078a0:	f7fe fcc2 	bl	8006228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078a4:	bf00      	nop
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20001bd4 	.word	0x20001bd4
 80078b0:	20001bcc 	.word	0x20001bcc

080078b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078c0:	4b27      	ldr	r3, [pc, #156]	; (8007960 <prvHeapInit+0xac>)
 80078c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00c      	beq.n	80078e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3307      	adds	r3, #7
 80078d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a1f      	ldr	r2, [pc, #124]	; (8007960 <prvHeapInit+0xac>)
 80078e4:	4413      	add	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078ec:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <prvHeapInit+0xb0>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078f2:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <prvHeapInit+0xb0>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4413      	add	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007900:	2208      	movs	r2, #8
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <prvHeapInit+0xb4>)
 8007914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <prvHeapInit+0xb4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <prvHeapInit+0xb4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007934:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <prvHeapInit+0xb4>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4a0a      	ldr	r2, [pc, #40]	; (800796c <prvHeapInit+0xb8>)
 8007942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <prvHeapInit+0xbc>)
 800794a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <prvHeapInit+0xc0>)
 800794e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007952:	601a      	str	r2, [r3, #0]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	20000fc0 	.word	0x20000fc0
 8007964:	20001bc0 	.word	0x20001bc0
 8007968:	20001bc8 	.word	0x20001bc8
 800796c:	20001bd0 	.word	0x20001bd0
 8007970:	20001bcc 	.word	0x20001bcc
 8007974:	20001bd4 	.word	0x20001bd4

08007978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007980:	4b28      	ldr	r3, [pc, #160]	; (8007a24 <prvInsertBlockIntoFreeList+0xac>)
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e002      	b.n	800798c <prvInsertBlockIntoFreeList+0x14>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	429a      	cmp	r2, r3
 8007994:	d8f7      	bhi.n	8007986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d108      	bne.n	80079ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	441a      	add	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	441a      	add	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d118      	bne.n	8007a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <prvInsertBlockIntoFreeList+0xb0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d00d      	beq.n	80079f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	441a      	add	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e008      	b.n	8007a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079f6:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <prvInsertBlockIntoFreeList+0xb0>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e003      	b.n	8007a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d002      	beq.n	8007a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20001bc0 	.word	0x20001bc0
 8007a28:	20001bc8 	.word	0x20001bc8

08007a2c <__errno>:
 8007a2c:	4b01      	ldr	r3, [pc, #4]	; (8007a34 <__errno+0x8>)
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20000010 	.word	0x20000010

08007a38 <std>:
 8007a38:	2300      	movs	r3, #0
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a46:	6083      	str	r3, [r0, #8]
 8007a48:	8181      	strh	r1, [r0, #12]
 8007a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a4c:	81c2      	strh	r2, [r0, #14]
 8007a4e:	6183      	str	r3, [r0, #24]
 8007a50:	4619      	mov	r1, r3
 8007a52:	2208      	movs	r2, #8
 8007a54:	305c      	adds	r0, #92	; 0x5c
 8007a56:	f000 f923 	bl	8007ca0 <memset>
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <std+0x38>)
 8007a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a5e:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <std+0x3c>)
 8007a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a62:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <std+0x40>)
 8007a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a66:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <std+0x44>)
 8007a68:	6224      	str	r4, [r4, #32]
 8007a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	bf00      	nop
 8007a70:	0800880d 	.word	0x0800880d
 8007a74:	0800882f 	.word	0x0800882f
 8007a78:	08008867 	.word	0x08008867
 8007a7c:	0800888b 	.word	0x0800888b

08007a80 <_cleanup_r>:
 8007a80:	4901      	ldr	r1, [pc, #4]	; (8007a88 <_cleanup_r+0x8>)
 8007a82:	f000 b8af 	b.w	8007be4 <_fwalk_reent>
 8007a86:	bf00      	nop
 8007a88:	080096d5 	.word	0x080096d5

08007a8c <__sfmoreglue>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	1e4a      	subs	r2, r1, #1
 8007a90:	2568      	movs	r5, #104	; 0x68
 8007a92:	4355      	muls	r5, r2
 8007a94:	460e      	mov	r6, r1
 8007a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a9a:	f000 f959 	bl	8007d50 <_malloc_r>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	b140      	cbz	r0, 8007ab4 <__sfmoreglue+0x28>
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	60a0      	str	r0, [r4, #8]
 8007aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ab0:	f000 f8f6 	bl	8007ca0 <memset>
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}

08007ab8 <__sfp_lock_acquire>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	; (8007ac0 <__sfp_lock_acquire+0x8>)
 8007aba:	f000 b8d8 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007abe:	bf00      	nop
 8007ac0:	20004e84 	.word	0x20004e84

08007ac4 <__sfp_lock_release>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	; (8007acc <__sfp_lock_release+0x8>)
 8007ac6:	f000 b8d3 	b.w	8007c70 <__retarget_lock_release_recursive>
 8007aca:	bf00      	nop
 8007acc:	20004e84 	.word	0x20004e84

08007ad0 <__sinit_lock_acquire>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__sinit_lock_acquire+0x8>)
 8007ad2:	f000 b8cc 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	20004e7f 	.word	0x20004e7f

08007adc <__sinit_lock_release>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__sinit_lock_release+0x8>)
 8007ade:	f000 b8c7 	b.w	8007c70 <__retarget_lock_release_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	20004e7f 	.word	0x20004e7f

08007ae8 <__sinit>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	f7ff fff0 	bl	8007ad0 <__sinit_lock_acquire>
 8007af0:	69a3      	ldr	r3, [r4, #24]
 8007af2:	b11b      	cbz	r3, 8007afc <__sinit+0x14>
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f7ff bff0 	b.w	8007adc <__sinit_lock_release>
 8007afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b00:	6523      	str	r3, [r4, #80]	; 0x50
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <__sinit+0x68>)
 8007b04:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <__sinit+0x6c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	bf04      	itt	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	61a3      	streq	r3, [r4, #24]
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 f820 	bl	8007b58 <__sfp>
 8007b18:	6060      	str	r0, [r4, #4]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 f81c 	bl	8007b58 <__sfp>
 8007b20:	60a0      	str	r0, [r4, #8]
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f818 	bl	8007b58 <__sfp>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	60e0      	str	r0, [r4, #12]
 8007b2c:	2104      	movs	r1, #4
 8007b2e:	6860      	ldr	r0, [r4, #4]
 8007b30:	f7ff ff82 	bl	8007a38 <std>
 8007b34:	68a0      	ldr	r0, [r4, #8]
 8007b36:	2201      	movs	r2, #1
 8007b38:	2109      	movs	r1, #9
 8007b3a:	f7ff ff7d 	bl	8007a38 <std>
 8007b3e:	68e0      	ldr	r0, [r4, #12]
 8007b40:	2202      	movs	r2, #2
 8007b42:	2112      	movs	r1, #18
 8007b44:	f7ff ff78 	bl	8007a38 <std>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	61a3      	str	r3, [r4, #24]
 8007b4c:	e7d2      	b.n	8007af4 <__sinit+0xc>
 8007b4e:	bf00      	nop
 8007b50:	0800aa5c 	.word	0x0800aa5c
 8007b54:	08007a81 	.word	0x08007a81

08007b58 <__sfp>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	f7ff ffac 	bl	8007ab8 <__sfp_lock_acquire>
 8007b60:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <__sfp+0x84>)
 8007b62:	681e      	ldr	r6, [r3, #0]
 8007b64:	69b3      	ldr	r3, [r6, #24]
 8007b66:	b913      	cbnz	r3, 8007b6e <__sfp+0x16>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff ffbd 	bl	8007ae8 <__sinit>
 8007b6e:	3648      	adds	r6, #72	; 0x48
 8007b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	d503      	bpl.n	8007b80 <__sfp+0x28>
 8007b78:	6833      	ldr	r3, [r6, #0]
 8007b7a:	b30b      	cbz	r3, 8007bc0 <__sfp+0x68>
 8007b7c:	6836      	ldr	r6, [r6, #0]
 8007b7e:	e7f7      	b.n	8007b70 <__sfp+0x18>
 8007b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b84:	b9d5      	cbnz	r5, 8007bbc <__sfp+0x64>
 8007b86:	4b16      	ldr	r3, [pc, #88]	; (8007be0 <__sfp+0x88>)
 8007b88:	60e3      	str	r3, [r4, #12]
 8007b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8007b90:	f000 f86c 	bl	8007c6c <__retarget_lock_init_recursive>
 8007b94:	f7ff ff96 	bl	8007ac4 <__sfp_lock_release>
 8007b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ba0:	6025      	str	r5, [r4, #0]
 8007ba2:	61a5      	str	r5, [r4, #24]
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bac:	f000 f878 	bl	8007ca0 <memset>
 8007bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bbc:	3468      	adds	r4, #104	; 0x68
 8007bbe:	e7d9      	b.n	8007b74 <__sfp+0x1c>
 8007bc0:	2104      	movs	r1, #4
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7ff ff62 	bl	8007a8c <__sfmoreglue>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	6030      	str	r0, [r6, #0]
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d1d5      	bne.n	8007b7c <__sfp+0x24>
 8007bd0:	f7ff ff78 	bl	8007ac4 <__sfp_lock_release>
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	e7ee      	b.n	8007bb8 <__sfp+0x60>
 8007bda:	bf00      	nop
 8007bdc:	0800aa5c 	.word	0x0800aa5c
 8007be0:	ffff0001 	.word	0xffff0001

08007be4 <_fwalk_reent>:
 8007be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be8:	4606      	mov	r6, r0
 8007bea:	4688      	mov	r8, r1
 8007bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bf0:	2700      	movs	r7, #0
 8007bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8007bfa:	d505      	bpl.n	8007c08 <_fwalk_reent+0x24>
 8007bfc:	6824      	ldr	r4, [r4, #0]
 8007bfe:	2c00      	cmp	r4, #0
 8007c00:	d1f7      	bne.n	8007bf2 <_fwalk_reent+0xe>
 8007c02:	4638      	mov	r0, r7
 8007c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d907      	bls.n	8007c1e <_fwalk_reent+0x3a>
 8007c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c12:	3301      	adds	r3, #1
 8007c14:	d003      	beq.n	8007c1e <_fwalk_reent+0x3a>
 8007c16:	4629      	mov	r1, r5
 8007c18:	4630      	mov	r0, r6
 8007c1a:	47c0      	blx	r8
 8007c1c:	4307      	orrs	r7, r0
 8007c1e:	3568      	adds	r5, #104	; 0x68
 8007c20:	e7e9      	b.n	8007bf6 <_fwalk_reent+0x12>
	...

08007c24 <__libc_init_array>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	4d0d      	ldr	r5, [pc, #52]	; (8007c5c <__libc_init_array+0x38>)
 8007c28:	4c0d      	ldr	r4, [pc, #52]	; (8007c60 <__libc_init_array+0x3c>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	2600      	movs	r6, #0
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	d109      	bne.n	8007c48 <__libc_init_array+0x24>
 8007c34:	4d0b      	ldr	r5, [pc, #44]	; (8007c64 <__libc_init_array+0x40>)
 8007c36:	4c0c      	ldr	r4, [pc, #48]	; (8007c68 <__libc_init_array+0x44>)
 8007c38:	f002 fe28 	bl	800a88c <_init>
 8007c3c:	1b64      	subs	r4, r4, r5
 8007c3e:	10a4      	asrs	r4, r4, #2
 8007c40:	2600      	movs	r6, #0
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	d105      	bne.n	8007c52 <__libc_init_array+0x2e>
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4c:	4798      	blx	r3
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7ee      	b.n	8007c30 <__libc_init_array+0xc>
 8007c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c56:	4798      	blx	r3
 8007c58:	3601      	adds	r6, #1
 8007c5a:	e7f2      	b.n	8007c42 <__libc_init_array+0x1e>
 8007c5c:	0800addc 	.word	0x0800addc
 8007c60:	0800addc 	.word	0x0800addc
 8007c64:	0800addc 	.word	0x0800addc
 8007c68:	0800ade0 	.word	0x0800ade0

08007c6c <__retarget_lock_init_recursive>:
 8007c6c:	4770      	bx	lr

08007c6e <__retarget_lock_acquire_recursive>:
 8007c6e:	4770      	bx	lr

08007c70 <__retarget_lock_release_recursive>:
 8007c70:	4770      	bx	lr
	...

08007c74 <malloc>:
 8007c74:	4b02      	ldr	r3, [pc, #8]	; (8007c80 <malloc+0xc>)
 8007c76:	4601      	mov	r1, r0
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	f000 b869 	b.w	8007d50 <_malloc_r>
 8007c7e:	bf00      	nop
 8007c80:	20000010 	.word	0x20000010

08007c84 <memcpy>:
 8007c84:	440a      	add	r2, r1
 8007c86:	4291      	cmp	r1, r2
 8007c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c8c:	d100      	bne.n	8007c90 <memcpy+0xc>
 8007c8e:	4770      	bx	lr
 8007c90:	b510      	push	{r4, lr}
 8007c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c9a:	4291      	cmp	r1, r2
 8007c9c:	d1f9      	bne.n	8007c92 <memcpy+0xe>
 8007c9e:	bd10      	pop	{r4, pc}

08007ca0 <memset>:
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d100      	bne.n	8007caa <memset+0xa>
 8007ca8:	4770      	bx	lr
 8007caa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cae:	e7f9      	b.n	8007ca4 <memset+0x4>

08007cb0 <_free_r>:
 8007cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cb2:	2900      	cmp	r1, #0
 8007cb4:	d048      	beq.n	8007d48 <_free_r+0x98>
 8007cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cba:	9001      	str	r0, [sp, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8007cc2:	bfb8      	it	lt
 8007cc4:	18e4      	addlt	r4, r4, r3
 8007cc6:	f001 fd57 	bl	8009778 <__malloc_lock>
 8007cca:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <_free_r+0x9c>)
 8007ccc:	9801      	ldr	r0, [sp, #4]
 8007cce:	6813      	ldr	r3, [r2, #0]
 8007cd0:	4615      	mov	r5, r2
 8007cd2:	b933      	cbnz	r3, 8007ce2 <_free_r+0x32>
 8007cd4:	6063      	str	r3, [r4, #4]
 8007cd6:	6014      	str	r4, [r2, #0]
 8007cd8:	b003      	add	sp, #12
 8007cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cde:	f001 bd51 	b.w	8009784 <__malloc_unlock>
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	d90b      	bls.n	8007cfe <_free_r+0x4e>
 8007ce6:	6821      	ldr	r1, [r4, #0]
 8007ce8:	1862      	adds	r2, r4, r1
 8007cea:	4293      	cmp	r3, r2
 8007cec:	bf04      	itt	eq
 8007cee:	681a      	ldreq	r2, [r3, #0]
 8007cf0:	685b      	ldreq	r3, [r3, #4]
 8007cf2:	6063      	str	r3, [r4, #4]
 8007cf4:	bf04      	itt	eq
 8007cf6:	1852      	addeq	r2, r2, r1
 8007cf8:	6022      	streq	r2, [r4, #0]
 8007cfa:	602c      	str	r4, [r5, #0]
 8007cfc:	e7ec      	b.n	8007cd8 <_free_r+0x28>
 8007cfe:	461a      	mov	r2, r3
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	b10b      	cbz	r3, 8007d08 <_free_r+0x58>
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	d9fa      	bls.n	8007cfe <_free_r+0x4e>
 8007d08:	6811      	ldr	r1, [r2, #0]
 8007d0a:	1855      	adds	r5, r2, r1
 8007d0c:	42a5      	cmp	r5, r4
 8007d0e:	d10b      	bne.n	8007d28 <_free_r+0x78>
 8007d10:	6824      	ldr	r4, [r4, #0]
 8007d12:	4421      	add	r1, r4
 8007d14:	1854      	adds	r4, r2, r1
 8007d16:	42a3      	cmp	r3, r4
 8007d18:	6011      	str	r1, [r2, #0]
 8007d1a:	d1dd      	bne.n	8007cd8 <_free_r+0x28>
 8007d1c:	681c      	ldr	r4, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	6053      	str	r3, [r2, #4]
 8007d22:	4421      	add	r1, r4
 8007d24:	6011      	str	r1, [r2, #0]
 8007d26:	e7d7      	b.n	8007cd8 <_free_r+0x28>
 8007d28:	d902      	bls.n	8007d30 <_free_r+0x80>
 8007d2a:	230c      	movs	r3, #12
 8007d2c:	6003      	str	r3, [r0, #0]
 8007d2e:	e7d3      	b.n	8007cd8 <_free_r+0x28>
 8007d30:	6825      	ldr	r5, [r4, #0]
 8007d32:	1961      	adds	r1, r4, r5
 8007d34:	428b      	cmp	r3, r1
 8007d36:	bf04      	itt	eq
 8007d38:	6819      	ldreq	r1, [r3, #0]
 8007d3a:	685b      	ldreq	r3, [r3, #4]
 8007d3c:	6063      	str	r3, [r4, #4]
 8007d3e:	bf04      	itt	eq
 8007d40:	1949      	addeq	r1, r1, r5
 8007d42:	6021      	streq	r1, [r4, #0]
 8007d44:	6054      	str	r4, [r2, #4]
 8007d46:	e7c7      	b.n	8007cd8 <_free_r+0x28>
 8007d48:	b003      	add	sp, #12
 8007d4a:	bd30      	pop	{r4, r5, pc}
 8007d4c:	20001bd8 	.word	0x20001bd8

08007d50 <_malloc_r>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	1ccd      	adds	r5, r1, #3
 8007d54:	f025 0503 	bic.w	r5, r5, #3
 8007d58:	3508      	adds	r5, #8
 8007d5a:	2d0c      	cmp	r5, #12
 8007d5c:	bf38      	it	cc
 8007d5e:	250c      	movcc	r5, #12
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	4606      	mov	r6, r0
 8007d64:	db01      	blt.n	8007d6a <_malloc_r+0x1a>
 8007d66:	42a9      	cmp	r1, r5
 8007d68:	d903      	bls.n	8007d72 <_malloc_r+0x22>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	6033      	str	r3, [r6, #0]
 8007d6e:	2000      	movs	r0, #0
 8007d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d72:	f001 fd01 	bl	8009778 <__malloc_lock>
 8007d76:	4921      	ldr	r1, [pc, #132]	; (8007dfc <_malloc_r+0xac>)
 8007d78:	680a      	ldr	r2, [r1, #0]
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	b99c      	cbnz	r4, 8007da6 <_malloc_r+0x56>
 8007d7e:	4f20      	ldr	r7, [pc, #128]	; (8007e00 <_malloc_r+0xb0>)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	b923      	cbnz	r3, 8007d8e <_malloc_r+0x3e>
 8007d84:	4621      	mov	r1, r4
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 fd10 	bl	80087ac <_sbrk_r>
 8007d8c:	6038      	str	r0, [r7, #0]
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4630      	mov	r0, r6
 8007d92:	f000 fd0b 	bl	80087ac <_sbrk_r>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d123      	bne.n	8007de2 <_malloc_r+0x92>
 8007d9a:	230c      	movs	r3, #12
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f001 fcf0 	bl	8009784 <__malloc_unlock>
 8007da4:	e7e3      	b.n	8007d6e <_malloc_r+0x1e>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	1b5b      	subs	r3, r3, r5
 8007daa:	d417      	bmi.n	8007ddc <_malloc_r+0x8c>
 8007dac:	2b0b      	cmp	r3, #11
 8007dae:	d903      	bls.n	8007db8 <_malloc_r+0x68>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	441c      	add	r4, r3
 8007db4:	6025      	str	r5, [r4, #0]
 8007db6:	e004      	b.n	8007dc2 <_malloc_r+0x72>
 8007db8:	6863      	ldr	r3, [r4, #4]
 8007dba:	42a2      	cmp	r2, r4
 8007dbc:	bf0c      	ite	eq
 8007dbe:	600b      	streq	r3, [r1, #0]
 8007dc0:	6053      	strne	r3, [r2, #4]
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f001 fcde 	bl	8009784 <__malloc_unlock>
 8007dc8:	f104 000b 	add.w	r0, r4, #11
 8007dcc:	1d23      	adds	r3, r4, #4
 8007dce:	f020 0007 	bic.w	r0, r0, #7
 8007dd2:	1ac2      	subs	r2, r0, r3
 8007dd4:	d0cc      	beq.n	8007d70 <_malloc_r+0x20>
 8007dd6:	1a1b      	subs	r3, r3, r0
 8007dd8:	50a3      	str	r3, [r4, r2]
 8007dda:	e7c9      	b.n	8007d70 <_malloc_r+0x20>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	6864      	ldr	r4, [r4, #4]
 8007de0:	e7cc      	b.n	8007d7c <_malloc_r+0x2c>
 8007de2:	1cc4      	adds	r4, r0, #3
 8007de4:	f024 0403 	bic.w	r4, r4, #3
 8007de8:	42a0      	cmp	r0, r4
 8007dea:	d0e3      	beq.n	8007db4 <_malloc_r+0x64>
 8007dec:	1a21      	subs	r1, r4, r0
 8007dee:	4630      	mov	r0, r6
 8007df0:	f000 fcdc 	bl	80087ac <_sbrk_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d1dd      	bne.n	8007db4 <_malloc_r+0x64>
 8007df8:	e7cf      	b.n	8007d9a <_malloc_r+0x4a>
 8007dfa:	bf00      	nop
 8007dfc:	20001bd8 	.word	0x20001bd8
 8007e00:	20001bdc 	.word	0x20001bdc

08007e04 <__cvt>:
 8007e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	ec55 4b10 	vmov	r4, r5, d0
 8007e0c:	2d00      	cmp	r5, #0
 8007e0e:	460e      	mov	r6, r1
 8007e10:	4619      	mov	r1, r3
 8007e12:	462b      	mov	r3, r5
 8007e14:	bfbb      	ittet	lt
 8007e16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e1a:	461d      	movlt	r5, r3
 8007e1c:	2300      	movge	r3, #0
 8007e1e:	232d      	movlt	r3, #45	; 0x2d
 8007e20:	700b      	strb	r3, [r1, #0]
 8007e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e28:	4691      	mov	r9, r2
 8007e2a:	f023 0820 	bic.w	r8, r3, #32
 8007e2e:	bfbc      	itt	lt
 8007e30:	4622      	movlt	r2, r4
 8007e32:	4614      	movlt	r4, r2
 8007e34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e38:	d005      	beq.n	8007e46 <__cvt+0x42>
 8007e3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e3e:	d100      	bne.n	8007e42 <__cvt+0x3e>
 8007e40:	3601      	adds	r6, #1
 8007e42:	2102      	movs	r1, #2
 8007e44:	e000      	b.n	8007e48 <__cvt+0x44>
 8007e46:	2103      	movs	r1, #3
 8007e48:	ab03      	add	r3, sp, #12
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	ab02      	add	r3, sp, #8
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	ec45 4b10 	vmov	d0, r4, r5
 8007e54:	4653      	mov	r3, sl
 8007e56:	4632      	mov	r2, r6
 8007e58:	f000 fdca 	bl	80089f0 <_dtoa_r>
 8007e5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e60:	4607      	mov	r7, r0
 8007e62:	d102      	bne.n	8007e6a <__cvt+0x66>
 8007e64:	f019 0f01 	tst.w	r9, #1
 8007e68:	d022      	beq.n	8007eb0 <__cvt+0xac>
 8007e6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e6e:	eb07 0906 	add.w	r9, r7, r6
 8007e72:	d110      	bne.n	8007e96 <__cvt+0x92>
 8007e74:	783b      	ldrb	r3, [r7, #0]
 8007e76:	2b30      	cmp	r3, #48	; 0x30
 8007e78:	d10a      	bne.n	8007e90 <__cvt+0x8c>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e86:	b918      	cbnz	r0, 8007e90 <__cvt+0x8c>
 8007e88:	f1c6 0601 	rsb	r6, r6, #1
 8007e8c:	f8ca 6000 	str.w	r6, [sl]
 8007e90:	f8da 3000 	ldr.w	r3, [sl]
 8007e94:	4499      	add	r9, r3
 8007e96:	2200      	movs	r2, #0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea2:	b108      	cbz	r0, 8007ea8 <__cvt+0xa4>
 8007ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ea8:	2230      	movs	r2, #48	; 0x30
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	454b      	cmp	r3, r9
 8007eae:	d307      	bcc.n	8007ec0 <__cvt+0xbc>
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eb4:	1bdb      	subs	r3, r3, r7
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	b004      	add	sp, #16
 8007ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec0:	1c59      	adds	r1, r3, #1
 8007ec2:	9103      	str	r1, [sp, #12]
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e7f0      	b.n	8007eaa <__cvt+0xa6>

08007ec8 <__exponent>:
 8007ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	bfb8      	it	lt
 8007ed0:	4249      	neglt	r1, r1
 8007ed2:	f803 2b02 	strb.w	r2, [r3], #2
 8007ed6:	bfb4      	ite	lt
 8007ed8:	222d      	movlt	r2, #45	; 0x2d
 8007eda:	222b      	movge	r2, #43	; 0x2b
 8007edc:	2909      	cmp	r1, #9
 8007ede:	7042      	strb	r2, [r0, #1]
 8007ee0:	dd2a      	ble.n	8007f38 <__exponent+0x70>
 8007ee2:	f10d 0407 	add.w	r4, sp, #7
 8007ee6:	46a4      	mov	ip, r4
 8007ee8:	270a      	movs	r7, #10
 8007eea:	46a6      	mov	lr, r4
 8007eec:	460a      	mov	r2, r1
 8007eee:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ef2:	fb07 1516 	mls	r5, r7, r6, r1
 8007ef6:	3530      	adds	r5, #48	; 0x30
 8007ef8:	2a63      	cmp	r2, #99	; 0x63
 8007efa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007efe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f02:	4631      	mov	r1, r6
 8007f04:	dcf1      	bgt.n	8007eea <__exponent+0x22>
 8007f06:	3130      	adds	r1, #48	; 0x30
 8007f08:	f1ae 0502 	sub.w	r5, lr, #2
 8007f0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f10:	1c44      	adds	r4, r0, #1
 8007f12:	4629      	mov	r1, r5
 8007f14:	4561      	cmp	r1, ip
 8007f16:	d30a      	bcc.n	8007f2e <__exponent+0x66>
 8007f18:	f10d 0209 	add.w	r2, sp, #9
 8007f1c:	eba2 020e 	sub.w	r2, r2, lr
 8007f20:	4565      	cmp	r5, ip
 8007f22:	bf88      	it	hi
 8007f24:	2200      	movhi	r2, #0
 8007f26:	4413      	add	r3, r2
 8007f28:	1a18      	subs	r0, r3, r0
 8007f2a:	b003      	add	sp, #12
 8007f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f36:	e7ed      	b.n	8007f14 <__exponent+0x4c>
 8007f38:	2330      	movs	r3, #48	; 0x30
 8007f3a:	3130      	adds	r1, #48	; 0x30
 8007f3c:	7083      	strb	r3, [r0, #2]
 8007f3e:	70c1      	strb	r1, [r0, #3]
 8007f40:	1d03      	adds	r3, r0, #4
 8007f42:	e7f1      	b.n	8007f28 <__exponent+0x60>

08007f44 <_printf_float>:
 8007f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	ed2d 8b02 	vpush	{d8}
 8007f4c:	b08d      	sub	sp, #52	; 0x34
 8007f4e:	460c      	mov	r4, r1
 8007f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f54:	4616      	mov	r6, r2
 8007f56:	461f      	mov	r7, r3
 8007f58:	4605      	mov	r5, r0
 8007f5a:	f001 fbf7 	bl	800974c <_localeconv_r>
 8007f5e:	f8d0 a000 	ldr.w	sl, [r0]
 8007f62:	4650      	mov	r0, sl
 8007f64:	f7f8 f93c 	bl	80001e0 <strlen>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	f8d8 3000 	ldr.w	r3, [r8]
 8007f74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f78:	3307      	adds	r3, #7
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	f103 0208 	add.w	r2, r3, #8
 8007f82:	f8c8 2000 	str.w	r2, [r8]
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f96:	9307      	str	r3, [sp, #28]
 8007f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f9c:	ee08 0a10 	vmov	s16, r0
 8007fa0:	4b9f      	ldr	r3, [pc, #636]	; (8008220 <_printf_float+0x2dc>)
 8007fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007faa:	f7f8 fdc7 	bl	8000b3c <__aeabi_dcmpun>
 8007fae:	bb88      	cbnz	r0, 8008014 <_printf_float+0xd0>
 8007fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fb4:	4b9a      	ldr	r3, [pc, #616]	; (8008220 <_printf_float+0x2dc>)
 8007fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fba:	f7f8 fda1 	bl	8000b00 <__aeabi_dcmple>
 8007fbe:	bb48      	cbnz	r0, 8008014 <_printf_float+0xd0>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	f7f8 fd90 	bl	8000aec <__aeabi_dcmplt>
 8007fcc:	b110      	cbz	r0, 8007fd4 <_printf_float+0x90>
 8007fce:	232d      	movs	r3, #45	; 0x2d
 8007fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd4:	4b93      	ldr	r3, [pc, #588]	; (8008224 <_printf_float+0x2e0>)
 8007fd6:	4894      	ldr	r0, [pc, #592]	; (8008228 <_printf_float+0x2e4>)
 8007fd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fdc:	bf94      	ite	ls
 8007fde:	4698      	movls	r8, r3
 8007fe0:	4680      	movhi	r8, r0
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	6123      	str	r3, [r4, #16]
 8007fe6:	9b05      	ldr	r3, [sp, #20]
 8007fe8:	f023 0204 	bic.w	r2, r3, #4
 8007fec:	6022      	str	r2, [r4, #0]
 8007fee:	f04f 0900 	mov.w	r9, #0
 8007ff2:	9700      	str	r7, [sp, #0]
 8007ff4:	4633      	mov	r3, r6
 8007ff6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f000 f9d8 	bl	80083b0 <_printf_common>
 8008000:	3001      	adds	r0, #1
 8008002:	f040 8090 	bne.w	8008126 <_printf_float+0x1e2>
 8008006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800800a:	b00d      	add	sp, #52	; 0x34
 800800c:	ecbd 8b02 	vpop	{d8}
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	4640      	mov	r0, r8
 800801a:	4649      	mov	r1, r9
 800801c:	f7f8 fd8e 	bl	8000b3c <__aeabi_dcmpun>
 8008020:	b140      	cbz	r0, 8008034 <_printf_float+0xf0>
 8008022:	464b      	mov	r3, r9
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfbc      	itt	lt
 8008028:	232d      	movlt	r3, #45	; 0x2d
 800802a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800802e:	487f      	ldr	r0, [pc, #508]	; (800822c <_printf_float+0x2e8>)
 8008030:	4b7f      	ldr	r3, [pc, #508]	; (8008230 <_printf_float+0x2ec>)
 8008032:	e7d1      	b.n	8007fd8 <_printf_float+0x94>
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800803a:	9206      	str	r2, [sp, #24]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	d13f      	bne.n	80080c0 <_printf_float+0x17c>
 8008040:	2306      	movs	r3, #6
 8008042:	6063      	str	r3, [r4, #4]
 8008044:	9b05      	ldr	r3, [sp, #20]
 8008046:	6861      	ldr	r1, [r4, #4]
 8008048:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800804c:	2300      	movs	r3, #0
 800804e:	9303      	str	r3, [sp, #12]
 8008050:	ab0a      	add	r3, sp, #40	; 0x28
 8008052:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008056:	ab09      	add	r3, sp, #36	; 0x24
 8008058:	ec49 8b10 	vmov	d0, r8, r9
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008064:	4628      	mov	r0, r5
 8008066:	f7ff fecd 	bl	8007e04 <__cvt>
 800806a:	9b06      	ldr	r3, [sp, #24]
 800806c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800806e:	2b47      	cmp	r3, #71	; 0x47
 8008070:	4680      	mov	r8, r0
 8008072:	d108      	bne.n	8008086 <_printf_float+0x142>
 8008074:	1cc8      	adds	r0, r1, #3
 8008076:	db02      	blt.n	800807e <_printf_float+0x13a>
 8008078:	6863      	ldr	r3, [r4, #4]
 800807a:	4299      	cmp	r1, r3
 800807c:	dd41      	ble.n	8008102 <_printf_float+0x1be>
 800807e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008082:	fa5f fb8b 	uxtb.w	fp, fp
 8008086:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800808a:	d820      	bhi.n	80080ce <_printf_float+0x18a>
 800808c:	3901      	subs	r1, #1
 800808e:	465a      	mov	r2, fp
 8008090:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008094:	9109      	str	r1, [sp, #36]	; 0x24
 8008096:	f7ff ff17 	bl	8007ec8 <__exponent>
 800809a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800809c:	1813      	adds	r3, r2, r0
 800809e:	2a01      	cmp	r2, #1
 80080a0:	4681      	mov	r9, r0
 80080a2:	6123      	str	r3, [r4, #16]
 80080a4:	dc02      	bgt.n	80080ac <_printf_float+0x168>
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	07d2      	lsls	r2, r2, #31
 80080aa:	d501      	bpl.n	80080b0 <_printf_float+0x16c>
 80080ac:	3301      	adds	r3, #1
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d09c      	beq.n	8007ff2 <_printf_float+0xae>
 80080b8:	232d      	movs	r3, #45	; 0x2d
 80080ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080be:	e798      	b.n	8007ff2 <_printf_float+0xae>
 80080c0:	9a06      	ldr	r2, [sp, #24]
 80080c2:	2a47      	cmp	r2, #71	; 0x47
 80080c4:	d1be      	bne.n	8008044 <_printf_float+0x100>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1bc      	bne.n	8008044 <_printf_float+0x100>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e7b9      	b.n	8008042 <_printf_float+0xfe>
 80080ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80080d2:	d118      	bne.n	8008106 <_printf_float+0x1c2>
 80080d4:	2900      	cmp	r1, #0
 80080d6:	6863      	ldr	r3, [r4, #4]
 80080d8:	dd0b      	ble.n	80080f2 <_printf_float+0x1ae>
 80080da:	6121      	str	r1, [r4, #16]
 80080dc:	b913      	cbnz	r3, 80080e4 <_printf_float+0x1a0>
 80080de:	6822      	ldr	r2, [r4, #0]
 80080e0:	07d0      	lsls	r0, r2, #31
 80080e2:	d502      	bpl.n	80080ea <_printf_float+0x1a6>
 80080e4:	3301      	adds	r3, #1
 80080e6:	440b      	add	r3, r1
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80080ec:	f04f 0900 	mov.w	r9, #0
 80080f0:	e7de      	b.n	80080b0 <_printf_float+0x16c>
 80080f2:	b913      	cbnz	r3, 80080fa <_printf_float+0x1b6>
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	07d2      	lsls	r2, r2, #31
 80080f8:	d501      	bpl.n	80080fe <_printf_float+0x1ba>
 80080fa:	3302      	adds	r3, #2
 80080fc:	e7f4      	b.n	80080e8 <_printf_float+0x1a4>
 80080fe:	2301      	movs	r3, #1
 8008100:	e7f2      	b.n	80080e8 <_printf_float+0x1a4>
 8008102:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008108:	4299      	cmp	r1, r3
 800810a:	db05      	blt.n	8008118 <_printf_float+0x1d4>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	6121      	str	r1, [r4, #16]
 8008110:	07d8      	lsls	r0, r3, #31
 8008112:	d5ea      	bpl.n	80080ea <_printf_float+0x1a6>
 8008114:	1c4b      	adds	r3, r1, #1
 8008116:	e7e7      	b.n	80080e8 <_printf_float+0x1a4>
 8008118:	2900      	cmp	r1, #0
 800811a:	bfd4      	ite	le
 800811c:	f1c1 0202 	rsble	r2, r1, #2
 8008120:	2201      	movgt	r2, #1
 8008122:	4413      	add	r3, r2
 8008124:	e7e0      	b.n	80080e8 <_printf_float+0x1a4>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	055a      	lsls	r2, r3, #21
 800812a:	d407      	bmi.n	800813c <_printf_float+0x1f8>
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	4642      	mov	r2, r8
 8008130:	4631      	mov	r1, r6
 8008132:	4628      	mov	r0, r5
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	d12c      	bne.n	8008194 <_printf_float+0x250>
 800813a:	e764      	b.n	8008006 <_printf_float+0xc2>
 800813c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008140:	f240 80e0 	bls.w	8008304 <_printf_float+0x3c0>
 8008144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008148:	2200      	movs	r2, #0
 800814a:	2300      	movs	r3, #0
 800814c:	f7f8 fcc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008150:	2800      	cmp	r0, #0
 8008152:	d034      	beq.n	80081be <_printf_float+0x27a>
 8008154:	4a37      	ldr	r2, [pc, #220]	; (8008234 <_printf_float+0x2f0>)
 8008156:	2301      	movs	r3, #1
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f af51 	beq.w	8008006 <_printf_float+0xc2>
 8008164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008168:	429a      	cmp	r2, r3
 800816a:	db02      	blt.n	8008172 <_printf_float+0x22e>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	07d8      	lsls	r0, r3, #31
 8008170:	d510      	bpl.n	8008194 <_printf_float+0x250>
 8008172:	ee18 3a10 	vmov	r3, s16
 8008176:	4652      	mov	r2, sl
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f af41 	beq.w	8008006 <_printf_float+0xc2>
 8008184:	f04f 0800 	mov.w	r8, #0
 8008188:	f104 091a 	add.w	r9, r4, #26
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	3b01      	subs	r3, #1
 8008190:	4543      	cmp	r3, r8
 8008192:	dc09      	bgt.n	80081a8 <_printf_float+0x264>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	079b      	lsls	r3, r3, #30
 8008198:	f100 8105 	bmi.w	80083a6 <_printf_float+0x462>
 800819c:	68e0      	ldr	r0, [r4, #12]
 800819e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a0:	4298      	cmp	r0, r3
 80081a2:	bfb8      	it	lt
 80081a4:	4618      	movlt	r0, r3
 80081a6:	e730      	b.n	800800a <_printf_float+0xc6>
 80081a8:	2301      	movs	r3, #1
 80081aa:	464a      	mov	r2, r9
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f af27 	beq.w	8008006 <_printf_float+0xc2>
 80081b8:	f108 0801 	add.w	r8, r8, #1
 80081bc:	e7e6      	b.n	800818c <_printf_float+0x248>
 80081be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc39      	bgt.n	8008238 <_printf_float+0x2f4>
 80081c4:	4a1b      	ldr	r2, [pc, #108]	; (8008234 <_printf_float+0x2f0>)
 80081c6:	2301      	movs	r3, #1
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f43f af19 	beq.w	8008006 <_printf_float+0xc2>
 80081d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081d8:	4313      	orrs	r3, r2
 80081da:	d102      	bne.n	80081e2 <_printf_float+0x29e>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	07d9      	lsls	r1, r3, #31
 80081e0:	d5d8      	bpl.n	8008194 <_printf_float+0x250>
 80081e2:	ee18 3a10 	vmov	r3, s16
 80081e6:	4652      	mov	r2, sl
 80081e8:	4631      	mov	r1, r6
 80081ea:	4628      	mov	r0, r5
 80081ec:	47b8      	blx	r7
 80081ee:	3001      	adds	r0, #1
 80081f0:	f43f af09 	beq.w	8008006 <_printf_float+0xc2>
 80081f4:	f04f 0900 	mov.w	r9, #0
 80081f8:	f104 0a1a 	add.w	sl, r4, #26
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	425b      	negs	r3, r3
 8008200:	454b      	cmp	r3, r9
 8008202:	dc01      	bgt.n	8008208 <_printf_float+0x2c4>
 8008204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008206:	e792      	b.n	800812e <_printf_float+0x1ea>
 8008208:	2301      	movs	r3, #1
 800820a:	4652      	mov	r2, sl
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	f43f aef7 	beq.w	8008006 <_printf_float+0xc2>
 8008218:	f109 0901 	add.w	r9, r9, #1
 800821c:	e7ee      	b.n	80081fc <_printf_float+0x2b8>
 800821e:	bf00      	nop
 8008220:	7fefffff 	.word	0x7fefffff
 8008224:	0800aa60 	.word	0x0800aa60
 8008228:	0800aa64 	.word	0x0800aa64
 800822c:	0800aa6c 	.word	0x0800aa6c
 8008230:	0800aa68 	.word	0x0800aa68
 8008234:	0800aa70 	.word	0x0800aa70
 8008238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800823a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800823c:	429a      	cmp	r2, r3
 800823e:	bfa8      	it	ge
 8008240:	461a      	movge	r2, r3
 8008242:	2a00      	cmp	r2, #0
 8008244:	4691      	mov	r9, r2
 8008246:	dc37      	bgt.n	80082b8 <_printf_float+0x374>
 8008248:	f04f 0b00 	mov.w	fp, #0
 800824c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008250:	f104 021a 	add.w	r2, r4, #26
 8008254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	eba3 0309 	sub.w	r3, r3, r9
 800825c:	455b      	cmp	r3, fp
 800825e:	dc33      	bgt.n	80082c8 <_printf_float+0x384>
 8008260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008264:	429a      	cmp	r2, r3
 8008266:	db3b      	blt.n	80082e0 <_printf_float+0x39c>
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	07da      	lsls	r2, r3, #31
 800826c:	d438      	bmi.n	80082e0 <_printf_float+0x39c>
 800826e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	eba2 0901 	sub.w	r9, r2, r1
 800827a:	4599      	cmp	r9, r3
 800827c:	bfa8      	it	ge
 800827e:	4699      	movge	r9, r3
 8008280:	f1b9 0f00 	cmp.w	r9, #0
 8008284:	dc35      	bgt.n	80082f2 <_printf_float+0x3ae>
 8008286:	f04f 0800 	mov.w	r8, #0
 800828a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800828e:	f104 0a1a 	add.w	sl, r4, #26
 8008292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	eba3 0309 	sub.w	r3, r3, r9
 800829c:	4543      	cmp	r3, r8
 800829e:	f77f af79 	ble.w	8008194 <_printf_float+0x250>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4652      	mov	r2, sl
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	f43f aeaa 	beq.w	8008006 <_printf_float+0xc2>
 80082b2:	f108 0801 	add.w	r8, r8, #1
 80082b6:	e7ec      	b.n	8008292 <_printf_float+0x34e>
 80082b8:	4613      	mov	r3, r2
 80082ba:	4631      	mov	r1, r6
 80082bc:	4642      	mov	r2, r8
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	d1c0      	bne.n	8008248 <_printf_float+0x304>
 80082c6:	e69e      	b.n	8008006 <_printf_float+0xc2>
 80082c8:	2301      	movs	r3, #1
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	9205      	str	r2, [sp, #20]
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f ae97 	beq.w	8008006 <_printf_float+0xc2>
 80082d8:	9a05      	ldr	r2, [sp, #20]
 80082da:	f10b 0b01 	add.w	fp, fp, #1
 80082de:	e7b9      	b.n	8008254 <_printf_float+0x310>
 80082e0:	ee18 3a10 	vmov	r3, s16
 80082e4:	4652      	mov	r2, sl
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	d1be      	bne.n	800826e <_printf_float+0x32a>
 80082f0:	e689      	b.n	8008006 <_printf_float+0xc2>
 80082f2:	9a05      	ldr	r2, [sp, #20]
 80082f4:	464b      	mov	r3, r9
 80082f6:	4442      	add	r2, r8
 80082f8:	4631      	mov	r1, r6
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b8      	blx	r7
 80082fe:	3001      	adds	r0, #1
 8008300:	d1c1      	bne.n	8008286 <_printf_float+0x342>
 8008302:	e680      	b.n	8008006 <_printf_float+0xc2>
 8008304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008306:	2a01      	cmp	r2, #1
 8008308:	dc01      	bgt.n	800830e <_printf_float+0x3ca>
 800830a:	07db      	lsls	r3, r3, #31
 800830c:	d538      	bpl.n	8008380 <_printf_float+0x43c>
 800830e:	2301      	movs	r3, #1
 8008310:	4642      	mov	r2, r8
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f ae74 	beq.w	8008006 <_printf_float+0xc2>
 800831e:	ee18 3a10 	vmov	r3, s16
 8008322:	4652      	mov	r2, sl
 8008324:	4631      	mov	r1, r6
 8008326:	4628      	mov	r0, r5
 8008328:	47b8      	blx	r7
 800832a:	3001      	adds	r0, #1
 800832c:	f43f ae6b 	beq.w	8008006 <_printf_float+0xc2>
 8008330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008334:	2200      	movs	r2, #0
 8008336:	2300      	movs	r3, #0
 8008338:	f7f8 fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800833c:	b9d8      	cbnz	r0, 8008376 <_printf_float+0x432>
 800833e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008340:	f108 0201 	add.w	r2, r8, #1
 8008344:	3b01      	subs	r3, #1
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	d10e      	bne.n	800836e <_printf_float+0x42a>
 8008350:	e659      	b.n	8008006 <_printf_float+0xc2>
 8008352:	2301      	movs	r3, #1
 8008354:	4652      	mov	r2, sl
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	f43f ae52 	beq.w	8008006 <_printf_float+0xc2>
 8008362:	f108 0801 	add.w	r8, r8, #1
 8008366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008368:	3b01      	subs	r3, #1
 800836a:	4543      	cmp	r3, r8
 800836c:	dcf1      	bgt.n	8008352 <_printf_float+0x40e>
 800836e:	464b      	mov	r3, r9
 8008370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008374:	e6dc      	b.n	8008130 <_printf_float+0x1ec>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	f104 0a1a 	add.w	sl, r4, #26
 800837e:	e7f2      	b.n	8008366 <_printf_float+0x422>
 8008380:	2301      	movs	r3, #1
 8008382:	4642      	mov	r2, r8
 8008384:	e7df      	b.n	8008346 <_printf_float+0x402>
 8008386:	2301      	movs	r3, #1
 8008388:	464a      	mov	r2, r9
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	47b8      	blx	r7
 8008390:	3001      	adds	r0, #1
 8008392:	f43f ae38 	beq.w	8008006 <_printf_float+0xc2>
 8008396:	f108 0801 	add.w	r8, r8, #1
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800839e:	1a5b      	subs	r3, r3, r1
 80083a0:	4543      	cmp	r3, r8
 80083a2:	dcf0      	bgt.n	8008386 <_printf_float+0x442>
 80083a4:	e6fa      	b.n	800819c <_printf_float+0x258>
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	f104 0919 	add.w	r9, r4, #25
 80083ae:	e7f4      	b.n	800839a <_printf_float+0x456>

080083b0 <_printf_common>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	4616      	mov	r6, r2
 80083b6:	4699      	mov	r9, r3
 80083b8:	688a      	ldr	r2, [r1, #8]
 80083ba:	690b      	ldr	r3, [r1, #16]
 80083bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083c0:	4293      	cmp	r3, r2
 80083c2:	bfb8      	it	lt
 80083c4:	4613      	movlt	r3, r2
 80083c6:	6033      	str	r3, [r6, #0]
 80083c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083cc:	4607      	mov	r7, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	b10a      	cbz	r2, 80083d6 <_printf_common+0x26>
 80083d2:	3301      	adds	r3, #1
 80083d4:	6033      	str	r3, [r6, #0]
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	0699      	lsls	r1, r3, #26
 80083da:	bf42      	ittt	mi
 80083dc:	6833      	ldrmi	r3, [r6, #0]
 80083de:	3302      	addmi	r3, #2
 80083e0:	6033      	strmi	r3, [r6, #0]
 80083e2:	6825      	ldr	r5, [r4, #0]
 80083e4:	f015 0506 	ands.w	r5, r5, #6
 80083e8:	d106      	bne.n	80083f8 <_printf_common+0x48>
 80083ea:	f104 0a19 	add.w	sl, r4, #25
 80083ee:	68e3      	ldr	r3, [r4, #12]
 80083f0:	6832      	ldr	r2, [r6, #0]
 80083f2:	1a9b      	subs	r3, r3, r2
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	dc26      	bgt.n	8008446 <_printf_common+0x96>
 80083f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083fc:	1e13      	subs	r3, r2, #0
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	bf18      	it	ne
 8008402:	2301      	movne	r3, #1
 8008404:	0692      	lsls	r2, r2, #26
 8008406:	d42b      	bmi.n	8008460 <_printf_common+0xb0>
 8008408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800840c:	4649      	mov	r1, r9
 800840e:	4638      	mov	r0, r7
 8008410:	47c0      	blx	r8
 8008412:	3001      	adds	r0, #1
 8008414:	d01e      	beq.n	8008454 <_printf_common+0xa4>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	68e5      	ldr	r5, [r4, #12]
 800841a:	6832      	ldr	r2, [r6, #0]
 800841c:	f003 0306 	and.w	r3, r3, #6
 8008420:	2b04      	cmp	r3, #4
 8008422:	bf08      	it	eq
 8008424:	1aad      	subeq	r5, r5, r2
 8008426:	68a3      	ldr	r3, [r4, #8]
 8008428:	6922      	ldr	r2, [r4, #16]
 800842a:	bf0c      	ite	eq
 800842c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008430:	2500      	movne	r5, #0
 8008432:	4293      	cmp	r3, r2
 8008434:	bfc4      	itt	gt
 8008436:	1a9b      	subgt	r3, r3, r2
 8008438:	18ed      	addgt	r5, r5, r3
 800843a:	2600      	movs	r6, #0
 800843c:	341a      	adds	r4, #26
 800843e:	42b5      	cmp	r5, r6
 8008440:	d11a      	bne.n	8008478 <_printf_common+0xc8>
 8008442:	2000      	movs	r0, #0
 8008444:	e008      	b.n	8008458 <_printf_common+0xa8>
 8008446:	2301      	movs	r3, #1
 8008448:	4652      	mov	r2, sl
 800844a:	4649      	mov	r1, r9
 800844c:	4638      	mov	r0, r7
 800844e:	47c0      	blx	r8
 8008450:	3001      	adds	r0, #1
 8008452:	d103      	bne.n	800845c <_printf_common+0xac>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845c:	3501      	adds	r5, #1
 800845e:	e7c6      	b.n	80083ee <_printf_common+0x3e>
 8008460:	18e1      	adds	r1, r4, r3
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	2030      	movs	r0, #48	; 0x30
 8008466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800846a:	4422      	add	r2, r4
 800846c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008474:	3302      	adds	r3, #2
 8008476:	e7c7      	b.n	8008408 <_printf_common+0x58>
 8008478:	2301      	movs	r3, #1
 800847a:	4622      	mov	r2, r4
 800847c:	4649      	mov	r1, r9
 800847e:	4638      	mov	r0, r7
 8008480:	47c0      	blx	r8
 8008482:	3001      	adds	r0, #1
 8008484:	d0e6      	beq.n	8008454 <_printf_common+0xa4>
 8008486:	3601      	adds	r6, #1
 8008488:	e7d9      	b.n	800843e <_printf_common+0x8e>
	...

0800848c <_printf_i>:
 800848c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	460c      	mov	r4, r1
 8008492:	4691      	mov	r9, r2
 8008494:	7e27      	ldrb	r7, [r4, #24]
 8008496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008498:	2f78      	cmp	r7, #120	; 0x78
 800849a:	4680      	mov	r8, r0
 800849c:	469a      	mov	sl, r3
 800849e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084a2:	d807      	bhi.n	80084b4 <_printf_i+0x28>
 80084a4:	2f62      	cmp	r7, #98	; 0x62
 80084a6:	d80a      	bhi.n	80084be <_printf_i+0x32>
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	f000 80d8 	beq.w	800865e <_printf_i+0x1d2>
 80084ae:	2f58      	cmp	r7, #88	; 0x58
 80084b0:	f000 80a3 	beq.w	80085fa <_printf_i+0x16e>
 80084b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084bc:	e03a      	b.n	8008534 <_printf_i+0xa8>
 80084be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084c2:	2b15      	cmp	r3, #21
 80084c4:	d8f6      	bhi.n	80084b4 <_printf_i+0x28>
 80084c6:	a001      	add	r0, pc, #4	; (adr r0, 80084cc <_printf_i+0x40>)
 80084c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084cc:	08008525 	.word	0x08008525
 80084d0:	08008539 	.word	0x08008539
 80084d4:	080084b5 	.word	0x080084b5
 80084d8:	080084b5 	.word	0x080084b5
 80084dc:	080084b5 	.word	0x080084b5
 80084e0:	080084b5 	.word	0x080084b5
 80084e4:	08008539 	.word	0x08008539
 80084e8:	080084b5 	.word	0x080084b5
 80084ec:	080084b5 	.word	0x080084b5
 80084f0:	080084b5 	.word	0x080084b5
 80084f4:	080084b5 	.word	0x080084b5
 80084f8:	08008645 	.word	0x08008645
 80084fc:	08008569 	.word	0x08008569
 8008500:	08008627 	.word	0x08008627
 8008504:	080084b5 	.word	0x080084b5
 8008508:	080084b5 	.word	0x080084b5
 800850c:	08008667 	.word	0x08008667
 8008510:	080084b5 	.word	0x080084b5
 8008514:	08008569 	.word	0x08008569
 8008518:	080084b5 	.word	0x080084b5
 800851c:	080084b5 	.word	0x080084b5
 8008520:	0800862f 	.word	0x0800862f
 8008524:	680b      	ldr	r3, [r1, #0]
 8008526:	1d1a      	adds	r2, r3, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	600a      	str	r2, [r1, #0]
 800852c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008534:	2301      	movs	r3, #1
 8008536:	e0a3      	b.n	8008680 <_printf_i+0x1f4>
 8008538:	6825      	ldr	r5, [r4, #0]
 800853a:	6808      	ldr	r0, [r1, #0]
 800853c:	062e      	lsls	r6, r5, #24
 800853e:	f100 0304 	add.w	r3, r0, #4
 8008542:	d50a      	bpl.n	800855a <_printf_i+0xce>
 8008544:	6805      	ldr	r5, [r0, #0]
 8008546:	600b      	str	r3, [r1, #0]
 8008548:	2d00      	cmp	r5, #0
 800854a:	da03      	bge.n	8008554 <_printf_i+0xc8>
 800854c:	232d      	movs	r3, #45	; 0x2d
 800854e:	426d      	negs	r5, r5
 8008550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008554:	485e      	ldr	r0, [pc, #376]	; (80086d0 <_printf_i+0x244>)
 8008556:	230a      	movs	r3, #10
 8008558:	e019      	b.n	800858e <_printf_i+0x102>
 800855a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800855e:	6805      	ldr	r5, [r0, #0]
 8008560:	600b      	str	r3, [r1, #0]
 8008562:	bf18      	it	ne
 8008564:	b22d      	sxthne	r5, r5
 8008566:	e7ef      	b.n	8008548 <_printf_i+0xbc>
 8008568:	680b      	ldr	r3, [r1, #0]
 800856a:	6825      	ldr	r5, [r4, #0]
 800856c:	1d18      	adds	r0, r3, #4
 800856e:	6008      	str	r0, [r1, #0]
 8008570:	0628      	lsls	r0, r5, #24
 8008572:	d501      	bpl.n	8008578 <_printf_i+0xec>
 8008574:	681d      	ldr	r5, [r3, #0]
 8008576:	e002      	b.n	800857e <_printf_i+0xf2>
 8008578:	0669      	lsls	r1, r5, #25
 800857a:	d5fb      	bpl.n	8008574 <_printf_i+0xe8>
 800857c:	881d      	ldrh	r5, [r3, #0]
 800857e:	4854      	ldr	r0, [pc, #336]	; (80086d0 <_printf_i+0x244>)
 8008580:	2f6f      	cmp	r7, #111	; 0x6f
 8008582:	bf0c      	ite	eq
 8008584:	2308      	moveq	r3, #8
 8008586:	230a      	movne	r3, #10
 8008588:	2100      	movs	r1, #0
 800858a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800858e:	6866      	ldr	r6, [r4, #4]
 8008590:	60a6      	str	r6, [r4, #8]
 8008592:	2e00      	cmp	r6, #0
 8008594:	bfa2      	ittt	ge
 8008596:	6821      	ldrge	r1, [r4, #0]
 8008598:	f021 0104 	bicge.w	r1, r1, #4
 800859c:	6021      	strge	r1, [r4, #0]
 800859e:	b90d      	cbnz	r5, 80085a4 <_printf_i+0x118>
 80085a0:	2e00      	cmp	r6, #0
 80085a2:	d04d      	beq.n	8008640 <_printf_i+0x1b4>
 80085a4:	4616      	mov	r6, r2
 80085a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80085aa:	fb03 5711 	mls	r7, r3, r1, r5
 80085ae:	5dc7      	ldrb	r7, [r0, r7]
 80085b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085b4:	462f      	mov	r7, r5
 80085b6:	42bb      	cmp	r3, r7
 80085b8:	460d      	mov	r5, r1
 80085ba:	d9f4      	bls.n	80085a6 <_printf_i+0x11a>
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d10b      	bne.n	80085d8 <_printf_i+0x14c>
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	07df      	lsls	r7, r3, #31
 80085c4:	d508      	bpl.n	80085d8 <_printf_i+0x14c>
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	6861      	ldr	r1, [r4, #4]
 80085ca:	4299      	cmp	r1, r3
 80085cc:	bfde      	ittt	le
 80085ce:	2330      	movle	r3, #48	; 0x30
 80085d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085d4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80085d8:	1b92      	subs	r2, r2, r6
 80085da:	6122      	str	r2, [r4, #16]
 80085dc:	f8cd a000 	str.w	sl, [sp]
 80085e0:	464b      	mov	r3, r9
 80085e2:	aa03      	add	r2, sp, #12
 80085e4:	4621      	mov	r1, r4
 80085e6:	4640      	mov	r0, r8
 80085e8:	f7ff fee2 	bl	80083b0 <_printf_common>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d14c      	bne.n	800868a <_printf_i+0x1fe>
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f4:	b004      	add	sp, #16
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	4835      	ldr	r0, [pc, #212]	; (80086d0 <_printf_i+0x244>)
 80085fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	680e      	ldr	r6, [r1, #0]
 8008604:	061f      	lsls	r7, r3, #24
 8008606:	f856 5b04 	ldr.w	r5, [r6], #4
 800860a:	600e      	str	r6, [r1, #0]
 800860c:	d514      	bpl.n	8008638 <_printf_i+0x1ac>
 800860e:	07d9      	lsls	r1, r3, #31
 8008610:	bf44      	itt	mi
 8008612:	f043 0320 	orrmi.w	r3, r3, #32
 8008616:	6023      	strmi	r3, [r4, #0]
 8008618:	b91d      	cbnz	r5, 8008622 <_printf_i+0x196>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	f023 0320 	bic.w	r3, r3, #32
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	2310      	movs	r3, #16
 8008624:	e7b0      	b.n	8008588 <_printf_i+0xfc>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	f043 0320 	orr.w	r3, r3, #32
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	2378      	movs	r3, #120	; 0x78
 8008630:	4828      	ldr	r0, [pc, #160]	; (80086d4 <_printf_i+0x248>)
 8008632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008636:	e7e3      	b.n	8008600 <_printf_i+0x174>
 8008638:	065e      	lsls	r6, r3, #25
 800863a:	bf48      	it	mi
 800863c:	b2ad      	uxthmi	r5, r5
 800863e:	e7e6      	b.n	800860e <_printf_i+0x182>
 8008640:	4616      	mov	r6, r2
 8008642:	e7bb      	b.n	80085bc <_printf_i+0x130>
 8008644:	680b      	ldr	r3, [r1, #0]
 8008646:	6826      	ldr	r6, [r4, #0]
 8008648:	6960      	ldr	r0, [r4, #20]
 800864a:	1d1d      	adds	r5, r3, #4
 800864c:	600d      	str	r5, [r1, #0]
 800864e:	0635      	lsls	r5, r6, #24
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	d501      	bpl.n	8008658 <_printf_i+0x1cc>
 8008654:	6018      	str	r0, [r3, #0]
 8008656:	e002      	b.n	800865e <_printf_i+0x1d2>
 8008658:	0671      	lsls	r1, r6, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0x1c8>
 800865c:	8018      	strh	r0, [r3, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	6123      	str	r3, [r4, #16]
 8008662:	4616      	mov	r6, r2
 8008664:	e7ba      	b.n	80085dc <_printf_i+0x150>
 8008666:	680b      	ldr	r3, [r1, #0]
 8008668:	1d1a      	adds	r2, r3, #4
 800866a:	600a      	str	r2, [r1, #0]
 800866c:	681e      	ldr	r6, [r3, #0]
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	2100      	movs	r1, #0
 8008672:	4630      	mov	r0, r6
 8008674:	f7f7 fdbc 	bl	80001f0 <memchr>
 8008678:	b108      	cbz	r0, 800867e <_printf_i+0x1f2>
 800867a:	1b80      	subs	r0, r0, r6
 800867c:	6060      	str	r0, [r4, #4]
 800867e:	6863      	ldr	r3, [r4, #4]
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	2300      	movs	r3, #0
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008688:	e7a8      	b.n	80085dc <_printf_i+0x150>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	4632      	mov	r2, r6
 800868e:	4649      	mov	r1, r9
 8008690:	4640      	mov	r0, r8
 8008692:	47d0      	blx	sl
 8008694:	3001      	adds	r0, #1
 8008696:	d0ab      	beq.n	80085f0 <_printf_i+0x164>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	079b      	lsls	r3, r3, #30
 800869c:	d413      	bmi.n	80086c6 <_printf_i+0x23a>
 800869e:	68e0      	ldr	r0, [r4, #12]
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	4298      	cmp	r0, r3
 80086a4:	bfb8      	it	lt
 80086a6:	4618      	movlt	r0, r3
 80086a8:	e7a4      	b.n	80085f4 <_printf_i+0x168>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4632      	mov	r2, r6
 80086ae:	4649      	mov	r1, r9
 80086b0:	4640      	mov	r0, r8
 80086b2:	47d0      	blx	sl
 80086b4:	3001      	adds	r0, #1
 80086b6:	d09b      	beq.n	80085f0 <_printf_i+0x164>
 80086b8:	3501      	adds	r5, #1
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	9903      	ldr	r1, [sp, #12]
 80086be:	1a5b      	subs	r3, r3, r1
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dcf2      	bgt.n	80086aa <_printf_i+0x21e>
 80086c4:	e7eb      	b.n	800869e <_printf_i+0x212>
 80086c6:	2500      	movs	r5, #0
 80086c8:	f104 0619 	add.w	r6, r4, #25
 80086cc:	e7f5      	b.n	80086ba <_printf_i+0x22e>
 80086ce:	bf00      	nop
 80086d0:	0800aa72 	.word	0x0800aa72
 80086d4:	0800aa83 	.word	0x0800aa83

080086d8 <cleanup_glue>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	460c      	mov	r4, r1
 80086dc:	6809      	ldr	r1, [r1, #0]
 80086de:	4605      	mov	r5, r0
 80086e0:	b109      	cbz	r1, 80086e6 <cleanup_glue+0xe>
 80086e2:	f7ff fff9 	bl	80086d8 <cleanup_glue>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ee:	f7ff badf 	b.w	8007cb0 <_free_r>
	...

080086f4 <_reclaim_reent>:
 80086f4:	4b2c      	ldr	r3, [pc, #176]	; (80087a8 <_reclaim_reent+0xb4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4283      	cmp	r3, r0
 80086fa:	b570      	push	{r4, r5, r6, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	d051      	beq.n	80087a4 <_reclaim_reent+0xb0>
 8008700:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008702:	b143      	cbz	r3, 8008716 <_reclaim_reent+0x22>
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d14a      	bne.n	80087a0 <_reclaim_reent+0xac>
 800870a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870c:	6819      	ldr	r1, [r3, #0]
 800870e:	b111      	cbz	r1, 8008716 <_reclaim_reent+0x22>
 8008710:	4620      	mov	r0, r4
 8008712:	f7ff facd 	bl	8007cb0 <_free_r>
 8008716:	6961      	ldr	r1, [r4, #20]
 8008718:	b111      	cbz	r1, 8008720 <_reclaim_reent+0x2c>
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff fac8 	bl	8007cb0 <_free_r>
 8008720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008722:	b111      	cbz	r1, 800872a <_reclaim_reent+0x36>
 8008724:	4620      	mov	r0, r4
 8008726:	f7ff fac3 	bl	8007cb0 <_free_r>
 800872a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800872c:	b111      	cbz	r1, 8008734 <_reclaim_reent+0x40>
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff fabe 	bl	8007cb0 <_free_r>
 8008734:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008736:	b111      	cbz	r1, 800873e <_reclaim_reent+0x4a>
 8008738:	4620      	mov	r0, r4
 800873a:	f7ff fab9 	bl	8007cb0 <_free_r>
 800873e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008740:	b111      	cbz	r1, 8008748 <_reclaim_reent+0x54>
 8008742:	4620      	mov	r0, r4
 8008744:	f7ff fab4 	bl	8007cb0 <_free_r>
 8008748:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800874a:	b111      	cbz	r1, 8008752 <_reclaim_reent+0x5e>
 800874c:	4620      	mov	r0, r4
 800874e:	f7ff faaf 	bl	8007cb0 <_free_r>
 8008752:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008754:	b111      	cbz	r1, 800875c <_reclaim_reent+0x68>
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff faaa 	bl	8007cb0 <_free_r>
 800875c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800875e:	b111      	cbz	r1, 8008766 <_reclaim_reent+0x72>
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff faa5 	bl	8007cb0 <_free_r>
 8008766:	69a3      	ldr	r3, [r4, #24]
 8008768:	b1e3      	cbz	r3, 80087a4 <_reclaim_reent+0xb0>
 800876a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800876c:	4620      	mov	r0, r4
 800876e:	4798      	blx	r3
 8008770:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008772:	b1b9      	cbz	r1, 80087a4 <_reclaim_reent+0xb0>
 8008774:	4620      	mov	r0, r4
 8008776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800877a:	f7ff bfad 	b.w	80086d8 <cleanup_glue>
 800877e:	5949      	ldr	r1, [r1, r5]
 8008780:	b941      	cbnz	r1, 8008794 <_reclaim_reent+0xa0>
 8008782:	3504      	adds	r5, #4
 8008784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008786:	2d80      	cmp	r5, #128	; 0x80
 8008788:	68d9      	ldr	r1, [r3, #12]
 800878a:	d1f8      	bne.n	800877e <_reclaim_reent+0x8a>
 800878c:	4620      	mov	r0, r4
 800878e:	f7ff fa8f 	bl	8007cb0 <_free_r>
 8008792:	e7ba      	b.n	800870a <_reclaim_reent+0x16>
 8008794:	680e      	ldr	r6, [r1, #0]
 8008796:	4620      	mov	r0, r4
 8008798:	f7ff fa8a 	bl	8007cb0 <_free_r>
 800879c:	4631      	mov	r1, r6
 800879e:	e7ef      	b.n	8008780 <_reclaim_reent+0x8c>
 80087a0:	2500      	movs	r5, #0
 80087a2:	e7ef      	b.n	8008784 <_reclaim_reent+0x90>
 80087a4:	bd70      	pop	{r4, r5, r6, pc}
 80087a6:	bf00      	nop
 80087a8:	20000010 	.word	0x20000010

080087ac <_sbrk_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	; (80087c8 <_sbrk_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f9 f832 	bl	8001820 <_sbrk>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_sbrk_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_sbrk_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20004e88 	.word	0x20004e88

080087cc <siprintf>:
 80087cc:	b40e      	push	{r1, r2, r3}
 80087ce:	b500      	push	{lr}
 80087d0:	b09c      	sub	sp, #112	; 0x70
 80087d2:	ab1d      	add	r3, sp, #116	; 0x74
 80087d4:	9002      	str	r0, [sp, #8]
 80087d6:	9006      	str	r0, [sp, #24]
 80087d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087dc:	4809      	ldr	r0, [pc, #36]	; (8008804 <siprintf+0x38>)
 80087de:	9107      	str	r1, [sp, #28]
 80087e0:	9104      	str	r1, [sp, #16]
 80087e2:	4909      	ldr	r1, [pc, #36]	; (8008808 <siprintf+0x3c>)
 80087e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e8:	9105      	str	r1, [sp, #20]
 80087ea:	6800      	ldr	r0, [r0, #0]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	a902      	add	r1, sp, #8
 80087f0:	f001 fbb6 	bl	8009f60 <_svfiprintf_r>
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	b01c      	add	sp, #112	; 0x70
 80087fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008800:	b003      	add	sp, #12
 8008802:	4770      	bx	lr
 8008804:	20000010 	.word	0x20000010
 8008808:	ffff0208 	.word	0xffff0208

0800880c <__sread>:
 800880c:	b510      	push	{r4, lr}
 800880e:	460c      	mov	r4, r1
 8008810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008814:	f001 fca4 	bl	800a160 <_read_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	bfab      	itete	ge
 800881c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800881e:	89a3      	ldrhlt	r3, [r4, #12]
 8008820:	181b      	addge	r3, r3, r0
 8008822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008826:	bfac      	ite	ge
 8008828:	6563      	strge	r3, [r4, #84]	; 0x54
 800882a:	81a3      	strhlt	r3, [r4, #12]
 800882c:	bd10      	pop	{r4, pc}

0800882e <__swrite>:
 800882e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008832:	461f      	mov	r7, r3
 8008834:	898b      	ldrh	r3, [r1, #12]
 8008836:	05db      	lsls	r3, r3, #23
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4616      	mov	r6, r2
 800883e:	d505      	bpl.n	800884c <__swrite+0x1e>
 8008840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008844:	2302      	movs	r3, #2
 8008846:	2200      	movs	r2, #0
 8008848:	f000 ff84 	bl	8009754 <_lseek_r>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	4628      	mov	r0, r5
 800885e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008862:	f000 b817 	b.w	8008894 <_write_r>

08008866 <__sseek>:
 8008866:	b510      	push	{r4, lr}
 8008868:	460c      	mov	r4, r1
 800886a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886e:	f000 ff71 	bl	8009754 <_lseek_r>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	bf15      	itete	ne
 8008878:	6560      	strne	r0, [r4, #84]	; 0x54
 800887a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800887e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008882:	81a3      	strheq	r3, [r4, #12]
 8008884:	bf18      	it	ne
 8008886:	81a3      	strhne	r3, [r4, #12]
 8008888:	bd10      	pop	{r4, pc}

0800888a <__sclose>:
 800888a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888e:	f000 b813 	b.w	80088b8 <_close_r>
	...

08008894 <_write_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d07      	ldr	r5, [pc, #28]	; (80088b4 <_write_r+0x20>)
 8008898:	4604      	mov	r4, r0
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	602a      	str	r2, [r5, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f7f8 ff6b 	bl	800177e <_write>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_write_r+0x1e>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_write_r+0x1e>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20004e88 	.word	0x20004e88

080088b8 <_close_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	; (80088d4 <_close_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f8 ff77 	bl	80017b6 <_close>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_close_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_close_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20004e88 	.word	0x20004e88

080088d8 <quorem>:
 80088d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	6903      	ldr	r3, [r0, #16]
 80088de:	690c      	ldr	r4, [r1, #16]
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	4607      	mov	r7, r0
 80088e4:	f2c0 8081 	blt.w	80089ea <quorem+0x112>
 80088e8:	3c01      	subs	r4, #1
 80088ea:	f101 0814 	add.w	r8, r1, #20
 80088ee:	f100 0514 	add.w	r5, r0, #20
 80088f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008900:	3301      	adds	r3, #1
 8008902:	429a      	cmp	r2, r3
 8008904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800890c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008910:	d331      	bcc.n	8008976 <quorem+0x9e>
 8008912:	f04f 0e00 	mov.w	lr, #0
 8008916:	4640      	mov	r0, r8
 8008918:	46ac      	mov	ip, r5
 800891a:	46f2      	mov	sl, lr
 800891c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008920:	b293      	uxth	r3, r2
 8008922:	fb06 e303 	mla	r3, r6, r3, lr
 8008926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800892a:	b29b      	uxth	r3, r3
 800892c:	ebaa 0303 	sub.w	r3, sl, r3
 8008930:	0c12      	lsrs	r2, r2, #16
 8008932:	f8dc a000 	ldr.w	sl, [ip]
 8008936:	fb06 e202 	mla	r2, r6, r2, lr
 800893a:	fa13 f38a 	uxtah	r3, r3, sl
 800893e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008942:	fa1f fa82 	uxth.w	sl, r2
 8008946:	f8dc 2000 	ldr.w	r2, [ip]
 800894a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800894e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008952:	b29b      	uxth	r3, r3
 8008954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008958:	4581      	cmp	r9, r0
 800895a:	f84c 3b04 	str.w	r3, [ip], #4
 800895e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008962:	d2db      	bcs.n	800891c <quorem+0x44>
 8008964:	f855 300b 	ldr.w	r3, [r5, fp]
 8008968:	b92b      	cbnz	r3, 8008976 <quorem+0x9e>
 800896a:	9b01      	ldr	r3, [sp, #4]
 800896c:	3b04      	subs	r3, #4
 800896e:	429d      	cmp	r5, r3
 8008970:	461a      	mov	r2, r3
 8008972:	d32e      	bcc.n	80089d2 <quorem+0xfa>
 8008974:	613c      	str	r4, [r7, #16]
 8008976:	4638      	mov	r0, r7
 8008978:	f001 f988 	bl	8009c8c <__mcmp>
 800897c:	2800      	cmp	r0, #0
 800897e:	db24      	blt.n	80089ca <quorem+0xf2>
 8008980:	3601      	adds	r6, #1
 8008982:	4628      	mov	r0, r5
 8008984:	f04f 0c00 	mov.w	ip, #0
 8008988:	f858 2b04 	ldr.w	r2, [r8], #4
 800898c:	f8d0 e000 	ldr.w	lr, [r0]
 8008990:	b293      	uxth	r3, r2
 8008992:	ebac 0303 	sub.w	r3, ip, r3
 8008996:	0c12      	lsrs	r2, r2, #16
 8008998:	fa13 f38e 	uxtah	r3, r3, lr
 800899c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089aa:	45c1      	cmp	r9, r8
 80089ac:	f840 3b04 	str.w	r3, [r0], #4
 80089b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089b4:	d2e8      	bcs.n	8008988 <quorem+0xb0>
 80089b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089be:	b922      	cbnz	r2, 80089ca <quorem+0xf2>
 80089c0:	3b04      	subs	r3, #4
 80089c2:	429d      	cmp	r5, r3
 80089c4:	461a      	mov	r2, r3
 80089c6:	d30a      	bcc.n	80089de <quorem+0x106>
 80089c8:	613c      	str	r4, [r7, #16]
 80089ca:	4630      	mov	r0, r6
 80089cc:	b003      	add	sp, #12
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	3b04      	subs	r3, #4
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	d1cc      	bne.n	8008974 <quorem+0x9c>
 80089da:	3c01      	subs	r4, #1
 80089dc:	e7c7      	b.n	800896e <quorem+0x96>
 80089de:	6812      	ldr	r2, [r2, #0]
 80089e0:	3b04      	subs	r3, #4
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	d1f0      	bne.n	80089c8 <quorem+0xf0>
 80089e6:	3c01      	subs	r4, #1
 80089e8:	e7eb      	b.n	80089c2 <quorem+0xea>
 80089ea:	2000      	movs	r0, #0
 80089ec:	e7ee      	b.n	80089cc <quorem+0xf4>
	...

080089f0 <_dtoa_r>:
 80089f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	ed2d 8b02 	vpush	{d8}
 80089f8:	ec57 6b10 	vmov	r6, r7, d0
 80089fc:	b095      	sub	sp, #84	; 0x54
 80089fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a04:	9105      	str	r1, [sp, #20]
 8008a06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a10:	b975      	cbnz	r5, 8008a30 <_dtoa_r+0x40>
 8008a12:	2010      	movs	r0, #16
 8008a14:	f7ff f92e 	bl	8007c74 <malloc>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8008a1c:	b920      	cbnz	r0, 8008a28 <_dtoa_r+0x38>
 8008a1e:	4bb2      	ldr	r3, [pc, #712]	; (8008ce8 <_dtoa_r+0x2f8>)
 8008a20:	21ea      	movs	r1, #234	; 0xea
 8008a22:	48b2      	ldr	r0, [pc, #712]	; (8008cec <_dtoa_r+0x2fc>)
 8008a24:	f001 fbae 	bl	800a184 <__assert_func>
 8008a28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a2c:	6005      	str	r5, [r0, #0]
 8008a2e:	60c5      	str	r5, [r0, #12]
 8008a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	b151      	cbz	r1, 8008a4c <_dtoa_r+0x5c>
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	604a      	str	r2, [r1, #4]
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4093      	lsls	r3, r2
 8008a3e:	608b      	str	r3, [r1, #8]
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fee5 	bl	8009810 <_Bfree>
 8008a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	1e3b      	subs	r3, r7, #0
 8008a4e:	bfb9      	ittee	lt
 8008a50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a54:	9303      	strlt	r3, [sp, #12]
 8008a56:	2300      	movge	r3, #0
 8008a58:	f8c8 3000 	strge.w	r3, [r8]
 8008a5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008a60:	4ba3      	ldr	r3, [pc, #652]	; (8008cf0 <_dtoa_r+0x300>)
 8008a62:	bfbc      	itt	lt
 8008a64:	2201      	movlt	r2, #1
 8008a66:	f8c8 2000 	strlt.w	r2, [r8]
 8008a6a:	ea33 0309 	bics.w	r3, r3, r9
 8008a6e:	d11b      	bne.n	8008aa8 <_dtoa_r+0xb8>
 8008a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a72:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a7c:	4333      	orrs	r3, r6
 8008a7e:	f000 857a 	beq.w	8009576 <_dtoa_r+0xb86>
 8008a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a84:	b963      	cbnz	r3, 8008aa0 <_dtoa_r+0xb0>
 8008a86:	4b9b      	ldr	r3, [pc, #620]	; (8008cf4 <_dtoa_r+0x304>)
 8008a88:	e024      	b.n	8008ad4 <_dtoa_r+0xe4>
 8008a8a:	4b9b      	ldr	r3, [pc, #620]	; (8008cf8 <_dtoa_r+0x308>)
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	9800      	ldr	r0, [sp, #0]
 8008a96:	b015      	add	sp, #84	; 0x54
 8008a98:	ecbd 8b02 	vpop	{d8}
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	4b94      	ldr	r3, [pc, #592]	; (8008cf4 <_dtoa_r+0x304>)
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	3303      	adds	r3, #3
 8008aa6:	e7f3      	b.n	8008a90 <_dtoa_r+0xa0>
 8008aa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008aac:	2200      	movs	r2, #0
 8008aae:	ec51 0b17 	vmov	r0, r1, d7
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008ab8:	f7f8 f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008abc:	4680      	mov	r8, r0
 8008abe:	b158      	cbz	r0, 8008ad8 <_dtoa_r+0xe8>
 8008ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8551 	beq.w	8009570 <_dtoa_r+0xb80>
 8008ace:	488b      	ldr	r0, [pc, #556]	; (8008cfc <_dtoa_r+0x30c>)
 8008ad0:	6018      	str	r0, [r3, #0]
 8008ad2:	1e43      	subs	r3, r0, #1
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	e7dd      	b.n	8008a94 <_dtoa_r+0xa4>
 8008ad8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008adc:	aa12      	add	r2, sp, #72	; 0x48
 8008ade:	a913      	add	r1, sp, #76	; 0x4c
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f001 f977 	bl	8009dd4 <__d2b>
 8008ae6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008aea:	4683      	mov	fp, r0
 8008aec:	2d00      	cmp	r5, #0
 8008aee:	d07c      	beq.n	8008bea <_dtoa_r+0x1fa>
 8008af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008afa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008afe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b0a:	4b7d      	ldr	r3, [pc, #500]	; (8008d00 <_dtoa_r+0x310>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fbc1 	bl	8000298 <__aeabi_dsub>
 8008b16:	a36e      	add	r3, pc, #440	; (adr r3, 8008cd0 <_dtoa_r+0x2e0>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fd74 	bl	8000608 <__aeabi_dmul>
 8008b20:	a36d      	add	r3, pc, #436	; (adr r3, 8008cd8 <_dtoa_r+0x2e8>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fbb9 	bl	800029c <__adddf3>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	460f      	mov	r7, r1
 8008b30:	f7f7 fd00 	bl	8000534 <__aeabi_i2d>
 8008b34:	a36a      	add	r3, pc, #424	; (adr r3, 8008ce0 <_dtoa_r+0x2f0>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 fd65 	bl	8000608 <__aeabi_dmul>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 fba9 	bl	800029c <__adddf3>
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	f7f8 f80b 	bl	8000b68 <__aeabi_d2iz>
 8008b52:	2200      	movs	r2, #0
 8008b54:	4682      	mov	sl, r0
 8008b56:	2300      	movs	r3, #0
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 ffc6 	bl	8000aec <__aeabi_dcmplt>
 8008b60:	b148      	cbz	r0, 8008b76 <_dtoa_r+0x186>
 8008b62:	4650      	mov	r0, sl
 8008b64:	f7f7 fce6 	bl	8000534 <__aeabi_i2d>
 8008b68:	4632      	mov	r2, r6
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	f7f7 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b70:	b908      	cbnz	r0, 8008b76 <_dtoa_r+0x186>
 8008b72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b76:	f1ba 0f16 	cmp.w	sl, #22
 8008b7a:	d854      	bhi.n	8008c26 <_dtoa_r+0x236>
 8008b7c:	4b61      	ldr	r3, [pc, #388]	; (8008d04 <_dtoa_r+0x314>)
 8008b7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b8a:	f7f7 ffaf 	bl	8000aec <__aeabi_dcmplt>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d04b      	beq.n	8008c2a <_dtoa_r+0x23a>
 8008b92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b96:	2300      	movs	r3, #0
 8008b98:	930e      	str	r3, [sp, #56]	; 0x38
 8008b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b9c:	1b5d      	subs	r5, r3, r5
 8008b9e:	1e6b      	subs	r3, r5, #1
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	bf43      	ittte	mi
 8008ba4:	2300      	movmi	r3, #0
 8008ba6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008baa:	9304      	strmi	r3, [sp, #16]
 8008bac:	f04f 0800 	movpl.w	r8, #0
 8008bb0:	f1ba 0f00 	cmp.w	sl, #0
 8008bb4:	db3b      	blt.n	8008c2e <_dtoa_r+0x23e>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008bbc:	4453      	add	r3, sl
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9306      	str	r3, [sp, #24]
 8008bc4:	9b05      	ldr	r3, [sp, #20]
 8008bc6:	2b09      	cmp	r3, #9
 8008bc8:	d869      	bhi.n	8008c9e <_dtoa_r+0x2ae>
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	bfc4      	itt	gt
 8008bce:	3b04      	subgt	r3, #4
 8008bd0:	9305      	strgt	r3, [sp, #20]
 8008bd2:	9b05      	ldr	r3, [sp, #20]
 8008bd4:	f1a3 0302 	sub.w	r3, r3, #2
 8008bd8:	bfcc      	ite	gt
 8008bda:	2500      	movgt	r5, #0
 8008bdc:	2501      	movle	r5, #1
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d869      	bhi.n	8008cb6 <_dtoa_r+0x2c6>
 8008be2:	e8df f003 	tbb	[pc, r3]
 8008be6:	4e2c      	.short	0x4e2c
 8008be8:	5a4c      	.short	0x5a4c
 8008bea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008bee:	441d      	add	r5, r3
 8008bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	bfc1      	itttt	gt
 8008bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bfc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c00:	fa09 f303 	lslgt.w	r3, r9, r3
 8008c04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c08:	bfda      	itte	le
 8008c0a:	f1c3 0320 	rsble	r3, r3, #32
 8008c0e:	fa06 f003 	lslle.w	r0, r6, r3
 8008c12:	4318      	orrgt	r0, r3
 8008c14:	f7f7 fc7e 	bl	8000514 <__aeabi_ui2d>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c20:	3d01      	subs	r5, #1
 8008c22:	9310      	str	r3, [sp, #64]	; 0x40
 8008c24:	e771      	b.n	8008b0a <_dtoa_r+0x11a>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e7b6      	b.n	8008b98 <_dtoa_r+0x1a8>
 8008c2a:	900e      	str	r0, [sp, #56]	; 0x38
 8008c2c:	e7b5      	b.n	8008b9a <_dtoa_r+0x1aa>
 8008c2e:	f1ca 0300 	rsb	r3, sl, #0
 8008c32:	9306      	str	r3, [sp, #24]
 8008c34:	2300      	movs	r3, #0
 8008c36:	eba8 080a 	sub.w	r8, r8, sl
 8008c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c3c:	e7c2      	b.n	8008bc4 <_dtoa_r+0x1d4>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9308      	str	r3, [sp, #32]
 8008c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dc39      	bgt.n	8008cbc <_dtoa_r+0x2cc>
 8008c48:	f04f 0901 	mov.w	r9, #1
 8008c4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c50:	464b      	mov	r3, r9
 8008c52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008c56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c58:	2200      	movs	r2, #0
 8008c5a:	6042      	str	r2, [r0, #4]
 8008c5c:	2204      	movs	r2, #4
 8008c5e:	f102 0614 	add.w	r6, r2, #20
 8008c62:	429e      	cmp	r6, r3
 8008c64:	6841      	ldr	r1, [r0, #4]
 8008c66:	d92f      	bls.n	8008cc8 <_dtoa_r+0x2d8>
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fd91 	bl	8009790 <_Balloc>
 8008c6e:	9000      	str	r0, [sp, #0]
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d14b      	bne.n	8008d0c <_dtoa_r+0x31c>
 8008c74:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <_dtoa_r+0x318>)
 8008c76:	4602      	mov	r2, r0
 8008c78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c7c:	e6d1      	b.n	8008a22 <_dtoa_r+0x32>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e7de      	b.n	8008c40 <_dtoa_r+0x250>
 8008c82:	2300      	movs	r3, #0
 8008c84:	9308      	str	r3, [sp, #32]
 8008c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c88:	eb0a 0903 	add.w	r9, sl, r3
 8008c8c:	f109 0301 	add.w	r3, r9, #1
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	bfb8      	it	lt
 8008c96:	2301      	movlt	r3, #1
 8008c98:	e7dd      	b.n	8008c56 <_dtoa_r+0x266>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e7f2      	b.n	8008c84 <_dtoa_r+0x294>
 8008c9e:	2501      	movs	r5, #1
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	9508      	str	r5, [sp, #32]
 8008ca6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cb0:	2312      	movs	r3, #18
 8008cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb4:	e7cf      	b.n	8008c56 <_dtoa_r+0x266>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	9308      	str	r3, [sp, #32]
 8008cba:	e7f4      	b.n	8008ca6 <_dtoa_r+0x2b6>
 8008cbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008cc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cc4:	464b      	mov	r3, r9
 8008cc6:	e7c6      	b.n	8008c56 <_dtoa_r+0x266>
 8008cc8:	3101      	adds	r1, #1
 8008cca:	6041      	str	r1, [r0, #4]
 8008ccc:	0052      	lsls	r2, r2, #1
 8008cce:	e7c6      	b.n	8008c5e <_dtoa_r+0x26e>
 8008cd0:	636f4361 	.word	0x636f4361
 8008cd4:	3fd287a7 	.word	0x3fd287a7
 8008cd8:	8b60c8b3 	.word	0x8b60c8b3
 8008cdc:	3fc68a28 	.word	0x3fc68a28
 8008ce0:	509f79fb 	.word	0x509f79fb
 8008ce4:	3fd34413 	.word	0x3fd34413
 8008ce8:	0800aaa1 	.word	0x0800aaa1
 8008cec:	0800aab8 	.word	0x0800aab8
 8008cf0:	7ff00000 	.word	0x7ff00000
 8008cf4:	0800aa9d 	.word	0x0800aa9d
 8008cf8:	0800aa94 	.word	0x0800aa94
 8008cfc:	0800aa71 	.word	0x0800aa71
 8008d00:	3ff80000 	.word	0x3ff80000
 8008d04:	0800abb0 	.word	0x0800abb0
 8008d08:	0800ab17 	.word	0x0800ab17
 8008d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d0e:	9a00      	ldr	r2, [sp, #0]
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	9b01      	ldr	r3, [sp, #4]
 8008d14:	2b0e      	cmp	r3, #14
 8008d16:	f200 80ad 	bhi.w	8008e74 <_dtoa_r+0x484>
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	f000 80aa 	beq.w	8008e74 <_dtoa_r+0x484>
 8008d20:	f1ba 0f00 	cmp.w	sl, #0
 8008d24:	dd36      	ble.n	8008d94 <_dtoa_r+0x3a4>
 8008d26:	4ac3      	ldr	r2, [pc, #780]	; (8009034 <_dtoa_r+0x644>)
 8008d28:	f00a 030f 	and.w	r3, sl, #15
 8008d2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d30:	ed93 7b00 	vldr	d7, [r3]
 8008d34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008d38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8008d40:	eef0 8a67 	vmov.f32	s17, s15
 8008d44:	d016      	beq.n	8008d74 <_dtoa_r+0x384>
 8008d46:	4bbc      	ldr	r3, [pc, #752]	; (8009038 <_dtoa_r+0x648>)
 8008d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d50:	f7f7 fd84 	bl	800085c <__aeabi_ddiv>
 8008d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d58:	f007 070f 	and.w	r7, r7, #15
 8008d5c:	2503      	movs	r5, #3
 8008d5e:	4eb6      	ldr	r6, [pc, #728]	; (8009038 <_dtoa_r+0x648>)
 8008d60:	b957      	cbnz	r7, 8008d78 <_dtoa_r+0x388>
 8008d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d66:	ec53 2b18 	vmov	r2, r3, d8
 8008d6a:	f7f7 fd77 	bl	800085c <__aeabi_ddiv>
 8008d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d72:	e029      	b.n	8008dc8 <_dtoa_r+0x3d8>
 8008d74:	2502      	movs	r5, #2
 8008d76:	e7f2      	b.n	8008d5e <_dtoa_r+0x36e>
 8008d78:	07f9      	lsls	r1, r7, #31
 8008d7a:	d508      	bpl.n	8008d8e <_dtoa_r+0x39e>
 8008d7c:	ec51 0b18 	vmov	r0, r1, d8
 8008d80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	ec41 0b18 	vmov	d8, r0, r1
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	107f      	asrs	r7, r7, #1
 8008d90:	3608      	adds	r6, #8
 8008d92:	e7e5      	b.n	8008d60 <_dtoa_r+0x370>
 8008d94:	f000 80a6 	beq.w	8008ee4 <_dtoa_r+0x4f4>
 8008d98:	f1ca 0600 	rsb	r6, sl, #0
 8008d9c:	4ba5      	ldr	r3, [pc, #660]	; (8009034 <_dtoa_r+0x644>)
 8008d9e:	4fa6      	ldr	r7, [pc, #664]	; (8009038 <_dtoa_r+0x648>)
 8008da0:	f006 020f 	and.w	r2, r6, #15
 8008da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008db0:	f7f7 fc2a 	bl	8000608 <__aeabi_dmul>
 8008db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db8:	1136      	asrs	r6, r6, #4
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2502      	movs	r5, #2
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	f040 8085 	bne.w	8008ece <_dtoa_r+0x4de>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1d2      	bne.n	8008d6e <_dtoa_r+0x37e>
 8008dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 808c 	beq.w	8008ee8 <_dtoa_r+0x4f8>
 8008dd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008dd4:	4b99      	ldr	r3, [pc, #612]	; (800903c <_dtoa_r+0x64c>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 fe86 	bl	8000aec <__aeabi_dcmplt>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f000 8081 	beq.w	8008ee8 <_dtoa_r+0x4f8>
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d07d      	beq.n	8008ee8 <_dtoa_r+0x4f8>
 8008dec:	f1b9 0f00 	cmp.w	r9, #0
 8008df0:	dd3c      	ble.n	8008e6c <_dtoa_r+0x47c>
 8008df2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008df6:	9307      	str	r3, [sp, #28]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4b91      	ldr	r3, [pc, #580]	; (8009040 <_dtoa_r+0x650>)
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fc02 	bl	8000608 <__aeabi_dmul>
 8008e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e08:	3501      	adds	r5, #1
 8008e0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008e0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7f7 fb8e 	bl	8000534 <__aeabi_i2d>
 8008e18:	4632      	mov	r2, r6
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	f7f7 fbf4 	bl	8000608 <__aeabi_dmul>
 8008e20:	4b88      	ldr	r3, [pc, #544]	; (8009044 <_dtoa_r+0x654>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7f7 fa3a 	bl	800029c <__adddf3>
 8008e28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d15c      	bne.n	8008ef2 <_dtoa_r+0x502>
 8008e38:	4b83      	ldr	r3, [pc, #524]	; (8009048 <_dtoa_r+0x658>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fa2a 	bl	8000298 <__aeabi_dsub>
 8008e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e48:	4606      	mov	r6, r0
 8008e4a:	460f      	mov	r7, r1
 8008e4c:	f7f7 fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	f040 8296 	bne.w	8009382 <_dtoa_r+0x992>
 8008e56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e60:	4639      	mov	r1, r7
 8008e62:	f7f7 fe43 	bl	8000aec <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f040 8288 	bne.w	800937c <_dtoa_r+0x98c>
 8008e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f2c0 8158 	blt.w	800912c <_dtoa_r+0x73c>
 8008e7c:	f1ba 0f0e 	cmp.w	sl, #14
 8008e80:	f300 8154 	bgt.w	800912c <_dtoa_r+0x73c>
 8008e84:	4b6b      	ldr	r3, [pc, #428]	; (8009034 <_dtoa_r+0x644>)
 8008e86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f280 80e3 	bge.w	800905c <_dtoa_r+0x66c>
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f300 80df 	bgt.w	800905c <_dtoa_r+0x66c>
 8008e9e:	f040 826d 	bne.w	800937c <_dtoa_r+0x98c>
 8008ea2:	4b69      	ldr	r3, [pc, #420]	; (8009048 <_dtoa_r+0x658>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	f7f7 fbad 	bl	8000608 <__aeabi_dmul>
 8008eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb2:	f7f7 fe2f 	bl	8000b14 <__aeabi_dcmpge>
 8008eb6:	9e01      	ldr	r6, [sp, #4]
 8008eb8:	4637      	mov	r7, r6
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f040 8243 	bne.w	8009346 <_dtoa_r+0x956>
 8008ec0:	9d00      	ldr	r5, [sp, #0]
 8008ec2:	2331      	movs	r3, #49	; 0x31
 8008ec4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ec8:	f10a 0a01 	add.w	sl, sl, #1
 8008ecc:	e23f      	b.n	800934e <_dtoa_r+0x95e>
 8008ece:	07f2      	lsls	r2, r6, #31
 8008ed0:	d505      	bpl.n	8008ede <_dtoa_r+0x4ee>
 8008ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed6:	f7f7 fb97 	bl	8000608 <__aeabi_dmul>
 8008eda:	3501      	adds	r5, #1
 8008edc:	2301      	movs	r3, #1
 8008ede:	1076      	asrs	r6, r6, #1
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	e76c      	b.n	8008dbe <_dtoa_r+0x3ce>
 8008ee4:	2502      	movs	r5, #2
 8008ee6:	e76f      	b.n	8008dc8 <_dtoa_r+0x3d8>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	f8cd a01c 	str.w	sl, [sp, #28]
 8008eee:	930c      	str	r3, [sp, #48]	; 0x30
 8008ef0:	e78d      	b.n	8008e0e <_dtoa_r+0x41e>
 8008ef2:	9900      	ldr	r1, [sp, #0]
 8008ef4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ef8:	4b4e      	ldr	r3, [pc, #312]	; (8009034 <_dtoa_r+0x644>)
 8008efa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008efe:	4401      	add	r1, r0
 8008f00:	9102      	str	r1, [sp, #8]
 8008f02:	9908      	ldr	r1, [sp, #32]
 8008f04:	eeb0 8a47 	vmov.f32	s16, s14
 8008f08:	eef0 8a67 	vmov.f32	s17, s15
 8008f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d045      	beq.n	8008fa4 <_dtoa_r+0x5b4>
 8008f18:	494c      	ldr	r1, [pc, #304]	; (800904c <_dtoa_r+0x65c>)
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f7f7 fc9e 	bl	800085c <__aeabi_ddiv>
 8008f20:	ec53 2b18 	vmov	r2, r3, d8
 8008f24:	f7f7 f9b8 	bl	8000298 <__aeabi_dsub>
 8008f28:	9d00      	ldr	r5, [sp, #0]
 8008f2a:	ec41 0b18 	vmov	d8, r0, r1
 8008f2e:	4639      	mov	r1, r7
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7f7 fe19 	bl	8000b68 <__aeabi_d2iz>
 8008f36:	900c      	str	r0, [sp, #48]	; 0x30
 8008f38:	f7f7 fafc 	bl	8000534 <__aeabi_i2d>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4630      	mov	r0, r6
 8008f42:	4639      	mov	r1, r7
 8008f44:	f7f7 f9a8 	bl	8000298 <__aeabi_dsub>
 8008f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f4a:	3330      	adds	r3, #48	; 0x30
 8008f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f50:	ec53 2b18 	vmov	r2, r3, d8
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	f7f7 fdc8 	bl	8000aec <__aeabi_dcmplt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d165      	bne.n	800902c <_dtoa_r+0x63c>
 8008f60:	4632      	mov	r2, r6
 8008f62:	463b      	mov	r3, r7
 8008f64:	4935      	ldr	r1, [pc, #212]	; (800903c <_dtoa_r+0x64c>)
 8008f66:	2000      	movs	r0, #0
 8008f68:	f7f7 f996 	bl	8000298 <__aeabi_dsub>
 8008f6c:	ec53 2b18 	vmov	r2, r3, d8
 8008f70:	f7f7 fdbc 	bl	8000aec <__aeabi_dcmplt>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	f040 80b9 	bne.w	80090ec <_dtoa_r+0x6fc>
 8008f7a:	9b02      	ldr	r3, [sp, #8]
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	f43f af75 	beq.w	8008e6c <_dtoa_r+0x47c>
 8008f82:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <_dtoa_r+0x650>)
 8008f84:	ec51 0b18 	vmov	r0, r1, d8
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f7f7 fb3d 	bl	8000608 <__aeabi_dmul>
 8008f8e:	4b2c      	ldr	r3, [pc, #176]	; (8009040 <_dtoa_r+0x650>)
 8008f90:	ec41 0b18 	vmov	d8, r0, r1
 8008f94:	2200      	movs	r2, #0
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	f7f7 fb35 	bl	8000608 <__aeabi_dmul>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	e7c4      	b.n	8008f2e <_dtoa_r+0x53e>
 8008fa4:	ec51 0b17 	vmov	r0, r1, d7
 8008fa8:	f7f7 fb2e 	bl	8000608 <__aeabi_dmul>
 8008fac:	9b02      	ldr	r3, [sp, #8]
 8008fae:	9d00      	ldr	r5, [sp, #0]
 8008fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8008fb2:	ec41 0b18 	vmov	d8, r0, r1
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7f7 fdd5 	bl	8000b68 <__aeabi_d2iz>
 8008fbe:	9011      	str	r0, [sp, #68]	; 0x44
 8008fc0:	f7f7 fab8 	bl	8000534 <__aeabi_i2d>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4639      	mov	r1, r7
 8008fcc:	f7f7 f964 	bl	8000298 <__aeabi_dsub>
 8008fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fd2:	3330      	adds	r3, #48	; 0x30
 8008fd4:	f805 3b01 	strb.w	r3, [r5], #1
 8008fd8:	9b02      	ldr	r3, [sp, #8]
 8008fda:	429d      	cmp	r5, r3
 8008fdc:	4606      	mov	r6, r0
 8008fde:	460f      	mov	r7, r1
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	d134      	bne.n	8009050 <_dtoa_r+0x660>
 8008fe6:	4b19      	ldr	r3, [pc, #100]	; (800904c <_dtoa_r+0x65c>)
 8008fe8:	ec51 0b18 	vmov	r0, r1, d8
 8008fec:	f7f7 f956 	bl	800029c <__adddf3>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 fd96 	bl	8000b28 <__aeabi_dcmpgt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d175      	bne.n	80090ec <_dtoa_r+0x6fc>
 8009000:	ec53 2b18 	vmov	r2, r3, d8
 8009004:	4911      	ldr	r1, [pc, #68]	; (800904c <_dtoa_r+0x65c>)
 8009006:	2000      	movs	r0, #0
 8009008:	f7f7 f946 	bl	8000298 <__aeabi_dsub>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fd6a 	bl	8000aec <__aeabi_dcmplt>
 8009018:	2800      	cmp	r0, #0
 800901a:	f43f af27 	beq.w	8008e6c <_dtoa_r+0x47c>
 800901e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009020:	1e6b      	subs	r3, r5, #1
 8009022:	930c      	str	r3, [sp, #48]	; 0x30
 8009024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009028:	2b30      	cmp	r3, #48	; 0x30
 800902a:	d0f8      	beq.n	800901e <_dtoa_r+0x62e>
 800902c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009030:	e04a      	b.n	80090c8 <_dtoa_r+0x6d8>
 8009032:	bf00      	nop
 8009034:	0800abb0 	.word	0x0800abb0
 8009038:	0800ab88 	.word	0x0800ab88
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	40240000 	.word	0x40240000
 8009044:	401c0000 	.word	0x401c0000
 8009048:	40140000 	.word	0x40140000
 800904c:	3fe00000 	.word	0x3fe00000
 8009050:	4baf      	ldr	r3, [pc, #700]	; (8009310 <_dtoa_r+0x920>)
 8009052:	f7f7 fad9 	bl	8000608 <__aeabi_dmul>
 8009056:	4606      	mov	r6, r0
 8009058:	460f      	mov	r7, r1
 800905a:	e7ac      	b.n	8008fb6 <_dtoa_r+0x5c6>
 800905c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009060:	9d00      	ldr	r5, [sp, #0]
 8009062:	4642      	mov	r2, r8
 8009064:	464b      	mov	r3, r9
 8009066:	4630      	mov	r0, r6
 8009068:	4639      	mov	r1, r7
 800906a:	f7f7 fbf7 	bl	800085c <__aeabi_ddiv>
 800906e:	f7f7 fd7b 	bl	8000b68 <__aeabi_d2iz>
 8009072:	9002      	str	r0, [sp, #8]
 8009074:	f7f7 fa5e 	bl	8000534 <__aeabi_i2d>
 8009078:	4642      	mov	r2, r8
 800907a:	464b      	mov	r3, r9
 800907c:	f7f7 fac4 	bl	8000608 <__aeabi_dmul>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4630      	mov	r0, r6
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 f906 	bl	8000298 <__aeabi_dsub>
 800908c:	9e02      	ldr	r6, [sp, #8]
 800908e:	9f01      	ldr	r7, [sp, #4]
 8009090:	3630      	adds	r6, #48	; 0x30
 8009092:	f805 6b01 	strb.w	r6, [r5], #1
 8009096:	9e00      	ldr	r6, [sp, #0]
 8009098:	1bae      	subs	r6, r5, r6
 800909a:	42b7      	cmp	r7, r6
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	d137      	bne.n	8009112 <_dtoa_r+0x722>
 80090a2:	f7f7 f8fb 	bl	800029c <__adddf3>
 80090a6:	4642      	mov	r2, r8
 80090a8:	464b      	mov	r3, r9
 80090aa:	4606      	mov	r6, r0
 80090ac:	460f      	mov	r7, r1
 80090ae:	f7f7 fd3b 	bl	8000b28 <__aeabi_dcmpgt>
 80090b2:	b9c8      	cbnz	r0, 80090e8 <_dtoa_r+0x6f8>
 80090b4:	4642      	mov	r2, r8
 80090b6:	464b      	mov	r3, r9
 80090b8:	4630      	mov	r0, r6
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80090c0:	b110      	cbz	r0, 80090c8 <_dtoa_r+0x6d8>
 80090c2:	9b02      	ldr	r3, [sp, #8]
 80090c4:	07d9      	lsls	r1, r3, #31
 80090c6:	d40f      	bmi.n	80090e8 <_dtoa_r+0x6f8>
 80090c8:	4620      	mov	r0, r4
 80090ca:	4659      	mov	r1, fp
 80090cc:	f000 fba0 	bl	8009810 <_Bfree>
 80090d0:	2300      	movs	r3, #0
 80090d2:	702b      	strb	r3, [r5, #0]
 80090d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090d6:	f10a 0001 	add.w	r0, sl, #1
 80090da:	6018      	str	r0, [r3, #0]
 80090dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f43f acd8 	beq.w	8008a94 <_dtoa_r+0xa4>
 80090e4:	601d      	str	r5, [r3, #0]
 80090e6:	e4d5      	b.n	8008a94 <_dtoa_r+0xa4>
 80090e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80090ec:	462b      	mov	r3, r5
 80090ee:	461d      	mov	r5, r3
 80090f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090f4:	2a39      	cmp	r2, #57	; 0x39
 80090f6:	d108      	bne.n	800910a <_dtoa_r+0x71a>
 80090f8:	9a00      	ldr	r2, [sp, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d1f7      	bne.n	80090ee <_dtoa_r+0x6fe>
 80090fe:	9a07      	ldr	r2, [sp, #28]
 8009100:	9900      	ldr	r1, [sp, #0]
 8009102:	3201      	adds	r2, #1
 8009104:	9207      	str	r2, [sp, #28]
 8009106:	2230      	movs	r2, #48	; 0x30
 8009108:	700a      	strb	r2, [r1, #0]
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	3201      	adds	r2, #1
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	e78c      	b.n	800902c <_dtoa_r+0x63c>
 8009112:	4b7f      	ldr	r3, [pc, #508]	; (8009310 <_dtoa_r+0x920>)
 8009114:	2200      	movs	r2, #0
 8009116:	f7f7 fa77 	bl	8000608 <__aeabi_dmul>
 800911a:	2200      	movs	r2, #0
 800911c:	2300      	movs	r3, #0
 800911e:	4606      	mov	r6, r0
 8009120:	460f      	mov	r7, r1
 8009122:	f7f7 fcd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009126:	2800      	cmp	r0, #0
 8009128:	d09b      	beq.n	8009062 <_dtoa_r+0x672>
 800912a:	e7cd      	b.n	80090c8 <_dtoa_r+0x6d8>
 800912c:	9a08      	ldr	r2, [sp, #32]
 800912e:	2a00      	cmp	r2, #0
 8009130:	f000 80c4 	beq.w	80092bc <_dtoa_r+0x8cc>
 8009134:	9a05      	ldr	r2, [sp, #20]
 8009136:	2a01      	cmp	r2, #1
 8009138:	f300 80a8 	bgt.w	800928c <_dtoa_r+0x89c>
 800913c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800913e:	2a00      	cmp	r2, #0
 8009140:	f000 80a0 	beq.w	8009284 <_dtoa_r+0x894>
 8009144:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009148:	9e06      	ldr	r6, [sp, #24]
 800914a:	4645      	mov	r5, r8
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	2101      	movs	r1, #1
 8009150:	441a      	add	r2, r3
 8009152:	4620      	mov	r0, r4
 8009154:	4498      	add	r8, r3
 8009156:	9204      	str	r2, [sp, #16]
 8009158:	f000 fc16 	bl	8009988 <__i2b>
 800915c:	4607      	mov	r7, r0
 800915e:	2d00      	cmp	r5, #0
 8009160:	dd0b      	ble.n	800917a <_dtoa_r+0x78a>
 8009162:	9b04      	ldr	r3, [sp, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	dd08      	ble.n	800917a <_dtoa_r+0x78a>
 8009168:	42ab      	cmp	r3, r5
 800916a:	9a04      	ldr	r2, [sp, #16]
 800916c:	bfa8      	it	ge
 800916e:	462b      	movge	r3, r5
 8009170:	eba8 0803 	sub.w	r8, r8, r3
 8009174:	1aed      	subs	r5, r5, r3
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	9b06      	ldr	r3, [sp, #24]
 800917c:	b1fb      	cbz	r3, 80091be <_dtoa_r+0x7ce>
 800917e:	9b08      	ldr	r3, [sp, #32]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 809f 	beq.w	80092c4 <_dtoa_r+0x8d4>
 8009186:	2e00      	cmp	r6, #0
 8009188:	dd11      	ble.n	80091ae <_dtoa_r+0x7be>
 800918a:	4639      	mov	r1, r7
 800918c:	4632      	mov	r2, r6
 800918e:	4620      	mov	r0, r4
 8009190:	f000 fcb6 	bl	8009b00 <__pow5mult>
 8009194:	465a      	mov	r2, fp
 8009196:	4601      	mov	r1, r0
 8009198:	4607      	mov	r7, r0
 800919a:	4620      	mov	r0, r4
 800919c:	f000 fc0a 	bl	80099b4 <__multiply>
 80091a0:	4659      	mov	r1, fp
 80091a2:	9007      	str	r0, [sp, #28]
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fb33 	bl	8009810 <_Bfree>
 80091aa:	9b07      	ldr	r3, [sp, #28]
 80091ac:	469b      	mov	fp, r3
 80091ae:	9b06      	ldr	r3, [sp, #24]
 80091b0:	1b9a      	subs	r2, r3, r6
 80091b2:	d004      	beq.n	80091be <_dtoa_r+0x7ce>
 80091b4:	4659      	mov	r1, fp
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fca2 	bl	8009b00 <__pow5mult>
 80091bc:	4683      	mov	fp, r0
 80091be:	2101      	movs	r1, #1
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fbe1 	bl	8009988 <__i2b>
 80091c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	4606      	mov	r6, r0
 80091cc:	dd7c      	ble.n	80092c8 <_dtoa_r+0x8d8>
 80091ce:	461a      	mov	r2, r3
 80091d0:	4601      	mov	r1, r0
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fc94 	bl	8009b00 <__pow5mult>
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	4606      	mov	r6, r0
 80091de:	dd76      	ble.n	80092ce <_dtoa_r+0x8de>
 80091e0:	2300      	movs	r3, #0
 80091e2:	9306      	str	r3, [sp, #24]
 80091e4:	6933      	ldr	r3, [r6, #16]
 80091e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091ea:	6918      	ldr	r0, [r3, #16]
 80091ec:	f000 fb7c 	bl	80098e8 <__hi0bits>
 80091f0:	f1c0 0020 	rsb	r0, r0, #32
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	4418      	add	r0, r3
 80091f8:	f010 001f 	ands.w	r0, r0, #31
 80091fc:	f000 8086 	beq.w	800930c <_dtoa_r+0x91c>
 8009200:	f1c0 0320 	rsb	r3, r0, #32
 8009204:	2b04      	cmp	r3, #4
 8009206:	dd7f      	ble.n	8009308 <_dtoa_r+0x918>
 8009208:	f1c0 001c 	rsb	r0, r0, #28
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	4403      	add	r3, r0
 8009210:	4480      	add	r8, r0
 8009212:	4405      	add	r5, r0
 8009214:	9304      	str	r3, [sp, #16]
 8009216:	f1b8 0f00 	cmp.w	r8, #0
 800921a:	dd05      	ble.n	8009228 <_dtoa_r+0x838>
 800921c:	4659      	mov	r1, fp
 800921e:	4642      	mov	r2, r8
 8009220:	4620      	mov	r0, r4
 8009222:	f000 fcc7 	bl	8009bb4 <__lshift>
 8009226:	4683      	mov	fp, r0
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	dd05      	ble.n	800923a <_dtoa_r+0x84a>
 800922e:	4631      	mov	r1, r6
 8009230:	461a      	mov	r2, r3
 8009232:	4620      	mov	r0, r4
 8009234:	f000 fcbe 	bl	8009bb4 <__lshift>
 8009238:	4606      	mov	r6, r0
 800923a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800923c:	2b00      	cmp	r3, #0
 800923e:	d069      	beq.n	8009314 <_dtoa_r+0x924>
 8009240:	4631      	mov	r1, r6
 8009242:	4658      	mov	r0, fp
 8009244:	f000 fd22 	bl	8009c8c <__mcmp>
 8009248:	2800      	cmp	r0, #0
 800924a:	da63      	bge.n	8009314 <_dtoa_r+0x924>
 800924c:	2300      	movs	r3, #0
 800924e:	4659      	mov	r1, fp
 8009250:	220a      	movs	r2, #10
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fafe 	bl	8009854 <__multadd>
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800925e:	4683      	mov	fp, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 818f 	beq.w	8009584 <_dtoa_r+0xb94>
 8009266:	4639      	mov	r1, r7
 8009268:	2300      	movs	r3, #0
 800926a:	220a      	movs	r2, #10
 800926c:	4620      	mov	r0, r4
 800926e:	f000 faf1 	bl	8009854 <__multadd>
 8009272:	f1b9 0f00 	cmp.w	r9, #0
 8009276:	4607      	mov	r7, r0
 8009278:	f300 808e 	bgt.w	8009398 <_dtoa_r+0x9a8>
 800927c:	9b05      	ldr	r3, [sp, #20]
 800927e:	2b02      	cmp	r3, #2
 8009280:	dc50      	bgt.n	8009324 <_dtoa_r+0x934>
 8009282:	e089      	b.n	8009398 <_dtoa_r+0x9a8>
 8009284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800928a:	e75d      	b.n	8009148 <_dtoa_r+0x758>
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	1e5e      	subs	r6, r3, #1
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	42b3      	cmp	r3, r6
 8009294:	bfbf      	itttt	lt
 8009296:	9b06      	ldrlt	r3, [sp, #24]
 8009298:	9606      	strlt	r6, [sp, #24]
 800929a:	1af2      	sublt	r2, r6, r3
 800929c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800929e:	bfb6      	itet	lt
 80092a0:	189b      	addlt	r3, r3, r2
 80092a2:	1b9e      	subge	r6, r3, r6
 80092a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	bfb8      	it	lt
 80092aa:	2600      	movlt	r6, #0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfb5      	itete	lt
 80092b0:	eba8 0503 	sublt.w	r5, r8, r3
 80092b4:	9b01      	ldrge	r3, [sp, #4]
 80092b6:	2300      	movlt	r3, #0
 80092b8:	4645      	movge	r5, r8
 80092ba:	e747      	b.n	800914c <_dtoa_r+0x75c>
 80092bc:	9e06      	ldr	r6, [sp, #24]
 80092be:	9f08      	ldr	r7, [sp, #32]
 80092c0:	4645      	mov	r5, r8
 80092c2:	e74c      	b.n	800915e <_dtoa_r+0x76e>
 80092c4:	9a06      	ldr	r2, [sp, #24]
 80092c6:	e775      	b.n	80091b4 <_dtoa_r+0x7c4>
 80092c8:	9b05      	ldr	r3, [sp, #20]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	dc18      	bgt.n	8009300 <_dtoa_r+0x910>
 80092ce:	9b02      	ldr	r3, [sp, #8]
 80092d0:	b9b3      	cbnz	r3, 8009300 <_dtoa_r+0x910>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092d8:	b9a3      	cbnz	r3, 8009304 <_dtoa_r+0x914>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092e0:	0d1b      	lsrs	r3, r3, #20
 80092e2:	051b      	lsls	r3, r3, #20
 80092e4:	b12b      	cbz	r3, 80092f2 <_dtoa_r+0x902>
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	3301      	adds	r3, #1
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	f108 0801 	add.w	r8, r8, #1
 80092f0:	2301      	movs	r3, #1
 80092f2:	9306      	str	r3, [sp, #24]
 80092f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f47f af74 	bne.w	80091e4 <_dtoa_r+0x7f4>
 80092fc:	2001      	movs	r0, #1
 80092fe:	e779      	b.n	80091f4 <_dtoa_r+0x804>
 8009300:	2300      	movs	r3, #0
 8009302:	e7f6      	b.n	80092f2 <_dtoa_r+0x902>
 8009304:	9b02      	ldr	r3, [sp, #8]
 8009306:	e7f4      	b.n	80092f2 <_dtoa_r+0x902>
 8009308:	d085      	beq.n	8009216 <_dtoa_r+0x826>
 800930a:	4618      	mov	r0, r3
 800930c:	301c      	adds	r0, #28
 800930e:	e77d      	b.n	800920c <_dtoa_r+0x81c>
 8009310:	40240000 	.word	0x40240000
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	dc38      	bgt.n	800938c <_dtoa_r+0x99c>
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	2b02      	cmp	r3, #2
 800931e:	dd35      	ble.n	800938c <_dtoa_r+0x99c>
 8009320:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009324:	f1b9 0f00 	cmp.w	r9, #0
 8009328:	d10d      	bne.n	8009346 <_dtoa_r+0x956>
 800932a:	4631      	mov	r1, r6
 800932c:	464b      	mov	r3, r9
 800932e:	2205      	movs	r2, #5
 8009330:	4620      	mov	r0, r4
 8009332:	f000 fa8f 	bl	8009854 <__multadd>
 8009336:	4601      	mov	r1, r0
 8009338:	4606      	mov	r6, r0
 800933a:	4658      	mov	r0, fp
 800933c:	f000 fca6 	bl	8009c8c <__mcmp>
 8009340:	2800      	cmp	r0, #0
 8009342:	f73f adbd 	bgt.w	8008ec0 <_dtoa_r+0x4d0>
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	9d00      	ldr	r5, [sp, #0]
 800934a:	ea6f 0a03 	mvn.w	sl, r3
 800934e:	f04f 0800 	mov.w	r8, #0
 8009352:	4631      	mov	r1, r6
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fa5b 	bl	8009810 <_Bfree>
 800935a:	2f00      	cmp	r7, #0
 800935c:	f43f aeb4 	beq.w	80090c8 <_dtoa_r+0x6d8>
 8009360:	f1b8 0f00 	cmp.w	r8, #0
 8009364:	d005      	beq.n	8009372 <_dtoa_r+0x982>
 8009366:	45b8      	cmp	r8, r7
 8009368:	d003      	beq.n	8009372 <_dtoa_r+0x982>
 800936a:	4641      	mov	r1, r8
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fa4f 	bl	8009810 <_Bfree>
 8009372:	4639      	mov	r1, r7
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fa4b 	bl	8009810 <_Bfree>
 800937a:	e6a5      	b.n	80090c8 <_dtoa_r+0x6d8>
 800937c:	2600      	movs	r6, #0
 800937e:	4637      	mov	r7, r6
 8009380:	e7e1      	b.n	8009346 <_dtoa_r+0x956>
 8009382:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009384:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009388:	4637      	mov	r7, r6
 800938a:	e599      	b.n	8008ec0 <_dtoa_r+0x4d0>
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 80fd 	beq.w	8009592 <_dtoa_r+0xba2>
 8009398:	2d00      	cmp	r5, #0
 800939a:	dd05      	ble.n	80093a8 <_dtoa_r+0x9b8>
 800939c:	4639      	mov	r1, r7
 800939e:	462a      	mov	r2, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fc07 	bl	8009bb4 <__lshift>
 80093a6:	4607      	mov	r7, r0
 80093a8:	9b06      	ldr	r3, [sp, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d05c      	beq.n	8009468 <_dtoa_r+0xa78>
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 f9ed 	bl	8009790 <_Balloc>
 80093b6:	4605      	mov	r5, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <_dtoa_r+0x9d6>
 80093ba:	4b80      	ldr	r3, [pc, #512]	; (80095bc <_dtoa_r+0xbcc>)
 80093bc:	4602      	mov	r2, r0
 80093be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093c2:	f7ff bb2e 	b.w	8008a22 <_dtoa_r+0x32>
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	3202      	adds	r2, #2
 80093ca:	0092      	lsls	r2, r2, #2
 80093cc:	f107 010c 	add.w	r1, r7, #12
 80093d0:	300c      	adds	r0, #12
 80093d2:	f7fe fc57 	bl	8007c84 <memcpy>
 80093d6:	2201      	movs	r2, #1
 80093d8:	4629      	mov	r1, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fbea 	bl	8009bb4 <__lshift>
 80093e0:	9b00      	ldr	r3, [sp, #0]
 80093e2:	3301      	adds	r3, #1
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	9b00      	ldr	r3, [sp, #0]
 80093e8:	444b      	add	r3, r9
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	9b02      	ldr	r3, [sp, #8]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	46b8      	mov	r8, r7
 80093f4:	9306      	str	r3, [sp, #24]
 80093f6:	4607      	mov	r7, r0
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	4631      	mov	r1, r6
 80093fc:	3b01      	subs	r3, #1
 80093fe:	4658      	mov	r0, fp
 8009400:	9302      	str	r3, [sp, #8]
 8009402:	f7ff fa69 	bl	80088d8 <quorem>
 8009406:	4603      	mov	r3, r0
 8009408:	3330      	adds	r3, #48	; 0x30
 800940a:	9004      	str	r0, [sp, #16]
 800940c:	4641      	mov	r1, r8
 800940e:	4658      	mov	r0, fp
 8009410:	9308      	str	r3, [sp, #32]
 8009412:	f000 fc3b 	bl	8009c8c <__mcmp>
 8009416:	463a      	mov	r2, r7
 8009418:	4681      	mov	r9, r0
 800941a:	4631      	mov	r1, r6
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fc51 	bl	8009cc4 <__mdiff>
 8009422:	68c2      	ldr	r2, [r0, #12]
 8009424:	9b08      	ldr	r3, [sp, #32]
 8009426:	4605      	mov	r5, r0
 8009428:	bb02      	cbnz	r2, 800946c <_dtoa_r+0xa7c>
 800942a:	4601      	mov	r1, r0
 800942c:	4658      	mov	r0, fp
 800942e:	f000 fc2d 	bl	8009c8c <__mcmp>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	4602      	mov	r2, r0
 8009436:	4629      	mov	r1, r5
 8009438:	4620      	mov	r0, r4
 800943a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800943e:	f000 f9e7 	bl	8009810 <_Bfree>
 8009442:	9b05      	ldr	r3, [sp, #20]
 8009444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009446:	9d01      	ldr	r5, [sp, #4]
 8009448:	ea43 0102 	orr.w	r1, r3, r2
 800944c:	9b06      	ldr	r3, [sp, #24]
 800944e:	430b      	orrs	r3, r1
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	d10d      	bne.n	8009470 <_dtoa_r+0xa80>
 8009454:	2b39      	cmp	r3, #57	; 0x39
 8009456:	d029      	beq.n	80094ac <_dtoa_r+0xabc>
 8009458:	f1b9 0f00 	cmp.w	r9, #0
 800945c:	dd01      	ble.n	8009462 <_dtoa_r+0xa72>
 800945e:	9b04      	ldr	r3, [sp, #16]
 8009460:	3331      	adds	r3, #49	; 0x31
 8009462:	9a02      	ldr	r2, [sp, #8]
 8009464:	7013      	strb	r3, [r2, #0]
 8009466:	e774      	b.n	8009352 <_dtoa_r+0x962>
 8009468:	4638      	mov	r0, r7
 800946a:	e7b9      	b.n	80093e0 <_dtoa_r+0x9f0>
 800946c:	2201      	movs	r2, #1
 800946e:	e7e2      	b.n	8009436 <_dtoa_r+0xa46>
 8009470:	f1b9 0f00 	cmp.w	r9, #0
 8009474:	db06      	blt.n	8009484 <_dtoa_r+0xa94>
 8009476:	9905      	ldr	r1, [sp, #20]
 8009478:	ea41 0909 	orr.w	r9, r1, r9
 800947c:	9906      	ldr	r1, [sp, #24]
 800947e:	ea59 0101 	orrs.w	r1, r9, r1
 8009482:	d120      	bne.n	80094c6 <_dtoa_r+0xad6>
 8009484:	2a00      	cmp	r2, #0
 8009486:	ddec      	ble.n	8009462 <_dtoa_r+0xa72>
 8009488:	4659      	mov	r1, fp
 800948a:	2201      	movs	r2, #1
 800948c:	4620      	mov	r0, r4
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	f000 fb90 	bl	8009bb4 <__lshift>
 8009494:	4631      	mov	r1, r6
 8009496:	4683      	mov	fp, r0
 8009498:	f000 fbf8 	bl	8009c8c <__mcmp>
 800949c:	2800      	cmp	r0, #0
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	dc02      	bgt.n	80094a8 <_dtoa_r+0xab8>
 80094a2:	d1de      	bne.n	8009462 <_dtoa_r+0xa72>
 80094a4:	07da      	lsls	r2, r3, #31
 80094a6:	d5dc      	bpl.n	8009462 <_dtoa_r+0xa72>
 80094a8:	2b39      	cmp	r3, #57	; 0x39
 80094aa:	d1d8      	bne.n	800945e <_dtoa_r+0xa6e>
 80094ac:	9a02      	ldr	r2, [sp, #8]
 80094ae:	2339      	movs	r3, #57	; 0x39
 80094b0:	7013      	strb	r3, [r2, #0]
 80094b2:	462b      	mov	r3, r5
 80094b4:	461d      	mov	r5, r3
 80094b6:	3b01      	subs	r3, #1
 80094b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094bc:	2a39      	cmp	r2, #57	; 0x39
 80094be:	d050      	beq.n	8009562 <_dtoa_r+0xb72>
 80094c0:	3201      	adds	r2, #1
 80094c2:	701a      	strb	r2, [r3, #0]
 80094c4:	e745      	b.n	8009352 <_dtoa_r+0x962>
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	dd03      	ble.n	80094d2 <_dtoa_r+0xae2>
 80094ca:	2b39      	cmp	r3, #57	; 0x39
 80094cc:	d0ee      	beq.n	80094ac <_dtoa_r+0xabc>
 80094ce:	3301      	adds	r3, #1
 80094d0:	e7c7      	b.n	8009462 <_dtoa_r+0xa72>
 80094d2:	9a01      	ldr	r2, [sp, #4]
 80094d4:	9907      	ldr	r1, [sp, #28]
 80094d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80094da:	428a      	cmp	r2, r1
 80094dc:	d02a      	beq.n	8009534 <_dtoa_r+0xb44>
 80094de:	4659      	mov	r1, fp
 80094e0:	2300      	movs	r3, #0
 80094e2:	220a      	movs	r2, #10
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 f9b5 	bl	8009854 <__multadd>
 80094ea:	45b8      	cmp	r8, r7
 80094ec:	4683      	mov	fp, r0
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	f04f 020a 	mov.w	r2, #10
 80094f6:	4641      	mov	r1, r8
 80094f8:	4620      	mov	r0, r4
 80094fa:	d107      	bne.n	800950c <_dtoa_r+0xb1c>
 80094fc:	f000 f9aa 	bl	8009854 <__multadd>
 8009500:	4680      	mov	r8, r0
 8009502:	4607      	mov	r7, r0
 8009504:	9b01      	ldr	r3, [sp, #4]
 8009506:	3301      	adds	r3, #1
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	e775      	b.n	80093f8 <_dtoa_r+0xa08>
 800950c:	f000 f9a2 	bl	8009854 <__multadd>
 8009510:	4639      	mov	r1, r7
 8009512:	4680      	mov	r8, r0
 8009514:	2300      	movs	r3, #0
 8009516:	220a      	movs	r2, #10
 8009518:	4620      	mov	r0, r4
 800951a:	f000 f99b 	bl	8009854 <__multadd>
 800951e:	4607      	mov	r7, r0
 8009520:	e7f0      	b.n	8009504 <_dtoa_r+0xb14>
 8009522:	f1b9 0f00 	cmp.w	r9, #0
 8009526:	9a00      	ldr	r2, [sp, #0]
 8009528:	bfcc      	ite	gt
 800952a:	464d      	movgt	r5, r9
 800952c:	2501      	movle	r5, #1
 800952e:	4415      	add	r5, r2
 8009530:	f04f 0800 	mov.w	r8, #0
 8009534:	4659      	mov	r1, fp
 8009536:	2201      	movs	r2, #1
 8009538:	4620      	mov	r0, r4
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	f000 fb3a 	bl	8009bb4 <__lshift>
 8009540:	4631      	mov	r1, r6
 8009542:	4683      	mov	fp, r0
 8009544:	f000 fba2 	bl	8009c8c <__mcmp>
 8009548:	2800      	cmp	r0, #0
 800954a:	dcb2      	bgt.n	80094b2 <_dtoa_r+0xac2>
 800954c:	d102      	bne.n	8009554 <_dtoa_r+0xb64>
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	07db      	lsls	r3, r3, #31
 8009552:	d4ae      	bmi.n	80094b2 <_dtoa_r+0xac2>
 8009554:	462b      	mov	r3, r5
 8009556:	461d      	mov	r5, r3
 8009558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800955c:	2a30      	cmp	r2, #48	; 0x30
 800955e:	d0fa      	beq.n	8009556 <_dtoa_r+0xb66>
 8009560:	e6f7      	b.n	8009352 <_dtoa_r+0x962>
 8009562:	9a00      	ldr	r2, [sp, #0]
 8009564:	429a      	cmp	r2, r3
 8009566:	d1a5      	bne.n	80094b4 <_dtoa_r+0xac4>
 8009568:	f10a 0a01 	add.w	sl, sl, #1
 800956c:	2331      	movs	r3, #49	; 0x31
 800956e:	e779      	b.n	8009464 <_dtoa_r+0xa74>
 8009570:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <_dtoa_r+0xbd0>)
 8009572:	f7ff baaf 	b.w	8008ad4 <_dtoa_r+0xe4>
 8009576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009578:	2b00      	cmp	r3, #0
 800957a:	f47f aa86 	bne.w	8008a8a <_dtoa_r+0x9a>
 800957e:	4b11      	ldr	r3, [pc, #68]	; (80095c4 <_dtoa_r+0xbd4>)
 8009580:	f7ff baa8 	b.w	8008ad4 <_dtoa_r+0xe4>
 8009584:	f1b9 0f00 	cmp.w	r9, #0
 8009588:	dc03      	bgt.n	8009592 <_dtoa_r+0xba2>
 800958a:	9b05      	ldr	r3, [sp, #20]
 800958c:	2b02      	cmp	r3, #2
 800958e:	f73f aec9 	bgt.w	8009324 <_dtoa_r+0x934>
 8009592:	9d00      	ldr	r5, [sp, #0]
 8009594:	4631      	mov	r1, r6
 8009596:	4658      	mov	r0, fp
 8009598:	f7ff f99e 	bl	80088d8 <quorem>
 800959c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80095a0:	f805 3b01 	strb.w	r3, [r5], #1
 80095a4:	9a00      	ldr	r2, [sp, #0]
 80095a6:	1aaa      	subs	r2, r5, r2
 80095a8:	4591      	cmp	r9, r2
 80095aa:	ddba      	ble.n	8009522 <_dtoa_r+0xb32>
 80095ac:	4659      	mov	r1, fp
 80095ae:	2300      	movs	r3, #0
 80095b0:	220a      	movs	r2, #10
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 f94e 	bl	8009854 <__multadd>
 80095b8:	4683      	mov	fp, r0
 80095ba:	e7eb      	b.n	8009594 <_dtoa_r+0xba4>
 80095bc:	0800ab17 	.word	0x0800ab17
 80095c0:	0800aa70 	.word	0x0800aa70
 80095c4:	0800aa94 	.word	0x0800aa94

080095c8 <__sflush_r>:
 80095c8:	898a      	ldrh	r2, [r1, #12]
 80095ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ce:	4605      	mov	r5, r0
 80095d0:	0710      	lsls	r0, r2, #28
 80095d2:	460c      	mov	r4, r1
 80095d4:	d458      	bmi.n	8009688 <__sflush_r+0xc0>
 80095d6:	684b      	ldr	r3, [r1, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dc05      	bgt.n	80095e8 <__sflush_r+0x20>
 80095dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dc02      	bgt.n	80095e8 <__sflush_r+0x20>
 80095e2:	2000      	movs	r0, #0
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	d0f9      	beq.n	80095e2 <__sflush_r+0x1a>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095f4:	682f      	ldr	r7, [r5, #0]
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	d032      	beq.n	8009660 <__sflush_r+0x98>
 80095fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	075a      	lsls	r2, r3, #29
 8009600:	d505      	bpl.n	800960e <__sflush_r+0x46>
 8009602:	6863      	ldr	r3, [r4, #4]
 8009604:	1ac0      	subs	r0, r0, r3
 8009606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009608:	b10b      	cbz	r3, 800960e <__sflush_r+0x46>
 800960a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800960c:	1ac0      	subs	r0, r0, r3
 800960e:	2300      	movs	r3, #0
 8009610:	4602      	mov	r2, r0
 8009612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009614:	6a21      	ldr	r1, [r4, #32]
 8009616:	4628      	mov	r0, r5
 8009618:	47b0      	blx	r6
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	d106      	bne.n	800962e <__sflush_r+0x66>
 8009620:	6829      	ldr	r1, [r5, #0]
 8009622:	291d      	cmp	r1, #29
 8009624:	d82c      	bhi.n	8009680 <__sflush_r+0xb8>
 8009626:	4a2a      	ldr	r2, [pc, #168]	; (80096d0 <__sflush_r+0x108>)
 8009628:	40ca      	lsrs	r2, r1
 800962a:	07d6      	lsls	r6, r2, #31
 800962c:	d528      	bpl.n	8009680 <__sflush_r+0xb8>
 800962e:	2200      	movs	r2, #0
 8009630:	6062      	str	r2, [r4, #4]
 8009632:	04d9      	lsls	r1, r3, #19
 8009634:	6922      	ldr	r2, [r4, #16]
 8009636:	6022      	str	r2, [r4, #0]
 8009638:	d504      	bpl.n	8009644 <__sflush_r+0x7c>
 800963a:	1c42      	adds	r2, r0, #1
 800963c:	d101      	bne.n	8009642 <__sflush_r+0x7a>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	b903      	cbnz	r3, 8009644 <__sflush_r+0x7c>
 8009642:	6560      	str	r0, [r4, #84]	; 0x54
 8009644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009646:	602f      	str	r7, [r5, #0]
 8009648:	2900      	cmp	r1, #0
 800964a:	d0ca      	beq.n	80095e2 <__sflush_r+0x1a>
 800964c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009650:	4299      	cmp	r1, r3
 8009652:	d002      	beq.n	800965a <__sflush_r+0x92>
 8009654:	4628      	mov	r0, r5
 8009656:	f7fe fb2b 	bl	8007cb0 <_free_r>
 800965a:	2000      	movs	r0, #0
 800965c:	6360      	str	r0, [r4, #52]	; 0x34
 800965e:	e7c1      	b.n	80095e4 <__sflush_r+0x1c>
 8009660:	6a21      	ldr	r1, [r4, #32]
 8009662:	2301      	movs	r3, #1
 8009664:	4628      	mov	r0, r5
 8009666:	47b0      	blx	r6
 8009668:	1c41      	adds	r1, r0, #1
 800966a:	d1c7      	bne.n	80095fc <__sflush_r+0x34>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0c4      	beq.n	80095fc <__sflush_r+0x34>
 8009672:	2b1d      	cmp	r3, #29
 8009674:	d001      	beq.n	800967a <__sflush_r+0xb2>
 8009676:	2b16      	cmp	r3, #22
 8009678:	d101      	bne.n	800967e <__sflush_r+0xb6>
 800967a:	602f      	str	r7, [r5, #0]
 800967c:	e7b1      	b.n	80095e2 <__sflush_r+0x1a>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	e7ad      	b.n	80095e4 <__sflush_r+0x1c>
 8009688:	690f      	ldr	r7, [r1, #16]
 800968a:	2f00      	cmp	r7, #0
 800968c:	d0a9      	beq.n	80095e2 <__sflush_r+0x1a>
 800968e:	0793      	lsls	r3, r2, #30
 8009690:	680e      	ldr	r6, [r1, #0]
 8009692:	bf08      	it	eq
 8009694:	694b      	ldreq	r3, [r1, #20]
 8009696:	600f      	str	r7, [r1, #0]
 8009698:	bf18      	it	ne
 800969a:	2300      	movne	r3, #0
 800969c:	eba6 0807 	sub.w	r8, r6, r7
 80096a0:	608b      	str	r3, [r1, #8]
 80096a2:	f1b8 0f00 	cmp.w	r8, #0
 80096a6:	dd9c      	ble.n	80095e2 <__sflush_r+0x1a>
 80096a8:	6a21      	ldr	r1, [r4, #32]
 80096aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096ac:	4643      	mov	r3, r8
 80096ae:	463a      	mov	r2, r7
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b0      	blx	r6
 80096b4:	2800      	cmp	r0, #0
 80096b6:	dc06      	bgt.n	80096c6 <__sflush_r+0xfe>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c4:	e78e      	b.n	80095e4 <__sflush_r+0x1c>
 80096c6:	4407      	add	r7, r0
 80096c8:	eba8 0800 	sub.w	r8, r8, r0
 80096cc:	e7e9      	b.n	80096a2 <__sflush_r+0xda>
 80096ce:	bf00      	nop
 80096d0:	20400001 	.word	0x20400001

080096d4 <_fflush_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	690b      	ldr	r3, [r1, #16]
 80096d8:	4605      	mov	r5, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	b913      	cbnz	r3, 80096e4 <_fflush_r+0x10>
 80096de:	2500      	movs	r5, #0
 80096e0:	4628      	mov	r0, r5
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	b118      	cbz	r0, 80096ee <_fflush_r+0x1a>
 80096e6:	6983      	ldr	r3, [r0, #24]
 80096e8:	b90b      	cbnz	r3, 80096ee <_fflush_r+0x1a>
 80096ea:	f7fe f9fd 	bl	8007ae8 <__sinit>
 80096ee:	4b14      	ldr	r3, [pc, #80]	; (8009740 <_fflush_r+0x6c>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	d11b      	bne.n	800972c <_fflush_r+0x58>
 80096f4:	686c      	ldr	r4, [r5, #4]
 80096f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0ef      	beq.n	80096de <_fflush_r+0xa>
 80096fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009700:	07d0      	lsls	r0, r2, #31
 8009702:	d404      	bmi.n	800970e <_fflush_r+0x3a>
 8009704:	0599      	lsls	r1, r3, #22
 8009706:	d402      	bmi.n	800970e <_fflush_r+0x3a>
 8009708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800970a:	f7fe fab0 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800970e:	4628      	mov	r0, r5
 8009710:	4621      	mov	r1, r4
 8009712:	f7ff ff59 	bl	80095c8 <__sflush_r>
 8009716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009718:	07da      	lsls	r2, r3, #31
 800971a:	4605      	mov	r5, r0
 800971c:	d4e0      	bmi.n	80096e0 <_fflush_r+0xc>
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	059b      	lsls	r3, r3, #22
 8009722:	d4dd      	bmi.n	80096e0 <_fflush_r+0xc>
 8009724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009726:	f7fe faa3 	bl	8007c70 <__retarget_lock_release_recursive>
 800972a:	e7d9      	b.n	80096e0 <_fflush_r+0xc>
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <_fflush_r+0x70>)
 800972e:	429c      	cmp	r4, r3
 8009730:	d101      	bne.n	8009736 <_fflush_r+0x62>
 8009732:	68ac      	ldr	r4, [r5, #8]
 8009734:	e7df      	b.n	80096f6 <_fflush_r+0x22>
 8009736:	4b04      	ldr	r3, [pc, #16]	; (8009748 <_fflush_r+0x74>)
 8009738:	429c      	cmp	r4, r3
 800973a:	bf08      	it	eq
 800973c:	68ec      	ldreq	r4, [r5, #12]
 800973e:	e7da      	b.n	80096f6 <_fflush_r+0x22>
 8009740:	0800aa1c 	.word	0x0800aa1c
 8009744:	0800aa3c 	.word	0x0800aa3c
 8009748:	0800a9fc 	.word	0x0800a9fc

0800974c <_localeconv_r>:
 800974c:	4800      	ldr	r0, [pc, #0]	; (8009750 <_localeconv_r+0x4>)
 800974e:	4770      	bx	lr
 8009750:	20000164 	.word	0x20000164

08009754 <_lseek_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_lseek_r+0x20>)
 8009758:	4604      	mov	r4, r0
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	2200      	movs	r2, #0
 8009760:	602a      	str	r2, [r5, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f7f8 f84e 	bl	8001804 <_lseek>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_lseek_r+0x1e>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_lseek_r+0x1e>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20004e88 	.word	0x20004e88

08009778 <__malloc_lock>:
 8009778:	4801      	ldr	r0, [pc, #4]	; (8009780 <__malloc_lock+0x8>)
 800977a:	f7fe ba78 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 800977e:	bf00      	nop
 8009780:	20004e80 	.word	0x20004e80

08009784 <__malloc_unlock>:
 8009784:	4801      	ldr	r0, [pc, #4]	; (800978c <__malloc_unlock+0x8>)
 8009786:	f7fe ba73 	b.w	8007c70 <__retarget_lock_release_recursive>
 800978a:	bf00      	nop
 800978c:	20004e80 	.word	0x20004e80

08009790 <_Balloc>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009794:	4604      	mov	r4, r0
 8009796:	460d      	mov	r5, r1
 8009798:	b976      	cbnz	r6, 80097b8 <_Balloc+0x28>
 800979a:	2010      	movs	r0, #16
 800979c:	f7fe fa6a 	bl	8007c74 <malloc>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6260      	str	r0, [r4, #36]	; 0x24
 80097a4:	b920      	cbnz	r0, 80097b0 <_Balloc+0x20>
 80097a6:	4b18      	ldr	r3, [pc, #96]	; (8009808 <_Balloc+0x78>)
 80097a8:	4818      	ldr	r0, [pc, #96]	; (800980c <_Balloc+0x7c>)
 80097aa:	2166      	movs	r1, #102	; 0x66
 80097ac:	f000 fcea 	bl	800a184 <__assert_func>
 80097b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097b4:	6006      	str	r6, [r0, #0]
 80097b6:	60c6      	str	r6, [r0, #12]
 80097b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097ba:	68f3      	ldr	r3, [r6, #12]
 80097bc:	b183      	cbz	r3, 80097e0 <_Balloc+0x50>
 80097be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097c6:	b9b8      	cbnz	r0, 80097f8 <_Balloc+0x68>
 80097c8:	2101      	movs	r1, #1
 80097ca:	fa01 f605 	lsl.w	r6, r1, r5
 80097ce:	1d72      	adds	r2, r6, #5
 80097d0:	0092      	lsls	r2, r2, #2
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 fb5a 	bl	8009e8c <_calloc_r>
 80097d8:	b160      	cbz	r0, 80097f4 <_Balloc+0x64>
 80097da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097de:	e00e      	b.n	80097fe <_Balloc+0x6e>
 80097e0:	2221      	movs	r2, #33	; 0x21
 80097e2:	2104      	movs	r1, #4
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fb51 	bl	8009e8c <_calloc_r>
 80097ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ec:	60f0      	str	r0, [r6, #12]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e4      	bne.n	80097be <_Balloc+0x2e>
 80097f4:	2000      	movs	r0, #0
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	6802      	ldr	r2, [r0, #0]
 80097fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097fe:	2300      	movs	r3, #0
 8009800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009804:	e7f7      	b.n	80097f6 <_Balloc+0x66>
 8009806:	bf00      	nop
 8009808:	0800aaa1 	.word	0x0800aaa1
 800980c:	0800ab28 	.word	0x0800ab28

08009810 <_Bfree>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009814:	4605      	mov	r5, r0
 8009816:	460c      	mov	r4, r1
 8009818:	b976      	cbnz	r6, 8009838 <_Bfree+0x28>
 800981a:	2010      	movs	r0, #16
 800981c:	f7fe fa2a 	bl	8007c74 <malloc>
 8009820:	4602      	mov	r2, r0
 8009822:	6268      	str	r0, [r5, #36]	; 0x24
 8009824:	b920      	cbnz	r0, 8009830 <_Bfree+0x20>
 8009826:	4b09      	ldr	r3, [pc, #36]	; (800984c <_Bfree+0x3c>)
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <_Bfree+0x40>)
 800982a:	218a      	movs	r1, #138	; 0x8a
 800982c:	f000 fcaa 	bl	800a184 <__assert_func>
 8009830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009834:	6006      	str	r6, [r0, #0]
 8009836:	60c6      	str	r6, [r0, #12]
 8009838:	b13c      	cbz	r4, 800984a <_Bfree+0x3a>
 800983a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800983c:	6862      	ldr	r2, [r4, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009844:	6021      	str	r1, [r4, #0]
 8009846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	0800aaa1 	.word	0x0800aaa1
 8009850:	0800ab28 	.word	0x0800ab28

08009854 <__multadd>:
 8009854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	690e      	ldr	r6, [r1, #16]
 800985a:	4607      	mov	r7, r0
 800985c:	4698      	mov	r8, r3
 800985e:	460c      	mov	r4, r1
 8009860:	f101 0014 	add.w	r0, r1, #20
 8009864:	2300      	movs	r3, #0
 8009866:	6805      	ldr	r5, [r0, #0]
 8009868:	b2a9      	uxth	r1, r5
 800986a:	fb02 8101 	mla	r1, r2, r1, r8
 800986e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009872:	0c2d      	lsrs	r5, r5, #16
 8009874:	fb02 c505 	mla	r5, r2, r5, ip
 8009878:	b289      	uxth	r1, r1
 800987a:	3301      	adds	r3, #1
 800987c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009880:	429e      	cmp	r6, r3
 8009882:	f840 1b04 	str.w	r1, [r0], #4
 8009886:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800988a:	dcec      	bgt.n	8009866 <__multadd+0x12>
 800988c:	f1b8 0f00 	cmp.w	r8, #0
 8009890:	d022      	beq.n	80098d8 <__multadd+0x84>
 8009892:	68a3      	ldr	r3, [r4, #8]
 8009894:	42b3      	cmp	r3, r6
 8009896:	dc19      	bgt.n	80098cc <__multadd+0x78>
 8009898:	6861      	ldr	r1, [r4, #4]
 800989a:	4638      	mov	r0, r7
 800989c:	3101      	adds	r1, #1
 800989e:	f7ff ff77 	bl	8009790 <_Balloc>
 80098a2:	4605      	mov	r5, r0
 80098a4:	b928      	cbnz	r0, 80098b2 <__multadd+0x5e>
 80098a6:	4602      	mov	r2, r0
 80098a8:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <__multadd+0x8c>)
 80098aa:	480e      	ldr	r0, [pc, #56]	; (80098e4 <__multadd+0x90>)
 80098ac:	21b5      	movs	r1, #181	; 0xb5
 80098ae:	f000 fc69 	bl	800a184 <__assert_func>
 80098b2:	6922      	ldr	r2, [r4, #16]
 80098b4:	3202      	adds	r2, #2
 80098b6:	f104 010c 	add.w	r1, r4, #12
 80098ba:	0092      	lsls	r2, r2, #2
 80098bc:	300c      	adds	r0, #12
 80098be:	f7fe f9e1 	bl	8007c84 <memcpy>
 80098c2:	4621      	mov	r1, r4
 80098c4:	4638      	mov	r0, r7
 80098c6:	f7ff ffa3 	bl	8009810 <_Bfree>
 80098ca:	462c      	mov	r4, r5
 80098cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80098d0:	3601      	adds	r6, #1
 80098d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80098d6:	6126      	str	r6, [r4, #16]
 80098d8:	4620      	mov	r0, r4
 80098da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098de:	bf00      	nop
 80098e0:	0800ab17 	.word	0x0800ab17
 80098e4:	0800ab28 	.word	0x0800ab28

080098e8 <__hi0bits>:
 80098e8:	0c03      	lsrs	r3, r0, #16
 80098ea:	041b      	lsls	r3, r3, #16
 80098ec:	b9d3      	cbnz	r3, 8009924 <__hi0bits+0x3c>
 80098ee:	0400      	lsls	r0, r0, #16
 80098f0:	2310      	movs	r3, #16
 80098f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098f6:	bf04      	itt	eq
 80098f8:	0200      	lsleq	r0, r0, #8
 80098fa:	3308      	addeq	r3, #8
 80098fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009900:	bf04      	itt	eq
 8009902:	0100      	lsleq	r0, r0, #4
 8009904:	3304      	addeq	r3, #4
 8009906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800990a:	bf04      	itt	eq
 800990c:	0080      	lsleq	r0, r0, #2
 800990e:	3302      	addeq	r3, #2
 8009910:	2800      	cmp	r0, #0
 8009912:	db05      	blt.n	8009920 <__hi0bits+0x38>
 8009914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009918:	f103 0301 	add.w	r3, r3, #1
 800991c:	bf08      	it	eq
 800991e:	2320      	moveq	r3, #32
 8009920:	4618      	mov	r0, r3
 8009922:	4770      	bx	lr
 8009924:	2300      	movs	r3, #0
 8009926:	e7e4      	b.n	80098f2 <__hi0bits+0xa>

08009928 <__lo0bits>:
 8009928:	6803      	ldr	r3, [r0, #0]
 800992a:	f013 0207 	ands.w	r2, r3, #7
 800992e:	4601      	mov	r1, r0
 8009930:	d00b      	beq.n	800994a <__lo0bits+0x22>
 8009932:	07da      	lsls	r2, r3, #31
 8009934:	d424      	bmi.n	8009980 <__lo0bits+0x58>
 8009936:	0798      	lsls	r0, r3, #30
 8009938:	bf49      	itett	mi
 800993a:	085b      	lsrmi	r3, r3, #1
 800993c:	089b      	lsrpl	r3, r3, #2
 800993e:	2001      	movmi	r0, #1
 8009940:	600b      	strmi	r3, [r1, #0]
 8009942:	bf5c      	itt	pl
 8009944:	600b      	strpl	r3, [r1, #0]
 8009946:	2002      	movpl	r0, #2
 8009948:	4770      	bx	lr
 800994a:	b298      	uxth	r0, r3
 800994c:	b9b0      	cbnz	r0, 800997c <__lo0bits+0x54>
 800994e:	0c1b      	lsrs	r3, r3, #16
 8009950:	2010      	movs	r0, #16
 8009952:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009956:	bf04      	itt	eq
 8009958:	0a1b      	lsreq	r3, r3, #8
 800995a:	3008      	addeq	r0, #8
 800995c:	071a      	lsls	r2, r3, #28
 800995e:	bf04      	itt	eq
 8009960:	091b      	lsreq	r3, r3, #4
 8009962:	3004      	addeq	r0, #4
 8009964:	079a      	lsls	r2, r3, #30
 8009966:	bf04      	itt	eq
 8009968:	089b      	lsreq	r3, r3, #2
 800996a:	3002      	addeq	r0, #2
 800996c:	07da      	lsls	r2, r3, #31
 800996e:	d403      	bmi.n	8009978 <__lo0bits+0x50>
 8009970:	085b      	lsrs	r3, r3, #1
 8009972:	f100 0001 	add.w	r0, r0, #1
 8009976:	d005      	beq.n	8009984 <__lo0bits+0x5c>
 8009978:	600b      	str	r3, [r1, #0]
 800997a:	4770      	bx	lr
 800997c:	4610      	mov	r0, r2
 800997e:	e7e8      	b.n	8009952 <__lo0bits+0x2a>
 8009980:	2000      	movs	r0, #0
 8009982:	4770      	bx	lr
 8009984:	2020      	movs	r0, #32
 8009986:	4770      	bx	lr

08009988 <__i2b>:
 8009988:	b510      	push	{r4, lr}
 800998a:	460c      	mov	r4, r1
 800998c:	2101      	movs	r1, #1
 800998e:	f7ff feff 	bl	8009790 <_Balloc>
 8009992:	4602      	mov	r2, r0
 8009994:	b928      	cbnz	r0, 80099a2 <__i2b+0x1a>
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <__i2b+0x24>)
 8009998:	4805      	ldr	r0, [pc, #20]	; (80099b0 <__i2b+0x28>)
 800999a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800999e:	f000 fbf1 	bl	800a184 <__assert_func>
 80099a2:	2301      	movs	r3, #1
 80099a4:	6144      	str	r4, [r0, #20]
 80099a6:	6103      	str	r3, [r0, #16]
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	bf00      	nop
 80099ac:	0800ab17 	.word	0x0800ab17
 80099b0:	0800ab28 	.word	0x0800ab28

080099b4 <__multiply>:
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	4614      	mov	r4, r2
 80099ba:	690a      	ldr	r2, [r1, #16]
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	429a      	cmp	r2, r3
 80099c0:	bfb8      	it	lt
 80099c2:	460b      	movlt	r3, r1
 80099c4:	460d      	mov	r5, r1
 80099c6:	bfbc      	itt	lt
 80099c8:	4625      	movlt	r5, r4
 80099ca:	461c      	movlt	r4, r3
 80099cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80099d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099d4:	68ab      	ldr	r3, [r5, #8]
 80099d6:	6869      	ldr	r1, [r5, #4]
 80099d8:	eb0a 0709 	add.w	r7, sl, r9
 80099dc:	42bb      	cmp	r3, r7
 80099de:	b085      	sub	sp, #20
 80099e0:	bfb8      	it	lt
 80099e2:	3101      	addlt	r1, #1
 80099e4:	f7ff fed4 	bl	8009790 <_Balloc>
 80099e8:	b930      	cbnz	r0, 80099f8 <__multiply+0x44>
 80099ea:	4602      	mov	r2, r0
 80099ec:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <__multiply+0x144>)
 80099ee:	4843      	ldr	r0, [pc, #268]	; (8009afc <__multiply+0x148>)
 80099f0:	f240 115d 	movw	r1, #349	; 0x15d
 80099f4:	f000 fbc6 	bl	800a184 <__assert_func>
 80099f8:	f100 0614 	add.w	r6, r0, #20
 80099fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a00:	4633      	mov	r3, r6
 8009a02:	2200      	movs	r2, #0
 8009a04:	4543      	cmp	r3, r8
 8009a06:	d31e      	bcc.n	8009a46 <__multiply+0x92>
 8009a08:	f105 0c14 	add.w	ip, r5, #20
 8009a0c:	f104 0314 	add.w	r3, r4, #20
 8009a10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a18:	9202      	str	r2, [sp, #8]
 8009a1a:	ebac 0205 	sub.w	r2, ip, r5
 8009a1e:	3a15      	subs	r2, #21
 8009a20:	f022 0203 	bic.w	r2, r2, #3
 8009a24:	3204      	adds	r2, #4
 8009a26:	f105 0115 	add.w	r1, r5, #21
 8009a2a:	458c      	cmp	ip, r1
 8009a2c:	bf38      	it	cc
 8009a2e:	2204      	movcc	r2, #4
 8009a30:	9201      	str	r2, [sp, #4]
 8009a32:	9a02      	ldr	r2, [sp, #8]
 8009a34:	9303      	str	r3, [sp, #12]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d808      	bhi.n	8009a4c <__multiply+0x98>
 8009a3a:	2f00      	cmp	r7, #0
 8009a3c:	dc55      	bgt.n	8009aea <__multiply+0x136>
 8009a3e:	6107      	str	r7, [r0, #16]
 8009a40:	b005      	add	sp, #20
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	f843 2b04 	str.w	r2, [r3], #4
 8009a4a:	e7db      	b.n	8009a04 <__multiply+0x50>
 8009a4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a50:	f1ba 0f00 	cmp.w	sl, #0
 8009a54:	d020      	beq.n	8009a98 <__multiply+0xe4>
 8009a56:	f105 0e14 	add.w	lr, r5, #20
 8009a5a:	46b1      	mov	r9, r6
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a62:	f8d9 b000 	ldr.w	fp, [r9]
 8009a66:	b2a1      	uxth	r1, r4
 8009a68:	fa1f fb8b 	uxth.w	fp, fp
 8009a6c:	fb0a b101 	mla	r1, sl, r1, fp
 8009a70:	4411      	add	r1, r2
 8009a72:	f8d9 2000 	ldr.w	r2, [r9]
 8009a76:	0c24      	lsrs	r4, r4, #16
 8009a78:	0c12      	lsrs	r2, r2, #16
 8009a7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a82:	b289      	uxth	r1, r1
 8009a84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a88:	45f4      	cmp	ip, lr
 8009a8a:	f849 1b04 	str.w	r1, [r9], #4
 8009a8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a92:	d8e4      	bhi.n	8009a5e <__multiply+0xaa>
 8009a94:	9901      	ldr	r1, [sp, #4]
 8009a96:	5072      	str	r2, [r6, r1]
 8009a98:	9a03      	ldr	r2, [sp, #12]
 8009a9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	f1b9 0f00 	cmp.w	r9, #0
 8009aa4:	d01f      	beq.n	8009ae6 <__multiply+0x132>
 8009aa6:	6834      	ldr	r4, [r6, #0]
 8009aa8:	f105 0114 	add.w	r1, r5, #20
 8009aac:	46b6      	mov	lr, r6
 8009aae:	f04f 0a00 	mov.w	sl, #0
 8009ab2:	880a      	ldrh	r2, [r1, #0]
 8009ab4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ab8:	fb09 b202 	mla	r2, r9, r2, fp
 8009abc:	4492      	add	sl, r2
 8009abe:	b2a4      	uxth	r4, r4
 8009ac0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ac4:	f84e 4b04 	str.w	r4, [lr], #4
 8009ac8:	f851 4b04 	ldr.w	r4, [r1], #4
 8009acc:	f8be 2000 	ldrh.w	r2, [lr]
 8009ad0:	0c24      	lsrs	r4, r4, #16
 8009ad2:	fb09 2404 	mla	r4, r9, r4, r2
 8009ad6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ada:	458c      	cmp	ip, r1
 8009adc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ae0:	d8e7      	bhi.n	8009ab2 <__multiply+0xfe>
 8009ae2:	9a01      	ldr	r2, [sp, #4]
 8009ae4:	50b4      	str	r4, [r6, r2]
 8009ae6:	3604      	adds	r6, #4
 8009ae8:	e7a3      	b.n	8009a32 <__multiply+0x7e>
 8009aea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1a5      	bne.n	8009a3e <__multiply+0x8a>
 8009af2:	3f01      	subs	r7, #1
 8009af4:	e7a1      	b.n	8009a3a <__multiply+0x86>
 8009af6:	bf00      	nop
 8009af8:	0800ab17 	.word	0x0800ab17
 8009afc:	0800ab28 	.word	0x0800ab28

08009b00 <__pow5mult>:
 8009b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	4615      	mov	r5, r2
 8009b06:	f012 0203 	ands.w	r2, r2, #3
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	d007      	beq.n	8009b20 <__pow5mult+0x20>
 8009b10:	4c25      	ldr	r4, [pc, #148]	; (8009ba8 <__pow5mult+0xa8>)
 8009b12:	3a01      	subs	r2, #1
 8009b14:	2300      	movs	r3, #0
 8009b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b1a:	f7ff fe9b 	bl	8009854 <__multadd>
 8009b1e:	4607      	mov	r7, r0
 8009b20:	10ad      	asrs	r5, r5, #2
 8009b22:	d03d      	beq.n	8009ba0 <__pow5mult+0xa0>
 8009b24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b26:	b97c      	cbnz	r4, 8009b48 <__pow5mult+0x48>
 8009b28:	2010      	movs	r0, #16
 8009b2a:	f7fe f8a3 	bl	8007c74 <malloc>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6270      	str	r0, [r6, #36]	; 0x24
 8009b32:	b928      	cbnz	r0, 8009b40 <__pow5mult+0x40>
 8009b34:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <__pow5mult+0xac>)
 8009b36:	481e      	ldr	r0, [pc, #120]	; (8009bb0 <__pow5mult+0xb0>)
 8009b38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b3c:	f000 fb22 	bl	800a184 <__assert_func>
 8009b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b44:	6004      	str	r4, [r0, #0]
 8009b46:	60c4      	str	r4, [r0, #12]
 8009b48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b50:	b94c      	cbnz	r4, 8009b66 <__pow5mult+0x66>
 8009b52:	f240 2171 	movw	r1, #625	; 0x271
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7ff ff16 	bl	8009988 <__i2b>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b62:	4604      	mov	r4, r0
 8009b64:	6003      	str	r3, [r0, #0]
 8009b66:	f04f 0900 	mov.w	r9, #0
 8009b6a:	07eb      	lsls	r3, r5, #31
 8009b6c:	d50a      	bpl.n	8009b84 <__pow5mult+0x84>
 8009b6e:	4639      	mov	r1, r7
 8009b70:	4622      	mov	r2, r4
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff ff1e 	bl	80099b4 <__multiply>
 8009b78:	4639      	mov	r1, r7
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fe47 	bl	8009810 <_Bfree>
 8009b82:	4647      	mov	r7, r8
 8009b84:	106d      	asrs	r5, r5, #1
 8009b86:	d00b      	beq.n	8009ba0 <__pow5mult+0xa0>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	b938      	cbnz	r0, 8009b9c <__pow5mult+0x9c>
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7ff ff0f 	bl	80099b4 <__multiply>
 8009b96:	6020      	str	r0, [r4, #0]
 8009b98:	f8c0 9000 	str.w	r9, [r0]
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	e7e4      	b.n	8009b6a <__pow5mult+0x6a>
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	bf00      	nop
 8009ba8:	0800ac78 	.word	0x0800ac78
 8009bac:	0800aaa1 	.word	0x0800aaa1
 8009bb0:	0800ab28 	.word	0x0800ab28

08009bb4 <__lshift>:
 8009bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	460c      	mov	r4, r1
 8009bba:	6849      	ldr	r1, [r1, #4]
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bc2:	68a3      	ldr	r3, [r4, #8]
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	4691      	mov	r9, r2
 8009bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bcc:	f108 0601 	add.w	r6, r8, #1
 8009bd0:	42b3      	cmp	r3, r6
 8009bd2:	db0b      	blt.n	8009bec <__lshift+0x38>
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7ff fddb 	bl	8009790 <_Balloc>
 8009bda:	4605      	mov	r5, r0
 8009bdc:	b948      	cbnz	r0, 8009bf2 <__lshift+0x3e>
 8009bde:	4602      	mov	r2, r0
 8009be0:	4b28      	ldr	r3, [pc, #160]	; (8009c84 <__lshift+0xd0>)
 8009be2:	4829      	ldr	r0, [pc, #164]	; (8009c88 <__lshift+0xd4>)
 8009be4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009be8:	f000 facc 	bl	800a184 <__assert_func>
 8009bec:	3101      	adds	r1, #1
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	e7ee      	b.n	8009bd0 <__lshift+0x1c>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f100 0114 	add.w	r1, r0, #20
 8009bf8:	f100 0210 	add.w	r2, r0, #16
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	4553      	cmp	r3, sl
 8009c00:	db33      	blt.n	8009c6a <__lshift+0xb6>
 8009c02:	6920      	ldr	r0, [r4, #16]
 8009c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c08:	f104 0314 	add.w	r3, r4, #20
 8009c0c:	f019 091f 	ands.w	r9, r9, #31
 8009c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c18:	d02b      	beq.n	8009c72 <__lshift+0xbe>
 8009c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c1e:	468a      	mov	sl, r1
 8009c20:	2200      	movs	r2, #0
 8009c22:	6818      	ldr	r0, [r3, #0]
 8009c24:	fa00 f009 	lsl.w	r0, r0, r9
 8009c28:	4302      	orrs	r2, r0
 8009c2a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c32:	459c      	cmp	ip, r3
 8009c34:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c38:	d8f3      	bhi.n	8009c22 <__lshift+0x6e>
 8009c3a:	ebac 0304 	sub.w	r3, ip, r4
 8009c3e:	3b15      	subs	r3, #21
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	3304      	adds	r3, #4
 8009c46:	f104 0015 	add.w	r0, r4, #21
 8009c4a:	4584      	cmp	ip, r0
 8009c4c:	bf38      	it	cc
 8009c4e:	2304      	movcc	r3, #4
 8009c50:	50ca      	str	r2, [r1, r3]
 8009c52:	b10a      	cbz	r2, 8009c58 <__lshift+0xa4>
 8009c54:	f108 0602 	add.w	r6, r8, #2
 8009c58:	3e01      	subs	r6, #1
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	612e      	str	r6, [r5, #16]
 8009c5e:	4621      	mov	r1, r4
 8009c60:	f7ff fdd6 	bl	8009810 <_Bfree>
 8009c64:	4628      	mov	r0, r5
 8009c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c6e:	3301      	adds	r3, #1
 8009c70:	e7c5      	b.n	8009bfe <__lshift+0x4a>
 8009c72:	3904      	subs	r1, #4
 8009c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c78:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c7c:	459c      	cmp	ip, r3
 8009c7e:	d8f9      	bhi.n	8009c74 <__lshift+0xc0>
 8009c80:	e7ea      	b.n	8009c58 <__lshift+0xa4>
 8009c82:	bf00      	nop
 8009c84:	0800ab17 	.word	0x0800ab17
 8009c88:	0800ab28 	.word	0x0800ab28

08009c8c <__mcmp>:
 8009c8c:	b530      	push	{r4, r5, lr}
 8009c8e:	6902      	ldr	r2, [r0, #16]
 8009c90:	690c      	ldr	r4, [r1, #16]
 8009c92:	1b12      	subs	r2, r2, r4
 8009c94:	d10e      	bne.n	8009cb4 <__mcmp+0x28>
 8009c96:	f100 0314 	add.w	r3, r0, #20
 8009c9a:	3114      	adds	r1, #20
 8009c9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cac:	42a5      	cmp	r5, r4
 8009cae:	d003      	beq.n	8009cb8 <__mcmp+0x2c>
 8009cb0:	d305      	bcc.n	8009cbe <__mcmp+0x32>
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	bd30      	pop	{r4, r5, pc}
 8009cb8:	4283      	cmp	r3, r0
 8009cba:	d3f3      	bcc.n	8009ca4 <__mcmp+0x18>
 8009cbc:	e7fa      	b.n	8009cb4 <__mcmp+0x28>
 8009cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cc2:	e7f7      	b.n	8009cb4 <__mcmp+0x28>

08009cc4 <__mdiff>:
 8009cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	460c      	mov	r4, r1
 8009cca:	4606      	mov	r6, r0
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4617      	mov	r7, r2
 8009cd2:	f7ff ffdb 	bl	8009c8c <__mcmp>
 8009cd6:	1e05      	subs	r5, r0, #0
 8009cd8:	d110      	bne.n	8009cfc <__mdiff+0x38>
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7ff fd57 	bl	8009790 <_Balloc>
 8009ce2:	b930      	cbnz	r0, 8009cf2 <__mdiff+0x2e>
 8009ce4:	4b39      	ldr	r3, [pc, #228]	; (8009dcc <__mdiff+0x108>)
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	f240 2132 	movw	r1, #562	; 0x232
 8009cec:	4838      	ldr	r0, [pc, #224]	; (8009dd0 <__mdiff+0x10c>)
 8009cee:	f000 fa49 	bl	800a184 <__assert_func>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfc:	bfa4      	itt	ge
 8009cfe:	463b      	movge	r3, r7
 8009d00:	4627      	movge	r7, r4
 8009d02:	4630      	mov	r0, r6
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	bfa6      	itte	ge
 8009d08:	461c      	movge	r4, r3
 8009d0a:	2500      	movge	r5, #0
 8009d0c:	2501      	movlt	r5, #1
 8009d0e:	f7ff fd3f 	bl	8009790 <_Balloc>
 8009d12:	b920      	cbnz	r0, 8009d1e <__mdiff+0x5a>
 8009d14:	4b2d      	ldr	r3, [pc, #180]	; (8009dcc <__mdiff+0x108>)
 8009d16:	4602      	mov	r2, r0
 8009d18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d1c:	e7e6      	b.n	8009cec <__mdiff+0x28>
 8009d1e:	693e      	ldr	r6, [r7, #16]
 8009d20:	60c5      	str	r5, [r0, #12]
 8009d22:	6925      	ldr	r5, [r4, #16]
 8009d24:	f107 0114 	add.w	r1, r7, #20
 8009d28:	f104 0914 	add.w	r9, r4, #20
 8009d2c:	f100 0e14 	add.w	lr, r0, #20
 8009d30:	f107 0210 	add.w	r2, r7, #16
 8009d34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d3c:	46f2      	mov	sl, lr
 8009d3e:	2700      	movs	r7, #0
 8009d40:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d48:	fa1f f883 	uxth.w	r8, r3
 8009d4c:	fa17 f78b 	uxtah	r7, r7, fp
 8009d50:	0c1b      	lsrs	r3, r3, #16
 8009d52:	eba7 0808 	sub.w	r8, r7, r8
 8009d56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d5e:	fa1f f888 	uxth.w	r8, r8
 8009d62:	141f      	asrs	r7, r3, #16
 8009d64:	454d      	cmp	r5, r9
 8009d66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d6a:	f84a 3b04 	str.w	r3, [sl], #4
 8009d6e:	d8e7      	bhi.n	8009d40 <__mdiff+0x7c>
 8009d70:	1b2b      	subs	r3, r5, r4
 8009d72:	3b15      	subs	r3, #21
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	3304      	adds	r3, #4
 8009d7a:	3415      	adds	r4, #21
 8009d7c:	42a5      	cmp	r5, r4
 8009d7e:	bf38      	it	cc
 8009d80:	2304      	movcc	r3, #4
 8009d82:	4419      	add	r1, r3
 8009d84:	4473      	add	r3, lr
 8009d86:	469e      	mov	lr, r3
 8009d88:	460d      	mov	r5, r1
 8009d8a:	4565      	cmp	r5, ip
 8009d8c:	d30e      	bcc.n	8009dac <__mdiff+0xe8>
 8009d8e:	f10c 0203 	add.w	r2, ip, #3
 8009d92:	1a52      	subs	r2, r2, r1
 8009d94:	f022 0203 	bic.w	r2, r2, #3
 8009d98:	3903      	subs	r1, #3
 8009d9a:	458c      	cmp	ip, r1
 8009d9c:	bf38      	it	cc
 8009d9e:	2200      	movcc	r2, #0
 8009da0:	441a      	add	r2, r3
 8009da2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009da6:	b17b      	cbz	r3, 8009dc8 <__mdiff+0x104>
 8009da8:	6106      	str	r6, [r0, #16]
 8009daa:	e7a5      	b.n	8009cf8 <__mdiff+0x34>
 8009dac:	f855 8b04 	ldr.w	r8, [r5], #4
 8009db0:	fa17 f488 	uxtah	r4, r7, r8
 8009db4:	1422      	asrs	r2, r4, #16
 8009db6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009dba:	b2a4      	uxth	r4, r4
 8009dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009dc0:	f84e 4b04 	str.w	r4, [lr], #4
 8009dc4:	1417      	asrs	r7, r2, #16
 8009dc6:	e7e0      	b.n	8009d8a <__mdiff+0xc6>
 8009dc8:	3e01      	subs	r6, #1
 8009dca:	e7ea      	b.n	8009da2 <__mdiff+0xde>
 8009dcc:	0800ab17 	.word	0x0800ab17
 8009dd0:	0800ab28 	.word	0x0800ab28

08009dd4 <__d2b>:
 8009dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dd8:	4689      	mov	r9, r1
 8009dda:	2101      	movs	r1, #1
 8009ddc:	ec57 6b10 	vmov	r6, r7, d0
 8009de0:	4690      	mov	r8, r2
 8009de2:	f7ff fcd5 	bl	8009790 <_Balloc>
 8009de6:	4604      	mov	r4, r0
 8009de8:	b930      	cbnz	r0, 8009df8 <__d2b+0x24>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4b25      	ldr	r3, [pc, #148]	; (8009e84 <__d2b+0xb0>)
 8009dee:	4826      	ldr	r0, [pc, #152]	; (8009e88 <__d2b+0xb4>)
 8009df0:	f240 310a 	movw	r1, #778	; 0x30a
 8009df4:	f000 f9c6 	bl	800a184 <__assert_func>
 8009df8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009dfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e00:	bb35      	cbnz	r5, 8009e50 <__d2b+0x7c>
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	d028      	beq.n	8009e5a <__d2b+0x86>
 8009e08:	4668      	mov	r0, sp
 8009e0a:	9600      	str	r6, [sp, #0]
 8009e0c:	f7ff fd8c 	bl	8009928 <__lo0bits>
 8009e10:	9900      	ldr	r1, [sp, #0]
 8009e12:	b300      	cbz	r0, 8009e56 <__d2b+0x82>
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	f1c0 0320 	rsb	r3, r0, #32
 8009e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	40c2      	lsrs	r2, r0
 8009e22:	6163      	str	r3, [r4, #20]
 8009e24:	9201      	str	r2, [sp, #4]
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	61a3      	str	r3, [r4, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bf14      	ite	ne
 8009e2e:	2202      	movne	r2, #2
 8009e30:	2201      	moveq	r2, #1
 8009e32:	6122      	str	r2, [r4, #16]
 8009e34:	b1d5      	cbz	r5, 8009e6c <__d2b+0x98>
 8009e36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e3a:	4405      	add	r5, r0
 8009e3c:	f8c9 5000 	str.w	r5, [r9]
 8009e40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e44:	f8c8 0000 	str.w	r0, [r8]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	b003      	add	sp, #12
 8009e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e54:	e7d5      	b.n	8009e02 <__d2b+0x2e>
 8009e56:	6161      	str	r1, [r4, #20]
 8009e58:	e7e5      	b.n	8009e26 <__d2b+0x52>
 8009e5a:	a801      	add	r0, sp, #4
 8009e5c:	f7ff fd64 	bl	8009928 <__lo0bits>
 8009e60:	9b01      	ldr	r3, [sp, #4]
 8009e62:	6163      	str	r3, [r4, #20]
 8009e64:	2201      	movs	r2, #1
 8009e66:	6122      	str	r2, [r4, #16]
 8009e68:	3020      	adds	r0, #32
 8009e6a:	e7e3      	b.n	8009e34 <__d2b+0x60>
 8009e6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e74:	f8c9 0000 	str.w	r0, [r9]
 8009e78:	6918      	ldr	r0, [r3, #16]
 8009e7a:	f7ff fd35 	bl	80098e8 <__hi0bits>
 8009e7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e82:	e7df      	b.n	8009e44 <__d2b+0x70>
 8009e84:	0800ab17 	.word	0x0800ab17
 8009e88:	0800ab28 	.word	0x0800ab28

08009e8c <_calloc_r>:
 8009e8c:	b513      	push	{r0, r1, r4, lr}
 8009e8e:	434a      	muls	r2, r1
 8009e90:	4611      	mov	r1, r2
 8009e92:	9201      	str	r2, [sp, #4]
 8009e94:	f7fd ff5c 	bl	8007d50 <_malloc_r>
 8009e98:	4604      	mov	r4, r0
 8009e9a:	b118      	cbz	r0, 8009ea4 <_calloc_r+0x18>
 8009e9c:	9a01      	ldr	r2, [sp, #4]
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	f7fd fefe 	bl	8007ca0 <memset>
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	b002      	add	sp, #8
 8009ea8:	bd10      	pop	{r4, pc}

08009eaa <__ssputs_r>:
 8009eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eae:	688e      	ldr	r6, [r1, #8]
 8009eb0:	429e      	cmp	r6, r3
 8009eb2:	4682      	mov	sl, r0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	4690      	mov	r8, r2
 8009eb8:	461f      	mov	r7, r3
 8009eba:	d838      	bhi.n	8009f2e <__ssputs_r+0x84>
 8009ebc:	898a      	ldrh	r2, [r1, #12]
 8009ebe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ec2:	d032      	beq.n	8009f2a <__ssputs_r+0x80>
 8009ec4:	6825      	ldr	r5, [r4, #0]
 8009ec6:	6909      	ldr	r1, [r1, #16]
 8009ec8:	eba5 0901 	sub.w	r9, r5, r1
 8009ecc:	6965      	ldr	r5, [r4, #20]
 8009ece:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	444b      	add	r3, r9
 8009eda:	106d      	asrs	r5, r5, #1
 8009edc:	429d      	cmp	r5, r3
 8009ede:	bf38      	it	cc
 8009ee0:	461d      	movcc	r5, r3
 8009ee2:	0553      	lsls	r3, r2, #21
 8009ee4:	d531      	bpl.n	8009f4a <__ssputs_r+0xa0>
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7fd ff32 	bl	8007d50 <_malloc_r>
 8009eec:	4606      	mov	r6, r0
 8009eee:	b950      	cbnz	r0, 8009f06 <__ssputs_r+0x5c>
 8009ef0:	230c      	movs	r3, #12
 8009ef2:	f8ca 3000 	str.w	r3, [sl]
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f06:	6921      	ldr	r1, [r4, #16]
 8009f08:	464a      	mov	r2, r9
 8009f0a:	f7fd febb 	bl	8007c84 <memcpy>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	6126      	str	r6, [r4, #16]
 8009f1c:	6165      	str	r5, [r4, #20]
 8009f1e:	444e      	add	r6, r9
 8009f20:	eba5 0509 	sub.w	r5, r5, r9
 8009f24:	6026      	str	r6, [r4, #0]
 8009f26:	60a5      	str	r5, [r4, #8]
 8009f28:	463e      	mov	r6, r7
 8009f2a:	42be      	cmp	r6, r7
 8009f2c:	d900      	bls.n	8009f30 <__ssputs_r+0x86>
 8009f2e:	463e      	mov	r6, r7
 8009f30:	4632      	mov	r2, r6
 8009f32:	6820      	ldr	r0, [r4, #0]
 8009f34:	4641      	mov	r1, r8
 8009f36:	f000 f967 	bl	800a208 <memmove>
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	6822      	ldr	r2, [r4, #0]
 8009f3e:	1b9b      	subs	r3, r3, r6
 8009f40:	4432      	add	r2, r6
 8009f42:	60a3      	str	r3, [r4, #8]
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	2000      	movs	r0, #0
 8009f48:	e7db      	b.n	8009f02 <__ssputs_r+0x58>
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	f000 f976 	bl	800a23c <_realloc_r>
 8009f50:	4606      	mov	r6, r0
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d1e1      	bne.n	8009f1a <__ssputs_r+0x70>
 8009f56:	6921      	ldr	r1, [r4, #16]
 8009f58:	4650      	mov	r0, sl
 8009f5a:	f7fd fea9 	bl	8007cb0 <_free_r>
 8009f5e:	e7c7      	b.n	8009ef0 <__ssputs_r+0x46>

08009f60 <_svfiprintf_r>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	4698      	mov	r8, r3
 8009f66:	898b      	ldrh	r3, [r1, #12]
 8009f68:	061b      	lsls	r3, r3, #24
 8009f6a:	b09d      	sub	sp, #116	; 0x74
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	4614      	mov	r4, r2
 8009f72:	d50e      	bpl.n	8009f92 <_svfiprintf_r+0x32>
 8009f74:	690b      	ldr	r3, [r1, #16]
 8009f76:	b963      	cbnz	r3, 8009f92 <_svfiprintf_r+0x32>
 8009f78:	2140      	movs	r1, #64	; 0x40
 8009f7a:	f7fd fee9 	bl	8007d50 <_malloc_r>
 8009f7e:	6028      	str	r0, [r5, #0]
 8009f80:	6128      	str	r0, [r5, #16]
 8009f82:	b920      	cbnz	r0, 8009f8e <_svfiprintf_r+0x2e>
 8009f84:	230c      	movs	r3, #12
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f8c:	e0d1      	b.n	800a132 <_svfiprintf_r+0x1d2>
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	616b      	str	r3, [r5, #20]
 8009f92:	2300      	movs	r3, #0
 8009f94:	9309      	str	r3, [sp, #36]	; 0x24
 8009f96:	2320      	movs	r3, #32
 8009f98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa0:	2330      	movs	r3, #48	; 0x30
 8009fa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a14c <_svfiprintf_r+0x1ec>
 8009fa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009faa:	f04f 0901 	mov.w	r9, #1
 8009fae:	4623      	mov	r3, r4
 8009fb0:	469a      	mov	sl, r3
 8009fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb6:	b10a      	cbz	r2, 8009fbc <_svfiprintf_r+0x5c>
 8009fb8:	2a25      	cmp	r2, #37	; 0x25
 8009fba:	d1f9      	bne.n	8009fb0 <_svfiprintf_r+0x50>
 8009fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc0:	d00b      	beq.n	8009fda <_svfiprintf_r+0x7a>
 8009fc2:	465b      	mov	r3, fp
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f7ff ff6e 	bl	8009eaa <__ssputs_r>
 8009fce:	3001      	adds	r0, #1
 8009fd0:	f000 80aa 	beq.w	800a128 <_svfiprintf_r+0x1c8>
 8009fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd6:	445a      	add	r2, fp
 8009fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8009fda:	f89a 3000 	ldrb.w	r3, [sl]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 80a2 	beq.w	800a128 <_svfiprintf_r+0x1c8>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fee:	f10a 0a01 	add.w	sl, sl, #1
 8009ff2:	9304      	str	r3, [sp, #16]
 8009ff4:	9307      	str	r3, [sp, #28]
 8009ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8009ffc:	4654      	mov	r4, sl
 8009ffe:	2205      	movs	r2, #5
 800a000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a004:	4851      	ldr	r0, [pc, #324]	; (800a14c <_svfiprintf_r+0x1ec>)
 800a006:	f7f6 f8f3 	bl	80001f0 <memchr>
 800a00a:	9a04      	ldr	r2, [sp, #16]
 800a00c:	b9d8      	cbnz	r0, 800a046 <_svfiprintf_r+0xe6>
 800a00e:	06d0      	lsls	r0, r2, #27
 800a010:	bf44      	itt	mi
 800a012:	2320      	movmi	r3, #32
 800a014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a018:	0711      	lsls	r1, r2, #28
 800a01a:	bf44      	itt	mi
 800a01c:	232b      	movmi	r3, #43	; 0x2b
 800a01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a022:	f89a 3000 	ldrb.w	r3, [sl]
 800a026:	2b2a      	cmp	r3, #42	; 0x2a
 800a028:	d015      	beq.n	800a056 <_svfiprintf_r+0xf6>
 800a02a:	9a07      	ldr	r2, [sp, #28]
 800a02c:	4654      	mov	r4, sl
 800a02e:	2000      	movs	r0, #0
 800a030:	f04f 0c0a 	mov.w	ip, #10
 800a034:	4621      	mov	r1, r4
 800a036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a03a:	3b30      	subs	r3, #48	; 0x30
 800a03c:	2b09      	cmp	r3, #9
 800a03e:	d94e      	bls.n	800a0de <_svfiprintf_r+0x17e>
 800a040:	b1b0      	cbz	r0, 800a070 <_svfiprintf_r+0x110>
 800a042:	9207      	str	r2, [sp, #28]
 800a044:	e014      	b.n	800a070 <_svfiprintf_r+0x110>
 800a046:	eba0 0308 	sub.w	r3, r0, r8
 800a04a:	fa09 f303 	lsl.w	r3, r9, r3
 800a04e:	4313      	orrs	r3, r2
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	46a2      	mov	sl, r4
 800a054:	e7d2      	b.n	8009ffc <_svfiprintf_r+0x9c>
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	1d19      	adds	r1, r3, #4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	9103      	str	r1, [sp, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bfbb      	ittet	lt
 800a062:	425b      	neglt	r3, r3
 800a064:	f042 0202 	orrlt.w	r2, r2, #2
 800a068:	9307      	strge	r3, [sp, #28]
 800a06a:	9307      	strlt	r3, [sp, #28]
 800a06c:	bfb8      	it	lt
 800a06e:	9204      	strlt	r2, [sp, #16]
 800a070:	7823      	ldrb	r3, [r4, #0]
 800a072:	2b2e      	cmp	r3, #46	; 0x2e
 800a074:	d10c      	bne.n	800a090 <_svfiprintf_r+0x130>
 800a076:	7863      	ldrb	r3, [r4, #1]
 800a078:	2b2a      	cmp	r3, #42	; 0x2a
 800a07a:	d135      	bne.n	800a0e8 <_svfiprintf_r+0x188>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	1d1a      	adds	r2, r3, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	9203      	str	r2, [sp, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	bfb8      	it	lt
 800a088:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a08c:	3402      	adds	r4, #2
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a15c <_svfiprintf_r+0x1fc>
 800a094:	7821      	ldrb	r1, [r4, #0]
 800a096:	2203      	movs	r2, #3
 800a098:	4650      	mov	r0, sl
 800a09a:	f7f6 f8a9 	bl	80001f0 <memchr>
 800a09e:	b140      	cbz	r0, 800a0b2 <_svfiprintf_r+0x152>
 800a0a0:	2340      	movs	r3, #64	; 0x40
 800a0a2:	eba0 000a 	sub.w	r0, r0, sl
 800a0a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a0aa:	9b04      	ldr	r3, [sp, #16]
 800a0ac:	4303      	orrs	r3, r0
 800a0ae:	3401      	adds	r4, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4826      	ldr	r0, [pc, #152]	; (800a150 <_svfiprintf_r+0x1f0>)
 800a0b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0bc:	2206      	movs	r2, #6
 800a0be:	f7f6 f897 	bl	80001f0 <memchr>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d038      	beq.n	800a138 <_svfiprintf_r+0x1d8>
 800a0c6:	4b23      	ldr	r3, [pc, #140]	; (800a154 <_svfiprintf_r+0x1f4>)
 800a0c8:	bb1b      	cbnz	r3, 800a112 <_svfiprintf_r+0x1b2>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	3307      	adds	r3, #7
 800a0ce:	f023 0307 	bic.w	r3, r3, #7
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d8:	4433      	add	r3, r6
 800a0da:	9309      	str	r3, [sp, #36]	; 0x24
 800a0dc:	e767      	b.n	8009fae <_svfiprintf_r+0x4e>
 800a0de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	e7a5      	b.n	800a034 <_svfiprintf_r+0xd4>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	3401      	adds	r4, #1
 800a0ec:	9305      	str	r3, [sp, #20]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fa:	3a30      	subs	r2, #48	; 0x30
 800a0fc:	2a09      	cmp	r2, #9
 800a0fe:	d903      	bls.n	800a108 <_svfiprintf_r+0x1a8>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0c5      	beq.n	800a090 <_svfiprintf_r+0x130>
 800a104:	9105      	str	r1, [sp, #20]
 800a106:	e7c3      	b.n	800a090 <_svfiprintf_r+0x130>
 800a108:	fb0c 2101 	mla	r1, ip, r1, r2
 800a10c:	4604      	mov	r4, r0
 800a10e:	2301      	movs	r3, #1
 800a110:	e7f0      	b.n	800a0f4 <_svfiprintf_r+0x194>
 800a112:	ab03      	add	r3, sp, #12
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	462a      	mov	r2, r5
 800a118:	4b0f      	ldr	r3, [pc, #60]	; (800a158 <_svfiprintf_r+0x1f8>)
 800a11a:	a904      	add	r1, sp, #16
 800a11c:	4638      	mov	r0, r7
 800a11e:	f7fd ff11 	bl	8007f44 <_printf_float>
 800a122:	1c42      	adds	r2, r0, #1
 800a124:	4606      	mov	r6, r0
 800a126:	d1d6      	bne.n	800a0d6 <_svfiprintf_r+0x176>
 800a128:	89ab      	ldrh	r3, [r5, #12]
 800a12a:	065b      	lsls	r3, r3, #25
 800a12c:	f53f af2c 	bmi.w	8009f88 <_svfiprintf_r+0x28>
 800a130:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a132:	b01d      	add	sp, #116	; 0x74
 800a134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a138:	ab03      	add	r3, sp, #12
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	462a      	mov	r2, r5
 800a13e:	4b06      	ldr	r3, [pc, #24]	; (800a158 <_svfiprintf_r+0x1f8>)
 800a140:	a904      	add	r1, sp, #16
 800a142:	4638      	mov	r0, r7
 800a144:	f7fe f9a2 	bl	800848c <_printf_i>
 800a148:	e7eb      	b.n	800a122 <_svfiprintf_r+0x1c2>
 800a14a:	bf00      	nop
 800a14c:	0800ac84 	.word	0x0800ac84
 800a150:	0800ac8e 	.word	0x0800ac8e
 800a154:	08007f45 	.word	0x08007f45
 800a158:	08009eab 	.word	0x08009eab
 800a15c:	0800ac8a 	.word	0x0800ac8a

0800a160 <_read_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d07      	ldr	r5, [pc, #28]	; (800a180 <_read_r+0x20>)
 800a164:	4604      	mov	r4, r0
 800a166:	4608      	mov	r0, r1
 800a168:	4611      	mov	r1, r2
 800a16a:	2200      	movs	r2, #0
 800a16c:	602a      	str	r2, [r5, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	f7f7 fae8 	bl	8001744 <_read>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d102      	bne.n	800a17e <_read_r+0x1e>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	b103      	cbz	r3, 800a17e <_read_r+0x1e>
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	20004e88 	.word	0x20004e88

0800a184 <__assert_func>:
 800a184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a186:	4614      	mov	r4, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <__assert_func+0x2c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4605      	mov	r5, r0
 800a190:	68d8      	ldr	r0, [r3, #12]
 800a192:	b14c      	cbz	r4, 800a1a8 <__assert_func+0x24>
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <__assert_func+0x30>)
 800a196:	9100      	str	r1, [sp, #0]
 800a198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a19c:	4906      	ldr	r1, [pc, #24]	; (800a1b8 <__assert_func+0x34>)
 800a19e:	462b      	mov	r3, r5
 800a1a0:	f000 f80e 	bl	800a1c0 <fiprintf>
 800a1a4:	f000 fa98 	bl	800a6d8 <abort>
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <__assert_func+0x38>)
 800a1aa:	461c      	mov	r4, r3
 800a1ac:	e7f3      	b.n	800a196 <__assert_func+0x12>
 800a1ae:	bf00      	nop
 800a1b0:	20000010 	.word	0x20000010
 800a1b4:	0800ac95 	.word	0x0800ac95
 800a1b8:	0800aca2 	.word	0x0800aca2
 800a1bc:	0800acd0 	.word	0x0800acd0

0800a1c0 <fiprintf>:
 800a1c0:	b40e      	push	{r1, r2, r3}
 800a1c2:	b503      	push	{r0, r1, lr}
 800a1c4:	4601      	mov	r1, r0
 800a1c6:	ab03      	add	r3, sp, #12
 800a1c8:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <fiprintf+0x20>)
 800a1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ce:	6800      	ldr	r0, [r0, #0]
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	f000 f883 	bl	800a2dc <_vfiprintf_r>
 800a1d6:	b002      	add	sp, #8
 800a1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1dc:	b003      	add	sp, #12
 800a1de:	4770      	bx	lr
 800a1e0:	20000010 	.word	0x20000010

0800a1e4 <__ascii_mbtowc>:
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	b901      	cbnz	r1, 800a1ea <__ascii_mbtowc+0x6>
 800a1e8:	a901      	add	r1, sp, #4
 800a1ea:	b142      	cbz	r2, 800a1fe <__ascii_mbtowc+0x1a>
 800a1ec:	b14b      	cbz	r3, 800a202 <__ascii_mbtowc+0x1e>
 800a1ee:	7813      	ldrb	r3, [r2, #0]
 800a1f0:	600b      	str	r3, [r1, #0]
 800a1f2:	7812      	ldrb	r2, [r2, #0]
 800a1f4:	1e10      	subs	r0, r2, #0
 800a1f6:	bf18      	it	ne
 800a1f8:	2001      	movne	r0, #1
 800a1fa:	b002      	add	sp, #8
 800a1fc:	4770      	bx	lr
 800a1fe:	4610      	mov	r0, r2
 800a200:	e7fb      	b.n	800a1fa <__ascii_mbtowc+0x16>
 800a202:	f06f 0001 	mvn.w	r0, #1
 800a206:	e7f8      	b.n	800a1fa <__ascii_mbtowc+0x16>

0800a208 <memmove>:
 800a208:	4288      	cmp	r0, r1
 800a20a:	b510      	push	{r4, lr}
 800a20c:	eb01 0402 	add.w	r4, r1, r2
 800a210:	d902      	bls.n	800a218 <memmove+0x10>
 800a212:	4284      	cmp	r4, r0
 800a214:	4623      	mov	r3, r4
 800a216:	d807      	bhi.n	800a228 <memmove+0x20>
 800a218:	1e43      	subs	r3, r0, #1
 800a21a:	42a1      	cmp	r1, r4
 800a21c:	d008      	beq.n	800a230 <memmove+0x28>
 800a21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a222:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a226:	e7f8      	b.n	800a21a <memmove+0x12>
 800a228:	4402      	add	r2, r0
 800a22a:	4601      	mov	r1, r0
 800a22c:	428a      	cmp	r2, r1
 800a22e:	d100      	bne.n	800a232 <memmove+0x2a>
 800a230:	bd10      	pop	{r4, pc}
 800a232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a23a:	e7f7      	b.n	800a22c <memmove+0x24>

0800a23c <_realloc_r>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	4607      	mov	r7, r0
 800a240:	4614      	mov	r4, r2
 800a242:	460e      	mov	r6, r1
 800a244:	b921      	cbnz	r1, 800a250 <_realloc_r+0x14>
 800a246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a24a:	4611      	mov	r1, r2
 800a24c:	f7fd bd80 	b.w	8007d50 <_malloc_r>
 800a250:	b922      	cbnz	r2, 800a25c <_realloc_r+0x20>
 800a252:	f7fd fd2d 	bl	8007cb0 <_free_r>
 800a256:	4625      	mov	r5, r4
 800a258:	4628      	mov	r0, r5
 800a25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a25c:	f000 faa8 	bl	800a7b0 <_malloc_usable_size_r>
 800a260:	42a0      	cmp	r0, r4
 800a262:	d20f      	bcs.n	800a284 <_realloc_r+0x48>
 800a264:	4621      	mov	r1, r4
 800a266:	4638      	mov	r0, r7
 800a268:	f7fd fd72 	bl	8007d50 <_malloc_r>
 800a26c:	4605      	mov	r5, r0
 800a26e:	2800      	cmp	r0, #0
 800a270:	d0f2      	beq.n	800a258 <_realloc_r+0x1c>
 800a272:	4631      	mov	r1, r6
 800a274:	4622      	mov	r2, r4
 800a276:	f7fd fd05 	bl	8007c84 <memcpy>
 800a27a:	4631      	mov	r1, r6
 800a27c:	4638      	mov	r0, r7
 800a27e:	f7fd fd17 	bl	8007cb0 <_free_r>
 800a282:	e7e9      	b.n	800a258 <_realloc_r+0x1c>
 800a284:	4635      	mov	r5, r6
 800a286:	e7e7      	b.n	800a258 <_realloc_r+0x1c>

0800a288 <__sfputc_r>:
 800a288:	6893      	ldr	r3, [r2, #8]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	b410      	push	{r4}
 800a290:	6093      	str	r3, [r2, #8]
 800a292:	da08      	bge.n	800a2a6 <__sfputc_r+0x1e>
 800a294:	6994      	ldr	r4, [r2, #24]
 800a296:	42a3      	cmp	r3, r4
 800a298:	db01      	blt.n	800a29e <__sfputc_r+0x16>
 800a29a:	290a      	cmp	r1, #10
 800a29c:	d103      	bne.n	800a2a6 <__sfputc_r+0x1e>
 800a29e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a2:	f000 b94b 	b.w	800a53c <__swbuf_r>
 800a2a6:	6813      	ldr	r3, [r2, #0]
 800a2a8:	1c58      	adds	r0, r3, #1
 800a2aa:	6010      	str	r0, [r2, #0]
 800a2ac:	7019      	strb	r1, [r3, #0]
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <__sfputs_r>:
 800a2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	460f      	mov	r7, r1
 800a2bc:	4614      	mov	r4, r2
 800a2be:	18d5      	adds	r5, r2, r3
 800a2c0:	42ac      	cmp	r4, r5
 800a2c2:	d101      	bne.n	800a2c8 <__sfputs_r+0x12>
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	e007      	b.n	800a2d8 <__sfputs_r+0x22>
 800a2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2cc:	463a      	mov	r2, r7
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f7ff ffda 	bl	800a288 <__sfputc_r>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d1f3      	bne.n	800a2c0 <__sfputs_r+0xa>
 800a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2dc <_vfiprintf_r>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	b09d      	sub	sp, #116	; 0x74
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	4698      	mov	r8, r3
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	b118      	cbz	r0, 800a2f4 <_vfiprintf_r+0x18>
 800a2ec:	6983      	ldr	r3, [r0, #24]
 800a2ee:	b90b      	cbnz	r3, 800a2f4 <_vfiprintf_r+0x18>
 800a2f0:	f7fd fbfa 	bl	8007ae8 <__sinit>
 800a2f4:	4b89      	ldr	r3, [pc, #548]	; (800a51c <_vfiprintf_r+0x240>)
 800a2f6:	429d      	cmp	r5, r3
 800a2f8:	d11b      	bne.n	800a332 <_vfiprintf_r+0x56>
 800a2fa:	6875      	ldr	r5, [r6, #4]
 800a2fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fe:	07d9      	lsls	r1, r3, #31
 800a300:	d405      	bmi.n	800a30e <_vfiprintf_r+0x32>
 800a302:	89ab      	ldrh	r3, [r5, #12]
 800a304:	059a      	lsls	r2, r3, #22
 800a306:	d402      	bmi.n	800a30e <_vfiprintf_r+0x32>
 800a308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30a:	f7fd fcb0 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800a30e:	89ab      	ldrh	r3, [r5, #12]
 800a310:	071b      	lsls	r3, r3, #28
 800a312:	d501      	bpl.n	800a318 <_vfiprintf_r+0x3c>
 800a314:	692b      	ldr	r3, [r5, #16]
 800a316:	b9eb      	cbnz	r3, 800a354 <_vfiprintf_r+0x78>
 800a318:	4629      	mov	r1, r5
 800a31a:	4630      	mov	r0, r6
 800a31c:	f000 f96e 	bl	800a5fc <__swsetup_r>
 800a320:	b1c0      	cbz	r0, 800a354 <_vfiprintf_r+0x78>
 800a322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a324:	07dc      	lsls	r4, r3, #31
 800a326:	d50e      	bpl.n	800a346 <_vfiprintf_r+0x6a>
 800a328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a32c:	b01d      	add	sp, #116	; 0x74
 800a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a332:	4b7b      	ldr	r3, [pc, #492]	; (800a520 <_vfiprintf_r+0x244>)
 800a334:	429d      	cmp	r5, r3
 800a336:	d101      	bne.n	800a33c <_vfiprintf_r+0x60>
 800a338:	68b5      	ldr	r5, [r6, #8]
 800a33a:	e7df      	b.n	800a2fc <_vfiprintf_r+0x20>
 800a33c:	4b79      	ldr	r3, [pc, #484]	; (800a524 <_vfiprintf_r+0x248>)
 800a33e:	429d      	cmp	r5, r3
 800a340:	bf08      	it	eq
 800a342:	68f5      	ldreq	r5, [r6, #12]
 800a344:	e7da      	b.n	800a2fc <_vfiprintf_r+0x20>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	0598      	lsls	r0, r3, #22
 800a34a:	d4ed      	bmi.n	800a328 <_vfiprintf_r+0x4c>
 800a34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34e:	f7fd fc8f 	bl	8007c70 <__retarget_lock_release_recursive>
 800a352:	e7e9      	b.n	800a328 <_vfiprintf_r+0x4c>
 800a354:	2300      	movs	r3, #0
 800a356:	9309      	str	r3, [sp, #36]	; 0x24
 800a358:	2320      	movs	r3, #32
 800a35a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a35e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a362:	2330      	movs	r3, #48	; 0x30
 800a364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a528 <_vfiprintf_r+0x24c>
 800a368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a36c:	f04f 0901 	mov.w	r9, #1
 800a370:	4623      	mov	r3, r4
 800a372:	469a      	mov	sl, r3
 800a374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a378:	b10a      	cbz	r2, 800a37e <_vfiprintf_r+0xa2>
 800a37a:	2a25      	cmp	r2, #37	; 0x25
 800a37c:	d1f9      	bne.n	800a372 <_vfiprintf_r+0x96>
 800a37e:	ebba 0b04 	subs.w	fp, sl, r4
 800a382:	d00b      	beq.n	800a39c <_vfiprintf_r+0xc0>
 800a384:	465b      	mov	r3, fp
 800a386:	4622      	mov	r2, r4
 800a388:	4629      	mov	r1, r5
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7ff ff93 	bl	800a2b6 <__sfputs_r>
 800a390:	3001      	adds	r0, #1
 800a392:	f000 80aa 	beq.w	800a4ea <_vfiprintf_r+0x20e>
 800a396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a398:	445a      	add	r2, fp
 800a39a:	9209      	str	r2, [sp, #36]	; 0x24
 800a39c:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 80a2 	beq.w	800a4ea <_vfiprintf_r+0x20e>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3b0:	f10a 0a01 	add.w	sl, sl, #1
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	9307      	str	r3, [sp, #28]
 800a3b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2205      	movs	r2, #5
 800a3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c6:	4858      	ldr	r0, [pc, #352]	; (800a528 <_vfiprintf_r+0x24c>)
 800a3c8:	f7f5 ff12 	bl	80001f0 <memchr>
 800a3cc:	9a04      	ldr	r2, [sp, #16]
 800a3ce:	b9d8      	cbnz	r0, 800a408 <_vfiprintf_r+0x12c>
 800a3d0:	06d1      	lsls	r1, r2, #27
 800a3d2:	bf44      	itt	mi
 800a3d4:	2320      	movmi	r3, #32
 800a3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3da:	0713      	lsls	r3, r2, #28
 800a3dc:	bf44      	itt	mi
 800a3de:	232b      	movmi	r3, #43	; 0x2b
 800a3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ea:	d015      	beq.n	800a418 <_vfiprintf_r+0x13c>
 800a3ec:	9a07      	ldr	r2, [sp, #28]
 800a3ee:	4654      	mov	r4, sl
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	f04f 0c0a 	mov.w	ip, #10
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3fc:	3b30      	subs	r3, #48	; 0x30
 800a3fe:	2b09      	cmp	r3, #9
 800a400:	d94e      	bls.n	800a4a0 <_vfiprintf_r+0x1c4>
 800a402:	b1b0      	cbz	r0, 800a432 <_vfiprintf_r+0x156>
 800a404:	9207      	str	r2, [sp, #28]
 800a406:	e014      	b.n	800a432 <_vfiprintf_r+0x156>
 800a408:	eba0 0308 	sub.w	r3, r0, r8
 800a40c:	fa09 f303 	lsl.w	r3, r9, r3
 800a410:	4313      	orrs	r3, r2
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	46a2      	mov	sl, r4
 800a416:	e7d2      	b.n	800a3be <_vfiprintf_r+0xe2>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	1d19      	adds	r1, r3, #4
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	9103      	str	r1, [sp, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	bfbb      	ittet	lt
 800a424:	425b      	neglt	r3, r3
 800a426:	f042 0202 	orrlt.w	r2, r2, #2
 800a42a:	9307      	strge	r3, [sp, #28]
 800a42c:	9307      	strlt	r3, [sp, #28]
 800a42e:	bfb8      	it	lt
 800a430:	9204      	strlt	r2, [sp, #16]
 800a432:	7823      	ldrb	r3, [r4, #0]
 800a434:	2b2e      	cmp	r3, #46	; 0x2e
 800a436:	d10c      	bne.n	800a452 <_vfiprintf_r+0x176>
 800a438:	7863      	ldrb	r3, [r4, #1]
 800a43a:	2b2a      	cmp	r3, #42	; 0x2a
 800a43c:	d135      	bne.n	800a4aa <_vfiprintf_r+0x1ce>
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	1d1a      	adds	r2, r3, #4
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	9203      	str	r2, [sp, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	bfb8      	it	lt
 800a44a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a44e:	3402      	adds	r4, #2
 800a450:	9305      	str	r3, [sp, #20]
 800a452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a538 <_vfiprintf_r+0x25c>
 800a456:	7821      	ldrb	r1, [r4, #0]
 800a458:	2203      	movs	r2, #3
 800a45a:	4650      	mov	r0, sl
 800a45c:	f7f5 fec8 	bl	80001f0 <memchr>
 800a460:	b140      	cbz	r0, 800a474 <_vfiprintf_r+0x198>
 800a462:	2340      	movs	r3, #64	; 0x40
 800a464:	eba0 000a 	sub.w	r0, r0, sl
 800a468:	fa03 f000 	lsl.w	r0, r3, r0
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	4303      	orrs	r3, r0
 800a470:	3401      	adds	r4, #1
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a478:	482c      	ldr	r0, [pc, #176]	; (800a52c <_vfiprintf_r+0x250>)
 800a47a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a47e:	2206      	movs	r2, #6
 800a480:	f7f5 feb6 	bl	80001f0 <memchr>
 800a484:	2800      	cmp	r0, #0
 800a486:	d03f      	beq.n	800a508 <_vfiprintf_r+0x22c>
 800a488:	4b29      	ldr	r3, [pc, #164]	; (800a530 <_vfiprintf_r+0x254>)
 800a48a:	bb1b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x1f8>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	3307      	adds	r3, #7
 800a490:	f023 0307 	bic.w	r3, r3, #7
 800a494:	3308      	adds	r3, #8
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49a:	443b      	add	r3, r7
 800a49c:	9309      	str	r3, [sp, #36]	; 0x24
 800a49e:	e767      	b.n	800a370 <_vfiprintf_r+0x94>
 800a4a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	2001      	movs	r0, #1
 800a4a8:	e7a5      	b.n	800a3f6 <_vfiprintf_r+0x11a>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	3401      	adds	r4, #1
 800a4ae:	9305      	str	r3, [sp, #20]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	f04f 0c0a 	mov.w	ip, #10
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4bc:	3a30      	subs	r2, #48	; 0x30
 800a4be:	2a09      	cmp	r2, #9
 800a4c0:	d903      	bls.n	800a4ca <_vfiprintf_r+0x1ee>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0c5      	beq.n	800a452 <_vfiprintf_r+0x176>
 800a4c6:	9105      	str	r1, [sp, #20]
 800a4c8:	e7c3      	b.n	800a452 <_vfiprintf_r+0x176>
 800a4ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e7f0      	b.n	800a4b6 <_vfiprintf_r+0x1da>
 800a4d4:	ab03      	add	r3, sp, #12
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	462a      	mov	r2, r5
 800a4da:	4b16      	ldr	r3, [pc, #88]	; (800a534 <_vfiprintf_r+0x258>)
 800a4dc:	a904      	add	r1, sp, #16
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7fd fd30 	bl	8007f44 <_printf_float>
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	1c78      	adds	r0, r7, #1
 800a4e8:	d1d6      	bne.n	800a498 <_vfiprintf_r+0x1bc>
 800a4ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4ec:	07d9      	lsls	r1, r3, #31
 800a4ee:	d405      	bmi.n	800a4fc <_vfiprintf_r+0x220>
 800a4f0:	89ab      	ldrh	r3, [r5, #12]
 800a4f2:	059a      	lsls	r2, r3, #22
 800a4f4:	d402      	bmi.n	800a4fc <_vfiprintf_r+0x220>
 800a4f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f8:	f7fd fbba 	bl	8007c70 <__retarget_lock_release_recursive>
 800a4fc:	89ab      	ldrh	r3, [r5, #12]
 800a4fe:	065b      	lsls	r3, r3, #25
 800a500:	f53f af12 	bmi.w	800a328 <_vfiprintf_r+0x4c>
 800a504:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a506:	e711      	b.n	800a32c <_vfiprintf_r+0x50>
 800a508:	ab03      	add	r3, sp, #12
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	462a      	mov	r2, r5
 800a50e:	4b09      	ldr	r3, [pc, #36]	; (800a534 <_vfiprintf_r+0x258>)
 800a510:	a904      	add	r1, sp, #16
 800a512:	4630      	mov	r0, r6
 800a514:	f7fd ffba 	bl	800848c <_printf_i>
 800a518:	e7e4      	b.n	800a4e4 <_vfiprintf_r+0x208>
 800a51a:	bf00      	nop
 800a51c:	0800aa1c 	.word	0x0800aa1c
 800a520:	0800aa3c 	.word	0x0800aa3c
 800a524:	0800a9fc 	.word	0x0800a9fc
 800a528:	0800ac84 	.word	0x0800ac84
 800a52c:	0800ac8e 	.word	0x0800ac8e
 800a530:	08007f45 	.word	0x08007f45
 800a534:	0800a2b7 	.word	0x0800a2b7
 800a538:	0800ac8a 	.word	0x0800ac8a

0800a53c <__swbuf_r>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	460e      	mov	r6, r1
 800a540:	4614      	mov	r4, r2
 800a542:	4605      	mov	r5, r0
 800a544:	b118      	cbz	r0, 800a54e <__swbuf_r+0x12>
 800a546:	6983      	ldr	r3, [r0, #24]
 800a548:	b90b      	cbnz	r3, 800a54e <__swbuf_r+0x12>
 800a54a:	f7fd facd 	bl	8007ae8 <__sinit>
 800a54e:	4b21      	ldr	r3, [pc, #132]	; (800a5d4 <__swbuf_r+0x98>)
 800a550:	429c      	cmp	r4, r3
 800a552:	d12b      	bne.n	800a5ac <__swbuf_r+0x70>
 800a554:	686c      	ldr	r4, [r5, #4]
 800a556:	69a3      	ldr	r3, [r4, #24]
 800a558:	60a3      	str	r3, [r4, #8]
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	071a      	lsls	r2, r3, #28
 800a55e:	d52f      	bpl.n	800a5c0 <__swbuf_r+0x84>
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	b36b      	cbz	r3, 800a5c0 <__swbuf_r+0x84>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	6820      	ldr	r0, [r4, #0]
 800a568:	1ac0      	subs	r0, r0, r3
 800a56a:	6963      	ldr	r3, [r4, #20]
 800a56c:	b2f6      	uxtb	r6, r6
 800a56e:	4283      	cmp	r3, r0
 800a570:	4637      	mov	r7, r6
 800a572:	dc04      	bgt.n	800a57e <__swbuf_r+0x42>
 800a574:	4621      	mov	r1, r4
 800a576:	4628      	mov	r0, r5
 800a578:	f7ff f8ac 	bl	80096d4 <_fflush_r>
 800a57c:	bb30      	cbnz	r0, 800a5cc <__swbuf_r+0x90>
 800a57e:	68a3      	ldr	r3, [r4, #8]
 800a580:	3b01      	subs	r3, #1
 800a582:	60a3      	str	r3, [r4, #8]
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6022      	str	r2, [r4, #0]
 800a58a:	701e      	strb	r6, [r3, #0]
 800a58c:	6963      	ldr	r3, [r4, #20]
 800a58e:	3001      	adds	r0, #1
 800a590:	4283      	cmp	r3, r0
 800a592:	d004      	beq.n	800a59e <__swbuf_r+0x62>
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	07db      	lsls	r3, r3, #31
 800a598:	d506      	bpl.n	800a5a8 <__swbuf_r+0x6c>
 800a59a:	2e0a      	cmp	r6, #10
 800a59c:	d104      	bne.n	800a5a8 <__swbuf_r+0x6c>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f7ff f897 	bl	80096d4 <_fflush_r>
 800a5a6:	b988      	cbnz	r0, 800a5cc <__swbuf_r+0x90>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <__swbuf_r+0x9c>)
 800a5ae:	429c      	cmp	r4, r3
 800a5b0:	d101      	bne.n	800a5b6 <__swbuf_r+0x7a>
 800a5b2:	68ac      	ldr	r4, [r5, #8]
 800a5b4:	e7cf      	b.n	800a556 <__swbuf_r+0x1a>
 800a5b6:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <__swbuf_r+0xa0>)
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	bf08      	it	eq
 800a5bc:	68ec      	ldreq	r4, [r5, #12]
 800a5be:	e7ca      	b.n	800a556 <__swbuf_r+0x1a>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 f81a 	bl	800a5fc <__swsetup_r>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d0cb      	beq.n	800a564 <__swbuf_r+0x28>
 800a5cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5d0:	e7ea      	b.n	800a5a8 <__swbuf_r+0x6c>
 800a5d2:	bf00      	nop
 800a5d4:	0800aa1c 	.word	0x0800aa1c
 800a5d8:	0800aa3c 	.word	0x0800aa3c
 800a5dc:	0800a9fc 	.word	0x0800a9fc

0800a5e0 <__ascii_wctomb>:
 800a5e0:	b149      	cbz	r1, 800a5f6 <__ascii_wctomb+0x16>
 800a5e2:	2aff      	cmp	r2, #255	; 0xff
 800a5e4:	bf85      	ittet	hi
 800a5e6:	238a      	movhi	r3, #138	; 0x8a
 800a5e8:	6003      	strhi	r3, [r0, #0]
 800a5ea:	700a      	strbls	r2, [r1, #0]
 800a5ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a5f0:	bf98      	it	ls
 800a5f2:	2001      	movls	r0, #1
 800a5f4:	4770      	bx	lr
 800a5f6:	4608      	mov	r0, r1
 800a5f8:	4770      	bx	lr
	...

0800a5fc <__swsetup_r>:
 800a5fc:	4b32      	ldr	r3, [pc, #200]	; (800a6c8 <__swsetup_r+0xcc>)
 800a5fe:	b570      	push	{r4, r5, r6, lr}
 800a600:	681d      	ldr	r5, [r3, #0]
 800a602:	4606      	mov	r6, r0
 800a604:	460c      	mov	r4, r1
 800a606:	b125      	cbz	r5, 800a612 <__swsetup_r+0x16>
 800a608:	69ab      	ldr	r3, [r5, #24]
 800a60a:	b913      	cbnz	r3, 800a612 <__swsetup_r+0x16>
 800a60c:	4628      	mov	r0, r5
 800a60e:	f7fd fa6b 	bl	8007ae8 <__sinit>
 800a612:	4b2e      	ldr	r3, [pc, #184]	; (800a6cc <__swsetup_r+0xd0>)
 800a614:	429c      	cmp	r4, r3
 800a616:	d10f      	bne.n	800a638 <__swsetup_r+0x3c>
 800a618:	686c      	ldr	r4, [r5, #4]
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a620:	0719      	lsls	r1, r3, #28
 800a622:	d42c      	bmi.n	800a67e <__swsetup_r+0x82>
 800a624:	06dd      	lsls	r5, r3, #27
 800a626:	d411      	bmi.n	800a64c <__swsetup_r+0x50>
 800a628:	2309      	movs	r3, #9
 800a62a:	6033      	str	r3, [r6, #0]
 800a62c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a636:	e03e      	b.n	800a6b6 <__swsetup_r+0xba>
 800a638:	4b25      	ldr	r3, [pc, #148]	; (800a6d0 <__swsetup_r+0xd4>)
 800a63a:	429c      	cmp	r4, r3
 800a63c:	d101      	bne.n	800a642 <__swsetup_r+0x46>
 800a63e:	68ac      	ldr	r4, [r5, #8]
 800a640:	e7eb      	b.n	800a61a <__swsetup_r+0x1e>
 800a642:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <__swsetup_r+0xd8>)
 800a644:	429c      	cmp	r4, r3
 800a646:	bf08      	it	eq
 800a648:	68ec      	ldreq	r4, [r5, #12]
 800a64a:	e7e6      	b.n	800a61a <__swsetup_r+0x1e>
 800a64c:	0758      	lsls	r0, r3, #29
 800a64e:	d512      	bpl.n	800a676 <__swsetup_r+0x7a>
 800a650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a652:	b141      	cbz	r1, 800a666 <__swsetup_r+0x6a>
 800a654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a658:	4299      	cmp	r1, r3
 800a65a:	d002      	beq.n	800a662 <__swsetup_r+0x66>
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7fd fb27 	bl	8007cb0 <_free_r>
 800a662:	2300      	movs	r3, #0
 800a664:	6363      	str	r3, [r4, #52]	; 0x34
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	2300      	movs	r3, #0
 800a670:	6063      	str	r3, [r4, #4]
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	f043 0308 	orr.w	r3, r3, #8
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	6923      	ldr	r3, [r4, #16]
 800a680:	b94b      	cbnz	r3, 800a696 <__swsetup_r+0x9a>
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a68c:	d003      	beq.n	800a696 <__swsetup_r+0x9a>
 800a68e:	4621      	mov	r1, r4
 800a690:	4630      	mov	r0, r6
 800a692:	f000 f84d 	bl	800a730 <__smakebuf_r>
 800a696:	89a0      	ldrh	r0, [r4, #12]
 800a698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a69c:	f010 0301 	ands.w	r3, r0, #1
 800a6a0:	d00a      	beq.n	800a6b8 <__swsetup_r+0xbc>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60a3      	str	r3, [r4, #8]
 800a6a6:	6963      	ldr	r3, [r4, #20]
 800a6a8:	425b      	negs	r3, r3
 800a6aa:	61a3      	str	r3, [r4, #24]
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	b943      	cbnz	r3, 800a6c2 <__swsetup_r+0xc6>
 800a6b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6b4:	d1ba      	bne.n	800a62c <__swsetup_r+0x30>
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	0781      	lsls	r1, r0, #30
 800a6ba:	bf58      	it	pl
 800a6bc:	6963      	ldrpl	r3, [r4, #20]
 800a6be:	60a3      	str	r3, [r4, #8]
 800a6c0:	e7f4      	b.n	800a6ac <__swsetup_r+0xb0>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	e7f7      	b.n	800a6b6 <__swsetup_r+0xba>
 800a6c6:	bf00      	nop
 800a6c8:	20000010 	.word	0x20000010
 800a6cc:	0800aa1c 	.word	0x0800aa1c
 800a6d0:	0800aa3c 	.word	0x0800aa3c
 800a6d4:	0800a9fc 	.word	0x0800a9fc

0800a6d8 <abort>:
 800a6d8:	b508      	push	{r3, lr}
 800a6da:	2006      	movs	r0, #6
 800a6dc:	f000 f898 	bl	800a810 <raise>
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	f7f7 f825 	bl	8001730 <_exit>

0800a6e6 <__swhatbuf_r>:
 800a6e6:	b570      	push	{r4, r5, r6, lr}
 800a6e8:	460e      	mov	r6, r1
 800a6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ee:	2900      	cmp	r1, #0
 800a6f0:	b096      	sub	sp, #88	; 0x58
 800a6f2:	4614      	mov	r4, r2
 800a6f4:	461d      	mov	r5, r3
 800a6f6:	da07      	bge.n	800a708 <__swhatbuf_r+0x22>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	89b3      	ldrh	r3, [r6, #12]
 800a6fe:	061a      	lsls	r2, r3, #24
 800a700:	d410      	bmi.n	800a724 <__swhatbuf_r+0x3e>
 800a702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a706:	e00e      	b.n	800a726 <__swhatbuf_r+0x40>
 800a708:	466a      	mov	r2, sp
 800a70a:	f000 f89d 	bl	800a848 <_fstat_r>
 800a70e:	2800      	cmp	r0, #0
 800a710:	dbf2      	blt.n	800a6f8 <__swhatbuf_r+0x12>
 800a712:	9a01      	ldr	r2, [sp, #4]
 800a714:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a718:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a71c:	425a      	negs	r2, r3
 800a71e:	415a      	adcs	r2, r3
 800a720:	602a      	str	r2, [r5, #0]
 800a722:	e7ee      	b.n	800a702 <__swhatbuf_r+0x1c>
 800a724:	2340      	movs	r3, #64	; 0x40
 800a726:	2000      	movs	r0, #0
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	b016      	add	sp, #88	; 0x58
 800a72c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a730 <__smakebuf_r>:
 800a730:	898b      	ldrh	r3, [r1, #12]
 800a732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a734:	079d      	lsls	r5, r3, #30
 800a736:	4606      	mov	r6, r0
 800a738:	460c      	mov	r4, r1
 800a73a:	d507      	bpl.n	800a74c <__smakebuf_r+0x1c>
 800a73c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	6123      	str	r3, [r4, #16]
 800a744:	2301      	movs	r3, #1
 800a746:	6163      	str	r3, [r4, #20]
 800a748:	b002      	add	sp, #8
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	ab01      	add	r3, sp, #4
 800a74e:	466a      	mov	r2, sp
 800a750:	f7ff ffc9 	bl	800a6e6 <__swhatbuf_r>
 800a754:	9900      	ldr	r1, [sp, #0]
 800a756:	4605      	mov	r5, r0
 800a758:	4630      	mov	r0, r6
 800a75a:	f7fd faf9 	bl	8007d50 <_malloc_r>
 800a75e:	b948      	cbnz	r0, 800a774 <__smakebuf_r+0x44>
 800a760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a764:	059a      	lsls	r2, r3, #22
 800a766:	d4ef      	bmi.n	800a748 <__smakebuf_r+0x18>
 800a768:	f023 0303 	bic.w	r3, r3, #3
 800a76c:	f043 0302 	orr.w	r3, r3, #2
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	e7e3      	b.n	800a73c <__smakebuf_r+0xc>
 800a774:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <__smakebuf_r+0x7c>)
 800a776:	62b3      	str	r3, [r6, #40]	; 0x28
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	6020      	str	r0, [r4, #0]
 800a77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a780:	81a3      	strh	r3, [r4, #12]
 800a782:	9b00      	ldr	r3, [sp, #0]
 800a784:	6163      	str	r3, [r4, #20]
 800a786:	9b01      	ldr	r3, [sp, #4]
 800a788:	6120      	str	r0, [r4, #16]
 800a78a:	b15b      	cbz	r3, 800a7a4 <__smakebuf_r+0x74>
 800a78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a790:	4630      	mov	r0, r6
 800a792:	f000 f86b 	bl	800a86c <_isatty_r>
 800a796:	b128      	cbz	r0, 800a7a4 <__smakebuf_r+0x74>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f023 0303 	bic.w	r3, r3, #3
 800a79e:	f043 0301 	orr.w	r3, r3, #1
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	89a0      	ldrh	r0, [r4, #12]
 800a7a6:	4305      	orrs	r5, r0
 800a7a8:	81a5      	strh	r5, [r4, #12]
 800a7aa:	e7cd      	b.n	800a748 <__smakebuf_r+0x18>
 800a7ac:	08007a81 	.word	0x08007a81

0800a7b0 <_malloc_usable_size_r>:
 800a7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7b4:	1f18      	subs	r0, r3, #4
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bfbc      	itt	lt
 800a7ba:	580b      	ldrlt	r3, [r1, r0]
 800a7bc:	18c0      	addlt	r0, r0, r3
 800a7be:	4770      	bx	lr

0800a7c0 <_raise_r>:
 800a7c0:	291f      	cmp	r1, #31
 800a7c2:	b538      	push	{r3, r4, r5, lr}
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	d904      	bls.n	800a7d4 <_raise_r+0x14>
 800a7ca:	2316      	movs	r3, #22
 800a7cc:	6003      	str	r3, [r0, #0]
 800a7ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7d6:	b112      	cbz	r2, 800a7de <_raise_r+0x1e>
 800a7d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7dc:	b94b      	cbnz	r3, 800a7f2 <_raise_r+0x32>
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 f830 	bl	800a844 <_getpid_r>
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ee:	f000 b817 	b.w	800a820 <_kill_r>
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d00a      	beq.n	800a80c <_raise_r+0x4c>
 800a7f6:	1c59      	adds	r1, r3, #1
 800a7f8:	d103      	bne.n	800a802 <_raise_r+0x42>
 800a7fa:	2316      	movs	r3, #22
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7e7      	b.n	800a7d2 <_raise_r+0x12>
 800a802:	2400      	movs	r4, #0
 800a804:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a808:	4628      	mov	r0, r5
 800a80a:	4798      	blx	r3
 800a80c:	2000      	movs	r0, #0
 800a80e:	e7e0      	b.n	800a7d2 <_raise_r+0x12>

0800a810 <raise>:
 800a810:	4b02      	ldr	r3, [pc, #8]	; (800a81c <raise+0xc>)
 800a812:	4601      	mov	r1, r0
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	f7ff bfd3 	b.w	800a7c0 <_raise_r>
 800a81a:	bf00      	nop
 800a81c:	20000010 	.word	0x20000010

0800a820 <_kill_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4d07      	ldr	r5, [pc, #28]	; (800a840 <_kill_r+0x20>)
 800a824:	2300      	movs	r3, #0
 800a826:	4604      	mov	r4, r0
 800a828:	4608      	mov	r0, r1
 800a82a:	4611      	mov	r1, r2
 800a82c:	602b      	str	r3, [r5, #0]
 800a82e:	f7f6 ff6f 	bl	8001710 <_kill>
 800a832:	1c43      	adds	r3, r0, #1
 800a834:	d102      	bne.n	800a83c <_kill_r+0x1c>
 800a836:	682b      	ldr	r3, [r5, #0]
 800a838:	b103      	cbz	r3, 800a83c <_kill_r+0x1c>
 800a83a:	6023      	str	r3, [r4, #0]
 800a83c:	bd38      	pop	{r3, r4, r5, pc}
 800a83e:	bf00      	nop
 800a840:	20004e88 	.word	0x20004e88

0800a844 <_getpid_r>:
 800a844:	f7f6 bf5c 	b.w	8001700 <_getpid>

0800a848 <_fstat_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4d07      	ldr	r5, [pc, #28]	; (800a868 <_fstat_r+0x20>)
 800a84c:	2300      	movs	r3, #0
 800a84e:	4604      	mov	r4, r0
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	f7f6 ffba 	bl	80017ce <_fstat>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	d102      	bne.n	800a864 <_fstat_r+0x1c>
 800a85e:	682b      	ldr	r3, [r5, #0]
 800a860:	b103      	cbz	r3, 800a864 <_fstat_r+0x1c>
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	bf00      	nop
 800a868:	20004e88 	.word	0x20004e88

0800a86c <_isatty_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4d06      	ldr	r5, [pc, #24]	; (800a888 <_isatty_r+0x1c>)
 800a870:	2300      	movs	r3, #0
 800a872:	4604      	mov	r4, r0
 800a874:	4608      	mov	r0, r1
 800a876:	602b      	str	r3, [r5, #0]
 800a878:	f7f6 ffb9 	bl	80017ee <_isatty>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d102      	bne.n	800a886 <_isatty_r+0x1a>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	b103      	cbz	r3, 800a886 <_isatty_r+0x1a>
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	20004e88 	.word	0x20004e88

0800a88c <_init>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	bf00      	nop
 800a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a892:	bc08      	pop	{r3}
 800a894:	469e      	mov	lr, r3
 800a896:	4770      	bx	lr

0800a898 <_fini>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr
