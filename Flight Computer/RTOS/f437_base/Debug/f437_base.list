
f437_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008834  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  080089e8  080089e8  000189e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f24  08008f24  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f2c  08008f2c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00005384  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005564  20005564  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cb51  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e8  00000000  00000000  0003cd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00040350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001350  00000000  00000000  000417c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000047e2  00000000  00000000  00042b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e9e  00000000  00000000  000472fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e59a7  00000000  00000000  0005d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142b3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067b4  00000000  00000000  00142b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080089cc 	.word	0x080089cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080089cc 	.word	0x080089cc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <myprintf>:
void StartSensor(void *argument);
void StartTelemetry(void *argument);
void StartEjection(void *argument);

/* USER CODE BEGIN PFP */
void myprintf(char *buffer) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, 100, 100);
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4803      	ldr	r0, [pc, #12]	; (8000edc <myprintf+0x1c>)
 8000ed0:	f001 fdc3 	bl	8002a5a <HAL_UART_Transmit>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20005480 	.word	0x20005480

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fb74 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f834 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f8bc 	bl	8001068 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ef0:	f000 f890 	bl	8001014 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ef4:	f002 f8be 	bl	8003074 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sensor */
  SensorHandle = osThreadNew(StartSensor, NULL, &Sensor_attributes);
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <main+0x50>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <main+0x54>)
 8000efe:	f002 f903 	bl	8003108 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <main+0x58>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry */
  TelemetryHandle = osThreadNew(StartTelemetry, NULL, &Telemetry_attributes);
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <main+0x5c>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <main+0x60>)
 8000f0e:	f002 f8fb 	bl	8003108 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <main+0x64>)
 8000f16:	6013      	str	r3, [r2, #0]

  /* creation of Ejection */
  EjectionHandle = osThreadNew(StartEjection, NULL, &Ejection_attributes);
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <main+0x68>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <main+0x6c>)
 8000f1e:	f002 f8f3 	bl	8003108 <osThreadNew>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <main+0x70>)
 8000f26:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f28:	f002 f8c8 	bl	80030bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f2c:	e7fe      	b.n	8000f2c <main+0x4c>
 8000f2e:	bf00      	nop
 8000f30:	08008ac0 	.word	0x08008ac0
 8000f34:	0800109d 	.word	0x0800109d
 8000f38:	2000547c 	.word	0x2000547c
 8000f3c:	08008ae4 	.word	0x08008ae4
 8000f40:	08001119 	.word	0x08001119
 8000f44:	200051bc 	.word	0x200051bc
 8000f48:	08008b08 	.word	0x08008b08
 8000f4c:	08001181 	.word	0x08001181
 8000f50:	200051b8 	.word	0x200051b8

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 ff3c 	bl	8005de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <SystemClock_Config+0xb8>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a22      	ldr	r2, [pc, #136]	; (800100c <SystemClock_Config+0xb8>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <SystemClock_Config+0xb8>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <SystemClock_Config+0xbc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <SystemClock_Config+0xbc>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <SystemClock_Config+0xbc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fdd1 	bl	8001b70 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fd4:	f000 f908 	bl	80011e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 f834 	bl	8002060 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ffe:	f000 f8f3 	bl	80011e8 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	; 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART2_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800104c:	f001 fcb8 	bl	80029c0 <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f8c7 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20005480 	.word	0x20005480
 8001064:	40004400 	.word	0x40004400

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_GPIO_Init+0x30>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <MX_GPIO_Init+0x30>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_GPIO_Init+0x30>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <StartSensor>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSensor */
void StartSensor(void *argument)
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b098      	sub	sp, #96	; 0x60
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	float accels[10] = { 0.0, 0.23, 120.0, 420.0, 69.42, 10.3, 20.5, 12.12,
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <StartSensor+0x70>)
 80010a6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80010aa:	461d      	mov	r5, r3
 80010ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b8:	e884 0003 	stmia.w	r4, {r0, r1}
			42.42, 0.0 };
	uint32_t friends[10] = { 0, 1, 2, 3, 4, 5, 4, 3, 2, 1 };
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <StartSensor+0x74>)
 80010be:	f107 0408 	add.w	r4, r7, #8
 80010c2:	461d      	mov	r5, r3
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010d0:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Infinite loop */
	uint32_t i = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	65fb      	str	r3, [r7, #92]	; 0x5c
	char *buffer = (char*) malloc(100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f004 fe6b 	bl	8005db4 <malloc>
 80010de:	4603      	mov	r3, r0
 80010e0:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(buffer, 0, 100);
 80010e2:	2264      	movs	r2, #100	; 0x64
 80010e4:	2100      	movs	r1, #0
 80010e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010e8:	f004 fe7a 	bl	8005de0 <memset>
//		numberOfFriends = friends[i % 10];
//		sprintf(buffer, "IN Acceleration: %f\r\n", acceleration);
//		myprintf(buffer);
//		sprintf(buffer, "IN Number of friends: %lu\r\n", numberOfFriends);
//		myprintf(buffer);
		++i;
 80010ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ee:	3301      	adds	r3, #1
 80010f0:	65fb      	str	r3, [r7, #92]	; 0x5c
		sprintf(buffer, "1\r\n");
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <StartSensor+0x78>)
 80010f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010f6:	f005 fc09 	bl	800690c <siprintf>
		myprintf(buffer);
 80010fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010fc:	f7ff fee0 	bl	8000ec0 <myprintf>
		osDelay(2000);
 8001100:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001104:	f002 f892 	bl	800322c <osDelay>
		++i;
 8001108:	e7f0      	b.n	80010ec <StartSensor+0x50>
 800110a:	bf00      	nop
 800110c:	08008a0c 	.word	0x08008a0c
 8001110:	08008a34 	.word	0x08008a34
 8001114:	08008a08 	.word	0x08008a08

08001118 <StartTelemetry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void *argument)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
	char *buffer = (char*) malloc(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f004 fe47 	bl	8005db4 <malloc>
 8001126:	4603      	mov	r3, r0
 8001128:	60fb      	str	r3, [r7, #12]
	memset(buffer, 0, 100);
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	2100      	movs	r1, #0
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f004 fe56 	bl	8005de0 <memset>
	for (;;) {

		sprintf(buffer, "OUT Acceleration: %f\r\n", acceleration);
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <StartTelemetry+0x58>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa15 	bl	8000568 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	490c      	ldr	r1, [pc, #48]	; (8001174 <StartTelemetry+0x5c>)
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f005 fbe1 	bl	800690c <siprintf>
		myprintf(buffer);
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff feb8 	bl	8000ec0 <myprintf>
		sprintf(buffer, "OUT Number of friends: %li\r\n", numberOfFriends);
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <StartTelemetry+0x60>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4909      	ldr	r1, [pc, #36]	; (800117c <StartTelemetry+0x64>)
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f005 fbd7 	bl	800690c <siprintf>
		myprintf(buffer);
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff feae 	bl	8000ec0 <myprintf>
		osDelay(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f002 f860 	bl	800322c <osDelay>
		sprintf(buffer, "OUT Acceleration: %f\r\n", acceleration);
 800116c:	e7e2      	b.n	8001134 <StartTelemetry+0x1c>
 800116e:	bf00      	nop
 8001170:	200054c4 	.word	0x200054c4
 8001174:	08008a5c 	.word	0x08008a5c
 8001178:	200001fc 	.word	0x200001fc
 800117c:	08008a74 	.word	0x08008a74

08001180 <StartEjection>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEjection */
void StartEjection(void *argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection */
	char *buffer = (char*) malloc(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f004 fe13 	bl	8005db4 <malloc>
 800118e:	4603      	mov	r3, r0
 8001190:	60fb      	str	r3, [r7, #12]
	memset(buffer, 0, 100);
 8001192:	2264      	movs	r2, #100	; 0x64
 8001194:	2100      	movs	r1, #0
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f004 fe22 	bl	8005de0 <memset>
	for (;;) {

		if (numberOfFriends == 5) {
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <StartEjection+0x3c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d106      	bne.n	80011b2 <StartEjection+0x32>
			sprintf(buffer, "EJECT or smthg\r\n");
 80011a4:	4906      	ldr	r1, [pc, #24]	; (80011c0 <StartEjection+0x40>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f005 fbb0 	bl	800690c <siprintf>
			myprintf(buffer);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fe87 	bl	8000ec0 <myprintf>
		}
		osDelay(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f002 f839 	bl	800322c <osDelay>
		if (numberOfFriends == 5) {
 80011ba:	e7ef      	b.n	800119c <StartEjection+0x1c>
 80011bc:	200001fc 	.word	0x200001fc
 80011c0:	08008a94 	.word	0x08008a94

080011c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011d6:	f000 fa1d 	bl	8001614 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40001000 	.word	0x40001000

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_MspInit+0x54>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_MspInit+0x54>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_MspInit+0x54>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_MspInit+0x54>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_MspInit+0x54>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_MspInit+0x54>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	210f      	movs	r1, #15
 8001236:	f06f 0001 	mvn.w	r0, #1
 800123a:	f000 fac3 	bl	80017c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0x84>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12b      	bne.n	80012c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_UART_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a6:	230c      	movs	r3, #12
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_UART_MspInit+0x8c>)
 80012c2:	f000 faa9 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40004400 	.word	0x40004400
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2036      	movs	r0, #54	; 0x36
 80012f2:	f000 fa67 	bl	80017c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f6:	2036      	movs	r0, #54	; 0x36
 80012f8:	f000 fa80 	bl	80017fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_InitTick+0xa0>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_InitTick+0xa0>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_InitTick+0xa0>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001318:	f107 0210 	add.w	r2, r7, #16
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f86c 	bl	8002400 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001328:	f001 f842 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 800132c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	4a13      	ldr	r2, [pc, #76]	; (8001380 <HAL_InitTick+0xa4>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	3b01      	subs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_InitTick+0xa8>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_InitTick+0xac>)
 8001340:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_InitTick+0xa8>)
 8001344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001348:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_InitTick+0xa8>)
 800134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_InitTick+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_InitTick+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <HAL_InitTick+0xa8>)
 800135e:	f001 f881 	bl	8002464 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d104      	bne.n	8001372 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_InitTick+0xa8>)
 800136a:	f001 f8d5 	bl	8002518 <HAL_TIM_Base_Start_IT>
 800136e:	4603      	mov	r3, r0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3730      	adds	r7, #48	; 0x30
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	431bde83 	.word	0x431bde83
 8001384:	200054c8 	.word	0x200054c8
 8001388:	40001000 	.word	0x40001000

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM6_DAC_IRQHandler+0x10>)
 80013be:	f001 f91b 	bl	80025f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200054c8 	.word	0x200054c8

080013cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_kill>:

int _kill(int pid, int sig)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013e6:	f004 fbc1 	bl	8005b6c <__errno>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2216      	movs	r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
	return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_exit>:

void _exit (int status)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffe7 	bl	80013dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800140e:	e7fe      	b.n	800140e <_exit+0x12>

08001410 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e00a      	b.n	8001438 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001422:	f3af 8000 	nop.w
 8001426:	4601      	mov	r1, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	b2ca      	uxtb	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf0      	blt.n	8001422 <_read+0x12>
	}

return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e009      	b.n	8001470 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf1      	blt.n	800145c <_write+0x12>
	}
	return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_close>:

int _close(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	return -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014aa:	605a      	str	r2, [r3, #4]
	return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_isatty>:

int _isatty(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
	return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f004 fb26 	bl	8005b6c <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20030000 	.word	0x20030000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000200 	.word	0x20000200
 8001554:	20005568 	.word	0x20005568

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001582:	490e      	ldr	r1, [pc, #56]	; (80015bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001598:	4c0b      	ldr	r4, [pc, #44]	; (80015c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015a6:	f7ff ffd7 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f004 fbdb 	bl	8005d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff fc97 	bl	8000ee0 <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80015c0:	08008f34 	.word	0x08008f34
  ldr r2, =_sbss
 80015c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80015c8:	20005564 	.word	0x20005564

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_Init+0x40>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_Init+0x40>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_Init+0x40>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f8d8 	bl	80017ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	200f      	movs	r0, #15
 8001600:	f7ff fe6c 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fdf6 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	20005510 	.word	0x20005510

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20005510 	.word	0x20005510

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff4c 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d6:	f7ff ff61 	bl	800169c <__NVIC_GetPriorityGrouping>
 80017da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	6978      	ldr	r0, [r7, #20]
 80017e2:	f7ff ffb1 	bl	8001748 <NVIC_EncodePriority>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff80 	bl	80016f4 <__NVIC_SetPriority>
}
 80017f4:	bf00      	nop
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff54 	bl	80016b8 <__NVIC_EnableIRQ>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	e177      	b.n	8001b24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8166 	bne.w	8001b1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d005      	beq.n	800186a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	2b02      	cmp	r3, #2
 8001868:	d130      	bne.n	80018cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d017      	beq.n	8001908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	69b9      	ldr	r1, [r7, #24]
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80c0 	beq.w	8001b1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_GPIO_Init+0x324>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <HAL_GPIO_Init+0x324>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_GPIO_Init+0x324>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ba:	4a61      	ldr	r2, [pc, #388]	; (8001b40 <HAL_GPIO_Init+0x328>)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	220f      	movs	r2, #15
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_GPIO_Init+0x32c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d037      	beq.n	8001a56 <HAL_GPIO_Init+0x23e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a57      	ldr	r2, [pc, #348]	; (8001b48 <HAL_GPIO_Init+0x330>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d031      	beq.n	8001a52 <HAL_GPIO_Init+0x23a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a56      	ldr	r2, [pc, #344]	; (8001b4c <HAL_GPIO_Init+0x334>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d02b      	beq.n	8001a4e <HAL_GPIO_Init+0x236>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a55      	ldr	r2, [pc, #340]	; (8001b50 <HAL_GPIO_Init+0x338>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d025      	beq.n	8001a4a <HAL_GPIO_Init+0x232>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a54      	ldr	r2, [pc, #336]	; (8001b54 <HAL_GPIO_Init+0x33c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01f      	beq.n	8001a46 <HAL_GPIO_Init+0x22e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a53      	ldr	r2, [pc, #332]	; (8001b58 <HAL_GPIO_Init+0x340>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x22a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_GPIO_Init+0x344>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x226>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <HAL_GPIO_Init+0x348>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x222>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a50      	ldr	r2, [pc, #320]	; (8001b64 <HAL_GPIO_Init+0x34c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x21e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <HAL_GPIO_Init+0x350>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x21a>
 8001a2e:	2309      	movs	r3, #9
 8001a30:	e012      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a32:	230a      	movs	r3, #10
 8001a34:	e010      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a36:	2308      	movs	r3, #8
 8001a38:	e00e      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e00c      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a3e:	2306      	movs	r3, #6
 8001a40:	e00a      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a42:	2305      	movs	r3, #5
 8001a44:	e008      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e004      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x240>
 8001a56:	2300      	movs	r3, #0
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f002 0203 	and.w	r2, r2, #3
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	4093      	lsls	r3, r2
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a68:	4935      	ldr	r1, [pc, #212]	; (8001b40 <HAL_GPIO_Init+0x328>)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9a:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac4:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_GPIO_Init+0x354>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	f67f ae84 	bls.w	8001834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40013800 	.word	0x40013800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40021400 	.word	0x40021400
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	40021c00 	.word	0x40021c00
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40022400 	.word	0x40022400
 8001b6c:	40013c00 	.word	0x40013c00

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e264      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d075      	beq.n	8001c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8e:	4ba3      	ldr	r3, [pc, #652]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4ba0      	ldr	r3, [pc, #640]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b9d      	ldr	r3, [pc, #628]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b99      	ldr	r3, [pc, #612]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x108>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e23f      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bd6:	4b91      	ldr	r3, [pc, #580]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a90      	ldr	r2, [pc, #576]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x98>
 8001bee:	4b8b      	ldr	r3, [pc, #556]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a8a      	ldr	r2, [pc, #552]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b88      	ldr	r3, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a87      	ldr	r2, [pc, #540]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a83      	ldr	r2, [pc, #524]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a80      	ldr	r2, [pc, #512]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fd08 	bl	800163c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fd04 	bl	800163c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e204      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fcf4 	bl	800163c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fcf0 	bl	800163c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1f0      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b6c      	ldr	r3, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0xe8>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d063      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c86:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1c4      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4952      	ldr	r1, [pc, #328]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e03a      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <HAL_RCC_OscConfig+0x2b0>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fca9 	bl	800163c <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff fca5 	bl	800163c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1a5      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4940      	ldr	r1, [pc, #256]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0x2b0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fc88 	bl	800163c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff fc84 	bl	800163c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e184      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d030      	beq.n	8001dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x2b4>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fc68 	bl	800163c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fc64 	bl	800163c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e164      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x200>
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x2b4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fc51 	bl	800163c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fc4d 	bl	800163c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e14d      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a0 	beq.w	8001f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fc13 	bl	800163c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e011      	b.n	8001e3e <HAL_RCC_OscConfig+0x2ce>
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	42470000 	.word	0x42470000
 8001e24:	42470e80 	.word	0x42470e80
 8001e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff fc06 	bl	800163c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e106      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_OscConfig+0x4e4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	e01c      	b.n	8001e9a <HAL_RCC_OscConfig+0x32a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a7a      	ldr	r2, [pc, #488]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
 8001e74:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x32a>
 8001e82:	4b75      	ldr	r3, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a74      	ldr	r2, [pc, #464]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a71      	ldr	r2, [pc, #452]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fbcb 	bl	800163c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fbc7 	bl	800163c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0c5      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCC_OscConfig+0x33a>
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fbb5 	bl	800163c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fbb1 	bl	800163c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0af      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a55      	ldr	r2, [pc, #340]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 809b 	beq.w	800204a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d05c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d141      	bne.n	8001fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb85 	bl	800163c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fb81 	bl	800163c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e081      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fb5a 	bl	800163c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff fb56 	bl	800163c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e056      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x41c>
 8001faa:	e04e      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fb43 	bl	800163c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff fb3f 	bl	800163c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e03f      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x44a>
 8001fd8:	e037      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e032      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d028      	beq.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d121      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d11a      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201e:	4293      	cmp	r3, r2
 8002020:	d111      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	3b01      	subs	r3, #1
 8002030:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40007000 	.word	0x40007000
 8002058:	40023800 	.word	0x40023800
 800205c:	42470060 	.word	0x42470060

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cc      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d90c      	bls.n	800209c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d044      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	2b03      	cmp	r3, #3
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e067      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4934      	ldr	r1, [pc, #208]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff fa74 	bl	800163c <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff fa70 	bl	800163c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d20c      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f868 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00
 800221c:	40023800 	.word	0x40023800
 8002220:	08008b2c 	.word	0x08008b2c
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002232:	2100      	movs	r1, #0
 8002234:	6079      	str	r1, [r7, #4]
 8002236:	2100      	movs	r1, #0
 8002238:	60f9      	str	r1, [r7, #12]
 800223a:	2100      	movs	r1, #0
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800223e:	2100      	movs	r1, #0
 8002240:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002242:	4952      	ldr	r1, [pc, #328]	; (800238c <HAL_RCC_GetSysClockFreq+0x160>)
 8002244:	6889      	ldr	r1, [r1, #8]
 8002246:	f001 010c 	and.w	r1, r1, #12
 800224a:	2908      	cmp	r1, #8
 800224c:	d00d      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x3e>
 800224e:	2908      	cmp	r1, #8
 8002250:	f200 8094 	bhi.w	800237c <HAL_RCC_GetSysClockFreq+0x150>
 8002254:	2900      	cmp	r1, #0
 8002256:	d002      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x32>
 8002258:	2904      	cmp	r1, #4
 800225a:	d003      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x38>
 800225c:	e08e      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800225e:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCC_GetSysClockFreq+0x164>)
 8002260:	60bb      	str	r3, [r7, #8]
       break;
 8002262:	e08e      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002264:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <HAL_RCC_GetSysClockFreq+0x168>)
 8002266:	60bb      	str	r3, [r7, #8]
      break;
 8002268:	e08b      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226a:	4948      	ldr	r1, [pc, #288]	; (800238c <HAL_RCC_GetSysClockFreq+0x160>)
 800226c:	6849      	ldr	r1, [r1, #4]
 800226e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002272:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002274:	4945      	ldr	r1, [pc, #276]	; (800238c <HAL_RCC_GetSysClockFreq+0x160>)
 8002276:	6849      	ldr	r1, [r1, #4]
 8002278:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800227c:	2900      	cmp	r1, #0
 800227e:	d024      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002280:	4942      	ldr	r1, [pc, #264]	; (800238c <HAL_RCC_GetSysClockFreq+0x160>)
 8002282:	6849      	ldr	r1, [r1, #4]
 8002284:	0989      	lsrs	r1, r1, #6
 8002286:	4608      	mov	r0, r1
 8002288:	f04f 0100 	mov.w	r1, #0
 800228c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002290:	f04f 0500 	mov.w	r5, #0
 8002294:	ea00 0204 	and.w	r2, r0, r4
 8002298:	ea01 0305 	and.w	r3, r1, r5
 800229c:	493d      	ldr	r1, [pc, #244]	; (8002394 <HAL_RCC_GetSysClockFreq+0x168>)
 800229e:	fb01 f003 	mul.w	r0, r1, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	fb01 f102 	mul.w	r1, r1, r2
 80022a8:	1844      	adds	r4, r0, r1
 80022aa:	493a      	ldr	r1, [pc, #232]	; (8002394 <HAL_RCC_GetSysClockFreq+0x168>)
 80022ac:	fba2 0101 	umull	r0, r1, r2, r1
 80022b0:	1863      	adds	r3, r4, r1
 80022b2:	4619      	mov	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	f7fe fc84 	bl	8000bc8 <__aeabi_uldivmod>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4613      	mov	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e04a      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_RCC_GetSysClockFreq+0x160>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	461a      	mov	r2, r3
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	ea02 0400 	and.w	r4, r2, r0
 80022e2:	ea03 0501 	and.w	r5, r3, r1
 80022e6:	4620      	mov	r0, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	014b      	lsls	r3, r1, #5
 80022f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022f8:	0142      	lsls	r2, r0, #5
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	1b00      	subs	r0, r0, r4
 8002300:	eb61 0105 	sbc.w	r1, r1, r5
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	018b      	lsls	r3, r1, #6
 800230e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002312:	0182      	lsls	r2, r0, #6
 8002314:	1a12      	subs	r2, r2, r0
 8002316:	eb63 0301 	sbc.w	r3, r3, r1
 800231a:	f04f 0000 	mov.w	r0, #0
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	00d9      	lsls	r1, r3, #3
 8002324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002328:	00d0      	lsls	r0, r2, #3
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	1912      	adds	r2, r2, r4
 8002330:	eb45 0303 	adc.w	r3, r5, r3
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	0299      	lsls	r1, r3, #10
 800233e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002342:	0290      	lsls	r0, r2, #10
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	461a      	mov	r2, r3
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	f7fe fc38 	bl	8000bc8 <__aeabi_uldivmod>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4613      	mov	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_GetSysClockFreq+0x160>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	3301      	adds	r3, #1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	60bb      	str	r3, [r7, #8]
      break;
 800237a:	e002      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCC_GetSysClockFreq+0x164>)
 800237e:	60bb      	str	r3, [r7, #8]
      break;
 8002380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002382:	68bb      	ldr	r3, [r7, #8]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400
 8002394:	017d7840 	.word	0x017d7840

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff0 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0a9b      	lsrs	r3, r3, #10
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08008b3c 	.word	0x08008b3c

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffdc 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0b5b      	lsrs	r3, r3, #13
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08008b3c 	.word	0x08008b3c

08002400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	220f      	movs	r2, #15
 800240e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_RCC_GetClockConfig+0x5c>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_RCC_GetClockConfig+0x5c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCC_GetClockConfig+0x5c>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_GetClockConfig+0x5c>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_RCC_GetClockConfig+0x60>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 020f 	and.w	r2, r3, #15
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e041      	b.n	80024fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f839 	bl	8002502 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f000 f9d8 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e04e      	b.n	80025ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_TIM_Base_Start_IT+0xc4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d022      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d01d      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d018      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00e      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d111      	bne.n	80025bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d010      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ba:	e007      	b.n	80025cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40000800 	.word	0x40000800
 80025e8:	40000c00 	.word	0x40000c00
 80025ec:	40010400 	.word	0x40010400
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40001800 	.word	0x40001800

080025f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0202 	mvn.w	r2, #2
 8002624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f8ee 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8e0 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8f1 	bl	8002830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b04      	cmp	r3, #4
 8002660:	d122      	bne.n	80026a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0204 	mvn.w	r2, #4
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8c4 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8b6 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f8c7 	bl	8002830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d122      	bne.n	80026fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d11b      	bne.n	80026fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0208 	mvn.w	r2, #8
 80026cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f89a 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f88c 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f89d 	bl	8002830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b10      	cmp	r3, #16
 8002708:	d122      	bne.n	8002750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b10      	cmp	r3, #16
 8002716:	d11b      	bne.n	8002750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0210 	mvn.w	r2, #16
 8002720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2208      	movs	r2, #8
 8002726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f870 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 800273c:	e005      	b.n	800274a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f862 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f873 	bl	8002830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0201 	mvn.w	r2, #1
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe fd24 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f902 	bl	80029ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d107      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f838 	bl	8002844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0220 	mvn.w	r2, #32
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8cc 	bl	8002998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a40      	ldr	r2, [pc, #256]	; (800296c <TIM_Base_SetConfig+0x114>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d00f      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3d      	ldr	r2, [pc, #244]	; (8002970 <TIM_Base_SetConfig+0x118>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00b      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a3c      	ldr	r2, [pc, #240]	; (8002974 <TIM_Base_SetConfig+0x11c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <TIM_Base_SetConfig+0x120>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a3a      	ldr	r2, [pc, #232]	; (800297c <TIM_Base_SetConfig+0x124>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a2f      	ldr	r2, [pc, #188]	; (800296c <TIM_Base_SetConfig+0x114>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d027      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <TIM_Base_SetConfig+0x118>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d023      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <TIM_Base_SetConfig+0x11c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <TIM_Base_SetConfig+0x120>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d01b      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a29      	ldr	r2, [pc, #164]	; (800297c <TIM_Base_SetConfig+0x124>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d017      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a28      	ldr	r2, [pc, #160]	; (8002980 <TIM_Base_SetConfig+0x128>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a27      	ldr	r2, [pc, #156]	; (8002984 <TIM_Base_SetConfig+0x12c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00f      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <TIM_Base_SetConfig+0x130>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00b      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a25      	ldr	r2, [pc, #148]	; (800298c <TIM_Base_SetConfig+0x134>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a24      	ldr	r2, [pc, #144]	; (8002990 <TIM_Base_SetConfig+0x138>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d003      	beq.n	800290a <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <TIM_Base_SetConfig+0x13c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d108      	bne.n	800291c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <TIM_Base_SetConfig+0x114>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0xf8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0c      	ldr	r2, [pc, #48]	; (800297c <TIM_Base_SetConfig+0x124>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d103      	bne.n	8002958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	615a      	str	r2, [r3, #20]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40010000 	.word	0x40010000
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800
 8002978:	40000c00 	.word	0x40000c00
 800297c:	40010400 	.word	0x40010400
 8002980:	40014000 	.word	0x40014000
 8002984:	40014400 	.word	0x40014400
 8002988:	40014800 	.word	0x40014800
 800298c:	40001800 	.word	0x40001800
 8002990:	40001c00 	.word	0x40001c00
 8002994:	40002000 	.word	0x40002000

08002998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e03f      	b.n	8002a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fc30 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f929 	bl	8002c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b08a      	sub	sp, #40	; 0x28
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d17c      	bne.n	8002b74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_UART_Transmit+0x2c>
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e075      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Transmit+0x3e>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e06e      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2221      	movs	r2, #33	; 0x21
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aae:	f7fe fdc5 	bl	800163c <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac8:	d108      	bne.n	8002adc <HAL_UART_Transmit+0x82>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d104      	bne.n	8002adc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e003      	b.n	8002ae4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002aec:	e02a      	b.n	8002b44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f840 	bl	8002b7e <UART_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e036      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3302      	adds	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e007      	b.n	8002b36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1cf      	bne.n	8002aee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f810 	bl	8002b7e <UART_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e006      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b090      	sub	sp, #64	; 0x40
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8e:	e050      	b.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d04c      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x30>
 8002b9e:	f7fe fd4d 	bl	800163c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d241      	bcs.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bce:	637a      	str	r2, [r7, #52]	; 0x34
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e5      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c02:	623a      	str	r2, [r7, #32]
 8002c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	69f9      	ldr	r1, [r7, #28]
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e5      	bne.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e00f      	b.n	8002c52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d09f      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3740      	adds	r7, #64	; 0x40
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c60:	b09f      	sub	sp, #124	; 0x7c
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	68d9      	ldr	r1, [r3, #12]
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	ea40 0301 	orr.w	r3, r0, r1
 8002c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca0:	f021 010c 	bic.w	r1, r1, #12
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002caa:	430b      	orrs	r3, r1
 8002cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	6999      	ldr	r1, [r3, #24]
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	ea40 0301 	orr.w	r3, r0, r1
 8002cc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4bc5      	ldr	r3, [pc, #788]	; (8002fe0 <UART_SetConfig+0x384>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d004      	beq.n	8002cda <UART_SetConfig+0x7e>
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4bc3      	ldr	r3, [pc, #780]	; (8002fe4 <UART_SetConfig+0x388>)
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d103      	bne.n	8002ce2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cda:	f7ff fb7d 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8002cde:	6778      	str	r0, [r7, #116]	; 0x74
 8002ce0:	e002      	b.n	8002ce8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce2:	f7ff fb65 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8002ce6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf0:	f040 80b6 	bne.w	8002e60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf6:	461c      	mov	r4, r3
 8002cf8:	f04f 0500 	mov.w	r5, #0
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	462b      	mov	r3, r5
 8002d00:	1891      	adds	r1, r2, r2
 8002d02:	6439      	str	r1, [r7, #64]	; 0x40
 8002d04:	415b      	adcs	r3, r3
 8002d06:	647b      	str	r3, [r7, #68]	; 0x44
 8002d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d0c:	1912      	adds	r2, r2, r4
 8002d0e:	eb45 0303 	adc.w	r3, r5, r3
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	00d9      	lsls	r1, r3, #3
 8002d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d20:	00d0      	lsls	r0, r2, #3
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	1911      	adds	r1, r2, r4
 8002d28:	6639      	str	r1, [r7, #96]	; 0x60
 8002d2a:	416b      	adcs	r3, r5
 8002d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d48:	f7fd ff3e 	bl	8000bc8 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4ba5      	ldr	r3, [pc, #660]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002d52:	fba3 2302 	umull	r2, r3, r3, r2
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	011e      	lsls	r6, r3, #4
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	f04f 0500 	mov.w	r5, #0
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	1891      	adds	r1, r2, r2
 8002d68:	6339      	str	r1, [r7, #48]	; 0x30
 8002d6a:	415b      	adcs	r3, r3
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d72:	1912      	adds	r2, r2, r4
 8002d74:	eb45 0303 	adc.w	r3, r5, r3
 8002d78:	f04f 0000 	mov.w	r0, #0
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	00d9      	lsls	r1, r3, #3
 8002d82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d86:	00d0      	lsls	r0, r2, #3
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	1911      	adds	r1, r2, r4
 8002d8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d90:	416b      	adcs	r3, r5
 8002d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	1891      	adds	r1, r2, r2
 8002da0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002da2:	415b      	adcs	r3, r3
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002daa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002dae:	f7fd ff0b 	bl	8000bc8 <__aeabi_uldivmod>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4b8c      	ldr	r3, [pc, #560]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002db8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	2164      	movs	r1, #100	; 0x64
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	3332      	adds	r3, #50	; 0x32
 8002dca:	4a87      	ldr	r2, [pc, #540]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dd8:	441e      	add	r6, r3
 8002dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	1894      	adds	r4, r2, r2
 8002de8:	623c      	str	r4, [r7, #32]
 8002dea:	415b      	adcs	r3, r3
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002df2:	1812      	adds	r2, r2, r0
 8002df4:	eb41 0303 	adc.w	r3, r1, r3
 8002df8:	f04f 0400 	mov.w	r4, #0
 8002dfc:	f04f 0500 	mov.w	r5, #0
 8002e00:	00dd      	lsls	r5, r3, #3
 8002e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e06:	00d4      	lsls	r4, r2, #3
 8002e08:	4622      	mov	r2, r4
 8002e0a:	462b      	mov	r3, r5
 8002e0c:	1814      	adds	r4, r2, r0
 8002e0e:	653c      	str	r4, [r7, #80]	; 0x50
 8002e10:	414b      	adcs	r3, r1
 8002e12:	657b      	str	r3, [r7, #84]	; 0x54
 8002e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	1891      	adds	r1, r2, r2
 8002e20:	61b9      	str	r1, [r7, #24]
 8002e22:	415b      	adcs	r3, r3
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e2e:	f7fd fecb 	bl	8000bc8 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4b6c      	ldr	r3, [pc, #432]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002e38:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2164      	movs	r1, #100	; 0x64
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	f003 0207 	and.w	r2, r3, #7
 8002e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4432      	add	r2, r6
 8002e5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e5e:	e0b9      	b.n	8002fd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e62:	461c      	mov	r4, r3
 8002e64:	f04f 0500 	mov.w	r5, #0
 8002e68:	4622      	mov	r2, r4
 8002e6a:	462b      	mov	r3, r5
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	6139      	str	r1, [r7, #16]
 8002e70:	415b      	adcs	r3, r3
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e78:	1912      	adds	r2, r2, r4
 8002e7a:	eb45 0303 	adc.w	r3, r5, r3
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	00d9      	lsls	r1, r3, #3
 8002e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e8c:	00d0      	lsls	r0, r2, #3
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	eb12 0804 	adds.w	r8, r2, r4
 8002e96:	eb43 0905 	adc.w	r9, r3, r5
 8002e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	008b      	lsls	r3, r1, #2
 8002eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002eb2:	0082      	lsls	r2, r0, #2
 8002eb4:	4640      	mov	r0, r8
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	f7fd fe86 	bl	8000bc8 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4b49      	ldr	r3, [pc, #292]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	011e      	lsls	r6, r3, #4
 8002eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	1894      	adds	r4, r2, r2
 8002ed8:	60bc      	str	r4, [r7, #8]
 8002eda:	415b      	adcs	r3, r3
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee2:	1812      	adds	r2, r2, r0
 8002ee4:	eb41 0303 	adc.w	r3, r1, r3
 8002ee8:	f04f 0400 	mov.w	r4, #0
 8002eec:	f04f 0500 	mov.w	r5, #0
 8002ef0:	00dd      	lsls	r5, r3, #3
 8002ef2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ef6:	00d4      	lsls	r4, r2, #3
 8002ef8:	4622      	mov	r2, r4
 8002efa:	462b      	mov	r3, r5
 8002efc:	1814      	adds	r4, r2, r0
 8002efe:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f00:	414b      	adcs	r3, r1
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	008b      	lsls	r3, r1, #2
 8002f18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f1c:	0082      	lsls	r2, r0, #2
 8002f1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f22:	f7fd fe51 	bl	8000bc8 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	; 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	3332      	adds	r3, #50	; 0x32
 8002f3e:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4a:	441e      	add	r6, r3
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	1894      	adds	r4, r2, r2
 8002f5a:	603c      	str	r4, [r7, #0]
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f64:	1812      	adds	r2, r2, r0
 8002f66:	eb41 0303 	adc.w	r3, r1, r3
 8002f6a:	f04f 0400 	mov.w	r4, #0
 8002f6e:	f04f 0500 	mov.w	r5, #0
 8002f72:	00dd      	lsls	r5, r3, #3
 8002f74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f78:	00d4      	lsls	r4, r2, #3
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	eb12 0a00 	adds.w	sl, r2, r0
 8002f82:	eb43 0b01 	adc.w	fp, r3, r1
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	008b      	lsls	r3, r1, #2
 8002f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f9e:	0082      	lsls	r2, r0, #2
 8002fa0:	4650      	mov	r0, sl
 8002fa2:	4659      	mov	r1, fp
 8002fa4:	f7fd fe10 	bl	8000bc8 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002fae:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2164      	movs	r1, #100	; 0x64
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	3332      	adds	r3, #50	; 0x32
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <UART_SetConfig+0x38c>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4432      	add	r2, r6
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	377c      	adds	r7, #124	; 0x7c
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fde:	bf00      	nop
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	40011400 	.word	0x40011400
 8002fe8:	51eb851f 	.word	0x51eb851f

08002fec <__NVIC_SetPriority>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <SysTick_Handler+0x1c>)
 8003046:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003048:	f001 fd28 	bl	8004a9c <xTaskGetSchedulerState>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003052:	f002 fb11 	bl	8005678 <xPortSysTickHandler>
  }
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003064:	2100      	movs	r1, #0
 8003066:	f06f 0004 	mvn.w	r0, #4
 800306a:	f7ff ffbf 	bl	8002fec <__NVIC_SetPriority>
#endif
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800307a:	f3ef 8305 	mrs	r3, IPSR
 800307e:	603b      	str	r3, [r7, #0]
  return(result);
 8003080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003086:	f06f 0305 	mvn.w	r3, #5
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	e00c      	b.n	80030a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <osKernelInitialize+0x44>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <osKernelInitialize+0x44>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e002      	b.n	80030a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030a8:	687b      	ldr	r3, [r7, #4]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000204 	.word	0x20000204

080030bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c2:	f3ef 8305 	mrs	r3, IPSR
 80030c6:	603b      	str	r3, [r7, #0]
  return(result);
 80030c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80030ce:	f06f 0305 	mvn.w	r3, #5
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	e010      	b.n	80030f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <osKernelStart+0x48>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d109      	bne.n	80030f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030de:	f7ff ffbf 	bl	8003060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <osKernelStart+0x48>)
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030e8:	f001 f87c 	bl	80041e4 <vTaskStartScheduler>
      stat = osOK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	e002      	b.n	80030f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030f8:	687b      	ldr	r3, [r7, #4]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000204 	.word	0x20000204

08003108 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b08e      	sub	sp, #56	; 0x38
 800310c:	af04      	add	r7, sp, #16
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003118:	f3ef 8305 	mrs	r3, IPSR
 800311c:	617b      	str	r3, [r7, #20]
  return(result);
 800311e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003120:	2b00      	cmp	r3, #0
 8003122:	d17e      	bne.n	8003222 <osThreadNew+0x11a>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d07b      	beq.n	8003222 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800312e:	2318      	movs	r3, #24
 8003130:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d045      	beq.n	80031ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <osThreadNew+0x48>
        name = attr->name;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <osThreadNew+0x6e>
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b38      	cmp	r3, #56	; 0x38
 8003168:	d805      	bhi.n	8003176 <osThreadNew+0x6e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <osThreadNew+0x72>
        return (NULL);
 8003176:	2300      	movs	r3, #0
 8003178:	e054      	b.n	8003224 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00e      	beq.n	80031b0 <osThreadNew+0xa8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2bbb      	cmp	r3, #187	; 0xbb
 8003198:	d90a      	bls.n	80031b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <osThreadNew+0xa8>
        mem = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e010      	b.n	80031d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10c      	bne.n	80031d2 <osThreadNew+0xca>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d108      	bne.n	80031d2 <osThreadNew+0xca>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <osThreadNew+0xca>
          mem = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e001      	b.n	80031d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d110      	bne.n	80031fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031e0:	9202      	str	r2, [sp, #8]
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	6a3a      	ldr	r2, [r7, #32]
 80031ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fe0c 	bl	8003e0c <xTaskCreateStatic>
 80031f4:	4603      	mov	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e013      	b.n	8003222 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d110      	bne.n	8003222 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	b29a      	uxth	r2, r3
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fe57 	bl	8003ec6 <xTaskCreate>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <osThreadNew+0x11a>
            hTask = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003222:	693b      	ldr	r3, [r7, #16]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003234:	f3ef 8305 	mrs	r3, IPSR
 8003238:	60bb      	str	r3, [r7, #8]
  return(result);
 800323a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <osDelay+0x1c>
    stat = osErrorISR;
 8003240:	f06f 0305 	mvn.w	r3, #5
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e007      	b.n	8003258 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 ff92 	bl	800417c <vTaskDelay>
    }
  }

  return (stat);
 8003258:	68fb      	ldr	r3, [r7, #12]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <vApplicationGetIdleTaskMemory+0x2c>)
 8003274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4a06      	ldr	r2, [pc, #24]	; (8003294 <vApplicationGetIdleTaskMemory+0x30>)
 800327a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	601a      	str	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000208 	.word	0x20000208
 8003294:	200002c4 	.word	0x200002c4

08003298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80032a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4a06      	ldr	r2, [pc, #24]	; (80032c8 <vApplicationGetTimerTaskMemory+0x30>)
 80032ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b6:	601a      	str	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	200004c4 	.word	0x200004c4
 80032c8:	20000580 	.word	0x20000580

080032cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f103 0208 	add.w	r2, r3, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f103 0208 	add.w	r2, r3, #8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f103 0208 	add.w	r2, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d103      	bne.n	800338e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e00c      	b.n	80033a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3308      	adds	r3, #8
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e002      	b.n	800339c <vListInsert+0x2e>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d2f6      	bcs.n	8003396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6892      	ldr	r2, [r2, #8]
 80033f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6852      	ldr	r2, [r2, #4]
 8003400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d103      	bne.n	8003414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800345e:	f002 f879 	bl	8005554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	68f9      	ldr	r1, [r7, #12]
 800346c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	3b01      	subs	r3, #1
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	441a      	add	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22ff      	movs	r2, #255	; 0xff
 80034aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d114      	bne.n	80034de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01a      	beq.n	80034f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3310      	adds	r3, #16
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 f929 	bl	8004718 <xTaskRemoveFromEventList>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <xQueueGenericReset+0xcc>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e009      	b.n	80034f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3310      	adds	r3, #16
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fef2 	bl	80032cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff feed 	bl	80032cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034f2:	f002 f85f 	bl	80055b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <xQueueGenericCreateStatic+0x52>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <xQueueGenericCreateStatic+0x56>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <xQueueGenericCreateStatic+0x58>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	623b      	str	r3, [r7, #32]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <xQueueGenericCreateStatic+0x7e>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <xQueueGenericCreateStatic+0x82>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <xQueueGenericCreateStatic+0x84>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	61fb      	str	r3, [r7, #28]
}
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035a2:	2350      	movs	r3, #80	; 0x50
 80035a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b50      	cmp	r3, #80	; 0x50
 80035aa:	d00a      	beq.n	80035c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	61bb      	str	r3, [r7, #24]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f805 	bl	80035f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3730      	adds	r7, #48	; 0x30
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e002      	b.n	8003616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003622:	2101      	movs	r1, #1
 8003624:	69b8      	ldr	r0, [r7, #24]
 8003626:	f7ff ff05 	bl	8003434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	; 0x38
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueGenericSend+0x32>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <xQueueGenericSend+0x40>
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <xQueueGenericSend+0x44>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <xQueueGenericSend+0x46>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <xQueueGenericSend+0x60>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d103      	bne.n	80036aa <xQueueGenericSend+0x6e>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <xQueueGenericSend+0x72>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueGenericSend+0x74>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueGenericSend+0x8e>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036ca:	f001 f9e7 	bl	8004a9c <xTaskGetSchedulerState>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <xQueueGenericSend+0x9e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <xQueueGenericSend+0xa2>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <xQueueGenericSend+0xa4>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueGenericSend+0xbe>
	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	61fb      	str	r3, [r7, #28]
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036fa:	f001 ff2b 	bl	8005554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <xQueueGenericSend+0xd4>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d129      	bne.n	8003764 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003716:	f000 fa0b 	bl	8003b30 <prvCopyDataToQueue>
 800371a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fff5 	bl	8004718 <xTaskRemoveFromEventList>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <xQueueGenericSend+0x1f8>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	e00a      	b.n	800375c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800374c:	4b39      	ldr	r3, [pc, #228]	; (8003834 <xQueueGenericSend+0x1f8>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800375c:	f001 ff2a 	bl	80055b4 <vPortExitCritical>
				return pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	e063      	b.n	800382c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800376a:	f001 ff23 	bl	80055b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800376e:	2300      	movs	r3, #0
 8003770:	e05c      	b.n	800382c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f82f 	bl	80047e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003786:	f001 ff15 	bl	80055b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800378a:	f000 fd9b 	bl	80042c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378e:	f001 fee1 	bl	8005554 <vPortEnterCritical>
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003798:	b25b      	sxtb	r3, r3
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d103      	bne.n	80037a8 <xQueueGenericSend+0x16c>
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <xQueueGenericSend+0x182>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037be:	f001 fef9 	bl	80055b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f81e 	bl	800480c <xTaskCheckForTimeOut>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d124      	bne.n	8003820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d8:	f000 faa2 	bl	8003d20 <prvIsQueueFull>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	3310      	adds	r3, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 ff44 	bl	8004678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037f2:	f000 fa2d 	bl	8003c50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037f6:	f000 fd73 	bl	80042e0 <xTaskResumeAll>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f af7c 	bne.w	80036fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <xQueueGenericSend+0x1f8>)
 8003804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	e772      	b.n	80036fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003816:	f000 fa1b 	bl	8003c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800381a:	f000 fd61 	bl	80042e0 <xTaskResumeAll>
 800381e:	e76c      	b.n	80036fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003822:	f000 fa15 	bl	8003c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003826:	f000 fd5b 	bl	80042e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800382a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800382c:	4618      	mov	r0, r3
 800382e:	3738      	adds	r7, #56	; 0x38
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b090      	sub	sp, #64	; 0x40
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <xQueueGenericSendFromISR+0x3c>
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <xQueueGenericSendFromISR+0x40>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <xQueueGenericSendFromISR+0x42>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d103      	bne.n	80038a2 <xQueueGenericSendFromISR+0x6a>
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <xQueueGenericSendFromISR+0x6e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueGenericSendFromISR+0x70>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	623b      	str	r3, [r7, #32]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038c2:	f001 ff29 	bl	8005718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038c6:	f3ef 8211 	mrs	r2, BASEPRI
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <xQueueGenericSendFromISR+0xbc>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d12f      	bne.n	8003954 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800390a:	f000 f911 	bl	8003b30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800390e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d112      	bne.n	800393e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	d016      	beq.n	800394e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003922:	3324      	adds	r3, #36	; 0x24
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fef7 	bl	8004718 <xTaskRemoveFromEventList>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e007      	b.n	800394e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800393e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003942:	3301      	adds	r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	b25a      	sxtb	r2, r3
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800394e:	2301      	movs	r3, #1
 8003950:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003952:	e001      	b.n	8003958 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003954:	2300      	movs	r3, #0
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003966:	4618      	mov	r0, r3
 8003968:	3740      	adds	r7, #64	; 0x40
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	; 0x30
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <xQueueReceive+0x30>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	623b      	str	r3, [r7, #32]
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <xQueueReceive+0x3e>
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <xQueueReceive+0x42>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <xQueueReceive+0x44>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueReceive+0x5e>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	61fb      	str	r3, [r7, #28]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ce:	f001 f865 	bl	8004a9c <xTaskGetSchedulerState>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <xQueueReceive+0x6e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <xQueueReceive+0x72>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <xQueueReceive+0x74>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <xQueueReceive+0x8e>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	61bb      	str	r3, [r7, #24]
}
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039fe:	f001 fda9 	bl	8005554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01f      	beq.n	8003a4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a12:	f000 f8f7 	bl	8003c04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00f      	beq.n	8003a46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	3310      	adds	r3, #16
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fe74 	bl	8004718 <xTaskRemoveFromEventList>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <xQueueReceive+0x1bc>)
 8003a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a46:	f001 fdb5 	bl	80055b4 <vPortExitCritical>
				return pdPASS;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e069      	b.n	8003b22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a54:	f001 fdae 	bl	80055b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e062      	b.n	8003b22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a62:	f107 0310 	add.w	r3, r7, #16
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 feba 	bl	80047e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a70:	f001 fda0 	bl	80055b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a74:	f000 fc26 	bl	80042c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a78:	f001 fd6c 	bl	8005554 <vPortEnterCritical>
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d103      	bne.n	8003a92 <xQueueReceive+0x122>
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d103      	bne.n	8003aa8 <xQueueReceive+0x138>
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa8:	f001 fd84 	bl	80055b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aac:	1d3a      	adds	r2, r7, #4
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fea9 	bl	800480c <xTaskCheckForTimeOut>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d123      	bne.n	8003b08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac2:	f000 f917 	bl	8003cf4 <prvIsQueueEmpty>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d017      	beq.n	8003afc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	3324      	adds	r3, #36	; 0x24
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fdcf 	bl	8004678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003adc:	f000 f8b8 	bl	8003c50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ae0:	f000 fbfe 	bl	80042e0 <xTaskResumeAll>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d189      	bne.n	80039fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <xQueueReceive+0x1bc>)
 8003aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	e780      	b.n	80039fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afe:	f000 f8a7 	bl	8003c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b02:	f000 fbed 	bl	80042e0 <xTaskResumeAll>
 8003b06:	e77a      	b.n	80039fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b0a:	f000 f8a1 	bl	8003c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b0e:	f000 fbe7 	bl	80042e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b14:	f000 f8ee 	bl	8003cf4 <prvIsQueueEmpty>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f43f af6f 	beq.w	80039fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3730      	adds	r7, #48	; 0x30
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d14d      	bne.n	8003bf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 ffbc 	bl	8004ad8 <xTaskPriorityDisinherit>
 8003b60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	e043      	b.n	8003bf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d119      	bne.n	8003ba4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6858      	ldr	r0, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	f002 f922 	bl	8005dc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	441a      	add	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d32b      	bcc.n	8003bf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	e026      	b.n	8003bf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68d8      	ldr	r0, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	461a      	mov	r2, r3
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	f002 f908 	bl	8005dc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	425b      	negs	r3, r3
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d207      	bcs.n	8003be0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	425b      	negs	r3, r3
 8003bda:	441a      	add	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d105      	bne.n	8003bf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bfa:	697b      	ldr	r3, [r7, #20]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d303      	bcc.n	8003c38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68d9      	ldr	r1, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	461a      	mov	r2, r3
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	f002 f8be 	bl	8005dc4 <memcpy>
	}
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c58:	f001 fc7c 	bl	8005554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c64:	e011      	b.n	8003c8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d012      	beq.n	8003c94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3324      	adds	r3, #36	; 0x24
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fd50 	bl	8004718 <xTaskRemoveFromEventList>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c7e:	f000 fe27 	bl	80048d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	dce9      	bgt.n	8003c66 <prvUnlockQueue+0x16>
 8003c92:	e000      	b.n	8003c96 <prvUnlockQueue+0x46>
					break;
 8003c94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	22ff      	movs	r2, #255	; 0xff
 8003c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c9e:	f001 fc89 	bl	80055b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ca2:	f001 fc57 	bl	8005554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cae:	e011      	b.n	8003cd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d012      	beq.n	8003cde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3310      	adds	r3, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fd2b 	bl	8004718 <xTaskRemoveFromEventList>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cc8:	f000 fe02 	bl	80048d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ccc:	7bbb      	ldrb	r3, [r7, #14]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	dce9      	bgt.n	8003cb0 <prvUnlockQueue+0x60>
 8003cdc:	e000      	b.n	8003ce0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	22ff      	movs	r2, #255	; 0xff
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ce8:	f001 fc64 	bl	80055b4 <vPortExitCritical>
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cfc:	f001 fc2a 	bl	8005554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e001      	b.n	8003d12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d12:	f001 fc4f 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d28:	f001 fc14 	bl	8005554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d102      	bne.n	8003d3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e001      	b.n	8003d42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d42:	f001 fc37 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e014      	b.n	8003d8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d60:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <vQueueAddToRegistry+0x50>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <vQueueAddToRegistry+0x50>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <vQueueAddToRegistry+0x50>)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d82:	e006      	b.n	8003d92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b07      	cmp	r3, #7
 8003d8e:	d9e7      	bls.n	8003d60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20005514 	.word	0x20005514

08003da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003db4:	f001 fbce 	bl	8005554 <vPortEnterCritical>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d103      	bne.n	8003dce <vQueueWaitForMessageRestricted+0x2a>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d103      	bne.n	8003de4 <vQueueWaitForMessageRestricted+0x40>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de4:	f001 fbe6 	bl	80055b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3324      	adds	r3, #36	; 0x24
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fc61 	bl	80046c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff26 	bl	8003c50 <prvUnlockQueue>
	}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08e      	sub	sp, #56	; 0x38
 8003e10:	af04      	add	r7, sp, #16
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	623b      	str	r3, [r7, #32]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61fb      	str	r3, [r7, #28]
}
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e52:	23bc      	movs	r3, #188	; 0xbc
 8003e54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2bbc      	cmp	r3, #188	; 0xbc
 8003e5a:	d00a      	beq.n	8003e72 <xTaskCreateStatic+0x66>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	61bb      	str	r3, [r7, #24]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01e      	beq.n	8003eb8 <xTaskCreateStatic+0xac>
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01b      	beq.n	8003eb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e92:	2300      	movs	r3, #0
 8003e94:	9303      	str	r3, [sp, #12]
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	9302      	str	r3, [sp, #8]
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f850 	bl	8003f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eb2:	f000 f8f3 	bl	800409c <prvAddNewTaskToReadyList>
 8003eb6:	e001      	b.n	8003ebc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ebc:	697b      	ldr	r3, [r7, #20]
	}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3728      	adds	r7, #40	; 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08c      	sub	sp, #48	; 0x30
 8003eca:	af04      	add	r7, sp, #16
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fc5c 	bl	8005798 <pvPortMalloc>
 8003ee0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00e      	beq.n	8003f06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ee8:	20bc      	movs	r0, #188	; 0xbc
 8003eea:	f001 fc55 	bl	8005798 <pvPortMalloc>
 8003eee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
 8003efc:	e005      	b.n	8003f0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003efe:	6978      	ldr	r0, [r7, #20]
 8003f00:	f001 fd16 	bl	8005930 <vPortFree>
 8003f04:	e001      	b.n	8003f0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d017      	beq.n	8003f40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	9302      	str	r3, [sp, #8]
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f80e 	bl	8003f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f34:	69f8      	ldr	r0, [r7, #28]
 8003f36:	f000 f8b1 	bl	800409c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	e002      	b.n	8003f46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f40:	f04f 33ff 	mov.w	r3, #4294967295
 8003f44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f46:	69bb      	ldr	r3, [r7, #24]
	}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	461a      	mov	r2, r3
 8003f68:	21a5      	movs	r1, #165	; 0xa5
 8003f6a:	f001 ff39 	bl	8005de0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f023 0307 	bic.w	r3, r3, #7
 8003f86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	617b      	str	r3, [r7, #20]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01f      	beq.n	8003fee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e012      	b.n	8003fda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	7819      	ldrb	r1, [r3, #0]
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3334      	adds	r3, #52	; 0x34
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d006      	beq.n	8003fe2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b0f      	cmp	r3, #15
 8003fde:	d9e9      	bls.n	8003fb4 <prvInitialiseNewTask+0x64>
 8003fe0:	e000      	b.n	8003fe4 <prvInitialiseNewTask+0x94>
			{
				break;
 8003fe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fec:	e003      	b.n	8003ff6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	2b37      	cmp	r3, #55	; 0x37
 8003ffa:	d901      	bls.n	8004000 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ffc:	2337      	movs	r3, #55	; 0x37
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2200      	movs	r2, #0
 8004010:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	3304      	adds	r3, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff f978 	bl	800330c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	3318      	adds	r3, #24
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff f973 	bl	800330c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	2200      	movs	r2, #0
 8004048:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	3354      	adds	r3, #84	; 0x54
 8004050:	2260      	movs	r2, #96	; 0x60
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fec3 	bl	8005de0 <memset>
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <prvInitialiseNewTask+0x140>)
 800405e:	659a      	str	r2, [r3, #88]	; 0x58
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <prvInitialiseNewTask+0x144>)
 8004064:	65da      	str	r2, [r3, #92]	; 0x5c
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <prvInitialiseNewTask+0x148>)
 800406a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	69b8      	ldr	r0, [r7, #24]
 8004072:	f001 f941 	bl	80052f8 <pxPortInitialiseStack>
 8004076:	4602      	mov	r2, r0
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004086:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004088:	bf00      	nop
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	08008b64 	.word	0x08008b64
 8004094:	08008b84 	.word	0x08008b84
 8004098:	08008b44 	.word	0x08008b44

0800409c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040a4:	f001 fa56 	bl	8005554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <prvAddNewTaskToReadyList+0xc4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	4a2c      	ldr	r2, [pc, #176]	; (8004160 <prvAddNewTaskToReadyList+0xc4>)
 80040b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040b2:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <prvAddNewTaskToReadyList+0xc8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040ba:	4a2a      	ldr	r2, [pc, #168]	; (8004164 <prvAddNewTaskToReadyList+0xc8>)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <prvAddNewTaskToReadyList+0xc4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d110      	bne.n	80040ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040c8:	f000 fc26 	bl	8004918 <prvInitialiseTaskLists>
 80040cc:	e00d      	b.n	80040ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040ce:	4b26      	ldr	r3, [pc, #152]	; (8004168 <prvAddNewTaskToReadyList+0xcc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040d6:	4b23      	ldr	r3, [pc, #140]	; (8004164 <prvAddNewTaskToReadyList+0xc8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d802      	bhi.n	80040ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040e4:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <prvAddNewTaskToReadyList+0xc8>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <prvAddNewTaskToReadyList+0xd0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	4a1e      	ldr	r2, [pc, #120]	; (800416c <prvAddNewTaskToReadyList+0xd0>)
 80040f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <prvAddNewTaskToReadyList+0xd0>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <prvAddNewTaskToReadyList+0xd4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d903      	bls.n	8004110 <prvAddNewTaskToReadyList+0x74>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4a18      	ldr	r2, [pc, #96]	; (8004170 <prvAddNewTaskToReadyList+0xd4>)
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4a15      	ldr	r2, [pc, #84]	; (8004174 <prvAddNewTaskToReadyList+0xd8>)
 800411e:	441a      	add	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f7ff f8fd 	bl	8003326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800412c:	f001 fa42 	bl	80055b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <prvAddNewTaskToReadyList+0xcc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <prvAddNewTaskToReadyList+0xc8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	429a      	cmp	r2, r3
 8004144:	d207      	bcs.n	8004156 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004146:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <prvAddNewTaskToReadyList+0xdc>)
 8004148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000e54 	.word	0x20000e54
 8004164:	20000980 	.word	0x20000980
 8004168:	20000e60 	.word	0x20000e60
 800416c:	20000e70 	.word	0x20000e70
 8004170:	20000e5c 	.word	0x20000e5c
 8004174:	20000984 	.word	0x20000984
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d017      	beq.n	80041be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <vTaskDelay+0x60>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <vTaskDelay+0x30>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60bb      	str	r3, [r7, #8]
}
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041ac:	f000 f88a 	bl	80042c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041b0:	2100      	movs	r1, #0
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fcfe 	bl	8004bb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041b8:	f000 f892 	bl	80042e0 <xTaskResumeAll>
 80041bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d107      	bne.n	80041d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <vTaskDelay+0x64>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000e7c 	.word	0x20000e7c
 80041e0:	e000ed04 	.word	0xe000ed04

080041e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041f2:	463a      	mov	r2, r7
 80041f4:	1d39      	adds	r1, r7, #4
 80041f6:	f107 0308 	add.w	r3, r7, #8
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f832 	bl	8003264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	9202      	str	r2, [sp, #8]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	2300      	movs	r3, #0
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2300      	movs	r3, #0
 8004210:	460a      	mov	r2, r1
 8004212:	4924      	ldr	r1, [pc, #144]	; (80042a4 <vTaskStartScheduler+0xc0>)
 8004214:	4824      	ldr	r0, [pc, #144]	; (80042a8 <vTaskStartScheduler+0xc4>)
 8004216:	f7ff fdf9 	bl	8003e0c <xTaskCreateStatic>
 800421a:	4603      	mov	r3, r0
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <vTaskStartScheduler+0xc8>)
 800421e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004220:	4b22      	ldr	r3, [pc, #136]	; (80042ac <vTaskStartScheduler+0xc8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e001      	b.n	8004232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d102      	bne.n	800423e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004238:	f000 fd10 	bl	8004c5c <xTimerCreateTimerTask>
 800423c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d11b      	bne.n	800427c <vTaskStartScheduler+0x98>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	613b      	str	r3, [r7, #16]
}
 8004256:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <vTaskStartScheduler+0xcc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3354      	adds	r3, #84	; 0x54
 800425e:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <vTaskStartScheduler+0xd0>)
 8004260:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <vTaskStartScheduler+0xd4>)
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <vTaskStartScheduler+0xd8>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <vTaskStartScheduler+0xdc>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004276:	f001 f8cb 	bl	8005410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800427a:	e00e      	b.n	800429a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d10a      	bne.n	800429a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	60fb      	str	r3, [r7, #12]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <vTaskStartScheduler+0xb4>
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	08008aa8 	.word	0x08008aa8
 80042a8:	080048e9 	.word	0x080048e9
 80042ac:	20000e78 	.word	0x20000e78
 80042b0:	20000980 	.word	0x20000980
 80042b4:	20000010 	.word	0x20000010
 80042b8:	20000e74 	.word	0x20000e74
 80042bc:	20000e60 	.word	0x20000e60
 80042c0:	20000e58 	.word	0x20000e58

080042c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <vTaskSuspendAll+0x18>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	4a03      	ldr	r2, [pc, #12]	; (80042dc <vTaskSuspendAll+0x18>)
 80042d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000e7c 	.word	0x20000e7c

080042e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042ee:	4b42      	ldr	r3, [pc, #264]	; (80043f8 <xTaskResumeAll+0x118>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <xTaskResumeAll+0x2c>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	603b      	str	r3, [r7, #0]
}
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800430c:	f001 f922 	bl	8005554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004310:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <xTaskResumeAll+0x118>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	4a38      	ldr	r2, [pc, #224]	; (80043f8 <xTaskResumeAll+0x118>)
 8004318:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800431a:	4b37      	ldr	r3, [pc, #220]	; (80043f8 <xTaskResumeAll+0x118>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d162      	bne.n	80043e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004322:	4b36      	ldr	r3, [pc, #216]	; (80043fc <xTaskResumeAll+0x11c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d05e      	beq.n	80043e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800432a:	e02f      	b.n	800438c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800432c:	4b34      	ldr	r3, [pc, #208]	; (8004400 <xTaskResumeAll+0x120>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3318      	adds	r3, #24
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f851 	bl	80033e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f84c 	bl	80033e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <xTaskResumeAll+0x124>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d903      	bls.n	800435c <xTaskResumeAll+0x7c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <xTaskResumeAll+0x124>)
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4a27      	ldr	r2, [pc, #156]	; (8004408 <xTaskResumeAll+0x128>)
 800436a:	441a      	add	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f7fe ffd7 	bl	8003326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4b23      	ldr	r3, [pc, #140]	; (800440c <xTaskResumeAll+0x12c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004386:	4b22      	ldr	r3, [pc, #136]	; (8004410 <xTaskResumeAll+0x130>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800438c:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <xTaskResumeAll+0x120>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1cb      	bne.n	800432c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800439a:	f000 fb5f 	bl	8004a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <xTaskResumeAll+0x134>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043aa:	f000 f847 	bl	800443c <xTaskIncrementTick>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043b4:	4b16      	ldr	r3, [pc, #88]	; (8004410 <xTaskResumeAll+0x130>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3b01      	subs	r3, #1
 80043be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f1      	bne.n	80043aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <xTaskResumeAll+0x134>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <xTaskResumeAll+0x130>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <xTaskResumeAll+0x138>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043e8:	f001 f8e4 	bl	80055b4 <vPortExitCritical>

	return xAlreadyYielded;
 80043ec:	68bb      	ldr	r3, [r7, #8]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000e7c 	.word	0x20000e7c
 80043fc:	20000e54 	.word	0x20000e54
 8004400:	20000e14 	.word	0x20000e14
 8004404:	20000e5c 	.word	0x20000e5c
 8004408:	20000984 	.word	0x20000984
 800440c:	20000980 	.word	0x20000980
 8004410:	20000e68 	.word	0x20000e68
 8004414:	20000e64 	.word	0x20000e64
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <xTaskGetTickCount+0x1c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004428:	687b      	ldr	r3, [r7, #4]
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000e58 	.word	0x20000e58

0800443c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004446:	4b4f      	ldr	r3, [pc, #316]	; (8004584 <xTaskIncrementTick+0x148>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 808f 	bne.w	800456e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004450:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <xTaskIncrementTick+0x14c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004458:	4a4b      	ldr	r2, [pc, #300]	; (8004588 <xTaskIncrementTick+0x14c>)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d120      	bne.n	80044a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004464:	4b49      	ldr	r3, [pc, #292]	; (800458c <xTaskIncrementTick+0x150>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <xTaskIncrementTick+0x48>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	603b      	str	r3, [r7, #0]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <xTaskIncrementTick+0x46>
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <xTaskIncrementTick+0x150>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <xTaskIncrementTick+0x154>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3f      	ldr	r2, [pc, #252]	; (800458c <xTaskIncrementTick+0x150>)
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4a3f      	ldr	r2, [pc, #252]	; (8004590 <xTaskIncrementTick+0x154>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <xTaskIncrementTick+0x158>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	4a3d      	ldr	r2, [pc, #244]	; (8004594 <xTaskIncrementTick+0x158>)
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	f000 fadb 	bl	8004a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044a6:	4b3c      	ldr	r3, [pc, #240]	; (8004598 <xTaskIncrementTick+0x15c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d349      	bcc.n	8004544 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <xTaskIncrementTick+0x150>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d104      	bne.n	80044c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <xTaskIncrementTick+0x15c>)
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	601a      	str	r2, [r3, #0]
					break;
 80044c2:	e03f      	b.n	8004544 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c4:	4b31      	ldr	r3, [pc, #196]	; (800458c <xTaskIncrementTick+0x150>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d203      	bcs.n	80044e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044dc:	4a2e      	ldr	r2, [pc, #184]	; (8004598 <xTaskIncrementTick+0x15c>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044e2:	e02f      	b.n	8004544 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe ff79 	bl	80033e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3318      	adds	r3, #24
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe ff70 	bl	80033e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <xTaskIncrementTick+0x160>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d903      	bls.n	8004514 <xTaskIncrementTick+0xd8>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <xTaskIncrementTick+0x160>)
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <xTaskIncrementTick+0x164>)
 8004522:	441a      	add	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7fe fefb 	bl	8003326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <xTaskIncrementTick+0x168>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	429a      	cmp	r2, r3
 800453c:	d3b8      	bcc.n	80044b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800453e:	2301      	movs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004542:	e7b5      	b.n	80044b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <xTaskIncrementTick+0x168>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4915      	ldr	r1, [pc, #84]	; (80045a0 <xTaskIncrementTick+0x164>)
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d901      	bls.n	8004560 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <xTaskIncrementTick+0x16c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004568:	2301      	movs	r3, #1
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	e004      	b.n	8004578 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <xTaskIncrementTick+0x170>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3301      	adds	r3, #1
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <xTaskIncrementTick+0x170>)
 8004576:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004578:	697b      	ldr	r3, [r7, #20]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000e7c 	.word	0x20000e7c
 8004588:	20000e58 	.word	0x20000e58
 800458c:	20000e0c 	.word	0x20000e0c
 8004590:	20000e10 	.word	0x20000e10
 8004594:	20000e6c 	.word	0x20000e6c
 8004598:	20000e74 	.word	0x20000e74
 800459c:	20000e5c 	.word	0x20000e5c
 80045a0:	20000984 	.word	0x20000984
 80045a4:	20000980 	.word	0x20000980
 80045a8:	20000e68 	.word	0x20000e68
 80045ac:	20000e64 	.word	0x20000e64

080045b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045b6:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <vTaskSwitchContext+0xb0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <vTaskSwitchContext+0xb4>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045c4:	e046      	b.n	8004654 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80045c6:	4b27      	ldr	r3, [pc, #156]	; (8004664 <vTaskSwitchContext+0xb4>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045cc:	4b26      	ldr	r3, [pc, #152]	; (8004668 <vTaskSwitchContext+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e010      	b.n	80045f6 <vTaskSwitchContext+0x46>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	607b      	str	r3, [r7, #4]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <vTaskSwitchContext+0x3e>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	491d      	ldr	r1, [pc, #116]	; (800466c <vTaskSwitchContext+0xbc>)
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0e4      	beq.n	80045d4 <vTaskSwitchContext+0x24>
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <vTaskSwitchContext+0xbc>)
 8004616:	4413      	add	r3, r2
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	3308      	adds	r3, #8
 800462c:	429a      	cmp	r2, r3
 800462e:	d104      	bne.n	800463a <vTaskSwitchContext+0x8a>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a0b      	ldr	r2, [pc, #44]	; (8004670 <vTaskSwitchContext+0xc0>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	4a08      	ldr	r2, [pc, #32]	; (8004668 <vTaskSwitchContext+0xb8>)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <vTaskSwitchContext+0xc0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3354      	adds	r3, #84	; 0x54
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <vTaskSwitchContext+0xc4>)
 8004652:	6013      	str	r3, [r2, #0]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	20000e7c 	.word	0x20000e7c
 8004664:	20000e68 	.word	0x20000e68
 8004668:	20000e5c 	.word	0x20000e5c
 800466c:	20000984 	.word	0x20000984
 8004670:	20000980 	.word	0x20000980
 8004674:	20000010 	.word	0x20000010

08004678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	60fb      	str	r3, [r7, #12]
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <vTaskPlaceOnEventList+0x44>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3318      	adds	r3, #24
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fe fe61 	bl	800336e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046ac:	2101      	movs	r1, #1
 80046ae:	6838      	ldr	r0, [r7, #0]
 80046b0:	f000 fa80 	bl	8004bb4 <prvAddCurrentTaskToDelayedList>
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000980 	.word	0x20000980

080046c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	617b      	str	r3, [r7, #20]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <vTaskPlaceOnEventListRestricted+0x54>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3318      	adds	r3, #24
 80046ee:	4619      	mov	r1, r3
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7fe fe18 	bl	8003326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68b8      	ldr	r0, [r7, #8]
 8004706:	f000 fa55 	bl	8004bb4 <prvAddCurrentTaskToDelayedList>
	}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000980 	.word	0x20000980

08004718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60fb      	str	r3, [r7, #12]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	3318      	adds	r3, #24
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fe49 	bl	80033e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <xTaskRemoveFromEventList+0xb0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11d      	bne.n	8004792 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fe40 	bl	80033e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <xTaskRemoveFromEventList+0xb4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d903      	bls.n	8004774 <xTaskRemoveFromEventList+0x5c>
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	4a16      	ldr	r2, [pc, #88]	; (80047cc <xTaskRemoveFromEventList+0xb4>)
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <xTaskRemoveFromEventList+0xb8>)
 8004782:	441a      	add	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fe fdcb 	bl	8003326 <vListInsertEnd>
 8004790:	e005      	b.n	800479e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	3318      	adds	r3, #24
 8004796:	4619      	mov	r1, r3
 8004798:	480e      	ldr	r0, [pc, #56]	; (80047d4 <xTaskRemoveFromEventList+0xbc>)
 800479a:	f7fe fdc4 	bl	8003326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <xTaskRemoveFromEventList+0xc0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d905      	bls.n	80047b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <xTaskRemoveFromEventList+0xc4>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e001      	b.n	80047bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047bc:	697b      	ldr	r3, [r7, #20]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000e7c 	.word	0x20000e7c
 80047cc:	20000e5c 	.word	0x20000e5c
 80047d0:	20000984 	.word	0x20000984
 80047d4:	20000e14 	.word	0x20000e14
 80047d8:	20000980 	.word	0x20000980
 80047dc:	20000e68 	.word	0x20000e68

080047e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <vTaskInternalSetTimeOutState+0x24>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <vTaskInternalSetTimeOutState+0x28>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	20000e6c 	.word	0x20000e6c
 8004808:	20000e58 	.word	0x20000e58

0800480c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	613b      	str	r3, [r7, #16]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800484e:	f000 fe81 	bl	8005554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <xTaskCheckForTimeOut+0xbc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d102      	bne.n	8004872 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800486c:	2300      	movs	r3, #0
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	e023      	b.n	80048ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <xTaskCheckForTimeOut+0xc0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d007      	beq.n	800488e <xTaskCheckForTimeOut+0x82>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004888:	2301      	movs	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e015      	b.n	80048ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	429a      	cmp	r2, r3
 8004896:	d20b      	bcs.n	80048b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff9b 	bl	80047e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	e004      	b.n	80048ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048b6:	2301      	movs	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048ba:	f000 fe7b 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 80048be:	69fb      	ldr	r3, [r7, #28]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000e58 	.word	0x20000e58
 80048cc:	20000e6c 	.word	0x20000e6c

080048d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <vTaskMissedYield+0x14>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	20000e68 	.word	0x20000e68

080048e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048f0:	f000 f852 	bl	8004998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <prvIdleTask+0x28>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d9f9      	bls.n	80048f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <prvIdleTask+0x2c>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800490c:	e7f0      	b.n	80048f0 <prvIdleTask+0x8>
 800490e:	bf00      	nop
 8004910:	20000984 	.word	0x20000984
 8004914:	e000ed04 	.word	0xe000ed04

08004918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	e00c      	b.n	800493e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <prvInitialiseTaskLists+0x60>)
 8004930:	4413      	add	r3, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fcca 	bl	80032cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3301      	adds	r3, #1
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b37      	cmp	r3, #55	; 0x37
 8004942:	d9ef      	bls.n	8004924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004944:	480d      	ldr	r0, [pc, #52]	; (800497c <prvInitialiseTaskLists+0x64>)
 8004946:	f7fe fcc1 	bl	80032cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800494a:	480d      	ldr	r0, [pc, #52]	; (8004980 <prvInitialiseTaskLists+0x68>)
 800494c:	f7fe fcbe 	bl	80032cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004950:	480c      	ldr	r0, [pc, #48]	; (8004984 <prvInitialiseTaskLists+0x6c>)
 8004952:	f7fe fcbb 	bl	80032cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004956:	480c      	ldr	r0, [pc, #48]	; (8004988 <prvInitialiseTaskLists+0x70>)
 8004958:	f7fe fcb8 	bl	80032cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800495c:	480b      	ldr	r0, [pc, #44]	; (800498c <prvInitialiseTaskLists+0x74>)
 800495e:	f7fe fcb5 	bl	80032cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <prvInitialiseTaskLists+0x78>)
 8004964:	4a05      	ldr	r2, [pc, #20]	; (800497c <prvInitialiseTaskLists+0x64>)
 8004966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <prvInitialiseTaskLists+0x7c>)
 800496a:	4a05      	ldr	r2, [pc, #20]	; (8004980 <prvInitialiseTaskLists+0x68>)
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000984 	.word	0x20000984
 800497c:	20000de4 	.word	0x20000de4
 8004980:	20000df8 	.word	0x20000df8
 8004984:	20000e14 	.word	0x20000e14
 8004988:	20000e28 	.word	0x20000e28
 800498c:	20000e40 	.word	0x20000e40
 8004990:	20000e0c 	.word	0x20000e0c
 8004994:	20000e10 	.word	0x20000e10

08004998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800499e:	e019      	b.n	80049d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049a0:	f000 fdd8 	bl	8005554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <prvCheckTasksWaitingTermination+0x50>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe fd15 	bl	80033e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <prvCheckTasksWaitingTermination+0x54>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <prvCheckTasksWaitingTermination+0x54>)
 80049be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <prvCheckTasksWaitingTermination+0x58>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <prvCheckTasksWaitingTermination+0x58>)
 80049c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ca:	f000 fdf3 	bl	80055b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f810 	bl	80049f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <prvCheckTasksWaitingTermination+0x58>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e1      	bne.n	80049a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000e28 	.word	0x20000e28
 80049ec:	20000e54 	.word	0x20000e54
 80049f0:	20000e3c 	.word	0x20000e3c

080049f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3354      	adds	r3, #84	; 0x54
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 ff17 	bl	8006834 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d108      	bne.n	8004a22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 ff8b 	bl	8005930 <vPortFree>
				vPortFree( pxTCB );
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 ff88 	bl	8005930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a20:	e018      	b.n	8004a54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d103      	bne.n	8004a34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 ff7f 	bl	8005930 <vPortFree>
	}
 8004a32:	e00f      	b.n	8004a54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d00a      	beq.n	8004a54 <prvDeleteTCB+0x60>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	60fb      	str	r3, [r7, #12]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <prvDeleteTCB+0x5e>
	}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <prvResetNextTaskUnblockTime+0x38>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <prvResetNextTaskUnblockTime+0x3c>)
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a74:	e008      	b.n	8004a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <prvResetNextTaskUnblockTime+0x38>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <prvResetNextTaskUnblockTime+0x3c>)
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	20000e0c 	.word	0x20000e0c
 8004a98:	20000e74 	.word	0x20000e74

08004a9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <xTaskGetSchedulerState+0x34>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	e008      	b.n	8004ac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <xTaskGetSchedulerState+0x38>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	e001      	b.n	8004ac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ac2:	687b      	ldr	r3, [r7, #4]
	}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000e60 	.word	0x20000e60
 8004ad4:	20000e7c 	.word	0x20000e7c

08004ad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d056      	beq.n	8004b9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aee:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <xTaskPriorityDisinherit+0xd0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d00a      	beq.n	8004b0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	60fb      	str	r3, [r7, #12]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	60bb      	str	r3, [r7, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	1e5a      	subs	r2, r3, #1
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d02c      	beq.n	8004b9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d128      	bne.n	8004b9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fc46 	bl	80033e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <xTaskPriorityDisinherit+0xd4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d903      	bls.n	8004b7c <xTaskPriorityDisinherit+0xa4>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <xTaskPriorityDisinherit+0xd4>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <xTaskPriorityDisinherit+0xd8>)
 8004b8a:	441a      	add	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fe fbc7 	bl	8003326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b9c:	697b      	ldr	r3, [r7, #20]
	}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000980 	.word	0x20000980
 8004bac:	20000e5c 	.word	0x20000e5c
 8004bb0:	20000984 	.word	0x20000984

08004bb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <prvAddCurrentTaskToDelayedList+0x90>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fc08 	bl	80033e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d10a      	bne.n	8004bee <prvAddCurrentTaskToDelayedList+0x3a>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4819      	ldr	r0, [pc, #100]	; (8004c4c <prvAddCurrentTaskToDelayedList+0x98>)
 8004be8:	f7fe fb9d 	bl	8003326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bec:	e026      	b.n	8004c3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d209      	bcs.n	8004c1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7fe fbab 	bl	800336e <vListInsert>
}
 8004c18:	e010      	b.n	8004c3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe fba1 	bl	800336e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d202      	bcs.n	8004c3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000e58 	.word	0x20000e58
 8004c48:	20000980 	.word	0x20000980
 8004c4c:	20000e40 	.word	0x20000e40
 8004c50:	20000e10 	.word	0x20000e10
 8004c54:	20000e0c 	.word	0x20000e0c
 8004c58:	20000e74 	.word	0x20000e74

08004c5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c66:	f000 fb07 	bl	8005278 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <xTimerCreateTimerTask+0x80>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c7a:	1d3a      	adds	r2, r7, #4
 8004c7c:	f107 0108 	add.w	r1, r7, #8
 8004c80:	f107 030c 	add.w	r3, r7, #12
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe fb07 	bl	8003298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	9202      	str	r2, [sp, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	2302      	movs	r3, #2
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	4910      	ldr	r1, [pc, #64]	; (8004ce0 <xTimerCreateTimerTask+0x84>)
 8004c9e:	4811      	ldr	r0, [pc, #68]	; (8004ce4 <xTimerCreateTimerTask+0x88>)
 8004ca0:	f7ff f8b4 	bl	8003e0c <xTaskCreateStatic>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <xTimerCreateTimerTask+0x8c>)
 8004ca8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <xTimerCreateTimerTask+0x8c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	613b      	str	r3, [r7, #16]
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cd2:	697b      	ldr	r3, [r7, #20]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000eb0 	.word	0x20000eb0
 8004ce0:	08008ab0 	.word	0x08008ab0
 8004ce4:	08004e21 	.word	0x08004e21
 8004ce8:	20000eb4 	.word	0x20000eb4

08004cec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	623b      	str	r3, [r7, #32]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <xTimerGenericCommand+0x98>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02a      	beq.n	8004d78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b05      	cmp	r3, #5
 8004d32:	dc18      	bgt.n	8004d66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d34:	f7ff feb2 	bl	8004a9c <xTaskGetSchedulerState>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d109      	bne.n	8004d52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d3e:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <xTimerGenericCommand+0x98>)
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	f107 0110 	add.w	r1, r7, #16
 8004d46:	2300      	movs	r3, #0
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	f7fe fc77 	bl	800363c <xQueueGenericSend>
 8004d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8004d50:	e012      	b.n	8004d78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d52:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <xTimerGenericCommand+0x98>)
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f107 0110 	add.w	r1, r7, #16
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f7fe fc6d 	bl	800363c <xQueueGenericSend>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24
 8004d64:	e008      	b.n	8004d78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <xTimerGenericCommand+0x98>)
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	f107 0110 	add.w	r1, r7, #16
 8004d6e:	2300      	movs	r3, #0
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	f7fe fd61 	bl	8003838 <xQueueGenericSendFromISR>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3728      	adds	r7, #40	; 0x28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000eb0 	.word	0x20000eb0

08004d88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <prvProcessExpiredTimer+0x94>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fb1d 	bl	80033e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d022      	beq.n	8004dfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	18d1      	adds	r1, r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	6978      	ldr	r0, [r7, #20]
 8004dc2:	f000 f8d1 	bl	8004f68 <prvInsertTimerInActiveList>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01f      	beq.n	8004e0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	6978      	ldr	r0, [r7, #20]
 8004dd8:	f7ff ff88 	bl	8004cec <xTimerGenericCommand>
 8004ddc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d113      	bne.n	8004e0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60fb      	str	r3, [r7, #12]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	4798      	blx	r3
}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000ea8 	.word	0x20000ea8

08004e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e28:	f107 0308 	add.w	r3, r7, #8
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f857 	bl	8004ee0 <prvGetNextExpireTime>
 8004e32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4619      	mov	r1, r3
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f803 	bl	8004e44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e3e:	f000 f8d5 	bl	8004fec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e42:	e7f1      	b.n	8004e28 <prvTimerTask+0x8>

08004e44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e4e:	f7ff fa39 	bl	80042c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e52:	f107 0308 	add.w	r3, r7, #8
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f866 	bl	8004f28 <prvSampleTimeNow>
 8004e5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d130      	bne.n	8004ec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <prvProcessTimerOrBlockTask+0x3c>
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d806      	bhi.n	8004e80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e72:	f7ff fa35 	bl	80042e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff85 	bl	8004d88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e7e:	e024      	b.n	8004eca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <prvProcessTimerOrBlockTask+0x90>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <prvProcessTimerOrBlockTask+0x50>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <prvProcessTimerOrBlockTask+0x52>
 8004e94:	2300      	movs	r3, #0
 8004e96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <prvProcessTimerOrBlockTask+0x94>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fe ff7d 	bl	8003da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004eaa:	f7ff fa19 	bl	80042e0 <xTaskResumeAll>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10a      	bne.n	8004eca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <prvProcessTimerOrBlockTask+0x98>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
}
 8004ec4:	e001      	b.n	8004eca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ec6:	f7ff fa0b 	bl	80042e0 <xTaskResumeAll>
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000eac 	.word	0x20000eac
 8004ed8:	20000eb0 	.word	0x20000eb0
 8004edc:	e000ed04 	.word	0xe000ed04

08004ee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <prvGetNextExpireTime+0x44>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <prvGetNextExpireTime+0x16>
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	e000      	b.n	8004ef8 <prvGetNextExpireTime+0x18>
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <prvGetNextExpireTime+0x44>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e001      	b.n	8004f14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000ea8 	.word	0x20000ea8

08004f28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f30:	f7ff fa74 	bl	800441c <xTaskGetTickCount>
 8004f34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <prvSampleTimeNow+0x3c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d205      	bcs.n	8004f4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f40:	f000 f936 	bl	80051b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e002      	b.n	8004f52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f52:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <prvSampleTimeNow+0x3c>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f58:	68fb      	ldr	r3, [r7, #12]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000eb8 	.word	0x20000eb8

08004f68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d812      	bhi.n	8004fb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	e01b      	b.n	8004fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <prvInsertTimerInActiveList+0x7c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f7fe f9de 	bl	800336e <vListInsert>
 8004fb2:	e012      	b.n	8004fda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d206      	bcs.n	8004fca <prvInsertTimerInActiveList+0x62>
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d302      	bcc.n	8004fca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e007      	b.n	8004fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <prvInsertTimerInActiveList+0x80>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7fe f9ca 	bl	800336e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fda:	697b      	ldr	r3, [r7, #20]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000eac 	.word	0x20000eac
 8004fe8:	20000ea8 	.word	0x20000ea8

08004fec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08e      	sub	sp, #56	; 0x38
 8004ff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ff2:	e0ca      	b.n	800518a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da18      	bge.n	800502c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	61fb      	str	r3, [r7, #28]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005022:	6850      	ldr	r0, [r2, #4]
 8005024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005026:	6892      	ldr	r2, [r2, #8]
 8005028:	4611      	mov	r1, r2
 800502a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f2c0 80aa 	blt.w	8005188 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	3304      	adds	r3, #4
 8005044:	4618      	mov	r0, r3
 8005046:	f7fe f9cb 	bl	80033e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800504a:	463b      	mov	r3, r7
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff6b 	bl	8004f28 <prvSampleTimeNow>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b09      	cmp	r3, #9
 8005058:	f200 8097 	bhi.w	800518a <prvProcessReceivedCommands+0x19e>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <prvProcessReceivedCommands+0x78>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	0800508d 	.word	0x0800508d
 8005068:	0800508d 	.word	0x0800508d
 800506c:	0800508d 	.word	0x0800508d
 8005070:	08005101 	.word	0x08005101
 8005074:	08005115 	.word	0x08005115
 8005078:	0800515f 	.word	0x0800515f
 800507c:	0800508d 	.word	0x0800508d
 8005080:	0800508d 	.word	0x0800508d
 8005084:	08005101 	.word	0x08005101
 8005088:	08005115 	.word	0x08005115
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	18d1      	adds	r1, r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ac:	f7ff ff5c 	bl	8004f68 <prvInsertTimerInActiveList>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d069      	beq.n	800518a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05e      	beq.n	800518a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	441a      	add	r2, r3
 80050d4:	2300      	movs	r3, #0
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	2300      	movs	r3, #0
 80050da:	2100      	movs	r1, #0
 80050dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050de:	f7ff fe05 	bl	8004cec <xTimerGenericCommand>
 80050e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d14f      	bne.n	800518a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	61bb      	str	r3, [r7, #24]
}
 80050fc:	bf00      	nop
 80050fe:	e7fe      	b.n	80050fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005112:	e03a      	b.n	800518a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	617b      	str	r3, [r7, #20]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	18d1      	adds	r1, r2, r3
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005158:	f7ff ff06 	bl	8004f68 <prvInsertTimerInActiveList>
					break;
 800515c:	e015      	b.n	800518a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d103      	bne.n	8005174 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800516c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800516e:	f000 fbdf 	bl	8005930 <vPortFree>
 8005172:	e00a      	b.n	800518a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	b2da      	uxtb	r2, r3
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005186:	e000      	b.n	800518a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <prvProcessReceivedCommands+0x1c0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	1d39      	adds	r1, r7, #4
 8005190:	2200      	movs	r2, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe fbec 	bl	8003970 <xQueueReceive>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	f47f af2a 	bne.w	8004ff4 <prvProcessReceivedCommands+0x8>
	}
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	3730      	adds	r7, #48	; 0x30
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000eb0 	.word	0x20000eb0

080051b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051b6:	e048      	b.n	800524a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051b8:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <prvSwitchTimerLists+0xc0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c2:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <prvSwitchTimerLists+0xc0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe f905 	bl	80033e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02e      	beq.n	800524a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d90e      	bls.n	800521c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <prvSwitchTimerLists+0xc0>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7fe f8aa 	bl	800336e <vListInsert>
 800521a:	e016      	b.n	800524a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800521c:	2300      	movs	r3, #0
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	2100      	movs	r1, #0
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff fd60 	bl	8004cec <xTimerGenericCommand>
 800522c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	603b      	str	r3, [r7, #0]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <prvSwitchTimerLists+0xc0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1b1      	bne.n	80051b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <prvSwitchTimerLists+0xc0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <prvSwitchTimerLists+0xc4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a04      	ldr	r2, [pc, #16]	; (8005270 <prvSwitchTimerLists+0xc0>)
 8005260:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005262:	4a04      	ldr	r2, [pc, #16]	; (8005274 <prvSwitchTimerLists+0xc4>)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	6013      	str	r3, [r2, #0]
}
 8005268:	bf00      	nop
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000ea8 	.word	0x20000ea8
 8005274:	20000eac 	.word	0x20000eac

08005278 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800527e:	f000 f969 	bl	8005554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <prvCheckForValidListAndQueue+0x60>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d120      	bne.n	80052cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800528a:	4814      	ldr	r0, [pc, #80]	; (80052dc <prvCheckForValidListAndQueue+0x64>)
 800528c:	f7fe f81e 	bl	80032cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005290:	4813      	ldr	r0, [pc, #76]	; (80052e0 <prvCheckForValidListAndQueue+0x68>)
 8005292:	f7fe f81b 	bl	80032cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <prvCheckForValidListAndQueue+0x6c>)
 8005298:	4a10      	ldr	r2, [pc, #64]	; (80052dc <prvCheckForValidListAndQueue+0x64>)
 800529a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800529c:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <prvCheckForValidListAndQueue+0x70>)
 800529e:	4a10      	ldr	r2, [pc, #64]	; (80052e0 <prvCheckForValidListAndQueue+0x68>)
 80052a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <prvCheckForValidListAndQueue+0x74>)
 80052a8:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <prvCheckForValidListAndQueue+0x78>)
 80052aa:	2110      	movs	r1, #16
 80052ac:	200a      	movs	r0, #10
 80052ae:	f7fe f929 	bl	8003504 <xQueueGenericCreateStatic>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <prvCheckForValidListAndQueue+0x60>)
 80052b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <prvCheckForValidListAndQueue+0x60>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <prvCheckForValidListAndQueue+0x60>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	490b      	ldr	r1, [pc, #44]	; (80052f4 <prvCheckForValidListAndQueue+0x7c>)
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fd42 	bl	8003d50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052cc:	f000 f972 	bl	80055b4 <vPortExitCritical>
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000eb0 	.word	0x20000eb0
 80052dc:	20000e80 	.word	0x20000e80
 80052e0:	20000e94 	.word	0x20000e94
 80052e4:	20000ea8 	.word	0x20000ea8
 80052e8:	20000eac 	.word	0x20000eac
 80052ec:	20000f5c 	.word	0x20000f5c
 80052f0:	20000ebc 	.word	0x20000ebc
 80052f4:	08008ab8 	.word	0x08008ab8

080052f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b04      	subs	r3, #4
 8005308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b04      	subs	r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b04      	subs	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005328:	4a0c      	ldr	r2, [pc, #48]	; (800535c <pxPortInitialiseStack+0x64>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b14      	subs	r3, #20
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b04      	subs	r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f06f 0202 	mvn.w	r2, #2
 8005346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3b20      	subs	r3, #32
 800534c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	08005361 	.word	0x08005361

08005360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <prvTaskExitError+0x54>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d00a      	beq.n	800538a <prvTaskExitError+0x2a>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <prvTaskExitError+0x28>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60bb      	str	r3, [r7, #8]
}
 800539c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800539e:	bf00      	nop
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0fc      	beq.n	80053a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	2000000c 	.word	0x2000000c
	...

080053c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <pxCurrentTCBConst2>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f380 8809 	msr	PSP, r0
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	4770      	bx	lr
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst2>:
 80053e0:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053e8:	4808      	ldr	r0, [pc, #32]	; (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800540a:	bf00      	nop
 800540c:	e000ed08 	.word	0xe000ed08

08005410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005416:	4b46      	ldr	r3, [pc, #280]	; (8005530 <xPortStartScheduler+0x120>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a46      	ldr	r2, [pc, #280]	; (8005534 <xPortStartScheduler+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10a      	bne.n	8005436 <xPortStartScheduler+0x26>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005436:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <xPortStartScheduler+0x120>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <xPortStartScheduler+0x128>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10a      	bne.n	8005456 <xPortStartScheduler+0x46>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60fb      	str	r3, [r7, #12]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <xPortStartScheduler+0x12c>)
 8005458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <xPortStartScheduler+0x130>)
 800547c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <xPortStartScheduler+0x134>)
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005484:	e009      	b.n	800549a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005486:	4b2f      	ldr	r3, [pc, #188]	; (8005544 <xPortStartScheduler+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <xPortStartScheduler+0x134>)
 800548e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	b2db      	uxtb	r3, r3
 8005498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d0ef      	beq.n	8005486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054a6:	4b27      	ldr	r3, [pc, #156]	; (8005544 <xPortStartScheduler+0x134>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1c3 0307 	rsb	r3, r3, #7
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d00a      	beq.n	80054c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60bb      	str	r3, [r7, #8]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <xPortStartScheduler+0x134>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <xPortStartScheduler+0x134>)
 80054d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <xPortStartScheduler+0x134>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054da:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <xPortStartScheduler+0x134>)
 80054dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <xPortStartScheduler+0x138>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <xPortStartScheduler+0x138>)
 80054ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <xPortStartScheduler+0x138>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <xPortStartScheduler+0x138>)
 80054f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054fe:	f000 f8dd 	bl	80056bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <xPortStartScheduler+0x13c>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005508:	f000 f8fc 	bl	8005704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <xPortStartScheduler+0x140>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0f      	ldr	r2, [pc, #60]	; (8005550 <xPortStartScheduler+0x140>)
 8005512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005518:	f7ff ff66 	bl	80053e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800551c:	f7ff f848 	bl	80045b0 <vTaskSwitchContext>
	prvTaskExitError();
 8005520:	f7ff ff1e 	bl	8005360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000ed00 	.word	0xe000ed00
 8005534:	410fc271 	.word	0x410fc271
 8005538:	410fc270 	.word	0x410fc270
 800553c:	e000e400 	.word	0xe000e400
 8005540:	20000fac 	.word	0x20000fac
 8005544:	20000fb0 	.word	0x20000fb0
 8005548:	e000ed20 	.word	0xe000ed20
 800554c:	2000000c 	.word	0x2000000c
 8005550:	e000ef34 	.word	0xe000ef34

08005554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	607b      	str	r3, [r7, #4]
}
 800556c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <vPortEnterCritical+0x58>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	4a0d      	ldr	r2, [pc, #52]	; (80055ac <vPortEnterCritical+0x58>)
 8005576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <vPortEnterCritical+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10f      	bne.n	80055a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <vPortEnterCritical+0x5c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	603b      	str	r3, [r7, #0]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <vPortEnterCritical+0x4a>
	}
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	2000000c 	.word	0x2000000c
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <vPortExitCritical+0x50>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <vPortExitCritical+0x24>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	607b      	str	r3, [r7, #4]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <vPortExitCritical+0x50>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3b01      	subs	r3, #1
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <vPortExitCritical+0x50>)
 80055e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <vPortExitCritical+0x50>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <vPortExitCritical+0x42>
 80055ea:	2300      	movs	r3, #0
 80055ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f383 8811 	msr	BASEPRI, r3
}
 80055f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000000c 	.word	0x2000000c
	...

08005610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005610:	f3ef 8009 	mrs	r0, PSP
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <pxCurrentTCBConst>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f01e 0f10 	tst.w	lr, #16
 8005620:	bf08      	it	eq
 8005622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005634:	f380 8811 	msr	BASEPRI, r0
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f7fe ffb6 	bl	80045b0 <vTaskSwitchContext>
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f380 8811 	msr	BASEPRI, r0
 800564c:	bc09      	pop	{r0, r3}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005656:	f01e 0f10 	tst.w	lr, #16
 800565a:	bf08      	it	eq
 800565c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005660:	f380 8809 	msr	PSP, r0
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst>:
 8005670:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005692:	f7fe fed3 	bl	800443c <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <xPortSysTickHandler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
}
 80056ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <vPortSetupTimerInterrupt+0x44>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010
 80056f4:	e000e018 	.word	0xe000e018
 80056f8:	20000000 	.word	0x20000000
 80056fc:	10624dd3 	.word	0x10624dd3
 8005700:	e000e014 	.word	0xe000e014

08005704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005714 <vPortEnableVFP+0x10>
 8005708:	6801      	ldr	r1, [r0, #0]
 800570a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800570e:	6001      	str	r1, [r0, #0]
 8005710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005712:	bf00      	nop
 8005714:	e000ed88 	.word	0xe000ed88

08005718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800571e:	f3ef 8305 	mrs	r3, IPSR
 8005722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d914      	bls.n	8005754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <vPortValidateInterruptPriority+0x70>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <vPortValidateInterruptPriority+0x74>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	7afa      	ldrb	r2, [r7, #11]
 800573a:	429a      	cmp	r2, r3
 800573c:	d20a      	bcs.n	8005754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005754:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <vPortValidateInterruptPriority+0x78>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <vPortValidateInterruptPriority+0x7c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d90a      	bls.n	800577a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	603b      	str	r3, [r7, #0]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <vPortValidateInterruptPriority+0x60>
	}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	e000e3f0 	.word	0xe000e3f0
 800578c:	20000fac 	.word	0x20000fac
 8005790:	e000ed0c 	.word	0xe000ed0c
 8005794:	20000fb0 	.word	0x20000fb0

08005798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057a4:	f7fe fd8e 	bl	80042c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057a8:	4b5b      	ldr	r3, [pc, #364]	; (8005918 <pvPortMalloc+0x180>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057b0:	f000 f920 	bl	80059f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <pvPortMalloc+0x184>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f040 8093 	bne.w	80058e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01d      	beq.n	8005804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057c8:	2208      	movs	r2, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f023 0307 	bic.w	r3, r3, #7
 80057e0:	3308      	adds	r3, #8
 80057e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <pvPortMalloc+0x6c>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	617b      	str	r3, [r7, #20]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d06e      	beq.n	80058e8 <pvPortMalloc+0x150>
 800580a:	4b45      	ldr	r3, [pc, #276]	; (8005920 <pvPortMalloc+0x188>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d869      	bhi.n	80058e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005814:	4b43      	ldr	r3, [pc, #268]	; (8005924 <pvPortMalloc+0x18c>)
 8005816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005818:	4b42      	ldr	r3, [pc, #264]	; (8005924 <pvPortMalloc+0x18c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800581e:	e004      	b.n	800582a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d903      	bls.n	800583c <pvPortMalloc+0xa4>
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f1      	bne.n	8005820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800583c:	4b36      	ldr	r3, [pc, #216]	; (8005918 <pvPortMalloc+0x180>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005842:	429a      	cmp	r2, r3
 8005844:	d050      	beq.n	80058e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2208      	movs	r2, #8
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	2308      	movs	r3, #8
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	429a      	cmp	r2, r3
 8005866:	d91f      	bls.n	80058a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <pvPortMalloc+0xf8>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	613b      	str	r3, [r7, #16]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058a2:	69b8      	ldr	r0, [r7, #24]
 80058a4:	f000 f908 	bl	8005ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <pvPortMalloc+0x188>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <pvPortMalloc+0x188>)
 80058b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058b6:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <pvPortMalloc+0x188>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <pvPortMalloc+0x190>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d203      	bcs.n	80058ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058c2:	4b17      	ldr	r3, [pc, #92]	; (8005920 <pvPortMalloc+0x188>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a18      	ldr	r2, [pc, #96]	; (8005928 <pvPortMalloc+0x190>)
 80058c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <pvPortMalloc+0x184>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <pvPortMalloc+0x194>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	4a11      	ldr	r2, [pc, #68]	; (800592c <pvPortMalloc+0x194>)
 80058e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058e8:	f7fe fcfa 	bl	80042e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <pvPortMalloc+0x174>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	60fb      	str	r3, [r7, #12]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <pvPortMalloc+0x172>
	return pvReturn;
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3728      	adds	r7, #40	; 0x28
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20004bbc 	.word	0x20004bbc
 800591c:	20004bd0 	.word	0x20004bd0
 8005920:	20004bc0 	.word	0x20004bc0
 8005924:	20004bb4 	.word	0x20004bb4
 8005928:	20004bc4 	.word	0x20004bc4
 800592c:	20004bc8 	.word	0x20004bc8

08005930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d04d      	beq.n	80059de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005942:	2308      	movs	r3, #8
 8005944:	425b      	negs	r3, r3
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4413      	add	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <vPortFree+0xb8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <vPortFree+0x44>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60fb      	str	r3, [r7, #12]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <vPortFree+0x62>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <vPortFree+0xb8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01e      	beq.n	80059de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d11a      	bne.n	80059de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <vPortFree+0xb8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059b8:	f7fe fc84 	bl	80042c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <vPortFree+0xbc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <vPortFree+0xbc>)
 80059c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ca:	6938      	ldr	r0, [r7, #16]
 80059cc:	f000 f874 	bl	8005ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <vPortFree+0xc0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a06      	ldr	r2, [pc, #24]	; (80059f0 <vPortFree+0xc0>)
 80059d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059da:	f7fe fc81 	bl	80042e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20004bd0 	.word	0x20004bd0
 80059ec:	20004bc0 	.word	0x20004bc0
 80059f0:	20004bcc 	.word	0x20004bcc

080059f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a00:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <prvHeapInit+0xac>)
 8005a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3307      	adds	r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0307 	bic.w	r3, r3, #7
 8005a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <prvHeapInit+0xac>)
 8005a24:	4413      	add	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <prvHeapInit+0xb0>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a32:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <prvHeapInit+0xb0>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a40:	2208      	movs	r2, #8
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0307 	bic.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	1ad2      	subs	r2, r2, r3
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <prvHeapInit+0xb8>)
 8005a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <prvHeapInit+0xbc>)
 8005a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <prvHeapInit+0xc0>)
 8005a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20000fb4 	.word	0x20000fb4
 8005aa4:	20004bb4 	.word	0x20004bb4
 8005aa8:	20004bbc 	.word	0x20004bbc
 8005aac:	20004bc4 	.word	0x20004bc4
 8005ab0:	20004bc0 	.word	0x20004bc0
 8005ab4:	20004bd0 	.word	0x20004bd0

08005ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ac0:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <prvInsertBlockIntoFreeList+0xac>)
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e002      	b.n	8005acc <prvInsertBlockIntoFreeList+0x14>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d8f7      	bhi.n	8005ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d108      	bne.n	8005afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	441a      	add	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	441a      	add	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d118      	bne.n	8005b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <prvInsertBlockIntoFreeList+0xb0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d00d      	beq.n	8005b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	441a      	add	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e008      	b.n	8005b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <prvInsertBlockIntoFreeList+0xb0>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e003      	b.n	8005b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d002      	beq.n	8005b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20004bb4 	.word	0x20004bb4
 8005b68:	20004bbc 	.word	0x20004bbc

08005b6c <__errno>:
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <__errno+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000010 	.word	0x20000010

08005b78 <std>:
 8005b78:	2300      	movs	r3, #0
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b86:	6083      	str	r3, [r0, #8]
 8005b88:	8181      	strh	r1, [r0, #12]
 8005b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b8c:	81c2      	strh	r2, [r0, #14]
 8005b8e:	6183      	str	r3, [r0, #24]
 8005b90:	4619      	mov	r1, r3
 8005b92:	2208      	movs	r2, #8
 8005b94:	305c      	adds	r0, #92	; 0x5c
 8005b96:	f000 f923 	bl	8005de0 <memset>
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <std+0x38>)
 8005b9c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <std+0x3c>)
 8005ba0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <std+0x40>)
 8005ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <std+0x44>)
 8005ba8:	6224      	str	r4, [r4, #32]
 8005baa:	6323      	str	r3, [r4, #48]	; 0x30
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	bf00      	nop
 8005bb0:	0800694d 	.word	0x0800694d
 8005bb4:	0800696f 	.word	0x0800696f
 8005bb8:	080069a7 	.word	0x080069a7
 8005bbc:	080069cb 	.word	0x080069cb

08005bc0 <_cleanup_r>:
 8005bc0:	4901      	ldr	r1, [pc, #4]	; (8005bc8 <_cleanup_r+0x8>)
 8005bc2:	f000 b8af 	b.w	8005d24 <_fwalk_reent>
 8005bc6:	bf00      	nop
 8005bc8:	08007815 	.word	0x08007815

08005bcc <__sfmoreglue>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	1e4a      	subs	r2, r1, #1
 8005bd0:	2568      	movs	r5, #104	; 0x68
 8005bd2:	4355      	muls	r5, r2
 8005bd4:	460e      	mov	r6, r1
 8005bd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bda:	f000 f959 	bl	8005e90 <_malloc_r>
 8005bde:	4604      	mov	r4, r0
 8005be0:	b140      	cbz	r0, 8005bf4 <__sfmoreglue+0x28>
 8005be2:	2100      	movs	r1, #0
 8005be4:	e9c0 1600 	strd	r1, r6, [r0]
 8005be8:	300c      	adds	r0, #12
 8005bea:	60a0      	str	r0, [r4, #8]
 8005bec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bf0:	f000 f8f6 	bl	8005de0 <memset>
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}

08005bf8 <__sfp_lock_acquire>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__sfp_lock_acquire+0x8>)
 8005bfa:	f000 b8d8 	b.w	8005dae <__retarget_lock_acquire_recursive>
 8005bfe:	bf00      	nop
 8005c00:	2000555c 	.word	0x2000555c

08005c04 <__sfp_lock_release>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sfp_lock_release+0x8>)
 8005c06:	f000 b8d3 	b.w	8005db0 <__retarget_lock_release_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	2000555c 	.word	0x2000555c

08005c10 <__sinit_lock_acquire>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sinit_lock_acquire+0x8>)
 8005c12:	f000 b8cc 	b.w	8005dae <__retarget_lock_acquire_recursive>
 8005c16:	bf00      	nop
 8005c18:	20005557 	.word	0x20005557

08005c1c <__sinit_lock_release>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	; (8005c24 <__sinit_lock_release+0x8>)
 8005c1e:	f000 b8c7 	b.w	8005db0 <__retarget_lock_release_recursive>
 8005c22:	bf00      	nop
 8005c24:	20005557 	.word	0x20005557

08005c28 <__sinit>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	f7ff fff0 	bl	8005c10 <__sinit_lock_acquire>
 8005c30:	69a3      	ldr	r3, [r4, #24]
 8005c32:	b11b      	cbz	r3, 8005c3c <__sinit+0x14>
 8005c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c38:	f7ff bff0 	b.w	8005c1c <__sinit_lock_release>
 8005c3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c40:	6523      	str	r3, [r4, #80]	; 0x50
 8005c42:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <__sinit+0x68>)
 8005c44:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <__sinit+0x6c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c4a:	42a3      	cmp	r3, r4
 8005c4c:	bf04      	itt	eq
 8005c4e:	2301      	moveq	r3, #1
 8005c50:	61a3      	streq	r3, [r4, #24]
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 f820 	bl	8005c98 <__sfp>
 8005c58:	6060      	str	r0, [r4, #4]
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 f81c 	bl	8005c98 <__sfp>
 8005c60:	60a0      	str	r0, [r4, #8]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 f818 	bl	8005c98 <__sfp>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	60e0      	str	r0, [r4, #12]
 8005c6c:	2104      	movs	r1, #4
 8005c6e:	6860      	ldr	r0, [r4, #4]
 8005c70:	f7ff ff82 	bl	8005b78 <std>
 8005c74:	68a0      	ldr	r0, [r4, #8]
 8005c76:	2201      	movs	r2, #1
 8005c78:	2109      	movs	r1, #9
 8005c7a:	f7ff ff7d 	bl	8005b78 <std>
 8005c7e:	68e0      	ldr	r0, [r4, #12]
 8005c80:	2202      	movs	r2, #2
 8005c82:	2112      	movs	r1, #18
 8005c84:	f7ff ff78 	bl	8005b78 <std>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	61a3      	str	r3, [r4, #24]
 8005c8c:	e7d2      	b.n	8005c34 <__sinit+0xc>
 8005c8e:	bf00      	nop
 8005c90:	08008ba4 	.word	0x08008ba4
 8005c94:	08005bc1 	.word	0x08005bc1

08005c98 <__sfp>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	f7ff ffac 	bl	8005bf8 <__sfp_lock_acquire>
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <__sfp+0x84>)
 8005ca2:	681e      	ldr	r6, [r3, #0]
 8005ca4:	69b3      	ldr	r3, [r6, #24]
 8005ca6:	b913      	cbnz	r3, 8005cae <__sfp+0x16>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff ffbd 	bl	8005c28 <__sinit>
 8005cae:	3648      	adds	r6, #72	; 0x48
 8005cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	d503      	bpl.n	8005cc0 <__sfp+0x28>
 8005cb8:	6833      	ldr	r3, [r6, #0]
 8005cba:	b30b      	cbz	r3, 8005d00 <__sfp+0x68>
 8005cbc:	6836      	ldr	r6, [r6, #0]
 8005cbe:	e7f7      	b.n	8005cb0 <__sfp+0x18>
 8005cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cc4:	b9d5      	cbnz	r5, 8005cfc <__sfp+0x64>
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <__sfp+0x88>)
 8005cc8:	60e3      	str	r3, [r4, #12]
 8005cca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cce:	6665      	str	r5, [r4, #100]	; 0x64
 8005cd0:	f000 f86c 	bl	8005dac <__retarget_lock_init_recursive>
 8005cd4:	f7ff ff96 	bl	8005c04 <__sfp_lock_release>
 8005cd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ce0:	6025      	str	r5, [r4, #0]
 8005ce2:	61a5      	str	r5, [r4, #24]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cec:	f000 f878 	bl	8005de0 <memset>
 8005cf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfc:	3468      	adds	r4, #104	; 0x68
 8005cfe:	e7d9      	b.n	8005cb4 <__sfp+0x1c>
 8005d00:	2104      	movs	r1, #4
 8005d02:	4638      	mov	r0, r7
 8005d04:	f7ff ff62 	bl	8005bcc <__sfmoreglue>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	6030      	str	r0, [r6, #0]
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d1d5      	bne.n	8005cbc <__sfp+0x24>
 8005d10:	f7ff ff78 	bl	8005c04 <__sfp_lock_release>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	e7ee      	b.n	8005cf8 <__sfp+0x60>
 8005d1a:	bf00      	nop
 8005d1c:	08008ba4 	.word	0x08008ba4
 8005d20:	ffff0001 	.word	0xffff0001

08005d24 <_fwalk_reent>:
 8005d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d28:	4606      	mov	r6, r0
 8005d2a:	4688      	mov	r8, r1
 8005d2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d30:	2700      	movs	r7, #0
 8005d32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d36:	f1b9 0901 	subs.w	r9, r9, #1
 8005d3a:	d505      	bpl.n	8005d48 <_fwalk_reent+0x24>
 8005d3c:	6824      	ldr	r4, [r4, #0]
 8005d3e:	2c00      	cmp	r4, #0
 8005d40:	d1f7      	bne.n	8005d32 <_fwalk_reent+0xe>
 8005d42:	4638      	mov	r0, r7
 8005d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d48:	89ab      	ldrh	r3, [r5, #12]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d907      	bls.n	8005d5e <_fwalk_reent+0x3a>
 8005d4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d52:	3301      	adds	r3, #1
 8005d54:	d003      	beq.n	8005d5e <_fwalk_reent+0x3a>
 8005d56:	4629      	mov	r1, r5
 8005d58:	4630      	mov	r0, r6
 8005d5a:	47c0      	blx	r8
 8005d5c:	4307      	orrs	r7, r0
 8005d5e:	3568      	adds	r5, #104	; 0x68
 8005d60:	e7e9      	b.n	8005d36 <_fwalk_reent+0x12>
	...

08005d64 <__libc_init_array>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4d0d      	ldr	r5, [pc, #52]	; (8005d9c <__libc_init_array+0x38>)
 8005d68:	4c0d      	ldr	r4, [pc, #52]	; (8005da0 <__libc_init_array+0x3c>)
 8005d6a:	1b64      	subs	r4, r4, r5
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	2600      	movs	r6, #0
 8005d70:	42a6      	cmp	r6, r4
 8005d72:	d109      	bne.n	8005d88 <__libc_init_array+0x24>
 8005d74:	4d0b      	ldr	r5, [pc, #44]	; (8005da4 <__libc_init_array+0x40>)
 8005d76:	4c0c      	ldr	r4, [pc, #48]	; (8005da8 <__libc_init_array+0x44>)
 8005d78:	f002 fe28 	bl	80089cc <_init>
 8005d7c:	1b64      	subs	r4, r4, r5
 8005d7e:	10a4      	asrs	r4, r4, #2
 8005d80:	2600      	movs	r6, #0
 8005d82:	42a6      	cmp	r6, r4
 8005d84:	d105      	bne.n	8005d92 <__libc_init_array+0x2e>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8c:	4798      	blx	r3
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7ee      	b.n	8005d70 <__libc_init_array+0xc>
 8005d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d96:	4798      	blx	r3
 8005d98:	3601      	adds	r6, #1
 8005d9a:	e7f2      	b.n	8005d82 <__libc_init_array+0x1e>
 8005d9c:	08008f2c 	.word	0x08008f2c
 8005da0:	08008f2c 	.word	0x08008f2c
 8005da4:	08008f2c 	.word	0x08008f2c
 8005da8:	08008f30 	.word	0x08008f30

08005dac <__retarget_lock_init_recursive>:
 8005dac:	4770      	bx	lr

08005dae <__retarget_lock_acquire_recursive>:
 8005dae:	4770      	bx	lr

08005db0 <__retarget_lock_release_recursive>:
 8005db0:	4770      	bx	lr
	...

08005db4 <malloc>:
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <malloc+0xc>)
 8005db6:	4601      	mov	r1, r0
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	f000 b869 	b.w	8005e90 <_malloc_r>
 8005dbe:	bf00      	nop
 8005dc0:	20000010 	.word	0x20000010

08005dc4 <memcpy>:
 8005dc4:	440a      	add	r2, r1
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dcc:	d100      	bne.n	8005dd0 <memcpy+0xc>
 8005dce:	4770      	bx	lr
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	d1f9      	bne.n	8005dd2 <memcpy+0xe>
 8005dde:	bd10      	pop	{r4, pc}

08005de0 <memset>:
 8005de0:	4402      	add	r2, r0
 8005de2:	4603      	mov	r3, r0
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d100      	bne.n	8005dea <memset+0xa>
 8005de8:	4770      	bx	lr
 8005dea:	f803 1b01 	strb.w	r1, [r3], #1
 8005dee:	e7f9      	b.n	8005de4 <memset+0x4>

08005df0 <_free_r>:
 8005df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005df2:	2900      	cmp	r1, #0
 8005df4:	d048      	beq.n	8005e88 <_free_r+0x98>
 8005df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dfa:	9001      	str	r0, [sp, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f1a1 0404 	sub.w	r4, r1, #4
 8005e02:	bfb8      	it	lt
 8005e04:	18e4      	addlt	r4, r4, r3
 8005e06:	f001 fd57 	bl	80078b8 <__malloc_lock>
 8005e0a:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <_free_r+0x9c>)
 8005e0c:	9801      	ldr	r0, [sp, #4]
 8005e0e:	6813      	ldr	r3, [r2, #0]
 8005e10:	4615      	mov	r5, r2
 8005e12:	b933      	cbnz	r3, 8005e22 <_free_r+0x32>
 8005e14:	6063      	str	r3, [r4, #4]
 8005e16:	6014      	str	r4, [r2, #0]
 8005e18:	b003      	add	sp, #12
 8005e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e1e:	f001 bd51 	b.w	80078c4 <__malloc_unlock>
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	d90b      	bls.n	8005e3e <_free_r+0x4e>
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	1862      	adds	r2, r4, r1
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	bf04      	itt	eq
 8005e2e:	681a      	ldreq	r2, [r3, #0]
 8005e30:	685b      	ldreq	r3, [r3, #4]
 8005e32:	6063      	str	r3, [r4, #4]
 8005e34:	bf04      	itt	eq
 8005e36:	1852      	addeq	r2, r2, r1
 8005e38:	6022      	streq	r2, [r4, #0]
 8005e3a:	602c      	str	r4, [r5, #0]
 8005e3c:	e7ec      	b.n	8005e18 <_free_r+0x28>
 8005e3e:	461a      	mov	r2, r3
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	b10b      	cbz	r3, 8005e48 <_free_r+0x58>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d9fa      	bls.n	8005e3e <_free_r+0x4e>
 8005e48:	6811      	ldr	r1, [r2, #0]
 8005e4a:	1855      	adds	r5, r2, r1
 8005e4c:	42a5      	cmp	r5, r4
 8005e4e:	d10b      	bne.n	8005e68 <_free_r+0x78>
 8005e50:	6824      	ldr	r4, [r4, #0]
 8005e52:	4421      	add	r1, r4
 8005e54:	1854      	adds	r4, r2, r1
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	6011      	str	r1, [r2, #0]
 8005e5a:	d1dd      	bne.n	8005e18 <_free_r+0x28>
 8005e5c:	681c      	ldr	r4, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	6053      	str	r3, [r2, #4]
 8005e62:	4421      	add	r1, r4
 8005e64:	6011      	str	r1, [r2, #0]
 8005e66:	e7d7      	b.n	8005e18 <_free_r+0x28>
 8005e68:	d902      	bls.n	8005e70 <_free_r+0x80>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	6003      	str	r3, [r0, #0]
 8005e6e:	e7d3      	b.n	8005e18 <_free_r+0x28>
 8005e70:	6825      	ldr	r5, [r4, #0]
 8005e72:	1961      	adds	r1, r4, r5
 8005e74:	428b      	cmp	r3, r1
 8005e76:	bf04      	itt	eq
 8005e78:	6819      	ldreq	r1, [r3, #0]
 8005e7a:	685b      	ldreq	r3, [r3, #4]
 8005e7c:	6063      	str	r3, [r4, #4]
 8005e7e:	bf04      	itt	eq
 8005e80:	1949      	addeq	r1, r1, r5
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	6054      	str	r4, [r2, #4]
 8005e86:	e7c7      	b.n	8005e18 <_free_r+0x28>
 8005e88:	b003      	add	sp, #12
 8005e8a:	bd30      	pop	{r4, r5, pc}
 8005e8c:	20004bd4 	.word	0x20004bd4

08005e90 <_malloc_r>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	1ccd      	adds	r5, r1, #3
 8005e94:	f025 0503 	bic.w	r5, r5, #3
 8005e98:	3508      	adds	r5, #8
 8005e9a:	2d0c      	cmp	r5, #12
 8005e9c:	bf38      	it	cc
 8005e9e:	250c      	movcc	r5, #12
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	db01      	blt.n	8005eaa <_malloc_r+0x1a>
 8005ea6:	42a9      	cmp	r1, r5
 8005ea8:	d903      	bls.n	8005eb2 <_malloc_r+0x22>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	2000      	movs	r0, #0
 8005eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb2:	f001 fd01 	bl	80078b8 <__malloc_lock>
 8005eb6:	4921      	ldr	r1, [pc, #132]	; (8005f3c <_malloc_r+0xac>)
 8005eb8:	680a      	ldr	r2, [r1, #0]
 8005eba:	4614      	mov	r4, r2
 8005ebc:	b99c      	cbnz	r4, 8005ee6 <_malloc_r+0x56>
 8005ebe:	4f20      	ldr	r7, [pc, #128]	; (8005f40 <_malloc_r+0xb0>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	b923      	cbnz	r3, 8005ece <_malloc_r+0x3e>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f000 fd10 	bl	80068ec <_sbrk_r>
 8005ecc:	6038      	str	r0, [r7, #0]
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 fd0b 	bl	80068ec <_sbrk_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	d123      	bne.n	8005f22 <_malloc_r+0x92>
 8005eda:	230c      	movs	r3, #12
 8005edc:	6033      	str	r3, [r6, #0]
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f001 fcf0 	bl	80078c4 <__malloc_unlock>
 8005ee4:	e7e3      	b.n	8005eae <_malloc_r+0x1e>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	1b5b      	subs	r3, r3, r5
 8005eea:	d417      	bmi.n	8005f1c <_malloc_r+0x8c>
 8005eec:	2b0b      	cmp	r3, #11
 8005eee:	d903      	bls.n	8005ef8 <_malloc_r+0x68>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	441c      	add	r4, r3
 8005ef4:	6025      	str	r5, [r4, #0]
 8005ef6:	e004      	b.n	8005f02 <_malloc_r+0x72>
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	42a2      	cmp	r2, r4
 8005efc:	bf0c      	ite	eq
 8005efe:	600b      	streq	r3, [r1, #0]
 8005f00:	6053      	strne	r3, [r2, #4]
 8005f02:	4630      	mov	r0, r6
 8005f04:	f001 fcde 	bl	80078c4 <__malloc_unlock>
 8005f08:	f104 000b 	add.w	r0, r4, #11
 8005f0c:	1d23      	adds	r3, r4, #4
 8005f0e:	f020 0007 	bic.w	r0, r0, #7
 8005f12:	1ac2      	subs	r2, r0, r3
 8005f14:	d0cc      	beq.n	8005eb0 <_malloc_r+0x20>
 8005f16:	1a1b      	subs	r3, r3, r0
 8005f18:	50a3      	str	r3, [r4, r2]
 8005f1a:	e7c9      	b.n	8005eb0 <_malloc_r+0x20>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	6864      	ldr	r4, [r4, #4]
 8005f20:	e7cc      	b.n	8005ebc <_malloc_r+0x2c>
 8005f22:	1cc4      	adds	r4, r0, #3
 8005f24:	f024 0403 	bic.w	r4, r4, #3
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d0e3      	beq.n	8005ef4 <_malloc_r+0x64>
 8005f2c:	1a21      	subs	r1, r4, r0
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 fcdc 	bl	80068ec <_sbrk_r>
 8005f34:	3001      	adds	r0, #1
 8005f36:	d1dd      	bne.n	8005ef4 <_malloc_r+0x64>
 8005f38:	e7cf      	b.n	8005eda <_malloc_r+0x4a>
 8005f3a:	bf00      	nop
 8005f3c:	20004bd4 	.word	0x20004bd4
 8005f40:	20004bd8 	.word	0x20004bd8

08005f44 <__cvt>:
 8005f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	ec55 4b10 	vmov	r4, r5, d0
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	460e      	mov	r6, r1
 8005f50:	4619      	mov	r1, r3
 8005f52:	462b      	mov	r3, r5
 8005f54:	bfbb      	ittet	lt
 8005f56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f5a:	461d      	movlt	r5, r3
 8005f5c:	2300      	movge	r3, #0
 8005f5e:	232d      	movlt	r3, #45	; 0x2d
 8005f60:	700b      	strb	r3, [r1, #0]
 8005f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f68:	4691      	mov	r9, r2
 8005f6a:	f023 0820 	bic.w	r8, r3, #32
 8005f6e:	bfbc      	itt	lt
 8005f70:	4622      	movlt	r2, r4
 8005f72:	4614      	movlt	r4, r2
 8005f74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f78:	d005      	beq.n	8005f86 <__cvt+0x42>
 8005f7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f7e:	d100      	bne.n	8005f82 <__cvt+0x3e>
 8005f80:	3601      	adds	r6, #1
 8005f82:	2102      	movs	r1, #2
 8005f84:	e000      	b.n	8005f88 <__cvt+0x44>
 8005f86:	2103      	movs	r1, #3
 8005f88:	ab03      	add	r3, sp, #12
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	ab02      	add	r3, sp, #8
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	ec45 4b10 	vmov	d0, r4, r5
 8005f94:	4653      	mov	r3, sl
 8005f96:	4632      	mov	r2, r6
 8005f98:	f000 fdca 	bl	8006b30 <_dtoa_r>
 8005f9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	d102      	bne.n	8005faa <__cvt+0x66>
 8005fa4:	f019 0f01 	tst.w	r9, #1
 8005fa8:	d022      	beq.n	8005ff0 <__cvt+0xac>
 8005faa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fae:	eb07 0906 	add.w	r9, r7, r6
 8005fb2:	d110      	bne.n	8005fd6 <__cvt+0x92>
 8005fb4:	783b      	ldrb	r3, [r7, #0]
 8005fb6:	2b30      	cmp	r3, #48	; 0x30
 8005fb8:	d10a      	bne.n	8005fd0 <__cvt+0x8c>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7fa fd91 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fc6:	b918      	cbnz	r0, 8005fd0 <__cvt+0x8c>
 8005fc8:	f1c6 0601 	rsb	r6, r6, #1
 8005fcc:	f8ca 6000 	str.w	r6, [sl]
 8005fd0:	f8da 3000 	ldr.w	r3, [sl]
 8005fd4:	4499      	add	r9, r3
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7fa fd83 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fe2:	b108      	cbz	r0, 8005fe8 <__cvt+0xa4>
 8005fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fe8:	2230      	movs	r2, #48	; 0x30
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	454b      	cmp	r3, r9
 8005fee:	d307      	bcc.n	8006000 <__cvt+0xbc>
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ff4:	1bdb      	subs	r3, r3, r7
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	b004      	add	sp, #16
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	1c59      	adds	r1, r3, #1
 8006002:	9103      	str	r1, [sp, #12]
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e7f0      	b.n	8005fea <__cvt+0xa6>

08006008 <__exponent>:
 8006008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800600a:	4603      	mov	r3, r0
 800600c:	2900      	cmp	r1, #0
 800600e:	bfb8      	it	lt
 8006010:	4249      	neglt	r1, r1
 8006012:	f803 2b02 	strb.w	r2, [r3], #2
 8006016:	bfb4      	ite	lt
 8006018:	222d      	movlt	r2, #45	; 0x2d
 800601a:	222b      	movge	r2, #43	; 0x2b
 800601c:	2909      	cmp	r1, #9
 800601e:	7042      	strb	r2, [r0, #1]
 8006020:	dd2a      	ble.n	8006078 <__exponent+0x70>
 8006022:	f10d 0407 	add.w	r4, sp, #7
 8006026:	46a4      	mov	ip, r4
 8006028:	270a      	movs	r7, #10
 800602a:	46a6      	mov	lr, r4
 800602c:	460a      	mov	r2, r1
 800602e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006032:	fb07 1516 	mls	r5, r7, r6, r1
 8006036:	3530      	adds	r5, #48	; 0x30
 8006038:	2a63      	cmp	r2, #99	; 0x63
 800603a:	f104 34ff 	add.w	r4, r4, #4294967295
 800603e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006042:	4631      	mov	r1, r6
 8006044:	dcf1      	bgt.n	800602a <__exponent+0x22>
 8006046:	3130      	adds	r1, #48	; 0x30
 8006048:	f1ae 0502 	sub.w	r5, lr, #2
 800604c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006050:	1c44      	adds	r4, r0, #1
 8006052:	4629      	mov	r1, r5
 8006054:	4561      	cmp	r1, ip
 8006056:	d30a      	bcc.n	800606e <__exponent+0x66>
 8006058:	f10d 0209 	add.w	r2, sp, #9
 800605c:	eba2 020e 	sub.w	r2, r2, lr
 8006060:	4565      	cmp	r5, ip
 8006062:	bf88      	it	hi
 8006064:	2200      	movhi	r2, #0
 8006066:	4413      	add	r3, r2
 8006068:	1a18      	subs	r0, r3, r0
 800606a:	b003      	add	sp, #12
 800606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800606e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006072:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006076:	e7ed      	b.n	8006054 <__exponent+0x4c>
 8006078:	2330      	movs	r3, #48	; 0x30
 800607a:	3130      	adds	r1, #48	; 0x30
 800607c:	7083      	strb	r3, [r0, #2]
 800607e:	70c1      	strb	r1, [r0, #3]
 8006080:	1d03      	adds	r3, r0, #4
 8006082:	e7f1      	b.n	8006068 <__exponent+0x60>

08006084 <_printf_float>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	ed2d 8b02 	vpush	{d8}
 800608c:	b08d      	sub	sp, #52	; 0x34
 800608e:	460c      	mov	r4, r1
 8006090:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006094:	4616      	mov	r6, r2
 8006096:	461f      	mov	r7, r3
 8006098:	4605      	mov	r5, r0
 800609a:	f001 fbf7 	bl	800788c <_localeconv_r>
 800609e:	f8d0 a000 	ldr.w	sl, [r0]
 80060a2:	4650      	mov	r0, sl
 80060a4:	f7fa f8a4 	bl	80001f0 <strlen>
 80060a8:	2300      	movs	r3, #0
 80060aa:	930a      	str	r3, [sp, #40]	; 0x28
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	9305      	str	r3, [sp, #20]
 80060b0:	f8d8 3000 	ldr.w	r3, [r8]
 80060b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060b8:	3307      	adds	r3, #7
 80060ba:	f023 0307 	bic.w	r3, r3, #7
 80060be:	f103 0208 	add.w	r2, r3, #8
 80060c2:	f8c8 2000 	str.w	r2, [r8]
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060d6:	9307      	str	r3, [sp, #28]
 80060d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80060dc:	ee08 0a10 	vmov	s16, r0
 80060e0:	4b9f      	ldr	r3, [pc, #636]	; (8006360 <_printf_float+0x2dc>)
 80060e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ea:	f7fa fd2f 	bl	8000b4c <__aeabi_dcmpun>
 80060ee:	bb88      	cbnz	r0, 8006154 <_printf_float+0xd0>
 80060f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060f4:	4b9a      	ldr	r3, [pc, #616]	; (8006360 <_printf_float+0x2dc>)
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	f7fa fd09 	bl	8000b10 <__aeabi_dcmple>
 80060fe:	bb48      	cbnz	r0, 8006154 <_printf_float+0xd0>
 8006100:	2200      	movs	r2, #0
 8006102:	2300      	movs	r3, #0
 8006104:	4640      	mov	r0, r8
 8006106:	4649      	mov	r1, r9
 8006108:	f7fa fcf8 	bl	8000afc <__aeabi_dcmplt>
 800610c:	b110      	cbz	r0, 8006114 <_printf_float+0x90>
 800610e:	232d      	movs	r3, #45	; 0x2d
 8006110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006114:	4b93      	ldr	r3, [pc, #588]	; (8006364 <_printf_float+0x2e0>)
 8006116:	4894      	ldr	r0, [pc, #592]	; (8006368 <_printf_float+0x2e4>)
 8006118:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800611c:	bf94      	ite	ls
 800611e:	4698      	movls	r8, r3
 8006120:	4680      	movhi	r8, r0
 8006122:	2303      	movs	r3, #3
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	9b05      	ldr	r3, [sp, #20]
 8006128:	f023 0204 	bic.w	r2, r3, #4
 800612c:	6022      	str	r2, [r4, #0]
 800612e:	f04f 0900 	mov.w	r9, #0
 8006132:	9700      	str	r7, [sp, #0]
 8006134:	4633      	mov	r3, r6
 8006136:	aa0b      	add	r2, sp, #44	; 0x2c
 8006138:	4621      	mov	r1, r4
 800613a:	4628      	mov	r0, r5
 800613c:	f000 f9d8 	bl	80064f0 <_printf_common>
 8006140:	3001      	adds	r0, #1
 8006142:	f040 8090 	bne.w	8006266 <_printf_float+0x1e2>
 8006146:	f04f 30ff 	mov.w	r0, #4294967295
 800614a:	b00d      	add	sp, #52	; 0x34
 800614c:	ecbd 8b02 	vpop	{d8}
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	f7fa fcf6 	bl	8000b4c <__aeabi_dcmpun>
 8006160:	b140      	cbz	r0, 8006174 <_printf_float+0xf0>
 8006162:	464b      	mov	r3, r9
 8006164:	2b00      	cmp	r3, #0
 8006166:	bfbc      	itt	lt
 8006168:	232d      	movlt	r3, #45	; 0x2d
 800616a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800616e:	487f      	ldr	r0, [pc, #508]	; (800636c <_printf_float+0x2e8>)
 8006170:	4b7f      	ldr	r3, [pc, #508]	; (8006370 <_printf_float+0x2ec>)
 8006172:	e7d1      	b.n	8006118 <_printf_float+0x94>
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800617a:	9206      	str	r2, [sp, #24]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	d13f      	bne.n	8006200 <_printf_float+0x17c>
 8006180:	2306      	movs	r3, #6
 8006182:	6063      	str	r3, [r4, #4]
 8006184:	9b05      	ldr	r3, [sp, #20]
 8006186:	6861      	ldr	r1, [r4, #4]
 8006188:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800618c:	2300      	movs	r3, #0
 800618e:	9303      	str	r3, [sp, #12]
 8006190:	ab0a      	add	r3, sp, #40	; 0x28
 8006192:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006196:	ab09      	add	r3, sp, #36	; 0x24
 8006198:	ec49 8b10 	vmov	d0, r8, r9
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	6022      	str	r2, [r4, #0]
 80061a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061a4:	4628      	mov	r0, r5
 80061a6:	f7ff fecd 	bl	8005f44 <__cvt>
 80061aa:	9b06      	ldr	r3, [sp, #24]
 80061ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ae:	2b47      	cmp	r3, #71	; 0x47
 80061b0:	4680      	mov	r8, r0
 80061b2:	d108      	bne.n	80061c6 <_printf_float+0x142>
 80061b4:	1cc8      	adds	r0, r1, #3
 80061b6:	db02      	blt.n	80061be <_printf_float+0x13a>
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	4299      	cmp	r1, r3
 80061bc:	dd41      	ble.n	8006242 <_printf_float+0x1be>
 80061be:	f1ab 0b02 	sub.w	fp, fp, #2
 80061c2:	fa5f fb8b 	uxtb.w	fp, fp
 80061c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061ca:	d820      	bhi.n	800620e <_printf_float+0x18a>
 80061cc:	3901      	subs	r1, #1
 80061ce:	465a      	mov	r2, fp
 80061d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061d4:	9109      	str	r1, [sp, #36]	; 0x24
 80061d6:	f7ff ff17 	bl	8006008 <__exponent>
 80061da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061dc:	1813      	adds	r3, r2, r0
 80061de:	2a01      	cmp	r2, #1
 80061e0:	4681      	mov	r9, r0
 80061e2:	6123      	str	r3, [r4, #16]
 80061e4:	dc02      	bgt.n	80061ec <_printf_float+0x168>
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	07d2      	lsls	r2, r2, #31
 80061ea:	d501      	bpl.n	80061f0 <_printf_float+0x16c>
 80061ec:	3301      	adds	r3, #1
 80061ee:	6123      	str	r3, [r4, #16]
 80061f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d09c      	beq.n	8006132 <_printf_float+0xae>
 80061f8:	232d      	movs	r3, #45	; 0x2d
 80061fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061fe:	e798      	b.n	8006132 <_printf_float+0xae>
 8006200:	9a06      	ldr	r2, [sp, #24]
 8006202:	2a47      	cmp	r2, #71	; 0x47
 8006204:	d1be      	bne.n	8006184 <_printf_float+0x100>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1bc      	bne.n	8006184 <_printf_float+0x100>
 800620a:	2301      	movs	r3, #1
 800620c:	e7b9      	b.n	8006182 <_printf_float+0xfe>
 800620e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006212:	d118      	bne.n	8006246 <_printf_float+0x1c2>
 8006214:	2900      	cmp	r1, #0
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	dd0b      	ble.n	8006232 <_printf_float+0x1ae>
 800621a:	6121      	str	r1, [r4, #16]
 800621c:	b913      	cbnz	r3, 8006224 <_printf_float+0x1a0>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	07d0      	lsls	r0, r2, #31
 8006222:	d502      	bpl.n	800622a <_printf_float+0x1a6>
 8006224:	3301      	adds	r3, #1
 8006226:	440b      	add	r3, r1
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	65a1      	str	r1, [r4, #88]	; 0x58
 800622c:	f04f 0900 	mov.w	r9, #0
 8006230:	e7de      	b.n	80061f0 <_printf_float+0x16c>
 8006232:	b913      	cbnz	r3, 800623a <_printf_float+0x1b6>
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	07d2      	lsls	r2, r2, #31
 8006238:	d501      	bpl.n	800623e <_printf_float+0x1ba>
 800623a:	3302      	adds	r3, #2
 800623c:	e7f4      	b.n	8006228 <_printf_float+0x1a4>
 800623e:	2301      	movs	r3, #1
 8006240:	e7f2      	b.n	8006228 <_printf_float+0x1a4>
 8006242:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006248:	4299      	cmp	r1, r3
 800624a:	db05      	blt.n	8006258 <_printf_float+0x1d4>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	6121      	str	r1, [r4, #16]
 8006250:	07d8      	lsls	r0, r3, #31
 8006252:	d5ea      	bpl.n	800622a <_printf_float+0x1a6>
 8006254:	1c4b      	adds	r3, r1, #1
 8006256:	e7e7      	b.n	8006228 <_printf_float+0x1a4>
 8006258:	2900      	cmp	r1, #0
 800625a:	bfd4      	ite	le
 800625c:	f1c1 0202 	rsble	r2, r1, #2
 8006260:	2201      	movgt	r2, #1
 8006262:	4413      	add	r3, r2
 8006264:	e7e0      	b.n	8006228 <_printf_float+0x1a4>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	055a      	lsls	r2, r3, #21
 800626a:	d407      	bmi.n	800627c <_printf_float+0x1f8>
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	4642      	mov	r2, r8
 8006270:	4631      	mov	r1, r6
 8006272:	4628      	mov	r0, r5
 8006274:	47b8      	blx	r7
 8006276:	3001      	adds	r0, #1
 8006278:	d12c      	bne.n	80062d4 <_printf_float+0x250>
 800627a:	e764      	b.n	8006146 <_printf_float+0xc2>
 800627c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006280:	f240 80e0 	bls.w	8006444 <_printf_float+0x3c0>
 8006284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006288:	2200      	movs	r2, #0
 800628a:	2300      	movs	r3, #0
 800628c:	f7fa fc2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006290:	2800      	cmp	r0, #0
 8006292:	d034      	beq.n	80062fe <_printf_float+0x27a>
 8006294:	4a37      	ldr	r2, [pc, #220]	; (8006374 <_printf_float+0x2f0>)
 8006296:	2301      	movs	r3, #1
 8006298:	4631      	mov	r1, r6
 800629a:	4628      	mov	r0, r5
 800629c:	47b8      	blx	r7
 800629e:	3001      	adds	r0, #1
 80062a0:	f43f af51 	beq.w	8006146 <_printf_float+0xc2>
 80062a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a8:	429a      	cmp	r2, r3
 80062aa:	db02      	blt.n	80062b2 <_printf_float+0x22e>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	07d8      	lsls	r0, r3, #31
 80062b0:	d510      	bpl.n	80062d4 <_printf_float+0x250>
 80062b2:	ee18 3a10 	vmov	r3, s16
 80062b6:	4652      	mov	r2, sl
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	f43f af41 	beq.w	8006146 <_printf_float+0xc2>
 80062c4:	f04f 0800 	mov.w	r8, #0
 80062c8:	f104 091a 	add.w	r9, r4, #26
 80062cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ce:	3b01      	subs	r3, #1
 80062d0:	4543      	cmp	r3, r8
 80062d2:	dc09      	bgt.n	80062e8 <_printf_float+0x264>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	079b      	lsls	r3, r3, #30
 80062d8:	f100 8105 	bmi.w	80064e6 <_printf_float+0x462>
 80062dc:	68e0      	ldr	r0, [r4, #12]
 80062de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e0:	4298      	cmp	r0, r3
 80062e2:	bfb8      	it	lt
 80062e4:	4618      	movlt	r0, r3
 80062e6:	e730      	b.n	800614a <_printf_float+0xc6>
 80062e8:	2301      	movs	r3, #1
 80062ea:	464a      	mov	r2, r9
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f af27 	beq.w	8006146 <_printf_float+0xc2>
 80062f8:	f108 0801 	add.w	r8, r8, #1
 80062fc:	e7e6      	b.n	80062cc <_printf_float+0x248>
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	dc39      	bgt.n	8006378 <_printf_float+0x2f4>
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <_printf_float+0x2f0>)
 8006306:	2301      	movs	r3, #1
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f af19 	beq.w	8006146 <_printf_float+0xc2>
 8006314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006318:	4313      	orrs	r3, r2
 800631a:	d102      	bne.n	8006322 <_printf_float+0x29e>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	07d9      	lsls	r1, r3, #31
 8006320:	d5d8      	bpl.n	80062d4 <_printf_float+0x250>
 8006322:	ee18 3a10 	vmov	r3, s16
 8006326:	4652      	mov	r2, sl
 8006328:	4631      	mov	r1, r6
 800632a:	4628      	mov	r0, r5
 800632c:	47b8      	blx	r7
 800632e:	3001      	adds	r0, #1
 8006330:	f43f af09 	beq.w	8006146 <_printf_float+0xc2>
 8006334:	f04f 0900 	mov.w	r9, #0
 8006338:	f104 0a1a 	add.w	sl, r4, #26
 800633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633e:	425b      	negs	r3, r3
 8006340:	454b      	cmp	r3, r9
 8006342:	dc01      	bgt.n	8006348 <_printf_float+0x2c4>
 8006344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006346:	e792      	b.n	800626e <_printf_float+0x1ea>
 8006348:	2301      	movs	r3, #1
 800634a:	4652      	mov	r2, sl
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f aef7 	beq.w	8006146 <_printf_float+0xc2>
 8006358:	f109 0901 	add.w	r9, r9, #1
 800635c:	e7ee      	b.n	800633c <_printf_float+0x2b8>
 800635e:	bf00      	nop
 8006360:	7fefffff 	.word	0x7fefffff
 8006364:	08008ba8 	.word	0x08008ba8
 8006368:	08008bac 	.word	0x08008bac
 800636c:	08008bb4 	.word	0x08008bb4
 8006370:	08008bb0 	.word	0x08008bb0
 8006374:	08008bb8 	.word	0x08008bb8
 8006378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800637a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800637c:	429a      	cmp	r2, r3
 800637e:	bfa8      	it	ge
 8006380:	461a      	movge	r2, r3
 8006382:	2a00      	cmp	r2, #0
 8006384:	4691      	mov	r9, r2
 8006386:	dc37      	bgt.n	80063f8 <_printf_float+0x374>
 8006388:	f04f 0b00 	mov.w	fp, #0
 800638c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006390:	f104 021a 	add.w	r2, r4, #26
 8006394:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	eba3 0309 	sub.w	r3, r3, r9
 800639c:	455b      	cmp	r3, fp
 800639e:	dc33      	bgt.n	8006408 <_printf_float+0x384>
 80063a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063a4:	429a      	cmp	r2, r3
 80063a6:	db3b      	blt.n	8006420 <_printf_float+0x39c>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	07da      	lsls	r2, r3, #31
 80063ac:	d438      	bmi.n	8006420 <_printf_float+0x39c>
 80063ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b0:	9b05      	ldr	r3, [sp, #20]
 80063b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	eba2 0901 	sub.w	r9, r2, r1
 80063ba:	4599      	cmp	r9, r3
 80063bc:	bfa8      	it	ge
 80063be:	4699      	movge	r9, r3
 80063c0:	f1b9 0f00 	cmp.w	r9, #0
 80063c4:	dc35      	bgt.n	8006432 <_printf_float+0x3ae>
 80063c6:	f04f 0800 	mov.w	r8, #0
 80063ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ce:	f104 0a1a 	add.w	sl, r4, #26
 80063d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	eba3 0309 	sub.w	r3, r3, r9
 80063dc:	4543      	cmp	r3, r8
 80063de:	f77f af79 	ble.w	80062d4 <_printf_float+0x250>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4652      	mov	r2, sl
 80063e6:	4631      	mov	r1, r6
 80063e8:	4628      	mov	r0, r5
 80063ea:	47b8      	blx	r7
 80063ec:	3001      	adds	r0, #1
 80063ee:	f43f aeaa 	beq.w	8006146 <_printf_float+0xc2>
 80063f2:	f108 0801 	add.w	r8, r8, #1
 80063f6:	e7ec      	b.n	80063d2 <_printf_float+0x34e>
 80063f8:	4613      	mov	r3, r2
 80063fa:	4631      	mov	r1, r6
 80063fc:	4642      	mov	r2, r8
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	d1c0      	bne.n	8006388 <_printf_float+0x304>
 8006406:	e69e      	b.n	8006146 <_printf_float+0xc2>
 8006408:	2301      	movs	r3, #1
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	9205      	str	r2, [sp, #20]
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	f43f ae97 	beq.w	8006146 <_printf_float+0xc2>
 8006418:	9a05      	ldr	r2, [sp, #20]
 800641a:	f10b 0b01 	add.w	fp, fp, #1
 800641e:	e7b9      	b.n	8006394 <_printf_float+0x310>
 8006420:	ee18 3a10 	vmov	r3, s16
 8006424:	4652      	mov	r2, sl
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	d1be      	bne.n	80063ae <_printf_float+0x32a>
 8006430:	e689      	b.n	8006146 <_printf_float+0xc2>
 8006432:	9a05      	ldr	r2, [sp, #20]
 8006434:	464b      	mov	r3, r9
 8006436:	4442      	add	r2, r8
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	d1c1      	bne.n	80063c6 <_printf_float+0x342>
 8006442:	e680      	b.n	8006146 <_printf_float+0xc2>
 8006444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006446:	2a01      	cmp	r2, #1
 8006448:	dc01      	bgt.n	800644e <_printf_float+0x3ca>
 800644a:	07db      	lsls	r3, r3, #31
 800644c:	d538      	bpl.n	80064c0 <_printf_float+0x43c>
 800644e:	2301      	movs	r3, #1
 8006450:	4642      	mov	r2, r8
 8006452:	4631      	mov	r1, r6
 8006454:	4628      	mov	r0, r5
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	f43f ae74 	beq.w	8006146 <_printf_float+0xc2>
 800645e:	ee18 3a10 	vmov	r3, s16
 8006462:	4652      	mov	r2, sl
 8006464:	4631      	mov	r1, r6
 8006466:	4628      	mov	r0, r5
 8006468:	47b8      	blx	r7
 800646a:	3001      	adds	r0, #1
 800646c:	f43f ae6b 	beq.w	8006146 <_printf_float+0xc2>
 8006470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	f7fa fb36 	bl	8000ae8 <__aeabi_dcmpeq>
 800647c:	b9d8      	cbnz	r0, 80064b6 <_printf_float+0x432>
 800647e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006480:	f108 0201 	add.w	r2, r8, #1
 8006484:	3b01      	subs	r3, #1
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	d10e      	bne.n	80064ae <_printf_float+0x42a>
 8006490:	e659      	b.n	8006146 <_printf_float+0xc2>
 8006492:	2301      	movs	r3, #1
 8006494:	4652      	mov	r2, sl
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	f43f ae52 	beq.w	8006146 <_printf_float+0xc2>
 80064a2:	f108 0801 	add.w	r8, r8, #1
 80064a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a8:	3b01      	subs	r3, #1
 80064aa:	4543      	cmp	r3, r8
 80064ac:	dcf1      	bgt.n	8006492 <_printf_float+0x40e>
 80064ae:	464b      	mov	r3, r9
 80064b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064b4:	e6dc      	b.n	8006270 <_printf_float+0x1ec>
 80064b6:	f04f 0800 	mov.w	r8, #0
 80064ba:	f104 0a1a 	add.w	sl, r4, #26
 80064be:	e7f2      	b.n	80064a6 <_printf_float+0x422>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4642      	mov	r2, r8
 80064c4:	e7df      	b.n	8006486 <_printf_float+0x402>
 80064c6:	2301      	movs	r3, #1
 80064c8:	464a      	mov	r2, r9
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	f43f ae38 	beq.w	8006146 <_printf_float+0xc2>
 80064d6:	f108 0801 	add.w	r8, r8, #1
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064de:	1a5b      	subs	r3, r3, r1
 80064e0:	4543      	cmp	r3, r8
 80064e2:	dcf0      	bgt.n	80064c6 <_printf_float+0x442>
 80064e4:	e6fa      	b.n	80062dc <_printf_float+0x258>
 80064e6:	f04f 0800 	mov.w	r8, #0
 80064ea:	f104 0919 	add.w	r9, r4, #25
 80064ee:	e7f4      	b.n	80064da <_printf_float+0x456>

080064f0 <_printf_common>:
 80064f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	4616      	mov	r6, r2
 80064f6:	4699      	mov	r9, r3
 80064f8:	688a      	ldr	r2, [r1, #8]
 80064fa:	690b      	ldr	r3, [r1, #16]
 80064fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006500:	4293      	cmp	r3, r2
 8006502:	bfb8      	it	lt
 8006504:	4613      	movlt	r3, r2
 8006506:	6033      	str	r3, [r6, #0]
 8006508:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800650c:	4607      	mov	r7, r0
 800650e:	460c      	mov	r4, r1
 8006510:	b10a      	cbz	r2, 8006516 <_printf_common+0x26>
 8006512:	3301      	adds	r3, #1
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	0699      	lsls	r1, r3, #26
 800651a:	bf42      	ittt	mi
 800651c:	6833      	ldrmi	r3, [r6, #0]
 800651e:	3302      	addmi	r3, #2
 8006520:	6033      	strmi	r3, [r6, #0]
 8006522:	6825      	ldr	r5, [r4, #0]
 8006524:	f015 0506 	ands.w	r5, r5, #6
 8006528:	d106      	bne.n	8006538 <_printf_common+0x48>
 800652a:	f104 0a19 	add.w	sl, r4, #25
 800652e:	68e3      	ldr	r3, [r4, #12]
 8006530:	6832      	ldr	r2, [r6, #0]
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	42ab      	cmp	r3, r5
 8006536:	dc26      	bgt.n	8006586 <_printf_common+0x96>
 8006538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800653c:	1e13      	subs	r3, r2, #0
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	bf18      	it	ne
 8006542:	2301      	movne	r3, #1
 8006544:	0692      	lsls	r2, r2, #26
 8006546:	d42b      	bmi.n	80065a0 <_printf_common+0xb0>
 8006548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800654c:	4649      	mov	r1, r9
 800654e:	4638      	mov	r0, r7
 8006550:	47c0      	blx	r8
 8006552:	3001      	adds	r0, #1
 8006554:	d01e      	beq.n	8006594 <_printf_common+0xa4>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	68e5      	ldr	r5, [r4, #12]
 800655a:	6832      	ldr	r2, [r6, #0]
 800655c:	f003 0306 	and.w	r3, r3, #6
 8006560:	2b04      	cmp	r3, #4
 8006562:	bf08      	it	eq
 8006564:	1aad      	subeq	r5, r5, r2
 8006566:	68a3      	ldr	r3, [r4, #8]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	bf0c      	ite	eq
 800656c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006570:	2500      	movne	r5, #0
 8006572:	4293      	cmp	r3, r2
 8006574:	bfc4      	itt	gt
 8006576:	1a9b      	subgt	r3, r3, r2
 8006578:	18ed      	addgt	r5, r5, r3
 800657a:	2600      	movs	r6, #0
 800657c:	341a      	adds	r4, #26
 800657e:	42b5      	cmp	r5, r6
 8006580:	d11a      	bne.n	80065b8 <_printf_common+0xc8>
 8006582:	2000      	movs	r0, #0
 8006584:	e008      	b.n	8006598 <_printf_common+0xa8>
 8006586:	2301      	movs	r3, #1
 8006588:	4652      	mov	r2, sl
 800658a:	4649      	mov	r1, r9
 800658c:	4638      	mov	r0, r7
 800658e:	47c0      	blx	r8
 8006590:	3001      	adds	r0, #1
 8006592:	d103      	bne.n	800659c <_printf_common+0xac>
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659c:	3501      	adds	r5, #1
 800659e:	e7c6      	b.n	800652e <_printf_common+0x3e>
 80065a0:	18e1      	adds	r1, r4, r3
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	2030      	movs	r0, #48	; 0x30
 80065a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065aa:	4422      	add	r2, r4
 80065ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065b4:	3302      	adds	r3, #2
 80065b6:	e7c7      	b.n	8006548 <_printf_common+0x58>
 80065b8:	2301      	movs	r3, #1
 80065ba:	4622      	mov	r2, r4
 80065bc:	4649      	mov	r1, r9
 80065be:	4638      	mov	r0, r7
 80065c0:	47c0      	blx	r8
 80065c2:	3001      	adds	r0, #1
 80065c4:	d0e6      	beq.n	8006594 <_printf_common+0xa4>
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7d9      	b.n	800657e <_printf_common+0x8e>
	...

080065cc <_printf_i>:
 80065cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d0:	460c      	mov	r4, r1
 80065d2:	4691      	mov	r9, r2
 80065d4:	7e27      	ldrb	r7, [r4, #24]
 80065d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065d8:	2f78      	cmp	r7, #120	; 0x78
 80065da:	4680      	mov	r8, r0
 80065dc:	469a      	mov	sl, r3
 80065de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e2:	d807      	bhi.n	80065f4 <_printf_i+0x28>
 80065e4:	2f62      	cmp	r7, #98	; 0x62
 80065e6:	d80a      	bhi.n	80065fe <_printf_i+0x32>
 80065e8:	2f00      	cmp	r7, #0
 80065ea:	f000 80d8 	beq.w	800679e <_printf_i+0x1d2>
 80065ee:	2f58      	cmp	r7, #88	; 0x58
 80065f0:	f000 80a3 	beq.w	800673a <_printf_i+0x16e>
 80065f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065fc:	e03a      	b.n	8006674 <_printf_i+0xa8>
 80065fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006602:	2b15      	cmp	r3, #21
 8006604:	d8f6      	bhi.n	80065f4 <_printf_i+0x28>
 8006606:	a001      	add	r0, pc, #4	; (adr r0, 800660c <_printf_i+0x40>)
 8006608:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800660c:	08006665 	.word	0x08006665
 8006610:	08006679 	.word	0x08006679
 8006614:	080065f5 	.word	0x080065f5
 8006618:	080065f5 	.word	0x080065f5
 800661c:	080065f5 	.word	0x080065f5
 8006620:	080065f5 	.word	0x080065f5
 8006624:	08006679 	.word	0x08006679
 8006628:	080065f5 	.word	0x080065f5
 800662c:	080065f5 	.word	0x080065f5
 8006630:	080065f5 	.word	0x080065f5
 8006634:	080065f5 	.word	0x080065f5
 8006638:	08006785 	.word	0x08006785
 800663c:	080066a9 	.word	0x080066a9
 8006640:	08006767 	.word	0x08006767
 8006644:	080065f5 	.word	0x080065f5
 8006648:	080065f5 	.word	0x080065f5
 800664c:	080067a7 	.word	0x080067a7
 8006650:	080065f5 	.word	0x080065f5
 8006654:	080066a9 	.word	0x080066a9
 8006658:	080065f5 	.word	0x080065f5
 800665c:	080065f5 	.word	0x080065f5
 8006660:	0800676f 	.word	0x0800676f
 8006664:	680b      	ldr	r3, [r1, #0]
 8006666:	1d1a      	adds	r2, r3, #4
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	600a      	str	r2, [r1, #0]
 800666c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006674:	2301      	movs	r3, #1
 8006676:	e0a3      	b.n	80067c0 <_printf_i+0x1f4>
 8006678:	6825      	ldr	r5, [r4, #0]
 800667a:	6808      	ldr	r0, [r1, #0]
 800667c:	062e      	lsls	r6, r5, #24
 800667e:	f100 0304 	add.w	r3, r0, #4
 8006682:	d50a      	bpl.n	800669a <_printf_i+0xce>
 8006684:	6805      	ldr	r5, [r0, #0]
 8006686:	600b      	str	r3, [r1, #0]
 8006688:	2d00      	cmp	r5, #0
 800668a:	da03      	bge.n	8006694 <_printf_i+0xc8>
 800668c:	232d      	movs	r3, #45	; 0x2d
 800668e:	426d      	negs	r5, r5
 8006690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006694:	485e      	ldr	r0, [pc, #376]	; (8006810 <_printf_i+0x244>)
 8006696:	230a      	movs	r3, #10
 8006698:	e019      	b.n	80066ce <_printf_i+0x102>
 800669a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800669e:	6805      	ldr	r5, [r0, #0]
 80066a0:	600b      	str	r3, [r1, #0]
 80066a2:	bf18      	it	ne
 80066a4:	b22d      	sxthne	r5, r5
 80066a6:	e7ef      	b.n	8006688 <_printf_i+0xbc>
 80066a8:	680b      	ldr	r3, [r1, #0]
 80066aa:	6825      	ldr	r5, [r4, #0]
 80066ac:	1d18      	adds	r0, r3, #4
 80066ae:	6008      	str	r0, [r1, #0]
 80066b0:	0628      	lsls	r0, r5, #24
 80066b2:	d501      	bpl.n	80066b8 <_printf_i+0xec>
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	e002      	b.n	80066be <_printf_i+0xf2>
 80066b8:	0669      	lsls	r1, r5, #25
 80066ba:	d5fb      	bpl.n	80066b4 <_printf_i+0xe8>
 80066bc:	881d      	ldrh	r5, [r3, #0]
 80066be:	4854      	ldr	r0, [pc, #336]	; (8006810 <_printf_i+0x244>)
 80066c0:	2f6f      	cmp	r7, #111	; 0x6f
 80066c2:	bf0c      	ite	eq
 80066c4:	2308      	moveq	r3, #8
 80066c6:	230a      	movne	r3, #10
 80066c8:	2100      	movs	r1, #0
 80066ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ce:	6866      	ldr	r6, [r4, #4]
 80066d0:	60a6      	str	r6, [r4, #8]
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	bfa2      	ittt	ge
 80066d6:	6821      	ldrge	r1, [r4, #0]
 80066d8:	f021 0104 	bicge.w	r1, r1, #4
 80066dc:	6021      	strge	r1, [r4, #0]
 80066de:	b90d      	cbnz	r5, 80066e4 <_printf_i+0x118>
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	d04d      	beq.n	8006780 <_printf_i+0x1b4>
 80066e4:	4616      	mov	r6, r2
 80066e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80066ea:	fb03 5711 	mls	r7, r3, r1, r5
 80066ee:	5dc7      	ldrb	r7, [r0, r7]
 80066f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066f4:	462f      	mov	r7, r5
 80066f6:	42bb      	cmp	r3, r7
 80066f8:	460d      	mov	r5, r1
 80066fa:	d9f4      	bls.n	80066e6 <_printf_i+0x11a>
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d10b      	bne.n	8006718 <_printf_i+0x14c>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	07df      	lsls	r7, r3, #31
 8006704:	d508      	bpl.n	8006718 <_printf_i+0x14c>
 8006706:	6923      	ldr	r3, [r4, #16]
 8006708:	6861      	ldr	r1, [r4, #4]
 800670a:	4299      	cmp	r1, r3
 800670c:	bfde      	ittt	le
 800670e:	2330      	movle	r3, #48	; 0x30
 8006710:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006714:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006718:	1b92      	subs	r2, r2, r6
 800671a:	6122      	str	r2, [r4, #16]
 800671c:	f8cd a000 	str.w	sl, [sp]
 8006720:	464b      	mov	r3, r9
 8006722:	aa03      	add	r2, sp, #12
 8006724:	4621      	mov	r1, r4
 8006726:	4640      	mov	r0, r8
 8006728:	f7ff fee2 	bl	80064f0 <_printf_common>
 800672c:	3001      	adds	r0, #1
 800672e:	d14c      	bne.n	80067ca <_printf_i+0x1fe>
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	b004      	add	sp, #16
 8006736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673a:	4835      	ldr	r0, [pc, #212]	; (8006810 <_printf_i+0x244>)
 800673c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	680e      	ldr	r6, [r1, #0]
 8006744:	061f      	lsls	r7, r3, #24
 8006746:	f856 5b04 	ldr.w	r5, [r6], #4
 800674a:	600e      	str	r6, [r1, #0]
 800674c:	d514      	bpl.n	8006778 <_printf_i+0x1ac>
 800674e:	07d9      	lsls	r1, r3, #31
 8006750:	bf44      	itt	mi
 8006752:	f043 0320 	orrmi.w	r3, r3, #32
 8006756:	6023      	strmi	r3, [r4, #0]
 8006758:	b91d      	cbnz	r5, 8006762 <_printf_i+0x196>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	f023 0320 	bic.w	r3, r3, #32
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	2310      	movs	r3, #16
 8006764:	e7b0      	b.n	80066c8 <_printf_i+0xfc>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f043 0320 	orr.w	r3, r3, #32
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	2378      	movs	r3, #120	; 0x78
 8006770:	4828      	ldr	r0, [pc, #160]	; (8006814 <_printf_i+0x248>)
 8006772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006776:	e7e3      	b.n	8006740 <_printf_i+0x174>
 8006778:	065e      	lsls	r6, r3, #25
 800677a:	bf48      	it	mi
 800677c:	b2ad      	uxthmi	r5, r5
 800677e:	e7e6      	b.n	800674e <_printf_i+0x182>
 8006780:	4616      	mov	r6, r2
 8006782:	e7bb      	b.n	80066fc <_printf_i+0x130>
 8006784:	680b      	ldr	r3, [r1, #0]
 8006786:	6826      	ldr	r6, [r4, #0]
 8006788:	6960      	ldr	r0, [r4, #20]
 800678a:	1d1d      	adds	r5, r3, #4
 800678c:	600d      	str	r5, [r1, #0]
 800678e:	0635      	lsls	r5, r6, #24
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	d501      	bpl.n	8006798 <_printf_i+0x1cc>
 8006794:	6018      	str	r0, [r3, #0]
 8006796:	e002      	b.n	800679e <_printf_i+0x1d2>
 8006798:	0671      	lsls	r1, r6, #25
 800679a:	d5fb      	bpl.n	8006794 <_printf_i+0x1c8>
 800679c:	8018      	strh	r0, [r3, #0]
 800679e:	2300      	movs	r3, #0
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	4616      	mov	r6, r2
 80067a4:	e7ba      	b.n	800671c <_printf_i+0x150>
 80067a6:	680b      	ldr	r3, [r1, #0]
 80067a8:	1d1a      	adds	r2, r3, #4
 80067aa:	600a      	str	r2, [r1, #0]
 80067ac:	681e      	ldr	r6, [r3, #0]
 80067ae:	6862      	ldr	r2, [r4, #4]
 80067b0:	2100      	movs	r1, #0
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7f9 fd24 	bl	8000200 <memchr>
 80067b8:	b108      	cbz	r0, 80067be <_printf_i+0x1f2>
 80067ba:	1b80      	subs	r0, r0, r6
 80067bc:	6060      	str	r0, [r4, #4]
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	2300      	movs	r3, #0
 80067c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c8:	e7a8      	b.n	800671c <_printf_i+0x150>
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	4632      	mov	r2, r6
 80067ce:	4649      	mov	r1, r9
 80067d0:	4640      	mov	r0, r8
 80067d2:	47d0      	blx	sl
 80067d4:	3001      	adds	r0, #1
 80067d6:	d0ab      	beq.n	8006730 <_printf_i+0x164>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	079b      	lsls	r3, r3, #30
 80067dc:	d413      	bmi.n	8006806 <_printf_i+0x23a>
 80067de:	68e0      	ldr	r0, [r4, #12]
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	4298      	cmp	r0, r3
 80067e4:	bfb8      	it	lt
 80067e6:	4618      	movlt	r0, r3
 80067e8:	e7a4      	b.n	8006734 <_printf_i+0x168>
 80067ea:	2301      	movs	r3, #1
 80067ec:	4632      	mov	r2, r6
 80067ee:	4649      	mov	r1, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	47d0      	blx	sl
 80067f4:	3001      	adds	r0, #1
 80067f6:	d09b      	beq.n	8006730 <_printf_i+0x164>
 80067f8:	3501      	adds	r5, #1
 80067fa:	68e3      	ldr	r3, [r4, #12]
 80067fc:	9903      	ldr	r1, [sp, #12]
 80067fe:	1a5b      	subs	r3, r3, r1
 8006800:	42ab      	cmp	r3, r5
 8006802:	dcf2      	bgt.n	80067ea <_printf_i+0x21e>
 8006804:	e7eb      	b.n	80067de <_printf_i+0x212>
 8006806:	2500      	movs	r5, #0
 8006808:	f104 0619 	add.w	r6, r4, #25
 800680c:	e7f5      	b.n	80067fa <_printf_i+0x22e>
 800680e:	bf00      	nop
 8006810:	08008bba 	.word	0x08008bba
 8006814:	08008bcb 	.word	0x08008bcb

08006818 <cleanup_glue>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	460c      	mov	r4, r1
 800681c:	6809      	ldr	r1, [r1, #0]
 800681e:	4605      	mov	r5, r0
 8006820:	b109      	cbz	r1, 8006826 <cleanup_glue+0xe>
 8006822:	f7ff fff9 	bl	8006818 <cleanup_glue>
 8006826:	4621      	mov	r1, r4
 8006828:	4628      	mov	r0, r5
 800682a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800682e:	f7ff badf 	b.w	8005df0 <_free_r>
	...

08006834 <_reclaim_reent>:
 8006834:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <_reclaim_reent+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4283      	cmp	r3, r0
 800683a:	b570      	push	{r4, r5, r6, lr}
 800683c:	4604      	mov	r4, r0
 800683e:	d051      	beq.n	80068e4 <_reclaim_reent+0xb0>
 8006840:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006842:	b143      	cbz	r3, 8006856 <_reclaim_reent+0x22>
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d14a      	bne.n	80068e0 <_reclaim_reent+0xac>
 800684a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800684c:	6819      	ldr	r1, [r3, #0]
 800684e:	b111      	cbz	r1, 8006856 <_reclaim_reent+0x22>
 8006850:	4620      	mov	r0, r4
 8006852:	f7ff facd 	bl	8005df0 <_free_r>
 8006856:	6961      	ldr	r1, [r4, #20]
 8006858:	b111      	cbz	r1, 8006860 <_reclaim_reent+0x2c>
 800685a:	4620      	mov	r0, r4
 800685c:	f7ff fac8 	bl	8005df0 <_free_r>
 8006860:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006862:	b111      	cbz	r1, 800686a <_reclaim_reent+0x36>
 8006864:	4620      	mov	r0, r4
 8006866:	f7ff fac3 	bl	8005df0 <_free_r>
 800686a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800686c:	b111      	cbz	r1, 8006874 <_reclaim_reent+0x40>
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fabe 	bl	8005df0 <_free_r>
 8006874:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006876:	b111      	cbz	r1, 800687e <_reclaim_reent+0x4a>
 8006878:	4620      	mov	r0, r4
 800687a:	f7ff fab9 	bl	8005df0 <_free_r>
 800687e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006880:	b111      	cbz	r1, 8006888 <_reclaim_reent+0x54>
 8006882:	4620      	mov	r0, r4
 8006884:	f7ff fab4 	bl	8005df0 <_free_r>
 8006888:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800688a:	b111      	cbz	r1, 8006892 <_reclaim_reent+0x5e>
 800688c:	4620      	mov	r0, r4
 800688e:	f7ff faaf 	bl	8005df0 <_free_r>
 8006892:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006894:	b111      	cbz	r1, 800689c <_reclaim_reent+0x68>
 8006896:	4620      	mov	r0, r4
 8006898:	f7ff faaa 	bl	8005df0 <_free_r>
 800689c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800689e:	b111      	cbz	r1, 80068a6 <_reclaim_reent+0x72>
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7ff faa5 	bl	8005df0 <_free_r>
 80068a6:	69a3      	ldr	r3, [r4, #24]
 80068a8:	b1e3      	cbz	r3, 80068e4 <_reclaim_reent+0xb0>
 80068aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068ac:	4620      	mov	r0, r4
 80068ae:	4798      	blx	r3
 80068b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068b2:	b1b9      	cbz	r1, 80068e4 <_reclaim_reent+0xb0>
 80068b4:	4620      	mov	r0, r4
 80068b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068ba:	f7ff bfad 	b.w	8006818 <cleanup_glue>
 80068be:	5949      	ldr	r1, [r1, r5]
 80068c0:	b941      	cbnz	r1, 80068d4 <_reclaim_reent+0xa0>
 80068c2:	3504      	adds	r5, #4
 80068c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068c6:	2d80      	cmp	r5, #128	; 0x80
 80068c8:	68d9      	ldr	r1, [r3, #12]
 80068ca:	d1f8      	bne.n	80068be <_reclaim_reent+0x8a>
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7ff fa8f 	bl	8005df0 <_free_r>
 80068d2:	e7ba      	b.n	800684a <_reclaim_reent+0x16>
 80068d4:	680e      	ldr	r6, [r1, #0]
 80068d6:	4620      	mov	r0, r4
 80068d8:	f7ff fa8a 	bl	8005df0 <_free_r>
 80068dc:	4631      	mov	r1, r6
 80068de:	e7ef      	b.n	80068c0 <_reclaim_reent+0x8c>
 80068e0:	2500      	movs	r5, #0
 80068e2:	e7ef      	b.n	80068c4 <_reclaim_reent+0x90>
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	bf00      	nop
 80068e8:	20000010 	.word	0x20000010

080068ec <_sbrk_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d06      	ldr	r5, [pc, #24]	; (8006908 <_sbrk_r+0x1c>)
 80068f0:	2300      	movs	r3, #0
 80068f2:	4604      	mov	r4, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	f7fa fdf8 	bl	80014ec <_sbrk>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_sbrk_r+0x1a>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_sbrk_r+0x1a>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20005560 	.word	0x20005560

0800690c <siprintf>:
 800690c:	b40e      	push	{r1, r2, r3}
 800690e:	b500      	push	{lr}
 8006910:	b09c      	sub	sp, #112	; 0x70
 8006912:	ab1d      	add	r3, sp, #116	; 0x74
 8006914:	9002      	str	r0, [sp, #8]
 8006916:	9006      	str	r0, [sp, #24]
 8006918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800691c:	4809      	ldr	r0, [pc, #36]	; (8006944 <siprintf+0x38>)
 800691e:	9107      	str	r1, [sp, #28]
 8006920:	9104      	str	r1, [sp, #16]
 8006922:	4909      	ldr	r1, [pc, #36]	; (8006948 <siprintf+0x3c>)
 8006924:	f853 2b04 	ldr.w	r2, [r3], #4
 8006928:	9105      	str	r1, [sp, #20]
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	a902      	add	r1, sp, #8
 8006930:	f001 fbb6 	bl	80080a0 <_svfiprintf_r>
 8006934:	9b02      	ldr	r3, [sp, #8]
 8006936:	2200      	movs	r2, #0
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	b01c      	add	sp, #112	; 0x70
 800693c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006940:	b003      	add	sp, #12
 8006942:	4770      	bx	lr
 8006944:	20000010 	.word	0x20000010
 8006948:	ffff0208 	.word	0xffff0208

0800694c <__sread>:
 800694c:	b510      	push	{r4, lr}
 800694e:	460c      	mov	r4, r1
 8006950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006954:	f001 fca4 	bl	80082a0 <_read_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	bfab      	itete	ge
 800695c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800695e:	89a3      	ldrhlt	r3, [r4, #12]
 8006960:	181b      	addge	r3, r3, r0
 8006962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006966:	bfac      	ite	ge
 8006968:	6563      	strge	r3, [r4, #84]	; 0x54
 800696a:	81a3      	strhlt	r3, [r4, #12]
 800696c:	bd10      	pop	{r4, pc}

0800696e <__swrite>:
 800696e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006972:	461f      	mov	r7, r3
 8006974:	898b      	ldrh	r3, [r1, #12]
 8006976:	05db      	lsls	r3, r3, #23
 8006978:	4605      	mov	r5, r0
 800697a:	460c      	mov	r4, r1
 800697c:	4616      	mov	r6, r2
 800697e:	d505      	bpl.n	800698c <__swrite+0x1e>
 8006980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006984:	2302      	movs	r3, #2
 8006986:	2200      	movs	r2, #0
 8006988:	f000 ff84 	bl	8007894 <_lseek_r>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	4632      	mov	r2, r6
 800699a:	463b      	mov	r3, r7
 800699c:	4628      	mov	r0, r5
 800699e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a2:	f000 b817 	b.w	80069d4 <_write_r>

080069a6 <__sseek>:
 80069a6:	b510      	push	{r4, lr}
 80069a8:	460c      	mov	r4, r1
 80069aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ae:	f000 ff71 	bl	8007894 <_lseek_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	bf15      	itete	ne
 80069b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80069ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069c2:	81a3      	strheq	r3, [r4, #12]
 80069c4:	bf18      	it	ne
 80069c6:	81a3      	strhne	r3, [r4, #12]
 80069c8:	bd10      	pop	{r4, pc}

080069ca <__sclose>:
 80069ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ce:	f000 b813 	b.w	80069f8 <_close_r>
	...

080069d4 <_write_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d07      	ldr	r5, [pc, #28]	; (80069f4 <_write_r+0x20>)
 80069d8:	4604      	mov	r4, r0
 80069da:	4608      	mov	r0, r1
 80069dc:	4611      	mov	r1, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	602a      	str	r2, [r5, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f7fa fd31 	bl	800144a <_write>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_write_r+0x1e>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_write_r+0x1e>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20005560 	.word	0x20005560

080069f8 <_close_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d06      	ldr	r5, [pc, #24]	; (8006a14 <_close_r+0x1c>)
 80069fc:	2300      	movs	r3, #0
 80069fe:	4604      	mov	r4, r0
 8006a00:	4608      	mov	r0, r1
 8006a02:	602b      	str	r3, [r5, #0]
 8006a04:	f7fa fd3d 	bl	8001482 <_close>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d102      	bne.n	8006a12 <_close_r+0x1a>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b103      	cbz	r3, 8006a12 <_close_r+0x1a>
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	20005560 	.word	0x20005560

08006a18 <quorem>:
 8006a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	6903      	ldr	r3, [r0, #16]
 8006a1e:	690c      	ldr	r4, [r1, #16]
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	4607      	mov	r7, r0
 8006a24:	f2c0 8081 	blt.w	8006b2a <quorem+0x112>
 8006a28:	3c01      	subs	r4, #1
 8006a2a:	f101 0814 	add.w	r8, r1, #20
 8006a2e:	f100 0514 	add.w	r5, r0, #20
 8006a32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a40:	3301      	adds	r3, #1
 8006a42:	429a      	cmp	r2, r3
 8006a44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a50:	d331      	bcc.n	8006ab6 <quorem+0x9e>
 8006a52:	f04f 0e00 	mov.w	lr, #0
 8006a56:	4640      	mov	r0, r8
 8006a58:	46ac      	mov	ip, r5
 8006a5a:	46f2      	mov	sl, lr
 8006a5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a60:	b293      	uxth	r3, r2
 8006a62:	fb06 e303 	mla	r3, r6, r3, lr
 8006a66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a70:	0c12      	lsrs	r2, r2, #16
 8006a72:	f8dc a000 	ldr.w	sl, [ip]
 8006a76:	fb06 e202 	mla	r2, r6, r2, lr
 8006a7a:	fa13 f38a 	uxtah	r3, r3, sl
 8006a7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a82:	fa1f fa82 	uxth.w	sl, r2
 8006a86:	f8dc 2000 	ldr.w	r2, [ip]
 8006a8a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006a8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a98:	4581      	cmp	r9, r0
 8006a9a:	f84c 3b04 	str.w	r3, [ip], #4
 8006a9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006aa2:	d2db      	bcs.n	8006a5c <quorem+0x44>
 8006aa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006aa8:	b92b      	cbnz	r3, 8006ab6 <quorem+0x9e>
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	3b04      	subs	r3, #4
 8006aae:	429d      	cmp	r5, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	d32e      	bcc.n	8006b12 <quorem+0xfa>
 8006ab4:	613c      	str	r4, [r7, #16]
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	f001 f988 	bl	8007dcc <__mcmp>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	db24      	blt.n	8006b0a <quorem+0xf2>
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f04f 0c00 	mov.w	ip, #0
 8006ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006acc:	f8d0 e000 	ldr.w	lr, [r0]
 8006ad0:	b293      	uxth	r3, r2
 8006ad2:	ebac 0303 	sub.w	r3, ip, r3
 8006ad6:	0c12      	lsrs	r2, r2, #16
 8006ad8:	fa13 f38e 	uxtah	r3, r3, lr
 8006adc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aea:	45c1      	cmp	r9, r8
 8006aec:	f840 3b04 	str.w	r3, [r0], #4
 8006af0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006af4:	d2e8      	bcs.n	8006ac8 <quorem+0xb0>
 8006af6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006afe:	b922      	cbnz	r2, 8006b0a <quorem+0xf2>
 8006b00:	3b04      	subs	r3, #4
 8006b02:	429d      	cmp	r5, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	d30a      	bcc.n	8006b1e <quorem+0x106>
 8006b08:	613c      	str	r4, [r7, #16]
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	b003      	add	sp, #12
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	2a00      	cmp	r2, #0
 8006b18:	d1cc      	bne.n	8006ab4 <quorem+0x9c>
 8006b1a:	3c01      	subs	r4, #1
 8006b1c:	e7c7      	b.n	8006aae <quorem+0x96>
 8006b1e:	6812      	ldr	r2, [r2, #0]
 8006b20:	3b04      	subs	r3, #4
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	d1f0      	bne.n	8006b08 <quorem+0xf0>
 8006b26:	3c01      	subs	r4, #1
 8006b28:	e7eb      	b.n	8006b02 <quorem+0xea>
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	e7ee      	b.n	8006b0c <quorem+0xf4>
	...

08006b30 <_dtoa_r>:
 8006b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	ed2d 8b02 	vpush	{d8}
 8006b38:	ec57 6b10 	vmov	r6, r7, d0
 8006b3c:	b095      	sub	sp, #84	; 0x54
 8006b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b44:	9105      	str	r1, [sp, #20]
 8006b46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b50:	b975      	cbnz	r5, 8006b70 <_dtoa_r+0x40>
 8006b52:	2010      	movs	r0, #16
 8006b54:	f7ff f92e 	bl	8005db4 <malloc>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b5c:	b920      	cbnz	r0, 8006b68 <_dtoa_r+0x38>
 8006b5e:	4bb2      	ldr	r3, [pc, #712]	; (8006e28 <_dtoa_r+0x2f8>)
 8006b60:	21ea      	movs	r1, #234	; 0xea
 8006b62:	48b2      	ldr	r0, [pc, #712]	; (8006e2c <_dtoa_r+0x2fc>)
 8006b64:	f001 fbae 	bl	80082c4 <__assert_func>
 8006b68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b6c:	6005      	str	r5, [r0, #0]
 8006b6e:	60c5      	str	r5, [r0, #12]
 8006b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b72:	6819      	ldr	r1, [r3, #0]
 8006b74:	b151      	cbz	r1, 8006b8c <_dtoa_r+0x5c>
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	604a      	str	r2, [r1, #4]
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4093      	lsls	r3, r2
 8006b7e:	608b      	str	r3, [r1, #8]
 8006b80:	4620      	mov	r0, r4
 8006b82:	f000 fee5 	bl	8007950 <_Bfree>
 8006b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	1e3b      	subs	r3, r7, #0
 8006b8e:	bfb9      	ittee	lt
 8006b90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b94:	9303      	strlt	r3, [sp, #12]
 8006b96:	2300      	movge	r3, #0
 8006b98:	f8c8 3000 	strge.w	r3, [r8]
 8006b9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006ba0:	4ba3      	ldr	r3, [pc, #652]	; (8006e30 <_dtoa_r+0x300>)
 8006ba2:	bfbc      	itt	lt
 8006ba4:	2201      	movlt	r2, #1
 8006ba6:	f8c8 2000 	strlt.w	r2, [r8]
 8006baa:	ea33 0309 	bics.w	r3, r3, r9
 8006bae:	d11b      	bne.n	8006be8 <_dtoa_r+0xb8>
 8006bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bbc:	4333      	orrs	r3, r6
 8006bbe:	f000 857a 	beq.w	80076b6 <_dtoa_r+0xb86>
 8006bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bc4:	b963      	cbnz	r3, 8006be0 <_dtoa_r+0xb0>
 8006bc6:	4b9b      	ldr	r3, [pc, #620]	; (8006e34 <_dtoa_r+0x304>)
 8006bc8:	e024      	b.n	8006c14 <_dtoa_r+0xe4>
 8006bca:	4b9b      	ldr	r3, [pc, #620]	; (8006e38 <_dtoa_r+0x308>)
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	9800      	ldr	r0, [sp, #0]
 8006bd6:	b015      	add	sp, #84	; 0x54
 8006bd8:	ecbd 8b02 	vpop	{d8}
 8006bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be0:	4b94      	ldr	r3, [pc, #592]	; (8006e34 <_dtoa_r+0x304>)
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	3303      	adds	r3, #3
 8006be6:	e7f3      	b.n	8006bd0 <_dtoa_r+0xa0>
 8006be8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bec:	2200      	movs	r2, #0
 8006bee:	ec51 0b17 	vmov	r0, r1, d7
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006bf8:	f7f9 ff76 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	b158      	cbz	r0, 8006c18 <_dtoa_r+0xe8>
 8006c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c02:	2301      	movs	r3, #1
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8551 	beq.w	80076b0 <_dtoa_r+0xb80>
 8006c0e:	488b      	ldr	r0, [pc, #556]	; (8006e3c <_dtoa_r+0x30c>)
 8006c10:	6018      	str	r0, [r3, #0]
 8006c12:	1e43      	subs	r3, r0, #1
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	e7dd      	b.n	8006bd4 <_dtoa_r+0xa4>
 8006c18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006c1c:	aa12      	add	r2, sp, #72	; 0x48
 8006c1e:	a913      	add	r1, sp, #76	; 0x4c
 8006c20:	4620      	mov	r0, r4
 8006c22:	f001 f977 	bl	8007f14 <__d2b>
 8006c26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c2a:	4683      	mov	fp, r0
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	d07c      	beq.n	8006d2a <_dtoa_r+0x1fa>
 8006c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006c3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c4a:	4b7d      	ldr	r3, [pc, #500]	; (8006e40 <_dtoa_r+0x310>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4639      	mov	r1, r7
 8006c52:	f7f9 fb29 	bl	80002a8 <__aeabi_dsub>
 8006c56:	a36e      	add	r3, pc, #440	; (adr r3, 8006e10 <_dtoa_r+0x2e0>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fcdc 	bl	8000618 <__aeabi_dmul>
 8006c60:	a36d      	add	r3, pc, #436	; (adr r3, 8006e18 <_dtoa_r+0x2e8>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f7f9 fb21 	bl	80002ac <__adddf3>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	460f      	mov	r7, r1
 8006c70:	f7f9 fc68 	bl	8000544 <__aeabi_i2d>
 8006c74:	a36a      	add	r3, pc, #424	; (adr r3, 8006e20 <_dtoa_r+0x2f0>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f7f9 fccd 	bl	8000618 <__aeabi_dmul>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	f7f9 fb11 	bl	80002ac <__adddf3>
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	f7f9 ff73 	bl	8000b78 <__aeabi_d2iz>
 8006c92:	2200      	movs	r2, #0
 8006c94:	4682      	mov	sl, r0
 8006c96:	2300      	movs	r3, #0
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 ff2e 	bl	8000afc <__aeabi_dcmplt>
 8006ca0:	b148      	cbz	r0, 8006cb6 <_dtoa_r+0x186>
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	f7f9 fc4e 	bl	8000544 <__aeabi_i2d>
 8006ca8:	4632      	mov	r2, r6
 8006caa:	463b      	mov	r3, r7
 8006cac:	f7f9 ff1c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cb0:	b908      	cbnz	r0, 8006cb6 <_dtoa_r+0x186>
 8006cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cb6:	f1ba 0f16 	cmp.w	sl, #22
 8006cba:	d854      	bhi.n	8006d66 <_dtoa_r+0x236>
 8006cbc:	4b61      	ldr	r3, [pc, #388]	; (8006e44 <_dtoa_r+0x314>)
 8006cbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cca:	f7f9 ff17 	bl	8000afc <__aeabi_dcmplt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d04b      	beq.n	8006d6a <_dtoa_r+0x23a>
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8006cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cdc:	1b5d      	subs	r5, r3, r5
 8006cde:	1e6b      	subs	r3, r5, #1
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	bf43      	ittte	mi
 8006ce4:	2300      	movmi	r3, #0
 8006ce6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006cea:	9304      	strmi	r3, [sp, #16]
 8006cec:	f04f 0800 	movpl.w	r8, #0
 8006cf0:	f1ba 0f00 	cmp.w	sl, #0
 8006cf4:	db3b      	blt.n	8006d6e <_dtoa_r+0x23e>
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006cfc:	4453      	add	r3, sl
 8006cfe:	9304      	str	r3, [sp, #16]
 8006d00:	2300      	movs	r3, #0
 8006d02:	9306      	str	r3, [sp, #24]
 8006d04:	9b05      	ldr	r3, [sp, #20]
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d869      	bhi.n	8006dde <_dtoa_r+0x2ae>
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	bfc4      	itt	gt
 8006d0e:	3b04      	subgt	r3, #4
 8006d10:	9305      	strgt	r3, [sp, #20]
 8006d12:	9b05      	ldr	r3, [sp, #20]
 8006d14:	f1a3 0302 	sub.w	r3, r3, #2
 8006d18:	bfcc      	ite	gt
 8006d1a:	2500      	movgt	r5, #0
 8006d1c:	2501      	movle	r5, #1
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d869      	bhi.n	8006df6 <_dtoa_r+0x2c6>
 8006d22:	e8df f003 	tbb	[pc, r3]
 8006d26:	4e2c      	.short	0x4e2c
 8006d28:	5a4c      	.short	0x5a4c
 8006d2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006d2e:	441d      	add	r5, r3
 8006d30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	bfc1      	itttt	gt
 8006d38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d40:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d48:	bfda      	itte	le
 8006d4a:	f1c3 0320 	rsble	r3, r3, #32
 8006d4e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d52:	4318      	orrgt	r0, r3
 8006d54:	f7f9 fbe6 	bl	8000524 <__aeabi_ui2d>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d60:	3d01      	subs	r5, #1
 8006d62:	9310      	str	r3, [sp, #64]	; 0x40
 8006d64:	e771      	b.n	8006c4a <_dtoa_r+0x11a>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e7b6      	b.n	8006cd8 <_dtoa_r+0x1a8>
 8006d6a:	900e      	str	r0, [sp, #56]	; 0x38
 8006d6c:	e7b5      	b.n	8006cda <_dtoa_r+0x1aa>
 8006d6e:	f1ca 0300 	rsb	r3, sl, #0
 8006d72:	9306      	str	r3, [sp, #24]
 8006d74:	2300      	movs	r3, #0
 8006d76:	eba8 080a 	sub.w	r8, r8, sl
 8006d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d7c:	e7c2      	b.n	8006d04 <_dtoa_r+0x1d4>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9308      	str	r3, [sp, #32]
 8006d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dc39      	bgt.n	8006dfc <_dtoa_r+0x2cc>
 8006d88:	f04f 0901 	mov.w	r9, #1
 8006d8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d90:	464b      	mov	r3, r9
 8006d92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d98:	2200      	movs	r2, #0
 8006d9a:	6042      	str	r2, [r0, #4]
 8006d9c:	2204      	movs	r2, #4
 8006d9e:	f102 0614 	add.w	r6, r2, #20
 8006da2:	429e      	cmp	r6, r3
 8006da4:	6841      	ldr	r1, [r0, #4]
 8006da6:	d92f      	bls.n	8006e08 <_dtoa_r+0x2d8>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fd91 	bl	80078d0 <_Balloc>
 8006dae:	9000      	str	r0, [sp, #0]
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d14b      	bne.n	8006e4c <_dtoa_r+0x31c>
 8006db4:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <_dtoa_r+0x318>)
 8006db6:	4602      	mov	r2, r0
 8006db8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dbc:	e6d1      	b.n	8006b62 <_dtoa_r+0x32>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7de      	b.n	8006d80 <_dtoa_r+0x250>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9308      	str	r3, [sp, #32]
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	eb0a 0903 	add.w	r9, sl, r3
 8006dcc:	f109 0301 	add.w	r3, r9, #1
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	bfb8      	it	lt
 8006dd6:	2301      	movlt	r3, #1
 8006dd8:	e7dd      	b.n	8006d96 <_dtoa_r+0x266>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e7f2      	b.n	8006dc4 <_dtoa_r+0x294>
 8006dde:	2501      	movs	r5, #1
 8006de0:	2300      	movs	r3, #0
 8006de2:	9305      	str	r3, [sp, #20]
 8006de4:	9508      	str	r5, [sp, #32]
 8006de6:	f04f 39ff 	mov.w	r9, #4294967295
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006df0:	2312      	movs	r3, #18
 8006df2:	9209      	str	r2, [sp, #36]	; 0x24
 8006df4:	e7cf      	b.n	8006d96 <_dtoa_r+0x266>
 8006df6:	2301      	movs	r3, #1
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	e7f4      	b.n	8006de6 <_dtoa_r+0x2b6>
 8006dfc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e00:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e04:	464b      	mov	r3, r9
 8006e06:	e7c6      	b.n	8006d96 <_dtoa_r+0x266>
 8006e08:	3101      	adds	r1, #1
 8006e0a:	6041      	str	r1, [r0, #4]
 8006e0c:	0052      	lsls	r2, r2, #1
 8006e0e:	e7c6      	b.n	8006d9e <_dtoa_r+0x26e>
 8006e10:	636f4361 	.word	0x636f4361
 8006e14:	3fd287a7 	.word	0x3fd287a7
 8006e18:	8b60c8b3 	.word	0x8b60c8b3
 8006e1c:	3fc68a28 	.word	0x3fc68a28
 8006e20:	509f79fb 	.word	0x509f79fb
 8006e24:	3fd34413 	.word	0x3fd34413
 8006e28:	08008be9 	.word	0x08008be9
 8006e2c:	08008c00 	.word	0x08008c00
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	08008be5 	.word	0x08008be5
 8006e38:	08008bdc 	.word	0x08008bdc
 8006e3c:	08008bb9 	.word	0x08008bb9
 8006e40:	3ff80000 	.word	0x3ff80000
 8006e44:	08008cf8 	.word	0x08008cf8
 8006e48:	08008c5f 	.word	0x08008c5f
 8006e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e4e:	9a00      	ldr	r2, [sp, #0]
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	2b0e      	cmp	r3, #14
 8006e56:	f200 80ad 	bhi.w	8006fb4 <_dtoa_r+0x484>
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	f000 80aa 	beq.w	8006fb4 <_dtoa_r+0x484>
 8006e60:	f1ba 0f00 	cmp.w	sl, #0
 8006e64:	dd36      	ble.n	8006ed4 <_dtoa_r+0x3a4>
 8006e66:	4ac3      	ldr	r2, [pc, #780]	; (8007174 <_dtoa_r+0x644>)
 8006e68:	f00a 030f 	and.w	r3, sl, #15
 8006e6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e70:	ed93 7b00 	vldr	d7, [r3]
 8006e74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006e78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006e7c:	eeb0 8a47 	vmov.f32	s16, s14
 8006e80:	eef0 8a67 	vmov.f32	s17, s15
 8006e84:	d016      	beq.n	8006eb4 <_dtoa_r+0x384>
 8006e86:	4bbc      	ldr	r3, [pc, #752]	; (8007178 <_dtoa_r+0x648>)
 8006e88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e90:	f7f9 fcec 	bl	800086c <__aeabi_ddiv>
 8006e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e98:	f007 070f 	and.w	r7, r7, #15
 8006e9c:	2503      	movs	r5, #3
 8006e9e:	4eb6      	ldr	r6, [pc, #728]	; (8007178 <_dtoa_r+0x648>)
 8006ea0:	b957      	cbnz	r7, 8006eb8 <_dtoa_r+0x388>
 8006ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea6:	ec53 2b18 	vmov	r2, r3, d8
 8006eaa:	f7f9 fcdf 	bl	800086c <__aeabi_ddiv>
 8006eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb2:	e029      	b.n	8006f08 <_dtoa_r+0x3d8>
 8006eb4:	2502      	movs	r5, #2
 8006eb6:	e7f2      	b.n	8006e9e <_dtoa_r+0x36e>
 8006eb8:	07f9      	lsls	r1, r7, #31
 8006eba:	d508      	bpl.n	8006ece <_dtoa_r+0x39e>
 8006ebc:	ec51 0b18 	vmov	r0, r1, d8
 8006ec0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ec4:	f7f9 fba8 	bl	8000618 <__aeabi_dmul>
 8006ec8:	ec41 0b18 	vmov	d8, r0, r1
 8006ecc:	3501      	adds	r5, #1
 8006ece:	107f      	asrs	r7, r7, #1
 8006ed0:	3608      	adds	r6, #8
 8006ed2:	e7e5      	b.n	8006ea0 <_dtoa_r+0x370>
 8006ed4:	f000 80a6 	beq.w	8007024 <_dtoa_r+0x4f4>
 8006ed8:	f1ca 0600 	rsb	r6, sl, #0
 8006edc:	4ba5      	ldr	r3, [pc, #660]	; (8007174 <_dtoa_r+0x644>)
 8006ede:	4fa6      	ldr	r7, [pc, #664]	; (8007178 <_dtoa_r+0x648>)
 8006ee0:	f006 020f 	and.w	r2, r6, #15
 8006ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ef0:	f7f9 fb92 	bl	8000618 <__aeabi_dmul>
 8006ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef8:	1136      	asrs	r6, r6, #4
 8006efa:	2300      	movs	r3, #0
 8006efc:	2502      	movs	r5, #2
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	f040 8085 	bne.w	800700e <_dtoa_r+0x4de>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1d2      	bne.n	8006eae <_dtoa_r+0x37e>
 8006f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 808c 	beq.w	8007028 <_dtoa_r+0x4f8>
 8006f10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f14:	4b99      	ldr	r3, [pc, #612]	; (800717c <_dtoa_r+0x64c>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 fdee 	bl	8000afc <__aeabi_dcmplt>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	f000 8081 	beq.w	8007028 <_dtoa_r+0x4f8>
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d07d      	beq.n	8007028 <_dtoa_r+0x4f8>
 8006f2c:	f1b9 0f00 	cmp.w	r9, #0
 8006f30:	dd3c      	ble.n	8006fac <_dtoa_r+0x47c>
 8006f32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	4b91      	ldr	r3, [pc, #580]	; (8007180 <_dtoa_r+0x650>)
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	4639      	mov	r1, r7
 8006f40:	f7f9 fb6a 	bl	8000618 <__aeabi_dmul>
 8006f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f48:	3501      	adds	r5, #1
 8006f4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006f4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f52:	4628      	mov	r0, r5
 8006f54:	f7f9 faf6 	bl	8000544 <__aeabi_i2d>
 8006f58:	4632      	mov	r2, r6
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	f7f9 fb5c 	bl	8000618 <__aeabi_dmul>
 8006f60:	4b88      	ldr	r3, [pc, #544]	; (8007184 <_dtoa_r+0x654>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	f7f9 f9a2 	bl	80002ac <__adddf3>
 8006f68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f70:	9303      	str	r3, [sp, #12]
 8006f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d15c      	bne.n	8007032 <_dtoa_r+0x502>
 8006f78:	4b83      	ldr	r3, [pc, #524]	; (8007188 <_dtoa_r+0x658>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	4639      	mov	r1, r7
 8006f80:	f7f9 f992 	bl	80002a8 <__aeabi_dsub>
 8006f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f88:	4606      	mov	r6, r0
 8006f8a:	460f      	mov	r7, r1
 8006f8c:	f7f9 fdd4 	bl	8000b38 <__aeabi_dcmpgt>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	f040 8296 	bne.w	80074c2 <_dtoa_r+0x992>
 8006f96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 fdab 	bl	8000afc <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f040 8288 	bne.w	80074bc <_dtoa_r+0x98c>
 8006fac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f2c0 8158 	blt.w	800726c <_dtoa_r+0x73c>
 8006fbc:	f1ba 0f0e 	cmp.w	sl, #14
 8006fc0:	f300 8154 	bgt.w	800726c <_dtoa_r+0x73c>
 8006fc4:	4b6b      	ldr	r3, [pc, #428]	; (8007174 <_dtoa_r+0x644>)
 8006fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006fca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f280 80e3 	bge.w	800719c <_dtoa_r+0x66c>
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f300 80df 	bgt.w	800719c <_dtoa_r+0x66c>
 8006fde:	f040 826d 	bne.w	80074bc <_dtoa_r+0x98c>
 8006fe2:	4b69      	ldr	r3, [pc, #420]	; (8007188 <_dtoa_r+0x658>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	4649      	mov	r1, r9
 8006fea:	f7f9 fb15 	bl	8000618 <__aeabi_dmul>
 8006fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ff2:	f7f9 fd97 	bl	8000b24 <__aeabi_dcmpge>
 8006ff6:	9e01      	ldr	r6, [sp, #4]
 8006ff8:	4637      	mov	r7, r6
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f040 8243 	bne.w	8007486 <_dtoa_r+0x956>
 8007000:	9d00      	ldr	r5, [sp, #0]
 8007002:	2331      	movs	r3, #49	; 0x31
 8007004:	f805 3b01 	strb.w	r3, [r5], #1
 8007008:	f10a 0a01 	add.w	sl, sl, #1
 800700c:	e23f      	b.n	800748e <_dtoa_r+0x95e>
 800700e:	07f2      	lsls	r2, r6, #31
 8007010:	d505      	bpl.n	800701e <_dtoa_r+0x4ee>
 8007012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007016:	f7f9 faff 	bl	8000618 <__aeabi_dmul>
 800701a:	3501      	adds	r5, #1
 800701c:	2301      	movs	r3, #1
 800701e:	1076      	asrs	r6, r6, #1
 8007020:	3708      	adds	r7, #8
 8007022:	e76c      	b.n	8006efe <_dtoa_r+0x3ce>
 8007024:	2502      	movs	r5, #2
 8007026:	e76f      	b.n	8006f08 <_dtoa_r+0x3d8>
 8007028:	9b01      	ldr	r3, [sp, #4]
 800702a:	f8cd a01c 	str.w	sl, [sp, #28]
 800702e:	930c      	str	r3, [sp, #48]	; 0x30
 8007030:	e78d      	b.n	8006f4e <_dtoa_r+0x41e>
 8007032:	9900      	ldr	r1, [sp, #0]
 8007034:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007038:	4b4e      	ldr	r3, [pc, #312]	; (8007174 <_dtoa_r+0x644>)
 800703a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800703e:	4401      	add	r1, r0
 8007040:	9102      	str	r1, [sp, #8]
 8007042:	9908      	ldr	r1, [sp, #32]
 8007044:	eeb0 8a47 	vmov.f32	s16, s14
 8007048:	eef0 8a67 	vmov.f32	s17, s15
 800704c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007050:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007054:	2900      	cmp	r1, #0
 8007056:	d045      	beq.n	80070e4 <_dtoa_r+0x5b4>
 8007058:	494c      	ldr	r1, [pc, #304]	; (800718c <_dtoa_r+0x65c>)
 800705a:	2000      	movs	r0, #0
 800705c:	f7f9 fc06 	bl	800086c <__aeabi_ddiv>
 8007060:	ec53 2b18 	vmov	r2, r3, d8
 8007064:	f7f9 f920 	bl	80002a8 <__aeabi_dsub>
 8007068:	9d00      	ldr	r5, [sp, #0]
 800706a:	ec41 0b18 	vmov	d8, r0, r1
 800706e:	4639      	mov	r1, r7
 8007070:	4630      	mov	r0, r6
 8007072:	f7f9 fd81 	bl	8000b78 <__aeabi_d2iz>
 8007076:	900c      	str	r0, [sp, #48]	; 0x30
 8007078:	f7f9 fa64 	bl	8000544 <__aeabi_i2d>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 f910 	bl	80002a8 <__aeabi_dsub>
 8007088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800708a:	3330      	adds	r3, #48	; 0x30
 800708c:	f805 3b01 	strb.w	r3, [r5], #1
 8007090:	ec53 2b18 	vmov	r2, r3, d8
 8007094:	4606      	mov	r6, r0
 8007096:	460f      	mov	r7, r1
 8007098:	f7f9 fd30 	bl	8000afc <__aeabi_dcmplt>
 800709c:	2800      	cmp	r0, #0
 800709e:	d165      	bne.n	800716c <_dtoa_r+0x63c>
 80070a0:	4632      	mov	r2, r6
 80070a2:	463b      	mov	r3, r7
 80070a4:	4935      	ldr	r1, [pc, #212]	; (800717c <_dtoa_r+0x64c>)
 80070a6:	2000      	movs	r0, #0
 80070a8:	f7f9 f8fe 	bl	80002a8 <__aeabi_dsub>
 80070ac:	ec53 2b18 	vmov	r2, r3, d8
 80070b0:	f7f9 fd24 	bl	8000afc <__aeabi_dcmplt>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f040 80b9 	bne.w	800722c <_dtoa_r+0x6fc>
 80070ba:	9b02      	ldr	r3, [sp, #8]
 80070bc:	429d      	cmp	r5, r3
 80070be:	f43f af75 	beq.w	8006fac <_dtoa_r+0x47c>
 80070c2:	4b2f      	ldr	r3, [pc, #188]	; (8007180 <_dtoa_r+0x650>)
 80070c4:	ec51 0b18 	vmov	r0, r1, d8
 80070c8:	2200      	movs	r2, #0
 80070ca:	f7f9 faa5 	bl	8000618 <__aeabi_dmul>
 80070ce:	4b2c      	ldr	r3, [pc, #176]	; (8007180 <_dtoa_r+0x650>)
 80070d0:	ec41 0b18 	vmov	d8, r0, r1
 80070d4:	2200      	movs	r2, #0
 80070d6:	4630      	mov	r0, r6
 80070d8:	4639      	mov	r1, r7
 80070da:	f7f9 fa9d 	bl	8000618 <__aeabi_dmul>
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	e7c4      	b.n	800706e <_dtoa_r+0x53e>
 80070e4:	ec51 0b17 	vmov	r0, r1, d7
 80070e8:	f7f9 fa96 	bl	8000618 <__aeabi_dmul>
 80070ec:	9b02      	ldr	r3, [sp, #8]
 80070ee:	9d00      	ldr	r5, [sp, #0]
 80070f0:	930c      	str	r3, [sp, #48]	; 0x30
 80070f2:	ec41 0b18 	vmov	d8, r0, r1
 80070f6:	4639      	mov	r1, r7
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7f9 fd3d 	bl	8000b78 <__aeabi_d2iz>
 80070fe:	9011      	str	r0, [sp, #68]	; 0x44
 8007100:	f7f9 fa20 	bl	8000544 <__aeabi_i2d>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 f8cc 	bl	80002a8 <__aeabi_dsub>
 8007110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007112:	3330      	adds	r3, #48	; 0x30
 8007114:	f805 3b01 	strb.w	r3, [r5], #1
 8007118:	9b02      	ldr	r3, [sp, #8]
 800711a:	429d      	cmp	r5, r3
 800711c:	4606      	mov	r6, r0
 800711e:	460f      	mov	r7, r1
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	d134      	bne.n	8007190 <_dtoa_r+0x660>
 8007126:	4b19      	ldr	r3, [pc, #100]	; (800718c <_dtoa_r+0x65c>)
 8007128:	ec51 0b18 	vmov	r0, r1, d8
 800712c:	f7f9 f8be 	bl	80002ac <__adddf3>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 fcfe 	bl	8000b38 <__aeabi_dcmpgt>
 800713c:	2800      	cmp	r0, #0
 800713e:	d175      	bne.n	800722c <_dtoa_r+0x6fc>
 8007140:	ec53 2b18 	vmov	r2, r3, d8
 8007144:	4911      	ldr	r1, [pc, #68]	; (800718c <_dtoa_r+0x65c>)
 8007146:	2000      	movs	r0, #0
 8007148:	f7f9 f8ae 	bl	80002a8 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4630      	mov	r0, r6
 8007152:	4639      	mov	r1, r7
 8007154:	f7f9 fcd2 	bl	8000afc <__aeabi_dcmplt>
 8007158:	2800      	cmp	r0, #0
 800715a:	f43f af27 	beq.w	8006fac <_dtoa_r+0x47c>
 800715e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007160:	1e6b      	subs	r3, r5, #1
 8007162:	930c      	str	r3, [sp, #48]	; 0x30
 8007164:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007168:	2b30      	cmp	r3, #48	; 0x30
 800716a:	d0f8      	beq.n	800715e <_dtoa_r+0x62e>
 800716c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007170:	e04a      	b.n	8007208 <_dtoa_r+0x6d8>
 8007172:	bf00      	nop
 8007174:	08008cf8 	.word	0x08008cf8
 8007178:	08008cd0 	.word	0x08008cd0
 800717c:	3ff00000 	.word	0x3ff00000
 8007180:	40240000 	.word	0x40240000
 8007184:	401c0000 	.word	0x401c0000
 8007188:	40140000 	.word	0x40140000
 800718c:	3fe00000 	.word	0x3fe00000
 8007190:	4baf      	ldr	r3, [pc, #700]	; (8007450 <_dtoa_r+0x920>)
 8007192:	f7f9 fa41 	bl	8000618 <__aeabi_dmul>
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	e7ac      	b.n	80070f6 <_dtoa_r+0x5c6>
 800719c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071a0:	9d00      	ldr	r5, [sp, #0]
 80071a2:	4642      	mov	r2, r8
 80071a4:	464b      	mov	r3, r9
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f9 fb5f 	bl	800086c <__aeabi_ddiv>
 80071ae:	f7f9 fce3 	bl	8000b78 <__aeabi_d2iz>
 80071b2:	9002      	str	r0, [sp, #8]
 80071b4:	f7f9 f9c6 	bl	8000544 <__aeabi_i2d>
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	f7f9 fa2c 	bl	8000618 <__aeabi_dmul>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4630      	mov	r0, r6
 80071c6:	4639      	mov	r1, r7
 80071c8:	f7f9 f86e 	bl	80002a8 <__aeabi_dsub>
 80071cc:	9e02      	ldr	r6, [sp, #8]
 80071ce:	9f01      	ldr	r7, [sp, #4]
 80071d0:	3630      	adds	r6, #48	; 0x30
 80071d2:	f805 6b01 	strb.w	r6, [r5], #1
 80071d6:	9e00      	ldr	r6, [sp, #0]
 80071d8:	1bae      	subs	r6, r5, r6
 80071da:	42b7      	cmp	r7, r6
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	d137      	bne.n	8007252 <_dtoa_r+0x722>
 80071e2:	f7f9 f863 	bl	80002ac <__adddf3>
 80071e6:	4642      	mov	r2, r8
 80071e8:	464b      	mov	r3, r9
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	f7f9 fca3 	bl	8000b38 <__aeabi_dcmpgt>
 80071f2:	b9c8      	cbnz	r0, 8007228 <_dtoa_r+0x6f8>
 80071f4:	4642      	mov	r2, r8
 80071f6:	464b      	mov	r3, r9
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 fc74 	bl	8000ae8 <__aeabi_dcmpeq>
 8007200:	b110      	cbz	r0, 8007208 <_dtoa_r+0x6d8>
 8007202:	9b02      	ldr	r3, [sp, #8]
 8007204:	07d9      	lsls	r1, r3, #31
 8007206:	d40f      	bmi.n	8007228 <_dtoa_r+0x6f8>
 8007208:	4620      	mov	r0, r4
 800720a:	4659      	mov	r1, fp
 800720c:	f000 fba0 	bl	8007950 <_Bfree>
 8007210:	2300      	movs	r3, #0
 8007212:	702b      	strb	r3, [r5, #0]
 8007214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007216:	f10a 0001 	add.w	r0, sl, #1
 800721a:	6018      	str	r0, [r3, #0]
 800721c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800721e:	2b00      	cmp	r3, #0
 8007220:	f43f acd8 	beq.w	8006bd4 <_dtoa_r+0xa4>
 8007224:	601d      	str	r5, [r3, #0]
 8007226:	e4d5      	b.n	8006bd4 <_dtoa_r+0xa4>
 8007228:	f8cd a01c 	str.w	sl, [sp, #28]
 800722c:	462b      	mov	r3, r5
 800722e:	461d      	mov	r5, r3
 8007230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007234:	2a39      	cmp	r2, #57	; 0x39
 8007236:	d108      	bne.n	800724a <_dtoa_r+0x71a>
 8007238:	9a00      	ldr	r2, [sp, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d1f7      	bne.n	800722e <_dtoa_r+0x6fe>
 800723e:	9a07      	ldr	r2, [sp, #28]
 8007240:	9900      	ldr	r1, [sp, #0]
 8007242:	3201      	adds	r2, #1
 8007244:	9207      	str	r2, [sp, #28]
 8007246:	2230      	movs	r2, #48	; 0x30
 8007248:	700a      	strb	r2, [r1, #0]
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	3201      	adds	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e78c      	b.n	800716c <_dtoa_r+0x63c>
 8007252:	4b7f      	ldr	r3, [pc, #508]	; (8007450 <_dtoa_r+0x920>)
 8007254:	2200      	movs	r2, #0
 8007256:	f7f9 f9df 	bl	8000618 <__aeabi_dmul>
 800725a:	2200      	movs	r2, #0
 800725c:	2300      	movs	r3, #0
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	f7f9 fc41 	bl	8000ae8 <__aeabi_dcmpeq>
 8007266:	2800      	cmp	r0, #0
 8007268:	d09b      	beq.n	80071a2 <_dtoa_r+0x672>
 800726a:	e7cd      	b.n	8007208 <_dtoa_r+0x6d8>
 800726c:	9a08      	ldr	r2, [sp, #32]
 800726e:	2a00      	cmp	r2, #0
 8007270:	f000 80c4 	beq.w	80073fc <_dtoa_r+0x8cc>
 8007274:	9a05      	ldr	r2, [sp, #20]
 8007276:	2a01      	cmp	r2, #1
 8007278:	f300 80a8 	bgt.w	80073cc <_dtoa_r+0x89c>
 800727c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800727e:	2a00      	cmp	r2, #0
 8007280:	f000 80a0 	beq.w	80073c4 <_dtoa_r+0x894>
 8007284:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007288:	9e06      	ldr	r6, [sp, #24]
 800728a:	4645      	mov	r5, r8
 800728c:	9a04      	ldr	r2, [sp, #16]
 800728e:	2101      	movs	r1, #1
 8007290:	441a      	add	r2, r3
 8007292:	4620      	mov	r0, r4
 8007294:	4498      	add	r8, r3
 8007296:	9204      	str	r2, [sp, #16]
 8007298:	f000 fc16 	bl	8007ac8 <__i2b>
 800729c:	4607      	mov	r7, r0
 800729e:	2d00      	cmp	r5, #0
 80072a0:	dd0b      	ble.n	80072ba <_dtoa_r+0x78a>
 80072a2:	9b04      	ldr	r3, [sp, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd08      	ble.n	80072ba <_dtoa_r+0x78a>
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	bfa8      	it	ge
 80072ae:	462b      	movge	r3, r5
 80072b0:	eba8 0803 	sub.w	r8, r8, r3
 80072b4:	1aed      	subs	r5, r5, r3
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	b1fb      	cbz	r3, 80072fe <_dtoa_r+0x7ce>
 80072be:	9b08      	ldr	r3, [sp, #32]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 809f 	beq.w	8007404 <_dtoa_r+0x8d4>
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	dd11      	ble.n	80072ee <_dtoa_r+0x7be>
 80072ca:	4639      	mov	r1, r7
 80072cc:	4632      	mov	r2, r6
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fcb6 	bl	8007c40 <__pow5mult>
 80072d4:	465a      	mov	r2, fp
 80072d6:	4601      	mov	r1, r0
 80072d8:	4607      	mov	r7, r0
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fc0a 	bl	8007af4 <__multiply>
 80072e0:	4659      	mov	r1, fp
 80072e2:	9007      	str	r0, [sp, #28]
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fb33 	bl	8007950 <_Bfree>
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	469b      	mov	fp, r3
 80072ee:	9b06      	ldr	r3, [sp, #24]
 80072f0:	1b9a      	subs	r2, r3, r6
 80072f2:	d004      	beq.n	80072fe <_dtoa_r+0x7ce>
 80072f4:	4659      	mov	r1, fp
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 fca2 	bl	8007c40 <__pow5mult>
 80072fc:	4683      	mov	fp, r0
 80072fe:	2101      	movs	r1, #1
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fbe1 	bl	8007ac8 <__i2b>
 8007306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007308:	2b00      	cmp	r3, #0
 800730a:	4606      	mov	r6, r0
 800730c:	dd7c      	ble.n	8007408 <_dtoa_r+0x8d8>
 800730e:	461a      	mov	r2, r3
 8007310:	4601      	mov	r1, r0
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fc94 	bl	8007c40 <__pow5mult>
 8007318:	9b05      	ldr	r3, [sp, #20]
 800731a:	2b01      	cmp	r3, #1
 800731c:	4606      	mov	r6, r0
 800731e:	dd76      	ble.n	800740e <_dtoa_r+0x8de>
 8007320:	2300      	movs	r3, #0
 8007322:	9306      	str	r3, [sp, #24]
 8007324:	6933      	ldr	r3, [r6, #16]
 8007326:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800732a:	6918      	ldr	r0, [r3, #16]
 800732c:	f000 fb7c 	bl	8007a28 <__hi0bits>
 8007330:	f1c0 0020 	rsb	r0, r0, #32
 8007334:	9b04      	ldr	r3, [sp, #16]
 8007336:	4418      	add	r0, r3
 8007338:	f010 001f 	ands.w	r0, r0, #31
 800733c:	f000 8086 	beq.w	800744c <_dtoa_r+0x91c>
 8007340:	f1c0 0320 	rsb	r3, r0, #32
 8007344:	2b04      	cmp	r3, #4
 8007346:	dd7f      	ble.n	8007448 <_dtoa_r+0x918>
 8007348:	f1c0 001c 	rsb	r0, r0, #28
 800734c:	9b04      	ldr	r3, [sp, #16]
 800734e:	4403      	add	r3, r0
 8007350:	4480      	add	r8, r0
 8007352:	4405      	add	r5, r0
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	f1b8 0f00 	cmp.w	r8, #0
 800735a:	dd05      	ble.n	8007368 <_dtoa_r+0x838>
 800735c:	4659      	mov	r1, fp
 800735e:	4642      	mov	r2, r8
 8007360:	4620      	mov	r0, r4
 8007362:	f000 fcc7 	bl	8007cf4 <__lshift>
 8007366:	4683      	mov	fp, r0
 8007368:	9b04      	ldr	r3, [sp, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	dd05      	ble.n	800737a <_dtoa_r+0x84a>
 800736e:	4631      	mov	r1, r6
 8007370:	461a      	mov	r2, r3
 8007372:	4620      	mov	r0, r4
 8007374:	f000 fcbe 	bl	8007cf4 <__lshift>
 8007378:	4606      	mov	r6, r0
 800737a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d069      	beq.n	8007454 <_dtoa_r+0x924>
 8007380:	4631      	mov	r1, r6
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fd22 	bl	8007dcc <__mcmp>
 8007388:	2800      	cmp	r0, #0
 800738a:	da63      	bge.n	8007454 <_dtoa_r+0x924>
 800738c:	2300      	movs	r3, #0
 800738e:	4659      	mov	r1, fp
 8007390:	220a      	movs	r2, #10
 8007392:	4620      	mov	r0, r4
 8007394:	f000 fafe 	bl	8007994 <__multadd>
 8007398:	9b08      	ldr	r3, [sp, #32]
 800739a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800739e:	4683      	mov	fp, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 818f 	beq.w	80076c4 <_dtoa_r+0xb94>
 80073a6:	4639      	mov	r1, r7
 80073a8:	2300      	movs	r3, #0
 80073aa:	220a      	movs	r2, #10
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 faf1 	bl	8007994 <__multadd>
 80073b2:	f1b9 0f00 	cmp.w	r9, #0
 80073b6:	4607      	mov	r7, r0
 80073b8:	f300 808e 	bgt.w	80074d8 <_dtoa_r+0x9a8>
 80073bc:	9b05      	ldr	r3, [sp, #20]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	dc50      	bgt.n	8007464 <_dtoa_r+0x934>
 80073c2:	e089      	b.n	80074d8 <_dtoa_r+0x9a8>
 80073c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073ca:	e75d      	b.n	8007288 <_dtoa_r+0x758>
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	1e5e      	subs	r6, r3, #1
 80073d0:	9b06      	ldr	r3, [sp, #24]
 80073d2:	42b3      	cmp	r3, r6
 80073d4:	bfbf      	itttt	lt
 80073d6:	9b06      	ldrlt	r3, [sp, #24]
 80073d8:	9606      	strlt	r6, [sp, #24]
 80073da:	1af2      	sublt	r2, r6, r3
 80073dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80073de:	bfb6      	itet	lt
 80073e0:	189b      	addlt	r3, r3, r2
 80073e2:	1b9e      	subge	r6, r3, r6
 80073e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	bfb8      	it	lt
 80073ea:	2600      	movlt	r6, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfb5      	itete	lt
 80073f0:	eba8 0503 	sublt.w	r5, r8, r3
 80073f4:	9b01      	ldrge	r3, [sp, #4]
 80073f6:	2300      	movlt	r3, #0
 80073f8:	4645      	movge	r5, r8
 80073fa:	e747      	b.n	800728c <_dtoa_r+0x75c>
 80073fc:	9e06      	ldr	r6, [sp, #24]
 80073fe:	9f08      	ldr	r7, [sp, #32]
 8007400:	4645      	mov	r5, r8
 8007402:	e74c      	b.n	800729e <_dtoa_r+0x76e>
 8007404:	9a06      	ldr	r2, [sp, #24]
 8007406:	e775      	b.n	80072f4 <_dtoa_r+0x7c4>
 8007408:	9b05      	ldr	r3, [sp, #20]
 800740a:	2b01      	cmp	r3, #1
 800740c:	dc18      	bgt.n	8007440 <_dtoa_r+0x910>
 800740e:	9b02      	ldr	r3, [sp, #8]
 8007410:	b9b3      	cbnz	r3, 8007440 <_dtoa_r+0x910>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007418:	b9a3      	cbnz	r3, 8007444 <_dtoa_r+0x914>
 800741a:	9b03      	ldr	r3, [sp, #12]
 800741c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	051b      	lsls	r3, r3, #20
 8007424:	b12b      	cbz	r3, 8007432 <_dtoa_r+0x902>
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	f108 0801 	add.w	r8, r8, #1
 8007430:	2301      	movs	r3, #1
 8007432:	9306      	str	r3, [sp, #24]
 8007434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	f47f af74 	bne.w	8007324 <_dtoa_r+0x7f4>
 800743c:	2001      	movs	r0, #1
 800743e:	e779      	b.n	8007334 <_dtoa_r+0x804>
 8007440:	2300      	movs	r3, #0
 8007442:	e7f6      	b.n	8007432 <_dtoa_r+0x902>
 8007444:	9b02      	ldr	r3, [sp, #8]
 8007446:	e7f4      	b.n	8007432 <_dtoa_r+0x902>
 8007448:	d085      	beq.n	8007356 <_dtoa_r+0x826>
 800744a:	4618      	mov	r0, r3
 800744c:	301c      	adds	r0, #28
 800744e:	e77d      	b.n	800734c <_dtoa_r+0x81c>
 8007450:	40240000 	.word	0x40240000
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	dc38      	bgt.n	80074cc <_dtoa_r+0x99c>
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	2b02      	cmp	r3, #2
 800745e:	dd35      	ble.n	80074cc <_dtoa_r+0x99c>
 8007460:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007464:	f1b9 0f00 	cmp.w	r9, #0
 8007468:	d10d      	bne.n	8007486 <_dtoa_r+0x956>
 800746a:	4631      	mov	r1, r6
 800746c:	464b      	mov	r3, r9
 800746e:	2205      	movs	r2, #5
 8007470:	4620      	mov	r0, r4
 8007472:	f000 fa8f 	bl	8007994 <__multadd>
 8007476:	4601      	mov	r1, r0
 8007478:	4606      	mov	r6, r0
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fca6 	bl	8007dcc <__mcmp>
 8007480:	2800      	cmp	r0, #0
 8007482:	f73f adbd 	bgt.w	8007000 <_dtoa_r+0x4d0>
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	9d00      	ldr	r5, [sp, #0]
 800748a:	ea6f 0a03 	mvn.w	sl, r3
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	4631      	mov	r1, r6
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fa5b 	bl	8007950 <_Bfree>
 800749a:	2f00      	cmp	r7, #0
 800749c:	f43f aeb4 	beq.w	8007208 <_dtoa_r+0x6d8>
 80074a0:	f1b8 0f00 	cmp.w	r8, #0
 80074a4:	d005      	beq.n	80074b2 <_dtoa_r+0x982>
 80074a6:	45b8      	cmp	r8, r7
 80074a8:	d003      	beq.n	80074b2 <_dtoa_r+0x982>
 80074aa:	4641      	mov	r1, r8
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fa4f 	bl	8007950 <_Bfree>
 80074b2:	4639      	mov	r1, r7
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 fa4b 	bl	8007950 <_Bfree>
 80074ba:	e6a5      	b.n	8007208 <_dtoa_r+0x6d8>
 80074bc:	2600      	movs	r6, #0
 80074be:	4637      	mov	r7, r6
 80074c0:	e7e1      	b.n	8007486 <_dtoa_r+0x956>
 80074c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80074c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074c8:	4637      	mov	r7, r6
 80074ca:	e599      	b.n	8007000 <_dtoa_r+0x4d0>
 80074cc:	9b08      	ldr	r3, [sp, #32]
 80074ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 80fd 	beq.w	80076d2 <_dtoa_r+0xba2>
 80074d8:	2d00      	cmp	r5, #0
 80074da:	dd05      	ble.n	80074e8 <_dtoa_r+0x9b8>
 80074dc:	4639      	mov	r1, r7
 80074de:	462a      	mov	r2, r5
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fc07 	bl	8007cf4 <__lshift>
 80074e6:	4607      	mov	r7, r0
 80074e8:	9b06      	ldr	r3, [sp, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d05c      	beq.n	80075a8 <_dtoa_r+0xa78>
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 f9ed 	bl	80078d0 <_Balloc>
 80074f6:	4605      	mov	r5, r0
 80074f8:	b928      	cbnz	r0, 8007506 <_dtoa_r+0x9d6>
 80074fa:	4b80      	ldr	r3, [pc, #512]	; (80076fc <_dtoa_r+0xbcc>)
 80074fc:	4602      	mov	r2, r0
 80074fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007502:	f7ff bb2e 	b.w	8006b62 <_dtoa_r+0x32>
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	3202      	adds	r2, #2
 800750a:	0092      	lsls	r2, r2, #2
 800750c:	f107 010c 	add.w	r1, r7, #12
 8007510:	300c      	adds	r0, #12
 8007512:	f7fe fc57 	bl	8005dc4 <memcpy>
 8007516:	2201      	movs	r2, #1
 8007518:	4629      	mov	r1, r5
 800751a:	4620      	mov	r0, r4
 800751c:	f000 fbea 	bl	8007cf4 <__lshift>
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	9b00      	ldr	r3, [sp, #0]
 8007528:	444b      	add	r3, r9
 800752a:	9307      	str	r3, [sp, #28]
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	46b8      	mov	r8, r7
 8007534:	9306      	str	r3, [sp, #24]
 8007536:	4607      	mov	r7, r0
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	4631      	mov	r1, r6
 800753c:	3b01      	subs	r3, #1
 800753e:	4658      	mov	r0, fp
 8007540:	9302      	str	r3, [sp, #8]
 8007542:	f7ff fa69 	bl	8006a18 <quorem>
 8007546:	4603      	mov	r3, r0
 8007548:	3330      	adds	r3, #48	; 0x30
 800754a:	9004      	str	r0, [sp, #16]
 800754c:	4641      	mov	r1, r8
 800754e:	4658      	mov	r0, fp
 8007550:	9308      	str	r3, [sp, #32]
 8007552:	f000 fc3b 	bl	8007dcc <__mcmp>
 8007556:	463a      	mov	r2, r7
 8007558:	4681      	mov	r9, r0
 800755a:	4631      	mov	r1, r6
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fc51 	bl	8007e04 <__mdiff>
 8007562:	68c2      	ldr	r2, [r0, #12]
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	4605      	mov	r5, r0
 8007568:	bb02      	cbnz	r2, 80075ac <_dtoa_r+0xa7c>
 800756a:	4601      	mov	r1, r0
 800756c:	4658      	mov	r0, fp
 800756e:	f000 fc2d 	bl	8007dcc <__mcmp>
 8007572:	9b08      	ldr	r3, [sp, #32]
 8007574:	4602      	mov	r2, r0
 8007576:	4629      	mov	r1, r5
 8007578:	4620      	mov	r0, r4
 800757a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800757e:	f000 f9e7 	bl	8007950 <_Bfree>
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007586:	9d01      	ldr	r5, [sp, #4]
 8007588:	ea43 0102 	orr.w	r1, r3, r2
 800758c:	9b06      	ldr	r3, [sp, #24]
 800758e:	430b      	orrs	r3, r1
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	d10d      	bne.n	80075b0 <_dtoa_r+0xa80>
 8007594:	2b39      	cmp	r3, #57	; 0x39
 8007596:	d029      	beq.n	80075ec <_dtoa_r+0xabc>
 8007598:	f1b9 0f00 	cmp.w	r9, #0
 800759c:	dd01      	ble.n	80075a2 <_dtoa_r+0xa72>
 800759e:	9b04      	ldr	r3, [sp, #16]
 80075a0:	3331      	adds	r3, #49	; 0x31
 80075a2:	9a02      	ldr	r2, [sp, #8]
 80075a4:	7013      	strb	r3, [r2, #0]
 80075a6:	e774      	b.n	8007492 <_dtoa_r+0x962>
 80075a8:	4638      	mov	r0, r7
 80075aa:	e7b9      	b.n	8007520 <_dtoa_r+0x9f0>
 80075ac:	2201      	movs	r2, #1
 80075ae:	e7e2      	b.n	8007576 <_dtoa_r+0xa46>
 80075b0:	f1b9 0f00 	cmp.w	r9, #0
 80075b4:	db06      	blt.n	80075c4 <_dtoa_r+0xa94>
 80075b6:	9905      	ldr	r1, [sp, #20]
 80075b8:	ea41 0909 	orr.w	r9, r1, r9
 80075bc:	9906      	ldr	r1, [sp, #24]
 80075be:	ea59 0101 	orrs.w	r1, r9, r1
 80075c2:	d120      	bne.n	8007606 <_dtoa_r+0xad6>
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	ddec      	ble.n	80075a2 <_dtoa_r+0xa72>
 80075c8:	4659      	mov	r1, fp
 80075ca:	2201      	movs	r2, #1
 80075cc:	4620      	mov	r0, r4
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	f000 fb90 	bl	8007cf4 <__lshift>
 80075d4:	4631      	mov	r1, r6
 80075d6:	4683      	mov	fp, r0
 80075d8:	f000 fbf8 	bl	8007dcc <__mcmp>
 80075dc:	2800      	cmp	r0, #0
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	dc02      	bgt.n	80075e8 <_dtoa_r+0xab8>
 80075e2:	d1de      	bne.n	80075a2 <_dtoa_r+0xa72>
 80075e4:	07da      	lsls	r2, r3, #31
 80075e6:	d5dc      	bpl.n	80075a2 <_dtoa_r+0xa72>
 80075e8:	2b39      	cmp	r3, #57	; 0x39
 80075ea:	d1d8      	bne.n	800759e <_dtoa_r+0xa6e>
 80075ec:	9a02      	ldr	r2, [sp, #8]
 80075ee:	2339      	movs	r3, #57	; 0x39
 80075f0:	7013      	strb	r3, [r2, #0]
 80075f2:	462b      	mov	r3, r5
 80075f4:	461d      	mov	r5, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075fc:	2a39      	cmp	r2, #57	; 0x39
 80075fe:	d050      	beq.n	80076a2 <_dtoa_r+0xb72>
 8007600:	3201      	adds	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	e745      	b.n	8007492 <_dtoa_r+0x962>
 8007606:	2a00      	cmp	r2, #0
 8007608:	dd03      	ble.n	8007612 <_dtoa_r+0xae2>
 800760a:	2b39      	cmp	r3, #57	; 0x39
 800760c:	d0ee      	beq.n	80075ec <_dtoa_r+0xabc>
 800760e:	3301      	adds	r3, #1
 8007610:	e7c7      	b.n	80075a2 <_dtoa_r+0xa72>
 8007612:	9a01      	ldr	r2, [sp, #4]
 8007614:	9907      	ldr	r1, [sp, #28]
 8007616:	f802 3c01 	strb.w	r3, [r2, #-1]
 800761a:	428a      	cmp	r2, r1
 800761c:	d02a      	beq.n	8007674 <_dtoa_r+0xb44>
 800761e:	4659      	mov	r1, fp
 8007620:	2300      	movs	r3, #0
 8007622:	220a      	movs	r2, #10
 8007624:	4620      	mov	r0, r4
 8007626:	f000 f9b5 	bl	8007994 <__multadd>
 800762a:	45b8      	cmp	r8, r7
 800762c:	4683      	mov	fp, r0
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	f04f 020a 	mov.w	r2, #10
 8007636:	4641      	mov	r1, r8
 8007638:	4620      	mov	r0, r4
 800763a:	d107      	bne.n	800764c <_dtoa_r+0xb1c>
 800763c:	f000 f9aa 	bl	8007994 <__multadd>
 8007640:	4680      	mov	r8, r0
 8007642:	4607      	mov	r7, r0
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	3301      	adds	r3, #1
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	e775      	b.n	8007538 <_dtoa_r+0xa08>
 800764c:	f000 f9a2 	bl	8007994 <__multadd>
 8007650:	4639      	mov	r1, r7
 8007652:	4680      	mov	r8, r0
 8007654:	2300      	movs	r3, #0
 8007656:	220a      	movs	r2, #10
 8007658:	4620      	mov	r0, r4
 800765a:	f000 f99b 	bl	8007994 <__multadd>
 800765e:	4607      	mov	r7, r0
 8007660:	e7f0      	b.n	8007644 <_dtoa_r+0xb14>
 8007662:	f1b9 0f00 	cmp.w	r9, #0
 8007666:	9a00      	ldr	r2, [sp, #0]
 8007668:	bfcc      	ite	gt
 800766a:	464d      	movgt	r5, r9
 800766c:	2501      	movle	r5, #1
 800766e:	4415      	add	r5, r2
 8007670:	f04f 0800 	mov.w	r8, #0
 8007674:	4659      	mov	r1, fp
 8007676:	2201      	movs	r2, #1
 8007678:	4620      	mov	r0, r4
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	f000 fb3a 	bl	8007cf4 <__lshift>
 8007680:	4631      	mov	r1, r6
 8007682:	4683      	mov	fp, r0
 8007684:	f000 fba2 	bl	8007dcc <__mcmp>
 8007688:	2800      	cmp	r0, #0
 800768a:	dcb2      	bgt.n	80075f2 <_dtoa_r+0xac2>
 800768c:	d102      	bne.n	8007694 <_dtoa_r+0xb64>
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	07db      	lsls	r3, r3, #31
 8007692:	d4ae      	bmi.n	80075f2 <_dtoa_r+0xac2>
 8007694:	462b      	mov	r3, r5
 8007696:	461d      	mov	r5, r3
 8007698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800769c:	2a30      	cmp	r2, #48	; 0x30
 800769e:	d0fa      	beq.n	8007696 <_dtoa_r+0xb66>
 80076a0:	e6f7      	b.n	8007492 <_dtoa_r+0x962>
 80076a2:	9a00      	ldr	r2, [sp, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d1a5      	bne.n	80075f4 <_dtoa_r+0xac4>
 80076a8:	f10a 0a01 	add.w	sl, sl, #1
 80076ac:	2331      	movs	r3, #49	; 0x31
 80076ae:	e779      	b.n	80075a4 <_dtoa_r+0xa74>
 80076b0:	4b13      	ldr	r3, [pc, #76]	; (8007700 <_dtoa_r+0xbd0>)
 80076b2:	f7ff baaf 	b.w	8006c14 <_dtoa_r+0xe4>
 80076b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f47f aa86 	bne.w	8006bca <_dtoa_r+0x9a>
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <_dtoa_r+0xbd4>)
 80076c0:	f7ff baa8 	b.w	8006c14 <_dtoa_r+0xe4>
 80076c4:	f1b9 0f00 	cmp.w	r9, #0
 80076c8:	dc03      	bgt.n	80076d2 <_dtoa_r+0xba2>
 80076ca:	9b05      	ldr	r3, [sp, #20]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	f73f aec9 	bgt.w	8007464 <_dtoa_r+0x934>
 80076d2:	9d00      	ldr	r5, [sp, #0]
 80076d4:	4631      	mov	r1, r6
 80076d6:	4658      	mov	r0, fp
 80076d8:	f7ff f99e 	bl	8006a18 <quorem>
 80076dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80076e0:	f805 3b01 	strb.w	r3, [r5], #1
 80076e4:	9a00      	ldr	r2, [sp, #0]
 80076e6:	1aaa      	subs	r2, r5, r2
 80076e8:	4591      	cmp	r9, r2
 80076ea:	ddba      	ble.n	8007662 <_dtoa_r+0xb32>
 80076ec:	4659      	mov	r1, fp
 80076ee:	2300      	movs	r3, #0
 80076f0:	220a      	movs	r2, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f94e 	bl	8007994 <__multadd>
 80076f8:	4683      	mov	fp, r0
 80076fa:	e7eb      	b.n	80076d4 <_dtoa_r+0xba4>
 80076fc:	08008c5f 	.word	0x08008c5f
 8007700:	08008bb8 	.word	0x08008bb8
 8007704:	08008bdc 	.word	0x08008bdc

08007708 <__sflush_r>:
 8007708:	898a      	ldrh	r2, [r1, #12]
 800770a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770e:	4605      	mov	r5, r0
 8007710:	0710      	lsls	r0, r2, #28
 8007712:	460c      	mov	r4, r1
 8007714:	d458      	bmi.n	80077c8 <__sflush_r+0xc0>
 8007716:	684b      	ldr	r3, [r1, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	dc05      	bgt.n	8007728 <__sflush_r+0x20>
 800771c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	dc02      	bgt.n	8007728 <__sflush_r+0x20>
 8007722:	2000      	movs	r0, #0
 8007724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800772a:	2e00      	cmp	r6, #0
 800772c:	d0f9      	beq.n	8007722 <__sflush_r+0x1a>
 800772e:	2300      	movs	r3, #0
 8007730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007734:	682f      	ldr	r7, [r5, #0]
 8007736:	602b      	str	r3, [r5, #0]
 8007738:	d032      	beq.n	80077a0 <__sflush_r+0x98>
 800773a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	075a      	lsls	r2, r3, #29
 8007740:	d505      	bpl.n	800774e <__sflush_r+0x46>
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	1ac0      	subs	r0, r0, r3
 8007746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007748:	b10b      	cbz	r3, 800774e <__sflush_r+0x46>
 800774a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800774c:	1ac0      	subs	r0, r0, r3
 800774e:	2300      	movs	r3, #0
 8007750:	4602      	mov	r2, r0
 8007752:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007754:	6a21      	ldr	r1, [r4, #32]
 8007756:	4628      	mov	r0, r5
 8007758:	47b0      	blx	r6
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	d106      	bne.n	800776e <__sflush_r+0x66>
 8007760:	6829      	ldr	r1, [r5, #0]
 8007762:	291d      	cmp	r1, #29
 8007764:	d82c      	bhi.n	80077c0 <__sflush_r+0xb8>
 8007766:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <__sflush_r+0x108>)
 8007768:	40ca      	lsrs	r2, r1
 800776a:	07d6      	lsls	r6, r2, #31
 800776c:	d528      	bpl.n	80077c0 <__sflush_r+0xb8>
 800776e:	2200      	movs	r2, #0
 8007770:	6062      	str	r2, [r4, #4]
 8007772:	04d9      	lsls	r1, r3, #19
 8007774:	6922      	ldr	r2, [r4, #16]
 8007776:	6022      	str	r2, [r4, #0]
 8007778:	d504      	bpl.n	8007784 <__sflush_r+0x7c>
 800777a:	1c42      	adds	r2, r0, #1
 800777c:	d101      	bne.n	8007782 <__sflush_r+0x7a>
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	b903      	cbnz	r3, 8007784 <__sflush_r+0x7c>
 8007782:	6560      	str	r0, [r4, #84]	; 0x54
 8007784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007786:	602f      	str	r7, [r5, #0]
 8007788:	2900      	cmp	r1, #0
 800778a:	d0ca      	beq.n	8007722 <__sflush_r+0x1a>
 800778c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007790:	4299      	cmp	r1, r3
 8007792:	d002      	beq.n	800779a <__sflush_r+0x92>
 8007794:	4628      	mov	r0, r5
 8007796:	f7fe fb2b 	bl	8005df0 <_free_r>
 800779a:	2000      	movs	r0, #0
 800779c:	6360      	str	r0, [r4, #52]	; 0x34
 800779e:	e7c1      	b.n	8007724 <__sflush_r+0x1c>
 80077a0:	6a21      	ldr	r1, [r4, #32]
 80077a2:	2301      	movs	r3, #1
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b0      	blx	r6
 80077a8:	1c41      	adds	r1, r0, #1
 80077aa:	d1c7      	bne.n	800773c <__sflush_r+0x34>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0c4      	beq.n	800773c <__sflush_r+0x34>
 80077b2:	2b1d      	cmp	r3, #29
 80077b4:	d001      	beq.n	80077ba <__sflush_r+0xb2>
 80077b6:	2b16      	cmp	r3, #22
 80077b8:	d101      	bne.n	80077be <__sflush_r+0xb6>
 80077ba:	602f      	str	r7, [r5, #0]
 80077bc:	e7b1      	b.n	8007722 <__sflush_r+0x1a>
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	e7ad      	b.n	8007724 <__sflush_r+0x1c>
 80077c8:	690f      	ldr	r7, [r1, #16]
 80077ca:	2f00      	cmp	r7, #0
 80077cc:	d0a9      	beq.n	8007722 <__sflush_r+0x1a>
 80077ce:	0793      	lsls	r3, r2, #30
 80077d0:	680e      	ldr	r6, [r1, #0]
 80077d2:	bf08      	it	eq
 80077d4:	694b      	ldreq	r3, [r1, #20]
 80077d6:	600f      	str	r7, [r1, #0]
 80077d8:	bf18      	it	ne
 80077da:	2300      	movne	r3, #0
 80077dc:	eba6 0807 	sub.w	r8, r6, r7
 80077e0:	608b      	str	r3, [r1, #8]
 80077e2:	f1b8 0f00 	cmp.w	r8, #0
 80077e6:	dd9c      	ble.n	8007722 <__sflush_r+0x1a>
 80077e8:	6a21      	ldr	r1, [r4, #32]
 80077ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077ec:	4643      	mov	r3, r8
 80077ee:	463a      	mov	r2, r7
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b0      	blx	r6
 80077f4:	2800      	cmp	r0, #0
 80077f6:	dc06      	bgt.n	8007806 <__sflush_r+0xfe>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	e78e      	b.n	8007724 <__sflush_r+0x1c>
 8007806:	4407      	add	r7, r0
 8007808:	eba8 0800 	sub.w	r8, r8, r0
 800780c:	e7e9      	b.n	80077e2 <__sflush_r+0xda>
 800780e:	bf00      	nop
 8007810:	20400001 	.word	0x20400001

08007814 <_fflush_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	690b      	ldr	r3, [r1, #16]
 8007818:	4605      	mov	r5, r0
 800781a:	460c      	mov	r4, r1
 800781c:	b913      	cbnz	r3, 8007824 <_fflush_r+0x10>
 800781e:	2500      	movs	r5, #0
 8007820:	4628      	mov	r0, r5
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	b118      	cbz	r0, 800782e <_fflush_r+0x1a>
 8007826:	6983      	ldr	r3, [r0, #24]
 8007828:	b90b      	cbnz	r3, 800782e <_fflush_r+0x1a>
 800782a:	f7fe f9fd 	bl	8005c28 <__sinit>
 800782e:	4b14      	ldr	r3, [pc, #80]	; (8007880 <_fflush_r+0x6c>)
 8007830:	429c      	cmp	r4, r3
 8007832:	d11b      	bne.n	800786c <_fflush_r+0x58>
 8007834:	686c      	ldr	r4, [r5, #4]
 8007836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0ef      	beq.n	800781e <_fflush_r+0xa>
 800783e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007840:	07d0      	lsls	r0, r2, #31
 8007842:	d404      	bmi.n	800784e <_fflush_r+0x3a>
 8007844:	0599      	lsls	r1, r3, #22
 8007846:	d402      	bmi.n	800784e <_fflush_r+0x3a>
 8007848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800784a:	f7fe fab0 	bl	8005dae <__retarget_lock_acquire_recursive>
 800784e:	4628      	mov	r0, r5
 8007850:	4621      	mov	r1, r4
 8007852:	f7ff ff59 	bl	8007708 <__sflush_r>
 8007856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007858:	07da      	lsls	r2, r3, #31
 800785a:	4605      	mov	r5, r0
 800785c:	d4e0      	bmi.n	8007820 <_fflush_r+0xc>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	059b      	lsls	r3, r3, #22
 8007862:	d4dd      	bmi.n	8007820 <_fflush_r+0xc>
 8007864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007866:	f7fe faa3 	bl	8005db0 <__retarget_lock_release_recursive>
 800786a:	e7d9      	b.n	8007820 <_fflush_r+0xc>
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <_fflush_r+0x70>)
 800786e:	429c      	cmp	r4, r3
 8007870:	d101      	bne.n	8007876 <_fflush_r+0x62>
 8007872:	68ac      	ldr	r4, [r5, #8]
 8007874:	e7df      	b.n	8007836 <_fflush_r+0x22>
 8007876:	4b04      	ldr	r3, [pc, #16]	; (8007888 <_fflush_r+0x74>)
 8007878:	429c      	cmp	r4, r3
 800787a:	bf08      	it	eq
 800787c:	68ec      	ldreq	r4, [r5, #12]
 800787e:	e7da      	b.n	8007836 <_fflush_r+0x22>
 8007880:	08008b64 	.word	0x08008b64
 8007884:	08008b84 	.word	0x08008b84
 8007888:	08008b44 	.word	0x08008b44

0800788c <_localeconv_r>:
 800788c:	4800      	ldr	r0, [pc, #0]	; (8007890 <_localeconv_r+0x4>)
 800788e:	4770      	bx	lr
 8007890:	20000164 	.word	0x20000164

08007894 <_lseek_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d07      	ldr	r5, [pc, #28]	; (80078b4 <_lseek_r+0x20>)
 8007898:	4604      	mov	r4, r0
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	602a      	str	r2, [r5, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	f7f9 fe14 	bl	80014d0 <_lseek>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_lseek_r+0x1e>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_lseek_r+0x1e>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	20005560 	.word	0x20005560

080078b8 <__malloc_lock>:
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <__malloc_lock+0x8>)
 80078ba:	f7fe ba78 	b.w	8005dae <__retarget_lock_acquire_recursive>
 80078be:	bf00      	nop
 80078c0:	20005558 	.word	0x20005558

080078c4 <__malloc_unlock>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__malloc_unlock+0x8>)
 80078c6:	f7fe ba73 	b.w	8005db0 <__retarget_lock_release_recursive>
 80078ca:	bf00      	nop
 80078cc:	20005558 	.word	0x20005558

080078d0 <_Balloc>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078d4:	4604      	mov	r4, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	b976      	cbnz	r6, 80078f8 <_Balloc+0x28>
 80078da:	2010      	movs	r0, #16
 80078dc:	f7fe fa6a 	bl	8005db4 <malloc>
 80078e0:	4602      	mov	r2, r0
 80078e2:	6260      	str	r0, [r4, #36]	; 0x24
 80078e4:	b920      	cbnz	r0, 80078f0 <_Balloc+0x20>
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <_Balloc+0x78>)
 80078e8:	4818      	ldr	r0, [pc, #96]	; (800794c <_Balloc+0x7c>)
 80078ea:	2166      	movs	r1, #102	; 0x66
 80078ec:	f000 fcea 	bl	80082c4 <__assert_func>
 80078f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f4:	6006      	str	r6, [r0, #0]
 80078f6:	60c6      	str	r6, [r0, #12]
 80078f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078fa:	68f3      	ldr	r3, [r6, #12]
 80078fc:	b183      	cbz	r3, 8007920 <_Balloc+0x50>
 80078fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007906:	b9b8      	cbnz	r0, 8007938 <_Balloc+0x68>
 8007908:	2101      	movs	r1, #1
 800790a:	fa01 f605 	lsl.w	r6, r1, r5
 800790e:	1d72      	adds	r2, r6, #5
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fb5a 	bl	8007fcc <_calloc_r>
 8007918:	b160      	cbz	r0, 8007934 <_Balloc+0x64>
 800791a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800791e:	e00e      	b.n	800793e <_Balloc+0x6e>
 8007920:	2221      	movs	r2, #33	; 0x21
 8007922:	2104      	movs	r1, #4
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fb51 	bl	8007fcc <_calloc_r>
 800792a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800792c:	60f0      	str	r0, [r6, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <_Balloc+0x2e>
 8007934:	2000      	movs	r0, #0
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	6802      	ldr	r2, [r0, #0]
 800793a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800793e:	2300      	movs	r3, #0
 8007940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007944:	e7f7      	b.n	8007936 <_Balloc+0x66>
 8007946:	bf00      	nop
 8007948:	08008be9 	.word	0x08008be9
 800794c:	08008c70 	.word	0x08008c70

08007950 <_Bfree>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	b976      	cbnz	r6, 8007978 <_Bfree+0x28>
 800795a:	2010      	movs	r0, #16
 800795c:	f7fe fa2a 	bl	8005db4 <malloc>
 8007960:	4602      	mov	r2, r0
 8007962:	6268      	str	r0, [r5, #36]	; 0x24
 8007964:	b920      	cbnz	r0, 8007970 <_Bfree+0x20>
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <_Bfree+0x3c>)
 8007968:	4809      	ldr	r0, [pc, #36]	; (8007990 <_Bfree+0x40>)
 800796a:	218a      	movs	r1, #138	; 0x8a
 800796c:	f000 fcaa 	bl	80082c4 <__assert_func>
 8007970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007974:	6006      	str	r6, [r0, #0]
 8007976:	60c6      	str	r6, [r0, #12]
 8007978:	b13c      	cbz	r4, 800798a <_Bfree+0x3a>
 800797a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800797c:	6862      	ldr	r2, [r4, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007984:	6021      	str	r1, [r4, #0]
 8007986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	08008be9 	.word	0x08008be9
 8007990:	08008c70 	.word	0x08008c70

08007994 <__multadd>:
 8007994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007998:	690e      	ldr	r6, [r1, #16]
 800799a:	4607      	mov	r7, r0
 800799c:	4698      	mov	r8, r3
 800799e:	460c      	mov	r4, r1
 80079a0:	f101 0014 	add.w	r0, r1, #20
 80079a4:	2300      	movs	r3, #0
 80079a6:	6805      	ldr	r5, [r0, #0]
 80079a8:	b2a9      	uxth	r1, r5
 80079aa:	fb02 8101 	mla	r1, r2, r1, r8
 80079ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80079b2:	0c2d      	lsrs	r5, r5, #16
 80079b4:	fb02 c505 	mla	r5, r2, r5, ip
 80079b8:	b289      	uxth	r1, r1
 80079ba:	3301      	adds	r3, #1
 80079bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80079c0:	429e      	cmp	r6, r3
 80079c2:	f840 1b04 	str.w	r1, [r0], #4
 80079c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80079ca:	dcec      	bgt.n	80079a6 <__multadd+0x12>
 80079cc:	f1b8 0f00 	cmp.w	r8, #0
 80079d0:	d022      	beq.n	8007a18 <__multadd+0x84>
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	dc19      	bgt.n	8007a0c <__multadd+0x78>
 80079d8:	6861      	ldr	r1, [r4, #4]
 80079da:	4638      	mov	r0, r7
 80079dc:	3101      	adds	r1, #1
 80079de:	f7ff ff77 	bl	80078d0 <_Balloc>
 80079e2:	4605      	mov	r5, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__multadd+0x5e>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <__multadd+0x8c>)
 80079ea:	480e      	ldr	r0, [pc, #56]	; (8007a24 <__multadd+0x90>)
 80079ec:	21b5      	movs	r1, #181	; 0xb5
 80079ee:	f000 fc69 	bl	80082c4 <__assert_func>
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	3202      	adds	r2, #2
 80079f6:	f104 010c 	add.w	r1, r4, #12
 80079fa:	0092      	lsls	r2, r2, #2
 80079fc:	300c      	adds	r0, #12
 80079fe:	f7fe f9e1 	bl	8005dc4 <memcpy>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff ffa3 	bl	8007950 <_Bfree>
 8007a0a:	462c      	mov	r4, r5
 8007a0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a10:	3601      	adds	r6, #1
 8007a12:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a16:	6126      	str	r6, [r4, #16]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1e:	bf00      	nop
 8007a20:	08008c5f 	.word	0x08008c5f
 8007a24:	08008c70 	.word	0x08008c70

08007a28 <__hi0bits>:
 8007a28:	0c03      	lsrs	r3, r0, #16
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	b9d3      	cbnz	r3, 8007a64 <__hi0bits+0x3c>
 8007a2e:	0400      	lsls	r0, r0, #16
 8007a30:	2310      	movs	r3, #16
 8007a32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a36:	bf04      	itt	eq
 8007a38:	0200      	lsleq	r0, r0, #8
 8007a3a:	3308      	addeq	r3, #8
 8007a3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a40:	bf04      	itt	eq
 8007a42:	0100      	lsleq	r0, r0, #4
 8007a44:	3304      	addeq	r3, #4
 8007a46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a4a:	bf04      	itt	eq
 8007a4c:	0080      	lsleq	r0, r0, #2
 8007a4e:	3302      	addeq	r3, #2
 8007a50:	2800      	cmp	r0, #0
 8007a52:	db05      	blt.n	8007a60 <__hi0bits+0x38>
 8007a54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a58:	f103 0301 	add.w	r3, r3, #1
 8007a5c:	bf08      	it	eq
 8007a5e:	2320      	moveq	r3, #32
 8007a60:	4618      	mov	r0, r3
 8007a62:	4770      	bx	lr
 8007a64:	2300      	movs	r3, #0
 8007a66:	e7e4      	b.n	8007a32 <__hi0bits+0xa>

08007a68 <__lo0bits>:
 8007a68:	6803      	ldr	r3, [r0, #0]
 8007a6a:	f013 0207 	ands.w	r2, r3, #7
 8007a6e:	4601      	mov	r1, r0
 8007a70:	d00b      	beq.n	8007a8a <__lo0bits+0x22>
 8007a72:	07da      	lsls	r2, r3, #31
 8007a74:	d424      	bmi.n	8007ac0 <__lo0bits+0x58>
 8007a76:	0798      	lsls	r0, r3, #30
 8007a78:	bf49      	itett	mi
 8007a7a:	085b      	lsrmi	r3, r3, #1
 8007a7c:	089b      	lsrpl	r3, r3, #2
 8007a7e:	2001      	movmi	r0, #1
 8007a80:	600b      	strmi	r3, [r1, #0]
 8007a82:	bf5c      	itt	pl
 8007a84:	600b      	strpl	r3, [r1, #0]
 8007a86:	2002      	movpl	r0, #2
 8007a88:	4770      	bx	lr
 8007a8a:	b298      	uxth	r0, r3
 8007a8c:	b9b0      	cbnz	r0, 8007abc <__lo0bits+0x54>
 8007a8e:	0c1b      	lsrs	r3, r3, #16
 8007a90:	2010      	movs	r0, #16
 8007a92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a96:	bf04      	itt	eq
 8007a98:	0a1b      	lsreq	r3, r3, #8
 8007a9a:	3008      	addeq	r0, #8
 8007a9c:	071a      	lsls	r2, r3, #28
 8007a9e:	bf04      	itt	eq
 8007aa0:	091b      	lsreq	r3, r3, #4
 8007aa2:	3004      	addeq	r0, #4
 8007aa4:	079a      	lsls	r2, r3, #30
 8007aa6:	bf04      	itt	eq
 8007aa8:	089b      	lsreq	r3, r3, #2
 8007aaa:	3002      	addeq	r0, #2
 8007aac:	07da      	lsls	r2, r3, #31
 8007aae:	d403      	bmi.n	8007ab8 <__lo0bits+0x50>
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	f100 0001 	add.w	r0, r0, #1
 8007ab6:	d005      	beq.n	8007ac4 <__lo0bits+0x5c>
 8007ab8:	600b      	str	r3, [r1, #0]
 8007aba:	4770      	bx	lr
 8007abc:	4610      	mov	r0, r2
 8007abe:	e7e8      	b.n	8007a92 <__lo0bits+0x2a>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	4770      	bx	lr
 8007ac4:	2020      	movs	r0, #32
 8007ac6:	4770      	bx	lr

08007ac8 <__i2b>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	2101      	movs	r1, #1
 8007ace:	f7ff feff 	bl	80078d0 <_Balloc>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	b928      	cbnz	r0, 8007ae2 <__i2b+0x1a>
 8007ad6:	4b05      	ldr	r3, [pc, #20]	; (8007aec <__i2b+0x24>)
 8007ad8:	4805      	ldr	r0, [pc, #20]	; (8007af0 <__i2b+0x28>)
 8007ada:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ade:	f000 fbf1 	bl	80082c4 <__assert_func>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	6144      	str	r4, [r0, #20]
 8007ae6:	6103      	str	r3, [r0, #16]
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	bf00      	nop
 8007aec:	08008c5f 	.word	0x08008c5f
 8007af0:	08008c70 	.word	0x08008c70

08007af4 <__multiply>:
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	4614      	mov	r4, r2
 8007afa:	690a      	ldr	r2, [r1, #16]
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	bfb8      	it	lt
 8007b02:	460b      	movlt	r3, r1
 8007b04:	460d      	mov	r5, r1
 8007b06:	bfbc      	itt	lt
 8007b08:	4625      	movlt	r5, r4
 8007b0a:	461c      	movlt	r4, r3
 8007b0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b14:	68ab      	ldr	r3, [r5, #8]
 8007b16:	6869      	ldr	r1, [r5, #4]
 8007b18:	eb0a 0709 	add.w	r7, sl, r9
 8007b1c:	42bb      	cmp	r3, r7
 8007b1e:	b085      	sub	sp, #20
 8007b20:	bfb8      	it	lt
 8007b22:	3101      	addlt	r1, #1
 8007b24:	f7ff fed4 	bl	80078d0 <_Balloc>
 8007b28:	b930      	cbnz	r0, 8007b38 <__multiply+0x44>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b42      	ldr	r3, [pc, #264]	; (8007c38 <__multiply+0x144>)
 8007b2e:	4843      	ldr	r0, [pc, #268]	; (8007c3c <__multiply+0x148>)
 8007b30:	f240 115d 	movw	r1, #349	; 0x15d
 8007b34:	f000 fbc6 	bl	80082c4 <__assert_func>
 8007b38:	f100 0614 	add.w	r6, r0, #20
 8007b3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007b40:	4633      	mov	r3, r6
 8007b42:	2200      	movs	r2, #0
 8007b44:	4543      	cmp	r3, r8
 8007b46:	d31e      	bcc.n	8007b86 <__multiply+0x92>
 8007b48:	f105 0c14 	add.w	ip, r5, #20
 8007b4c:	f104 0314 	add.w	r3, r4, #20
 8007b50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007b54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007b58:	9202      	str	r2, [sp, #8]
 8007b5a:	ebac 0205 	sub.w	r2, ip, r5
 8007b5e:	3a15      	subs	r2, #21
 8007b60:	f022 0203 	bic.w	r2, r2, #3
 8007b64:	3204      	adds	r2, #4
 8007b66:	f105 0115 	add.w	r1, r5, #21
 8007b6a:	458c      	cmp	ip, r1
 8007b6c:	bf38      	it	cc
 8007b6e:	2204      	movcc	r2, #4
 8007b70:	9201      	str	r2, [sp, #4]
 8007b72:	9a02      	ldr	r2, [sp, #8]
 8007b74:	9303      	str	r3, [sp, #12]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d808      	bhi.n	8007b8c <__multiply+0x98>
 8007b7a:	2f00      	cmp	r7, #0
 8007b7c:	dc55      	bgt.n	8007c2a <__multiply+0x136>
 8007b7e:	6107      	str	r7, [r0, #16]
 8007b80:	b005      	add	sp, #20
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	f843 2b04 	str.w	r2, [r3], #4
 8007b8a:	e7db      	b.n	8007b44 <__multiply+0x50>
 8007b8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b90:	f1ba 0f00 	cmp.w	sl, #0
 8007b94:	d020      	beq.n	8007bd8 <__multiply+0xe4>
 8007b96:	f105 0e14 	add.w	lr, r5, #20
 8007b9a:	46b1      	mov	r9, r6
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ba2:	f8d9 b000 	ldr.w	fp, [r9]
 8007ba6:	b2a1      	uxth	r1, r4
 8007ba8:	fa1f fb8b 	uxth.w	fp, fp
 8007bac:	fb0a b101 	mla	r1, sl, r1, fp
 8007bb0:	4411      	add	r1, r2
 8007bb2:	f8d9 2000 	ldr.w	r2, [r9]
 8007bb6:	0c24      	lsrs	r4, r4, #16
 8007bb8:	0c12      	lsrs	r2, r2, #16
 8007bba:	fb0a 2404 	mla	r4, sl, r4, r2
 8007bbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007bc2:	b289      	uxth	r1, r1
 8007bc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007bc8:	45f4      	cmp	ip, lr
 8007bca:	f849 1b04 	str.w	r1, [r9], #4
 8007bce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007bd2:	d8e4      	bhi.n	8007b9e <__multiply+0xaa>
 8007bd4:	9901      	ldr	r1, [sp, #4]
 8007bd6:	5072      	str	r2, [r6, r1]
 8007bd8:	9a03      	ldr	r2, [sp, #12]
 8007bda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bde:	3304      	adds	r3, #4
 8007be0:	f1b9 0f00 	cmp.w	r9, #0
 8007be4:	d01f      	beq.n	8007c26 <__multiply+0x132>
 8007be6:	6834      	ldr	r4, [r6, #0]
 8007be8:	f105 0114 	add.w	r1, r5, #20
 8007bec:	46b6      	mov	lr, r6
 8007bee:	f04f 0a00 	mov.w	sl, #0
 8007bf2:	880a      	ldrh	r2, [r1, #0]
 8007bf4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007bf8:	fb09 b202 	mla	r2, r9, r2, fp
 8007bfc:	4492      	add	sl, r2
 8007bfe:	b2a4      	uxth	r4, r4
 8007c00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c04:	f84e 4b04 	str.w	r4, [lr], #4
 8007c08:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c0c:	f8be 2000 	ldrh.w	r2, [lr]
 8007c10:	0c24      	lsrs	r4, r4, #16
 8007c12:	fb09 2404 	mla	r4, r9, r4, r2
 8007c16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007c1a:	458c      	cmp	ip, r1
 8007c1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c20:	d8e7      	bhi.n	8007bf2 <__multiply+0xfe>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	50b4      	str	r4, [r6, r2]
 8007c26:	3604      	adds	r6, #4
 8007c28:	e7a3      	b.n	8007b72 <__multiply+0x7e>
 8007c2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1a5      	bne.n	8007b7e <__multiply+0x8a>
 8007c32:	3f01      	subs	r7, #1
 8007c34:	e7a1      	b.n	8007b7a <__multiply+0x86>
 8007c36:	bf00      	nop
 8007c38:	08008c5f 	.word	0x08008c5f
 8007c3c:	08008c70 	.word	0x08008c70

08007c40 <__pow5mult>:
 8007c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	4615      	mov	r5, r2
 8007c46:	f012 0203 	ands.w	r2, r2, #3
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460f      	mov	r7, r1
 8007c4e:	d007      	beq.n	8007c60 <__pow5mult+0x20>
 8007c50:	4c25      	ldr	r4, [pc, #148]	; (8007ce8 <__pow5mult+0xa8>)
 8007c52:	3a01      	subs	r2, #1
 8007c54:	2300      	movs	r3, #0
 8007c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c5a:	f7ff fe9b 	bl	8007994 <__multadd>
 8007c5e:	4607      	mov	r7, r0
 8007c60:	10ad      	asrs	r5, r5, #2
 8007c62:	d03d      	beq.n	8007ce0 <__pow5mult+0xa0>
 8007c64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c66:	b97c      	cbnz	r4, 8007c88 <__pow5mult+0x48>
 8007c68:	2010      	movs	r0, #16
 8007c6a:	f7fe f8a3 	bl	8005db4 <malloc>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6270      	str	r0, [r6, #36]	; 0x24
 8007c72:	b928      	cbnz	r0, 8007c80 <__pow5mult+0x40>
 8007c74:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <__pow5mult+0xac>)
 8007c76:	481e      	ldr	r0, [pc, #120]	; (8007cf0 <__pow5mult+0xb0>)
 8007c78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c7c:	f000 fb22 	bl	80082c4 <__assert_func>
 8007c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c84:	6004      	str	r4, [r0, #0]
 8007c86:	60c4      	str	r4, [r0, #12]
 8007c88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c90:	b94c      	cbnz	r4, 8007ca6 <__pow5mult+0x66>
 8007c92:	f240 2171 	movw	r1, #625	; 0x271
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7ff ff16 	bl	8007ac8 <__i2b>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	f04f 0900 	mov.w	r9, #0
 8007caa:	07eb      	lsls	r3, r5, #31
 8007cac:	d50a      	bpl.n	8007cc4 <__pow5mult+0x84>
 8007cae:	4639      	mov	r1, r7
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ff1e 	bl	8007af4 <__multiply>
 8007cb8:	4639      	mov	r1, r7
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fe47 	bl	8007950 <_Bfree>
 8007cc2:	4647      	mov	r7, r8
 8007cc4:	106d      	asrs	r5, r5, #1
 8007cc6:	d00b      	beq.n	8007ce0 <__pow5mult+0xa0>
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	b938      	cbnz	r0, 8007cdc <__pow5mult+0x9c>
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff ff0f 	bl	8007af4 <__multiply>
 8007cd6:	6020      	str	r0, [r4, #0]
 8007cd8:	f8c0 9000 	str.w	r9, [r0]
 8007cdc:	4604      	mov	r4, r0
 8007cde:	e7e4      	b.n	8007caa <__pow5mult+0x6a>
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce6:	bf00      	nop
 8007ce8:	08008dc0 	.word	0x08008dc0
 8007cec:	08008be9 	.word	0x08008be9
 8007cf0:	08008c70 	.word	0x08008c70

08007cf4 <__lshift>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	6849      	ldr	r1, [r1, #4]
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	4607      	mov	r7, r0
 8007d06:	4691      	mov	r9, r2
 8007d08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d0c:	f108 0601 	add.w	r6, r8, #1
 8007d10:	42b3      	cmp	r3, r6
 8007d12:	db0b      	blt.n	8007d2c <__lshift+0x38>
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff fddb 	bl	80078d0 <_Balloc>
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	b948      	cbnz	r0, 8007d32 <__lshift+0x3e>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	4b28      	ldr	r3, [pc, #160]	; (8007dc4 <__lshift+0xd0>)
 8007d22:	4829      	ldr	r0, [pc, #164]	; (8007dc8 <__lshift+0xd4>)
 8007d24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d28:	f000 facc 	bl	80082c4 <__assert_func>
 8007d2c:	3101      	adds	r1, #1
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	e7ee      	b.n	8007d10 <__lshift+0x1c>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f100 0114 	add.w	r1, r0, #20
 8007d38:	f100 0210 	add.w	r2, r0, #16
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	4553      	cmp	r3, sl
 8007d40:	db33      	blt.n	8007daa <__lshift+0xb6>
 8007d42:	6920      	ldr	r0, [r4, #16]
 8007d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d48:	f104 0314 	add.w	r3, r4, #20
 8007d4c:	f019 091f 	ands.w	r9, r9, #31
 8007d50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d58:	d02b      	beq.n	8007db2 <__lshift+0xbe>
 8007d5a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d5e:	468a      	mov	sl, r1
 8007d60:	2200      	movs	r2, #0
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	fa00 f009 	lsl.w	r0, r0, r9
 8007d68:	4302      	orrs	r2, r0
 8007d6a:	f84a 2b04 	str.w	r2, [sl], #4
 8007d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d72:	459c      	cmp	ip, r3
 8007d74:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d78:	d8f3      	bhi.n	8007d62 <__lshift+0x6e>
 8007d7a:	ebac 0304 	sub.w	r3, ip, r4
 8007d7e:	3b15      	subs	r3, #21
 8007d80:	f023 0303 	bic.w	r3, r3, #3
 8007d84:	3304      	adds	r3, #4
 8007d86:	f104 0015 	add.w	r0, r4, #21
 8007d8a:	4584      	cmp	ip, r0
 8007d8c:	bf38      	it	cc
 8007d8e:	2304      	movcc	r3, #4
 8007d90:	50ca      	str	r2, [r1, r3]
 8007d92:	b10a      	cbz	r2, 8007d98 <__lshift+0xa4>
 8007d94:	f108 0602 	add.w	r6, r8, #2
 8007d98:	3e01      	subs	r6, #1
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	612e      	str	r6, [r5, #16]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	f7ff fdd6 	bl	8007950 <_Bfree>
 8007da4:	4628      	mov	r0, r5
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dae:	3301      	adds	r3, #1
 8007db0:	e7c5      	b.n	8007d3e <__lshift+0x4a>
 8007db2:	3904      	subs	r1, #4
 8007db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dbc:	459c      	cmp	ip, r3
 8007dbe:	d8f9      	bhi.n	8007db4 <__lshift+0xc0>
 8007dc0:	e7ea      	b.n	8007d98 <__lshift+0xa4>
 8007dc2:	bf00      	nop
 8007dc4:	08008c5f 	.word	0x08008c5f
 8007dc8:	08008c70 	.word	0x08008c70

08007dcc <__mcmp>:
 8007dcc:	b530      	push	{r4, r5, lr}
 8007dce:	6902      	ldr	r2, [r0, #16]
 8007dd0:	690c      	ldr	r4, [r1, #16]
 8007dd2:	1b12      	subs	r2, r2, r4
 8007dd4:	d10e      	bne.n	8007df4 <__mcmp+0x28>
 8007dd6:	f100 0314 	add.w	r3, r0, #20
 8007dda:	3114      	adds	r1, #20
 8007ddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007de0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007de4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007de8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007dec:	42a5      	cmp	r5, r4
 8007dee:	d003      	beq.n	8007df8 <__mcmp+0x2c>
 8007df0:	d305      	bcc.n	8007dfe <__mcmp+0x32>
 8007df2:	2201      	movs	r2, #1
 8007df4:	4610      	mov	r0, r2
 8007df6:	bd30      	pop	{r4, r5, pc}
 8007df8:	4283      	cmp	r3, r0
 8007dfa:	d3f3      	bcc.n	8007de4 <__mcmp+0x18>
 8007dfc:	e7fa      	b.n	8007df4 <__mcmp+0x28>
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	e7f7      	b.n	8007df4 <__mcmp+0x28>

08007e04 <__mdiff>:
 8007e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4617      	mov	r7, r2
 8007e12:	f7ff ffdb 	bl	8007dcc <__mcmp>
 8007e16:	1e05      	subs	r5, r0, #0
 8007e18:	d110      	bne.n	8007e3c <__mdiff+0x38>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff fd57 	bl	80078d0 <_Balloc>
 8007e22:	b930      	cbnz	r0, 8007e32 <__mdiff+0x2e>
 8007e24:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <__mdiff+0x108>)
 8007e26:	4602      	mov	r2, r0
 8007e28:	f240 2132 	movw	r1, #562	; 0x232
 8007e2c:	4838      	ldr	r0, [pc, #224]	; (8007f10 <__mdiff+0x10c>)
 8007e2e:	f000 fa49 	bl	80082c4 <__assert_func>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	bfa4      	itt	ge
 8007e3e:	463b      	movge	r3, r7
 8007e40:	4627      	movge	r7, r4
 8007e42:	4630      	mov	r0, r6
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	bfa6      	itte	ge
 8007e48:	461c      	movge	r4, r3
 8007e4a:	2500      	movge	r5, #0
 8007e4c:	2501      	movlt	r5, #1
 8007e4e:	f7ff fd3f 	bl	80078d0 <_Balloc>
 8007e52:	b920      	cbnz	r0, 8007e5e <__mdiff+0x5a>
 8007e54:	4b2d      	ldr	r3, [pc, #180]	; (8007f0c <__mdiff+0x108>)
 8007e56:	4602      	mov	r2, r0
 8007e58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e5c:	e7e6      	b.n	8007e2c <__mdiff+0x28>
 8007e5e:	693e      	ldr	r6, [r7, #16]
 8007e60:	60c5      	str	r5, [r0, #12]
 8007e62:	6925      	ldr	r5, [r4, #16]
 8007e64:	f107 0114 	add.w	r1, r7, #20
 8007e68:	f104 0914 	add.w	r9, r4, #20
 8007e6c:	f100 0e14 	add.w	lr, r0, #20
 8007e70:	f107 0210 	add.w	r2, r7, #16
 8007e74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007e78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007e7c:	46f2      	mov	sl, lr
 8007e7e:	2700      	movs	r7, #0
 8007e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e88:	fa1f f883 	uxth.w	r8, r3
 8007e8c:	fa17 f78b 	uxtah	r7, r7, fp
 8007e90:	0c1b      	lsrs	r3, r3, #16
 8007e92:	eba7 0808 	sub.w	r8, r7, r8
 8007e96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e9e:	fa1f f888 	uxth.w	r8, r8
 8007ea2:	141f      	asrs	r7, r3, #16
 8007ea4:	454d      	cmp	r5, r9
 8007ea6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007eaa:	f84a 3b04 	str.w	r3, [sl], #4
 8007eae:	d8e7      	bhi.n	8007e80 <__mdiff+0x7c>
 8007eb0:	1b2b      	subs	r3, r5, r4
 8007eb2:	3b15      	subs	r3, #21
 8007eb4:	f023 0303 	bic.w	r3, r3, #3
 8007eb8:	3304      	adds	r3, #4
 8007eba:	3415      	adds	r4, #21
 8007ebc:	42a5      	cmp	r5, r4
 8007ebe:	bf38      	it	cc
 8007ec0:	2304      	movcc	r3, #4
 8007ec2:	4419      	add	r1, r3
 8007ec4:	4473      	add	r3, lr
 8007ec6:	469e      	mov	lr, r3
 8007ec8:	460d      	mov	r5, r1
 8007eca:	4565      	cmp	r5, ip
 8007ecc:	d30e      	bcc.n	8007eec <__mdiff+0xe8>
 8007ece:	f10c 0203 	add.w	r2, ip, #3
 8007ed2:	1a52      	subs	r2, r2, r1
 8007ed4:	f022 0203 	bic.w	r2, r2, #3
 8007ed8:	3903      	subs	r1, #3
 8007eda:	458c      	cmp	ip, r1
 8007edc:	bf38      	it	cc
 8007ede:	2200      	movcc	r2, #0
 8007ee0:	441a      	add	r2, r3
 8007ee2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ee6:	b17b      	cbz	r3, 8007f08 <__mdiff+0x104>
 8007ee8:	6106      	str	r6, [r0, #16]
 8007eea:	e7a5      	b.n	8007e38 <__mdiff+0x34>
 8007eec:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ef0:	fa17 f488 	uxtah	r4, r7, r8
 8007ef4:	1422      	asrs	r2, r4, #16
 8007ef6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007efa:	b2a4      	uxth	r4, r4
 8007efc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f00:	f84e 4b04 	str.w	r4, [lr], #4
 8007f04:	1417      	asrs	r7, r2, #16
 8007f06:	e7e0      	b.n	8007eca <__mdiff+0xc6>
 8007f08:	3e01      	subs	r6, #1
 8007f0a:	e7ea      	b.n	8007ee2 <__mdiff+0xde>
 8007f0c:	08008c5f 	.word	0x08008c5f
 8007f10:	08008c70 	.word	0x08008c70

08007f14 <__d2b>:
 8007f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	4689      	mov	r9, r1
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	ec57 6b10 	vmov	r6, r7, d0
 8007f20:	4690      	mov	r8, r2
 8007f22:	f7ff fcd5 	bl	80078d0 <_Balloc>
 8007f26:	4604      	mov	r4, r0
 8007f28:	b930      	cbnz	r0, 8007f38 <__d2b+0x24>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <__d2b+0xb0>)
 8007f2e:	4826      	ldr	r0, [pc, #152]	; (8007fc8 <__d2b+0xb4>)
 8007f30:	f240 310a 	movw	r1, #778	; 0x30a
 8007f34:	f000 f9c6 	bl	80082c4 <__assert_func>
 8007f38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f40:	bb35      	cbnz	r5, 8007f90 <__d2b+0x7c>
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	d028      	beq.n	8007f9a <__d2b+0x86>
 8007f48:	4668      	mov	r0, sp
 8007f4a:	9600      	str	r6, [sp, #0]
 8007f4c:	f7ff fd8c 	bl	8007a68 <__lo0bits>
 8007f50:	9900      	ldr	r1, [sp, #0]
 8007f52:	b300      	cbz	r0, 8007f96 <__d2b+0x82>
 8007f54:	9a01      	ldr	r2, [sp, #4]
 8007f56:	f1c0 0320 	rsb	r3, r0, #32
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	40c2      	lsrs	r2, r0
 8007f62:	6163      	str	r3, [r4, #20]
 8007f64:	9201      	str	r2, [sp, #4]
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	61a3      	str	r3, [r4, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf14      	ite	ne
 8007f6e:	2202      	movne	r2, #2
 8007f70:	2201      	moveq	r2, #1
 8007f72:	6122      	str	r2, [r4, #16]
 8007f74:	b1d5      	cbz	r5, 8007fac <__d2b+0x98>
 8007f76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f7a:	4405      	add	r5, r0
 8007f7c:	f8c9 5000 	str.w	r5, [r9]
 8007f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f84:	f8c8 0000 	str.w	r0, [r8]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	b003      	add	sp, #12
 8007f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f94:	e7d5      	b.n	8007f42 <__d2b+0x2e>
 8007f96:	6161      	str	r1, [r4, #20]
 8007f98:	e7e5      	b.n	8007f66 <__d2b+0x52>
 8007f9a:	a801      	add	r0, sp, #4
 8007f9c:	f7ff fd64 	bl	8007a68 <__lo0bits>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	6163      	str	r3, [r4, #20]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	6122      	str	r2, [r4, #16]
 8007fa8:	3020      	adds	r0, #32
 8007faa:	e7e3      	b.n	8007f74 <__d2b+0x60>
 8007fac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fb4:	f8c9 0000 	str.w	r0, [r9]
 8007fb8:	6918      	ldr	r0, [r3, #16]
 8007fba:	f7ff fd35 	bl	8007a28 <__hi0bits>
 8007fbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fc2:	e7df      	b.n	8007f84 <__d2b+0x70>
 8007fc4:	08008c5f 	.word	0x08008c5f
 8007fc8:	08008c70 	.word	0x08008c70

08007fcc <_calloc_r>:
 8007fcc:	b513      	push	{r0, r1, r4, lr}
 8007fce:	434a      	muls	r2, r1
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	9201      	str	r2, [sp, #4]
 8007fd4:	f7fd ff5c 	bl	8005e90 <_malloc_r>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	b118      	cbz	r0, 8007fe4 <_calloc_r+0x18>
 8007fdc:	9a01      	ldr	r2, [sp, #4]
 8007fde:	2100      	movs	r1, #0
 8007fe0:	f7fd fefe 	bl	8005de0 <memset>
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	b002      	add	sp, #8
 8007fe8:	bd10      	pop	{r4, pc}

08007fea <__ssputs_r>:
 8007fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fee:	688e      	ldr	r6, [r1, #8]
 8007ff0:	429e      	cmp	r6, r3
 8007ff2:	4682      	mov	sl, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	4690      	mov	r8, r2
 8007ff8:	461f      	mov	r7, r3
 8007ffa:	d838      	bhi.n	800806e <__ssputs_r+0x84>
 8007ffc:	898a      	ldrh	r2, [r1, #12]
 8007ffe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008002:	d032      	beq.n	800806a <__ssputs_r+0x80>
 8008004:	6825      	ldr	r5, [r4, #0]
 8008006:	6909      	ldr	r1, [r1, #16]
 8008008:	eba5 0901 	sub.w	r9, r5, r1
 800800c:	6965      	ldr	r5, [r4, #20]
 800800e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008016:	3301      	adds	r3, #1
 8008018:	444b      	add	r3, r9
 800801a:	106d      	asrs	r5, r5, #1
 800801c:	429d      	cmp	r5, r3
 800801e:	bf38      	it	cc
 8008020:	461d      	movcc	r5, r3
 8008022:	0553      	lsls	r3, r2, #21
 8008024:	d531      	bpl.n	800808a <__ssputs_r+0xa0>
 8008026:	4629      	mov	r1, r5
 8008028:	f7fd ff32 	bl	8005e90 <_malloc_r>
 800802c:	4606      	mov	r6, r0
 800802e:	b950      	cbnz	r0, 8008046 <__ssputs_r+0x5c>
 8008030:	230c      	movs	r3, #12
 8008032:	f8ca 3000 	str.w	r3, [sl]
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	f04f 30ff 	mov.w	r0, #4294967295
 8008042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008046:	6921      	ldr	r1, [r4, #16]
 8008048:	464a      	mov	r2, r9
 800804a:	f7fd febb 	bl	8005dc4 <memcpy>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	6126      	str	r6, [r4, #16]
 800805c:	6165      	str	r5, [r4, #20]
 800805e:	444e      	add	r6, r9
 8008060:	eba5 0509 	sub.w	r5, r5, r9
 8008064:	6026      	str	r6, [r4, #0]
 8008066:	60a5      	str	r5, [r4, #8]
 8008068:	463e      	mov	r6, r7
 800806a:	42be      	cmp	r6, r7
 800806c:	d900      	bls.n	8008070 <__ssputs_r+0x86>
 800806e:	463e      	mov	r6, r7
 8008070:	4632      	mov	r2, r6
 8008072:	6820      	ldr	r0, [r4, #0]
 8008074:	4641      	mov	r1, r8
 8008076:	f000 f967 	bl	8008348 <memmove>
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	1b9b      	subs	r3, r3, r6
 8008080:	4432      	add	r2, r6
 8008082:	60a3      	str	r3, [r4, #8]
 8008084:	6022      	str	r2, [r4, #0]
 8008086:	2000      	movs	r0, #0
 8008088:	e7db      	b.n	8008042 <__ssputs_r+0x58>
 800808a:	462a      	mov	r2, r5
 800808c:	f000 f976 	bl	800837c <_realloc_r>
 8008090:	4606      	mov	r6, r0
 8008092:	2800      	cmp	r0, #0
 8008094:	d1e1      	bne.n	800805a <__ssputs_r+0x70>
 8008096:	6921      	ldr	r1, [r4, #16]
 8008098:	4650      	mov	r0, sl
 800809a:	f7fd fea9 	bl	8005df0 <_free_r>
 800809e:	e7c7      	b.n	8008030 <__ssputs_r+0x46>

080080a0 <_svfiprintf_r>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	4698      	mov	r8, r3
 80080a6:	898b      	ldrh	r3, [r1, #12]
 80080a8:	061b      	lsls	r3, r3, #24
 80080aa:	b09d      	sub	sp, #116	; 0x74
 80080ac:	4607      	mov	r7, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	4614      	mov	r4, r2
 80080b2:	d50e      	bpl.n	80080d2 <_svfiprintf_r+0x32>
 80080b4:	690b      	ldr	r3, [r1, #16]
 80080b6:	b963      	cbnz	r3, 80080d2 <_svfiprintf_r+0x32>
 80080b8:	2140      	movs	r1, #64	; 0x40
 80080ba:	f7fd fee9 	bl	8005e90 <_malloc_r>
 80080be:	6028      	str	r0, [r5, #0]
 80080c0:	6128      	str	r0, [r5, #16]
 80080c2:	b920      	cbnz	r0, 80080ce <_svfiprintf_r+0x2e>
 80080c4:	230c      	movs	r3, #12
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	e0d1      	b.n	8008272 <_svfiprintf_r+0x1d2>
 80080ce:	2340      	movs	r3, #64	; 0x40
 80080d0:	616b      	str	r3, [r5, #20]
 80080d2:	2300      	movs	r3, #0
 80080d4:	9309      	str	r3, [sp, #36]	; 0x24
 80080d6:	2320      	movs	r3, #32
 80080d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e0:	2330      	movs	r3, #48	; 0x30
 80080e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800828c <_svfiprintf_r+0x1ec>
 80080e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ea:	f04f 0901 	mov.w	r9, #1
 80080ee:	4623      	mov	r3, r4
 80080f0:	469a      	mov	sl, r3
 80080f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f6:	b10a      	cbz	r2, 80080fc <_svfiprintf_r+0x5c>
 80080f8:	2a25      	cmp	r2, #37	; 0x25
 80080fa:	d1f9      	bne.n	80080f0 <_svfiprintf_r+0x50>
 80080fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008100:	d00b      	beq.n	800811a <_svfiprintf_r+0x7a>
 8008102:	465b      	mov	r3, fp
 8008104:	4622      	mov	r2, r4
 8008106:	4629      	mov	r1, r5
 8008108:	4638      	mov	r0, r7
 800810a:	f7ff ff6e 	bl	8007fea <__ssputs_r>
 800810e:	3001      	adds	r0, #1
 8008110:	f000 80aa 	beq.w	8008268 <_svfiprintf_r+0x1c8>
 8008114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008116:	445a      	add	r2, fp
 8008118:	9209      	str	r2, [sp, #36]	; 0x24
 800811a:	f89a 3000 	ldrb.w	r3, [sl]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 80a2 	beq.w	8008268 <_svfiprintf_r+0x1c8>
 8008124:	2300      	movs	r3, #0
 8008126:	f04f 32ff 	mov.w	r2, #4294967295
 800812a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800812e:	f10a 0a01 	add.w	sl, sl, #1
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	9307      	str	r3, [sp, #28]
 8008136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800813a:	931a      	str	r3, [sp, #104]	; 0x68
 800813c:	4654      	mov	r4, sl
 800813e:	2205      	movs	r2, #5
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	4851      	ldr	r0, [pc, #324]	; (800828c <_svfiprintf_r+0x1ec>)
 8008146:	f7f8 f85b 	bl	8000200 <memchr>
 800814a:	9a04      	ldr	r2, [sp, #16]
 800814c:	b9d8      	cbnz	r0, 8008186 <_svfiprintf_r+0xe6>
 800814e:	06d0      	lsls	r0, r2, #27
 8008150:	bf44      	itt	mi
 8008152:	2320      	movmi	r3, #32
 8008154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008158:	0711      	lsls	r1, r2, #28
 800815a:	bf44      	itt	mi
 800815c:	232b      	movmi	r3, #43	; 0x2b
 800815e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008162:	f89a 3000 	ldrb.w	r3, [sl]
 8008166:	2b2a      	cmp	r3, #42	; 0x2a
 8008168:	d015      	beq.n	8008196 <_svfiprintf_r+0xf6>
 800816a:	9a07      	ldr	r2, [sp, #28]
 800816c:	4654      	mov	r4, sl
 800816e:	2000      	movs	r0, #0
 8008170:	f04f 0c0a 	mov.w	ip, #10
 8008174:	4621      	mov	r1, r4
 8008176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817a:	3b30      	subs	r3, #48	; 0x30
 800817c:	2b09      	cmp	r3, #9
 800817e:	d94e      	bls.n	800821e <_svfiprintf_r+0x17e>
 8008180:	b1b0      	cbz	r0, 80081b0 <_svfiprintf_r+0x110>
 8008182:	9207      	str	r2, [sp, #28]
 8008184:	e014      	b.n	80081b0 <_svfiprintf_r+0x110>
 8008186:	eba0 0308 	sub.w	r3, r0, r8
 800818a:	fa09 f303 	lsl.w	r3, r9, r3
 800818e:	4313      	orrs	r3, r2
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	46a2      	mov	sl, r4
 8008194:	e7d2      	b.n	800813c <_svfiprintf_r+0x9c>
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	1d19      	adds	r1, r3, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	9103      	str	r1, [sp, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bfbb      	ittet	lt
 80081a2:	425b      	neglt	r3, r3
 80081a4:	f042 0202 	orrlt.w	r2, r2, #2
 80081a8:	9307      	strge	r3, [sp, #28]
 80081aa:	9307      	strlt	r3, [sp, #28]
 80081ac:	bfb8      	it	lt
 80081ae:	9204      	strlt	r2, [sp, #16]
 80081b0:	7823      	ldrb	r3, [r4, #0]
 80081b2:	2b2e      	cmp	r3, #46	; 0x2e
 80081b4:	d10c      	bne.n	80081d0 <_svfiprintf_r+0x130>
 80081b6:	7863      	ldrb	r3, [r4, #1]
 80081b8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ba:	d135      	bne.n	8008228 <_svfiprintf_r+0x188>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	1d1a      	adds	r2, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	9203      	str	r2, [sp, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfb8      	it	lt
 80081c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80081cc:	3402      	adds	r4, #2
 80081ce:	9305      	str	r3, [sp, #20]
 80081d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800829c <_svfiprintf_r+0x1fc>
 80081d4:	7821      	ldrb	r1, [r4, #0]
 80081d6:	2203      	movs	r2, #3
 80081d8:	4650      	mov	r0, sl
 80081da:	f7f8 f811 	bl	8000200 <memchr>
 80081de:	b140      	cbz	r0, 80081f2 <_svfiprintf_r+0x152>
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	eba0 000a 	sub.w	r0, r0, sl
 80081e6:	fa03 f000 	lsl.w	r0, r3, r0
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	4303      	orrs	r3, r0
 80081ee:	3401      	adds	r4, #1
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f6:	4826      	ldr	r0, [pc, #152]	; (8008290 <_svfiprintf_r+0x1f0>)
 80081f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081fc:	2206      	movs	r2, #6
 80081fe:	f7f7 ffff 	bl	8000200 <memchr>
 8008202:	2800      	cmp	r0, #0
 8008204:	d038      	beq.n	8008278 <_svfiprintf_r+0x1d8>
 8008206:	4b23      	ldr	r3, [pc, #140]	; (8008294 <_svfiprintf_r+0x1f4>)
 8008208:	bb1b      	cbnz	r3, 8008252 <_svfiprintf_r+0x1b2>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	3307      	adds	r3, #7
 800820e:	f023 0307 	bic.w	r3, r3, #7
 8008212:	3308      	adds	r3, #8
 8008214:	9303      	str	r3, [sp, #12]
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	4433      	add	r3, r6
 800821a:	9309      	str	r3, [sp, #36]	; 0x24
 800821c:	e767      	b.n	80080ee <_svfiprintf_r+0x4e>
 800821e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008222:	460c      	mov	r4, r1
 8008224:	2001      	movs	r0, #1
 8008226:	e7a5      	b.n	8008174 <_svfiprintf_r+0xd4>
 8008228:	2300      	movs	r3, #0
 800822a:	3401      	adds	r4, #1
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	4619      	mov	r1, r3
 8008230:	f04f 0c0a 	mov.w	ip, #10
 8008234:	4620      	mov	r0, r4
 8008236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800823a:	3a30      	subs	r2, #48	; 0x30
 800823c:	2a09      	cmp	r2, #9
 800823e:	d903      	bls.n	8008248 <_svfiprintf_r+0x1a8>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0c5      	beq.n	80081d0 <_svfiprintf_r+0x130>
 8008244:	9105      	str	r1, [sp, #20]
 8008246:	e7c3      	b.n	80081d0 <_svfiprintf_r+0x130>
 8008248:	fb0c 2101 	mla	r1, ip, r1, r2
 800824c:	4604      	mov	r4, r0
 800824e:	2301      	movs	r3, #1
 8008250:	e7f0      	b.n	8008234 <_svfiprintf_r+0x194>
 8008252:	ab03      	add	r3, sp, #12
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	462a      	mov	r2, r5
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <_svfiprintf_r+0x1f8>)
 800825a:	a904      	add	r1, sp, #16
 800825c:	4638      	mov	r0, r7
 800825e:	f7fd ff11 	bl	8006084 <_printf_float>
 8008262:	1c42      	adds	r2, r0, #1
 8008264:	4606      	mov	r6, r0
 8008266:	d1d6      	bne.n	8008216 <_svfiprintf_r+0x176>
 8008268:	89ab      	ldrh	r3, [r5, #12]
 800826a:	065b      	lsls	r3, r3, #25
 800826c:	f53f af2c 	bmi.w	80080c8 <_svfiprintf_r+0x28>
 8008270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008272:	b01d      	add	sp, #116	; 0x74
 8008274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008278:	ab03      	add	r3, sp, #12
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	462a      	mov	r2, r5
 800827e:	4b06      	ldr	r3, [pc, #24]	; (8008298 <_svfiprintf_r+0x1f8>)
 8008280:	a904      	add	r1, sp, #16
 8008282:	4638      	mov	r0, r7
 8008284:	f7fe f9a2 	bl	80065cc <_printf_i>
 8008288:	e7eb      	b.n	8008262 <_svfiprintf_r+0x1c2>
 800828a:	bf00      	nop
 800828c:	08008dcc 	.word	0x08008dcc
 8008290:	08008dd6 	.word	0x08008dd6
 8008294:	08006085 	.word	0x08006085
 8008298:	08007feb 	.word	0x08007feb
 800829c:	08008dd2 	.word	0x08008dd2

080082a0 <_read_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d07      	ldr	r5, [pc, #28]	; (80082c0 <_read_r+0x20>)
 80082a4:	4604      	mov	r4, r0
 80082a6:	4608      	mov	r0, r1
 80082a8:	4611      	mov	r1, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	602a      	str	r2, [r5, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f7f9 f8ae 	bl	8001410 <_read>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_read_r+0x1e>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_read_r+0x1e>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20005560 	.word	0x20005560

080082c4 <__assert_func>:
 80082c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082c6:	4614      	mov	r4, r2
 80082c8:	461a      	mov	r2, r3
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <__assert_func+0x2c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4605      	mov	r5, r0
 80082d0:	68d8      	ldr	r0, [r3, #12]
 80082d2:	b14c      	cbz	r4, 80082e8 <__assert_func+0x24>
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <__assert_func+0x30>)
 80082d6:	9100      	str	r1, [sp, #0]
 80082d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082dc:	4906      	ldr	r1, [pc, #24]	; (80082f8 <__assert_func+0x34>)
 80082de:	462b      	mov	r3, r5
 80082e0:	f000 f80e 	bl	8008300 <fiprintf>
 80082e4:	f000 fa98 	bl	8008818 <abort>
 80082e8:	4b04      	ldr	r3, [pc, #16]	; (80082fc <__assert_func+0x38>)
 80082ea:	461c      	mov	r4, r3
 80082ec:	e7f3      	b.n	80082d6 <__assert_func+0x12>
 80082ee:	bf00      	nop
 80082f0:	20000010 	.word	0x20000010
 80082f4:	08008ddd 	.word	0x08008ddd
 80082f8:	08008dea 	.word	0x08008dea
 80082fc:	08008e18 	.word	0x08008e18

08008300 <fiprintf>:
 8008300:	b40e      	push	{r1, r2, r3}
 8008302:	b503      	push	{r0, r1, lr}
 8008304:	4601      	mov	r1, r0
 8008306:	ab03      	add	r3, sp, #12
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <fiprintf+0x20>)
 800830a:	f853 2b04 	ldr.w	r2, [r3], #4
 800830e:	6800      	ldr	r0, [r0, #0]
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	f000 f883 	bl	800841c <_vfiprintf_r>
 8008316:	b002      	add	sp, #8
 8008318:	f85d eb04 	ldr.w	lr, [sp], #4
 800831c:	b003      	add	sp, #12
 800831e:	4770      	bx	lr
 8008320:	20000010 	.word	0x20000010

08008324 <__ascii_mbtowc>:
 8008324:	b082      	sub	sp, #8
 8008326:	b901      	cbnz	r1, 800832a <__ascii_mbtowc+0x6>
 8008328:	a901      	add	r1, sp, #4
 800832a:	b142      	cbz	r2, 800833e <__ascii_mbtowc+0x1a>
 800832c:	b14b      	cbz	r3, 8008342 <__ascii_mbtowc+0x1e>
 800832e:	7813      	ldrb	r3, [r2, #0]
 8008330:	600b      	str	r3, [r1, #0]
 8008332:	7812      	ldrb	r2, [r2, #0]
 8008334:	1e10      	subs	r0, r2, #0
 8008336:	bf18      	it	ne
 8008338:	2001      	movne	r0, #1
 800833a:	b002      	add	sp, #8
 800833c:	4770      	bx	lr
 800833e:	4610      	mov	r0, r2
 8008340:	e7fb      	b.n	800833a <__ascii_mbtowc+0x16>
 8008342:	f06f 0001 	mvn.w	r0, #1
 8008346:	e7f8      	b.n	800833a <__ascii_mbtowc+0x16>

08008348 <memmove>:
 8008348:	4288      	cmp	r0, r1
 800834a:	b510      	push	{r4, lr}
 800834c:	eb01 0402 	add.w	r4, r1, r2
 8008350:	d902      	bls.n	8008358 <memmove+0x10>
 8008352:	4284      	cmp	r4, r0
 8008354:	4623      	mov	r3, r4
 8008356:	d807      	bhi.n	8008368 <memmove+0x20>
 8008358:	1e43      	subs	r3, r0, #1
 800835a:	42a1      	cmp	r1, r4
 800835c:	d008      	beq.n	8008370 <memmove+0x28>
 800835e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008366:	e7f8      	b.n	800835a <memmove+0x12>
 8008368:	4402      	add	r2, r0
 800836a:	4601      	mov	r1, r0
 800836c:	428a      	cmp	r2, r1
 800836e:	d100      	bne.n	8008372 <memmove+0x2a>
 8008370:	bd10      	pop	{r4, pc}
 8008372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800837a:	e7f7      	b.n	800836c <memmove+0x24>

0800837c <_realloc_r>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	4607      	mov	r7, r0
 8008380:	4614      	mov	r4, r2
 8008382:	460e      	mov	r6, r1
 8008384:	b921      	cbnz	r1, 8008390 <_realloc_r+0x14>
 8008386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800838a:	4611      	mov	r1, r2
 800838c:	f7fd bd80 	b.w	8005e90 <_malloc_r>
 8008390:	b922      	cbnz	r2, 800839c <_realloc_r+0x20>
 8008392:	f7fd fd2d 	bl	8005df0 <_free_r>
 8008396:	4625      	mov	r5, r4
 8008398:	4628      	mov	r0, r5
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839c:	f000 faa8 	bl	80088f0 <_malloc_usable_size_r>
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d20f      	bcs.n	80083c4 <_realloc_r+0x48>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4638      	mov	r0, r7
 80083a8:	f7fd fd72 	bl	8005e90 <_malloc_r>
 80083ac:	4605      	mov	r5, r0
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d0f2      	beq.n	8008398 <_realloc_r+0x1c>
 80083b2:	4631      	mov	r1, r6
 80083b4:	4622      	mov	r2, r4
 80083b6:	f7fd fd05 	bl	8005dc4 <memcpy>
 80083ba:	4631      	mov	r1, r6
 80083bc:	4638      	mov	r0, r7
 80083be:	f7fd fd17 	bl	8005df0 <_free_r>
 80083c2:	e7e9      	b.n	8008398 <_realloc_r+0x1c>
 80083c4:	4635      	mov	r5, r6
 80083c6:	e7e7      	b.n	8008398 <_realloc_r+0x1c>

080083c8 <__sfputc_r>:
 80083c8:	6893      	ldr	r3, [r2, #8]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	b410      	push	{r4}
 80083d0:	6093      	str	r3, [r2, #8]
 80083d2:	da08      	bge.n	80083e6 <__sfputc_r+0x1e>
 80083d4:	6994      	ldr	r4, [r2, #24]
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	db01      	blt.n	80083de <__sfputc_r+0x16>
 80083da:	290a      	cmp	r1, #10
 80083dc:	d103      	bne.n	80083e6 <__sfputc_r+0x1e>
 80083de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e2:	f000 b94b 	b.w	800867c <__swbuf_r>
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	1c58      	adds	r0, r3, #1
 80083ea:	6010      	str	r0, [r2, #0]
 80083ec:	7019      	strb	r1, [r3, #0]
 80083ee:	4608      	mov	r0, r1
 80083f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <__sfputs_r>:
 80083f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f8:	4606      	mov	r6, r0
 80083fa:	460f      	mov	r7, r1
 80083fc:	4614      	mov	r4, r2
 80083fe:	18d5      	adds	r5, r2, r3
 8008400:	42ac      	cmp	r4, r5
 8008402:	d101      	bne.n	8008408 <__sfputs_r+0x12>
 8008404:	2000      	movs	r0, #0
 8008406:	e007      	b.n	8008418 <__sfputs_r+0x22>
 8008408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840c:	463a      	mov	r2, r7
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff ffda 	bl	80083c8 <__sfputc_r>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	d1f3      	bne.n	8008400 <__sfputs_r+0xa>
 8008418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800841c <_vfiprintf_r>:
 800841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	460d      	mov	r5, r1
 8008422:	b09d      	sub	sp, #116	; 0x74
 8008424:	4614      	mov	r4, r2
 8008426:	4698      	mov	r8, r3
 8008428:	4606      	mov	r6, r0
 800842a:	b118      	cbz	r0, 8008434 <_vfiprintf_r+0x18>
 800842c:	6983      	ldr	r3, [r0, #24]
 800842e:	b90b      	cbnz	r3, 8008434 <_vfiprintf_r+0x18>
 8008430:	f7fd fbfa 	bl	8005c28 <__sinit>
 8008434:	4b89      	ldr	r3, [pc, #548]	; (800865c <_vfiprintf_r+0x240>)
 8008436:	429d      	cmp	r5, r3
 8008438:	d11b      	bne.n	8008472 <_vfiprintf_r+0x56>
 800843a:	6875      	ldr	r5, [r6, #4]
 800843c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800843e:	07d9      	lsls	r1, r3, #31
 8008440:	d405      	bmi.n	800844e <_vfiprintf_r+0x32>
 8008442:	89ab      	ldrh	r3, [r5, #12]
 8008444:	059a      	lsls	r2, r3, #22
 8008446:	d402      	bmi.n	800844e <_vfiprintf_r+0x32>
 8008448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800844a:	f7fd fcb0 	bl	8005dae <__retarget_lock_acquire_recursive>
 800844e:	89ab      	ldrh	r3, [r5, #12]
 8008450:	071b      	lsls	r3, r3, #28
 8008452:	d501      	bpl.n	8008458 <_vfiprintf_r+0x3c>
 8008454:	692b      	ldr	r3, [r5, #16]
 8008456:	b9eb      	cbnz	r3, 8008494 <_vfiprintf_r+0x78>
 8008458:	4629      	mov	r1, r5
 800845a:	4630      	mov	r0, r6
 800845c:	f000 f96e 	bl	800873c <__swsetup_r>
 8008460:	b1c0      	cbz	r0, 8008494 <_vfiprintf_r+0x78>
 8008462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008464:	07dc      	lsls	r4, r3, #31
 8008466:	d50e      	bpl.n	8008486 <_vfiprintf_r+0x6a>
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	b01d      	add	sp, #116	; 0x74
 800846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008472:	4b7b      	ldr	r3, [pc, #492]	; (8008660 <_vfiprintf_r+0x244>)
 8008474:	429d      	cmp	r5, r3
 8008476:	d101      	bne.n	800847c <_vfiprintf_r+0x60>
 8008478:	68b5      	ldr	r5, [r6, #8]
 800847a:	e7df      	b.n	800843c <_vfiprintf_r+0x20>
 800847c:	4b79      	ldr	r3, [pc, #484]	; (8008664 <_vfiprintf_r+0x248>)
 800847e:	429d      	cmp	r5, r3
 8008480:	bf08      	it	eq
 8008482:	68f5      	ldreq	r5, [r6, #12]
 8008484:	e7da      	b.n	800843c <_vfiprintf_r+0x20>
 8008486:	89ab      	ldrh	r3, [r5, #12]
 8008488:	0598      	lsls	r0, r3, #22
 800848a:	d4ed      	bmi.n	8008468 <_vfiprintf_r+0x4c>
 800848c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800848e:	f7fd fc8f 	bl	8005db0 <__retarget_lock_release_recursive>
 8008492:	e7e9      	b.n	8008468 <_vfiprintf_r+0x4c>
 8008494:	2300      	movs	r3, #0
 8008496:	9309      	str	r3, [sp, #36]	; 0x24
 8008498:	2320      	movs	r3, #32
 800849a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800849e:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a2:	2330      	movs	r3, #48	; 0x30
 80084a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008668 <_vfiprintf_r+0x24c>
 80084a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ac:	f04f 0901 	mov.w	r9, #1
 80084b0:	4623      	mov	r3, r4
 80084b2:	469a      	mov	sl, r3
 80084b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b8:	b10a      	cbz	r2, 80084be <_vfiprintf_r+0xa2>
 80084ba:	2a25      	cmp	r2, #37	; 0x25
 80084bc:	d1f9      	bne.n	80084b2 <_vfiprintf_r+0x96>
 80084be:	ebba 0b04 	subs.w	fp, sl, r4
 80084c2:	d00b      	beq.n	80084dc <_vfiprintf_r+0xc0>
 80084c4:	465b      	mov	r3, fp
 80084c6:	4622      	mov	r2, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ff93 	bl	80083f6 <__sfputs_r>
 80084d0:	3001      	adds	r0, #1
 80084d2:	f000 80aa 	beq.w	800862a <_vfiprintf_r+0x20e>
 80084d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d8:	445a      	add	r2, fp
 80084da:	9209      	str	r2, [sp, #36]	; 0x24
 80084dc:	f89a 3000 	ldrb.w	r3, [sl]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80a2 	beq.w	800862a <_vfiprintf_r+0x20e>
 80084e6:	2300      	movs	r3, #0
 80084e8:	f04f 32ff 	mov.w	r2, #4294967295
 80084ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f0:	f10a 0a01 	add.w	sl, sl, #1
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	9307      	str	r3, [sp, #28]
 80084f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084fc:	931a      	str	r3, [sp, #104]	; 0x68
 80084fe:	4654      	mov	r4, sl
 8008500:	2205      	movs	r2, #5
 8008502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008506:	4858      	ldr	r0, [pc, #352]	; (8008668 <_vfiprintf_r+0x24c>)
 8008508:	f7f7 fe7a 	bl	8000200 <memchr>
 800850c:	9a04      	ldr	r2, [sp, #16]
 800850e:	b9d8      	cbnz	r0, 8008548 <_vfiprintf_r+0x12c>
 8008510:	06d1      	lsls	r1, r2, #27
 8008512:	bf44      	itt	mi
 8008514:	2320      	movmi	r3, #32
 8008516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800851a:	0713      	lsls	r3, r2, #28
 800851c:	bf44      	itt	mi
 800851e:	232b      	movmi	r3, #43	; 0x2b
 8008520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008524:	f89a 3000 	ldrb.w	r3, [sl]
 8008528:	2b2a      	cmp	r3, #42	; 0x2a
 800852a:	d015      	beq.n	8008558 <_vfiprintf_r+0x13c>
 800852c:	9a07      	ldr	r2, [sp, #28]
 800852e:	4654      	mov	r4, sl
 8008530:	2000      	movs	r0, #0
 8008532:	f04f 0c0a 	mov.w	ip, #10
 8008536:	4621      	mov	r1, r4
 8008538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800853c:	3b30      	subs	r3, #48	; 0x30
 800853e:	2b09      	cmp	r3, #9
 8008540:	d94e      	bls.n	80085e0 <_vfiprintf_r+0x1c4>
 8008542:	b1b0      	cbz	r0, 8008572 <_vfiprintf_r+0x156>
 8008544:	9207      	str	r2, [sp, #28]
 8008546:	e014      	b.n	8008572 <_vfiprintf_r+0x156>
 8008548:	eba0 0308 	sub.w	r3, r0, r8
 800854c:	fa09 f303 	lsl.w	r3, r9, r3
 8008550:	4313      	orrs	r3, r2
 8008552:	9304      	str	r3, [sp, #16]
 8008554:	46a2      	mov	sl, r4
 8008556:	e7d2      	b.n	80084fe <_vfiprintf_r+0xe2>
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	1d19      	adds	r1, r3, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	9103      	str	r1, [sp, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	bfbb      	ittet	lt
 8008564:	425b      	neglt	r3, r3
 8008566:	f042 0202 	orrlt.w	r2, r2, #2
 800856a:	9307      	strge	r3, [sp, #28]
 800856c:	9307      	strlt	r3, [sp, #28]
 800856e:	bfb8      	it	lt
 8008570:	9204      	strlt	r2, [sp, #16]
 8008572:	7823      	ldrb	r3, [r4, #0]
 8008574:	2b2e      	cmp	r3, #46	; 0x2e
 8008576:	d10c      	bne.n	8008592 <_vfiprintf_r+0x176>
 8008578:	7863      	ldrb	r3, [r4, #1]
 800857a:	2b2a      	cmp	r3, #42	; 0x2a
 800857c:	d135      	bne.n	80085ea <_vfiprintf_r+0x1ce>
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	1d1a      	adds	r2, r3, #4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	9203      	str	r2, [sp, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfb8      	it	lt
 800858a:	f04f 33ff 	movlt.w	r3, #4294967295
 800858e:	3402      	adds	r4, #2
 8008590:	9305      	str	r3, [sp, #20]
 8008592:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008678 <_vfiprintf_r+0x25c>
 8008596:	7821      	ldrb	r1, [r4, #0]
 8008598:	2203      	movs	r2, #3
 800859a:	4650      	mov	r0, sl
 800859c:	f7f7 fe30 	bl	8000200 <memchr>
 80085a0:	b140      	cbz	r0, 80085b4 <_vfiprintf_r+0x198>
 80085a2:	2340      	movs	r3, #64	; 0x40
 80085a4:	eba0 000a 	sub.w	r0, r0, sl
 80085a8:	fa03 f000 	lsl.w	r0, r3, r0
 80085ac:	9b04      	ldr	r3, [sp, #16]
 80085ae:	4303      	orrs	r3, r0
 80085b0:	3401      	adds	r4, #1
 80085b2:	9304      	str	r3, [sp, #16]
 80085b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b8:	482c      	ldr	r0, [pc, #176]	; (800866c <_vfiprintf_r+0x250>)
 80085ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085be:	2206      	movs	r2, #6
 80085c0:	f7f7 fe1e 	bl	8000200 <memchr>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d03f      	beq.n	8008648 <_vfiprintf_r+0x22c>
 80085c8:	4b29      	ldr	r3, [pc, #164]	; (8008670 <_vfiprintf_r+0x254>)
 80085ca:	bb1b      	cbnz	r3, 8008614 <_vfiprintf_r+0x1f8>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	3307      	adds	r3, #7
 80085d0:	f023 0307 	bic.w	r3, r3, #7
 80085d4:	3308      	adds	r3, #8
 80085d6:	9303      	str	r3, [sp, #12]
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	443b      	add	r3, r7
 80085dc:	9309      	str	r3, [sp, #36]	; 0x24
 80085de:	e767      	b.n	80084b0 <_vfiprintf_r+0x94>
 80085e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e4:	460c      	mov	r4, r1
 80085e6:	2001      	movs	r0, #1
 80085e8:	e7a5      	b.n	8008536 <_vfiprintf_r+0x11a>
 80085ea:	2300      	movs	r3, #0
 80085ec:	3401      	adds	r4, #1
 80085ee:	9305      	str	r3, [sp, #20]
 80085f0:	4619      	mov	r1, r3
 80085f2:	f04f 0c0a 	mov.w	ip, #10
 80085f6:	4620      	mov	r0, r4
 80085f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085fc:	3a30      	subs	r2, #48	; 0x30
 80085fe:	2a09      	cmp	r2, #9
 8008600:	d903      	bls.n	800860a <_vfiprintf_r+0x1ee>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0c5      	beq.n	8008592 <_vfiprintf_r+0x176>
 8008606:	9105      	str	r1, [sp, #20]
 8008608:	e7c3      	b.n	8008592 <_vfiprintf_r+0x176>
 800860a:	fb0c 2101 	mla	r1, ip, r1, r2
 800860e:	4604      	mov	r4, r0
 8008610:	2301      	movs	r3, #1
 8008612:	e7f0      	b.n	80085f6 <_vfiprintf_r+0x1da>
 8008614:	ab03      	add	r3, sp, #12
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	462a      	mov	r2, r5
 800861a:	4b16      	ldr	r3, [pc, #88]	; (8008674 <_vfiprintf_r+0x258>)
 800861c:	a904      	add	r1, sp, #16
 800861e:	4630      	mov	r0, r6
 8008620:	f7fd fd30 	bl	8006084 <_printf_float>
 8008624:	4607      	mov	r7, r0
 8008626:	1c78      	adds	r0, r7, #1
 8008628:	d1d6      	bne.n	80085d8 <_vfiprintf_r+0x1bc>
 800862a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800862c:	07d9      	lsls	r1, r3, #31
 800862e:	d405      	bmi.n	800863c <_vfiprintf_r+0x220>
 8008630:	89ab      	ldrh	r3, [r5, #12]
 8008632:	059a      	lsls	r2, r3, #22
 8008634:	d402      	bmi.n	800863c <_vfiprintf_r+0x220>
 8008636:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008638:	f7fd fbba 	bl	8005db0 <__retarget_lock_release_recursive>
 800863c:	89ab      	ldrh	r3, [r5, #12]
 800863e:	065b      	lsls	r3, r3, #25
 8008640:	f53f af12 	bmi.w	8008468 <_vfiprintf_r+0x4c>
 8008644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008646:	e711      	b.n	800846c <_vfiprintf_r+0x50>
 8008648:	ab03      	add	r3, sp, #12
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	462a      	mov	r2, r5
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <_vfiprintf_r+0x258>)
 8008650:	a904      	add	r1, sp, #16
 8008652:	4630      	mov	r0, r6
 8008654:	f7fd ffba 	bl	80065cc <_printf_i>
 8008658:	e7e4      	b.n	8008624 <_vfiprintf_r+0x208>
 800865a:	bf00      	nop
 800865c:	08008b64 	.word	0x08008b64
 8008660:	08008b84 	.word	0x08008b84
 8008664:	08008b44 	.word	0x08008b44
 8008668:	08008dcc 	.word	0x08008dcc
 800866c:	08008dd6 	.word	0x08008dd6
 8008670:	08006085 	.word	0x08006085
 8008674:	080083f7 	.word	0x080083f7
 8008678:	08008dd2 	.word	0x08008dd2

0800867c <__swbuf_r>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	460e      	mov	r6, r1
 8008680:	4614      	mov	r4, r2
 8008682:	4605      	mov	r5, r0
 8008684:	b118      	cbz	r0, 800868e <__swbuf_r+0x12>
 8008686:	6983      	ldr	r3, [r0, #24]
 8008688:	b90b      	cbnz	r3, 800868e <__swbuf_r+0x12>
 800868a:	f7fd facd 	bl	8005c28 <__sinit>
 800868e:	4b21      	ldr	r3, [pc, #132]	; (8008714 <__swbuf_r+0x98>)
 8008690:	429c      	cmp	r4, r3
 8008692:	d12b      	bne.n	80086ec <__swbuf_r+0x70>
 8008694:	686c      	ldr	r4, [r5, #4]
 8008696:	69a3      	ldr	r3, [r4, #24]
 8008698:	60a3      	str	r3, [r4, #8]
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	071a      	lsls	r2, r3, #28
 800869e:	d52f      	bpl.n	8008700 <__swbuf_r+0x84>
 80086a0:	6923      	ldr	r3, [r4, #16]
 80086a2:	b36b      	cbz	r3, 8008700 <__swbuf_r+0x84>
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	6820      	ldr	r0, [r4, #0]
 80086a8:	1ac0      	subs	r0, r0, r3
 80086aa:	6963      	ldr	r3, [r4, #20]
 80086ac:	b2f6      	uxtb	r6, r6
 80086ae:	4283      	cmp	r3, r0
 80086b0:	4637      	mov	r7, r6
 80086b2:	dc04      	bgt.n	80086be <__swbuf_r+0x42>
 80086b4:	4621      	mov	r1, r4
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7ff f8ac 	bl	8007814 <_fflush_r>
 80086bc:	bb30      	cbnz	r0, 800870c <__swbuf_r+0x90>
 80086be:	68a3      	ldr	r3, [r4, #8]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	6022      	str	r2, [r4, #0]
 80086ca:	701e      	strb	r6, [r3, #0]
 80086cc:	6963      	ldr	r3, [r4, #20]
 80086ce:	3001      	adds	r0, #1
 80086d0:	4283      	cmp	r3, r0
 80086d2:	d004      	beq.n	80086de <__swbuf_r+0x62>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	07db      	lsls	r3, r3, #31
 80086d8:	d506      	bpl.n	80086e8 <__swbuf_r+0x6c>
 80086da:	2e0a      	cmp	r6, #10
 80086dc:	d104      	bne.n	80086e8 <__swbuf_r+0x6c>
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f7ff f897 	bl	8007814 <_fflush_r>
 80086e6:	b988      	cbnz	r0, 800870c <__swbuf_r+0x90>
 80086e8:	4638      	mov	r0, r7
 80086ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <__swbuf_r+0x9c>)
 80086ee:	429c      	cmp	r4, r3
 80086f0:	d101      	bne.n	80086f6 <__swbuf_r+0x7a>
 80086f2:	68ac      	ldr	r4, [r5, #8]
 80086f4:	e7cf      	b.n	8008696 <__swbuf_r+0x1a>
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <__swbuf_r+0xa0>)
 80086f8:	429c      	cmp	r4, r3
 80086fa:	bf08      	it	eq
 80086fc:	68ec      	ldreq	r4, [r5, #12]
 80086fe:	e7ca      	b.n	8008696 <__swbuf_r+0x1a>
 8008700:	4621      	mov	r1, r4
 8008702:	4628      	mov	r0, r5
 8008704:	f000 f81a 	bl	800873c <__swsetup_r>
 8008708:	2800      	cmp	r0, #0
 800870a:	d0cb      	beq.n	80086a4 <__swbuf_r+0x28>
 800870c:	f04f 37ff 	mov.w	r7, #4294967295
 8008710:	e7ea      	b.n	80086e8 <__swbuf_r+0x6c>
 8008712:	bf00      	nop
 8008714:	08008b64 	.word	0x08008b64
 8008718:	08008b84 	.word	0x08008b84
 800871c:	08008b44 	.word	0x08008b44

08008720 <__ascii_wctomb>:
 8008720:	b149      	cbz	r1, 8008736 <__ascii_wctomb+0x16>
 8008722:	2aff      	cmp	r2, #255	; 0xff
 8008724:	bf85      	ittet	hi
 8008726:	238a      	movhi	r3, #138	; 0x8a
 8008728:	6003      	strhi	r3, [r0, #0]
 800872a:	700a      	strbls	r2, [r1, #0]
 800872c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008730:	bf98      	it	ls
 8008732:	2001      	movls	r0, #1
 8008734:	4770      	bx	lr
 8008736:	4608      	mov	r0, r1
 8008738:	4770      	bx	lr
	...

0800873c <__swsetup_r>:
 800873c:	4b32      	ldr	r3, [pc, #200]	; (8008808 <__swsetup_r+0xcc>)
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	681d      	ldr	r5, [r3, #0]
 8008742:	4606      	mov	r6, r0
 8008744:	460c      	mov	r4, r1
 8008746:	b125      	cbz	r5, 8008752 <__swsetup_r+0x16>
 8008748:	69ab      	ldr	r3, [r5, #24]
 800874a:	b913      	cbnz	r3, 8008752 <__swsetup_r+0x16>
 800874c:	4628      	mov	r0, r5
 800874e:	f7fd fa6b 	bl	8005c28 <__sinit>
 8008752:	4b2e      	ldr	r3, [pc, #184]	; (800880c <__swsetup_r+0xd0>)
 8008754:	429c      	cmp	r4, r3
 8008756:	d10f      	bne.n	8008778 <__swsetup_r+0x3c>
 8008758:	686c      	ldr	r4, [r5, #4]
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008760:	0719      	lsls	r1, r3, #28
 8008762:	d42c      	bmi.n	80087be <__swsetup_r+0x82>
 8008764:	06dd      	lsls	r5, r3, #27
 8008766:	d411      	bmi.n	800878c <__swsetup_r+0x50>
 8008768:	2309      	movs	r3, #9
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	f04f 30ff 	mov.w	r0, #4294967295
 8008776:	e03e      	b.n	80087f6 <__swsetup_r+0xba>
 8008778:	4b25      	ldr	r3, [pc, #148]	; (8008810 <__swsetup_r+0xd4>)
 800877a:	429c      	cmp	r4, r3
 800877c:	d101      	bne.n	8008782 <__swsetup_r+0x46>
 800877e:	68ac      	ldr	r4, [r5, #8]
 8008780:	e7eb      	b.n	800875a <__swsetup_r+0x1e>
 8008782:	4b24      	ldr	r3, [pc, #144]	; (8008814 <__swsetup_r+0xd8>)
 8008784:	429c      	cmp	r4, r3
 8008786:	bf08      	it	eq
 8008788:	68ec      	ldreq	r4, [r5, #12]
 800878a:	e7e6      	b.n	800875a <__swsetup_r+0x1e>
 800878c:	0758      	lsls	r0, r3, #29
 800878e:	d512      	bpl.n	80087b6 <__swsetup_r+0x7a>
 8008790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008792:	b141      	cbz	r1, 80087a6 <__swsetup_r+0x6a>
 8008794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008798:	4299      	cmp	r1, r3
 800879a:	d002      	beq.n	80087a2 <__swsetup_r+0x66>
 800879c:	4630      	mov	r0, r6
 800879e:	f7fd fb27 	bl	8005df0 <_free_r>
 80087a2:	2300      	movs	r3, #0
 80087a4:	6363      	str	r3, [r4, #52]	; 0x34
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	2300      	movs	r3, #0
 80087b0:	6063      	str	r3, [r4, #4]
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f043 0308 	orr.w	r3, r3, #8
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	b94b      	cbnz	r3, 80087d6 <__swsetup_r+0x9a>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087cc:	d003      	beq.n	80087d6 <__swsetup_r+0x9a>
 80087ce:	4621      	mov	r1, r4
 80087d0:	4630      	mov	r0, r6
 80087d2:	f000 f84d 	bl	8008870 <__smakebuf_r>
 80087d6:	89a0      	ldrh	r0, [r4, #12]
 80087d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087dc:	f010 0301 	ands.w	r3, r0, #1
 80087e0:	d00a      	beq.n	80087f8 <__swsetup_r+0xbc>
 80087e2:	2300      	movs	r3, #0
 80087e4:	60a3      	str	r3, [r4, #8]
 80087e6:	6963      	ldr	r3, [r4, #20]
 80087e8:	425b      	negs	r3, r3
 80087ea:	61a3      	str	r3, [r4, #24]
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	b943      	cbnz	r3, 8008802 <__swsetup_r+0xc6>
 80087f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087f4:	d1ba      	bne.n	800876c <__swsetup_r+0x30>
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	0781      	lsls	r1, r0, #30
 80087fa:	bf58      	it	pl
 80087fc:	6963      	ldrpl	r3, [r4, #20]
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	e7f4      	b.n	80087ec <__swsetup_r+0xb0>
 8008802:	2000      	movs	r0, #0
 8008804:	e7f7      	b.n	80087f6 <__swsetup_r+0xba>
 8008806:	bf00      	nop
 8008808:	20000010 	.word	0x20000010
 800880c:	08008b64 	.word	0x08008b64
 8008810:	08008b84 	.word	0x08008b84
 8008814:	08008b44 	.word	0x08008b44

08008818 <abort>:
 8008818:	b508      	push	{r3, lr}
 800881a:	2006      	movs	r0, #6
 800881c:	f000 f898 	bl	8008950 <raise>
 8008820:	2001      	movs	r0, #1
 8008822:	f7f8 fdeb 	bl	80013fc <_exit>

08008826 <__swhatbuf_r>:
 8008826:	b570      	push	{r4, r5, r6, lr}
 8008828:	460e      	mov	r6, r1
 800882a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882e:	2900      	cmp	r1, #0
 8008830:	b096      	sub	sp, #88	; 0x58
 8008832:	4614      	mov	r4, r2
 8008834:	461d      	mov	r5, r3
 8008836:	da07      	bge.n	8008848 <__swhatbuf_r+0x22>
 8008838:	2300      	movs	r3, #0
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	89b3      	ldrh	r3, [r6, #12]
 800883e:	061a      	lsls	r2, r3, #24
 8008840:	d410      	bmi.n	8008864 <__swhatbuf_r+0x3e>
 8008842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008846:	e00e      	b.n	8008866 <__swhatbuf_r+0x40>
 8008848:	466a      	mov	r2, sp
 800884a:	f000 f89d 	bl	8008988 <_fstat_r>
 800884e:	2800      	cmp	r0, #0
 8008850:	dbf2      	blt.n	8008838 <__swhatbuf_r+0x12>
 8008852:	9a01      	ldr	r2, [sp, #4]
 8008854:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008858:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800885c:	425a      	negs	r2, r3
 800885e:	415a      	adcs	r2, r3
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	e7ee      	b.n	8008842 <__swhatbuf_r+0x1c>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	2000      	movs	r0, #0
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	b016      	add	sp, #88	; 0x58
 800886c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008870 <__smakebuf_r>:
 8008870:	898b      	ldrh	r3, [r1, #12]
 8008872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008874:	079d      	lsls	r5, r3, #30
 8008876:	4606      	mov	r6, r0
 8008878:	460c      	mov	r4, r1
 800887a:	d507      	bpl.n	800888c <__smakebuf_r+0x1c>
 800887c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	2301      	movs	r3, #1
 8008886:	6163      	str	r3, [r4, #20]
 8008888:	b002      	add	sp, #8
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	ab01      	add	r3, sp, #4
 800888e:	466a      	mov	r2, sp
 8008890:	f7ff ffc9 	bl	8008826 <__swhatbuf_r>
 8008894:	9900      	ldr	r1, [sp, #0]
 8008896:	4605      	mov	r5, r0
 8008898:	4630      	mov	r0, r6
 800889a:	f7fd faf9 	bl	8005e90 <_malloc_r>
 800889e:	b948      	cbnz	r0, 80088b4 <__smakebuf_r+0x44>
 80088a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a4:	059a      	lsls	r2, r3, #22
 80088a6:	d4ef      	bmi.n	8008888 <__smakebuf_r+0x18>
 80088a8:	f023 0303 	bic.w	r3, r3, #3
 80088ac:	f043 0302 	orr.w	r3, r3, #2
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	e7e3      	b.n	800887c <__smakebuf_r+0xc>
 80088b4:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <__smakebuf_r+0x7c>)
 80088b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	6020      	str	r0, [r4, #0]
 80088bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	9b00      	ldr	r3, [sp, #0]
 80088c4:	6163      	str	r3, [r4, #20]
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	6120      	str	r0, [r4, #16]
 80088ca:	b15b      	cbz	r3, 80088e4 <__smakebuf_r+0x74>
 80088cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f86b 	bl	80089ac <_isatty_r>
 80088d6:	b128      	cbz	r0, 80088e4 <__smakebuf_r+0x74>
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	f023 0303 	bic.w	r3, r3, #3
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	89a0      	ldrh	r0, [r4, #12]
 80088e6:	4305      	orrs	r5, r0
 80088e8:	81a5      	strh	r5, [r4, #12]
 80088ea:	e7cd      	b.n	8008888 <__smakebuf_r+0x18>
 80088ec:	08005bc1 	.word	0x08005bc1

080088f0 <_malloc_usable_size_r>:
 80088f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f4:	1f18      	subs	r0, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfbc      	itt	lt
 80088fa:	580b      	ldrlt	r3, [r1, r0]
 80088fc:	18c0      	addlt	r0, r0, r3
 80088fe:	4770      	bx	lr

08008900 <_raise_r>:
 8008900:	291f      	cmp	r1, #31
 8008902:	b538      	push	{r3, r4, r5, lr}
 8008904:	4604      	mov	r4, r0
 8008906:	460d      	mov	r5, r1
 8008908:	d904      	bls.n	8008914 <_raise_r+0x14>
 800890a:	2316      	movs	r3, #22
 800890c:	6003      	str	r3, [r0, #0]
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008916:	b112      	cbz	r2, 800891e <_raise_r+0x1e>
 8008918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800891c:	b94b      	cbnz	r3, 8008932 <_raise_r+0x32>
 800891e:	4620      	mov	r0, r4
 8008920:	f000 f830 	bl	8008984 <_getpid_r>
 8008924:	462a      	mov	r2, r5
 8008926:	4601      	mov	r1, r0
 8008928:	4620      	mov	r0, r4
 800892a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800892e:	f000 b817 	b.w	8008960 <_kill_r>
 8008932:	2b01      	cmp	r3, #1
 8008934:	d00a      	beq.n	800894c <_raise_r+0x4c>
 8008936:	1c59      	adds	r1, r3, #1
 8008938:	d103      	bne.n	8008942 <_raise_r+0x42>
 800893a:	2316      	movs	r3, #22
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	2001      	movs	r0, #1
 8008940:	e7e7      	b.n	8008912 <_raise_r+0x12>
 8008942:	2400      	movs	r4, #0
 8008944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008948:	4628      	mov	r0, r5
 800894a:	4798      	blx	r3
 800894c:	2000      	movs	r0, #0
 800894e:	e7e0      	b.n	8008912 <_raise_r+0x12>

08008950 <raise>:
 8008950:	4b02      	ldr	r3, [pc, #8]	; (800895c <raise+0xc>)
 8008952:	4601      	mov	r1, r0
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	f7ff bfd3 	b.w	8008900 <_raise_r>
 800895a:	bf00      	nop
 800895c:	20000010 	.word	0x20000010

08008960 <_kill_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d07      	ldr	r5, [pc, #28]	; (8008980 <_kill_r+0x20>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	4611      	mov	r1, r2
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	f7f8 fd35 	bl	80013dc <_kill>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d102      	bne.n	800897c <_kill_r+0x1c>
 8008976:	682b      	ldr	r3, [r5, #0]
 8008978:	b103      	cbz	r3, 800897c <_kill_r+0x1c>
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	bf00      	nop
 8008980:	20005560 	.word	0x20005560

08008984 <_getpid_r>:
 8008984:	f7f8 bd22 	b.w	80013cc <_getpid>

08008988 <_fstat_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	; (80089a8 <_fstat_r+0x20>)
 800898c:	2300      	movs	r3, #0
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	4611      	mov	r1, r2
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	f7f8 fd80 	bl	800149a <_fstat>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d102      	bne.n	80089a4 <_fstat_r+0x1c>
 800899e:	682b      	ldr	r3, [r5, #0]
 80089a0:	b103      	cbz	r3, 80089a4 <_fstat_r+0x1c>
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
 80089a6:	bf00      	nop
 80089a8:	20005560 	.word	0x20005560

080089ac <_isatty_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d06      	ldr	r5, [pc, #24]	; (80089c8 <_isatty_r+0x1c>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	602b      	str	r3, [r5, #0]
 80089b8:	f7f8 fd7f 	bl	80014ba <_isatty>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_isatty_r+0x1a>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_isatty_r+0x1a>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	20005560 	.word	0x20005560

080089cc <_init>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr

080089d8 <_fini>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr
